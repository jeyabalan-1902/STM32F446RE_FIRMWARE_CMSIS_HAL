
BOOTLOADER_F446RET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004980  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08004b50  08004b50  00005b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005044  08005044  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005044  08005044  00006044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800504c  0800504c  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800504c  0800504c  0000604c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005050  08005050  00006050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005054  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000070  080050c4  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  080050c4  00007360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a37b  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f09  00000000  00000000  0001141b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  00013328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ae  00000000  00000000  00013d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000221b4  00000000  00000000  000144f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c473  00000000  00000000  000366aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb1a3  00000000  00000000  00042b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010dcc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000301c  00000000  00000000  0010dd04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00110d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004b38 	.word	0x08004b38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004b38 	.word	0x08004b38

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f001 f924 	bl	80017f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f82a 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 f8fc 	bl	80007a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b0:	f000 f8a6 	bl	8000700 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005b4:	f000 f8ce 	bl	8000754 <MX_USART3_UART_Init>
  MX_CRC_Init();
 80005b8:	f000 f88e 	bl	80006d8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  printf("Bootloader ready...\n");
 80005bc:	480c      	ldr	r0, [pc, #48]	@ (80005f0 <main+0x50>)
 80005be:	f003 fc57 	bl	8003e70 <puts>
  if (HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin) == GPIO_PIN_RESET)
 80005c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c6:	480b      	ldr	r0, [pc, #44]	@ (80005f4 <main+0x54>)
 80005c8:	f001 fffa 	bl	80025c0 <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d105      	bne.n	80005de <main+0x3e>
  {
	  printf("Button is pressed...going to bootloader mode\n\r");
 80005d2:	4809      	ldr	r0, [pc, #36]	@ (80005f8 <main+0x58>)
 80005d4:	f003 fbe4 	bl	8003da0 <iprintf>
	  bootloader_read_uart_data();
 80005d8:	f000 f954 	bl	8000884 <bootloader_read_uart_data>
 80005dc:	e005      	b.n	80005ea <main+0x4a>
  }
  else
  {
	  printf("button is not pressed...execute application code\n\r");
 80005de:	4807      	ldr	r0, [pc, #28]	@ (80005fc <main+0x5c>)
 80005e0:	f003 fbde 	bl	8003da0 <iprintf>
	  bootloader_jump_to_application();
 80005e4:	f000 f9bc 	bl	8000960 <bootloader_jump_to_application>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
 80005ec:	e7fd      	b.n	80005ea <main+0x4a>
 80005ee:	bf00      	nop
 80005f0:	08004b50 	.word	0x08004b50
 80005f4:	40020800 	.word	0x40020800
 80005f8:	08004b64 	.word	0x08004b64
 80005fc:	08004b94 	.word	0x08004b94

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	@ 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	2234      	movs	r2, #52	@ 0x34
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fd0e 	bl	8004030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b29      	ldr	r3, [pc, #164]	@ (80006d0 <SystemClock_Config+0xd0>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	4a28      	ldr	r2, [pc, #160]	@ (80006d0 <SystemClock_Config+0xd0>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	@ 0x40
 8000634:	4b26      	ldr	r3, [pc, #152]	@ (80006d0 <SystemClock_Config+0xd0>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000640:	2300      	movs	r3, #0
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	4b23      	ldr	r3, [pc, #140]	@ (80006d4 <SystemClock_Config+0xd4>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800064c:	4a21      	ldr	r2, [pc, #132]	@ (80006d4 <SystemClock_Config+0xd4>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <SystemClock_Config+0xd4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000670:	2300      	movs	r3, #0
 8000672:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000674:	2308      	movs	r3, #8
 8000676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000678:	2354      	movs	r3, #84	@ 0x54
 800067a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000680:	2302      	movs	r3, #2
 8000682:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000684:	2302      	movs	r3, #2
 8000686:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	4618      	mov	r0, r3
 800068e:	f002 fb85 	bl	8002d9c <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000698:	f000 fead 	bl	80013f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b2:	f107 0308 	add.w	r3, r7, #8
 80006b6:	2102      	movs	r1, #2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 ffb3 	bl	8002624 <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006c4:	f000 fe97 	bl	80013f6 <Error_Handler>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3750      	adds	r7, #80	@ 0x50
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006dc:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <MX_CRC_Init+0x20>)
 80006de:	4a07      	ldr	r2, [pc, #28]	@ (80006fc <MX_CRC_Init+0x24>)
 80006e0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <MX_CRC_Init+0x20>)
 80006e4:	f001 fa11 	bl	8001b0a <HAL_CRC_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006ee:	f000 fe82 	bl	80013f6 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000008c 	.word	0x2000008c
 80006fc:	40023000 	.word	0x40023000

08000700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000704:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000706:	4a12      	ldr	r2, [pc, #72]	@ (8000750 <MX_USART2_UART_Init+0x50>)
 8000708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070a:	4b10      	ldr	r3, [pc, #64]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b08      	ldr	r3, [pc, #32]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000738:	f002 fdce 	bl	80032d8 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000742:	f000 fe58 	bl	80013f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000094 	.word	0x20000094
 8000750:	40004400 	.word	0x40004400

08000754 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000758:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 800075a:	4a12      	ldr	r2, [pc, #72]	@ (80007a4 <MX_USART3_UART_Init+0x50>)
 800075c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800075e:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 800078c:	f002 fda4 	bl	80032d8 <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000796:	f000 fe2e 	bl	80013f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000dc 	.word	0x200000dc
 80007a4:	40004800 	.word	0x40004800

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	@ 0x28
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000878 <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a2c      	ldr	r2, [pc, #176]	@ (8000878 <MX_GPIO_Init+0xd0>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000878 <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b26      	ldr	r3, [pc, #152]	@ (8000878 <MX_GPIO_Init+0xd0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a25      	ldr	r2, [pc, #148]	@ (8000878 <MX_GPIO_Init+0xd0>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b23      	ldr	r3, [pc, #140]	@ (8000878 <MX_GPIO_Init+0xd0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000878 <MX_GPIO_Init+0xd0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a1e      	ldr	r2, [pc, #120]	@ (8000878 <MX_GPIO_Init+0xd0>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <MX_GPIO_Init+0xd0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <MX_GPIO_Init+0xd0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a17      	ldr	r2, [pc, #92]	@ (8000878 <MX_GPIO_Init+0xd0>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <MX_GPIO_Init+0xd0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2120      	movs	r1, #32
 8000832:	4812      	ldr	r0, [pc, #72]	@ (800087c <MX_GPIO_Init+0xd4>)
 8000834:	f001 fedc 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8000838:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000842:	2302      	movs	r3, #2
 8000844:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	480c      	ldr	r0, [pc, #48]	@ (8000880 <MX_GPIO_Init+0xd8>)
 800084e:	f001 fd23 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000852:	2320      	movs	r3, #32
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	4804      	ldr	r0, [pc, #16]	@ (800087c <MX_GPIO_Init+0xd4>)
 800086a:	f001 fd15 	bl	8002298 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086e:	bf00      	nop
 8000870:	3728      	adds	r7, #40	@ 0x28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40020000 	.word	0x40020000
 8000880:	40020800 	.word	0x40020800

08000884 <bootloader_read_uart_data>:

/* USER CODE BEGIN 4 */

void bootloader_read_uart_data(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
	uint8_t rcv_len = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		memset(bl_rx_buffer, 0, 200);
 800088e:	22c8      	movs	r2, #200	@ 0xc8
 8000890:	2100      	movs	r1, #0
 8000892:	4830      	ldr	r0, [pc, #192]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 8000894:	f003 fbcc 	bl	8004030 <memset>
		HAL_UART_Receive(&huart3, &bl_rx_buffer, 1, HAL_MAX_DELAY);
 8000898:	f04f 33ff 	mov.w	r3, #4294967295
 800089c:	2201      	movs	r2, #1
 800089e:	492d      	ldr	r1, [pc, #180]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 80008a0:	482d      	ldr	r0, [pc, #180]	@ (8000958 <bootloader_read_uart_data+0xd4>)
 80008a2:	f002 fdf4 	bl	800348e <HAL_UART_Receive>
		rcv_len = bl_rx_buffer[0];
 80008a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(&huart3, &bl_rx_buffer[1], rcv_len, HAL_MAX_DELAY);
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	f04f 33ff 	mov.w	r3, #4294967295
 80008b4:	4929      	ldr	r1, [pc, #164]	@ (800095c <bootloader_read_uart_data+0xd8>)
 80008b6:	4828      	ldr	r0, [pc, #160]	@ (8000958 <bootloader_read_uart_data+0xd4>)
 80008b8:	f002 fde9 	bl	800348e <HAL_UART_Receive>
		switch(bl_rx_buffer[1])
 80008bc:	4b25      	ldr	r3, [pc, #148]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 80008be:	785b      	ldrb	r3, [r3, #1]
 80008c0:	3b51      	subs	r3, #81	@ 0x51
 80008c2:	2b0a      	cmp	r3, #10
 80008c4:	d844      	bhi.n	8000950 <bootloader_read_uart_data+0xcc>
 80008c6:	a201      	add	r2, pc, #4	@ (adr r2, 80008cc <bootloader_read_uart_data+0x48>)
 80008c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008cc:	080008f9 	.word	0x080008f9
 80008d0:	08000901 	.word	0x08000901
 80008d4:	08000909 	.word	0x08000909
 80008d8:	08000911 	.word	0x08000911
 80008dc:	08000919 	.word	0x08000919
 80008e0:	08000921 	.word	0x08000921
 80008e4:	08000929 	.word	0x08000929
 80008e8:	08000931 	.word	0x08000931
 80008ec:	08000939 	.word	0x08000939
 80008f0:	08000941 	.word	0x08000941
 80008f4:	08000949 	.word	0x08000949
		{
			case BL_GET_VER:
				bootloader_handle_getver_cmd(bl_rx_buffer);
 80008f8:	4816      	ldr	r0, [pc, #88]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 80008fa:	f000 fb2f 	bl	8000f5c <bootloader_handle_getver_cmd>
				break;
 80008fe:	e028      	b.n	8000952 <bootloader_read_uart_data+0xce>
			case BL_GET_HELP:
				bootloader_handle_gethelp_cmd(bl_rx_buffer);
 8000900:	4814      	ldr	r0, [pc, #80]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 8000902:	f000 faf1 	bl	8000ee8 <bootloader_handle_gethelp_cmd>
				break;
 8000906:	e024      	b.n	8000952 <bootloader_read_uart_data+0xce>
			case BL_GET_CID:
				bootloader_handle_getcid_cmd(bl_rx_buffer);
 8000908:	4812      	ldr	r0, [pc, #72]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 800090a:	f000 faa3 	bl	8000e54 <bootloader_handle_getcid_cmd>
				break;
 800090e:	e020      	b.n	8000952 <bootloader_read_uart_data+0xce>
			case BL_GET_RDP_STATUS:
				bootloader_handle_getrdp_cmd(bl_rx_buffer);
 8000910:	4810      	ldr	r0, [pc, #64]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 8000912:	f000 fa55 	bl	8000dc0 <bootloader_handle_getrdp_cmd>
		 	    break;
 8000916:	e01c      	b.n	8000952 <bootloader_read_uart_data+0xce>
			case BL_GO_TO_ADDR:
				bootloader_handle_go_cmd(bl_rx_buffer);
 8000918:	480e      	ldr	r0, [pc, #56]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 800091a:	f000 f9e9 	bl	8000cf0 <bootloader_handle_go_cmd>
				break;
 800091e:	e018      	b.n	8000952 <bootloader_read_uart_data+0xce>
			case BL_FLASH_ERASE:
				bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8000920:	480c      	ldr	r0, [pc, #48]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 8000922:	f000 f97d 	bl	8000c20 <bootloader_handle_flash_erase_cmd>
				break;
 8000926:	e014      	b.n	8000952 <bootloader_read_uart_data+0xce>
			case BL_MEM_WRITE:
				bootloader_handle_mem_write_cmd(bl_rx_buffer);
 8000928:	480a      	ldr	r0, [pc, #40]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 800092a:	f000 f8f5 	bl	8000b18 <bootloader_handle_mem_write_cmd>
				break;
 800092e:	e010      	b.n	8000952 <bootloader_read_uart_data+0xce>
			case BL_EN_RW_PROTECT:
				bootloader_handle_endis_rw_protect(bl_rx_buffer);
 8000930:	4808      	ldr	r0, [pc, #32]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 8000932:	f000 f8a1 	bl	8000a78 <bootloader_handle_endis_rw_protect>
				break;
 8000936:	e00c      	b.n	8000952 <bootloader_read_uart_data+0xce>
			case BL_MEM_READ:
				bootloader_handle_mem_read(bl_rx_buffer);
 8000938:	4806      	ldr	r0, [pc, #24]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 800093a:	f000 f893 	bl	8000a64 <bootloader_handle_mem_read>
				break;
 800093e:	e008      	b.n	8000952 <bootloader_read_uart_data+0xce>
			case BL_READ_SECTOR_STATUS:
				bootloader_handle_read_sector_status(bl_rx_buffer);
 8000940:	4804      	ldr	r0, [pc, #16]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 8000942:	f000 f849 	bl	80009d8 <bootloader_handle_read_sector_status>
				break;
 8000946:	e004      	b.n	8000952 <bootloader_read_uart_data+0xce>
			case BL_OTP_READ:
				bootloader_handle_read_otp(bl_rx_buffer);
 8000948:	4802      	ldr	r0, [pc, #8]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 800094a:	f000 f83b 	bl	80009c4 <bootloader_handle_read_otp>
				break;
 800094e:	e000      	b.n	8000952 <bootloader_read_uart_data+0xce>
			default:
				break;
 8000950:	bf00      	nop
		memset(bl_rx_buffer, 0, 200);
 8000952:	e79c      	b.n	800088e <bootloader_read_uart_data+0xa>
 8000954:	20000124 	.word	0x20000124
 8000958:	200000dc 	.word	0x200000dc
 800095c:	20000125 	.word	0x20000125

08000960 <bootloader_jump_to_application>:
		}
	}
}

void bootloader_jump_to_application(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
	printf("jumping to user application...\n");
 8000966:	4812      	ldr	r0, [pc, #72]	@ (80009b0 <bootloader_jump_to_application+0x50>)
 8000968:	f003 fa82 	bl	8003e70 <puts>
	void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (0x08008000 + 4U)));
 800096c:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <bootloader_jump_to_application+0x54>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	607b      	str	r3, [r7, #4]
    printf("app reset handler addr:%#lx\n", app_reset_handler);
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	4810      	ldr	r0, [pc, #64]	@ (80009b8 <bootloader_jump_to_application+0x58>)
 8000976:	f003 fa13 	bl	8003da0 <iprintf>
	  /* Reset the Clock */
	  HAL_RCC_DeInit();
 800097a:	f002 f917 	bl	8002bac <HAL_RCC_DeInit>
	  HAL_DeInit();
 800097e:	f000 ff59 	bl	8001834 <HAL_DeInit>
	  __set_MSP(*(volatile uint32_t*) 0x08008000);
 8000982:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <bootloader_jump_to_application+0x5c>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	f383 8808 	msr	MSP, r3
}
 800098e:	bf00      	nop
	  SysTick->CTRL = 0;
 8000990:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <bootloader_jump_to_application+0x60>)
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
	  SysTick->LOAD = 0;
 8000996:	4b0a      	ldr	r3, [pc, #40]	@ (80009c0 <bootloader_jump_to_application+0x60>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]
	  SysTick->VAL = 0;
 800099c:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <bootloader_jump_to_application+0x60>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]

	  /* Jump to application */
	  app_reset_handler();
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4798      	blx	r3
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	08004bc8 	.word	0x08004bc8
 80009b4:	08008004 	.word	0x08008004
 80009b8:	08004be8 	.word	0x08004be8
 80009bc:	08008000 	.word	0x08008000
 80009c0:	e000e010 	.word	0xe000e010

080009c4 <bootloader_handle_read_otp>:

void bootloader_handle_read_otp(uint8_t *bl_rx_buffer)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <bootloader_handle_read_sector_status>:

void bootloader_handle_read_sector_status(uint8_t *bl_rx_buffer)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	uint16_t status;
	printf("BL_DEBUG_MSG:bootloader_handle_read_sector_protection_status\n");
 80009e0:	481c      	ldr	r0, [pc, #112]	@ (8000a54 <bootloader_handle_read_sector_status+0x7c>)
 80009e2:	f003 fa45 	bl	8003e70 <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	3301      	adds	r3, #1
 80009ec:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	3b04      	subs	r3, #4
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	4413      	add	r3, r2
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	3b04      	subs	r3, #4
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4619      	mov	r1, r3
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f000 fb1e 	bl	8001044 <bootloader_verify_crc>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d118      	bne.n	8000a40 <bootloader_handle_read_sector_status+0x68>
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
 8000a0e:	4812      	ldr	r0, [pc, #72]	@ (8000a58 <bootloader_handle_read_sector_status+0x80>)
 8000a10:	f003 fa2e 	bl	8003e70 <puts>
		bootloader_send_ack(bl_rx_buffer[0],2);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2102      	movs	r1, #2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 fae6 	bl	8000fec <bootloader_send_ack>
		status=read_OB_rw_protection_status();
 8000a20:	f000 fcd8 	bl	80013d4 <read_OB_rw_protection_status>
 8000a24:	4603      	mov	r3, r0
 8000a26:	81fb      	strh	r3, [r7, #14]
		printf("BL_DEBUG_MSG: nWRP status: %#x\n",status);
 8000a28:	89fb      	ldrh	r3, [r7, #14]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480b      	ldr	r0, [pc, #44]	@ (8000a5c <bootloader_handle_read_sector_status+0x84>)
 8000a2e:	f003 f9b7 	bl	8003da0 <iprintf>
		bootloader_uart_write_data((uint8_t*)&status,2);
 8000a32:	f107 030e 	add.w	r3, r7, #14
 8000a36:	2102      	movs	r1, #2
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 fb2f 	bl	800109c <bootloader_uart_write_data>
	else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000a3e:	e004      	b.n	8000a4a <bootloader_handle_read_sector_status+0x72>
		printf("BL_DEBUG_MSG:checksum fail !!\n");
 8000a40:	4807      	ldr	r0, [pc, #28]	@ (8000a60 <bootloader_handle_read_sector_status+0x88>)
 8000a42:	f003 fa15 	bl	8003e70 <puts>
		bootloader_send_nack();
 8000a46:	f000 faeb 	bl	8001020 <bootloader_send_nack>
}
 8000a4a:	bf00      	nop
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	08004c08 	.word	0x08004c08
 8000a58:	08004c48 	.word	0x08004c48
 8000a5c:	08004c6c 	.word	0x08004c6c
 8000a60:	08004c8c 	.word	0x08004c8c

08000a64 <bootloader_handle_mem_read>:

void bootloader_handle_mem_read(uint8_t *bl_rx_buffer)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]


}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <bootloader_handle_endis_rw_protect>:
        bootloader_send_nack();
	}
}

void bootloader_handle_endis_rw_protect(uint8_t *bl_rx_buffer)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x00;
 8000a80:	2300      	movs	r3, #0
 8000a82:	73fb      	strb	r3, [r7, #15]
	printf("BL_DEBUG_MSG:bootloader_handle_endis_rw_protect\n");
 8000a84:	4820      	ldr	r0, [pc, #128]	@ (8000b08 <bootloader_handle_endis_rw_protect+0x90>)
 8000a86:	f003 f9f3 	bl	8003e70 <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3b04      	subs	r3, #4
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	3b04      	subs	r3, #4
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f000 facc 	bl	8001044 <bootloader_verify_crc>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d120      	bne.n	8000af4 <bootloader_handle_endis_rw_protect+0x7c>
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
 8000ab2:	4816      	ldr	r0, [pc, #88]	@ (8000b0c <bootloader_handle_endis_rw_protect+0x94>)
 8000ab4:	f003 f9dc 	bl	8003e70 <puts>
		bootloader_send_ack(bl_rx_buffer[0],1);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2101      	movs	r1, #1
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 fa94 	bl	8000fec <bootloader_send_ack>
		status = configure_flash_sector_rw_protection(bl_rx_buffer[2] , bl_rx_buffer[3],0);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3302      	adds	r3, #2
 8000ac8:	7818      	ldrb	r0, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	3303      	adds	r3, #3
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	f000 fbe8 	bl	80012a8 <configure_flash_sector_rw_protection>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	73fb      	strb	r3, [r7, #15]
		printf("BL_DEBUG_MSG: flash erase status: %#x\n",status);
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	4619      	mov	r1, r3
 8000ae0:	480b      	ldr	r0, [pc, #44]	@ (8000b10 <bootloader_handle_endis_rw_protect+0x98>)
 8000ae2:	f003 f95d 	bl	8003da0 <iprintf>
		bootloader_uart_write_data(&status,1);
 8000ae6:	f107 030f 	add.w	r3, r7, #15
 8000aea:	2101      	movs	r1, #1
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 fad5 	bl	800109c <bootloader_uart_write_data>
	}else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000af2:	e004      	b.n	8000afe <bootloader_handle_endis_rw_protect+0x86>
		printf("BL_DEBUG_MSG:checksum fail !!\n");
 8000af4:	4807      	ldr	r0, [pc, #28]	@ (8000b14 <bootloader_handle_endis_rw_protect+0x9c>)
 8000af6:	f003 f9bb 	bl	8003e70 <puts>
		bootloader_send_nack();
 8000afa:	f000 fa91 	bl	8001020 <bootloader_send_nack>
}
 8000afe:	bf00      	nop
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	08004d04 	.word	0x08004d04
 8000b0c:	08004c48 	.word	0x08004c48
 8000b10:	08004cdc 	.word	0x08004cdc
 8000b14:	08004c8c 	.word	0x08004c8c

08000b18 <bootloader_handle_mem_write_cmd>:

void bootloader_handle_mem_write_cmd(uint8_t *bl_rx_buffer)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	uint8_t write_status = 0x00;
 8000b20:	2300      	movs	r3, #0
 8000b22:	73fb      	strb	r3, [r7, #15]
	uint8_t chksum =0, len=0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	77fb      	strb	r3, [r7, #31]
 8000b28:	2300      	movs	r3, #0
 8000b2a:	77bb      	strb	r3, [r7, #30]
	len = bl_rx_buffer[0];
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	77bb      	strb	r3, [r7, #30]
	uint8_t payload_len = bl_rx_buffer[6];
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	799b      	ldrb	r3, [r3, #6]
 8000b36:	777b      	strb	r3, [r7, #29]
	uint32_t mem_address = *((uint32_t *) ( &bl_rx_buffer[2]) );
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000b3e:	61bb      	str	r3, [r7, #24]
	chksum = bl_rx_buffer[len];
 8000b40:	7fbb      	ldrb	r3, [r7, #30]
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	77fb      	strb	r3, [r7, #31]
	printf("BL_DEBUG_MSG:bootloader_handle_mem_write_cmd\n");
 8000b4a:	482e      	ldr	r0, [pc, #184]	@ (8000c04 <bootloader_handle_mem_write_cmd+0xec>)
 8000b4c:	f003 f990 	bl	8003e70 <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	3301      	adds	r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	4413      	add	r3, r2
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	613b      	str	r3, [r7, #16]


	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	3b04      	subs	r3, #4
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 fa69 	bl	8001044 <bootloader_verify_crc>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d13b      	bne.n	8000bf0 <bootloader_handle_mem_write_cmd+0xd8>
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
 8000b78:	4823      	ldr	r0, [pc, #140]	@ (8000c08 <bootloader_handle_mem_write_cmd+0xf0>)
 8000b7a:	f003 f979 	bl	8003e70 <puts>

		bootloader_send_ack(bl_rx_buffer[0],1);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2101      	movs	r1, #1
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 fa31 	bl	8000fec <bootloader_send_ack>

		printf("BL_DEBUG_MSG: mem write address : %#x\n",mem_address);
 8000b8a:	69b9      	ldr	r1, [r7, #24]
 8000b8c:	481f      	ldr	r0, [pc, #124]	@ (8000c0c <bootloader_handle_mem_write_cmd+0xf4>)
 8000b8e:	f003 f907 	bl	8003da0 <iprintf>

		if( verify_address(mem_address) == ADDR_VALID )
 8000b92:	69b8      	ldr	r0, [r7, #24]
 8000b94:	f000 fad6 	bl	8001144 <verify_address>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d11c      	bne.n	8000bd8 <bootloader_handle_mem_write_cmd+0xc0>
		{
			printf("BL_DEBUG_MSG: valid mem write address\n");
 8000b9e:	481c      	ldr	r0, [pc, #112]	@ (8000c10 <bootloader_handle_mem_write_cmd+0xf8>)
 8000ba0:	f003 f966 	bl	8003e70 <puts>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2120      	movs	r1, #32
 8000ba8:	481a      	ldr	r0, [pc, #104]	@ (8000c14 <bootloader_handle_mem_write_cmd+0xfc>)
 8000baa:	f001 fd21 	bl	80025f0 <HAL_GPIO_WritePin>
			write_status = execute_mem_write(&bl_rx_buffer[7],mem_address, payload_len);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	3307      	adds	r3, #7
 8000bb2:	7f7a      	ldrb	r2, [r7, #29]
 8000bb4:	69b9      	ldr	r1, [r7, #24]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 fb49 	bl	800124e <execute_mem_write>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2120      	movs	r1, #32
 8000bc4:	4813      	ldr	r0, [pc, #76]	@ (8000c14 <bootloader_handle_mem_write_cmd+0xfc>)
 8000bc6:	f001 fd13 	bl	80025f0 <HAL_GPIO_WritePin>
			bootloader_uart_write_data(&write_status,1);
 8000bca:	f107 030f 	add.w	r3, r7, #15
 8000bce:	2101      	movs	r1, #1
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 fa63 	bl	800109c <bootloader_uart_write_data>
	else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000bd6:	e010      	b.n	8000bfa <bootloader_handle_mem_write_cmd+0xe2>
			printf("BL_DEBUG_MSG: invalid mem write address\n");
 8000bd8:	480f      	ldr	r0, [pc, #60]	@ (8000c18 <bootloader_handle_mem_write_cmd+0x100>)
 8000bda:	f003 f949 	bl	8003e70 <puts>
			write_status = ADDR_INVALID;
 8000bde:	2301      	movs	r3, #1
 8000be0:	73fb      	strb	r3, [r7, #15]
			bootloader_uart_write_data(&write_status,1);
 8000be2:	f107 030f 	add.w	r3, r7, #15
 8000be6:	2101      	movs	r1, #1
 8000be8:	4618      	mov	r0, r3
 8000bea:	f000 fa57 	bl	800109c <bootloader_uart_write_data>
}
 8000bee:	e004      	b.n	8000bfa <bootloader_handle_mem_write_cmd+0xe2>
		printf("BL_DEBUG_MSG:checksum fail !!\n");
 8000bf0:	480a      	ldr	r0, [pc, #40]	@ (8000c1c <bootloader_handle_mem_write_cmd+0x104>)
 8000bf2:	f003 f93d 	bl	8003e70 <puts>
		bootloader_send_nack();
 8000bf6:	f000 fa13 	bl	8001020 <bootloader_send_nack>
}
 8000bfa:	bf00      	nop
 8000bfc:	3720      	adds	r7, #32
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	08004d34 	.word	0x08004d34
 8000c08:	08004c48 	.word	0x08004c48
 8000c0c:	08004d64 	.word	0x08004d64
 8000c10:	08004d8c 	.word	0x08004d8c
 8000c14:	40020000 	.word	0x40020000
 8000c18:	08004db4 	.word	0x08004db4
 8000c1c:	08004c8c 	.word	0x08004c8c

08000c20 <bootloader_handle_flash_erase_cmd>:

void bootloader_handle_flash_erase_cmd(uint8_t *bl_rx_buffer)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	uint8_t erase_status = 0x00;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	73fb      	strb	r3, [r7, #15]
	printf("BL_DEBUG_MSG:bootloader_handle_flash_erase_cmd\n");
 8000c2c:	482a      	ldr	r0, [pc, #168]	@ (8000cd8 <bootloader_handle_flash_erase_cmd+0xb8>)
 8000c2e:	f003 f91f 	bl	8003e70 <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3b04      	subs	r3, #4
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	3b04      	subs	r3, #4
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f000 f9f8 	bl	8001044 <bootloader_verify_crc>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d135      	bne.n	8000cc6 <bootloader_handle_flash_erase_cmd+0xa6>
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
 8000c5a:	4820      	ldr	r0, [pc, #128]	@ (8000cdc <bootloader_handle_flash_erase_cmd+0xbc>)
 8000c5c:	f003 f908 	bl	8003e70 <puts>
		bootloader_send_ack(bl_rx_buffer[0],1);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2101      	movs	r1, #1
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f9c0 	bl	8000fec <bootloader_send_ack>
		printf("BL_DEBUG_MSG:initial_sector : %d  no_ofsectors: %d\n",bl_rx_buffer[2],bl_rx_buffer[3]);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3302      	adds	r3, #2
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	4619      	mov	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3303      	adds	r3, #3
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4818      	ldr	r0, [pc, #96]	@ (8000ce0 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000c7e:	f003 f88f 	bl	8003da0 <iprintf>

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,1);
 8000c82:	2201      	movs	r2, #1
 8000c84:	2120      	movs	r1, #32
 8000c86:	4817      	ldr	r0, [pc, #92]	@ (8000ce4 <bootloader_handle_flash_erase_cmd+0xc4>)
 8000c88:	f001 fcb2 	bl	80025f0 <HAL_GPIO_WritePin>
		erase_status = execute_flash_erase(bl_rx_buffer[2] , bl_rx_buffer[3]);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3302      	adds	r3, #2
 8000c90:	781a      	ldrb	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3303      	adds	r3, #3
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	f000 fa90 	bl	80011c0 <execute_flash_erase>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,0);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2120      	movs	r1, #32
 8000ca8:	480e      	ldr	r0, [pc, #56]	@ (8000ce4 <bootloader_handle_flash_erase_cmd+0xc4>)
 8000caa:	f001 fca1 	bl	80025f0 <HAL_GPIO_WritePin>

		printf("BL_DEBUG_MSG: flash erase status: %#x\n",erase_status);
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480d      	ldr	r0, [pc, #52]	@ (8000ce8 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000cb4:	f003 f874 	bl	8003da0 <iprintf>

		bootloader_uart_write_data(&erase_status,1);
 8000cb8:	f107 030f 	add.w	r3, r7, #15
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f9ec 	bl	800109c <bootloader_uart_write_data>
	}else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000cc4:	e004      	b.n	8000cd0 <bootloader_handle_flash_erase_cmd+0xb0>
		printf("BL_DEBUG_MSG:checksum fail !!\n");
 8000cc6:	4809      	ldr	r0, [pc, #36]	@ (8000cec <bootloader_handle_flash_erase_cmd+0xcc>)
 8000cc8:	f003 f8d2 	bl	8003e70 <puts>
		bootloader_send_nack();
 8000ccc:	f000 f9a8 	bl	8001020 <bootloader_send_nack>
}
 8000cd0:	bf00      	nop
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	08004ddc 	.word	0x08004ddc
 8000cdc:	08004c48 	.word	0x08004c48
 8000ce0:	08004e0c 	.word	0x08004e0c
 8000ce4:	40020000 	.word	0x40020000
 8000ce8:	08004cdc 	.word	0x08004cdc
 8000cec:	08004c8c 	.word	0x08004c8c

08000cf0 <bootloader_handle_go_cmd>:

void bootloader_handle_go_cmd(uint8_t *bl_rx_buffer)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	uint32_t go_address=0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
	uint8_t addr_valid = ADDR_VALID;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	73fb      	strb	r3, [r7, #15]
	uint8_t addr_invalid = ADDR_INVALID;
 8000d00:	2301      	movs	r3, #1
 8000d02:	73bb      	strb	r3, [r7, #14]

	printf("BL_DEBUG_MSG:bootloader_handle_go_cmd\n");
 8000d04:	4828      	ldr	r0, [pc, #160]	@ (8000da8 <bootloader_handle_go_cmd+0xb8>)
 8000d06:	f003 f8b3 	bl	8003e70 <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	61bb      	str	r3, [r7, #24]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	3b04      	subs	r3, #4
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	617b      	str	r3, [r7, #20]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	3b04      	subs	r3, #4
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	4619      	mov	r1, r3
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f000 f98c 	bl	8001044 <bootloader_verify_crc>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d131      	bne.n	8000d96 <bootloader_handle_go_cmd+0xa6>
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
 8000d32:	481e      	ldr	r0, [pc, #120]	@ (8000dac <bootloader_handle_go_cmd+0xbc>)
 8000d34:	f003 f89c 	bl	8003e70 <puts>

		bootloader_send_ack(bl_rx_buffer[0],1);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f954 	bl	8000fec <bootloader_send_ack>

		//extract the go address
		go_address = *((uint32_t *)&bl_rx_buffer[2] );
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000d4a:	61fb      	str	r3, [r7, #28]
		printf("BL_DEBUG_MSG:GO addr: %#x\n",go_address);
 8000d4c:	69f9      	ldr	r1, [r7, #28]
 8000d4e:	4818      	ldr	r0, [pc, #96]	@ (8000db0 <bootloader_handle_go_cmd+0xc0>)
 8000d50:	f003 f826 	bl	8003da0 <iprintf>

		if( verify_address(go_address) == ADDR_VALID )
 8000d54:	69f8      	ldr	r0, [r7, #28]
 8000d56:	f000 f9f5 	bl	8001144 <verify_address>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d110      	bne.n	8000d82 <bootloader_handle_go_cmd+0x92>
		{
			//tell host that address is fine
			bootloader_uart_write_data(&addr_valid,1);
 8000d60:	f107 030f 	add.w	r3, r7, #15
 8000d64:	2101      	movs	r1, #1
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f998 	bl	800109c <bootloader_uart_write_data>
			Its not the duty of bootloader. so just trust and jump */

			/* Not doing the below line will result in hardfault exception for ARM cortex M */
			//watch : https://www.youtube.com/watch?v=VX_12SjnNhY

			go_address+=1; //make T bit =1
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	61fb      	str	r3, [r7, #28]

			void (*lets_jump)(void) = (void *)go_address;
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	613b      	str	r3, [r7, #16]

			printf("BL_DEBUG_MSG: jumping to go address! \n");
 8000d76:	480f      	ldr	r0, [pc, #60]	@ (8000db4 <bootloader_handle_go_cmd+0xc4>)
 8000d78:	f003 f87a 	bl	8003e70 <puts>

			lets_jump();
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4798      	blx	r3
	}else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000d80:	e00e      	b.n	8000da0 <bootloader_handle_go_cmd+0xb0>
			printf("BL_DEBUG_MSG:GO addr invalid ! \n");
 8000d82:	480d      	ldr	r0, [pc, #52]	@ (8000db8 <bootloader_handle_go_cmd+0xc8>)
 8000d84:	f003 f874 	bl	8003e70 <puts>
			bootloader_uart_write_data(&addr_invalid,1);
 8000d88:	f107 030e 	add.w	r3, r7, #14
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f984 	bl	800109c <bootloader_uart_write_data>
}
 8000d94:	e004      	b.n	8000da0 <bootloader_handle_go_cmd+0xb0>
		printf("BL_DEBUG_MSG:checksum fail !!\n");
 8000d96:	4809      	ldr	r0, [pc, #36]	@ (8000dbc <bootloader_handle_go_cmd+0xcc>)
 8000d98:	f003 f86a 	bl	8003e70 <puts>
		bootloader_send_nack();
 8000d9c:	f000 f940 	bl	8001020 <bootloader_send_nack>
}
 8000da0:	bf00      	nop
 8000da2:	3720      	adds	r7, #32
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	08004e40 	.word	0x08004e40
 8000dac:	08004c48 	.word	0x08004c48
 8000db0:	08004e68 	.word	0x08004e68
 8000db4:	08004e84 	.word	0x08004e84
 8000db8:	08004eac 	.word	0x08004eac
 8000dbc:	08004c8c 	.word	0x08004c8c

08000dc0 <bootloader_handle_getrdp_cmd>:

void bootloader_handle_getrdp_cmd(uint8_t *bl_rx_buffer)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	uint8_t rdp_level = 0x00;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73fb      	strb	r3, [r7, #15]
	printf("BL_DEBUG_MSG:bootloader_handle_getrdp_cmd\n");
 8000dcc:	481d      	ldr	r0, [pc, #116]	@ (8000e44 <bootloader_handle_getrdp_cmd+0x84>)
 8000dce:	f003 f84f 	bl	8003e70 <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	3b04      	subs	r3, #4
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	3b04      	subs	r3, #4
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4619      	mov	r1, r3
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 f928 	bl	8001044 <bootloader_verify_crc>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d11a      	bne.n	8000e30 <bootloader_handle_getrdp_cmd+0x70>
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
 8000dfa:	4813      	ldr	r0, [pc, #76]	@ (8000e48 <bootloader_handle_getrdp_cmd+0x88>)
 8000dfc:	f003 f838 	bl	8003e70 <puts>
		bootloader_send_ack(bl_rx_buffer[0],1);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2101      	movs	r1, #1
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 f8f0 	bl	8000fec <bootloader_send_ack>
		rdp_level = get_flash_rdp_level();
 8000e0c:	f000 f986 	bl	800111c <get_flash_rdp_level>
 8000e10:	4603      	mov	r3, r0
 8000e12:	73fb      	strb	r3, [r7, #15]
		printf("BL_DEBUG_MSG:RDP level: %d %#x\n",rdp_level,rdp_level);
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	4619      	mov	r1, r3
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	480b      	ldr	r0, [pc, #44]	@ (8000e4c <bootloader_handle_getrdp_cmd+0x8c>)
 8000e1e:	f002 ffbf 	bl	8003da0 <iprintf>
		bootloader_uart_write_data(&rdp_level,1);
 8000e22:	f107 030f 	add.w	r3, r7, #15
 8000e26:	2101      	movs	r1, #1
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 f937 	bl	800109c <bootloader_uart_write_data>
	}else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000e2e:	e004      	b.n	8000e3a <bootloader_handle_getrdp_cmd+0x7a>
		printf("BL_DEBUG_MSG:checksum fail !!\n");
 8000e30:	4807      	ldr	r0, [pc, #28]	@ (8000e50 <bootloader_handle_getrdp_cmd+0x90>)
 8000e32:	f003 f81d 	bl	8003e70 <puts>
		bootloader_send_nack();
 8000e36:	f000 f8f3 	bl	8001020 <bootloader_send_nack>
}
 8000e3a:	bf00      	nop
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	08004ecc 	.word	0x08004ecc
 8000e48:	08004c48 	.word	0x08004c48
 8000e4c:	08004ef8 	.word	0x08004ef8
 8000e50:	08004c8c 	.word	0x08004c8c

08000e54 <bootloader_handle_getcid_cmd>:

void bootloader_handle_getcid_cmd(uint8_t *bl_rx_buffer)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	uint16_t bl_cid_num = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	81fb      	strh	r3, [r7, #14]
	printf("BL_DEBUG_MSG:bootloader_handle_getcid_cmd\n");
 8000e60:	481d      	ldr	r0, [pc, #116]	@ (8000ed8 <bootloader_handle_getcid_cmd+0x84>)
 8000e62:	f003 f805 	bl	8003e70 <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3b04      	subs	r3, #4
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3b04      	subs	r3, #4
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4619      	mov	r1, r3
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f000 f8de 	bl	8001044 <bootloader_verify_crc>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d11a      	bne.n	8000ec4 <bootloader_handle_getcid_cmd+0x70>
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
 8000e8e:	4813      	ldr	r0, [pc, #76]	@ (8000edc <bootloader_handle_getcid_cmd+0x88>)
 8000e90:	f002 ffee 	bl	8003e70 <puts>
		bootloader_send_ack(bl_rx_buffer[0],2);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2102      	movs	r1, #2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f8a6 	bl	8000fec <bootloader_send_ack>
		bl_cid_num = get_mcu_chip_id();
 8000ea0:	f000 f92a 	bl	80010f8 <get_mcu_chip_id>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	81fb      	strh	r3, [r7, #14]
		printf("BL_DEBUG_MSG:MCU id : %d %#x !!\n",bl_cid_num, bl_cid_num);
 8000ea8:	89fb      	ldrh	r3, [r7, #14]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	89fb      	ldrh	r3, [r7, #14]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	480b      	ldr	r0, [pc, #44]	@ (8000ee0 <bootloader_handle_getcid_cmd+0x8c>)
 8000eb2:	f002 ff75 	bl	8003da0 <iprintf>
		bootloader_uart_write_data((uint8_t *)&bl_cid_num,2);
 8000eb6:	f107 030e 	add.w	r3, r7, #14
 8000eba:	2102      	movs	r1, #2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 f8ed 	bl	800109c <bootloader_uart_write_data>
	}else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000ec2:	e004      	b.n	8000ece <bootloader_handle_getcid_cmd+0x7a>
		printf("BL_DEBUG_MSG:checksum fail !!\n");
 8000ec4:	4807      	ldr	r0, [pc, #28]	@ (8000ee4 <bootloader_handle_getcid_cmd+0x90>)
 8000ec6:	f002 ffd3 	bl	8003e70 <puts>
		bootloader_send_nack();
 8000eca:	f000 f8a9 	bl	8001020 <bootloader_send_nack>
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	08004f18 	.word	0x08004f18
 8000edc:	08004c48 	.word	0x08004c48
 8000ee0:	08004f44 	.word	0x08004f44
 8000ee4:	08004c8c 	.word	0x08004c8c

08000ee8 <bootloader_handle_gethelp_cmd>:

void bootloader_handle_gethelp_cmd(uint8_t *bl_rx_buffer)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	printf("BL_DEBUG_MSG:bootloader_handle_gethelp_cmd\n");
 8000ef0:	4816      	ldr	r0, [pc, #88]	@ (8000f4c <bootloader_handle_gethelp_cmd+0x64>)
 8000ef2:	f002 ffbd 	bl	8003e70 <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	3301      	adds	r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	3b04      	subs	r3, #4
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	60bb      	str	r3, [r7, #8]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	3b04      	subs	r3, #4
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	4619      	mov	r1, r3
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f000 f896 	bl	8001044 <bootloader_verify_crc>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10d      	bne.n	8000f3a <bootloader_handle_gethelp_cmd+0x52>
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
 8000f1e:	480c      	ldr	r0, [pc, #48]	@ (8000f50 <bootloader_handle_gethelp_cmd+0x68>)
 8000f20:	f002 ffa6 	bl	8003e70 <puts>
		bootloader_send_ack(bl_rx_buffer[0],sizeof(supported_commands));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2108      	movs	r1, #8
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f85e 	bl	8000fec <bootloader_send_ack>
		bootloader_uart_write_data(supported_commands,sizeof(supported_commands) );
 8000f30:	2108      	movs	r1, #8
 8000f32:	4808      	ldr	r0, [pc, #32]	@ (8000f54 <bootloader_handle_gethelp_cmd+0x6c>)
 8000f34:	f000 f8b2 	bl	800109c <bootloader_uart_write_data>
	}else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000f38:	e004      	b.n	8000f44 <bootloader_handle_gethelp_cmd+0x5c>
		printf("BL_DEBUG_MSG:checksum fail !!\n");
 8000f3a:	4807      	ldr	r0, [pc, #28]	@ (8000f58 <bootloader_handle_gethelp_cmd+0x70>)
 8000f3c:	f002 ff98 	bl	8003e70 <puts>
		bootloader_send_nack();
 8000f40:	f000 f86e 	bl	8001020 <bootloader_send_nack>
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	08004f68 	.word	0x08004f68
 8000f50:	08004c48 	.word	0x08004c48
 8000f54:	20000000 	.word	0x20000000
 8000f58:	08004c8c 	.word	0x08004c8c

08000f5c <bootloader_handle_getver_cmd>:

void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	uint8_t bl_version;
	printf("bootloader handle get version command\n");
 8000f64:	481d      	ldr	r0, [pc, #116]	@ (8000fdc <bootloader_handle_getver_cmd+0x80>)
 8000f66:	f002 ff83 	bl	8003e70 <puts>
	uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t *) (bl_rx_buffer + command_packet_len - 4));
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3b04      	subs	r3, #4
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	613b      	str	r3, [r7, #16]
	if (! bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len-4, host_crc))
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	3b04      	subs	r3, #4
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4619      	mov	r1, r3
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 f85c 	bl	8001044 <bootloader_verify_crc>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d11a      	bne.n	8000fc8 <bootloader_handle_getver_cmd+0x6c>
	{
		printf("checksum success !!\n");
 8000f92:	4813      	ldr	r0, [pc, #76]	@ (8000fe0 <bootloader_handle_getver_cmd+0x84>)
 8000f94:	f002 ff6c 	bl	8003e70 <puts>
		bootloader_send_ack(bl_rx_buffer[0], 1);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f824 	bl	8000fec <bootloader_send_ack>
		bl_version = get_bootloader_version();
 8000fa4:	f000 f88e 	bl	80010c4 <get_bootloader_version>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	73fb      	strb	r3, [r7, #15]
		printf("BL VERSION: %d %#x\n", bl_version, bl_version);
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	480b      	ldr	r0, [pc, #44]	@ (8000fe4 <bootloader_handle_getver_cmd+0x88>)
 8000fb6:	f002 fef3 	bl	8003da0 <iprintf>
		bootloader_uart_write_data(&bl_version, 1);
 8000fba:	f107 030f 	add.w	r3, r7, #15
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 f86b 	bl	800109c <bootloader_uart_write_data>
	else
	{
		printf("checksum failed !!\n");
		bootloader_send_nack();
	}
}
 8000fc6:	e004      	b.n	8000fd2 <bootloader_handle_getver_cmd+0x76>
		printf("checksum failed !!\n");
 8000fc8:	4807      	ldr	r0, [pc, #28]	@ (8000fe8 <bootloader_handle_getver_cmd+0x8c>)
 8000fca:	f002 ff51 	bl	8003e70 <puts>
		bootloader_send_nack();
 8000fce:	f000 f827 	bl	8001020 <bootloader_send_nack>
}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	08004f94 	.word	0x08004f94
 8000fe0:	08004fbc 	.word	0x08004fbc
 8000fe4:	08004fd0 	.word	0x08004fd0
 8000fe8:	08004fe4 	.word	0x08004fe4

08000fec <bootloader_send_ack>:

void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	460a      	mov	r2, r1
 8000ff6:	71fb      	strb	r3, [r7, #7]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	71bb      	strb	r3, [r7, #6]
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 8000ffc:	23a5      	movs	r3, #165	@ 0xa5
 8000ffe:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 8001000:	79bb      	ldrb	r3, [r7, #6]
 8001002:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&huart3, ack_buf, 2, HAL_MAX_DELAY);
 8001004:	f107 010c 	add.w	r1, r7, #12
 8001008:	f04f 33ff 	mov.w	r3, #4294967295
 800100c:	2202      	movs	r2, #2
 800100e:	4803      	ldr	r0, [pc, #12]	@ (800101c <bootloader_send_ack+0x30>)
 8001010:	f002 f9b2 	bl	8003378 <HAL_UART_Transmit>
}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200000dc 	.word	0x200000dc

08001020 <bootloader_send_nack>:

void bootloader_send_nack(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 8001026:	237f      	movs	r3, #127	@ 0x7f
 8001028:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3, &nack, 1, HAL_MAX_DELAY);
 800102a:	1df9      	adds	r1, r7, #7
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
 8001030:	2201      	movs	r2, #1
 8001032:	4803      	ldr	r0, [pc, #12]	@ (8001040 <bootloader_send_nack+0x20>)
 8001034:	f002 f9a0 	bl	8003378 <HAL_UART_Transmit>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200000dc 	.word	0x200000dc

08001044 <bootloader_verify_crc>:

uint8_t bootloader_verify_crc(uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
	uint32_t uwCRCValue = 0xff;
 8001050:	23ff      	movs	r3, #255	@ 0xff
 8001052:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < len; i++)
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
 8001058:	e00f      	b.n	800107a <bootloader_verify_crc+0x36>
	{
		uint32_t i_data = pData[i];
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	4413      	add	r3, r2
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	617b      	str	r3, [r7, #20]
		uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2201      	movs	r2, #1
 800106a:	4619      	mov	r1, r3
 800106c:	480a      	ldr	r0, [pc, #40]	@ (8001098 <bootloader_verify_crc+0x54>)
 800106e:	f000 fd68 	bl	8001b42 <HAL_CRC_Accumulate>
 8001072:	61f8      	str	r0, [r7, #28]
	for (uint32_t i = 0; i < len; i++)
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	3301      	adds	r3, #1
 8001078:	61bb      	str	r3, [r7, #24]
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	429a      	cmp	r2, r3
 8001080:	d3eb      	bcc.n	800105a <bootloader_verify_crc+0x16>
	}
	if(uwCRCValue == crc_host)
 8001082:	69fa      	ldr	r2, [r7, #28]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	429a      	cmp	r2, r3
 8001088:	d101      	bne.n	800108e <bootloader_verify_crc+0x4a>
	{
		return VERIFY_CRC_SUCCESS;
 800108a:	2300      	movs	r3, #0
 800108c:	e000      	b.n	8001090 <bootloader_verify_crc+0x4c>
	}
	return VERIFY_CRC_FAIL;
 800108e:	2301      	movs	r3, #1
}
 8001090:	4618      	mov	r0, r3
 8001092:	3720      	adds	r7, #32
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	2000008c 	.word	0x2000008c

0800109c <bootloader_uart_write_data>:

void bootloader_uart_write_data(uint8_t *pBuffer, uint32_t len)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, pBuffer, len, HAL_MAX_DELAY);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	4803      	ldr	r0, [pc, #12]	@ (80010c0 <bootloader_uart_write_data+0x24>)
 80010b2:	f002 f961 	bl	8003378 <HAL_UART_Transmit>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200000dc 	.word	0x200000dc

080010c4 <get_bootloader_version>:

uint8_t get_bootloader_version(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
	return (uint8_t)BL_VERSION;
 80010c8:	2310      	movs	r3, #16
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <__io_putchar>:

#define PRINTF   int __io_putchar(int ch)
PRINTF
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80010dc:	1d39      	adds	r1, r7, #4
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	2201      	movs	r2, #1
 80010e4:	4803      	ldr	r0, [pc, #12]	@ (80010f4 <__io_putchar+0x20>)
 80010e6:	f002 f947 	bl	8003378 <HAL_UART_Transmit>
	return ch;
 80010ea:	687b      	ldr	r3, [r7, #4]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000094 	.word	0x20000094

080010f8 <get_mcu_chip_id>:

uint16_t get_mcu_chip_id(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
	and the die revision. It is part of the DBG_MCU component and is mapped on the
	external PPB bus (see Section 33.16 on page 1304). This code is accessible using the
	JTAG debug pCat.2ort (4 to 5 pins) or the SW debug port (two pins) or by the user software.
	It is even accessible while the MCU is under system reset. */
	uint16_t cid;
	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <get_mcu_chip_id+0x20>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	b29b      	uxth	r3, r3
 8001104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001108:	80fb      	strh	r3, [r7, #6]
	return  cid;
 800110a:	88fb      	ldrh	r3, [r7, #6]

}
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e0042000 	.word	0xe0042000

0800111c <get_flash_rdp_level>:

/*This function reads the RDP ( Read protection option byte) value
 *For more info refer "Table 9. Description of the option bytes" in stm32f446xx RM
 */
uint8_t get_flash_rdp_level(void)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0

	uint8_t rdp_status=0;
 8001122:	2300      	movs	r3, #0
 8001124:	71fb      	strb	r3, [r7, #7]
	FLASH_OBProgramInitTypeDef  ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
	rdp_status = (uint8_t)ob_handle.RDPLevel;
#else

	 volatile uint32_t *pOB_addr = (uint32_t*) 0x1FFFC000;
 8001126:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <get_flash_rdp_level+0x24>)
 8001128:	603b      	str	r3, [r7, #0]
	 rdp_status =  (uint8_t)(*pOB_addr >> 8) ;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	0a1b      	lsrs	r3, r3, #8
 8001130:	71fb      	strb	r3, [r7, #7]
#endif

	return rdp_status;
 8001132:	79fb      	ldrb	r3, [r7, #7]

}
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	1fffc000 	.word	0x1fffc000

08001144 <verify_address>:

//verify the address sent by the host .
uint8_t verify_address(uint32_t go_address)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	//can we jump to backup sram memory ? yes
	//can we jump to peripheral memory ? its possible , but dont allow. so no
	//can we jump to external memory ? yes.

//incomplete -poorly written .. optimize it
	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001152:	d305      	bcc.n	8001160 <verify_address+0x1c>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a15      	ldr	r2, [pc, #84]	@ (80011ac <verify_address+0x68>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d801      	bhi.n	8001160 <verify_address+0x1c>
	{
		return ADDR_VALID;
 800115c:	2300      	movs	r3, #0
 800115e:	e01e      	b.n	800119e <verify_address+0x5a>
	}
	else if ( go_address >= SRAM2_BASE && go_address <= SRAM2_END)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a12      	ldr	r2, [pc, #72]	@ (80011ac <verify_address+0x68>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d305      	bcc.n	8001174 <verify_address+0x30>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a11      	ldr	r2, [pc, #68]	@ (80011b0 <verify_address+0x6c>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d801      	bhi.n	8001174 <verify_address+0x30>
	{
		return ADDR_VALID;
 8001170:	2300      	movs	r3, #0
 8001172:	e014      	b.n	800119e <verify_address+0x5a>
	}
	else if ( go_address >= FLASH_BASE && go_address <= FLASH_END)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800117a:	d305      	bcc.n	8001188 <verify_address+0x44>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a0d      	ldr	r2, [pc, #52]	@ (80011b4 <verify_address+0x70>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d801      	bhi.n	8001188 <verify_address+0x44>
	{
		return ADDR_VALID;
 8001184:	2300      	movs	r3, #0
 8001186:	e00a      	b.n	800119e <verify_address+0x5a>
	}
	else if ( go_address >= BKPSRAM_BASE && go_address <= BKPSRAM_END)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a0b      	ldr	r2, [pc, #44]	@ (80011b8 <verify_address+0x74>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d305      	bcc.n	800119c <verify_address+0x58>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a0a      	ldr	r2, [pc, #40]	@ (80011bc <verify_address+0x78>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d801      	bhi.n	800119c <verify_address+0x58>
	{
		return ADDR_VALID;
 8001198:	2300      	movs	r3, #0
 800119a:	e000      	b.n	800119e <verify_address+0x5a>
	}
	else
		return ADDR_INVALID;
 800119c:	2301      	movs	r3, #1
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	2001c000 	.word	0x2001c000
 80011b0:	20020000 	.word	0x20020000
 80011b4:	0807ffff 	.word	0x0807ffff
 80011b8:	40024000 	.word	0x40024000
 80011bc:	40025000 	.word	0x40025000

080011c0 <execute_flash_erase>:

 uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	@ 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	460a      	mov	r2, r1
 80011ca:	71fb      	strb	r3, [r7, #7]
 80011cc:	4613      	mov	r3, r2
 80011ce:	71bb      	strb	r3, [r7, #6]
	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;


	if( number_of_sector > 8 )
 80011d0:	79bb      	ldrb	r3, [r7, #6]
 80011d2:	2b08      	cmp	r3, #8
 80011d4:	d901      	bls.n	80011da <execute_flash_erase+0x1a>
		return INVALID_SECTOR;
 80011d6:	2304      	movs	r3, #4
 80011d8:	e035      	b.n	8001246 <execute_flash_erase+0x86>

	if( (sector_number == 0xff ) || (sector_number <= 7) )
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2bff      	cmp	r3, #255	@ 0xff
 80011de:	d002      	beq.n	80011e6 <execute_flash_erase+0x26>
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2b07      	cmp	r3, #7
 80011e4:	d82e      	bhi.n	8001244 <execute_flash_erase+0x84>
	{
		if(sector_number == (uint8_t) 0xff)
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2bff      	cmp	r3, #255	@ 0xff
 80011ea:	d102      	bne.n	80011f2 <execute_flash_erase+0x32>
		{
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 80011ec:	2301      	movs	r3, #1
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	e012      	b.n	8001218 <execute_flash_erase+0x58>
		}else
		{
		    /*Here we are just calculating how many sectors needs to erased */
			uint8_t remanining_sector = 8 - sector_number;
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f1c3 0308 	rsb	r3, r3, #8
 80011f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( number_of_sector > remanining_sector)
 80011fc:	79ba      	ldrb	r2, [r7, #6]
 80011fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001202:	429a      	cmp	r2, r3
 8001204:	d902      	bls.n	800120c <execute_flash_erase+0x4c>
            {
            	number_of_sector = remanining_sector;
 8001206:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800120a:	71bb      	strb	r3, [r7, #6]
            }
			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
			flashErase_handle.Sector = sector_number; // this is the initial sector
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	61bb      	str	r3, [r7, #24]
			flashErase_handle.NbSectors = number_of_sector;
 8001214:	79bb      	ldrb	r3, [r7, #6]
 8001216:	61fb      	str	r3, [r7, #28]
		}
		flashErase_handle.Banks = FLASH_BANK_1;
 8001218:	2301      	movs	r3, #1
 800121a:	617b      	str	r3, [r7, #20]

		/*Get access to touch the flash registers */
		HAL_FLASH_Unlock();
 800121c:	f000 fd0e 	bl	8001c3c <HAL_FLASH_Unlock>
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // our mcu will work on this voltage range
 8001220:	2302      	movs	r3, #2
 8001222:	623b      	str	r3, [r7, #32]
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8001224:	f107 020c 	add.w	r2, r7, #12
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fea2 	bl	8001f78 <HAL_FLASHEx_Erase>
 8001234:	4603      	mov	r3, r0
 8001236:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		HAL_FLASH_Lock();
 800123a:	f000 fd21 	bl	8001c80 <HAL_FLASH_Lock>

		return status;
 800123e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001242:	e000      	b.n	8001246 <execute_flash_erase+0x86>
	}


	return INVALID_SECTOR;
 8001244:	2304      	movs	r3, #4
}
 8001246:	4618      	mov	r0, r3
 8001248:	3728      	adds	r7, #40	@ 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <execute_mem_write>:

/*This function writes the contents of pBuffer to  "mem_address" byte by byte */
//Note1 : Currently this function supports writing to Flash only .
//Note2 : This functions does not check whether "mem_address" is a valid address of the flash range.
uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 800124e:	b5b0      	push	{r4, r5, r7, lr}
 8001250:	b086      	sub	sp, #24
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
    uint8_t status=HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	75fb      	strb	r3, [r7, #23]

    //We have to unlock flash module to get control of registers
    HAL_FLASH_Unlock();
 800125e:	f000 fced 	bl	8001c3c <HAL_FLASH_Unlock>

    for(uint32_t i = 0 ; i <len ; i++)
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	e014      	b.n	8001292 <execute_mem_write+0x44>
    {
        //Here we program the flash byte by byte
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,mem_address+i,pBuffer[i] );
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	18d1      	adds	r1, r2, r3
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4413      	add	r3, r2
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2200      	movs	r2, #0
 800127a:	461c      	mov	r4, r3
 800127c:	4615      	mov	r5, r2
 800127e:	4622      	mov	r2, r4
 8001280:	462b      	mov	r3, r5
 8001282:	2000      	movs	r0, #0
 8001284:	f000 fc88 	bl	8001b98 <HAL_FLASH_Program>
 8001288:	4603      	mov	r3, r0
 800128a:	75fb      	strb	r3, [r7, #23]
    for(uint32_t i = 0 ; i <len ; i++)
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	3301      	adds	r3, #1
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	429a      	cmp	r2, r3
 8001298:	d3e6      	bcc.n	8001268 <execute_mem_write+0x1a>
    }

    HAL_FLASH_Lock();
 800129a:	f000 fcf1 	bl	8001c80 <HAL_FLASH_Lock>

    return status;
 800129e:	7dfb      	ldrb	r3, [r7, #23]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bdb0      	pop	{r4, r5, r7, pc}

080012a8 <configure_flash_sector_rw_protection>:
2. Write the desired option value in the FLASH_OPTCR register.
3. Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
4. Wait for the BSY bit to be cleared.
*/
uint8_t configure_flash_sector_rw_protection(uint8_t sector_details, uint8_t protection_mode, uint8_t disable)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
 80012b2:	460b      	mov	r3, r1
 80012b4:	71bb      	strb	r3, [r7, #6]
 80012b6:	4613      	mov	r3, r2
 80012b8:	717b      	strb	r3, [r7, #5]
    //protection_mode =1 , means write protect of the user flash sectors
    //protection_mode =2, means read/write protect of the user flash sectors
    //According to RM of stm32f446xx TABLE 9, We have to modify the address 0x1FFF C008 bit 15(SPRMOD)

	 //Flash option control register (OPTCR)
    volatile uint32_t *pOPTCR = (uint32_t*) 0x40023C14;
 80012ba:	4b44      	ldr	r3, [pc, #272]	@ (80013cc <configure_flash_sector_rw_protection+0x124>)
 80012bc:	60fb      	str	r3, [r7, #12]

	  if(disable)
 80012be:	797b      	ldrb	r3, [r7, #5]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d025      	beq.n	8001310 <configure_flash_sector_rw_protection+0x68>
		{

			//disable all r/w protection on sectors

			//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 80012c4:	f000 fcec 	bl	8001ca0 <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80012c8:	bf00      	nop
 80012ca:	4b41      	ldr	r3, [pc, #260]	@ (80013d0 <configure_flash_sector_rw_protection+0x128>)
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f9      	bne.n	80012ca <configure_flash_sector_rw_protection+0x22>

			//clear the 31st bit (default state)
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR &= ~(1 << 31);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	601a      	str	r2, [r3, #0]

			//clear the protection : make all bits belonging to sectors as 1
			*pOPTCR |= (0xFF << 16);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f043 0202 	orr.w	r2, r3, #2
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80012fa:	bf00      	nop
 80012fc:	4b34      	ldr	r3, [pc, #208]	@ (80013d0 <configure_flash_sector_rw_protection+0x128>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f9      	bne.n	80012fc <configure_flash_sector_rw_protection+0x54>

			HAL_FLASH_OB_Lock();
 8001308:	f000 fce6 	bl	8001cd8 <HAL_FLASH_OB_Lock>

			return 0;
 800130c:	2300      	movs	r3, #0
 800130e:	e058      	b.n	80013c2 <configure_flash_sector_rw_protection+0x11a>

		}

	   if(protection_mode == (uint8_t) 1)
 8001310:	79bb      	ldrb	r3, [r7, #6]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d126      	bne.n	8001364 <configure_flash_sector_rw_protection+0xbc>
    {
           //we are putting write protection on the sectors encoded in sector_details argument

			//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 8001316:	f000 fcc3 	bl	8001ca0 <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 800131a:	bf00      	nop
 800131c:	4b2c      	ldr	r3, [pc, #176]	@ (80013d0 <configure_flash_sector_rw_protection+0x128>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1f9      	bne.n	800131c <configure_flash_sector_rw_protection+0x74>

			//here we are setting just write protection for the sectors
			//clear the 31st bit
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR &= ~(1 << 31);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	601a      	str	r2, [r3, #0]

			//put write protection on sectors
			*pOPTCR &= ~ (sector_details << 16);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	79fa      	ldrb	r2, [r7, #7]
 800133a:	0412      	lsls	r2, r2, #16
 800133c:	43d2      	mvns	r2, r2
 800133e:	401a      	ands	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f043 0202 	orr.w	r2, r3, #2
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001350:	bf00      	nop
 8001352:	4b1f      	ldr	r3, [pc, #124]	@ (80013d0 <configure_flash_sector_rw_protection+0x128>)
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f9      	bne.n	8001352 <configure_flash_sector_rw_protection+0xaa>

			HAL_FLASH_OB_Lock();
 800135e:	f000 fcbb 	bl	8001cd8 <HAL_FLASH_OB_Lock>
 8001362:	e02d      	b.n	80013c0 <configure_flash_sector_rw_protection+0x118>
		}

		else if (protection_mode == (uint8_t) 2)
 8001364:	79bb      	ldrb	r3, [r7, #6]
 8001366:	2b02      	cmp	r3, #2
 8001368:	d12a      	bne.n	80013c0 <configure_flash_sector_rw_protection+0x118>
    {
	  	//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 800136a:	f000 fc99 	bl	8001ca0 <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 800136e:	bf00      	nop
 8001370:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <configure_flash_sector_rw_protection+0x128>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f9      	bne.n	8001370 <configure_flash_sector_rw_protection+0xc8>

			//here wer are setting read and write protection for the sectors
			//set the 31st bit
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR |= (1 << 31);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	601a      	str	r2, [r3, #0]

			//put read and write protection on sectors
            *pOPTCR &= ~(0xff << 16);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	601a      	str	r2, [r3, #0]
			*pOPTCR |= (sector_details << 16);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	041b      	lsls	r3, r3, #16
 800139c:	431a      	orrs	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f043 0202 	orr.w	r2, r3, #2
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80013ae:	bf00      	nop
 80013b0:	4b07      	ldr	r3, [pc, #28]	@ (80013d0 <configure_flash_sector_rw_protection+0x128>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1f9      	bne.n	80013b0 <configure_flash_sector_rw_protection+0x108>

			HAL_FLASH_OB_Lock();
 80013bc:	f000 fc8c 	bl	8001cd8 <HAL_FLASH_OB_Lock>
    }

		return 0;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023c14 	.word	0x40023c14
 80013d0:	40023c00 	.word	0x40023c00

080013d4 <read_OB_rw_protection_status>:

uint16_t read_OB_rw_protection_status(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
    //This structure is given by ST Flash driver to hold the OB(Option Byte) contents .
	FLASH_OBProgramInitTypeDef OBInit;

	//First unlock the OB(Option Byte) memory access
	HAL_FLASH_OB_Unlock();
 80013da:	f000 fc61 	bl	8001ca0 <HAL_FLASH_OB_Unlock>
	//get the OB configuration details
	HAL_FLASHEx_OBGetConfig(&OBInit);
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 fe37 	bl	8002054 <HAL_FLASHEx_OBGetConfig>
	//Lock back .
	HAL_FLASH_Lock();
 80013e6:	f000 fc4b 	bl	8001c80 <HAL_FLASH_Lock>
	return (uint16_t)OBInit.WRPSector;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	b29b      	uxth	r3, r3

}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3720      	adds	r7, #32
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013fa:	b672      	cpsid	i
}
 80013fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013fe:	bf00      	nop
 8001400:	e7fd      	b.n	80013fe <Error_Handler+0x8>
	...

08001404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <HAL_MspInit+0x4c>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001412:	4a0f      	ldr	r2, [pc, #60]	@ (8001450 <HAL_MspInit+0x4c>)
 8001414:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001418:	6453      	str	r3, [r2, #68]	@ 0x44
 800141a:	4b0d      	ldr	r3, [pc, #52]	@ (8001450 <HAL_MspInit+0x4c>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <HAL_MspInit+0x4c>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142e:	4a08      	ldr	r2, [pc, #32]	@ (8001450 <HAL_MspInit+0x4c>)
 8001430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001434:	6413      	str	r3, [r2, #64]	@ 0x40
 8001436:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <HAL_MspInit+0x4c>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800

08001454 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0b      	ldr	r2, [pc, #44]	@ (8001490 <HAL_CRC_MspInit+0x3c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d10d      	bne.n	8001482 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <HAL_CRC_MspInit+0x40>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a09      	ldr	r2, [pc, #36]	@ (8001494 <HAL_CRC_MspInit+0x40>)
 8001470:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <HAL_CRC_MspInit+0x40>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40023000 	.word	0x40023000
 8001494:	40023800 	.word	0x40023800

08001498 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08c      	sub	sp, #48	@ 0x30
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a41      	ldr	r2, [pc, #260]	@ (80015bc <HAL_UART_MspInit+0x124>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d12c      	bne.n	8001514 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
 80014be:	4b40      	ldr	r3, [pc, #256]	@ (80015c0 <HAL_UART_MspInit+0x128>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	4a3f      	ldr	r2, [pc, #252]	@ (80015c0 <HAL_UART_MspInit+0x128>)
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ca:	4b3d      	ldr	r3, [pc, #244]	@ (80015c0 <HAL_UART_MspInit+0x128>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	4b39      	ldr	r3, [pc, #228]	@ (80015c0 <HAL_UART_MspInit+0x128>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	4a38      	ldr	r2, [pc, #224]	@ (80015c0 <HAL_UART_MspInit+0x128>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e6:	4b36      	ldr	r3, [pc, #216]	@ (80015c0 <HAL_UART_MspInit+0x128>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014f2:	230c      	movs	r3, #12
 80014f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001502:	2307      	movs	r3, #7
 8001504:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	4619      	mov	r1, r3
 800150c:	482d      	ldr	r0, [pc, #180]	@ (80015c4 <HAL_UART_MspInit+0x12c>)
 800150e:	f000 fec3 	bl	8002298 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001512:	e04f      	b.n	80015b4 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a2b      	ldr	r2, [pc, #172]	@ (80015c8 <HAL_UART_MspInit+0x130>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d14a      	bne.n	80015b4 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	4b27      	ldr	r3, [pc, #156]	@ (80015c0 <HAL_UART_MspInit+0x128>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	4a26      	ldr	r2, [pc, #152]	@ (80015c0 <HAL_UART_MspInit+0x128>)
 8001528:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800152c:	6413      	str	r3, [r2, #64]	@ 0x40
 800152e:	4b24      	ldr	r3, [pc, #144]	@ (80015c0 <HAL_UART_MspInit+0x128>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b20      	ldr	r3, [pc, #128]	@ (80015c0 <HAL_UART_MspInit+0x128>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	4a1f      	ldr	r2, [pc, #124]	@ (80015c0 <HAL_UART_MspInit+0x128>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6313      	str	r3, [r2, #48]	@ 0x30
 800154a:	4b1d      	ldr	r3, [pc, #116]	@ (80015c0 <HAL_UART_MspInit+0x128>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <HAL_UART_MspInit+0x128>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	4a18      	ldr	r2, [pc, #96]	@ (80015c0 <HAL_UART_MspInit+0x128>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	6313      	str	r3, [r2, #48]	@ 0x30
 8001566:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <HAL_UART_MspInit+0x128>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001572:	2320      	movs	r3, #32
 8001574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157e:	2303      	movs	r3, #3
 8001580:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001582:	2307      	movs	r3, #7
 8001584:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	4619      	mov	r1, r3
 800158c:	480f      	ldr	r0, [pc, #60]	@ (80015cc <HAL_UART_MspInit+0x134>)
 800158e:	f000 fe83 	bl	8002298 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001592:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015a4:	2307      	movs	r3, #7
 80015a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	4619      	mov	r1, r3
 80015ae:	4808      	ldr	r0, [pc, #32]	@ (80015d0 <HAL_UART_MspInit+0x138>)
 80015b0:	f000 fe72 	bl	8002298 <HAL_GPIO_Init>
}
 80015b4:	bf00      	nop
 80015b6:	3730      	adds	r7, #48	@ 0x30
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40004400 	.word	0x40004400
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40004800 	.word	0x40004800
 80015cc:	40020800 	.word	0x40020800
 80015d0:	40020400 	.word	0x40020400

080015d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <NMI_Handler+0x4>

080015dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <HardFault_Handler+0x4>

080015e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <MemManage_Handler+0x4>

080015ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <BusFault_Handler+0x4>

080015f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <UsageFault_Handler+0x4>

080015fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162a:	f000 f969 	bl	8001900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}

08001632 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b086      	sub	sp, #24
 8001636:	af00      	add	r7, sp, #0
 8001638:	60f8      	str	r0, [r7, #12]
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	e00a      	b.n	800165a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001644:	f3af 8000 	nop.w
 8001648:	4601      	mov	r1, r0
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	1c5a      	adds	r2, r3, #1
 800164e:	60ba      	str	r2, [r7, #8]
 8001650:	b2ca      	uxtb	r2, r1
 8001652:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	3301      	adds	r3, #1
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	429a      	cmp	r2, r3
 8001660:	dbf0      	blt.n	8001644 <_read+0x12>
  }

  return len;
 8001662:	687b      	ldr	r3, [r7, #4]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	e009      	b.n	8001692 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	1c5a      	adds	r2, r3, #1
 8001682:	60ba      	str	r2, [r7, #8]
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fd24 	bl	80010d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	3301      	adds	r3, #1
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	429a      	cmp	r2, r3
 8001698:	dbf1      	blt.n	800167e <_write+0x12>
  }
  return len;
 800169a:	687b      	ldr	r3, [r7, #4]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <_close>:

int _close(int file)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016cc:	605a      	str	r2, [r3, #4]
  return 0;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <_isatty>:

int _isatty(int file)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016e4:	2301      	movs	r3, #1
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b085      	sub	sp, #20
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	60f8      	str	r0, [r7, #12]
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001714:	4a14      	ldr	r2, [pc, #80]	@ (8001768 <_sbrk+0x5c>)
 8001716:	4b15      	ldr	r3, [pc, #84]	@ (800176c <_sbrk+0x60>)
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001720:	4b13      	ldr	r3, [pc, #76]	@ (8001770 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001728:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <_sbrk+0x64>)
 800172a:	4a12      	ldr	r2, [pc, #72]	@ (8001774 <_sbrk+0x68>)
 800172c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172e:	4b10      	ldr	r3, [pc, #64]	@ (8001770 <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	429a      	cmp	r2, r3
 800173a:	d207      	bcs.n	800174c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800173c:	f002 fcc6 	bl	80040cc <__errno>
 8001740:	4603      	mov	r3, r0
 8001742:	220c      	movs	r2, #12
 8001744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	e009      	b.n	8001760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800174c:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <_sbrk+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001752:	4b07      	ldr	r3, [pc, #28]	@ (8001770 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	4a05      	ldr	r2, [pc, #20]	@ (8001770 <_sbrk+0x64>)
 800175c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800175e:	68fb      	ldr	r3, [r7, #12]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20020000 	.word	0x20020000
 800176c:	00000400 	.word	0x00000400
 8001770:	200001ec 	.word	0x200001ec
 8001774:	20000360 	.word	0x20000360

08001778 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <SystemInit+0x20>)
 800177e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001782:	4a05      	ldr	r2, [pc, #20]	@ (8001798 <SystemInit+0x20>)
 8001784:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001788:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800179c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017a0:	f7ff ffea 	bl	8001778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017a4:	480c      	ldr	r0, [pc, #48]	@ (80017d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017a6:	490d      	ldr	r1, [pc, #52]	@ (80017dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017a8:	4a0d      	ldr	r2, [pc, #52]	@ (80017e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a0a      	ldr	r2, [pc, #40]	@ (80017e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017bc:	4c0a      	ldr	r4, [pc, #40]	@ (80017e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017ca:	f002 fc85 	bl	80040d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ce:	f7fe fee7 	bl	80005a0 <main>
  bx  lr    
 80017d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017dc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80017e0:	08005054 	.word	0x08005054
  ldr r2, =_sbss
 80017e4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80017e8:	20000360 	.word	0x20000360

080017ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC_IRQHandler>
	...

080017f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <HAL_Init+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001830 <HAL_Init+0x40>)
 80017fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001800:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <HAL_Init+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <HAL_Init+0x40>)
 8001806:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800180a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800180c:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <HAL_Init+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a07      	ldr	r2, [pc, #28]	@ (8001830 <HAL_Init+0x40>)
 8001812:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001816:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001818:	2003      	movs	r0, #3
 800181a:	f000 f943 	bl	8001aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181e:	200f      	movs	r0, #15
 8001820:	f000 f83e 	bl	80018a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001824:	f7ff fdee 	bl	8001404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023c00 	.word	0x40023c00

08001834 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001838:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <HAL_DeInit+0x4c>)
 800183a:	4a12      	ldr	r2, [pc, #72]	@ (8001884 <HAL_DeInit+0x50>)
 800183c:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 800183e:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <HAL_DeInit+0x4c>)
 8001840:	2200      	movs	r2, #0
 8001842:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001844:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <HAL_DeInit+0x4c>)
 8001846:	4a10      	ldr	r2, [pc, #64]	@ (8001888 <HAL_DeInit+0x54>)
 8001848:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800184a:	4b0d      	ldr	r3, [pc, #52]	@ (8001880 <HAL_DeInit+0x4c>)
 800184c:	2200      	movs	r2, #0
 800184e:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001850:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <HAL_DeInit+0x4c>)
 8001852:	4a0e      	ldr	r2, [pc, #56]	@ (800188c <HAL_DeInit+0x58>)
 8001854:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001856:	4b0a      	ldr	r3, [pc, #40]	@ (8001880 <HAL_DeInit+0x4c>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800185c:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <HAL_DeInit+0x4c>)
 800185e:	2281      	movs	r2, #129	@ 0x81
 8001860:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001862:	4b07      	ldr	r3, [pc, #28]	@ (8001880 <HAL_DeInit+0x4c>)
 8001864:	2200      	movs	r2, #0
 8001866:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001868:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <HAL_DeInit+0x4c>)
 800186a:	2203      	movs	r2, #3
 800186c:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 800186e:	4b04      	ldr	r3, [pc, #16]	@ (8001880 <HAL_DeInit+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001874:	f000 f80c 	bl	8001890 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800
 8001884:	3fffc9ff 	.word	0x3fffc9ff
 8001888:	00c77933 	.word	0x00c77933
 800188c:	206010ff 	.word	0x206010ff

08001890 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a8:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <HAL_InitTick+0x54>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b12      	ldr	r3, [pc, #72]	@ (80018f8 <HAL_InitTick+0x58>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4619      	mov	r1, r3
 80018b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 f917 	bl	8001af2 <HAL_SYSTICK_Config>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00e      	b.n	80018ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b0f      	cmp	r3, #15
 80018d2:	d80a      	bhi.n	80018ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d4:	2200      	movs	r2, #0
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f000 f8ed 	bl	8001aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e0:	4a06      	ldr	r2, [pc, #24]	@ (80018fc <HAL_InitTick+0x5c>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e000      	b.n	80018ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000008 	.word	0x20000008
 80018f8:	20000010 	.word	0x20000010
 80018fc:	2000000c 	.word	0x2000000c

08001900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_IncTick+0x20>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <HAL_IncTick+0x24>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4413      	add	r3, r2
 8001910:	4a04      	ldr	r2, [pc, #16]	@ (8001924 <HAL_IncTick+0x24>)
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000010 	.word	0x20000010
 8001924:	200001f0 	.word	0x200001f0

08001928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return uwTick;
 800192c:	4b03      	ldr	r3, [pc, #12]	@ (800193c <HAL_GetTick+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	200001f0 	.word	0x200001f0

08001940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001950:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800195c:	4013      	ands	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001968:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800196c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001972:	4a04      	ldr	r2, [pc, #16]	@ (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	60d3      	str	r3, [r2, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800198c:	4b04      	ldr	r3, [pc, #16]	@ (80019a0 <__NVIC_GetPriorityGrouping+0x18>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	f003 0307 	and.w	r3, r3, #7
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db0a      	blt.n	80019ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	490c      	ldr	r1, [pc, #48]	@ (80019f0 <__NVIC_SetPriority+0x4c>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	440b      	add	r3, r1
 80019c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019cc:	e00a      	b.n	80019e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4908      	ldr	r1, [pc, #32]	@ (80019f4 <__NVIC_SetPriority+0x50>)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	3b04      	subs	r3, #4
 80019dc:	0112      	lsls	r2, r2, #4
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	440b      	add	r3, r1
 80019e2:	761a      	strb	r2, [r3, #24]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000e100 	.word	0xe000e100
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	@ 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f1c3 0307 	rsb	r3, r3, #7
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	bf28      	it	cs
 8001a16:	2304      	movcs	r3, #4
 8001a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d902      	bls.n	8001a28 <NVIC_EncodePriority+0x30>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3b03      	subs	r3, #3
 8001a26:	e000      	b.n	8001a2a <NVIC_EncodePriority+0x32>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43d9      	mvns	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	4313      	orrs	r3, r2
         );
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3724      	adds	r7, #36	@ 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a70:	d301      	bcc.n	8001a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00f      	b.n	8001a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a76:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <SysTick_Config+0x40>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7e:	210f      	movs	r1, #15
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f7ff ff8e 	bl	80019a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a88:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <SysTick_Config+0x40>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8e:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <SysTick_Config+0x40>)
 8001a90:	2207      	movs	r2, #7
 8001a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	e000e010 	.word	0xe000e010

08001aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ff47 	bl	8001940 <__NVIC_SetPriorityGrouping>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001acc:	f7ff ff5c 	bl	8001988 <__NVIC_GetPriorityGrouping>
 8001ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	6978      	ldr	r0, [r7, #20]
 8001ad8:	f7ff ff8e 	bl	80019f8 <NVIC_EncodePriority>
 8001adc:	4602      	mov	r2, r0
 8001ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff5d 	bl	80019a4 <__NVIC_SetPriority>
}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ffb0 	bl	8001a60 <SysTick_Config>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e00e      	b.n	8001b3a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	795b      	ldrb	r3, [r3, #5]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d105      	bne.n	8001b32 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff fc91 	bl	8001454 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b087      	sub	sp, #28
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2202      	movs	r2, #2
 8001b56:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	e00a      	b.n	8001b74 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	441a      	add	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	3301      	adds	r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d3f0      	bcc.n	8001b5e <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2201      	movs	r2, #1
 8001b88:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001b8a:	693b      	ldr	r3, [r7, #16]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	371c      	adds	r7, #28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ba6:	4b23      	ldr	r3, [pc, #140]	@ (8001c34 <HAL_FLASH_Program+0x9c>)
 8001ba8:	7e1b      	ldrb	r3, [r3, #24]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_FLASH_Program+0x1a>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e03b      	b.n	8001c2a <HAL_FLASH_Program+0x92>
 8001bb2:	4b20      	ldr	r3, [pc, #128]	@ (8001c34 <HAL_FLASH_Program+0x9c>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bb8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001bbc:	f000 f89c 	bl	8001cf8 <FLASH_WaitForLastOperation>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001bc4:	7dfb      	ldrb	r3, [r7, #23]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d12b      	bne.n	8001c22 <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d105      	bne.n	8001bdc <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001bd0:	783b      	ldrb	r3, [r7, #0]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	68b8      	ldr	r0, [r7, #8]
 8001bd6:	f000 f947 	bl	8001e68 <FLASH_Program_Byte>
 8001bda:	e016      	b.n	8001c0a <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d105      	bne.n	8001bee <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001be2:	883b      	ldrh	r3, [r7, #0]
 8001be4:	4619      	mov	r1, r3
 8001be6:	68b8      	ldr	r0, [r7, #8]
 8001be8:	f000 f91a 	bl	8001e20 <FLASH_Program_HalfWord>
 8001bec:	e00d      	b.n	8001c0a <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d105      	bne.n	8001c00 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	68b8      	ldr	r0, [r7, #8]
 8001bfa:	f000 f8ef 	bl	8001ddc <FLASH_Program_Word>
 8001bfe:	e004      	b.n	8001c0a <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c04:	68b8      	ldr	r0, [r7, #8]
 8001c06:	f000 f8b7 	bl	8001d78 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c0a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001c0e:	f000 f873 	bl	8001cf8 <FLASH_WaitForLastOperation>
 8001c12:	4603      	mov	r3, r0
 8001c14:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001c16:	4b08      	ldr	r3, [pc, #32]	@ (8001c38 <HAL_FLASH_Program+0xa0>)
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	4a07      	ldr	r2, [pc, #28]	@ (8001c38 <HAL_FLASH_Program+0xa0>)
 8001c1c:	f023 0301 	bic.w	r3, r3, #1
 8001c20:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001c22:	4b04      	ldr	r3, [pc, #16]	@ (8001c34 <HAL_FLASH_Program+0x9c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	761a      	strb	r2, [r3, #24]

  return status;
 8001c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200001f4 	.word	0x200001f4
 8001c38:	40023c00 	.word	0x40023c00

08001c3c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001c46:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <HAL_FLASH_Unlock+0x38>)
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	da0b      	bge.n	8001c66 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001c4e:	4b09      	ldr	r3, [pc, #36]	@ (8001c74 <HAL_FLASH_Unlock+0x38>)
 8001c50:	4a09      	ldr	r2, [pc, #36]	@ (8001c78 <HAL_FLASH_Unlock+0x3c>)
 8001c52:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001c54:	4b07      	ldr	r3, [pc, #28]	@ (8001c74 <HAL_FLASH_Unlock+0x38>)
 8001c56:	4a09      	ldr	r2, [pc, #36]	@ (8001c7c <HAL_FLASH_Unlock+0x40>)
 8001c58:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001c5a:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <HAL_FLASH_Unlock+0x38>)
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	da01      	bge.n	8001c66 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001c66:	79fb      	ldrb	r3, [r7, #7]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	40023c00 	.word	0x40023c00
 8001c78:	45670123 	.word	0x45670123
 8001c7c:	cdef89ab 	.word	0xcdef89ab

08001c80 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001c84:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <HAL_FLASH_Lock+0x1c>)
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	4a04      	ldr	r2, [pc, #16]	@ (8001c9c <HAL_FLASH_Lock+0x1c>)
 8001c8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001c8e:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	40023c00 	.word	0x40023c00

08001ca0 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001ca4:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <HAL_FLASH_OB_Unlock+0x2c>)
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d007      	beq.n	8001cc0 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <HAL_FLASH_OB_Unlock+0x2c>)
 8001cb2:	4a07      	ldr	r2, [pc, #28]	@ (8001cd0 <HAL_FLASH_OB_Unlock+0x30>)
 8001cb4:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001cb6:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <HAL_FLASH_OB_Unlock+0x2c>)
 8001cb8:	4a06      	ldr	r2, [pc, #24]	@ (8001cd4 <HAL_FLASH_OB_Unlock+0x34>)
 8001cba:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	e000      	b.n	8001cc2 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	40023c00 	.word	0x40023c00
 8001cd0:	08192a3b 	.word	0x08192a3b
 8001cd4:	4c5d6e7f 	.word	0x4c5d6e7f

08001cd8 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001cdc:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <HAL_FLASH_OB_Lock+0x1c>)
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	4a04      	ldr	r2, [pc, #16]	@ (8001cf4 <HAL_FLASH_OB_Lock+0x1c>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	40023c00 	.word	0x40023c00

08001cf8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001d04:	4b1a      	ldr	r3, [pc, #104]	@ (8001d70 <FLASH_WaitForLastOperation+0x78>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d0a:	f7ff fe0d 	bl	8001928 <HAL_GetTick>
 8001d0e:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001d10:	e010      	b.n	8001d34 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d18:	d00c      	beq.n	8001d34 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d007      	beq.n	8001d30 <FLASH_WaitForLastOperation+0x38>
 8001d20:	f7ff fe02 	bl	8001928 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d201      	bcs.n	8001d34 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e019      	b.n	8001d68 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001d34:	4b0f      	ldr	r3, [pc, #60]	@ (8001d74 <FLASH_WaitForLastOperation+0x7c>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1e8      	bne.n	8001d12 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001d40:	4b0c      	ldr	r3, [pc, #48]	@ (8001d74 <FLASH_WaitForLastOperation+0x7c>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d002      	beq.n	8001d52 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001d4c:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <FLASH_WaitForLastOperation+0x7c>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001d52:	4b08      	ldr	r3, [pc, #32]	@ (8001d74 <FLASH_WaitForLastOperation+0x7c>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001d5e:	f000 f8a5 	bl	8001eac <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0

}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	200001f4 	.word	0x200001f4
 8001d74:	40023c00 	.word	0x40023c00

08001d78 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d84:	4b14      	ldr	r3, [pc, #80]	@ (8001dd8 <FLASH_Program_DoubleWord+0x60>)
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	4a13      	ldr	r2, [pc, #76]	@ (8001dd8 <FLASH_Program_DoubleWord+0x60>)
 8001d8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001d90:	4b11      	ldr	r3, [pc, #68]	@ (8001dd8 <FLASH_Program_DoubleWord+0x60>)
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	4a10      	ldr	r2, [pc, #64]	@ (8001dd8 <FLASH_Program_DoubleWord+0x60>)
 8001d96:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001d9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <FLASH_Program_DoubleWord+0x60>)
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd8 <FLASH_Program_DoubleWord+0x60>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001dae:	f3bf 8f6f 	isb	sy
}
 8001db2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8001db4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	000a      	movs	r2, r1
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	68f9      	ldr	r1, [r7, #12]
 8001dc6:	3104      	adds	r1, #4
 8001dc8:	4613      	mov	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]
}
 8001dcc:	bf00      	nop
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	40023c00 	.word	0x40023c00

08001ddc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001de6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e1c <FLASH_Program_Word+0x40>)
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	4a0c      	ldr	r2, [pc, #48]	@ (8001e1c <FLASH_Program_Word+0x40>)
 8001dec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001df0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001df2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e1c <FLASH_Program_Word+0x40>)
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	4a09      	ldr	r2, [pc, #36]	@ (8001e1c <FLASH_Program_Word+0x40>)
 8001df8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dfc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001dfe:	4b07      	ldr	r3, [pc, #28]	@ (8001e1c <FLASH_Program_Word+0x40>)
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	4a06      	ldr	r2, [pc, #24]	@ (8001e1c <FLASH_Program_Word+0x40>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	601a      	str	r2, [r3, #0]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	40023c00 	.word	0x40023c00

08001e20 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e64 <FLASH_Program_HalfWord+0x44>)
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	4a0c      	ldr	r2, [pc, #48]	@ (8001e64 <FLASH_Program_HalfWord+0x44>)
 8001e32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001e38:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <FLASH_Program_HalfWord+0x44>)
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	4a09      	ldr	r2, [pc, #36]	@ (8001e64 <FLASH_Program_HalfWord+0x44>)
 8001e3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e44:	4b07      	ldr	r3, [pc, #28]	@ (8001e64 <FLASH_Program_HalfWord+0x44>)
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	4a06      	ldr	r2, [pc, #24]	@ (8001e64 <FLASH_Program_HalfWord+0x44>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	801a      	strh	r2, [r3, #0]
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40023c00 	.word	0x40023c00

08001e68 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea8 <FLASH_Program_Byte+0x40>)
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	4a0b      	ldr	r2, [pc, #44]	@ (8001ea8 <FLASH_Program_Byte+0x40>)
 8001e7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001e80:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <FLASH_Program_Byte+0x40>)
 8001e82:	4a09      	ldr	r2, [pc, #36]	@ (8001ea8 <FLASH_Program_Byte+0x40>)
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e88:	4b07      	ldr	r3, [pc, #28]	@ (8001ea8 <FLASH_Program_Byte+0x40>)
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	4a06      	ldr	r2, [pc, #24]	@ (8001ea8 <FLASH_Program_Byte+0x40>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	78fa      	ldrb	r2, [r7, #3]
 8001e98:	701a      	strb	r2, [r3, #0]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40023c00 	.word	0x40023c00

08001eac <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8001f70 <FLASH_SetErrorCode+0xc4>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d008      	beq.n	8001ece <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8001f74 <FLASH_SetErrorCode+0xc8>)
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	f043 0310 	orr.w	r3, r3, #16
 8001ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8001f74 <FLASH_SetErrorCode+0xc8>)
 8001ec6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001ec8:	4b29      	ldr	r3, [pc, #164]	@ (8001f70 <FLASH_SetErrorCode+0xc4>)
 8001eca:	2210      	movs	r2, #16
 8001ecc:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001ece:	4b28      	ldr	r3, [pc, #160]	@ (8001f70 <FLASH_SetErrorCode+0xc4>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d008      	beq.n	8001eec <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001eda:	4b26      	ldr	r3, [pc, #152]	@ (8001f74 <FLASH_SetErrorCode+0xc8>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f043 0308 	orr.w	r3, r3, #8
 8001ee2:	4a24      	ldr	r2, [pc, #144]	@ (8001f74 <FLASH_SetErrorCode+0xc8>)
 8001ee4:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001ee6:	4b22      	ldr	r3, [pc, #136]	@ (8001f70 <FLASH_SetErrorCode+0xc4>)
 8001ee8:	2220      	movs	r2, #32
 8001eea:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001eec:	4b20      	ldr	r3, [pc, #128]	@ (8001f70 <FLASH_SetErrorCode+0xc4>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d008      	beq.n	8001f0a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f74 <FLASH_SetErrorCode+0xc8>)
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	f043 0304 	orr.w	r3, r3, #4
 8001f00:	4a1c      	ldr	r2, [pc, #112]	@ (8001f74 <FLASH_SetErrorCode+0xc8>)
 8001f02:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001f04:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <FLASH_SetErrorCode+0xc4>)
 8001f06:	2240      	movs	r2, #64	@ 0x40
 8001f08:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001f0a:	4b19      	ldr	r3, [pc, #100]	@ (8001f70 <FLASH_SetErrorCode+0xc4>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d008      	beq.n	8001f28 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001f16:	4b17      	ldr	r3, [pc, #92]	@ (8001f74 <FLASH_SetErrorCode+0xc8>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f043 0302 	orr.w	r3, r3, #2
 8001f1e:	4a15      	ldr	r2, [pc, #84]	@ (8001f74 <FLASH_SetErrorCode+0xc8>)
 8001f20:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001f22:	4b13      	ldr	r3, [pc, #76]	@ (8001f70 <FLASH_SetErrorCode+0xc4>)
 8001f24:	2280      	movs	r2, #128	@ 0x80
 8001f26:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001f28:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <FLASH_SetErrorCode+0xc4>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d009      	beq.n	8001f48 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001f34:	4b0f      	ldr	r3, [pc, #60]	@ (8001f74 <FLASH_SetErrorCode+0xc8>)
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f74 <FLASH_SetErrorCode+0xc8>)
 8001f3e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001f40:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <FLASH_SetErrorCode+0xc4>)
 8001f42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f46:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001f48:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <FLASH_SetErrorCode+0xc4>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d008      	beq.n	8001f66 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001f54:	4b07      	ldr	r3, [pc, #28]	@ (8001f74 <FLASH_SetErrorCode+0xc8>)
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	f043 0320 	orr.w	r3, r3, #32
 8001f5c:	4a05      	ldr	r2, [pc, #20]	@ (8001f74 <FLASH_SetErrorCode+0xc8>)
 8001f5e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001f60:	4b03      	ldr	r3, [pc, #12]	@ (8001f70 <FLASH_SetErrorCode+0xc4>)
 8001f62:	2202      	movs	r2, #2
 8001f64:	60da      	str	r2, [r3, #12]
  }
}
 8001f66:	bf00      	nop
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	40023c00 	.word	0x40023c00
 8001f74:	200001f4 	.word	0x200001f4

08001f78 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f86:	4b31      	ldr	r3, [pc, #196]	@ (800204c <HAL_FLASHEx_Erase+0xd4>)
 8001f88:	7e1b      	ldrb	r3, [r3, #24]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_FLASHEx_Erase+0x1a>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e058      	b.n	8002044 <HAL_FLASHEx_Erase+0xcc>
 8001f92:	4b2e      	ldr	r3, [pc, #184]	@ (800204c <HAL_FLASHEx_Erase+0xd4>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f98:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001f9c:	f7ff feac 	bl	8001cf8 <FLASH_WaitForLastOperation>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d148      	bne.n	800203c <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d115      	bne.n	8001fe6 <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	f000 f868 	bl	800209c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001fcc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001fd0:	f7ff fe92 	bl	8001cf8 <FLASH_WaitForLastOperation>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002050 <HAL_FLASHEx_Erase+0xd8>)
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	4a1c      	ldr	r2, [pc, #112]	@ (8002050 <HAL_FLASHEx_Erase+0xd8>)
 8001fde:	f023 0304 	bic.w	r3, r3, #4
 8001fe2:	6113      	str	r3, [r2, #16]
 8001fe4:	e028      	b.n	8002038 <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	e01c      	b.n	8002028 <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	68b8      	ldr	r0, [r7, #8]
 8001ff8:	f000 f874 	bl	80020e4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ffc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002000:	f7ff fe7a 	bl	8001cf8 <FLASH_WaitForLastOperation>
 8002004:	4603      	mov	r3, r0
 8002006:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002008:	4b11      	ldr	r3, [pc, #68]	@ (8002050 <HAL_FLASHEx_Erase+0xd8>)
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	4a10      	ldr	r2, [pc, #64]	@ (8002050 <HAL_FLASHEx_Erase+0xd8>)
 800200e:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8002012:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	601a      	str	r2, [r3, #0]
          break;
 8002020:	e00a      	b.n	8002038 <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	3301      	adds	r3, #1
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	4413      	add	r3, r2
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	429a      	cmp	r2, r3
 8002036:	d3da      	bcc.n	8001fee <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002038:	f000 f8e8 	bl	800220c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800203c:	4b03      	ldr	r3, [pc, #12]	@ (800204c <HAL_FLASHEx_Erase+0xd4>)
 800203e:	2200      	movs	r2, #0
 8002040:	761a      	strb	r2, [r3, #24]

  return status;
 8002042:	7bfb      	ldrb	r3, [r7, #15]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	200001f4 	.word	0x200001f4
 8002050:	40023c00 	.word	0x40023c00

08002054 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	220f      	movs	r2, #15
 8002060:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8002062:	f000 f897 	bl	8002194 <FLASH_OB_GetWRP>
 8002066:	4603      	mov	r3, r0
 8002068:	461a      	mov	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800206e:	f000 f89d 	bl	80021ac <FLASH_OB_GetRDP>
 8002072:	4603      	mov	r3, r0
 8002074:	461a      	mov	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800207a:	f000 f87b 	bl	8002174 <FLASH_OB_GetUser>
 800207e:	4603      	mov	r3, r0
 8002080:	461a      	mov	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8002086:	f000 f8b1 	bl	80021ec <FLASH_OB_GetBOR>
 800208a:	4603      	mov	r3, r0
 800208c:	461a      	mov	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	615a      	str	r2, [r3, #20]
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	6039      	str	r1, [r7, #0]
 80020a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80020a8:	4b0d      	ldr	r3, [pc, #52]	@ (80020e0 <FLASH_MassErase+0x44>)
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	4a0c      	ldr	r2, [pc, #48]	@ (80020e0 <FLASH_MassErase+0x44>)
 80020ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80020b4:	4b0a      	ldr	r3, [pc, #40]	@ (80020e0 <FLASH_MassErase+0x44>)
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	4a09      	ldr	r2, [pc, #36]	@ (80020e0 <FLASH_MassErase+0x44>)
 80020ba:	f043 0304 	orr.w	r3, r3, #4
 80020be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80020c0:	4b07      	ldr	r3, [pc, #28]	@ (80020e0 <FLASH_MassErase+0x44>)
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	4313      	orrs	r3, r2
 80020ca:	4a05      	ldr	r2, [pc, #20]	@ (80020e0 <FLASH_MassErase+0x44>)
 80020cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d0:	6113      	str	r3, [r2, #16]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	40023c00 	.word	0x40023c00

080020e4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d102      	bne.n	8002100 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	e010      	b.n	8002122 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d103      	bne.n	800210e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002106:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	e009      	b.n	8002122 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d103      	bne.n	800211c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002114:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	e002      	b.n	8002122 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800211c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002120:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002122:	4b13      	ldr	r3, [pc, #76]	@ (8002170 <FLASH_Erase_Sector+0x8c>)
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	4a12      	ldr	r2, [pc, #72]	@ (8002170 <FLASH_Erase_Sector+0x8c>)
 8002128:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800212c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800212e:	4b10      	ldr	r3, [pc, #64]	@ (8002170 <FLASH_Erase_Sector+0x8c>)
 8002130:	691a      	ldr	r2, [r3, #16]
 8002132:	490f      	ldr	r1, [pc, #60]	@ (8002170 <FLASH_Erase_Sector+0x8c>)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800213a:	4b0d      	ldr	r3, [pc, #52]	@ (8002170 <FLASH_Erase_Sector+0x8c>)
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	4a0c      	ldr	r2, [pc, #48]	@ (8002170 <FLASH_Erase_Sector+0x8c>)
 8002140:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002144:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002146:	4b0a      	ldr	r3, [pc, #40]	@ (8002170 <FLASH_Erase_Sector+0x8c>)
 8002148:	691a      	ldr	r2, [r3, #16]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4313      	orrs	r3, r2
 8002150:	4a07      	ldr	r2, [pc, #28]	@ (8002170 <FLASH_Erase_Sector+0x8c>)
 8002152:	f043 0302 	orr.w	r3, r3, #2
 8002156:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002158:	4b05      	ldr	r3, [pc, #20]	@ (8002170 <FLASH_Erase_Sector+0x8c>)
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	4a04      	ldr	r2, [pc, #16]	@ (8002170 <FLASH_Erase_Sector+0x8c>)
 800215e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002162:	6113      	str	r3, [r2, #16]
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	40023c00 	.word	0x40023c00

08002174 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8002178:	4b05      	ldr	r3, [pc, #20]	@ (8002190 <FLASH_OB_GetUser+0x1c>)
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	f023 031f 	bic.w	r3, r3, #31
 8002182:	b2db      	uxtb	r3, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40023c00 	.word	0x40023c00

08002194 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8002198:	4b03      	ldr	r3, [pc, #12]	@ (80021a8 <FLASH_OB_GetWRP+0x14>)
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	b29b      	uxth	r3, r3
}
 800219e:	4618      	mov	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	40023c16 	.word	0x40023c16

080021ac <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 80021b2:	23aa      	movs	r3, #170	@ 0xaa
 80021b4:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 80021b6:	4b0c      	ldr	r3, [pc, #48]	@ (80021e8 <FLASH_OB_GetRDP+0x3c>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2bcc      	cmp	r3, #204	@ 0xcc
 80021be:	d102      	bne.n	80021c6 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 80021c0:	23cc      	movs	r3, #204	@ 0xcc
 80021c2:	71fb      	strb	r3, [r7, #7]
 80021c4:	e009      	b.n	80021da <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 80021c6:	4b08      	ldr	r3, [pc, #32]	@ (80021e8 <FLASH_OB_GetRDP+0x3c>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2baa      	cmp	r3, #170	@ 0xaa
 80021ce:	d102      	bne.n	80021d6 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 80021d0:	23aa      	movs	r3, #170	@ 0xaa
 80021d2:	71fb      	strb	r3, [r7, #7]
 80021d4:	e001      	b.n	80021da <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 80021d6:	2355      	movs	r3, #85	@ 0x55
 80021d8:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 80021da:	79fb      	ldrb	r3, [r7, #7]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	40023c15 	.word	0x40023c15

080021ec <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 80021f0:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <FLASH_OB_GetBOR+0x1c>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	b2db      	uxtb	r3, r3
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40023c14 	.word	0x40023c14

0800220c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002210:	4b20      	ldr	r3, [pc, #128]	@ (8002294 <FLASH_FlushCaches+0x88>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002218:	2b00      	cmp	r3, #0
 800221a:	d017      	beq.n	800224c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800221c:	4b1d      	ldr	r3, [pc, #116]	@ (8002294 <FLASH_FlushCaches+0x88>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a1c      	ldr	r2, [pc, #112]	@ (8002294 <FLASH_FlushCaches+0x88>)
 8002222:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002226:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002228:	4b1a      	ldr	r3, [pc, #104]	@ (8002294 <FLASH_FlushCaches+0x88>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a19      	ldr	r2, [pc, #100]	@ (8002294 <FLASH_FlushCaches+0x88>)
 800222e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	4b17      	ldr	r3, [pc, #92]	@ (8002294 <FLASH_FlushCaches+0x88>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a16      	ldr	r2, [pc, #88]	@ (8002294 <FLASH_FlushCaches+0x88>)
 800223a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800223e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002240:	4b14      	ldr	r3, [pc, #80]	@ (8002294 <FLASH_FlushCaches+0x88>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a13      	ldr	r2, [pc, #76]	@ (8002294 <FLASH_FlushCaches+0x88>)
 8002246:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800224a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800224c:	4b11      	ldr	r3, [pc, #68]	@ (8002294 <FLASH_FlushCaches+0x88>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002254:	2b00      	cmp	r3, #0
 8002256:	d017      	beq.n	8002288 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002258:	4b0e      	ldr	r3, [pc, #56]	@ (8002294 <FLASH_FlushCaches+0x88>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0d      	ldr	r2, [pc, #52]	@ (8002294 <FLASH_FlushCaches+0x88>)
 800225e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002262:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002264:	4b0b      	ldr	r3, [pc, #44]	@ (8002294 <FLASH_FlushCaches+0x88>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0a      	ldr	r2, [pc, #40]	@ (8002294 <FLASH_FlushCaches+0x88>)
 800226a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <FLASH_FlushCaches+0x88>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a07      	ldr	r2, [pc, #28]	@ (8002294 <FLASH_FlushCaches+0x88>)
 8002276:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800227a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800227c:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <FLASH_FlushCaches+0x88>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a04      	ldr	r2, [pc, #16]	@ (8002294 <FLASH_FlushCaches+0x88>)
 8002282:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002286:	6013      	str	r3, [r2, #0]
  }
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40023c00 	.word	0x40023c00

08002298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002298:	b480      	push	{r7}
 800229a:	b089      	sub	sp, #36	@ 0x24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	e165      	b.n	8002580 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022b4:	2201      	movs	r2, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	f040 8154 	bne.w	800257a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d005      	beq.n	80022ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d130      	bne.n	800234c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	2203      	movs	r2, #3
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002320:	2201      	movs	r2, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	091b      	lsrs	r3, r3, #4
 8002336:	f003 0201 	and.w	r2, r3, #1
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b03      	cmp	r3, #3
 8002356:	d017      	beq.n	8002388 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	2203      	movs	r2, #3
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d123      	bne.n	80023dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	08da      	lsrs	r2, r3, #3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3208      	adds	r2, #8
 800239c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	220f      	movs	r2, #15
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	08da      	lsrs	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3208      	adds	r2, #8
 80023d6:	69b9      	ldr	r1, [r7, #24]
 80023d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	2203      	movs	r2, #3
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0203 	and.w	r2, r3, #3
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80ae 	beq.w	800257a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	4b5d      	ldr	r3, [pc, #372]	@ (8002598 <HAL_GPIO_Init+0x300>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002426:	4a5c      	ldr	r2, [pc, #368]	@ (8002598 <HAL_GPIO_Init+0x300>)
 8002428:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800242c:	6453      	str	r3, [r2, #68]	@ 0x44
 800242e:	4b5a      	ldr	r3, [pc, #360]	@ (8002598 <HAL_GPIO_Init+0x300>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800243a:	4a58      	ldr	r2, [pc, #352]	@ (800259c <HAL_GPIO_Init+0x304>)
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	089b      	lsrs	r3, r3, #2
 8002440:	3302      	adds	r3, #2
 8002442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	220f      	movs	r2, #15
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a4f      	ldr	r2, [pc, #316]	@ (80025a0 <HAL_GPIO_Init+0x308>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d025      	beq.n	80024b2 <HAL_GPIO_Init+0x21a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a4e      	ldr	r2, [pc, #312]	@ (80025a4 <HAL_GPIO_Init+0x30c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d01f      	beq.n	80024ae <HAL_GPIO_Init+0x216>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4d      	ldr	r2, [pc, #308]	@ (80025a8 <HAL_GPIO_Init+0x310>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d019      	beq.n	80024aa <HAL_GPIO_Init+0x212>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4c      	ldr	r2, [pc, #304]	@ (80025ac <HAL_GPIO_Init+0x314>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d013      	beq.n	80024a6 <HAL_GPIO_Init+0x20e>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a4b      	ldr	r2, [pc, #300]	@ (80025b0 <HAL_GPIO_Init+0x318>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d00d      	beq.n	80024a2 <HAL_GPIO_Init+0x20a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a4a      	ldr	r2, [pc, #296]	@ (80025b4 <HAL_GPIO_Init+0x31c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d007      	beq.n	800249e <HAL_GPIO_Init+0x206>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a49      	ldr	r2, [pc, #292]	@ (80025b8 <HAL_GPIO_Init+0x320>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d101      	bne.n	800249a <HAL_GPIO_Init+0x202>
 8002496:	2306      	movs	r3, #6
 8002498:	e00c      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 800249a:	2307      	movs	r3, #7
 800249c:	e00a      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 800249e:	2305      	movs	r3, #5
 80024a0:	e008      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 80024a2:	2304      	movs	r3, #4
 80024a4:	e006      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 80024a6:	2303      	movs	r3, #3
 80024a8:	e004      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e002      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 80024b2:	2300      	movs	r3, #0
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	f002 0203 	and.w	r2, r2, #3
 80024ba:	0092      	lsls	r2, r2, #2
 80024bc:	4093      	lsls	r3, r2
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c4:	4935      	ldr	r1, [pc, #212]	@ (800259c <HAL_GPIO_Init+0x304>)
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	3302      	adds	r3, #2
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024d2:	4b3a      	ldr	r3, [pc, #232]	@ (80025bc <HAL_GPIO_Init+0x324>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024f6:	4a31      	ldr	r2, [pc, #196]	@ (80025bc <HAL_GPIO_Init+0x324>)
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024fc:	4b2f      	ldr	r3, [pc, #188]	@ (80025bc <HAL_GPIO_Init+0x324>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002520:	4a26      	ldr	r2, [pc, #152]	@ (80025bc <HAL_GPIO_Init+0x324>)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002526:	4b25      	ldr	r3, [pc, #148]	@ (80025bc <HAL_GPIO_Init+0x324>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800254a:	4a1c      	ldr	r2, [pc, #112]	@ (80025bc <HAL_GPIO_Init+0x324>)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002550:	4b1a      	ldr	r3, [pc, #104]	@ (80025bc <HAL_GPIO_Init+0x324>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002574:	4a11      	ldr	r2, [pc, #68]	@ (80025bc <HAL_GPIO_Init+0x324>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3301      	adds	r3, #1
 800257e:	61fb      	str	r3, [r7, #28]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	2b0f      	cmp	r3, #15
 8002584:	f67f ae96 	bls.w	80022b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	3724      	adds	r7, #36	@ 0x24
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800
 800259c:	40013800 	.word	0x40013800
 80025a0:	40020000 	.word	0x40020000
 80025a4:	40020400 	.word	0x40020400
 80025a8:	40020800 	.word	0x40020800
 80025ac:	40020c00 	.word	0x40020c00
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40021400 	.word	0x40021400
 80025b8:	40021800 	.word	0x40021800
 80025bc:	40013c00 	.word	0x40013c00

080025c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	887b      	ldrh	r3, [r7, #2]
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
 80025dc:	e001      	b.n	80025e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025de:	2300      	movs	r3, #0
 80025e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	807b      	strh	r3, [r7, #2]
 80025fc:	4613      	mov	r3, r2
 80025fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002600:	787b      	ldrb	r3, [r7, #1]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002606:	887a      	ldrh	r2, [r7, #2]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800260c:	e003      	b.n	8002616 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800260e:	887b      	ldrh	r3, [r7, #2]
 8002610:	041a      	lsls	r2, r3, #16
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	619a      	str	r2, [r3, #24]
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0cc      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002638:	4b68      	ldr	r3, [pc, #416]	@ (80027dc <HAL_RCC_ClockConfig+0x1b8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d90c      	bls.n	8002660 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002646:	4b65      	ldr	r3, [pc, #404]	@ (80027dc <HAL_RCC_ClockConfig+0x1b8>)
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b63      	ldr	r3, [pc, #396]	@ (80027dc <HAL_RCC_ClockConfig+0x1b8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0b8      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d020      	beq.n	80026ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002678:	4b59      	ldr	r3, [pc, #356]	@ (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	4a58      	ldr	r2, [pc, #352]	@ (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002682:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002690:	4b53      	ldr	r3, [pc, #332]	@ (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	4a52      	ldr	r2, [pc, #328]	@ (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800269a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800269c:	4b50      	ldr	r3, [pc, #320]	@ (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	494d      	ldr	r1, [pc, #308]	@ (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d044      	beq.n	8002744 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d107      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	4b47      	ldr	r3, [pc, #284]	@ (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d119      	bne.n	8002702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e07f      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d003      	beq.n	80026e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026de:	2b03      	cmp	r3, #3
 80026e0:	d107      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e2:	4b3f      	ldr	r3, [pc, #252]	@ (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d109      	bne.n	8002702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e06f      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f2:	4b3b      	ldr	r3, [pc, #236]	@ (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e067      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002702:	4b37      	ldr	r3, [pc, #220]	@ (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f023 0203 	bic.w	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	4934      	ldr	r1, [pc, #208]	@ (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	4313      	orrs	r3, r2
 8002712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002714:	f7ff f908 	bl	8001928 <HAL_GetTick>
 8002718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271a:	e00a      	b.n	8002732 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800271c:	f7ff f904 	bl	8001928 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800272a:	4293      	cmp	r3, r2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e04f      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002732:	4b2b      	ldr	r3, [pc, #172]	@ (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 020c 	and.w	r2, r3, #12
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	429a      	cmp	r2, r3
 8002742:	d1eb      	bne.n	800271c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002744:	4b25      	ldr	r3, [pc, #148]	@ (80027dc <HAL_RCC_ClockConfig+0x1b8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 030f 	and.w	r3, r3, #15
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d20c      	bcs.n	800276c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002752:	4b22      	ldr	r3, [pc, #136]	@ (80027dc <HAL_RCC_ClockConfig+0x1b8>)
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275a:	4b20      	ldr	r3, [pc, #128]	@ (80027dc <HAL_RCC_ClockConfig+0x1b8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d001      	beq.n	800276c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e032      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002778:	4b19      	ldr	r3, [pc, #100]	@ (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4916      	ldr	r1, [pc, #88]	@ (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	4313      	orrs	r3, r2
 8002788:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d009      	beq.n	80027aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002796:	4b12      	ldr	r3, [pc, #72]	@ (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	490e      	ldr	r1, [pc, #56]	@ (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027aa:	f000 f855 	bl	8002858 <HAL_RCC_GetSysClockFreq>
 80027ae:	4602      	mov	r2, r0
 80027b0:	4b0b      	ldr	r3, [pc, #44]	@ (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	490a      	ldr	r1, [pc, #40]	@ (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 80027bc:	5ccb      	ldrb	r3, [r1, r3]
 80027be:	fa22 f303 	lsr.w	r3, r2, r3
 80027c2:	4a09      	ldr	r2, [pc, #36]	@ (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80027c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80027c6:	4b09      	ldr	r3, [pc, #36]	@ (80027ec <HAL_RCC_ClockConfig+0x1c8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff f868 	bl	80018a0 <HAL_InitTick>

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40023c00 	.word	0x40023c00
 80027e0:	40023800 	.word	0x40023800
 80027e4:	08004ff8 	.word	0x08004ff8
 80027e8:	20000008 	.word	0x20000008
 80027ec:	2000000c 	.word	0x2000000c

080027f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f4:	4b03      	ldr	r3, [pc, #12]	@ (8002804 <HAL_RCC_GetHCLKFreq+0x14>)
 80027f6:	681b      	ldr	r3, [r3, #0]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	20000008 	.word	0x20000008

08002808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800280c:	f7ff fff0 	bl	80027f0 <HAL_RCC_GetHCLKFreq>
 8002810:	4602      	mov	r2, r0
 8002812:	4b05      	ldr	r3, [pc, #20]	@ (8002828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	0a9b      	lsrs	r3, r3, #10
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	4903      	ldr	r1, [pc, #12]	@ (800282c <HAL_RCC_GetPCLK1Freq+0x24>)
 800281e:	5ccb      	ldrb	r3, [r1, r3]
 8002820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002824:	4618      	mov	r0, r3
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40023800 	.word	0x40023800
 800282c:	08005008 	.word	0x08005008

08002830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002834:	f7ff ffdc 	bl	80027f0 <HAL_RCC_GetHCLKFreq>
 8002838:	4602      	mov	r2, r0
 800283a:	4b05      	ldr	r3, [pc, #20]	@ (8002850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	0b5b      	lsrs	r3, r3, #13
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	4903      	ldr	r1, [pc, #12]	@ (8002854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002846:	5ccb      	ldrb	r3, [r1, r3]
 8002848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800284c:	4618      	mov	r0, r3
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40023800 	.word	0x40023800
 8002854:	08005008 	.word	0x08005008

08002858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800285c:	b0a6      	sub	sp, #152	@ 0x98
 800285e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800287e:	4bc8      	ldr	r3, [pc, #800]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	2b0c      	cmp	r3, #12
 8002888:	f200 817e 	bhi.w	8002b88 <HAL_RCC_GetSysClockFreq+0x330>
 800288c:	a201      	add	r2, pc, #4	@ (adr r2, 8002894 <HAL_RCC_GetSysClockFreq+0x3c>)
 800288e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002892:	bf00      	nop
 8002894:	080028c9 	.word	0x080028c9
 8002898:	08002b89 	.word	0x08002b89
 800289c:	08002b89 	.word	0x08002b89
 80028a0:	08002b89 	.word	0x08002b89
 80028a4:	080028d1 	.word	0x080028d1
 80028a8:	08002b89 	.word	0x08002b89
 80028ac:	08002b89 	.word	0x08002b89
 80028b0:	08002b89 	.word	0x08002b89
 80028b4:	080028d9 	.word	0x080028d9
 80028b8:	08002b89 	.word	0x08002b89
 80028bc:	08002b89 	.word	0x08002b89
 80028c0:	08002b89 	.word	0x08002b89
 80028c4:	08002a43 	.word	0x08002a43
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028c8:	4bb6      	ldr	r3, [pc, #728]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80028ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80028ce:	e15f      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028d0:	4bb5      	ldr	r3, [pc, #724]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x350>)
 80028d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80028d6:	e15b      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028d8:	4bb1      	ldr	r3, [pc, #708]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x348>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028e4:	4bae      	ldr	r3, [pc, #696]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x348>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d031      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028f0:	4bab      	ldr	r3, [pc, #684]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x348>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	099b      	lsrs	r3, r3, #6
 80028f6:	2200      	movs	r2, #0
 80028f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80028fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002902:	663b      	str	r3, [r7, #96]	@ 0x60
 8002904:	2300      	movs	r3, #0
 8002906:	667b      	str	r3, [r7, #100]	@ 0x64
 8002908:	4ba7      	ldr	r3, [pc, #668]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x350>)
 800290a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800290e:	462a      	mov	r2, r5
 8002910:	fb03 f202 	mul.w	r2, r3, r2
 8002914:	2300      	movs	r3, #0
 8002916:	4621      	mov	r1, r4
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	4aa2      	ldr	r2, [pc, #648]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002920:	4621      	mov	r1, r4
 8002922:	fba1 1202 	umull	r1, r2, r1, r2
 8002926:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002928:	460a      	mov	r2, r1
 800292a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800292c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800292e:	4413      	add	r3, r2
 8002930:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002932:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002936:	2200      	movs	r2, #0
 8002938:	65bb      	str	r3, [r7, #88]	@ 0x58
 800293a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800293c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002940:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002944:	f7fd fcb4 	bl	80002b0 <__aeabi_uldivmod>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4613      	mov	r3, r2
 800294e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002952:	e064      	b.n	8002a1e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002954:	4b92      	ldr	r3, [pc, #584]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	099b      	lsrs	r3, r3, #6
 800295a:	2200      	movs	r2, #0
 800295c:	653b      	str	r3, [r7, #80]	@ 0x50
 800295e:	657a      	str	r2, [r7, #84]	@ 0x54
 8002960:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002966:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002968:	2300      	movs	r3, #0
 800296a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800296c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002970:	4622      	mov	r2, r4
 8002972:	462b      	mov	r3, r5
 8002974:	f04f 0000 	mov.w	r0, #0
 8002978:	f04f 0100 	mov.w	r1, #0
 800297c:	0159      	lsls	r1, r3, #5
 800297e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002982:	0150      	lsls	r0, r2, #5
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4621      	mov	r1, r4
 800298a:	1a51      	subs	r1, r2, r1
 800298c:	6139      	str	r1, [r7, #16]
 800298e:	4629      	mov	r1, r5
 8002990:	eb63 0301 	sbc.w	r3, r3, r1
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029a2:	4659      	mov	r1, fp
 80029a4:	018b      	lsls	r3, r1, #6
 80029a6:	4651      	mov	r1, sl
 80029a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029ac:	4651      	mov	r1, sl
 80029ae:	018a      	lsls	r2, r1, #6
 80029b0:	4651      	mov	r1, sl
 80029b2:	ebb2 0801 	subs.w	r8, r2, r1
 80029b6:	4659      	mov	r1, fp
 80029b8:	eb63 0901 	sbc.w	r9, r3, r1
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029d0:	4690      	mov	r8, r2
 80029d2:	4699      	mov	r9, r3
 80029d4:	4623      	mov	r3, r4
 80029d6:	eb18 0303 	adds.w	r3, r8, r3
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	462b      	mov	r3, r5
 80029de:	eb49 0303 	adc.w	r3, r9, r3
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029f0:	4629      	mov	r1, r5
 80029f2:	028b      	lsls	r3, r1, #10
 80029f4:	4621      	mov	r1, r4
 80029f6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029fa:	4621      	mov	r1, r4
 80029fc:	028a      	lsls	r2, r1, #10
 80029fe:	4610      	mov	r0, r2
 8002a00:	4619      	mov	r1, r3
 8002a02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a06:	2200      	movs	r2, #0
 8002a08:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002a0c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a10:	f7fd fc4e 	bl	80002b0 <__aeabi_uldivmod>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4613      	mov	r3, r2
 8002a1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a1e:	4b60      	ldr	r3, [pc, #384]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	0c1b      	lsrs	r3, r3, #16
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	3301      	adds	r3, #1
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002a30:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002a34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002a40:	e0a6      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a42:	4b57      	ldr	r3, [pc, #348]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a4e:	4b54      	ldr	r3, [pc, #336]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d02a      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a5a:	4b51      	ldr	r3, [pc, #324]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	099b      	lsrs	r3, r3, #6
 8002a60:	2200      	movs	r2, #0
 8002a62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a64:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	4b4e      	ldr	r3, [pc, #312]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002a70:	fb03 f201 	mul.w	r2, r3, r1
 8002a74:	2300      	movs	r3, #0
 8002a76:	fb00 f303 	mul.w	r3, r0, r3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	4a4a      	ldr	r2, [pc, #296]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002a7e:	fba0 1202 	umull	r1, r2, r0, r2
 8002a82:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a84:	460a      	mov	r2, r1
 8002a86:	673a      	str	r2, [r7, #112]	@ 0x70
 8002a88:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002a8a:	4413      	add	r3, r2
 8002a8c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002a8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a92:	2200      	movs	r2, #0
 8002a94:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a96:	637a      	str	r2, [r7, #52]	@ 0x34
 8002a98:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002a9c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002aa0:	f7fd fc06 	bl	80002b0 <__aeabi_uldivmod>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002aae:	e05b      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	099b      	lsrs	r3, r3, #6
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac2:	623b      	str	r3, [r7, #32]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ac8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002acc:	4642      	mov	r2, r8
 8002ace:	464b      	mov	r3, r9
 8002ad0:	f04f 0000 	mov.w	r0, #0
 8002ad4:	f04f 0100 	mov.w	r1, #0
 8002ad8:	0159      	lsls	r1, r3, #5
 8002ada:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ade:	0150      	lsls	r0, r2, #5
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4641      	mov	r1, r8
 8002ae6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002aea:	4649      	mov	r1, r9
 8002aec:	eb63 0b01 	sbc.w	fp, r3, r1
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002afc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b04:	ebb2 040a 	subs.w	r4, r2, sl
 8002b08:	eb63 050b 	sbc.w	r5, r3, fp
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	00eb      	lsls	r3, r5, #3
 8002b16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b1a:	00e2      	lsls	r2, r4, #3
 8002b1c:	4614      	mov	r4, r2
 8002b1e:	461d      	mov	r5, r3
 8002b20:	4643      	mov	r3, r8
 8002b22:	18e3      	adds	r3, r4, r3
 8002b24:	603b      	str	r3, [r7, #0]
 8002b26:	464b      	mov	r3, r9
 8002b28:	eb45 0303 	adc.w	r3, r5, r3
 8002b2c:	607b      	str	r3, [r7, #4]
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b3a:	4629      	mov	r1, r5
 8002b3c:	028b      	lsls	r3, r1, #10
 8002b3e:	4621      	mov	r1, r4
 8002b40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b44:	4621      	mov	r1, r4
 8002b46:	028a      	lsls	r2, r1, #10
 8002b48:	4610      	mov	r0, r2
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b50:	2200      	movs	r2, #0
 8002b52:	61bb      	str	r3, [r7, #24]
 8002b54:	61fa      	str	r2, [r7, #28]
 8002b56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b5a:	f7fd fba9 	bl	80002b0 <__aeabi_uldivmod>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	4613      	mov	r3, r2
 8002b64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b68:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	0f1b      	lsrs	r3, r3, #28
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002b76:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002b7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002b86:	e003      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b88:	4b06      	ldr	r3, [pc, #24]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002b8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002b8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3798      	adds	r7, #152	@ 0x98
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	017d7840 	.word	0x017d7840

08002bac <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002bb2:	f7fe feb9 	bl	8001928 <HAL_GetTick>
 8002bb6:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002bb8:	4b72      	ldr	r3, [pc, #456]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a71      	ldr	r2, [pc, #452]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc6:	f7fe feaf 	bl	8001928 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e0d0      	b.n	8002d7a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002bd8:	4b6a      	ldr	r3, [pc, #424]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f0      	beq.n	8002bc6 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002be4:	4b67      	ldr	r3, [pc, #412]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a66      	ldr	r2, [pc, #408]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002bf0:	f7fe fe9a 	bl	8001928 <HAL_GetTick>
 8002bf4:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002bf6:	4b63      	ldr	r3, [pc, #396]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002bfc:	e00a      	b.n	8002c14 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bfe:	f7fe fe93 	bl	8001928 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e0b2      	b.n	8002d7a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002c14:	4b5b      	ldr	r3, [pc, #364]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 030c 	and.w	r3, r3, #12
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1ee      	bne.n	8002bfe <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002c20:	f7fe fe82 	bl	8001928 <HAL_GetTick>
 8002c24:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8002c26:	4b57      	ldr	r3, [pc, #348]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a56      	ldr	r2, [pc, #344]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002c2c:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8002c30:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c34:	f7fe fe78 	bl	8001928 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	@ 0x64
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e099      	b.n	8002d7a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002c46:	4b4f      	ldr	r3, [pc, #316]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002c52:	f7fe fe69 	bl	8001928 <HAL_GetTick>
 8002c56:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002c58:	4b4a      	ldr	r3, [pc, #296]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a49      	ldr	r2, [pc, #292]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002c5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c62:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c66:	f7fe fe5f 	bl	8001928 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e080      	b.n	8002d7a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002c78:	4b42      	ldr	r3, [pc, #264]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f0      	bne.n	8002c66 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002c84:	f7fe fe50 	bl	8001928 <HAL_GetTick>
 8002c88:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a3d      	ldr	r2, [pc, #244]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002c90:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c94:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c98:	f7fe fe46 	bl	8001928 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e067      	b.n	8002d7a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002caa:	4b36      	ldr	r3, [pc, #216]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002cb6:	f7fe fe37 	bl	8001928 <HAL_GetTick>
 8002cba:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8002cbc:	4b31      	ldr	r3, [pc, #196]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a30      	ldr	r2, [pc, #192]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002cc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cc6:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002cca:	f7fe fe2d 	bl	8001928 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e04e      	b.n	8002d7a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002cdc:	4b29      	ldr	r3, [pc, #164]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f0      	bne.n	8002cca <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 8002ce8:	4b26      	ldr	r3, [pc, #152]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002cea:	4a27      	ldr	r2, [pc, #156]	@ (8002d88 <HAL_RCC_DeInit+0x1dc>)
 8002cec:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002cee:	4b25      	ldr	r3, [pc, #148]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002cf0:	4a25      	ldr	r2, [pc, #148]	@ (8002d88 <HAL_RCC_DeInit+0x1dc>)
 8002cf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 8002cf6:	4b23      	ldr	r3, [pc, #140]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002cf8:	4a24      	ldr	r2, [pc, #144]	@ (8002d8c <HAL_RCC_DeInit+0x1e0>)
 8002cfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002cfe:	4b21      	ldr	r3, [pc, #132]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	4a20      	ldr	r2, [pc, #128]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002d04:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8002d08:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002d10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d14:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8002d16:	4b1b      	ldr	r3, [pc, #108]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	4a1a      	ldr	r2, [pc, #104]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002d1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d20:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 8002d22:	4b18      	ldr	r3, [pc, #96]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	4a17      	ldr	r2, [pc, #92]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002d28:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 8002d2c:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002d2e:	4b15      	ldr	r3, [pc, #84]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	4a14      	ldr	r2, [pc, #80]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002d34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d38:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8002d3a:	4b12      	ldr	r3, [pc, #72]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	4a11      	ldr	r2, [pc, #68]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002d40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d44:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002d46:	4b0f      	ldr	r3, [pc, #60]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d4a:	4a0e      	ldr	r2, [pc, #56]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002d52:	4b0c      	ldr	r3, [pc, #48]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002d54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d56:	4a0b      	ldr	r2, [pc, #44]	@ (8002d84 <HAL_RCC_DeInit+0x1d8>)
 8002d58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d5c:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d90 <HAL_RCC_DeInit+0x1e4>)
 8002d60:	4a0c      	ldr	r2, [pc, #48]	@ (8002d94 <HAL_RCC_DeInit+0x1e8>)
 8002d62:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d64:	4b0c      	ldr	r3, [pc, #48]	@ (8002d98 <HAL_RCC_DeInit+0x1ec>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fe fd99 	bl	80018a0 <HAL_InitTick>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8002d78:	2300      	movs	r3, #0
  }
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
 8002d88:	24003010 	.word	0x24003010
 8002d8c:	04003010 	.word	0x04003010
 8002d90:	20000008 	.word	0x20000008
 8002d94:	00f42400 	.word	0x00f42400
 8002d98:	2000000c 	.word	0x2000000c

08002d9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e28d      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 8083 	beq.w	8002ec2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002dbc:	4b94      	ldr	r3, [pc, #592]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 030c 	and.w	r3, r3, #12
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d019      	beq.n	8002dfc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002dc8:	4b91      	ldr	r3, [pc, #580]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 030c 	and.w	r3, r3, #12
        || \
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d106      	bne.n	8002de2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002dd4:	4b8e      	ldr	r3, [pc, #568]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ddc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002de0:	d00c      	beq.n	8002dfc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002de2:	4b8b      	ldr	r3, [pc, #556]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002dea:	2b0c      	cmp	r3, #12
 8002dec:	d112      	bne.n	8002e14 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dee:	4b88      	ldr	r3, [pc, #544]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002df6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dfa:	d10b      	bne.n	8002e14 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfc:	4b84      	ldr	r3, [pc, #528]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d05b      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x124>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d157      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e25a      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e1c:	d106      	bne.n	8002e2c <HAL_RCC_OscConfig+0x90>
 8002e1e:	4b7c      	ldr	r3, [pc, #496]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a7b      	ldr	r2, [pc, #492]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	e01d      	b.n	8002e68 <HAL_RCC_OscConfig+0xcc>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCC_OscConfig+0xb4>
 8002e36:	4b76      	ldr	r3, [pc, #472]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a75      	ldr	r2, [pc, #468]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002e3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4b73      	ldr	r3, [pc, #460]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a72      	ldr	r2, [pc, #456]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e00b      	b.n	8002e68 <HAL_RCC_OscConfig+0xcc>
 8002e50:	4b6f      	ldr	r3, [pc, #444]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a6e      	ldr	r2, [pc, #440]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	4b6c      	ldr	r3, [pc, #432]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a6b      	ldr	r2, [pc, #428]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002e62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d013      	beq.n	8002e98 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7fe fd5a 	bl	8001928 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e78:	f7fe fd56 	bl	8001928 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	@ 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e21f      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8a:	4b61      	ldr	r3, [pc, #388]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0xdc>
 8002e96:	e014      	b.n	8002ec2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fe fd46 	bl	8001928 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea0:	f7fe fd42 	bl	8001928 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	@ 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e20b      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eb2:	4b57      	ldr	r3, [pc, #348]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x104>
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d06f      	beq.n	8002fae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ece:	4b50      	ldr	r3, [pc, #320]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d017      	beq.n	8002f0a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002eda:	4b4d      	ldr	r3, [pc, #308]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 030c 	and.w	r3, r3, #12
        || \
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d105      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ee6:	4b4a      	ldr	r3, [pc, #296]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00b      	beq.n	8002f0a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ef2:	4b47      	ldr	r3, [pc, #284]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002efa:	2b0c      	cmp	r3, #12
 8002efc:	d11c      	bne.n	8002f38 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002efe:	4b44      	ldr	r3, [pc, #272]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d116      	bne.n	8002f38 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0a:	4b41      	ldr	r3, [pc, #260]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d005      	beq.n	8002f22 <HAL_RCC_OscConfig+0x186>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d001      	beq.n	8002f22 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e1d3      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f22:	4b3b      	ldr	r3, [pc, #236]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4937      	ldr	r1, [pc, #220]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f36:	e03a      	b.n	8002fae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d020      	beq.n	8002f82 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f40:	4b34      	ldr	r3, [pc, #208]	@ (8003014 <HAL_RCC_OscConfig+0x278>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f46:	f7fe fcef 	bl	8001928 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f4e:	f7fe fceb 	bl	8001928 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e1b4      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f60:	4b2b      	ldr	r3, [pc, #172]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0f0      	beq.n	8002f4e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6c:	4b28      	ldr	r3, [pc, #160]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4925      	ldr	r1, [pc, #148]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	600b      	str	r3, [r1, #0]
 8002f80:	e015      	b.n	8002fae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f82:	4b24      	ldr	r3, [pc, #144]	@ (8003014 <HAL_RCC_OscConfig+0x278>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fe fcce 	bl	8001928 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f90:	f7fe fcca 	bl	8001928 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e193      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d036      	beq.n	8003028 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d016      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fc2:	4b15      	ldr	r3, [pc, #84]	@ (8003018 <HAL_RCC_OscConfig+0x27c>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc8:	f7fe fcae 	bl	8001928 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd0:	f7fe fcaa 	bl	8001928 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e173      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8003010 <HAL_RCC_OscConfig+0x274>)
 8002fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x234>
 8002fee:	e01b      	b.n	8003028 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff0:	4b09      	ldr	r3, [pc, #36]	@ (8003018 <HAL_RCC_OscConfig+0x27c>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff6:	f7fe fc97 	bl	8001928 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ffc:	e00e      	b.n	800301c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ffe:	f7fe fc93 	bl	8001928 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d907      	bls.n	800301c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e15c      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
 8003010:	40023800 	.word	0x40023800
 8003014:	42470000 	.word	0x42470000
 8003018:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800301c:	4b8a      	ldr	r3, [pc, #552]	@ (8003248 <HAL_RCC_OscConfig+0x4ac>)
 800301e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1ea      	bne.n	8002ffe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 8097 	beq.w	8003164 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003036:	2300      	movs	r3, #0
 8003038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800303a:	4b83      	ldr	r3, [pc, #524]	@ (8003248 <HAL_RCC_OscConfig+0x4ac>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10f      	bne.n	8003066 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	4b7f      	ldr	r3, [pc, #508]	@ (8003248 <HAL_RCC_OscConfig+0x4ac>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	4a7e      	ldr	r2, [pc, #504]	@ (8003248 <HAL_RCC_OscConfig+0x4ac>)
 8003050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003054:	6413      	str	r3, [r2, #64]	@ 0x40
 8003056:	4b7c      	ldr	r3, [pc, #496]	@ (8003248 <HAL_RCC_OscConfig+0x4ac>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003062:	2301      	movs	r3, #1
 8003064:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003066:	4b79      	ldr	r3, [pc, #484]	@ (800324c <HAL_RCC_OscConfig+0x4b0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d118      	bne.n	80030a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003072:	4b76      	ldr	r3, [pc, #472]	@ (800324c <HAL_RCC_OscConfig+0x4b0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a75      	ldr	r2, [pc, #468]	@ (800324c <HAL_RCC_OscConfig+0x4b0>)
 8003078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800307c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800307e:	f7fe fc53 	bl	8001928 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003086:	f7fe fc4f 	bl	8001928 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e118      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003098:	4b6c      	ldr	r3, [pc, #432]	@ (800324c <HAL_RCC_OscConfig+0x4b0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f0      	beq.n	8003086 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d106      	bne.n	80030ba <HAL_RCC_OscConfig+0x31e>
 80030ac:	4b66      	ldr	r3, [pc, #408]	@ (8003248 <HAL_RCC_OscConfig+0x4ac>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b0:	4a65      	ldr	r2, [pc, #404]	@ (8003248 <HAL_RCC_OscConfig+0x4ac>)
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80030b8:	e01c      	b.n	80030f4 <HAL_RCC_OscConfig+0x358>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b05      	cmp	r3, #5
 80030c0:	d10c      	bne.n	80030dc <HAL_RCC_OscConfig+0x340>
 80030c2:	4b61      	ldr	r3, [pc, #388]	@ (8003248 <HAL_RCC_OscConfig+0x4ac>)
 80030c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c6:	4a60      	ldr	r2, [pc, #384]	@ (8003248 <HAL_RCC_OscConfig+0x4ac>)
 80030c8:	f043 0304 	orr.w	r3, r3, #4
 80030cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80030ce:	4b5e      	ldr	r3, [pc, #376]	@ (8003248 <HAL_RCC_OscConfig+0x4ac>)
 80030d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d2:	4a5d      	ldr	r2, [pc, #372]	@ (8003248 <HAL_RCC_OscConfig+0x4ac>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80030da:	e00b      	b.n	80030f4 <HAL_RCC_OscConfig+0x358>
 80030dc:	4b5a      	ldr	r3, [pc, #360]	@ (8003248 <HAL_RCC_OscConfig+0x4ac>)
 80030de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e0:	4a59      	ldr	r2, [pc, #356]	@ (8003248 <HAL_RCC_OscConfig+0x4ac>)
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80030e8:	4b57      	ldr	r3, [pc, #348]	@ (8003248 <HAL_RCC_OscConfig+0x4ac>)
 80030ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ec:	4a56      	ldr	r2, [pc, #344]	@ (8003248 <HAL_RCC_OscConfig+0x4ac>)
 80030ee:	f023 0304 	bic.w	r3, r3, #4
 80030f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d015      	beq.n	8003128 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fc:	f7fe fc14 	bl	8001928 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003102:	e00a      	b.n	800311a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003104:	f7fe fc10 	bl	8001928 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003112:	4293      	cmp	r3, r2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e0d7      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311a:	4b4b      	ldr	r3, [pc, #300]	@ (8003248 <HAL_RCC_OscConfig+0x4ac>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0ee      	beq.n	8003104 <HAL_RCC_OscConfig+0x368>
 8003126:	e014      	b.n	8003152 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003128:	f7fe fbfe 	bl	8001928 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800312e:	e00a      	b.n	8003146 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003130:	f7fe fbfa 	bl	8001928 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800313e:	4293      	cmp	r3, r2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e0c1      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003146:	4b40      	ldr	r3, [pc, #256]	@ (8003248 <HAL_RCC_OscConfig+0x4ac>)
 8003148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1ee      	bne.n	8003130 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003152:	7dfb      	ldrb	r3, [r7, #23]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d105      	bne.n	8003164 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003158:	4b3b      	ldr	r3, [pc, #236]	@ (8003248 <HAL_RCC_OscConfig+0x4ac>)
 800315a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315c:	4a3a      	ldr	r2, [pc, #232]	@ (8003248 <HAL_RCC_OscConfig+0x4ac>)
 800315e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003162:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80ad 	beq.w	80032c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800316e:	4b36      	ldr	r3, [pc, #216]	@ (8003248 <HAL_RCC_OscConfig+0x4ac>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b08      	cmp	r3, #8
 8003178:	d060      	beq.n	800323c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d145      	bne.n	800320e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003182:	4b33      	ldr	r3, [pc, #204]	@ (8003250 <HAL_RCC_OscConfig+0x4b4>)
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7fe fbce 	bl	8001928 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003190:	f7fe fbca 	bl	8001928 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e093      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a2:	4b29      	ldr	r3, [pc, #164]	@ (8003248 <HAL_RCC_OscConfig+0x4ac>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69da      	ldr	r2, [r3, #28]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031bc:	019b      	lsls	r3, r3, #6
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c4:	085b      	lsrs	r3, r3, #1
 80031c6:	3b01      	subs	r3, #1
 80031c8:	041b      	lsls	r3, r3, #16
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d0:	061b      	lsls	r3, r3, #24
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d8:	071b      	lsls	r3, r3, #28
 80031da:	491b      	ldr	r1, [pc, #108]	@ (8003248 <HAL_RCC_OscConfig+0x4ac>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003250 <HAL_RCC_OscConfig+0x4b4>)
 80031e2:	2201      	movs	r2, #1
 80031e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e6:	f7fe fb9f 	bl	8001928 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ee:	f7fe fb9b 	bl	8001928 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e064      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003200:	4b11      	ldr	r3, [pc, #68]	@ (8003248 <HAL_RCC_OscConfig+0x4ac>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x452>
 800320c:	e05c      	b.n	80032c8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320e:	4b10      	ldr	r3, [pc, #64]	@ (8003250 <HAL_RCC_OscConfig+0x4b4>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fe fb88 	bl	8001928 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800321c:	f7fe fb84 	bl	8001928 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e04d      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322e:	4b06      	ldr	r3, [pc, #24]	@ (8003248 <HAL_RCC_OscConfig+0x4ac>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x480>
 800323a:	e045      	b.n	80032c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d107      	bne.n	8003254 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e040      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
 8003248:	40023800 	.word	0x40023800
 800324c:	40007000 	.word	0x40007000
 8003250:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003254:	4b1f      	ldr	r3, [pc, #124]	@ (80032d4 <HAL_RCC_OscConfig+0x538>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d030      	beq.n	80032c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800326c:	429a      	cmp	r2, r3
 800326e:	d129      	bne.n	80032c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327a:	429a      	cmp	r2, r3
 800327c:	d122      	bne.n	80032c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003284:	4013      	ands	r3, r2
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800328a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800328c:	4293      	cmp	r3, r2
 800328e:	d119      	bne.n	80032c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800329a:	085b      	lsrs	r3, r3, #1
 800329c:	3b01      	subs	r3, #1
 800329e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d10f      	bne.n	80032c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d107      	bne.n	80032c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d001      	beq.n	80032c8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e000      	b.n	80032ca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40023800 	.word	0x40023800

080032d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e042      	b.n	8003370 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d106      	bne.n	8003304 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fe f8ca 	bl	8001498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2224      	movs	r2, #36	@ 0x24
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800331a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 fa09 	bl	8003734 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003330:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695a      	ldr	r2, [r3, #20]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003340:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003350:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08a      	sub	sp, #40	@ 0x28
 800337c:	af02      	add	r7, sp, #8
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	4613      	mov	r3, r2
 8003386:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b20      	cmp	r3, #32
 8003396:	d175      	bne.n	8003484 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <HAL_UART_Transmit+0x2c>
 800339e:	88fb      	ldrh	r3, [r7, #6]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e06e      	b.n	8003486 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2221      	movs	r2, #33	@ 0x21
 80033b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033b6:	f7fe fab7 	bl	8001928 <HAL_GetTick>
 80033ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	88fa      	ldrh	r2, [r7, #6]
 80033c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	88fa      	ldrh	r2, [r7, #6]
 80033c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033d0:	d108      	bne.n	80033e4 <HAL_UART_Transmit+0x6c>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d104      	bne.n	80033e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	61bb      	str	r3, [r7, #24]
 80033e2:	e003      	b.n	80033ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033ec:	e02e      	b.n	800344c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2200      	movs	r2, #0
 80033f6:	2180      	movs	r1, #128	@ 0x80
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f8df 	bl	80035bc <UART_WaitOnFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e03a      	b.n	8003486 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10b      	bne.n	800342e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	461a      	mov	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003424:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	3302      	adds	r3, #2
 800342a:	61bb      	str	r3, [r7, #24]
 800342c:	e007      	b.n	800343e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	781a      	ldrb	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	3301      	adds	r3, #1
 800343c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003450:	b29b      	uxth	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1cb      	bne.n	80033ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2200      	movs	r2, #0
 800345e:	2140      	movs	r1, #64	@ 0x40
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 f8ab 	bl	80035bc <UART_WaitOnFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e006      	b.n	8003486 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003480:	2300      	movs	r3, #0
 8003482:	e000      	b.n	8003486 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003484:	2302      	movs	r3, #2
  }
}
 8003486:	4618      	mov	r0, r3
 8003488:	3720      	adds	r7, #32
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b08a      	sub	sp, #40	@ 0x28
 8003492:	af02      	add	r7, sp, #8
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	603b      	str	r3, [r7, #0]
 800349a:	4613      	mov	r3, r2
 800349c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b20      	cmp	r3, #32
 80034ac:	f040 8081 	bne.w	80035b2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <HAL_UART_Receive+0x2e>
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e079      	b.n	80035b4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2222      	movs	r2, #34	@ 0x22
 80034ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034d4:	f7fe fa28 	bl	8001928 <HAL_GetTick>
 80034d8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	88fa      	ldrh	r2, [r7, #6]
 80034de:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	88fa      	ldrh	r2, [r7, #6]
 80034e4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034ee:	d108      	bne.n	8003502 <HAL_UART_Receive+0x74>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d104      	bne.n	8003502 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	61bb      	str	r3, [r7, #24]
 8003500:	e003      	b.n	800350a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003506:	2300      	movs	r3, #0
 8003508:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800350a:	e047      	b.n	800359c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2200      	movs	r2, #0
 8003514:	2120      	movs	r1, #32
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f850 	bl	80035bc <UART_WaitOnFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d005      	beq.n	800352e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2220      	movs	r2, #32
 8003526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e042      	b.n	80035b4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10c      	bne.n	800354e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	b29b      	uxth	r3, r3
 800353c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003540:	b29a      	uxth	r2, r3
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	3302      	adds	r3, #2
 800354a:	61bb      	str	r3, [r7, #24]
 800354c:	e01f      	b.n	800358e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003556:	d007      	beq.n	8003568 <HAL_UART_Receive+0xda>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10a      	bne.n	8003576 <HAL_UART_Receive+0xe8>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d106      	bne.n	8003576 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	b2da      	uxtb	r2, r3
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	701a      	strb	r2, [r3, #0]
 8003574:	e008      	b.n	8003588 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003582:	b2da      	uxtb	r2, r3
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	3301      	adds	r3, #1
 800358c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003592:	b29b      	uxth	r3, r3
 8003594:	3b01      	subs	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1b2      	bne.n	800350c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2220      	movs	r2, #32
 80035aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	e000      	b.n	80035b4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80035b2:	2302      	movs	r3, #2
  }
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3720      	adds	r7, #32
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	4613      	mov	r3, r2
 80035ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035cc:	e03b      	b.n	8003646 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d4:	d037      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d6:	f7fe f9a7 	bl	8001928 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	6a3a      	ldr	r2, [r7, #32]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d302      	bcc.n	80035ec <UART_WaitOnFlagUntilTimeout+0x30>
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e03a      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d023      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0x8a>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b80      	cmp	r3, #128	@ 0x80
 8003602:	d020      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b40      	cmp	r3, #64	@ 0x40
 8003608:	d01d      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b08      	cmp	r3, #8
 8003616:	d116      	bne.n	8003646 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f81d 	bl	800366e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2208      	movs	r2, #8
 8003638:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e00f      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4013      	ands	r3, r2
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	429a      	cmp	r2, r3
 8003654:	bf0c      	ite	eq
 8003656:	2301      	moveq	r3, #1
 8003658:	2300      	movne	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	79fb      	ldrb	r3, [r7, #7]
 8003660:	429a      	cmp	r2, r3
 8003662:	d0b4      	beq.n	80035ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800366e:	b480      	push	{r7}
 8003670:	b095      	sub	sp, #84	@ 0x54
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	330c      	adds	r3, #12
 800367c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003680:	e853 3f00 	ldrex	r3, [r3]
 8003684:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003688:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800368c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	330c      	adds	r3, #12
 8003694:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003696:	643a      	str	r2, [r7, #64]	@ 0x40
 8003698:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800369c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800369e:	e841 2300 	strex	r3, r2, [r1]
 80036a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1e5      	bne.n	8003676 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3314      	adds	r3, #20
 80036b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	f023 0301 	bic.w	r3, r3, #1
 80036c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3314      	adds	r3, #20
 80036c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036d2:	e841 2300 	strex	r3, r2, [r1]
 80036d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1e5      	bne.n	80036aa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d119      	bne.n	800371a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	330c      	adds	r3, #12
 80036ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	e853 3f00 	ldrex	r3, [r3]
 80036f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f023 0310 	bic.w	r3, r3, #16
 80036fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	330c      	adds	r3, #12
 8003704:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003706:	61ba      	str	r2, [r7, #24]
 8003708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370a:	6979      	ldr	r1, [r7, #20]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	e841 2300 	strex	r3, r2, [r1]
 8003712:	613b      	str	r3, [r7, #16]
   return(result);
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1e5      	bne.n	80036e6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003728:	bf00      	nop
 800372a:	3754      	adds	r7, #84	@ 0x54
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003738:	b0c0      	sub	sp, #256	@ 0x100
 800373a:	af00      	add	r7, sp, #0
 800373c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800374c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003750:	68d9      	ldr	r1, [r3, #12]
 8003752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	ea40 0301 	orr.w	r3, r0, r1
 800375c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800375e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	431a      	orrs	r2, r3
 800376c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	431a      	orrs	r2, r3
 8003774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800378c:	f021 010c 	bic.w	r1, r1, #12
 8003790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800379a:	430b      	orrs	r3, r1
 800379c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800379e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80037aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ae:	6999      	ldr	r1, [r3, #24]
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	ea40 0301 	orr.w	r3, r0, r1
 80037ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	4b8f      	ldr	r3, [pc, #572]	@ (8003a00 <UART_SetConfig+0x2cc>)
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d005      	beq.n	80037d4 <UART_SetConfig+0xa0>
 80037c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	4b8d      	ldr	r3, [pc, #564]	@ (8003a04 <UART_SetConfig+0x2d0>)
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d104      	bne.n	80037de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037d4:	f7ff f82c 	bl	8002830 <HAL_RCC_GetPCLK2Freq>
 80037d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80037dc:	e003      	b.n	80037e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037de:	f7ff f813 	bl	8002808 <HAL_RCC_GetPCLK1Freq>
 80037e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037f0:	f040 810c 	bne.w	8003a0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037f8:	2200      	movs	r2, #0
 80037fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80037fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003802:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003806:	4622      	mov	r2, r4
 8003808:	462b      	mov	r3, r5
 800380a:	1891      	adds	r1, r2, r2
 800380c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800380e:	415b      	adcs	r3, r3
 8003810:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003812:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003816:	4621      	mov	r1, r4
 8003818:	eb12 0801 	adds.w	r8, r2, r1
 800381c:	4629      	mov	r1, r5
 800381e:	eb43 0901 	adc.w	r9, r3, r1
 8003822:	f04f 0200 	mov.w	r2, #0
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800382e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003832:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003836:	4690      	mov	r8, r2
 8003838:	4699      	mov	r9, r3
 800383a:	4623      	mov	r3, r4
 800383c:	eb18 0303 	adds.w	r3, r8, r3
 8003840:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003844:	462b      	mov	r3, r5
 8003846:	eb49 0303 	adc.w	r3, r9, r3
 800384a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800384e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800385a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800385e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003862:	460b      	mov	r3, r1
 8003864:	18db      	adds	r3, r3, r3
 8003866:	653b      	str	r3, [r7, #80]	@ 0x50
 8003868:	4613      	mov	r3, r2
 800386a:	eb42 0303 	adc.w	r3, r2, r3
 800386e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003870:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003874:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003878:	f7fc fd1a 	bl	80002b0 <__aeabi_uldivmod>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	4b61      	ldr	r3, [pc, #388]	@ (8003a08 <UART_SetConfig+0x2d4>)
 8003882:	fba3 2302 	umull	r2, r3, r3, r2
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	011c      	lsls	r4, r3, #4
 800388a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800388e:	2200      	movs	r2, #0
 8003890:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003894:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003898:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800389c:	4642      	mov	r2, r8
 800389e:	464b      	mov	r3, r9
 80038a0:	1891      	adds	r1, r2, r2
 80038a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80038a4:	415b      	adcs	r3, r3
 80038a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80038ac:	4641      	mov	r1, r8
 80038ae:	eb12 0a01 	adds.w	sl, r2, r1
 80038b2:	4649      	mov	r1, r9
 80038b4:	eb43 0b01 	adc.w	fp, r3, r1
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038cc:	4692      	mov	sl, r2
 80038ce:	469b      	mov	fp, r3
 80038d0:	4643      	mov	r3, r8
 80038d2:	eb1a 0303 	adds.w	r3, sl, r3
 80038d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038da:	464b      	mov	r3, r9
 80038dc:	eb4b 0303 	adc.w	r3, fp, r3
 80038e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80038f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80038f8:	460b      	mov	r3, r1
 80038fa:	18db      	adds	r3, r3, r3
 80038fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80038fe:	4613      	mov	r3, r2
 8003900:	eb42 0303 	adc.w	r3, r2, r3
 8003904:	647b      	str	r3, [r7, #68]	@ 0x44
 8003906:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800390a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800390e:	f7fc fccf 	bl	80002b0 <__aeabi_uldivmod>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4611      	mov	r1, r2
 8003918:	4b3b      	ldr	r3, [pc, #236]	@ (8003a08 <UART_SetConfig+0x2d4>)
 800391a:	fba3 2301 	umull	r2, r3, r3, r1
 800391e:	095b      	lsrs	r3, r3, #5
 8003920:	2264      	movs	r2, #100	@ 0x64
 8003922:	fb02 f303 	mul.w	r3, r2, r3
 8003926:	1acb      	subs	r3, r1, r3
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800392e:	4b36      	ldr	r3, [pc, #216]	@ (8003a08 <UART_SetConfig+0x2d4>)
 8003930:	fba3 2302 	umull	r2, r3, r3, r2
 8003934:	095b      	lsrs	r3, r3, #5
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800393c:	441c      	add	r4, r3
 800393e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003942:	2200      	movs	r2, #0
 8003944:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003948:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800394c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003950:	4642      	mov	r2, r8
 8003952:	464b      	mov	r3, r9
 8003954:	1891      	adds	r1, r2, r2
 8003956:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003958:	415b      	adcs	r3, r3
 800395a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800395c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003960:	4641      	mov	r1, r8
 8003962:	1851      	adds	r1, r2, r1
 8003964:	6339      	str	r1, [r7, #48]	@ 0x30
 8003966:	4649      	mov	r1, r9
 8003968:	414b      	adcs	r3, r1
 800396a:	637b      	str	r3, [r7, #52]	@ 0x34
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003978:	4659      	mov	r1, fp
 800397a:	00cb      	lsls	r3, r1, #3
 800397c:	4651      	mov	r1, sl
 800397e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003982:	4651      	mov	r1, sl
 8003984:	00ca      	lsls	r2, r1, #3
 8003986:	4610      	mov	r0, r2
 8003988:	4619      	mov	r1, r3
 800398a:	4603      	mov	r3, r0
 800398c:	4642      	mov	r2, r8
 800398e:	189b      	adds	r3, r3, r2
 8003990:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003994:	464b      	mov	r3, r9
 8003996:	460a      	mov	r2, r1
 8003998:	eb42 0303 	adc.w	r3, r2, r3
 800399c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80039b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039b4:	460b      	mov	r3, r1
 80039b6:	18db      	adds	r3, r3, r3
 80039b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039ba:	4613      	mov	r3, r2
 80039bc:	eb42 0303 	adc.w	r3, r2, r3
 80039c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80039ca:	f7fc fc71 	bl	80002b0 <__aeabi_uldivmod>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003a08 <UART_SetConfig+0x2d4>)
 80039d4:	fba3 1302 	umull	r1, r3, r3, r2
 80039d8:	095b      	lsrs	r3, r3, #5
 80039da:	2164      	movs	r1, #100	@ 0x64
 80039dc:	fb01 f303 	mul.w	r3, r1, r3
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	3332      	adds	r3, #50	@ 0x32
 80039e6:	4a08      	ldr	r2, [pc, #32]	@ (8003a08 <UART_SetConfig+0x2d4>)
 80039e8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ec:	095b      	lsrs	r3, r3, #5
 80039ee:	f003 0207 	and.w	r2, r3, #7
 80039f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4422      	add	r2, r4
 80039fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039fc:	e106      	b.n	8003c0c <UART_SetConfig+0x4d8>
 80039fe:	bf00      	nop
 8003a00:	40011000 	.word	0x40011000
 8003a04:	40011400 	.word	0x40011400
 8003a08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a10:	2200      	movs	r2, #0
 8003a12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a16:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a1e:	4642      	mov	r2, r8
 8003a20:	464b      	mov	r3, r9
 8003a22:	1891      	adds	r1, r2, r2
 8003a24:	6239      	str	r1, [r7, #32]
 8003a26:	415b      	adcs	r3, r3
 8003a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a2e:	4641      	mov	r1, r8
 8003a30:	1854      	adds	r4, r2, r1
 8003a32:	4649      	mov	r1, r9
 8003a34:	eb43 0501 	adc.w	r5, r3, r1
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	00eb      	lsls	r3, r5, #3
 8003a42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a46:	00e2      	lsls	r2, r4, #3
 8003a48:	4614      	mov	r4, r2
 8003a4a:	461d      	mov	r5, r3
 8003a4c:	4643      	mov	r3, r8
 8003a4e:	18e3      	adds	r3, r4, r3
 8003a50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a54:	464b      	mov	r3, r9
 8003a56:	eb45 0303 	adc.w	r3, r5, r3
 8003a5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a7a:	4629      	mov	r1, r5
 8003a7c:	008b      	lsls	r3, r1, #2
 8003a7e:	4621      	mov	r1, r4
 8003a80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a84:	4621      	mov	r1, r4
 8003a86:	008a      	lsls	r2, r1, #2
 8003a88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a8c:	f7fc fc10 	bl	80002b0 <__aeabi_uldivmod>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4b60      	ldr	r3, [pc, #384]	@ (8003c18 <UART_SetConfig+0x4e4>)
 8003a96:	fba3 2302 	umull	r2, r3, r3, r2
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	011c      	lsls	r4, r3, #4
 8003a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003aa8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003aac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ab0:	4642      	mov	r2, r8
 8003ab2:	464b      	mov	r3, r9
 8003ab4:	1891      	adds	r1, r2, r2
 8003ab6:	61b9      	str	r1, [r7, #24]
 8003ab8:	415b      	adcs	r3, r3
 8003aba:	61fb      	str	r3, [r7, #28]
 8003abc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ac0:	4641      	mov	r1, r8
 8003ac2:	1851      	adds	r1, r2, r1
 8003ac4:	6139      	str	r1, [r7, #16]
 8003ac6:	4649      	mov	r1, r9
 8003ac8:	414b      	adcs	r3, r1
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ad8:	4659      	mov	r1, fp
 8003ada:	00cb      	lsls	r3, r1, #3
 8003adc:	4651      	mov	r1, sl
 8003ade:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ae2:	4651      	mov	r1, sl
 8003ae4:	00ca      	lsls	r2, r1, #3
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4603      	mov	r3, r0
 8003aec:	4642      	mov	r2, r8
 8003aee:	189b      	adds	r3, r3, r2
 8003af0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003af4:	464b      	mov	r3, r9
 8003af6:	460a      	mov	r2, r1
 8003af8:	eb42 0303 	adc.w	r3, r2, r3
 8003afc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b18:	4649      	mov	r1, r9
 8003b1a:	008b      	lsls	r3, r1, #2
 8003b1c:	4641      	mov	r1, r8
 8003b1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b22:	4641      	mov	r1, r8
 8003b24:	008a      	lsls	r2, r1, #2
 8003b26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b2a:	f7fc fbc1 	bl	80002b0 <__aeabi_uldivmod>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	4611      	mov	r1, r2
 8003b34:	4b38      	ldr	r3, [pc, #224]	@ (8003c18 <UART_SetConfig+0x4e4>)
 8003b36:	fba3 2301 	umull	r2, r3, r3, r1
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	2264      	movs	r2, #100	@ 0x64
 8003b3e:	fb02 f303 	mul.w	r3, r2, r3
 8003b42:	1acb      	subs	r3, r1, r3
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	3332      	adds	r3, #50	@ 0x32
 8003b48:	4a33      	ldr	r2, [pc, #204]	@ (8003c18 <UART_SetConfig+0x4e4>)
 8003b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b54:	441c      	add	r4, r3
 8003b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b5e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b64:	4642      	mov	r2, r8
 8003b66:	464b      	mov	r3, r9
 8003b68:	1891      	adds	r1, r2, r2
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	415b      	adcs	r3, r3
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b74:	4641      	mov	r1, r8
 8003b76:	1851      	adds	r1, r2, r1
 8003b78:	6039      	str	r1, [r7, #0]
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	414b      	adcs	r3, r1
 8003b7e:	607b      	str	r3, [r7, #4]
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b8c:	4659      	mov	r1, fp
 8003b8e:	00cb      	lsls	r3, r1, #3
 8003b90:	4651      	mov	r1, sl
 8003b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b96:	4651      	mov	r1, sl
 8003b98:	00ca      	lsls	r2, r1, #3
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	4642      	mov	r2, r8
 8003ba2:	189b      	adds	r3, r3, r2
 8003ba4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ba6:	464b      	mov	r3, r9
 8003ba8:	460a      	mov	r2, r1
 8003baa:	eb42 0303 	adc.w	r3, r2, r3
 8003bae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bba:	667a      	str	r2, [r7, #100]	@ 0x64
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003bc8:	4649      	mov	r1, r9
 8003bca:	008b      	lsls	r3, r1, #2
 8003bcc:	4641      	mov	r1, r8
 8003bce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bd2:	4641      	mov	r1, r8
 8003bd4:	008a      	lsls	r2, r1, #2
 8003bd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003bda:	f7fc fb69 	bl	80002b0 <__aeabi_uldivmod>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4b0d      	ldr	r3, [pc, #52]	@ (8003c18 <UART_SetConfig+0x4e4>)
 8003be4:	fba3 1302 	umull	r1, r3, r3, r2
 8003be8:	095b      	lsrs	r3, r3, #5
 8003bea:	2164      	movs	r1, #100	@ 0x64
 8003bec:	fb01 f303 	mul.w	r3, r1, r3
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	3332      	adds	r3, #50	@ 0x32
 8003bf6:	4a08      	ldr	r2, [pc, #32]	@ (8003c18 <UART_SetConfig+0x4e4>)
 8003bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfc:	095b      	lsrs	r3, r3, #5
 8003bfe:	f003 020f 	and.w	r2, r3, #15
 8003c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4422      	add	r2, r4
 8003c0a:	609a      	str	r2, [r3, #8]
}
 8003c0c:	bf00      	nop
 8003c0e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c12:	46bd      	mov	sp, r7
 8003c14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c18:	51eb851f 	.word	0x51eb851f

08003c1c <std>:
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	b510      	push	{r4, lr}
 8003c20:	4604      	mov	r4, r0
 8003c22:	e9c0 3300 	strd	r3, r3, [r0]
 8003c26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c2a:	6083      	str	r3, [r0, #8]
 8003c2c:	8181      	strh	r1, [r0, #12]
 8003c2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c30:	81c2      	strh	r2, [r0, #14]
 8003c32:	6183      	str	r3, [r0, #24]
 8003c34:	4619      	mov	r1, r3
 8003c36:	2208      	movs	r2, #8
 8003c38:	305c      	adds	r0, #92	@ 0x5c
 8003c3a:	f000 f9f9 	bl	8004030 <memset>
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c74 <std+0x58>)
 8003c40:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c42:	4b0d      	ldr	r3, [pc, #52]	@ (8003c78 <std+0x5c>)
 8003c44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c46:	4b0d      	ldr	r3, [pc, #52]	@ (8003c7c <std+0x60>)
 8003c48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c80 <std+0x64>)
 8003c4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c84 <std+0x68>)
 8003c50:	6224      	str	r4, [r4, #32]
 8003c52:	429c      	cmp	r4, r3
 8003c54:	d006      	beq.n	8003c64 <std+0x48>
 8003c56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003c5a:	4294      	cmp	r4, r2
 8003c5c:	d002      	beq.n	8003c64 <std+0x48>
 8003c5e:	33d0      	adds	r3, #208	@ 0xd0
 8003c60:	429c      	cmp	r4, r3
 8003c62:	d105      	bne.n	8003c70 <std+0x54>
 8003c64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c6c:	f000 ba58 	b.w	8004120 <__retarget_lock_init_recursive>
 8003c70:	bd10      	pop	{r4, pc}
 8003c72:	bf00      	nop
 8003c74:	08003e81 	.word	0x08003e81
 8003c78:	08003ea3 	.word	0x08003ea3
 8003c7c:	08003edb 	.word	0x08003edb
 8003c80:	08003eff 	.word	0x08003eff
 8003c84:	20000214 	.word	0x20000214

08003c88 <stdio_exit_handler>:
 8003c88:	4a02      	ldr	r2, [pc, #8]	@ (8003c94 <stdio_exit_handler+0xc>)
 8003c8a:	4903      	ldr	r1, [pc, #12]	@ (8003c98 <stdio_exit_handler+0x10>)
 8003c8c:	4803      	ldr	r0, [pc, #12]	@ (8003c9c <stdio_exit_handler+0x14>)
 8003c8e:	f000 b869 	b.w	8003d64 <_fwalk_sglue>
 8003c92:	bf00      	nop
 8003c94:	20000014 	.word	0x20000014
 8003c98:	080049c1 	.word	0x080049c1
 8003c9c:	20000024 	.word	0x20000024

08003ca0 <cleanup_stdio>:
 8003ca0:	6841      	ldr	r1, [r0, #4]
 8003ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd4 <cleanup_stdio+0x34>)
 8003ca4:	4299      	cmp	r1, r3
 8003ca6:	b510      	push	{r4, lr}
 8003ca8:	4604      	mov	r4, r0
 8003caa:	d001      	beq.n	8003cb0 <cleanup_stdio+0x10>
 8003cac:	f000 fe88 	bl	80049c0 <_fflush_r>
 8003cb0:	68a1      	ldr	r1, [r4, #8]
 8003cb2:	4b09      	ldr	r3, [pc, #36]	@ (8003cd8 <cleanup_stdio+0x38>)
 8003cb4:	4299      	cmp	r1, r3
 8003cb6:	d002      	beq.n	8003cbe <cleanup_stdio+0x1e>
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f000 fe81 	bl	80049c0 <_fflush_r>
 8003cbe:	68e1      	ldr	r1, [r4, #12]
 8003cc0:	4b06      	ldr	r3, [pc, #24]	@ (8003cdc <cleanup_stdio+0x3c>)
 8003cc2:	4299      	cmp	r1, r3
 8003cc4:	d004      	beq.n	8003cd0 <cleanup_stdio+0x30>
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ccc:	f000 be78 	b.w	80049c0 <_fflush_r>
 8003cd0:	bd10      	pop	{r4, pc}
 8003cd2:	bf00      	nop
 8003cd4:	20000214 	.word	0x20000214
 8003cd8:	2000027c 	.word	0x2000027c
 8003cdc:	200002e4 	.word	0x200002e4

08003ce0 <global_stdio_init.part.0>:
 8003ce0:	b510      	push	{r4, lr}
 8003ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8003d10 <global_stdio_init.part.0+0x30>)
 8003ce4:	4c0b      	ldr	r4, [pc, #44]	@ (8003d14 <global_stdio_init.part.0+0x34>)
 8003ce6:	4a0c      	ldr	r2, [pc, #48]	@ (8003d18 <global_stdio_init.part.0+0x38>)
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	4620      	mov	r0, r4
 8003cec:	2200      	movs	r2, #0
 8003cee:	2104      	movs	r1, #4
 8003cf0:	f7ff ff94 	bl	8003c1c <std>
 8003cf4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	2109      	movs	r1, #9
 8003cfc:	f7ff ff8e 	bl	8003c1c <std>
 8003d00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003d04:	2202      	movs	r2, #2
 8003d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d0a:	2112      	movs	r1, #18
 8003d0c:	f7ff bf86 	b.w	8003c1c <std>
 8003d10:	2000034c 	.word	0x2000034c
 8003d14:	20000214 	.word	0x20000214
 8003d18:	08003c89 	.word	0x08003c89

08003d1c <__sfp_lock_acquire>:
 8003d1c:	4801      	ldr	r0, [pc, #4]	@ (8003d24 <__sfp_lock_acquire+0x8>)
 8003d1e:	f000 ba00 	b.w	8004122 <__retarget_lock_acquire_recursive>
 8003d22:	bf00      	nop
 8003d24:	20000355 	.word	0x20000355

08003d28 <__sfp_lock_release>:
 8003d28:	4801      	ldr	r0, [pc, #4]	@ (8003d30 <__sfp_lock_release+0x8>)
 8003d2a:	f000 b9fb 	b.w	8004124 <__retarget_lock_release_recursive>
 8003d2e:	bf00      	nop
 8003d30:	20000355 	.word	0x20000355

08003d34 <__sinit>:
 8003d34:	b510      	push	{r4, lr}
 8003d36:	4604      	mov	r4, r0
 8003d38:	f7ff fff0 	bl	8003d1c <__sfp_lock_acquire>
 8003d3c:	6a23      	ldr	r3, [r4, #32]
 8003d3e:	b11b      	cbz	r3, 8003d48 <__sinit+0x14>
 8003d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d44:	f7ff bff0 	b.w	8003d28 <__sfp_lock_release>
 8003d48:	4b04      	ldr	r3, [pc, #16]	@ (8003d5c <__sinit+0x28>)
 8003d4a:	6223      	str	r3, [r4, #32]
 8003d4c:	4b04      	ldr	r3, [pc, #16]	@ (8003d60 <__sinit+0x2c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f5      	bne.n	8003d40 <__sinit+0xc>
 8003d54:	f7ff ffc4 	bl	8003ce0 <global_stdio_init.part.0>
 8003d58:	e7f2      	b.n	8003d40 <__sinit+0xc>
 8003d5a:	bf00      	nop
 8003d5c:	08003ca1 	.word	0x08003ca1
 8003d60:	2000034c 	.word	0x2000034c

08003d64 <_fwalk_sglue>:
 8003d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d68:	4607      	mov	r7, r0
 8003d6a:	4688      	mov	r8, r1
 8003d6c:	4614      	mov	r4, r2
 8003d6e:	2600      	movs	r6, #0
 8003d70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d74:	f1b9 0901 	subs.w	r9, r9, #1
 8003d78:	d505      	bpl.n	8003d86 <_fwalk_sglue+0x22>
 8003d7a:	6824      	ldr	r4, [r4, #0]
 8003d7c:	2c00      	cmp	r4, #0
 8003d7e:	d1f7      	bne.n	8003d70 <_fwalk_sglue+0xc>
 8003d80:	4630      	mov	r0, r6
 8003d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d86:	89ab      	ldrh	r3, [r5, #12]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d907      	bls.n	8003d9c <_fwalk_sglue+0x38>
 8003d8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d90:	3301      	adds	r3, #1
 8003d92:	d003      	beq.n	8003d9c <_fwalk_sglue+0x38>
 8003d94:	4629      	mov	r1, r5
 8003d96:	4638      	mov	r0, r7
 8003d98:	47c0      	blx	r8
 8003d9a:	4306      	orrs	r6, r0
 8003d9c:	3568      	adds	r5, #104	@ 0x68
 8003d9e:	e7e9      	b.n	8003d74 <_fwalk_sglue+0x10>

08003da0 <iprintf>:
 8003da0:	b40f      	push	{r0, r1, r2, r3}
 8003da2:	b507      	push	{r0, r1, r2, lr}
 8003da4:	4906      	ldr	r1, [pc, #24]	@ (8003dc0 <iprintf+0x20>)
 8003da6:	ab04      	add	r3, sp, #16
 8003da8:	6808      	ldr	r0, [r1, #0]
 8003daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dae:	6881      	ldr	r1, [r0, #8]
 8003db0:	9301      	str	r3, [sp, #4]
 8003db2:	f000 fadb 	bl	800436c <_vfiprintf_r>
 8003db6:	b003      	add	sp, #12
 8003db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dbc:	b004      	add	sp, #16
 8003dbe:	4770      	bx	lr
 8003dc0:	20000020 	.word	0x20000020

08003dc4 <_puts_r>:
 8003dc4:	6a03      	ldr	r3, [r0, #32]
 8003dc6:	b570      	push	{r4, r5, r6, lr}
 8003dc8:	6884      	ldr	r4, [r0, #8]
 8003dca:	4605      	mov	r5, r0
 8003dcc:	460e      	mov	r6, r1
 8003dce:	b90b      	cbnz	r3, 8003dd4 <_puts_r+0x10>
 8003dd0:	f7ff ffb0 	bl	8003d34 <__sinit>
 8003dd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003dd6:	07db      	lsls	r3, r3, #31
 8003dd8:	d405      	bmi.n	8003de6 <_puts_r+0x22>
 8003dda:	89a3      	ldrh	r3, [r4, #12]
 8003ddc:	0598      	lsls	r0, r3, #22
 8003dde:	d402      	bmi.n	8003de6 <_puts_r+0x22>
 8003de0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003de2:	f000 f99e 	bl	8004122 <__retarget_lock_acquire_recursive>
 8003de6:	89a3      	ldrh	r3, [r4, #12]
 8003de8:	0719      	lsls	r1, r3, #28
 8003dea:	d502      	bpl.n	8003df2 <_puts_r+0x2e>
 8003dec:	6923      	ldr	r3, [r4, #16]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d135      	bne.n	8003e5e <_puts_r+0x9a>
 8003df2:	4621      	mov	r1, r4
 8003df4:	4628      	mov	r0, r5
 8003df6:	f000 f8c5 	bl	8003f84 <__swsetup_r>
 8003dfa:	b380      	cbz	r0, 8003e5e <_puts_r+0x9a>
 8003dfc:	f04f 35ff 	mov.w	r5, #4294967295
 8003e00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e02:	07da      	lsls	r2, r3, #31
 8003e04:	d405      	bmi.n	8003e12 <_puts_r+0x4e>
 8003e06:	89a3      	ldrh	r3, [r4, #12]
 8003e08:	059b      	lsls	r3, r3, #22
 8003e0a:	d402      	bmi.n	8003e12 <_puts_r+0x4e>
 8003e0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e0e:	f000 f989 	bl	8004124 <__retarget_lock_release_recursive>
 8003e12:	4628      	mov	r0, r5
 8003e14:	bd70      	pop	{r4, r5, r6, pc}
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	da04      	bge.n	8003e24 <_puts_r+0x60>
 8003e1a:	69a2      	ldr	r2, [r4, #24]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	dc17      	bgt.n	8003e50 <_puts_r+0x8c>
 8003e20:	290a      	cmp	r1, #10
 8003e22:	d015      	beq.n	8003e50 <_puts_r+0x8c>
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	6022      	str	r2, [r4, #0]
 8003e2a:	7019      	strb	r1, [r3, #0]
 8003e2c:	68a3      	ldr	r3, [r4, #8]
 8003e2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e32:	3b01      	subs	r3, #1
 8003e34:	60a3      	str	r3, [r4, #8]
 8003e36:	2900      	cmp	r1, #0
 8003e38:	d1ed      	bne.n	8003e16 <_puts_r+0x52>
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	da11      	bge.n	8003e62 <_puts_r+0x9e>
 8003e3e:	4622      	mov	r2, r4
 8003e40:	210a      	movs	r1, #10
 8003e42:	4628      	mov	r0, r5
 8003e44:	f000 f85f 	bl	8003f06 <__swbuf_r>
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d0d7      	beq.n	8003dfc <_puts_r+0x38>
 8003e4c:	250a      	movs	r5, #10
 8003e4e:	e7d7      	b.n	8003e00 <_puts_r+0x3c>
 8003e50:	4622      	mov	r2, r4
 8003e52:	4628      	mov	r0, r5
 8003e54:	f000 f857 	bl	8003f06 <__swbuf_r>
 8003e58:	3001      	adds	r0, #1
 8003e5a:	d1e7      	bne.n	8003e2c <_puts_r+0x68>
 8003e5c:	e7ce      	b.n	8003dfc <_puts_r+0x38>
 8003e5e:	3e01      	subs	r6, #1
 8003e60:	e7e4      	b.n	8003e2c <_puts_r+0x68>
 8003e62:	6823      	ldr	r3, [r4, #0]
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	6022      	str	r2, [r4, #0]
 8003e68:	220a      	movs	r2, #10
 8003e6a:	701a      	strb	r2, [r3, #0]
 8003e6c:	e7ee      	b.n	8003e4c <_puts_r+0x88>
	...

08003e70 <puts>:
 8003e70:	4b02      	ldr	r3, [pc, #8]	@ (8003e7c <puts+0xc>)
 8003e72:	4601      	mov	r1, r0
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	f7ff bfa5 	b.w	8003dc4 <_puts_r>
 8003e7a:	bf00      	nop
 8003e7c:	20000020 	.word	0x20000020

08003e80 <__sread>:
 8003e80:	b510      	push	{r4, lr}
 8003e82:	460c      	mov	r4, r1
 8003e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e88:	f000 f8fc 	bl	8004084 <_read_r>
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	bfab      	itete	ge
 8003e90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003e92:	89a3      	ldrhlt	r3, [r4, #12]
 8003e94:	181b      	addge	r3, r3, r0
 8003e96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003e9a:	bfac      	ite	ge
 8003e9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003e9e:	81a3      	strhlt	r3, [r4, #12]
 8003ea0:	bd10      	pop	{r4, pc}

08003ea2 <__swrite>:
 8003ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea6:	461f      	mov	r7, r3
 8003ea8:	898b      	ldrh	r3, [r1, #12]
 8003eaa:	05db      	lsls	r3, r3, #23
 8003eac:	4605      	mov	r5, r0
 8003eae:	460c      	mov	r4, r1
 8003eb0:	4616      	mov	r6, r2
 8003eb2:	d505      	bpl.n	8003ec0 <__swrite+0x1e>
 8003eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eb8:	2302      	movs	r3, #2
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f000 f8d0 	bl	8004060 <_lseek_r>
 8003ec0:	89a3      	ldrh	r3, [r4, #12]
 8003ec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ec6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003eca:	81a3      	strh	r3, [r4, #12]
 8003ecc:	4632      	mov	r2, r6
 8003ece:	463b      	mov	r3, r7
 8003ed0:	4628      	mov	r0, r5
 8003ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ed6:	f000 b8e7 	b.w	80040a8 <_write_r>

08003eda <__sseek>:
 8003eda:	b510      	push	{r4, lr}
 8003edc:	460c      	mov	r4, r1
 8003ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee2:	f000 f8bd 	bl	8004060 <_lseek_r>
 8003ee6:	1c43      	adds	r3, r0, #1
 8003ee8:	89a3      	ldrh	r3, [r4, #12]
 8003eea:	bf15      	itete	ne
 8003eec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003eee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003ef2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003ef6:	81a3      	strheq	r3, [r4, #12]
 8003ef8:	bf18      	it	ne
 8003efa:	81a3      	strhne	r3, [r4, #12]
 8003efc:	bd10      	pop	{r4, pc}

08003efe <__sclose>:
 8003efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f02:	f000 b89d 	b.w	8004040 <_close_r>

08003f06 <__swbuf_r>:
 8003f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f08:	460e      	mov	r6, r1
 8003f0a:	4614      	mov	r4, r2
 8003f0c:	4605      	mov	r5, r0
 8003f0e:	b118      	cbz	r0, 8003f18 <__swbuf_r+0x12>
 8003f10:	6a03      	ldr	r3, [r0, #32]
 8003f12:	b90b      	cbnz	r3, 8003f18 <__swbuf_r+0x12>
 8003f14:	f7ff ff0e 	bl	8003d34 <__sinit>
 8003f18:	69a3      	ldr	r3, [r4, #24]
 8003f1a:	60a3      	str	r3, [r4, #8]
 8003f1c:	89a3      	ldrh	r3, [r4, #12]
 8003f1e:	071a      	lsls	r2, r3, #28
 8003f20:	d501      	bpl.n	8003f26 <__swbuf_r+0x20>
 8003f22:	6923      	ldr	r3, [r4, #16]
 8003f24:	b943      	cbnz	r3, 8003f38 <__swbuf_r+0x32>
 8003f26:	4621      	mov	r1, r4
 8003f28:	4628      	mov	r0, r5
 8003f2a:	f000 f82b 	bl	8003f84 <__swsetup_r>
 8003f2e:	b118      	cbz	r0, 8003f38 <__swbuf_r+0x32>
 8003f30:	f04f 37ff 	mov.w	r7, #4294967295
 8003f34:	4638      	mov	r0, r7
 8003f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	6922      	ldr	r2, [r4, #16]
 8003f3c:	1a98      	subs	r0, r3, r2
 8003f3e:	6963      	ldr	r3, [r4, #20]
 8003f40:	b2f6      	uxtb	r6, r6
 8003f42:	4283      	cmp	r3, r0
 8003f44:	4637      	mov	r7, r6
 8003f46:	dc05      	bgt.n	8003f54 <__swbuf_r+0x4e>
 8003f48:	4621      	mov	r1, r4
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	f000 fd38 	bl	80049c0 <_fflush_r>
 8003f50:	2800      	cmp	r0, #0
 8003f52:	d1ed      	bne.n	8003f30 <__swbuf_r+0x2a>
 8003f54:	68a3      	ldr	r3, [r4, #8]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	60a3      	str	r3, [r4, #8]
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	6022      	str	r2, [r4, #0]
 8003f60:	701e      	strb	r6, [r3, #0]
 8003f62:	6962      	ldr	r2, [r4, #20]
 8003f64:	1c43      	adds	r3, r0, #1
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d004      	beq.n	8003f74 <__swbuf_r+0x6e>
 8003f6a:	89a3      	ldrh	r3, [r4, #12]
 8003f6c:	07db      	lsls	r3, r3, #31
 8003f6e:	d5e1      	bpl.n	8003f34 <__swbuf_r+0x2e>
 8003f70:	2e0a      	cmp	r6, #10
 8003f72:	d1df      	bne.n	8003f34 <__swbuf_r+0x2e>
 8003f74:	4621      	mov	r1, r4
 8003f76:	4628      	mov	r0, r5
 8003f78:	f000 fd22 	bl	80049c0 <_fflush_r>
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	d0d9      	beq.n	8003f34 <__swbuf_r+0x2e>
 8003f80:	e7d6      	b.n	8003f30 <__swbuf_r+0x2a>
	...

08003f84 <__swsetup_r>:
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	4b29      	ldr	r3, [pc, #164]	@ (800402c <__swsetup_r+0xa8>)
 8003f88:	4605      	mov	r5, r0
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	460c      	mov	r4, r1
 8003f8e:	b118      	cbz	r0, 8003f98 <__swsetup_r+0x14>
 8003f90:	6a03      	ldr	r3, [r0, #32]
 8003f92:	b90b      	cbnz	r3, 8003f98 <__swsetup_r+0x14>
 8003f94:	f7ff fece 	bl	8003d34 <__sinit>
 8003f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f9c:	0719      	lsls	r1, r3, #28
 8003f9e:	d422      	bmi.n	8003fe6 <__swsetup_r+0x62>
 8003fa0:	06da      	lsls	r2, r3, #27
 8003fa2:	d407      	bmi.n	8003fb4 <__swsetup_r+0x30>
 8003fa4:	2209      	movs	r2, #9
 8003fa6:	602a      	str	r2, [r5, #0]
 8003fa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fac:	81a3      	strh	r3, [r4, #12]
 8003fae:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb2:	e033      	b.n	800401c <__swsetup_r+0x98>
 8003fb4:	0758      	lsls	r0, r3, #29
 8003fb6:	d512      	bpl.n	8003fde <__swsetup_r+0x5a>
 8003fb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003fba:	b141      	cbz	r1, 8003fce <__swsetup_r+0x4a>
 8003fbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003fc0:	4299      	cmp	r1, r3
 8003fc2:	d002      	beq.n	8003fca <__swsetup_r+0x46>
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	f000 f8af 	bl	8004128 <_free_r>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	6363      	str	r3, [r4, #52]	@ 0x34
 8003fce:	89a3      	ldrh	r3, [r4, #12]
 8003fd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003fd4:	81a3      	strh	r3, [r4, #12]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	6063      	str	r3, [r4, #4]
 8003fda:	6923      	ldr	r3, [r4, #16]
 8003fdc:	6023      	str	r3, [r4, #0]
 8003fde:	89a3      	ldrh	r3, [r4, #12]
 8003fe0:	f043 0308 	orr.w	r3, r3, #8
 8003fe4:	81a3      	strh	r3, [r4, #12]
 8003fe6:	6923      	ldr	r3, [r4, #16]
 8003fe8:	b94b      	cbnz	r3, 8003ffe <__swsetup_r+0x7a>
 8003fea:	89a3      	ldrh	r3, [r4, #12]
 8003fec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ff4:	d003      	beq.n	8003ffe <__swsetup_r+0x7a>
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	f000 fd2f 	bl	8004a5c <__smakebuf_r>
 8003ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004002:	f013 0201 	ands.w	r2, r3, #1
 8004006:	d00a      	beq.n	800401e <__swsetup_r+0x9a>
 8004008:	2200      	movs	r2, #0
 800400a:	60a2      	str	r2, [r4, #8]
 800400c:	6962      	ldr	r2, [r4, #20]
 800400e:	4252      	negs	r2, r2
 8004010:	61a2      	str	r2, [r4, #24]
 8004012:	6922      	ldr	r2, [r4, #16]
 8004014:	b942      	cbnz	r2, 8004028 <__swsetup_r+0xa4>
 8004016:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800401a:	d1c5      	bne.n	8003fa8 <__swsetup_r+0x24>
 800401c:	bd38      	pop	{r3, r4, r5, pc}
 800401e:	0799      	lsls	r1, r3, #30
 8004020:	bf58      	it	pl
 8004022:	6962      	ldrpl	r2, [r4, #20]
 8004024:	60a2      	str	r2, [r4, #8]
 8004026:	e7f4      	b.n	8004012 <__swsetup_r+0x8e>
 8004028:	2000      	movs	r0, #0
 800402a:	e7f7      	b.n	800401c <__swsetup_r+0x98>
 800402c:	20000020 	.word	0x20000020

08004030 <memset>:
 8004030:	4402      	add	r2, r0
 8004032:	4603      	mov	r3, r0
 8004034:	4293      	cmp	r3, r2
 8004036:	d100      	bne.n	800403a <memset+0xa>
 8004038:	4770      	bx	lr
 800403a:	f803 1b01 	strb.w	r1, [r3], #1
 800403e:	e7f9      	b.n	8004034 <memset+0x4>

08004040 <_close_r>:
 8004040:	b538      	push	{r3, r4, r5, lr}
 8004042:	4d06      	ldr	r5, [pc, #24]	@ (800405c <_close_r+0x1c>)
 8004044:	2300      	movs	r3, #0
 8004046:	4604      	mov	r4, r0
 8004048:	4608      	mov	r0, r1
 800404a:	602b      	str	r3, [r5, #0]
 800404c:	f7fd fb2a 	bl	80016a4 <_close>
 8004050:	1c43      	adds	r3, r0, #1
 8004052:	d102      	bne.n	800405a <_close_r+0x1a>
 8004054:	682b      	ldr	r3, [r5, #0]
 8004056:	b103      	cbz	r3, 800405a <_close_r+0x1a>
 8004058:	6023      	str	r3, [r4, #0]
 800405a:	bd38      	pop	{r3, r4, r5, pc}
 800405c:	20000350 	.word	0x20000350

08004060 <_lseek_r>:
 8004060:	b538      	push	{r3, r4, r5, lr}
 8004062:	4d07      	ldr	r5, [pc, #28]	@ (8004080 <_lseek_r+0x20>)
 8004064:	4604      	mov	r4, r0
 8004066:	4608      	mov	r0, r1
 8004068:	4611      	mov	r1, r2
 800406a:	2200      	movs	r2, #0
 800406c:	602a      	str	r2, [r5, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	f7fd fb3f 	bl	80016f2 <_lseek>
 8004074:	1c43      	adds	r3, r0, #1
 8004076:	d102      	bne.n	800407e <_lseek_r+0x1e>
 8004078:	682b      	ldr	r3, [r5, #0]
 800407a:	b103      	cbz	r3, 800407e <_lseek_r+0x1e>
 800407c:	6023      	str	r3, [r4, #0]
 800407e:	bd38      	pop	{r3, r4, r5, pc}
 8004080:	20000350 	.word	0x20000350

08004084 <_read_r>:
 8004084:	b538      	push	{r3, r4, r5, lr}
 8004086:	4d07      	ldr	r5, [pc, #28]	@ (80040a4 <_read_r+0x20>)
 8004088:	4604      	mov	r4, r0
 800408a:	4608      	mov	r0, r1
 800408c:	4611      	mov	r1, r2
 800408e:	2200      	movs	r2, #0
 8004090:	602a      	str	r2, [r5, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	f7fd facd 	bl	8001632 <_read>
 8004098:	1c43      	adds	r3, r0, #1
 800409a:	d102      	bne.n	80040a2 <_read_r+0x1e>
 800409c:	682b      	ldr	r3, [r5, #0]
 800409e:	b103      	cbz	r3, 80040a2 <_read_r+0x1e>
 80040a0:	6023      	str	r3, [r4, #0]
 80040a2:	bd38      	pop	{r3, r4, r5, pc}
 80040a4:	20000350 	.word	0x20000350

080040a8 <_write_r>:
 80040a8:	b538      	push	{r3, r4, r5, lr}
 80040aa:	4d07      	ldr	r5, [pc, #28]	@ (80040c8 <_write_r+0x20>)
 80040ac:	4604      	mov	r4, r0
 80040ae:	4608      	mov	r0, r1
 80040b0:	4611      	mov	r1, r2
 80040b2:	2200      	movs	r2, #0
 80040b4:	602a      	str	r2, [r5, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	f7fd fad8 	bl	800166c <_write>
 80040bc:	1c43      	adds	r3, r0, #1
 80040be:	d102      	bne.n	80040c6 <_write_r+0x1e>
 80040c0:	682b      	ldr	r3, [r5, #0]
 80040c2:	b103      	cbz	r3, 80040c6 <_write_r+0x1e>
 80040c4:	6023      	str	r3, [r4, #0]
 80040c6:	bd38      	pop	{r3, r4, r5, pc}
 80040c8:	20000350 	.word	0x20000350

080040cc <__errno>:
 80040cc:	4b01      	ldr	r3, [pc, #4]	@ (80040d4 <__errno+0x8>)
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	20000020 	.word	0x20000020

080040d8 <__libc_init_array>:
 80040d8:	b570      	push	{r4, r5, r6, lr}
 80040da:	4d0d      	ldr	r5, [pc, #52]	@ (8004110 <__libc_init_array+0x38>)
 80040dc:	4c0d      	ldr	r4, [pc, #52]	@ (8004114 <__libc_init_array+0x3c>)
 80040de:	1b64      	subs	r4, r4, r5
 80040e0:	10a4      	asrs	r4, r4, #2
 80040e2:	2600      	movs	r6, #0
 80040e4:	42a6      	cmp	r6, r4
 80040e6:	d109      	bne.n	80040fc <__libc_init_array+0x24>
 80040e8:	4d0b      	ldr	r5, [pc, #44]	@ (8004118 <__libc_init_array+0x40>)
 80040ea:	4c0c      	ldr	r4, [pc, #48]	@ (800411c <__libc_init_array+0x44>)
 80040ec:	f000 fd24 	bl	8004b38 <_init>
 80040f0:	1b64      	subs	r4, r4, r5
 80040f2:	10a4      	asrs	r4, r4, #2
 80040f4:	2600      	movs	r6, #0
 80040f6:	42a6      	cmp	r6, r4
 80040f8:	d105      	bne.n	8004106 <__libc_init_array+0x2e>
 80040fa:	bd70      	pop	{r4, r5, r6, pc}
 80040fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004100:	4798      	blx	r3
 8004102:	3601      	adds	r6, #1
 8004104:	e7ee      	b.n	80040e4 <__libc_init_array+0xc>
 8004106:	f855 3b04 	ldr.w	r3, [r5], #4
 800410a:	4798      	blx	r3
 800410c:	3601      	adds	r6, #1
 800410e:	e7f2      	b.n	80040f6 <__libc_init_array+0x1e>
 8004110:	0800504c 	.word	0x0800504c
 8004114:	0800504c 	.word	0x0800504c
 8004118:	0800504c 	.word	0x0800504c
 800411c:	08005050 	.word	0x08005050

08004120 <__retarget_lock_init_recursive>:
 8004120:	4770      	bx	lr

08004122 <__retarget_lock_acquire_recursive>:
 8004122:	4770      	bx	lr

08004124 <__retarget_lock_release_recursive>:
 8004124:	4770      	bx	lr
	...

08004128 <_free_r>:
 8004128:	b538      	push	{r3, r4, r5, lr}
 800412a:	4605      	mov	r5, r0
 800412c:	2900      	cmp	r1, #0
 800412e:	d041      	beq.n	80041b4 <_free_r+0x8c>
 8004130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004134:	1f0c      	subs	r4, r1, #4
 8004136:	2b00      	cmp	r3, #0
 8004138:	bfb8      	it	lt
 800413a:	18e4      	addlt	r4, r4, r3
 800413c:	f000 f8e0 	bl	8004300 <__malloc_lock>
 8004140:	4a1d      	ldr	r2, [pc, #116]	@ (80041b8 <_free_r+0x90>)
 8004142:	6813      	ldr	r3, [r2, #0]
 8004144:	b933      	cbnz	r3, 8004154 <_free_r+0x2c>
 8004146:	6063      	str	r3, [r4, #4]
 8004148:	6014      	str	r4, [r2, #0]
 800414a:	4628      	mov	r0, r5
 800414c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004150:	f000 b8dc 	b.w	800430c <__malloc_unlock>
 8004154:	42a3      	cmp	r3, r4
 8004156:	d908      	bls.n	800416a <_free_r+0x42>
 8004158:	6820      	ldr	r0, [r4, #0]
 800415a:	1821      	adds	r1, r4, r0
 800415c:	428b      	cmp	r3, r1
 800415e:	bf01      	itttt	eq
 8004160:	6819      	ldreq	r1, [r3, #0]
 8004162:	685b      	ldreq	r3, [r3, #4]
 8004164:	1809      	addeq	r1, r1, r0
 8004166:	6021      	streq	r1, [r4, #0]
 8004168:	e7ed      	b.n	8004146 <_free_r+0x1e>
 800416a:	461a      	mov	r2, r3
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	b10b      	cbz	r3, 8004174 <_free_r+0x4c>
 8004170:	42a3      	cmp	r3, r4
 8004172:	d9fa      	bls.n	800416a <_free_r+0x42>
 8004174:	6811      	ldr	r1, [r2, #0]
 8004176:	1850      	adds	r0, r2, r1
 8004178:	42a0      	cmp	r0, r4
 800417a:	d10b      	bne.n	8004194 <_free_r+0x6c>
 800417c:	6820      	ldr	r0, [r4, #0]
 800417e:	4401      	add	r1, r0
 8004180:	1850      	adds	r0, r2, r1
 8004182:	4283      	cmp	r3, r0
 8004184:	6011      	str	r1, [r2, #0]
 8004186:	d1e0      	bne.n	800414a <_free_r+0x22>
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	6053      	str	r3, [r2, #4]
 800418e:	4408      	add	r0, r1
 8004190:	6010      	str	r0, [r2, #0]
 8004192:	e7da      	b.n	800414a <_free_r+0x22>
 8004194:	d902      	bls.n	800419c <_free_r+0x74>
 8004196:	230c      	movs	r3, #12
 8004198:	602b      	str	r3, [r5, #0]
 800419a:	e7d6      	b.n	800414a <_free_r+0x22>
 800419c:	6820      	ldr	r0, [r4, #0]
 800419e:	1821      	adds	r1, r4, r0
 80041a0:	428b      	cmp	r3, r1
 80041a2:	bf04      	itt	eq
 80041a4:	6819      	ldreq	r1, [r3, #0]
 80041a6:	685b      	ldreq	r3, [r3, #4]
 80041a8:	6063      	str	r3, [r4, #4]
 80041aa:	bf04      	itt	eq
 80041ac:	1809      	addeq	r1, r1, r0
 80041ae:	6021      	streq	r1, [r4, #0]
 80041b0:	6054      	str	r4, [r2, #4]
 80041b2:	e7ca      	b.n	800414a <_free_r+0x22>
 80041b4:	bd38      	pop	{r3, r4, r5, pc}
 80041b6:	bf00      	nop
 80041b8:	2000035c 	.word	0x2000035c

080041bc <sbrk_aligned>:
 80041bc:	b570      	push	{r4, r5, r6, lr}
 80041be:	4e0f      	ldr	r6, [pc, #60]	@ (80041fc <sbrk_aligned+0x40>)
 80041c0:	460c      	mov	r4, r1
 80041c2:	6831      	ldr	r1, [r6, #0]
 80041c4:	4605      	mov	r5, r0
 80041c6:	b911      	cbnz	r1, 80041ce <sbrk_aligned+0x12>
 80041c8:	f000 fca6 	bl	8004b18 <_sbrk_r>
 80041cc:	6030      	str	r0, [r6, #0]
 80041ce:	4621      	mov	r1, r4
 80041d0:	4628      	mov	r0, r5
 80041d2:	f000 fca1 	bl	8004b18 <_sbrk_r>
 80041d6:	1c43      	adds	r3, r0, #1
 80041d8:	d103      	bne.n	80041e2 <sbrk_aligned+0x26>
 80041da:	f04f 34ff 	mov.w	r4, #4294967295
 80041de:	4620      	mov	r0, r4
 80041e0:	bd70      	pop	{r4, r5, r6, pc}
 80041e2:	1cc4      	adds	r4, r0, #3
 80041e4:	f024 0403 	bic.w	r4, r4, #3
 80041e8:	42a0      	cmp	r0, r4
 80041ea:	d0f8      	beq.n	80041de <sbrk_aligned+0x22>
 80041ec:	1a21      	subs	r1, r4, r0
 80041ee:	4628      	mov	r0, r5
 80041f0:	f000 fc92 	bl	8004b18 <_sbrk_r>
 80041f4:	3001      	adds	r0, #1
 80041f6:	d1f2      	bne.n	80041de <sbrk_aligned+0x22>
 80041f8:	e7ef      	b.n	80041da <sbrk_aligned+0x1e>
 80041fa:	bf00      	nop
 80041fc:	20000358 	.word	0x20000358

08004200 <_malloc_r>:
 8004200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004204:	1ccd      	adds	r5, r1, #3
 8004206:	f025 0503 	bic.w	r5, r5, #3
 800420a:	3508      	adds	r5, #8
 800420c:	2d0c      	cmp	r5, #12
 800420e:	bf38      	it	cc
 8004210:	250c      	movcc	r5, #12
 8004212:	2d00      	cmp	r5, #0
 8004214:	4606      	mov	r6, r0
 8004216:	db01      	blt.n	800421c <_malloc_r+0x1c>
 8004218:	42a9      	cmp	r1, r5
 800421a:	d904      	bls.n	8004226 <_malloc_r+0x26>
 800421c:	230c      	movs	r3, #12
 800421e:	6033      	str	r3, [r6, #0]
 8004220:	2000      	movs	r0, #0
 8004222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004226:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80042fc <_malloc_r+0xfc>
 800422a:	f000 f869 	bl	8004300 <__malloc_lock>
 800422e:	f8d8 3000 	ldr.w	r3, [r8]
 8004232:	461c      	mov	r4, r3
 8004234:	bb44      	cbnz	r4, 8004288 <_malloc_r+0x88>
 8004236:	4629      	mov	r1, r5
 8004238:	4630      	mov	r0, r6
 800423a:	f7ff ffbf 	bl	80041bc <sbrk_aligned>
 800423e:	1c43      	adds	r3, r0, #1
 8004240:	4604      	mov	r4, r0
 8004242:	d158      	bne.n	80042f6 <_malloc_r+0xf6>
 8004244:	f8d8 4000 	ldr.w	r4, [r8]
 8004248:	4627      	mov	r7, r4
 800424a:	2f00      	cmp	r7, #0
 800424c:	d143      	bne.n	80042d6 <_malloc_r+0xd6>
 800424e:	2c00      	cmp	r4, #0
 8004250:	d04b      	beq.n	80042ea <_malloc_r+0xea>
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	4639      	mov	r1, r7
 8004256:	4630      	mov	r0, r6
 8004258:	eb04 0903 	add.w	r9, r4, r3
 800425c:	f000 fc5c 	bl	8004b18 <_sbrk_r>
 8004260:	4581      	cmp	r9, r0
 8004262:	d142      	bne.n	80042ea <_malloc_r+0xea>
 8004264:	6821      	ldr	r1, [r4, #0]
 8004266:	1a6d      	subs	r5, r5, r1
 8004268:	4629      	mov	r1, r5
 800426a:	4630      	mov	r0, r6
 800426c:	f7ff ffa6 	bl	80041bc <sbrk_aligned>
 8004270:	3001      	adds	r0, #1
 8004272:	d03a      	beq.n	80042ea <_malloc_r+0xea>
 8004274:	6823      	ldr	r3, [r4, #0]
 8004276:	442b      	add	r3, r5
 8004278:	6023      	str	r3, [r4, #0]
 800427a:	f8d8 3000 	ldr.w	r3, [r8]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	bb62      	cbnz	r2, 80042dc <_malloc_r+0xdc>
 8004282:	f8c8 7000 	str.w	r7, [r8]
 8004286:	e00f      	b.n	80042a8 <_malloc_r+0xa8>
 8004288:	6822      	ldr	r2, [r4, #0]
 800428a:	1b52      	subs	r2, r2, r5
 800428c:	d420      	bmi.n	80042d0 <_malloc_r+0xd0>
 800428e:	2a0b      	cmp	r2, #11
 8004290:	d917      	bls.n	80042c2 <_malloc_r+0xc2>
 8004292:	1961      	adds	r1, r4, r5
 8004294:	42a3      	cmp	r3, r4
 8004296:	6025      	str	r5, [r4, #0]
 8004298:	bf18      	it	ne
 800429a:	6059      	strne	r1, [r3, #4]
 800429c:	6863      	ldr	r3, [r4, #4]
 800429e:	bf08      	it	eq
 80042a0:	f8c8 1000 	streq.w	r1, [r8]
 80042a4:	5162      	str	r2, [r4, r5]
 80042a6:	604b      	str	r3, [r1, #4]
 80042a8:	4630      	mov	r0, r6
 80042aa:	f000 f82f 	bl	800430c <__malloc_unlock>
 80042ae:	f104 000b 	add.w	r0, r4, #11
 80042b2:	1d23      	adds	r3, r4, #4
 80042b4:	f020 0007 	bic.w	r0, r0, #7
 80042b8:	1ac2      	subs	r2, r0, r3
 80042ba:	bf1c      	itt	ne
 80042bc:	1a1b      	subne	r3, r3, r0
 80042be:	50a3      	strne	r3, [r4, r2]
 80042c0:	e7af      	b.n	8004222 <_malloc_r+0x22>
 80042c2:	6862      	ldr	r2, [r4, #4]
 80042c4:	42a3      	cmp	r3, r4
 80042c6:	bf0c      	ite	eq
 80042c8:	f8c8 2000 	streq.w	r2, [r8]
 80042cc:	605a      	strne	r2, [r3, #4]
 80042ce:	e7eb      	b.n	80042a8 <_malloc_r+0xa8>
 80042d0:	4623      	mov	r3, r4
 80042d2:	6864      	ldr	r4, [r4, #4]
 80042d4:	e7ae      	b.n	8004234 <_malloc_r+0x34>
 80042d6:	463c      	mov	r4, r7
 80042d8:	687f      	ldr	r7, [r7, #4]
 80042da:	e7b6      	b.n	800424a <_malloc_r+0x4a>
 80042dc:	461a      	mov	r2, r3
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	42a3      	cmp	r3, r4
 80042e2:	d1fb      	bne.n	80042dc <_malloc_r+0xdc>
 80042e4:	2300      	movs	r3, #0
 80042e6:	6053      	str	r3, [r2, #4]
 80042e8:	e7de      	b.n	80042a8 <_malloc_r+0xa8>
 80042ea:	230c      	movs	r3, #12
 80042ec:	6033      	str	r3, [r6, #0]
 80042ee:	4630      	mov	r0, r6
 80042f0:	f000 f80c 	bl	800430c <__malloc_unlock>
 80042f4:	e794      	b.n	8004220 <_malloc_r+0x20>
 80042f6:	6005      	str	r5, [r0, #0]
 80042f8:	e7d6      	b.n	80042a8 <_malloc_r+0xa8>
 80042fa:	bf00      	nop
 80042fc:	2000035c 	.word	0x2000035c

08004300 <__malloc_lock>:
 8004300:	4801      	ldr	r0, [pc, #4]	@ (8004308 <__malloc_lock+0x8>)
 8004302:	f7ff bf0e 	b.w	8004122 <__retarget_lock_acquire_recursive>
 8004306:	bf00      	nop
 8004308:	20000354 	.word	0x20000354

0800430c <__malloc_unlock>:
 800430c:	4801      	ldr	r0, [pc, #4]	@ (8004314 <__malloc_unlock+0x8>)
 800430e:	f7ff bf09 	b.w	8004124 <__retarget_lock_release_recursive>
 8004312:	bf00      	nop
 8004314:	20000354 	.word	0x20000354

08004318 <__sfputc_r>:
 8004318:	6893      	ldr	r3, [r2, #8]
 800431a:	3b01      	subs	r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	b410      	push	{r4}
 8004320:	6093      	str	r3, [r2, #8]
 8004322:	da08      	bge.n	8004336 <__sfputc_r+0x1e>
 8004324:	6994      	ldr	r4, [r2, #24]
 8004326:	42a3      	cmp	r3, r4
 8004328:	db01      	blt.n	800432e <__sfputc_r+0x16>
 800432a:	290a      	cmp	r1, #10
 800432c:	d103      	bne.n	8004336 <__sfputc_r+0x1e>
 800432e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004332:	f7ff bde8 	b.w	8003f06 <__swbuf_r>
 8004336:	6813      	ldr	r3, [r2, #0]
 8004338:	1c58      	adds	r0, r3, #1
 800433a:	6010      	str	r0, [r2, #0]
 800433c:	7019      	strb	r1, [r3, #0]
 800433e:	4608      	mov	r0, r1
 8004340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004344:	4770      	bx	lr

08004346 <__sfputs_r>:
 8004346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004348:	4606      	mov	r6, r0
 800434a:	460f      	mov	r7, r1
 800434c:	4614      	mov	r4, r2
 800434e:	18d5      	adds	r5, r2, r3
 8004350:	42ac      	cmp	r4, r5
 8004352:	d101      	bne.n	8004358 <__sfputs_r+0x12>
 8004354:	2000      	movs	r0, #0
 8004356:	e007      	b.n	8004368 <__sfputs_r+0x22>
 8004358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800435c:	463a      	mov	r2, r7
 800435e:	4630      	mov	r0, r6
 8004360:	f7ff ffda 	bl	8004318 <__sfputc_r>
 8004364:	1c43      	adds	r3, r0, #1
 8004366:	d1f3      	bne.n	8004350 <__sfputs_r+0xa>
 8004368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800436c <_vfiprintf_r>:
 800436c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004370:	460d      	mov	r5, r1
 8004372:	b09d      	sub	sp, #116	@ 0x74
 8004374:	4614      	mov	r4, r2
 8004376:	4698      	mov	r8, r3
 8004378:	4606      	mov	r6, r0
 800437a:	b118      	cbz	r0, 8004384 <_vfiprintf_r+0x18>
 800437c:	6a03      	ldr	r3, [r0, #32]
 800437e:	b90b      	cbnz	r3, 8004384 <_vfiprintf_r+0x18>
 8004380:	f7ff fcd8 	bl	8003d34 <__sinit>
 8004384:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004386:	07d9      	lsls	r1, r3, #31
 8004388:	d405      	bmi.n	8004396 <_vfiprintf_r+0x2a>
 800438a:	89ab      	ldrh	r3, [r5, #12]
 800438c:	059a      	lsls	r2, r3, #22
 800438e:	d402      	bmi.n	8004396 <_vfiprintf_r+0x2a>
 8004390:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004392:	f7ff fec6 	bl	8004122 <__retarget_lock_acquire_recursive>
 8004396:	89ab      	ldrh	r3, [r5, #12]
 8004398:	071b      	lsls	r3, r3, #28
 800439a:	d501      	bpl.n	80043a0 <_vfiprintf_r+0x34>
 800439c:	692b      	ldr	r3, [r5, #16]
 800439e:	b99b      	cbnz	r3, 80043c8 <_vfiprintf_r+0x5c>
 80043a0:	4629      	mov	r1, r5
 80043a2:	4630      	mov	r0, r6
 80043a4:	f7ff fdee 	bl	8003f84 <__swsetup_r>
 80043a8:	b170      	cbz	r0, 80043c8 <_vfiprintf_r+0x5c>
 80043aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043ac:	07dc      	lsls	r4, r3, #31
 80043ae:	d504      	bpl.n	80043ba <_vfiprintf_r+0x4e>
 80043b0:	f04f 30ff 	mov.w	r0, #4294967295
 80043b4:	b01d      	add	sp, #116	@ 0x74
 80043b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ba:	89ab      	ldrh	r3, [r5, #12]
 80043bc:	0598      	lsls	r0, r3, #22
 80043be:	d4f7      	bmi.n	80043b0 <_vfiprintf_r+0x44>
 80043c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043c2:	f7ff feaf 	bl	8004124 <__retarget_lock_release_recursive>
 80043c6:	e7f3      	b.n	80043b0 <_vfiprintf_r+0x44>
 80043c8:	2300      	movs	r3, #0
 80043ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80043cc:	2320      	movs	r3, #32
 80043ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80043d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80043d6:	2330      	movs	r3, #48	@ 0x30
 80043d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004588 <_vfiprintf_r+0x21c>
 80043dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80043e0:	f04f 0901 	mov.w	r9, #1
 80043e4:	4623      	mov	r3, r4
 80043e6:	469a      	mov	sl, r3
 80043e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043ec:	b10a      	cbz	r2, 80043f2 <_vfiprintf_r+0x86>
 80043ee:	2a25      	cmp	r2, #37	@ 0x25
 80043f0:	d1f9      	bne.n	80043e6 <_vfiprintf_r+0x7a>
 80043f2:	ebba 0b04 	subs.w	fp, sl, r4
 80043f6:	d00b      	beq.n	8004410 <_vfiprintf_r+0xa4>
 80043f8:	465b      	mov	r3, fp
 80043fa:	4622      	mov	r2, r4
 80043fc:	4629      	mov	r1, r5
 80043fe:	4630      	mov	r0, r6
 8004400:	f7ff ffa1 	bl	8004346 <__sfputs_r>
 8004404:	3001      	adds	r0, #1
 8004406:	f000 80a7 	beq.w	8004558 <_vfiprintf_r+0x1ec>
 800440a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800440c:	445a      	add	r2, fp
 800440e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004410:	f89a 3000 	ldrb.w	r3, [sl]
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 809f 	beq.w	8004558 <_vfiprintf_r+0x1ec>
 800441a:	2300      	movs	r3, #0
 800441c:	f04f 32ff 	mov.w	r2, #4294967295
 8004420:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004424:	f10a 0a01 	add.w	sl, sl, #1
 8004428:	9304      	str	r3, [sp, #16]
 800442a:	9307      	str	r3, [sp, #28]
 800442c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004430:	931a      	str	r3, [sp, #104]	@ 0x68
 8004432:	4654      	mov	r4, sl
 8004434:	2205      	movs	r2, #5
 8004436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800443a:	4853      	ldr	r0, [pc, #332]	@ (8004588 <_vfiprintf_r+0x21c>)
 800443c:	f7fb fee8 	bl	8000210 <memchr>
 8004440:	9a04      	ldr	r2, [sp, #16]
 8004442:	b9d8      	cbnz	r0, 800447c <_vfiprintf_r+0x110>
 8004444:	06d1      	lsls	r1, r2, #27
 8004446:	bf44      	itt	mi
 8004448:	2320      	movmi	r3, #32
 800444a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800444e:	0713      	lsls	r3, r2, #28
 8004450:	bf44      	itt	mi
 8004452:	232b      	movmi	r3, #43	@ 0x2b
 8004454:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004458:	f89a 3000 	ldrb.w	r3, [sl]
 800445c:	2b2a      	cmp	r3, #42	@ 0x2a
 800445e:	d015      	beq.n	800448c <_vfiprintf_r+0x120>
 8004460:	9a07      	ldr	r2, [sp, #28]
 8004462:	4654      	mov	r4, sl
 8004464:	2000      	movs	r0, #0
 8004466:	f04f 0c0a 	mov.w	ip, #10
 800446a:	4621      	mov	r1, r4
 800446c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004470:	3b30      	subs	r3, #48	@ 0x30
 8004472:	2b09      	cmp	r3, #9
 8004474:	d94b      	bls.n	800450e <_vfiprintf_r+0x1a2>
 8004476:	b1b0      	cbz	r0, 80044a6 <_vfiprintf_r+0x13a>
 8004478:	9207      	str	r2, [sp, #28]
 800447a:	e014      	b.n	80044a6 <_vfiprintf_r+0x13a>
 800447c:	eba0 0308 	sub.w	r3, r0, r8
 8004480:	fa09 f303 	lsl.w	r3, r9, r3
 8004484:	4313      	orrs	r3, r2
 8004486:	9304      	str	r3, [sp, #16]
 8004488:	46a2      	mov	sl, r4
 800448a:	e7d2      	b.n	8004432 <_vfiprintf_r+0xc6>
 800448c:	9b03      	ldr	r3, [sp, #12]
 800448e:	1d19      	adds	r1, r3, #4
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	9103      	str	r1, [sp, #12]
 8004494:	2b00      	cmp	r3, #0
 8004496:	bfbb      	ittet	lt
 8004498:	425b      	neglt	r3, r3
 800449a:	f042 0202 	orrlt.w	r2, r2, #2
 800449e:	9307      	strge	r3, [sp, #28]
 80044a0:	9307      	strlt	r3, [sp, #28]
 80044a2:	bfb8      	it	lt
 80044a4:	9204      	strlt	r2, [sp, #16]
 80044a6:	7823      	ldrb	r3, [r4, #0]
 80044a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80044aa:	d10a      	bne.n	80044c2 <_vfiprintf_r+0x156>
 80044ac:	7863      	ldrb	r3, [r4, #1]
 80044ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80044b0:	d132      	bne.n	8004518 <_vfiprintf_r+0x1ac>
 80044b2:	9b03      	ldr	r3, [sp, #12]
 80044b4:	1d1a      	adds	r2, r3, #4
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	9203      	str	r2, [sp, #12]
 80044ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80044be:	3402      	adds	r4, #2
 80044c0:	9305      	str	r3, [sp, #20]
 80044c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004598 <_vfiprintf_r+0x22c>
 80044c6:	7821      	ldrb	r1, [r4, #0]
 80044c8:	2203      	movs	r2, #3
 80044ca:	4650      	mov	r0, sl
 80044cc:	f7fb fea0 	bl	8000210 <memchr>
 80044d0:	b138      	cbz	r0, 80044e2 <_vfiprintf_r+0x176>
 80044d2:	9b04      	ldr	r3, [sp, #16]
 80044d4:	eba0 000a 	sub.w	r0, r0, sl
 80044d8:	2240      	movs	r2, #64	@ 0x40
 80044da:	4082      	lsls	r2, r0
 80044dc:	4313      	orrs	r3, r2
 80044de:	3401      	adds	r4, #1
 80044e0:	9304      	str	r3, [sp, #16]
 80044e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044e6:	4829      	ldr	r0, [pc, #164]	@ (800458c <_vfiprintf_r+0x220>)
 80044e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80044ec:	2206      	movs	r2, #6
 80044ee:	f7fb fe8f 	bl	8000210 <memchr>
 80044f2:	2800      	cmp	r0, #0
 80044f4:	d03f      	beq.n	8004576 <_vfiprintf_r+0x20a>
 80044f6:	4b26      	ldr	r3, [pc, #152]	@ (8004590 <_vfiprintf_r+0x224>)
 80044f8:	bb1b      	cbnz	r3, 8004542 <_vfiprintf_r+0x1d6>
 80044fa:	9b03      	ldr	r3, [sp, #12]
 80044fc:	3307      	adds	r3, #7
 80044fe:	f023 0307 	bic.w	r3, r3, #7
 8004502:	3308      	adds	r3, #8
 8004504:	9303      	str	r3, [sp, #12]
 8004506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004508:	443b      	add	r3, r7
 800450a:	9309      	str	r3, [sp, #36]	@ 0x24
 800450c:	e76a      	b.n	80043e4 <_vfiprintf_r+0x78>
 800450e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004512:	460c      	mov	r4, r1
 8004514:	2001      	movs	r0, #1
 8004516:	e7a8      	b.n	800446a <_vfiprintf_r+0xfe>
 8004518:	2300      	movs	r3, #0
 800451a:	3401      	adds	r4, #1
 800451c:	9305      	str	r3, [sp, #20]
 800451e:	4619      	mov	r1, r3
 8004520:	f04f 0c0a 	mov.w	ip, #10
 8004524:	4620      	mov	r0, r4
 8004526:	f810 2b01 	ldrb.w	r2, [r0], #1
 800452a:	3a30      	subs	r2, #48	@ 0x30
 800452c:	2a09      	cmp	r2, #9
 800452e:	d903      	bls.n	8004538 <_vfiprintf_r+0x1cc>
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0c6      	beq.n	80044c2 <_vfiprintf_r+0x156>
 8004534:	9105      	str	r1, [sp, #20]
 8004536:	e7c4      	b.n	80044c2 <_vfiprintf_r+0x156>
 8004538:	fb0c 2101 	mla	r1, ip, r1, r2
 800453c:	4604      	mov	r4, r0
 800453e:	2301      	movs	r3, #1
 8004540:	e7f0      	b.n	8004524 <_vfiprintf_r+0x1b8>
 8004542:	ab03      	add	r3, sp, #12
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	462a      	mov	r2, r5
 8004548:	4b12      	ldr	r3, [pc, #72]	@ (8004594 <_vfiprintf_r+0x228>)
 800454a:	a904      	add	r1, sp, #16
 800454c:	4630      	mov	r0, r6
 800454e:	f3af 8000 	nop.w
 8004552:	4607      	mov	r7, r0
 8004554:	1c78      	adds	r0, r7, #1
 8004556:	d1d6      	bne.n	8004506 <_vfiprintf_r+0x19a>
 8004558:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800455a:	07d9      	lsls	r1, r3, #31
 800455c:	d405      	bmi.n	800456a <_vfiprintf_r+0x1fe>
 800455e:	89ab      	ldrh	r3, [r5, #12]
 8004560:	059a      	lsls	r2, r3, #22
 8004562:	d402      	bmi.n	800456a <_vfiprintf_r+0x1fe>
 8004564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004566:	f7ff fddd 	bl	8004124 <__retarget_lock_release_recursive>
 800456a:	89ab      	ldrh	r3, [r5, #12]
 800456c:	065b      	lsls	r3, r3, #25
 800456e:	f53f af1f 	bmi.w	80043b0 <_vfiprintf_r+0x44>
 8004572:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004574:	e71e      	b.n	80043b4 <_vfiprintf_r+0x48>
 8004576:	ab03      	add	r3, sp, #12
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	462a      	mov	r2, r5
 800457c:	4b05      	ldr	r3, [pc, #20]	@ (8004594 <_vfiprintf_r+0x228>)
 800457e:	a904      	add	r1, sp, #16
 8004580:	4630      	mov	r0, r6
 8004582:	f000 f879 	bl	8004678 <_printf_i>
 8004586:	e7e4      	b.n	8004552 <_vfiprintf_r+0x1e6>
 8004588:	08005010 	.word	0x08005010
 800458c:	0800501a 	.word	0x0800501a
 8004590:	00000000 	.word	0x00000000
 8004594:	08004347 	.word	0x08004347
 8004598:	08005016 	.word	0x08005016

0800459c <_printf_common>:
 800459c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a0:	4616      	mov	r6, r2
 80045a2:	4698      	mov	r8, r3
 80045a4:	688a      	ldr	r2, [r1, #8]
 80045a6:	690b      	ldr	r3, [r1, #16]
 80045a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045ac:	4293      	cmp	r3, r2
 80045ae:	bfb8      	it	lt
 80045b0:	4613      	movlt	r3, r2
 80045b2:	6033      	str	r3, [r6, #0]
 80045b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80045b8:	4607      	mov	r7, r0
 80045ba:	460c      	mov	r4, r1
 80045bc:	b10a      	cbz	r2, 80045c2 <_printf_common+0x26>
 80045be:	3301      	adds	r3, #1
 80045c0:	6033      	str	r3, [r6, #0]
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	0699      	lsls	r1, r3, #26
 80045c6:	bf42      	ittt	mi
 80045c8:	6833      	ldrmi	r3, [r6, #0]
 80045ca:	3302      	addmi	r3, #2
 80045cc:	6033      	strmi	r3, [r6, #0]
 80045ce:	6825      	ldr	r5, [r4, #0]
 80045d0:	f015 0506 	ands.w	r5, r5, #6
 80045d4:	d106      	bne.n	80045e4 <_printf_common+0x48>
 80045d6:	f104 0a19 	add.w	sl, r4, #25
 80045da:	68e3      	ldr	r3, [r4, #12]
 80045dc:	6832      	ldr	r2, [r6, #0]
 80045de:	1a9b      	subs	r3, r3, r2
 80045e0:	42ab      	cmp	r3, r5
 80045e2:	dc26      	bgt.n	8004632 <_printf_common+0x96>
 80045e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045e8:	6822      	ldr	r2, [r4, #0]
 80045ea:	3b00      	subs	r3, #0
 80045ec:	bf18      	it	ne
 80045ee:	2301      	movne	r3, #1
 80045f0:	0692      	lsls	r2, r2, #26
 80045f2:	d42b      	bmi.n	800464c <_printf_common+0xb0>
 80045f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045f8:	4641      	mov	r1, r8
 80045fa:	4638      	mov	r0, r7
 80045fc:	47c8      	blx	r9
 80045fe:	3001      	adds	r0, #1
 8004600:	d01e      	beq.n	8004640 <_printf_common+0xa4>
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	6922      	ldr	r2, [r4, #16]
 8004606:	f003 0306 	and.w	r3, r3, #6
 800460a:	2b04      	cmp	r3, #4
 800460c:	bf02      	ittt	eq
 800460e:	68e5      	ldreq	r5, [r4, #12]
 8004610:	6833      	ldreq	r3, [r6, #0]
 8004612:	1aed      	subeq	r5, r5, r3
 8004614:	68a3      	ldr	r3, [r4, #8]
 8004616:	bf0c      	ite	eq
 8004618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800461c:	2500      	movne	r5, #0
 800461e:	4293      	cmp	r3, r2
 8004620:	bfc4      	itt	gt
 8004622:	1a9b      	subgt	r3, r3, r2
 8004624:	18ed      	addgt	r5, r5, r3
 8004626:	2600      	movs	r6, #0
 8004628:	341a      	adds	r4, #26
 800462a:	42b5      	cmp	r5, r6
 800462c:	d11a      	bne.n	8004664 <_printf_common+0xc8>
 800462e:	2000      	movs	r0, #0
 8004630:	e008      	b.n	8004644 <_printf_common+0xa8>
 8004632:	2301      	movs	r3, #1
 8004634:	4652      	mov	r2, sl
 8004636:	4641      	mov	r1, r8
 8004638:	4638      	mov	r0, r7
 800463a:	47c8      	blx	r9
 800463c:	3001      	adds	r0, #1
 800463e:	d103      	bne.n	8004648 <_printf_common+0xac>
 8004640:	f04f 30ff 	mov.w	r0, #4294967295
 8004644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004648:	3501      	adds	r5, #1
 800464a:	e7c6      	b.n	80045da <_printf_common+0x3e>
 800464c:	18e1      	adds	r1, r4, r3
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	2030      	movs	r0, #48	@ 0x30
 8004652:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004656:	4422      	add	r2, r4
 8004658:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800465c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004660:	3302      	adds	r3, #2
 8004662:	e7c7      	b.n	80045f4 <_printf_common+0x58>
 8004664:	2301      	movs	r3, #1
 8004666:	4622      	mov	r2, r4
 8004668:	4641      	mov	r1, r8
 800466a:	4638      	mov	r0, r7
 800466c:	47c8      	blx	r9
 800466e:	3001      	adds	r0, #1
 8004670:	d0e6      	beq.n	8004640 <_printf_common+0xa4>
 8004672:	3601      	adds	r6, #1
 8004674:	e7d9      	b.n	800462a <_printf_common+0x8e>
	...

08004678 <_printf_i>:
 8004678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800467c:	7e0f      	ldrb	r7, [r1, #24]
 800467e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004680:	2f78      	cmp	r7, #120	@ 0x78
 8004682:	4691      	mov	r9, r2
 8004684:	4680      	mov	r8, r0
 8004686:	460c      	mov	r4, r1
 8004688:	469a      	mov	sl, r3
 800468a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800468e:	d807      	bhi.n	80046a0 <_printf_i+0x28>
 8004690:	2f62      	cmp	r7, #98	@ 0x62
 8004692:	d80a      	bhi.n	80046aa <_printf_i+0x32>
 8004694:	2f00      	cmp	r7, #0
 8004696:	f000 80d2 	beq.w	800483e <_printf_i+0x1c6>
 800469a:	2f58      	cmp	r7, #88	@ 0x58
 800469c:	f000 80b9 	beq.w	8004812 <_printf_i+0x19a>
 80046a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80046a8:	e03a      	b.n	8004720 <_printf_i+0xa8>
 80046aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046ae:	2b15      	cmp	r3, #21
 80046b0:	d8f6      	bhi.n	80046a0 <_printf_i+0x28>
 80046b2:	a101      	add	r1, pc, #4	@ (adr r1, 80046b8 <_printf_i+0x40>)
 80046b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046b8:	08004711 	.word	0x08004711
 80046bc:	08004725 	.word	0x08004725
 80046c0:	080046a1 	.word	0x080046a1
 80046c4:	080046a1 	.word	0x080046a1
 80046c8:	080046a1 	.word	0x080046a1
 80046cc:	080046a1 	.word	0x080046a1
 80046d0:	08004725 	.word	0x08004725
 80046d4:	080046a1 	.word	0x080046a1
 80046d8:	080046a1 	.word	0x080046a1
 80046dc:	080046a1 	.word	0x080046a1
 80046e0:	080046a1 	.word	0x080046a1
 80046e4:	08004825 	.word	0x08004825
 80046e8:	0800474f 	.word	0x0800474f
 80046ec:	080047df 	.word	0x080047df
 80046f0:	080046a1 	.word	0x080046a1
 80046f4:	080046a1 	.word	0x080046a1
 80046f8:	08004847 	.word	0x08004847
 80046fc:	080046a1 	.word	0x080046a1
 8004700:	0800474f 	.word	0x0800474f
 8004704:	080046a1 	.word	0x080046a1
 8004708:	080046a1 	.word	0x080046a1
 800470c:	080047e7 	.word	0x080047e7
 8004710:	6833      	ldr	r3, [r6, #0]
 8004712:	1d1a      	adds	r2, r3, #4
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6032      	str	r2, [r6, #0]
 8004718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800471c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004720:	2301      	movs	r3, #1
 8004722:	e09d      	b.n	8004860 <_printf_i+0x1e8>
 8004724:	6833      	ldr	r3, [r6, #0]
 8004726:	6820      	ldr	r0, [r4, #0]
 8004728:	1d19      	adds	r1, r3, #4
 800472a:	6031      	str	r1, [r6, #0]
 800472c:	0606      	lsls	r6, r0, #24
 800472e:	d501      	bpl.n	8004734 <_printf_i+0xbc>
 8004730:	681d      	ldr	r5, [r3, #0]
 8004732:	e003      	b.n	800473c <_printf_i+0xc4>
 8004734:	0645      	lsls	r5, r0, #25
 8004736:	d5fb      	bpl.n	8004730 <_printf_i+0xb8>
 8004738:	f9b3 5000 	ldrsh.w	r5, [r3]
 800473c:	2d00      	cmp	r5, #0
 800473e:	da03      	bge.n	8004748 <_printf_i+0xd0>
 8004740:	232d      	movs	r3, #45	@ 0x2d
 8004742:	426d      	negs	r5, r5
 8004744:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004748:	4859      	ldr	r0, [pc, #356]	@ (80048b0 <_printf_i+0x238>)
 800474a:	230a      	movs	r3, #10
 800474c:	e011      	b.n	8004772 <_printf_i+0xfa>
 800474e:	6821      	ldr	r1, [r4, #0]
 8004750:	6833      	ldr	r3, [r6, #0]
 8004752:	0608      	lsls	r0, r1, #24
 8004754:	f853 5b04 	ldr.w	r5, [r3], #4
 8004758:	d402      	bmi.n	8004760 <_printf_i+0xe8>
 800475a:	0649      	lsls	r1, r1, #25
 800475c:	bf48      	it	mi
 800475e:	b2ad      	uxthmi	r5, r5
 8004760:	2f6f      	cmp	r7, #111	@ 0x6f
 8004762:	4853      	ldr	r0, [pc, #332]	@ (80048b0 <_printf_i+0x238>)
 8004764:	6033      	str	r3, [r6, #0]
 8004766:	bf14      	ite	ne
 8004768:	230a      	movne	r3, #10
 800476a:	2308      	moveq	r3, #8
 800476c:	2100      	movs	r1, #0
 800476e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004772:	6866      	ldr	r6, [r4, #4]
 8004774:	60a6      	str	r6, [r4, #8]
 8004776:	2e00      	cmp	r6, #0
 8004778:	bfa2      	ittt	ge
 800477a:	6821      	ldrge	r1, [r4, #0]
 800477c:	f021 0104 	bicge.w	r1, r1, #4
 8004780:	6021      	strge	r1, [r4, #0]
 8004782:	b90d      	cbnz	r5, 8004788 <_printf_i+0x110>
 8004784:	2e00      	cmp	r6, #0
 8004786:	d04b      	beq.n	8004820 <_printf_i+0x1a8>
 8004788:	4616      	mov	r6, r2
 800478a:	fbb5 f1f3 	udiv	r1, r5, r3
 800478e:	fb03 5711 	mls	r7, r3, r1, r5
 8004792:	5dc7      	ldrb	r7, [r0, r7]
 8004794:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004798:	462f      	mov	r7, r5
 800479a:	42bb      	cmp	r3, r7
 800479c:	460d      	mov	r5, r1
 800479e:	d9f4      	bls.n	800478a <_printf_i+0x112>
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d10b      	bne.n	80047bc <_printf_i+0x144>
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	07df      	lsls	r7, r3, #31
 80047a8:	d508      	bpl.n	80047bc <_printf_i+0x144>
 80047aa:	6923      	ldr	r3, [r4, #16]
 80047ac:	6861      	ldr	r1, [r4, #4]
 80047ae:	4299      	cmp	r1, r3
 80047b0:	bfde      	ittt	le
 80047b2:	2330      	movle	r3, #48	@ 0x30
 80047b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047bc:	1b92      	subs	r2, r2, r6
 80047be:	6122      	str	r2, [r4, #16]
 80047c0:	f8cd a000 	str.w	sl, [sp]
 80047c4:	464b      	mov	r3, r9
 80047c6:	aa03      	add	r2, sp, #12
 80047c8:	4621      	mov	r1, r4
 80047ca:	4640      	mov	r0, r8
 80047cc:	f7ff fee6 	bl	800459c <_printf_common>
 80047d0:	3001      	adds	r0, #1
 80047d2:	d14a      	bne.n	800486a <_printf_i+0x1f2>
 80047d4:	f04f 30ff 	mov.w	r0, #4294967295
 80047d8:	b004      	add	sp, #16
 80047da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	f043 0320 	orr.w	r3, r3, #32
 80047e4:	6023      	str	r3, [r4, #0]
 80047e6:	4833      	ldr	r0, [pc, #204]	@ (80048b4 <_printf_i+0x23c>)
 80047e8:	2778      	movs	r7, #120	@ 0x78
 80047ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	6831      	ldr	r1, [r6, #0]
 80047f2:	061f      	lsls	r7, r3, #24
 80047f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80047f8:	d402      	bmi.n	8004800 <_printf_i+0x188>
 80047fa:	065f      	lsls	r7, r3, #25
 80047fc:	bf48      	it	mi
 80047fe:	b2ad      	uxthmi	r5, r5
 8004800:	6031      	str	r1, [r6, #0]
 8004802:	07d9      	lsls	r1, r3, #31
 8004804:	bf44      	itt	mi
 8004806:	f043 0320 	orrmi.w	r3, r3, #32
 800480a:	6023      	strmi	r3, [r4, #0]
 800480c:	b11d      	cbz	r5, 8004816 <_printf_i+0x19e>
 800480e:	2310      	movs	r3, #16
 8004810:	e7ac      	b.n	800476c <_printf_i+0xf4>
 8004812:	4827      	ldr	r0, [pc, #156]	@ (80048b0 <_printf_i+0x238>)
 8004814:	e7e9      	b.n	80047ea <_printf_i+0x172>
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	f023 0320 	bic.w	r3, r3, #32
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	e7f6      	b.n	800480e <_printf_i+0x196>
 8004820:	4616      	mov	r6, r2
 8004822:	e7bd      	b.n	80047a0 <_printf_i+0x128>
 8004824:	6833      	ldr	r3, [r6, #0]
 8004826:	6825      	ldr	r5, [r4, #0]
 8004828:	6961      	ldr	r1, [r4, #20]
 800482a:	1d18      	adds	r0, r3, #4
 800482c:	6030      	str	r0, [r6, #0]
 800482e:	062e      	lsls	r6, r5, #24
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	d501      	bpl.n	8004838 <_printf_i+0x1c0>
 8004834:	6019      	str	r1, [r3, #0]
 8004836:	e002      	b.n	800483e <_printf_i+0x1c6>
 8004838:	0668      	lsls	r0, r5, #25
 800483a:	d5fb      	bpl.n	8004834 <_printf_i+0x1bc>
 800483c:	8019      	strh	r1, [r3, #0]
 800483e:	2300      	movs	r3, #0
 8004840:	6123      	str	r3, [r4, #16]
 8004842:	4616      	mov	r6, r2
 8004844:	e7bc      	b.n	80047c0 <_printf_i+0x148>
 8004846:	6833      	ldr	r3, [r6, #0]
 8004848:	1d1a      	adds	r2, r3, #4
 800484a:	6032      	str	r2, [r6, #0]
 800484c:	681e      	ldr	r6, [r3, #0]
 800484e:	6862      	ldr	r2, [r4, #4]
 8004850:	2100      	movs	r1, #0
 8004852:	4630      	mov	r0, r6
 8004854:	f7fb fcdc 	bl	8000210 <memchr>
 8004858:	b108      	cbz	r0, 800485e <_printf_i+0x1e6>
 800485a:	1b80      	subs	r0, r0, r6
 800485c:	6060      	str	r0, [r4, #4]
 800485e:	6863      	ldr	r3, [r4, #4]
 8004860:	6123      	str	r3, [r4, #16]
 8004862:	2300      	movs	r3, #0
 8004864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004868:	e7aa      	b.n	80047c0 <_printf_i+0x148>
 800486a:	6923      	ldr	r3, [r4, #16]
 800486c:	4632      	mov	r2, r6
 800486e:	4649      	mov	r1, r9
 8004870:	4640      	mov	r0, r8
 8004872:	47d0      	blx	sl
 8004874:	3001      	adds	r0, #1
 8004876:	d0ad      	beq.n	80047d4 <_printf_i+0x15c>
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	079b      	lsls	r3, r3, #30
 800487c:	d413      	bmi.n	80048a6 <_printf_i+0x22e>
 800487e:	68e0      	ldr	r0, [r4, #12]
 8004880:	9b03      	ldr	r3, [sp, #12]
 8004882:	4298      	cmp	r0, r3
 8004884:	bfb8      	it	lt
 8004886:	4618      	movlt	r0, r3
 8004888:	e7a6      	b.n	80047d8 <_printf_i+0x160>
 800488a:	2301      	movs	r3, #1
 800488c:	4632      	mov	r2, r6
 800488e:	4649      	mov	r1, r9
 8004890:	4640      	mov	r0, r8
 8004892:	47d0      	blx	sl
 8004894:	3001      	adds	r0, #1
 8004896:	d09d      	beq.n	80047d4 <_printf_i+0x15c>
 8004898:	3501      	adds	r5, #1
 800489a:	68e3      	ldr	r3, [r4, #12]
 800489c:	9903      	ldr	r1, [sp, #12]
 800489e:	1a5b      	subs	r3, r3, r1
 80048a0:	42ab      	cmp	r3, r5
 80048a2:	dcf2      	bgt.n	800488a <_printf_i+0x212>
 80048a4:	e7eb      	b.n	800487e <_printf_i+0x206>
 80048a6:	2500      	movs	r5, #0
 80048a8:	f104 0619 	add.w	r6, r4, #25
 80048ac:	e7f5      	b.n	800489a <_printf_i+0x222>
 80048ae:	bf00      	nop
 80048b0:	08005021 	.word	0x08005021
 80048b4:	08005032 	.word	0x08005032

080048b8 <__sflush_r>:
 80048b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80048bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048c0:	0716      	lsls	r6, r2, #28
 80048c2:	4605      	mov	r5, r0
 80048c4:	460c      	mov	r4, r1
 80048c6:	d454      	bmi.n	8004972 <__sflush_r+0xba>
 80048c8:	684b      	ldr	r3, [r1, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	dc02      	bgt.n	80048d4 <__sflush_r+0x1c>
 80048ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	dd48      	ble.n	8004966 <__sflush_r+0xae>
 80048d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80048d6:	2e00      	cmp	r6, #0
 80048d8:	d045      	beq.n	8004966 <__sflush_r+0xae>
 80048da:	2300      	movs	r3, #0
 80048dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80048e0:	682f      	ldr	r7, [r5, #0]
 80048e2:	6a21      	ldr	r1, [r4, #32]
 80048e4:	602b      	str	r3, [r5, #0]
 80048e6:	d030      	beq.n	800494a <__sflush_r+0x92>
 80048e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80048ea:	89a3      	ldrh	r3, [r4, #12]
 80048ec:	0759      	lsls	r1, r3, #29
 80048ee:	d505      	bpl.n	80048fc <__sflush_r+0x44>
 80048f0:	6863      	ldr	r3, [r4, #4]
 80048f2:	1ad2      	subs	r2, r2, r3
 80048f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80048f6:	b10b      	cbz	r3, 80048fc <__sflush_r+0x44>
 80048f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80048fa:	1ad2      	subs	r2, r2, r3
 80048fc:	2300      	movs	r3, #0
 80048fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004900:	6a21      	ldr	r1, [r4, #32]
 8004902:	4628      	mov	r0, r5
 8004904:	47b0      	blx	r6
 8004906:	1c43      	adds	r3, r0, #1
 8004908:	89a3      	ldrh	r3, [r4, #12]
 800490a:	d106      	bne.n	800491a <__sflush_r+0x62>
 800490c:	6829      	ldr	r1, [r5, #0]
 800490e:	291d      	cmp	r1, #29
 8004910:	d82b      	bhi.n	800496a <__sflush_r+0xb2>
 8004912:	4a2a      	ldr	r2, [pc, #168]	@ (80049bc <__sflush_r+0x104>)
 8004914:	410a      	asrs	r2, r1
 8004916:	07d6      	lsls	r6, r2, #31
 8004918:	d427      	bmi.n	800496a <__sflush_r+0xb2>
 800491a:	2200      	movs	r2, #0
 800491c:	6062      	str	r2, [r4, #4]
 800491e:	04d9      	lsls	r1, r3, #19
 8004920:	6922      	ldr	r2, [r4, #16]
 8004922:	6022      	str	r2, [r4, #0]
 8004924:	d504      	bpl.n	8004930 <__sflush_r+0x78>
 8004926:	1c42      	adds	r2, r0, #1
 8004928:	d101      	bne.n	800492e <__sflush_r+0x76>
 800492a:	682b      	ldr	r3, [r5, #0]
 800492c:	b903      	cbnz	r3, 8004930 <__sflush_r+0x78>
 800492e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004930:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004932:	602f      	str	r7, [r5, #0]
 8004934:	b1b9      	cbz	r1, 8004966 <__sflush_r+0xae>
 8004936:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800493a:	4299      	cmp	r1, r3
 800493c:	d002      	beq.n	8004944 <__sflush_r+0x8c>
 800493e:	4628      	mov	r0, r5
 8004940:	f7ff fbf2 	bl	8004128 <_free_r>
 8004944:	2300      	movs	r3, #0
 8004946:	6363      	str	r3, [r4, #52]	@ 0x34
 8004948:	e00d      	b.n	8004966 <__sflush_r+0xae>
 800494a:	2301      	movs	r3, #1
 800494c:	4628      	mov	r0, r5
 800494e:	47b0      	blx	r6
 8004950:	4602      	mov	r2, r0
 8004952:	1c50      	adds	r0, r2, #1
 8004954:	d1c9      	bne.n	80048ea <__sflush_r+0x32>
 8004956:	682b      	ldr	r3, [r5, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0c6      	beq.n	80048ea <__sflush_r+0x32>
 800495c:	2b1d      	cmp	r3, #29
 800495e:	d001      	beq.n	8004964 <__sflush_r+0xac>
 8004960:	2b16      	cmp	r3, #22
 8004962:	d11e      	bne.n	80049a2 <__sflush_r+0xea>
 8004964:	602f      	str	r7, [r5, #0]
 8004966:	2000      	movs	r0, #0
 8004968:	e022      	b.n	80049b0 <__sflush_r+0xf8>
 800496a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800496e:	b21b      	sxth	r3, r3
 8004970:	e01b      	b.n	80049aa <__sflush_r+0xf2>
 8004972:	690f      	ldr	r7, [r1, #16]
 8004974:	2f00      	cmp	r7, #0
 8004976:	d0f6      	beq.n	8004966 <__sflush_r+0xae>
 8004978:	0793      	lsls	r3, r2, #30
 800497a:	680e      	ldr	r6, [r1, #0]
 800497c:	bf08      	it	eq
 800497e:	694b      	ldreq	r3, [r1, #20]
 8004980:	600f      	str	r7, [r1, #0]
 8004982:	bf18      	it	ne
 8004984:	2300      	movne	r3, #0
 8004986:	eba6 0807 	sub.w	r8, r6, r7
 800498a:	608b      	str	r3, [r1, #8]
 800498c:	f1b8 0f00 	cmp.w	r8, #0
 8004990:	dde9      	ble.n	8004966 <__sflush_r+0xae>
 8004992:	6a21      	ldr	r1, [r4, #32]
 8004994:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004996:	4643      	mov	r3, r8
 8004998:	463a      	mov	r2, r7
 800499a:	4628      	mov	r0, r5
 800499c:	47b0      	blx	r6
 800499e:	2800      	cmp	r0, #0
 80049a0:	dc08      	bgt.n	80049b4 <__sflush_r+0xfc>
 80049a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049aa:	81a3      	strh	r3, [r4, #12]
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295
 80049b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049b4:	4407      	add	r7, r0
 80049b6:	eba8 0800 	sub.w	r8, r8, r0
 80049ba:	e7e7      	b.n	800498c <__sflush_r+0xd4>
 80049bc:	dfbffffe 	.word	0xdfbffffe

080049c0 <_fflush_r>:
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	690b      	ldr	r3, [r1, #16]
 80049c4:	4605      	mov	r5, r0
 80049c6:	460c      	mov	r4, r1
 80049c8:	b913      	cbnz	r3, 80049d0 <_fflush_r+0x10>
 80049ca:	2500      	movs	r5, #0
 80049cc:	4628      	mov	r0, r5
 80049ce:	bd38      	pop	{r3, r4, r5, pc}
 80049d0:	b118      	cbz	r0, 80049da <_fflush_r+0x1a>
 80049d2:	6a03      	ldr	r3, [r0, #32]
 80049d4:	b90b      	cbnz	r3, 80049da <_fflush_r+0x1a>
 80049d6:	f7ff f9ad 	bl	8003d34 <__sinit>
 80049da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0f3      	beq.n	80049ca <_fflush_r+0xa>
 80049e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80049e4:	07d0      	lsls	r0, r2, #31
 80049e6:	d404      	bmi.n	80049f2 <_fflush_r+0x32>
 80049e8:	0599      	lsls	r1, r3, #22
 80049ea:	d402      	bmi.n	80049f2 <_fflush_r+0x32>
 80049ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049ee:	f7ff fb98 	bl	8004122 <__retarget_lock_acquire_recursive>
 80049f2:	4628      	mov	r0, r5
 80049f4:	4621      	mov	r1, r4
 80049f6:	f7ff ff5f 	bl	80048b8 <__sflush_r>
 80049fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049fc:	07da      	lsls	r2, r3, #31
 80049fe:	4605      	mov	r5, r0
 8004a00:	d4e4      	bmi.n	80049cc <_fflush_r+0xc>
 8004a02:	89a3      	ldrh	r3, [r4, #12]
 8004a04:	059b      	lsls	r3, r3, #22
 8004a06:	d4e1      	bmi.n	80049cc <_fflush_r+0xc>
 8004a08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a0a:	f7ff fb8b 	bl	8004124 <__retarget_lock_release_recursive>
 8004a0e:	e7dd      	b.n	80049cc <_fflush_r+0xc>

08004a10 <__swhatbuf_r>:
 8004a10:	b570      	push	{r4, r5, r6, lr}
 8004a12:	460c      	mov	r4, r1
 8004a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a18:	2900      	cmp	r1, #0
 8004a1a:	b096      	sub	sp, #88	@ 0x58
 8004a1c:	4615      	mov	r5, r2
 8004a1e:	461e      	mov	r6, r3
 8004a20:	da0d      	bge.n	8004a3e <__swhatbuf_r+0x2e>
 8004a22:	89a3      	ldrh	r3, [r4, #12]
 8004a24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004a28:	f04f 0100 	mov.w	r1, #0
 8004a2c:	bf14      	ite	ne
 8004a2e:	2340      	movne	r3, #64	@ 0x40
 8004a30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004a34:	2000      	movs	r0, #0
 8004a36:	6031      	str	r1, [r6, #0]
 8004a38:	602b      	str	r3, [r5, #0]
 8004a3a:	b016      	add	sp, #88	@ 0x58
 8004a3c:	bd70      	pop	{r4, r5, r6, pc}
 8004a3e:	466a      	mov	r2, sp
 8004a40:	f000 f848 	bl	8004ad4 <_fstat_r>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	dbec      	blt.n	8004a22 <__swhatbuf_r+0x12>
 8004a48:	9901      	ldr	r1, [sp, #4]
 8004a4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004a4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004a52:	4259      	negs	r1, r3
 8004a54:	4159      	adcs	r1, r3
 8004a56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a5a:	e7eb      	b.n	8004a34 <__swhatbuf_r+0x24>

08004a5c <__smakebuf_r>:
 8004a5c:	898b      	ldrh	r3, [r1, #12]
 8004a5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a60:	079d      	lsls	r5, r3, #30
 8004a62:	4606      	mov	r6, r0
 8004a64:	460c      	mov	r4, r1
 8004a66:	d507      	bpl.n	8004a78 <__smakebuf_r+0x1c>
 8004a68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004a6c:	6023      	str	r3, [r4, #0]
 8004a6e:	6123      	str	r3, [r4, #16]
 8004a70:	2301      	movs	r3, #1
 8004a72:	6163      	str	r3, [r4, #20]
 8004a74:	b003      	add	sp, #12
 8004a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a78:	ab01      	add	r3, sp, #4
 8004a7a:	466a      	mov	r2, sp
 8004a7c:	f7ff ffc8 	bl	8004a10 <__swhatbuf_r>
 8004a80:	9f00      	ldr	r7, [sp, #0]
 8004a82:	4605      	mov	r5, r0
 8004a84:	4639      	mov	r1, r7
 8004a86:	4630      	mov	r0, r6
 8004a88:	f7ff fbba 	bl	8004200 <_malloc_r>
 8004a8c:	b948      	cbnz	r0, 8004aa2 <__smakebuf_r+0x46>
 8004a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a92:	059a      	lsls	r2, r3, #22
 8004a94:	d4ee      	bmi.n	8004a74 <__smakebuf_r+0x18>
 8004a96:	f023 0303 	bic.w	r3, r3, #3
 8004a9a:	f043 0302 	orr.w	r3, r3, #2
 8004a9e:	81a3      	strh	r3, [r4, #12]
 8004aa0:	e7e2      	b.n	8004a68 <__smakebuf_r+0xc>
 8004aa2:	89a3      	ldrh	r3, [r4, #12]
 8004aa4:	6020      	str	r0, [r4, #0]
 8004aa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aaa:	81a3      	strh	r3, [r4, #12]
 8004aac:	9b01      	ldr	r3, [sp, #4]
 8004aae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004ab2:	b15b      	cbz	r3, 8004acc <__smakebuf_r+0x70>
 8004ab4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ab8:	4630      	mov	r0, r6
 8004aba:	f000 f81d 	bl	8004af8 <_isatty_r>
 8004abe:	b128      	cbz	r0, 8004acc <__smakebuf_r+0x70>
 8004ac0:	89a3      	ldrh	r3, [r4, #12]
 8004ac2:	f023 0303 	bic.w	r3, r3, #3
 8004ac6:	f043 0301 	orr.w	r3, r3, #1
 8004aca:	81a3      	strh	r3, [r4, #12]
 8004acc:	89a3      	ldrh	r3, [r4, #12]
 8004ace:	431d      	orrs	r5, r3
 8004ad0:	81a5      	strh	r5, [r4, #12]
 8004ad2:	e7cf      	b.n	8004a74 <__smakebuf_r+0x18>

08004ad4 <_fstat_r>:
 8004ad4:	b538      	push	{r3, r4, r5, lr}
 8004ad6:	4d07      	ldr	r5, [pc, #28]	@ (8004af4 <_fstat_r+0x20>)
 8004ad8:	2300      	movs	r3, #0
 8004ada:	4604      	mov	r4, r0
 8004adc:	4608      	mov	r0, r1
 8004ade:	4611      	mov	r1, r2
 8004ae0:	602b      	str	r3, [r5, #0]
 8004ae2:	f7fc fdeb 	bl	80016bc <_fstat>
 8004ae6:	1c43      	adds	r3, r0, #1
 8004ae8:	d102      	bne.n	8004af0 <_fstat_r+0x1c>
 8004aea:	682b      	ldr	r3, [r5, #0]
 8004aec:	b103      	cbz	r3, 8004af0 <_fstat_r+0x1c>
 8004aee:	6023      	str	r3, [r4, #0]
 8004af0:	bd38      	pop	{r3, r4, r5, pc}
 8004af2:	bf00      	nop
 8004af4:	20000350 	.word	0x20000350

08004af8 <_isatty_r>:
 8004af8:	b538      	push	{r3, r4, r5, lr}
 8004afa:	4d06      	ldr	r5, [pc, #24]	@ (8004b14 <_isatty_r+0x1c>)
 8004afc:	2300      	movs	r3, #0
 8004afe:	4604      	mov	r4, r0
 8004b00:	4608      	mov	r0, r1
 8004b02:	602b      	str	r3, [r5, #0]
 8004b04:	f7fc fdea 	bl	80016dc <_isatty>
 8004b08:	1c43      	adds	r3, r0, #1
 8004b0a:	d102      	bne.n	8004b12 <_isatty_r+0x1a>
 8004b0c:	682b      	ldr	r3, [r5, #0]
 8004b0e:	b103      	cbz	r3, 8004b12 <_isatty_r+0x1a>
 8004b10:	6023      	str	r3, [r4, #0]
 8004b12:	bd38      	pop	{r3, r4, r5, pc}
 8004b14:	20000350 	.word	0x20000350

08004b18 <_sbrk_r>:
 8004b18:	b538      	push	{r3, r4, r5, lr}
 8004b1a:	4d06      	ldr	r5, [pc, #24]	@ (8004b34 <_sbrk_r+0x1c>)
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	4604      	mov	r4, r0
 8004b20:	4608      	mov	r0, r1
 8004b22:	602b      	str	r3, [r5, #0]
 8004b24:	f7fc fdf2 	bl	800170c <_sbrk>
 8004b28:	1c43      	adds	r3, r0, #1
 8004b2a:	d102      	bne.n	8004b32 <_sbrk_r+0x1a>
 8004b2c:	682b      	ldr	r3, [r5, #0]
 8004b2e:	b103      	cbz	r3, 8004b32 <_sbrk_r+0x1a>
 8004b30:	6023      	str	r3, [r4, #0]
 8004b32:	bd38      	pop	{r3, r4, r5, pc}
 8004b34:	20000350 	.word	0x20000350

08004b38 <_init>:
 8004b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3a:	bf00      	nop
 8004b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b3e:	bc08      	pop	{r3}
 8004b40:	469e      	mov	lr, r3
 8004b42:	4770      	bx	lr

08004b44 <_fini>:
 8004b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b46:	bf00      	nop
 8004b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b4a:	bc08      	pop	{r3}
 8004b4c:	469e      	mov	lr, r3
 8004b4e:	4770      	bx	lr
