
BOOTLOADER_F446RET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049dc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  08004bac  08004bac  00005bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005054  08005054  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005054  08005054  00006054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800505c  0800505c  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800505c  0800505c  0000605c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005060  08005060  00006060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005064  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000070  080050d4  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  080050d4  00007360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad5f  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021e1  00000000  00000000  00011dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  00013fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c7  00000000  00000000  00014a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022808  00000000  00000000  000151ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd80  00000000  00000000  000379f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb238  00000000  00000000  00044777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010f9af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003064  00000000  00000000  0010f9f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00112a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004b94 	.word	0x08004b94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004b94 	.word	0x08004b94

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <bootloader_main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void bootloader_main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
	uint8_t rx_byte = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status;
	// Wait for 1 byte for up to 3 seconds
	status = HAL_UART_Receive(&huart3, &rx_byte, 1, UART_TIMEOUT_MS);
 80005aa:	1db9      	adds	r1, r7, #6
 80005ac:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80005b0:	2201      	movs	r2, #1
 80005b2:	480e      	ldr	r0, [pc, #56]	@ (80005ec <bootloader_main+0x4c>)
 80005b4:	f002 ff99 	bl	80034ea <HAL_UART_Receive>
 80005b8:	4603      	mov	r3, r0
 80005ba:	71fb      	strb	r3, [r7, #7]

	if (status == HAL_OK && rx_byte == BOOT_CMD)
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d108      	bne.n	80005d4 <bootloader_main+0x34>
 80005c2:	79bb      	ldrb	r3, [r7, #6]
 80005c4:	2b50      	cmp	r3, #80	@ 0x50
 80005c6:	d105      	bne.n	80005d4 <bootloader_main+0x34>
	{
		printf("BOOT_CMD (0x50) received...entering bootloader mode\n\r");
 80005c8:	4809      	ldr	r0, [pc, #36]	@ (80005f0 <bootloader_main+0x50>)
 80005ca:	f003 fc17 	bl	8003dfc <iprintf>
		bootloader_read_uart_data();
 80005ce:	f000 f997 	bl	8000900 <bootloader_read_uart_data>
 80005d2:	e006      	b.n	80005e2 <bootloader_main+0x42>
	}
	else
	{
		printf("No valid BOOT_CMD received...jumping to application\n\r");
 80005d4:	4807      	ldr	r0, [pc, #28]	@ (80005f4 <bootloader_main+0x54>)
 80005d6:	f003 fc11 	bl	8003dfc <iprintf>
		bootloader_jump_to_user_app(FLASH_SECTOR2_BASE_ADDRESS);
 80005da:	4807      	ldr	r0, [pc, #28]	@ (80005f8 <bootloader_main+0x58>)
 80005dc:	f000 f9fe 	bl	80009dc <bootloader_jump_to_user_app>
	}
}
 80005e0:	bf00      	nop
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	200000dc 	.word	0x200000dc
 80005f0:	08004bac 	.word	0x08004bac
 80005f4:	08004be4 	.word	0x08004be4
 80005f8:	08008000 	.word	0x08008000

080005fc <__io_putchar>:


#define PRINTF   int __io_putchar(int ch)
PRINTF
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000604:	1d39      	adds	r1, r7, #4
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
 800060a:	2201      	movs	r2, #1
 800060c:	4803      	ldr	r0, [pc, #12]	@ (800061c <__io_putchar+0x20>)
 800060e:	f002 fee1 	bl	80033d4 <HAL_UART_Transmit>
	return ch;
 8000612:	687b      	ldr	r3, [r7, #4]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000094 	.word	0x20000094

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f001 f92a 	bl	800187c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f80c 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 f8de 	bl	80007ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000630:	f000 f888 	bl	8000744 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000634:	f000 f8b0 	bl	8000798 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000638:	f000 f870 	bl	800071c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  bootloader_main();
 800063c:	f7ff ffb0 	bl	80005a0 <bootloader_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <main+0x20>

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	@ 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2234      	movs	r2, #52	@ 0x34
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f003 fd1a 	bl	800408c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b29      	ldr	r3, [pc, #164]	@ (8000714 <SystemClock_Config+0xd0>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	4a28      	ldr	r2, [pc, #160]	@ (8000714 <SystemClock_Config+0xd0>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	@ 0x40
 8000678:	4b26      	ldr	r3, [pc, #152]	@ (8000714 <SystemClock_Config+0xd0>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b23      	ldr	r3, [pc, #140]	@ (8000718 <SystemClock_Config+0xd4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000690:	4a21      	ldr	r2, [pc, #132]	@ (8000718 <SystemClock_Config+0xd4>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <SystemClock_Config+0xd4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b8:	2308      	movs	r3, #8
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80006bc:	2354      	movs	r3, #84	@ 0x54
 80006be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 fb91 	bl	8002df8 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006dc:	f000 f8f4 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2302      	movs	r3, #2
 80006e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	2102      	movs	r1, #2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 ffbf 	bl	8002680 <HAL_RCC_ClockConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000708:	f000 f8de 	bl	80008c8 <Error_Handler>
  }
}
 800070c:	bf00      	nop
 800070e:	3750      	adds	r7, #80	@ 0x50
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <MX_CRC_Init+0x20>)
 8000722:	4a07      	ldr	r2, [pc, #28]	@ (8000740 <MX_CRC_Init+0x24>)
 8000724:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	@ (800073c <MX_CRC_Init+0x20>)
 8000728:	f001 fa35 	bl	8001b96 <HAL_CRC_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000732:	f000 f8c9 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	2000008c 	.word	0x2000008c
 8000740:	40023000 	.word	0x40023000

08000744 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000748:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 800074a:	4a12      	ldr	r2, [pc, #72]	@ (8000794 <MX_USART2_UART_Init+0x50>)
 800074c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800074e:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 800077c:	f002 fdda 	bl	8003334 <HAL_UART_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000786:	f000 f89f 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000094 	.word	0x20000094
 8000794:	40004400 	.word	0x40004400

08000798 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800079c:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_USART3_UART_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	@ (80007e8 <MX_USART3_UART_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007a2:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <MX_USART3_UART_Init+0x4c>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_USART3_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_USART3_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <MX_USART3_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_USART3_UART_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <MX_USART3_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_USART3_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_USART3_UART_Init+0x4c>)
 80007d0:	f002 fdb0 	bl	8003334 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007da:	f000 f875 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000dc 	.word	0x200000dc
 80007e8:	40004800 	.word	0x40004800

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	@ 0x28
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b2d      	ldr	r3, [pc, #180]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a2c      	ldr	r2, [pc, #176]	@ (80008bc <MX_GPIO_Init+0xd0>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b2a      	ldr	r3, [pc, #168]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b26      	ldr	r3, [pc, #152]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a25      	ldr	r2, [pc, #148]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b23      	ldr	r3, [pc, #140]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b1f      	ldr	r3, [pc, #124]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a1e      	ldr	r2, [pc, #120]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <MX_GPIO_Init+0xd0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <MX_GPIO_Init+0xd0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a17      	ldr	r2, [pc, #92]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <MX_GPIO_Init+0xd0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2120      	movs	r1, #32
 8000876:	4812      	ldr	r0, [pc, #72]	@ (80008c0 <MX_GPIO_Init+0xd4>)
 8000878:	f001 fee8 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 800087c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000886:	2302      	movs	r3, #2
 8000888:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	480c      	ldr	r0, [pc, #48]	@ (80008c4 <MX_GPIO_Init+0xd8>)
 8000892:	f001 fd47 	bl	8002324 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000896:	2320      	movs	r3, #32
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <MX_GPIO_Init+0xd4>)
 80008ae:	f001 fd39 	bl	8002324 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b2:	bf00      	nop
 80008b4:	3728      	adds	r7, #40	@ 0x28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020000 	.word	0x40020000
 80008c4:	40020800 	.word	0x40020800

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <Error_Handler+0x8>

080008d4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80008d8:	f3bf 8f4f 	dsb	sy
}
 80008dc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80008de:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <__NVIC_SystemReset+0x24>)
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80008e6:	4904      	ldr	r1, [pc, #16]	@ (80008f8 <__NVIC_SystemReset+0x24>)
 80008e8:	4b04      	ldr	r3, [pc, #16]	@ (80008fc <__NVIC_SystemReset+0x28>)
 80008ea:	4313      	orrs	r3, r2
 80008ec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80008ee:	f3bf 8f4f 	dsb	sy
}
 80008f2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <__NVIC_SystemReset+0x20>
 80008f8:	e000ed00 	.word	0xe000ed00
 80008fc:	05fa0004 	.word	0x05fa0004

08000900 <bootloader_read_uart_data>:
                               BL_MEM_WRITE,
							   BL_READ_SECTOR_STATUS} ;


void bootloader_read_uart_data(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
	uint8_t rcv_len = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		memset(bl_rx_buffer, 0, 200);
 800090a:	22c8      	movs	r2, #200	@ 0xc8
 800090c:	2100      	movs	r1, #0
 800090e:	4830      	ldr	r0, [pc, #192]	@ (80009d0 <bootloader_read_uart_data+0xd0>)
 8000910:	f003 fbbc 	bl	800408c <memset>
		HAL_UART_Receive(&huart3, &bl_rx_buffer, 1, HAL_MAX_DELAY);
 8000914:	f04f 33ff 	mov.w	r3, #4294967295
 8000918:	2201      	movs	r2, #1
 800091a:	492d      	ldr	r1, [pc, #180]	@ (80009d0 <bootloader_read_uart_data+0xd0>)
 800091c:	482d      	ldr	r0, [pc, #180]	@ (80009d4 <bootloader_read_uart_data+0xd4>)
 800091e:	f002 fde4 	bl	80034ea <HAL_UART_Receive>
		rcv_len = bl_rx_buffer[0];
 8000922:	4b2b      	ldr	r3, [pc, #172]	@ (80009d0 <bootloader_read_uart_data+0xd0>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(&huart3, &bl_rx_buffer[1], rcv_len, HAL_MAX_DELAY);
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	b29a      	uxth	r2, r3
 800092c:	f04f 33ff 	mov.w	r3, #4294967295
 8000930:	4929      	ldr	r1, [pc, #164]	@ (80009d8 <bootloader_read_uart_data+0xd8>)
 8000932:	4828      	ldr	r0, [pc, #160]	@ (80009d4 <bootloader_read_uart_data+0xd4>)
 8000934:	f002 fdd9 	bl	80034ea <HAL_UART_Receive>
		switch(bl_rx_buffer[1])
 8000938:	4b25      	ldr	r3, [pc, #148]	@ (80009d0 <bootloader_read_uart_data+0xd0>)
 800093a:	785b      	ldrb	r3, [r3, #1]
 800093c:	3b51      	subs	r3, #81	@ 0x51
 800093e:	2b0a      	cmp	r3, #10
 8000940:	d844      	bhi.n	80009cc <bootloader_read_uart_data+0xcc>
 8000942:	a201      	add	r2, pc, #4	@ (adr r2, 8000948 <bootloader_read_uart_data+0x48>)
 8000944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000948:	08000975 	.word	0x08000975
 800094c:	0800097d 	.word	0x0800097d
 8000950:	08000985 	.word	0x08000985
 8000954:	0800098d 	.word	0x0800098d
 8000958:	08000995 	.word	0x08000995
 800095c:	0800099d 	.word	0x0800099d
 8000960:	080009a5 	.word	0x080009a5
 8000964:	080009ad 	.word	0x080009ad
 8000968:	080009b5 	.word	0x080009b5
 800096c:	080009bd 	.word	0x080009bd
 8000970:	080009c5 	.word	0x080009c5
		{
			case BL_GET_VER:
				bootloader_handle_getver_cmd(bl_rx_buffer);
 8000974:	4816      	ldr	r0, [pc, #88]	@ (80009d0 <bootloader_read_uart_data+0xd0>)
 8000976:	f000 fb47 	bl	8001008 <bootloader_handle_getver_cmd>
				break;
 800097a:	e028      	b.n	80009ce <bootloader_read_uart_data+0xce>
			case BL_GET_HELP:
				bootloader_handle_gethelp_cmd(bl_rx_buffer);
 800097c:	4814      	ldr	r0, [pc, #80]	@ (80009d0 <bootloader_read_uart_data+0xd0>)
 800097e:	f000 fb09 	bl	8000f94 <bootloader_handle_gethelp_cmd>
				break;
 8000982:	e024      	b.n	80009ce <bootloader_read_uart_data+0xce>
			case BL_GET_CID:
				bootloader_handle_getcid_cmd(bl_rx_buffer);
 8000984:	4812      	ldr	r0, [pc, #72]	@ (80009d0 <bootloader_read_uart_data+0xd0>)
 8000986:	f000 fabb 	bl	8000f00 <bootloader_handle_getcid_cmd>
				break;
 800098a:	e020      	b.n	80009ce <bootloader_read_uart_data+0xce>
			case BL_GET_RDP_STATUS:
				bootloader_handle_getrdp_cmd(bl_rx_buffer);
 800098c:	4810      	ldr	r0, [pc, #64]	@ (80009d0 <bootloader_read_uart_data+0xd0>)
 800098e:	f000 fa6d 	bl	8000e6c <bootloader_handle_getrdp_cmd>
		 	    break;
 8000992:	e01c      	b.n	80009ce <bootloader_read_uart_data+0xce>
			case BL_GO_TO_ADDR:
				bootloader_handle_go_cmd(bl_rx_buffer);
 8000994:	480e      	ldr	r0, [pc, #56]	@ (80009d0 <bootloader_read_uart_data+0xd0>)
 8000996:	f000 fa09 	bl	8000dac <bootloader_handle_go_cmd>
				break;
 800099a:	e018      	b.n	80009ce <bootloader_read_uart_data+0xce>
			case BL_FLASH_ERASE:
				bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 800099c:	480c      	ldr	r0, [pc, #48]	@ (80009d0 <bootloader_read_uart_data+0xd0>)
 800099e:	f000 f99d 	bl	8000cdc <bootloader_handle_flash_erase_cmd>
				break;
 80009a2:	e014      	b.n	80009ce <bootloader_read_uart_data+0xce>
			case BL_MEM_WRITE:
				bootloader_handle_mem_write_cmd(bl_rx_buffer);
 80009a4:	480a      	ldr	r0, [pc, #40]	@ (80009d0 <bootloader_read_uart_data+0xd0>)
 80009a6:	f000 f915 	bl	8000bd4 <bootloader_handle_mem_write_cmd>
				break;
 80009aa:	e010      	b.n	80009ce <bootloader_read_uart_data+0xce>
			case BL_EN_RW_PROTECT:
				bootloader_handle_endis_rw_protect(bl_rx_buffer);
 80009ac:	4808      	ldr	r0, [pc, #32]	@ (80009d0 <bootloader_read_uart_data+0xd0>)
 80009ae:	f000 f8c1 	bl	8000b34 <bootloader_handle_endis_rw_protect>
				break;
 80009b2:	e00c      	b.n	80009ce <bootloader_read_uart_data+0xce>
			case BL_MEM_READ:
				bootloader_handle_mem_read(bl_rx_buffer);
 80009b4:	4806      	ldr	r0, [pc, #24]	@ (80009d0 <bootloader_read_uart_data+0xd0>)
 80009b6:	f000 f8b3 	bl	8000b20 <bootloader_handle_mem_read>
				break;
 80009ba:	e008      	b.n	80009ce <bootloader_read_uart_data+0xce>
			case BL_READ_SECTOR_STATUS:
				bootloader_handle_read_sector_status(bl_rx_buffer);
 80009bc:	4804      	ldr	r0, [pc, #16]	@ (80009d0 <bootloader_read_uart_data+0xd0>)
 80009be:	f000 f85f 	bl	8000a80 <bootloader_handle_read_sector_status>
				break;
 80009c2:	e004      	b.n	80009ce <bootloader_read_uart_data+0xce>
			case BL_OTP_READ:
				bootloader_handle_read_otp(bl_rx_buffer);
 80009c4:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <bootloader_read_uart_data+0xd0>)
 80009c6:	f000 f8a1 	bl	8000b0c <bootloader_handle_read_otp>
				break;
 80009ca:	e000      	b.n	80009ce <bootloader_read_uart_data+0xce>
			default:
				break;
 80009cc:	bf00      	nop
		memset(bl_rx_buffer, 0, 200);
 80009ce:	e79c      	b.n	800090a <bootloader_read_uart_data+0xa>
 80009d0:	20000124 	.word	0x20000124
 80009d4:	200000dc 	.word	0x200000dc
 80009d8:	20000125 	.word	0x20000125

080009dc <bootloader_jump_to_user_app>:
		}
	}
}

void bootloader_jump_to_user_app(uint32_t app_start_address)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
    void (*app_reset_handler)(void);
    uint32_t msp_value = *(volatile uint32_t*)app_start_address;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	617b      	str	r3, [r7, #20]
    uint32_t reset_handler_address = *(volatile uint32_t*)(app_start_address + 4);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3304      	adds	r3, #4
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	613b      	str	r3, [r7, #16]

    printf("app reset handler addr: 0x%08lx\n", reset_handler_address);
 80009f2:	6939      	ldr	r1, [r7, #16]
 80009f4:	4809      	ldr	r0, [pc, #36]	@ (8000a1c <bootloader_jump_to_user_app+0x40>)
 80009f6:	f003 fa01 	bl	8003dfc <iprintf>
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	f383 8808 	msr	MSP, r3
}
 8000a04:	bf00      	nop
    __set_MSP(msp_value);
    app_reset_handler = (void*) (reset_handler_address | 0x1);  // Ensure Thumb bit is set
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	60fb      	str	r3, [r7, #12]
    app_reset_handler();
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	4798      	blx	r3
}
 8000a12:	bf00      	nop
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	08004c1c 	.word	0x08004c1c

08000a20 <jump_to_updated_application>:

void jump_to_updated_application(uint32_t app_start_address)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	void (*app_reset_handler)(void);
	uint32_t msp_value = *(volatile uint32_t*)app_start_address;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	617b      	str	r3, [r7, #20]
	uint32_t reset_handler_address = *(volatile uint32_t*)(app_start_address + 4);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	3304      	adds	r3, #4
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	613b      	str	r3, [r7, #16]

	printf("app reset handler addr: 0x%08lx\n", reset_handler_address);
 8000a36:	6939      	ldr	r1, [r7, #16]
 8000a38:	480e      	ldr	r0, [pc, #56]	@ (8000a74 <jump_to_updated_application+0x54>)
 8000a3a:	f003 f9df 	bl	8003dfc <iprintf>

	HAL_RCC_DeInit();
 8000a3e:	f002 f8e3 	bl	8002c08 <HAL_RCC_DeInit>
	HAL_DeInit();
 8000a42:	f000 ff3d 	bl	80018c0 <HAL_DeInit>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a46:	b672      	cpsid	i
}
 8000a48:	bf00      	nop
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f383 8808 	msr	MSP, r3
}
 8000a54:	bf00      	nop
	__disable_irq();
	__set_MSP(msp_value);
	SCB->VTOR = app_start_address;
 8000a56:	4a08      	ldr	r2, [pc, #32]	@ (8000a78 <jump_to_updated_application+0x58>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6093      	str	r3, [r2, #8]

	SysTick->CTRL = 0;
 8000a5c:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <jump_to_updated_application+0x5c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <jump_to_updated_application+0x5c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000a68:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <jump_to_updated_application+0x5c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
	NVIC_SystemReset();
 8000a6e:	f7ff ff31 	bl	80008d4 <__NVIC_SystemReset>
 8000a72:	bf00      	nop
 8000a74:	08004c1c 	.word	0x08004c1c
 8000a78:	e000ed00 	.word	0xe000ed00
 8000a7c:	e000e010 	.word	0xe000e010

08000a80 <bootloader_handle_read_sector_status>:
	app_reset_handler();

}

void bootloader_handle_read_sector_status(uint8_t *bl_rx_buffer)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	uint16_t status;
	printf("BL_DEBUG_MSG:bootloader_handle_read_sector_protection_status\n");
 8000a88:	481c      	ldr	r0, [pc, #112]	@ (8000afc <bootloader_handle_read_sector_status+0x7c>)
 8000a8a:	f003 fa1f 	bl	8003ecc <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3b04      	subs	r3, #4
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	3b04      	subs	r3, #4
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f000 fb20 	bl	80010f0 <bootloader_verify_crc>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d118      	bne.n	8000ae8 <bootloader_handle_read_sector_status+0x68>
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
 8000ab6:	4812      	ldr	r0, [pc, #72]	@ (8000b00 <bootloader_handle_read_sector_status+0x80>)
 8000ab8:	f003 fa08 	bl	8003ecc <puts>
		bootloader_send_ack(bl_rx_buffer[0],2);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2102      	movs	r1, #2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fae8 	bl	8001098 <bootloader_send_ack>
		status=read_OB_rw_protection_status();
 8000ac8:	f000 fcd0 	bl	800146c <read_OB_rw_protection_status>
 8000acc:	4603      	mov	r3, r0
 8000ace:	81fb      	strh	r3, [r7, #14]
		printf("BL_DEBUG_MSG: nWRP status: %#x\n",status);
 8000ad0:	89fb      	ldrh	r3, [r7, #14]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480b      	ldr	r0, [pc, #44]	@ (8000b04 <bootloader_handle_read_sector_status+0x84>)
 8000ad6:	f003 f991 	bl	8003dfc <iprintf>
		bootloader_uart_write_data((uint8_t*)&status,2);
 8000ada:	f107 030e 	add.w	r3, r7, #14
 8000ade:	2102      	movs	r1, #2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 fb39 	bl	8001158 <bootloader_uart_write_data>
	else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000ae6:	e004      	b.n	8000af2 <bootloader_handle_read_sector_status+0x72>
		printf("BL_DEBUG_MSG:checksum fail !!\n");
 8000ae8:	4807      	ldr	r0, [pc, #28]	@ (8000b08 <bootloader_handle_read_sector_status+0x88>)
 8000aea:	f003 f9ef 	bl	8003ecc <puts>
		bootloader_send_nack();
 8000aee:	f000 faed 	bl	80010cc <bootloader_send_nack>
}
 8000af2:	bf00      	nop
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	08004c40 	.word	0x08004c40
 8000b00:	08004c80 	.word	0x08004c80
 8000b04:	08004ca4 	.word	0x08004ca4
 8000b08:	08004cc4 	.word	0x08004cc4

08000b0c <bootloader_handle_read_otp>:

void bootloader_handle_read_otp(uint8_t *bl_rx_buffer)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <bootloader_handle_mem_read>:

void bootloader_handle_mem_read(uint8_t *bl_rx_buffer)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]


}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <bootloader_handle_endis_rw_protect>:
        bootloader_send_nack();
	}
}

void bootloader_handle_endis_rw_protect(uint8_t *bl_rx_buffer)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x00;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73fb      	strb	r3, [r7, #15]
	printf("BL_DEBUG_MSG:bootloader_handle_endis_rw_protect\n");
 8000b40:	4820      	ldr	r0, [pc, #128]	@ (8000bc4 <bootloader_handle_endis_rw_protect+0x90>)
 8000b42:	f003 f9c3 	bl	8003ecc <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3b04      	subs	r3, #4
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3b04      	subs	r3, #4
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4619      	mov	r1, r3
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 fac4 	bl	80010f0 <bootloader_verify_crc>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d120      	bne.n	8000bb0 <bootloader_handle_endis_rw_protect+0x7c>
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
 8000b6e:	4816      	ldr	r0, [pc, #88]	@ (8000bc8 <bootloader_handle_endis_rw_protect+0x94>)
 8000b70:	f003 f9ac 	bl	8003ecc <puts>
		bootloader_send_ack(bl_rx_buffer[0],1);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2101      	movs	r1, #1
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 fa8c 	bl	8001098 <bootloader_send_ack>
		status = configure_flash_sector_rw_protection(bl_rx_buffer[2] , bl_rx_buffer[3],0);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3302      	adds	r3, #2
 8000b84:	7818      	ldrb	r0, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	3303      	adds	r3, #3
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f000 fbd6 	bl	8001340 <configure_flash_sector_rw_protection>
 8000b94:	4603      	mov	r3, r0
 8000b96:	73fb      	strb	r3, [r7, #15]
		printf("BL_DEBUG_MSG: flash erase status: %#x\n",status);
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480b      	ldr	r0, [pc, #44]	@ (8000bcc <bootloader_handle_endis_rw_protect+0x98>)
 8000b9e:	f003 f92d 	bl	8003dfc <iprintf>
		bootloader_uart_write_data(&status,1);
 8000ba2:	f107 030f 	add.w	r3, r7, #15
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 fad5 	bl	8001158 <bootloader_uart_write_data>
	}else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000bae:	e004      	b.n	8000bba <bootloader_handle_endis_rw_protect+0x86>
		printf("BL_DEBUG_MSG:checksum fail !!\n");
 8000bb0:	4807      	ldr	r0, [pc, #28]	@ (8000bd0 <bootloader_handle_endis_rw_protect+0x9c>)
 8000bb2:	f003 f98b 	bl	8003ecc <puts>
		bootloader_send_nack();
 8000bb6:	f000 fa89 	bl	80010cc <bootloader_send_nack>
}
 8000bba:	bf00      	nop
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	08004d3c 	.word	0x08004d3c
 8000bc8:	08004c80 	.word	0x08004c80
 8000bcc:	08004d14 	.word	0x08004d14
 8000bd0:	08004cc4 	.word	0x08004cc4

08000bd4 <bootloader_handle_mem_write_cmd>:

void bootloader_handle_mem_write_cmd(uint8_t *bl_rx_buffer)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	uint8_t write_status = 0x00;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]
	uint8_t chksum =0, len=0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	77fb      	strb	r3, [r7, #31]
 8000be4:	2300      	movs	r3, #0
 8000be6:	77bb      	strb	r3, [r7, #30]
	len = bl_rx_buffer[0];
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	77bb      	strb	r3, [r7, #30]
	uint8_t payload_len = bl_rx_buffer[6];
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	799b      	ldrb	r3, [r3, #6]
 8000bf2:	777b      	strb	r3, [r7, #29]
	uint32_t mem_address = *((uint32_t *) ( &bl_rx_buffer[2]) );
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000bfa:	61bb      	str	r3, [r7, #24]
	chksum = bl_rx_buffer[len];
 8000bfc:	7fbb      	ldrb	r3, [r7, #30]
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	77fb      	strb	r3, [r7, #31]
	printf("BL_DEBUG_MSG:bootloader_handle_mem_write_cmd\n");
 8000c06:	482e      	ldr	r0, [pc, #184]	@ (8000cc0 <bootloader_handle_mem_write_cmd+0xec>)
 8000c08:	f003 f960 	bl	8003ecc <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	3b04      	subs	r3, #4
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	613b      	str	r3, [r7, #16]


	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	3b04      	subs	r3, #4
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4619      	mov	r1, r3
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f000 fa61 	bl	80010f0 <bootloader_verify_crc>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d13b      	bne.n	8000cac <bootloader_handle_mem_write_cmd+0xd8>
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
 8000c34:	4823      	ldr	r0, [pc, #140]	@ (8000cc4 <bootloader_handle_mem_write_cmd+0xf0>)
 8000c36:	f003 f949 	bl	8003ecc <puts>

		bootloader_send_ack(bl_rx_buffer[0],1);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2101      	movs	r1, #1
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 fa29 	bl	8001098 <bootloader_send_ack>

		printf("BL_DEBUG_MSG: mem write address : %#x\n",mem_address);
 8000c46:	69b9      	ldr	r1, [r7, #24]
 8000c48:	481f      	ldr	r0, [pc, #124]	@ (8000cc8 <bootloader_handle_mem_write_cmd+0xf4>)
 8000c4a:	f003 f8d7 	bl	8003dfc <iprintf>

		if( verify_address(mem_address) == ADDR_VALID )
 8000c4e:	69b8      	ldr	r0, [r7, #24]
 8000c50:	f000 fac4 	bl	80011dc <verify_address>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d11c      	bne.n	8000c94 <bootloader_handle_mem_write_cmd+0xc0>
		{
			printf("BL_DEBUG_MSG: valid mem write address\n");
 8000c5a:	481c      	ldr	r0, [pc, #112]	@ (8000ccc <bootloader_handle_mem_write_cmd+0xf8>)
 8000c5c:	f003 f936 	bl	8003ecc <puts>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2120      	movs	r1, #32
 8000c64:	481a      	ldr	r0, [pc, #104]	@ (8000cd0 <bootloader_handle_mem_write_cmd+0xfc>)
 8000c66:	f001 fcf1 	bl	800264c <HAL_GPIO_WritePin>
			write_status = execute_mem_write(&bl_rx_buffer[7],mem_address, payload_len);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3307      	adds	r3, #7
 8000c6e:	7f7a      	ldrb	r2, [r7, #29]
 8000c70:	69b9      	ldr	r1, [r7, #24]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 fb37 	bl	80012e6 <execute_mem_write>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2120      	movs	r1, #32
 8000c80:	4813      	ldr	r0, [pc, #76]	@ (8000cd0 <bootloader_handle_mem_write_cmd+0xfc>)
 8000c82:	f001 fce3 	bl	800264c <HAL_GPIO_WritePin>
			bootloader_uart_write_data(&write_status,1);
 8000c86:	f107 030f 	add.w	r3, r7, #15
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 fa63 	bl	8001158 <bootloader_uart_write_data>
	else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000c92:	e010      	b.n	8000cb6 <bootloader_handle_mem_write_cmd+0xe2>
			printf("BL_DEBUG_MSG: invalid mem write address\n");
 8000c94:	480f      	ldr	r0, [pc, #60]	@ (8000cd4 <bootloader_handle_mem_write_cmd+0x100>)
 8000c96:	f003 f919 	bl	8003ecc <puts>
			write_status = ADDR_INVALID;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	73fb      	strb	r3, [r7, #15]
			bootloader_uart_write_data(&write_status,1);
 8000c9e:	f107 030f 	add.w	r3, r7, #15
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 fa57 	bl	8001158 <bootloader_uart_write_data>
}
 8000caa:	e004      	b.n	8000cb6 <bootloader_handle_mem_write_cmd+0xe2>
		printf("BL_DEBUG_MSG:checksum fail !!\n");
 8000cac:	480a      	ldr	r0, [pc, #40]	@ (8000cd8 <bootloader_handle_mem_write_cmd+0x104>)
 8000cae:	f003 f90d 	bl	8003ecc <puts>
		bootloader_send_nack();
 8000cb2:	f000 fa0b 	bl	80010cc <bootloader_send_nack>
}
 8000cb6:	bf00      	nop
 8000cb8:	3720      	adds	r7, #32
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	08004d6c 	.word	0x08004d6c
 8000cc4:	08004c80 	.word	0x08004c80
 8000cc8:	08004d9c 	.word	0x08004d9c
 8000ccc:	08004dc4 	.word	0x08004dc4
 8000cd0:	40020000 	.word	0x40020000
 8000cd4:	08004dec 	.word	0x08004dec
 8000cd8:	08004cc4 	.word	0x08004cc4

08000cdc <bootloader_handle_flash_erase_cmd>:

void bootloader_handle_flash_erase_cmd(uint8_t *bl_rx_buffer)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	uint8_t erase_status = 0x00;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]
	printf("BL_DEBUG_MSG:bootloader_handle_flash_erase_cmd\n");
 8000ce8:	482a      	ldr	r0, [pc, #168]	@ (8000d94 <bootloader_handle_flash_erase_cmd+0xb8>)
 8000cea:	f003 f8ef 	bl	8003ecc <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	3b04      	subs	r3, #4
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3b04      	subs	r3, #4
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f000 f9f0 	bl	80010f0 <bootloader_verify_crc>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d135      	bne.n	8000d82 <bootloader_handle_flash_erase_cmd+0xa6>
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
 8000d16:	4820      	ldr	r0, [pc, #128]	@ (8000d98 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000d18:	f003 f8d8 	bl	8003ecc <puts>
		bootloader_send_ack(bl_rx_buffer[0],1);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2101      	movs	r1, #1
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f9b8 	bl	8001098 <bootloader_send_ack>
		printf("BL_DEBUG_MSG:initial_sector : %d  no_ofsectors: %d\n",bl_rx_buffer[2],bl_rx_buffer[3]);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3302      	adds	r3, #2
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3303      	adds	r3, #3
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	4818      	ldr	r0, [pc, #96]	@ (8000d9c <bootloader_handle_flash_erase_cmd+0xc0>)
 8000d3a:	f003 f85f 	bl	8003dfc <iprintf>

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,1);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2120      	movs	r1, #32
 8000d42:	4817      	ldr	r0, [pc, #92]	@ (8000da0 <bootloader_handle_flash_erase_cmd+0xc4>)
 8000d44:	f001 fc82 	bl	800264c <HAL_GPIO_WritePin>
		erase_status = execute_flash_erase(bl_rx_buffer[2] , bl_rx_buffer[3]);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	781a      	ldrb	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3303      	adds	r3, #3
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4619      	mov	r1, r3
 8000d56:	4610      	mov	r0, r2
 8000d58:	f000 fa7e 	bl	8001258 <execute_flash_erase>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2120      	movs	r1, #32
 8000d64:	480e      	ldr	r0, [pc, #56]	@ (8000da0 <bootloader_handle_flash_erase_cmd+0xc4>)
 8000d66:	f001 fc71 	bl	800264c <HAL_GPIO_WritePin>

		printf("BL_DEBUG_MSG: flash erase status: %#x\n",erase_status);
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480d      	ldr	r0, [pc, #52]	@ (8000da4 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000d70:	f003 f844 	bl	8003dfc <iprintf>

		bootloader_uart_write_data(&erase_status,1);
 8000d74:	f107 030f 	add.w	r3, r7, #15
 8000d78:	2101      	movs	r1, #1
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f9ec 	bl	8001158 <bootloader_uart_write_data>
	}else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000d80:	e004      	b.n	8000d8c <bootloader_handle_flash_erase_cmd+0xb0>
		printf("BL_DEBUG_MSG:checksum fail !!\n");
 8000d82:	4809      	ldr	r0, [pc, #36]	@ (8000da8 <bootloader_handle_flash_erase_cmd+0xcc>)
 8000d84:	f003 f8a2 	bl	8003ecc <puts>
		bootloader_send_nack();
 8000d88:	f000 f9a0 	bl	80010cc <bootloader_send_nack>
}
 8000d8c:	bf00      	nop
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	08004e14 	.word	0x08004e14
 8000d98:	08004c80 	.word	0x08004c80
 8000d9c:	08004e44 	.word	0x08004e44
 8000da0:	40020000 	.word	0x40020000
 8000da4:	08004d14 	.word	0x08004d14
 8000da8:	08004cc4 	.word	0x08004cc4

08000dac <bootloader_handle_go_cmd>:

void bootloader_handle_go_cmd(uint8_t *bl_rx_buffer)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	uint32_t go_address=0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
	uint8_t addr_valid = ADDR_VALID;
 8000db8:	2300      	movs	r3, #0
 8000dba:	72fb      	strb	r3, [r7, #11]
	uint8_t addr_invalid = ADDR_INVALID;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	72bb      	strb	r3, [r7, #10]

	printf("BL_DEBUG_MSG:bootloader_handle_go_cmd\n");
 8000dc0:	4825      	ldr	r0, [pc, #148]	@ (8000e58 <bootloader_handle_go_cmd+0xac>)
 8000dc2:	f003 f883 	bl	8003ecc <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	613b      	str	r3, [r7, #16]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	3b04      	subs	r3, #4
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	60fb      	str	r3, [r7, #12]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	3b04      	subs	r3, #4
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	4619      	mov	r1, r3
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f000 f984 	bl	80010f0 <bootloader_verify_crc>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d12a      	bne.n	8000e44 <bootloader_handle_go_cmd+0x98>
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
 8000dee:	481b      	ldr	r0, [pc, #108]	@ (8000e5c <bootloader_handle_go_cmd+0xb0>)
 8000df0:	f003 f86c 	bl	8003ecc <puts>

		bootloader_send_ack(bl_rx_buffer[0],1);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2101      	movs	r1, #1
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f94c 	bl	8001098 <bootloader_send_ack>

		//extract the go address
		go_address = *((uint32_t *)&bl_rx_buffer[2] );
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000e06:	617b      	str	r3, [r7, #20]
		printf("BL_DEBUG_MSG:GO addr: %#x\n",go_address);
 8000e08:	6979      	ldr	r1, [r7, #20]
 8000e0a:	4815      	ldr	r0, [pc, #84]	@ (8000e60 <bootloader_handle_go_cmd+0xb4>)
 8000e0c:	f002 fff6 	bl	8003dfc <iprintf>

		if( verify_address(go_address) == ADDR_VALID )
 8000e10:	6978      	ldr	r0, [r7, #20]
 8000e12:	f000 f9e3 	bl	80011dc <verify_address>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d109      	bne.n	8000e30 <bootloader_handle_go_cmd+0x84>
		{
			bootloader_uart_write_data(&addr_valid,1);
 8000e1c:	f107 030b 	add.w	r3, r7, #11
 8000e20:	2101      	movs	r1, #1
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f998 	bl	8001158 <bootloader_uart_write_data>
            jump_to_updated_application(go_address);
 8000e28:	6978      	ldr	r0, [r7, #20]
 8000e2a:	f7ff fdf9 	bl	8000a20 <jump_to_updated_application>
	}else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000e2e:	e00e      	b.n	8000e4e <bootloader_handle_go_cmd+0xa2>
			printf("BL_DEBUG_MSG:GO addr invalid ! \n");
 8000e30:	480c      	ldr	r0, [pc, #48]	@ (8000e64 <bootloader_handle_go_cmd+0xb8>)
 8000e32:	f003 f84b 	bl	8003ecc <puts>
			bootloader_uart_write_data(&addr_invalid,1);
 8000e36:	f107 030a 	add.w	r3, r7, #10
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f98b 	bl	8001158 <bootloader_uart_write_data>
}
 8000e42:	e004      	b.n	8000e4e <bootloader_handle_go_cmd+0xa2>
		printf("BL_DEBUG_MSG:checksum fail !!\n");
 8000e44:	4808      	ldr	r0, [pc, #32]	@ (8000e68 <bootloader_handle_go_cmd+0xbc>)
 8000e46:	f003 f841 	bl	8003ecc <puts>
		bootloader_send_nack();
 8000e4a:	f000 f93f 	bl	80010cc <bootloader_send_nack>
}
 8000e4e:	bf00      	nop
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	08004e78 	.word	0x08004e78
 8000e5c:	08004c80 	.word	0x08004c80
 8000e60:	08004ea0 	.word	0x08004ea0
 8000e64:	08004ebc 	.word	0x08004ebc
 8000e68:	08004cc4 	.word	0x08004cc4

08000e6c <bootloader_handle_getrdp_cmd>:

void bootloader_handle_getrdp_cmd(uint8_t *bl_rx_buffer)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	uint8_t rdp_level = 0x00;
 8000e74:	2300      	movs	r3, #0
 8000e76:	73fb      	strb	r3, [r7, #15]
	printf("BL_DEBUG_MSG:bootloader_handle_getrdp_cmd\n");
 8000e78:	481d      	ldr	r0, [pc, #116]	@ (8000ef0 <bootloader_handle_getrdp_cmd+0x84>)
 8000e7a:	f003 f827 	bl	8003ecc <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	3301      	adds	r3, #1
 8000e84:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	3b04      	subs	r3, #4
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	3b04      	subs	r3, #4
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 f928 	bl	80010f0 <bootloader_verify_crc>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d11a      	bne.n	8000edc <bootloader_handle_getrdp_cmd+0x70>
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
 8000ea6:	4813      	ldr	r0, [pc, #76]	@ (8000ef4 <bootloader_handle_getrdp_cmd+0x88>)
 8000ea8:	f003 f810 	bl	8003ecc <puts>
		bootloader_send_ack(bl_rx_buffer[0],1);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f8f0 	bl	8001098 <bootloader_send_ack>
		rdp_level = get_flash_rdp_level();
 8000eb8:	f000 f97c 	bl	80011b4 <get_flash_rdp_level>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	73fb      	strb	r3, [r7, #15]
		printf("BL_DEBUG_MSG:RDP level: %d %#x\n",rdp_level,rdp_level);
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	480b      	ldr	r0, [pc, #44]	@ (8000ef8 <bootloader_handle_getrdp_cmd+0x8c>)
 8000eca:	f002 ff97 	bl	8003dfc <iprintf>
		bootloader_uart_write_data(&rdp_level,1);
 8000ece:	f107 030f 	add.w	r3, r7, #15
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 f93f 	bl	8001158 <bootloader_uart_write_data>
	}else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000eda:	e004      	b.n	8000ee6 <bootloader_handle_getrdp_cmd+0x7a>
		printf("BL_DEBUG_MSG:checksum fail !!\n");
 8000edc:	4807      	ldr	r0, [pc, #28]	@ (8000efc <bootloader_handle_getrdp_cmd+0x90>)
 8000ede:	f002 fff5 	bl	8003ecc <puts>
		bootloader_send_nack();
 8000ee2:	f000 f8f3 	bl	80010cc <bootloader_send_nack>
}
 8000ee6:	bf00      	nop
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	08004edc 	.word	0x08004edc
 8000ef4:	08004c80 	.word	0x08004c80
 8000ef8:	08004f08 	.word	0x08004f08
 8000efc:	08004cc4 	.word	0x08004cc4

08000f00 <bootloader_handle_getcid_cmd>:

void bootloader_handle_getcid_cmd(uint8_t *bl_rx_buffer)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	uint16_t bl_cid_num = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	81fb      	strh	r3, [r7, #14]
	printf("BL_DEBUG_MSG:bootloader_handle_getcid_cmd\n");
 8000f0c:	481d      	ldr	r0, [pc, #116]	@ (8000f84 <bootloader_handle_getcid_cmd+0x84>)
 8000f0e:	f002 ffdd 	bl	8003ecc <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	3b04      	subs	r3, #4
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	3b04      	subs	r3, #4
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 f8de 	bl	80010f0 <bootloader_verify_crc>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d11a      	bne.n	8000f70 <bootloader_handle_getcid_cmd+0x70>
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
 8000f3a:	4813      	ldr	r0, [pc, #76]	@ (8000f88 <bootloader_handle_getcid_cmd+0x88>)
 8000f3c:	f002 ffc6 	bl	8003ecc <puts>
		bootloader_send_ack(bl_rx_buffer[0],2);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2102      	movs	r1, #2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f8a6 	bl	8001098 <bootloader_send_ack>
		bl_cid_num = get_mcu_chip_id();
 8000f4c:	f000 f920 	bl	8001190 <get_mcu_chip_id>
 8000f50:	4603      	mov	r3, r0
 8000f52:	81fb      	strh	r3, [r7, #14]
		printf("BL_DEBUG_MSG:MCU id : %d %#x !!\n",bl_cid_num, bl_cid_num);
 8000f54:	89fb      	ldrh	r3, [r7, #14]
 8000f56:	4619      	mov	r1, r3
 8000f58:	89fb      	ldrh	r3, [r7, #14]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	480b      	ldr	r0, [pc, #44]	@ (8000f8c <bootloader_handle_getcid_cmd+0x8c>)
 8000f5e:	f002 ff4d 	bl	8003dfc <iprintf>
		bootloader_uart_write_data((uint8_t *)&bl_cid_num,2);
 8000f62:	f107 030e 	add.w	r3, r7, #14
 8000f66:	2102      	movs	r1, #2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 f8f5 	bl	8001158 <bootloader_uart_write_data>
	}else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000f6e:	e004      	b.n	8000f7a <bootloader_handle_getcid_cmd+0x7a>
		printf("BL_DEBUG_MSG:checksum fail !!\n");
 8000f70:	4807      	ldr	r0, [pc, #28]	@ (8000f90 <bootloader_handle_getcid_cmd+0x90>)
 8000f72:	f002 ffab 	bl	8003ecc <puts>
		bootloader_send_nack();
 8000f76:	f000 f8a9 	bl	80010cc <bootloader_send_nack>
}
 8000f7a:	bf00      	nop
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	08004f28 	.word	0x08004f28
 8000f88:	08004c80 	.word	0x08004c80
 8000f8c:	08004f54 	.word	0x08004f54
 8000f90:	08004cc4 	.word	0x08004cc4

08000f94 <bootloader_handle_gethelp_cmd>:

void bootloader_handle_gethelp_cmd(uint8_t *bl_rx_buffer)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	printf("BL_DEBUG_MSG:bootloader_handle_gethelp_cmd\n");
 8000f9c:	4816      	ldr	r0, [pc, #88]	@ (8000ff8 <bootloader_handle_gethelp_cmd+0x64>)
 8000f9e:	f002 ff95 	bl	8003ecc <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3b04      	subs	r3, #4
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	60bb      	str	r3, [r7, #8]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	3b04      	subs	r3, #4
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 f896 	bl	80010f0 <bootloader_verify_crc>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10d      	bne.n	8000fe6 <bootloader_handle_gethelp_cmd+0x52>
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
 8000fca:	480c      	ldr	r0, [pc, #48]	@ (8000ffc <bootloader_handle_gethelp_cmd+0x68>)
 8000fcc:	f002 ff7e 	bl	8003ecc <puts>
		bootloader_send_ack(bl_rx_buffer[0],sizeof(supported_commands));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2108      	movs	r1, #8
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 f85e 	bl	8001098 <bootloader_send_ack>
		bootloader_uart_write_data(supported_commands,sizeof(supported_commands) );
 8000fdc:	2108      	movs	r1, #8
 8000fde:	4808      	ldr	r0, [pc, #32]	@ (8001000 <bootloader_handle_gethelp_cmd+0x6c>)
 8000fe0:	f000 f8ba 	bl	8001158 <bootloader_uart_write_data>
	}else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000fe4:	e004      	b.n	8000ff0 <bootloader_handle_gethelp_cmd+0x5c>
		printf("BL_DEBUG_MSG:checksum fail !!\n");
 8000fe6:	4807      	ldr	r0, [pc, #28]	@ (8001004 <bootloader_handle_gethelp_cmd+0x70>)
 8000fe8:	f002 ff70 	bl	8003ecc <puts>
		bootloader_send_nack();
 8000fec:	f000 f86e 	bl	80010cc <bootloader_send_nack>
}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	08004f78 	.word	0x08004f78
 8000ffc:	08004c80 	.word	0x08004c80
 8001000:	20000000 	.word	0x20000000
 8001004:	08004cc4 	.word	0x08004cc4

08001008 <bootloader_handle_getver_cmd>:

void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	uint8_t bl_version;
	printf("bootloader handle get version command\n");
 8001010:	481d      	ldr	r0, [pc, #116]	@ (8001088 <bootloader_handle_getver_cmd+0x80>)
 8001012:	f002 ff5b 	bl	8003ecc <puts>
	uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t *) (bl_rx_buffer + command_packet_len - 4));
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	3b04      	subs	r3, #4
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	613b      	str	r3, [r7, #16]
	if (! bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len-4, host_crc))
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3b04      	subs	r3, #4
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4619      	mov	r1, r3
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 f85c 	bl	80010f0 <bootloader_verify_crc>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d11a      	bne.n	8001074 <bootloader_handle_getver_cmd+0x6c>
	{
		printf("checksum success !!\n");
 800103e:	4813      	ldr	r0, [pc, #76]	@ (800108c <bootloader_handle_getver_cmd+0x84>)
 8001040:	f002 ff44 	bl	8003ecc <puts>
		bootloader_send_ack(bl_rx_buffer[0], 1);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2101      	movs	r1, #1
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f824 	bl	8001098 <bootloader_send_ack>
		bl_version = get_bootloader_version();
 8001050:	f000 f896 	bl	8001180 <get_bootloader_version>
 8001054:	4603      	mov	r3, r0
 8001056:	73fb      	strb	r3, [r7, #15]
		printf("BL VERSION: %d %#x\n", bl_version, bl_version);
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	4619      	mov	r1, r3
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	461a      	mov	r2, r3
 8001060:	480b      	ldr	r0, [pc, #44]	@ (8001090 <bootloader_handle_getver_cmd+0x88>)
 8001062:	f002 fecb 	bl	8003dfc <iprintf>
		bootloader_uart_write_data(&bl_version, 1);
 8001066:	f107 030f 	add.w	r3, r7, #15
 800106a:	2101      	movs	r1, #1
 800106c:	4618      	mov	r0, r3
 800106e:	f000 f873 	bl	8001158 <bootloader_uart_write_data>
	else
	{
		printf("checksum failed !!\n");
		bootloader_send_nack();
	}
}
 8001072:	e004      	b.n	800107e <bootloader_handle_getver_cmd+0x76>
		printf("checksum failed !!\n");
 8001074:	4807      	ldr	r0, [pc, #28]	@ (8001094 <bootloader_handle_getver_cmd+0x8c>)
 8001076:	f002 ff29 	bl	8003ecc <puts>
		bootloader_send_nack();
 800107a:	f000 f827 	bl	80010cc <bootloader_send_nack>
}
 800107e:	bf00      	nop
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	08004fa4 	.word	0x08004fa4
 800108c:	08004fcc 	.word	0x08004fcc
 8001090:	08004fe0 	.word	0x08004fe0
 8001094:	08004ff4 	.word	0x08004ff4

08001098 <bootloader_send_ack>:

void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	460a      	mov	r2, r1
 80010a2:	71fb      	strb	r3, [r7, #7]
 80010a4:	4613      	mov	r3, r2
 80010a6:	71bb      	strb	r3, [r7, #6]
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 80010a8:	23a5      	movs	r3, #165	@ 0xa5
 80010aa:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 80010ac:	79bb      	ldrb	r3, [r7, #6]
 80010ae:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&huart3, ack_buf, 2, HAL_MAX_DELAY);
 80010b0:	f107 010c 	add.w	r1, r7, #12
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
 80010b8:	2202      	movs	r2, #2
 80010ba:	4803      	ldr	r0, [pc, #12]	@ (80010c8 <bootloader_send_ack+0x30>)
 80010bc:	f002 f98a 	bl	80033d4 <HAL_UART_Transmit>
}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200000dc 	.word	0x200000dc

080010cc <bootloader_send_nack>:

void bootloader_send_nack(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 80010d2:	237f      	movs	r3, #127	@ 0x7f
 80010d4:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3, &nack, 1, HAL_MAX_DELAY);
 80010d6:	1df9      	adds	r1, r7, #7
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	2201      	movs	r2, #1
 80010de:	4803      	ldr	r0, [pc, #12]	@ (80010ec <bootloader_send_nack+0x20>)
 80010e0:	f002 f978 	bl	80033d4 <HAL_UART_Transmit>
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200000dc 	.word	0x200000dc

080010f0 <bootloader_verify_crc>:

uint8_t bootloader_verify_crc(uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
	uint32_t uwCRCValue = 0xff;
 80010fc:	23ff      	movs	r3, #255	@ 0xff
 80010fe:	61fb      	str	r3, [r7, #28]
	__HAL_CRC_DR_RESET(&hcrc);
 8001100:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <bootloader_verify_crc+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <bootloader_verify_crc+0x64>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f042 0201 	orr.w	r2, r2, #1
 800110e:	609a      	str	r2, [r3, #8]
	for (uint32_t i = 0; i < len; i++)
 8001110:	2300      	movs	r3, #0
 8001112:	61bb      	str	r3, [r7, #24]
 8001114:	e00f      	b.n	8001136 <bootloader_verify_crc+0x46>
	{
		uint32_t i_data = pData[i];
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	4413      	add	r3, r2
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	617b      	str	r3, [r7, #20]
		uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	2201      	movs	r2, #1
 8001126:	4619      	mov	r1, r3
 8001128:	480a      	ldr	r0, [pc, #40]	@ (8001154 <bootloader_verify_crc+0x64>)
 800112a:	f000 fd50 	bl	8001bce <HAL_CRC_Accumulate>
 800112e:	61f8      	str	r0, [r7, #28]
	for (uint32_t i = 0; i < len; i++)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	3301      	adds	r3, #1
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	429a      	cmp	r2, r3
 800113c:	d3eb      	bcc.n	8001116 <bootloader_verify_crc+0x26>
	}
	if(uwCRCValue == crc_host)
 800113e:	69fa      	ldr	r2, [r7, #28]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	429a      	cmp	r2, r3
 8001144:	d101      	bne.n	800114a <bootloader_verify_crc+0x5a>
	{
		return VERIFY_CRC_SUCCESS;
 8001146:	2300      	movs	r3, #0
 8001148:	e000      	b.n	800114c <bootloader_verify_crc+0x5c>
	}
	return VERIFY_CRC_FAIL;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000008c 	.word	0x2000008c

08001158 <bootloader_uart_write_data>:

void bootloader_uart_write_data(uint8_t *pBuffer, uint32_t len)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, pBuffer, len, HAL_MAX_DELAY);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	b29a      	uxth	r2, r3
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	4803      	ldr	r0, [pc, #12]	@ (800117c <bootloader_uart_write_data+0x24>)
 800116e:	f002 f931 	bl	80033d4 <HAL_UART_Transmit>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200000dc 	.word	0x200000dc

08001180 <get_bootloader_version>:

uint8_t get_bootloader_version(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
	return (uint8_t)BL_VERSION;
 8001184:	2310      	movs	r3, #16
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <get_mcu_chip_id>:


uint16_t get_mcu_chip_id(void)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
	uint16_t cid;
	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <get_mcu_chip_id+0x20>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	b29b      	uxth	r3, r3
 800119c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a0:	80fb      	strh	r3, [r7, #6]
	return  cid;
 80011a2:	88fb      	ldrh	r3, [r7, #6]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e0042000 	.word	0xe0042000

080011b4 <get_flash_rdp_level>:

uint8_t get_flash_rdp_level(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0

	uint8_t rdp_status=0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	71fb      	strb	r3, [r7, #7]
	FLASH_OBProgramInitTypeDef  ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
	rdp_status = (uint8_t)ob_handle.RDPLevel;
#else

	 volatile uint32_t *pOB_addr = (uint32_t*) 0x1FFFC000;
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <get_flash_rdp_level+0x24>)
 80011c0:	603b      	str	r3, [r7, #0]
	 rdp_status =  (uint8_t)(*pOB_addr >> 8) ;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	0a1b      	lsrs	r3, r3, #8
 80011c8:	71fb      	strb	r3, [r7, #7]
#endif

	return rdp_status;
 80011ca:	79fb      	ldrb	r3, [r7, #7]

}
 80011cc:	4618      	mov	r0, r3
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	1fffc000 	.word	0x1fffc000

080011dc <verify_address>:

uint8_t verify_address(uint32_t go_address)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011ea:	d305      	bcc.n	80011f8 <verify_address+0x1c>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a15      	ldr	r2, [pc, #84]	@ (8001244 <verify_address+0x68>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d801      	bhi.n	80011f8 <verify_address+0x1c>
	{
		return ADDR_VALID;
 80011f4:	2300      	movs	r3, #0
 80011f6:	e01e      	b.n	8001236 <verify_address+0x5a>
	}
	else if ( go_address >= SRAM2_BASE && go_address <= SRAM2_END)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a12      	ldr	r2, [pc, #72]	@ (8001244 <verify_address+0x68>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d305      	bcc.n	800120c <verify_address+0x30>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a11      	ldr	r2, [pc, #68]	@ (8001248 <verify_address+0x6c>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d801      	bhi.n	800120c <verify_address+0x30>
	{
		return ADDR_VALID;
 8001208:	2300      	movs	r3, #0
 800120a:	e014      	b.n	8001236 <verify_address+0x5a>
	}
	else if ( go_address >= FLASH_BASE && go_address <= FLASH_END)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001212:	d305      	bcc.n	8001220 <verify_address+0x44>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a0d      	ldr	r2, [pc, #52]	@ (800124c <verify_address+0x70>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d801      	bhi.n	8001220 <verify_address+0x44>
	{
		return ADDR_VALID;
 800121c:	2300      	movs	r3, #0
 800121e:	e00a      	b.n	8001236 <verify_address+0x5a>
	}
	else if ( go_address >= BKPSRAM_BASE && go_address <= BKPSRAM_END)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a0b      	ldr	r2, [pc, #44]	@ (8001250 <verify_address+0x74>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d305      	bcc.n	8001234 <verify_address+0x58>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a0a      	ldr	r2, [pc, #40]	@ (8001254 <verify_address+0x78>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d801      	bhi.n	8001234 <verify_address+0x58>
	{
		return ADDR_VALID;
 8001230:	2300      	movs	r3, #0
 8001232:	e000      	b.n	8001236 <verify_address+0x5a>
	}
	else
		return ADDR_INVALID;
 8001234:	2301      	movs	r3, #1
}
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	2001c000 	.word	0x2001c000
 8001248:	20020000 	.word	0x20020000
 800124c:	0807ffff 	.word	0x0807ffff
 8001250:	40024000 	.word	0x40024000
 8001254:	40025000 	.word	0x40025000

08001258 <execute_flash_erase>:

 uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	@ 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	460a      	mov	r2, r1
 8001262:	71fb      	strb	r3, [r7, #7]
 8001264:	4613      	mov	r3, r2
 8001266:	71bb      	strb	r3, [r7, #6]
	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;


	if( number_of_sector > 8 )
 8001268:	79bb      	ldrb	r3, [r7, #6]
 800126a:	2b08      	cmp	r3, #8
 800126c:	d901      	bls.n	8001272 <execute_flash_erase+0x1a>
		return INVALID_SECTOR;
 800126e:	2304      	movs	r3, #4
 8001270:	e035      	b.n	80012de <execute_flash_erase+0x86>

	if( (sector_number == 0xff ) || (sector_number <= 7) )
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2bff      	cmp	r3, #255	@ 0xff
 8001276:	d002      	beq.n	800127e <execute_flash_erase+0x26>
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	2b07      	cmp	r3, #7
 800127c:	d82e      	bhi.n	80012dc <execute_flash_erase+0x84>
	{
		if(sector_number == (uint8_t) 0xff)
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2bff      	cmp	r3, #255	@ 0xff
 8001282:	d102      	bne.n	800128a <execute_flash_erase+0x32>
		{
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8001284:	2301      	movs	r3, #1
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	e012      	b.n	80012b0 <execute_flash_erase+0x58>
		}else
		{
			uint8_t remanining_sector = 8 - sector_number;
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	f1c3 0308 	rsb	r3, r3, #8
 8001290:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( number_of_sector > remanining_sector)
 8001294:	79ba      	ldrb	r2, [r7, #6]
 8001296:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800129a:	429a      	cmp	r2, r3
 800129c:	d902      	bls.n	80012a4 <execute_flash_erase+0x4c>
            {
            	number_of_sector = remanining_sector;
 800129e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012a2:	71bb      	strb	r3, [r7, #6]
            }
			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
			flashErase_handle.Sector = sector_number;
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	61bb      	str	r3, [r7, #24]
			flashErase_handle.NbSectors = number_of_sector;
 80012ac:	79bb      	ldrb	r3, [r7, #6]
 80012ae:	61fb      	str	r3, [r7, #28]
		}
		flashErase_handle.Banks = FLASH_BANK_1;
 80012b0:	2301      	movs	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
		HAL_FLASH_Unlock();
 80012b4:	f000 fd08 	bl	8001cc8 <HAL_FLASH_Unlock>
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80012b8:	2302      	movs	r3, #2
 80012ba:	623b      	str	r3, [r7, #32]
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 80012bc:	f107 020c 	add.w	r2, r7, #12
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 fe9c 	bl	8002004 <HAL_FLASHEx_Erase>
 80012cc:	4603      	mov	r3, r0
 80012ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		HAL_FLASH_Lock();
 80012d2:	f000 fd1b 	bl	8001d0c <HAL_FLASH_Lock>

		return status;
 80012d6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80012da:	e000      	b.n	80012de <execute_flash_erase+0x86>
	}
	return INVALID_SECTOR;
 80012dc:	2304      	movs	r3, #4
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3728      	adds	r7, #40	@ 0x28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <execute_mem_write>:

uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 80012e6:	b5b0      	push	{r4, r5, r7, lr}
 80012e8:	b086      	sub	sp, #24
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	60f8      	str	r0, [r7, #12]
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
    uint8_t status=HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	75fb      	strb	r3, [r7, #23]
    HAL_FLASH_Unlock();
 80012f6:	f000 fce7 	bl	8001cc8 <HAL_FLASH_Unlock>

    for(uint32_t i = 0 ; i <len ; i++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	e014      	b.n	800132a <execute_mem_write+0x44>
    {
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,mem_address+i,pBuffer[i] );
 8001300:	68ba      	ldr	r2, [r7, #8]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	18d1      	adds	r1, r2, r3
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4413      	add	r3, r2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2200      	movs	r2, #0
 8001312:	461c      	mov	r4, r3
 8001314:	4615      	mov	r5, r2
 8001316:	4622      	mov	r2, r4
 8001318:	462b      	mov	r3, r5
 800131a:	2000      	movs	r0, #0
 800131c:	f000 fc82 	bl	8001c24 <HAL_FLASH_Program>
 8001320:	4603      	mov	r3, r0
 8001322:	75fb      	strb	r3, [r7, #23]
    for(uint32_t i = 0 ; i <len ; i++)
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	3301      	adds	r3, #1
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	429a      	cmp	r2, r3
 8001330:	d3e6      	bcc.n	8001300 <execute_mem_write+0x1a>
    }

    HAL_FLASH_Lock();
 8001332:	f000 fceb 	bl	8001d0c <HAL_FLASH_Lock>
    return status;
 8001336:	7dfb      	ldrb	r3, [r7, #23]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bdb0      	pop	{r4, r5, r7, pc}

08001340 <configure_flash_sector_rw_protection>:

uint8_t configure_flash_sector_rw_protection(uint8_t sector_details, uint8_t protection_mode, uint8_t disable)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
 800134a:	460b      	mov	r3, r1
 800134c:	71bb      	strb	r3, [r7, #6]
 800134e:	4613      	mov	r3, r2
 8001350:	717b      	strb	r3, [r7, #5]
    volatile uint32_t *pOPTCR = (uint32_t*) 0x40023C14;
 8001352:	4b44      	ldr	r3, [pc, #272]	@ (8001464 <configure_flash_sector_rw_protection+0x124>)
 8001354:	60fb      	str	r3, [r7, #12]

	if(disable)
 8001356:	797b      	ldrb	r3, [r7, #5]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d025      	beq.n	80013a8 <configure_flash_sector_rw_protection+0x68>
	{
		HAL_FLASH_OB_Unlock();
 800135c:	f000 fce6 	bl	8001d2c <HAL_FLASH_OB_Unlock>
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001360:	bf00      	nop
 8001362:	4b41      	ldr	r3, [pc, #260]	@ (8001468 <configure_flash_sector_rw_protection+0x128>)
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f9      	bne.n	8001362 <configure_flash_sector_rw_protection+0x22>
		*pOPTCR &= ~(1 << 31);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	601a      	str	r2, [r3, #0]
		*pOPTCR |= (0xFF << 16);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	601a      	str	r2, [r3, #0]
		*pOPTCR |= ( 1 << 1);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f043 0202 	orr.w	r2, r3, #2
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	601a      	str	r2, [r3, #0]
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001392:	bf00      	nop
 8001394:	4b34      	ldr	r3, [pc, #208]	@ (8001468 <configure_flash_sector_rw_protection+0x128>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f9      	bne.n	8001394 <configure_flash_sector_rw_protection+0x54>

		HAL_FLASH_OB_Lock();
 80013a0:	f000 fce0 	bl	8001d64 <HAL_FLASH_OB_Lock>

		return 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	e058      	b.n	800145a <configure_flash_sector_rw_protection+0x11a>

	}

	if(protection_mode == (uint8_t) 1)
 80013a8:	79bb      	ldrb	r3, [r7, #6]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d126      	bne.n	80013fc <configure_flash_sector_rw_protection+0xbc>
    {
		HAL_FLASH_OB_Unlock();
 80013ae:	f000 fcbd 	bl	8001d2c <HAL_FLASH_OB_Unlock>
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80013b2:	bf00      	nop
 80013b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001468 <configure_flash_sector_rw_protection+0x128>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1f9      	bne.n	80013b4 <configure_flash_sector_rw_protection+0x74>
		*pOPTCR &= ~(1 << 31);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	601a      	str	r2, [r3, #0]

		//put write protection on sectors
		*pOPTCR &= ~ (sector_details << 16);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	79fa      	ldrb	r2, [r7, #7]
 80013d2:	0412      	lsls	r2, r2, #16
 80013d4:	43d2      	mvns	r2, r2
 80013d6:	401a      	ands	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	601a      	str	r2, [r3, #0]

		//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
		*pOPTCR |= ( 1 << 1);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f043 0202 	orr.w	r2, r3, #2
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	601a      	str	r2, [r3, #0]

		//wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80013e8:	bf00      	nop
 80013ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001468 <configure_flash_sector_rw_protection+0x128>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f9      	bne.n	80013ea <configure_flash_sector_rw_protection+0xaa>

		HAL_FLASH_OB_Lock();
 80013f6:	f000 fcb5 	bl	8001d64 <HAL_FLASH_OB_Lock>
 80013fa:	e02d      	b.n	8001458 <configure_flash_sector_rw_protection+0x118>
	}

	else if (protection_mode == (uint8_t) 2)
 80013fc:	79bb      	ldrb	r3, [r7, #6]
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d12a      	bne.n	8001458 <configure_flash_sector_rw_protection+0x118>
    {

		HAL_FLASH_OB_Unlock();
 8001402:	f000 fc93 	bl	8001d2c <HAL_FLASH_OB_Unlock>

		//wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001406:	bf00      	nop
 8001408:	4b17      	ldr	r3, [pc, #92]	@ (8001468 <configure_flash_sector_rw_protection+0x128>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1f9      	bne.n	8001408 <configure_flash_sector_rw_protection+0xc8>

		//here wer are setting read and write protection for the sectors
		//set the 31st bit
		//please refer : Flash option control register (FLASH_OPTCR) in RM
		*pOPTCR |= (1 << 31);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	601a      	str	r2, [r3, #0]

		//put read and write protection on sectors
		*pOPTCR &= ~(0xff << 16);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	601a      	str	r2, [r3, #0]
		*pOPTCR |= (sector_details << 16);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	041b      	lsls	r3, r3, #16
 8001434:	431a      	orrs	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	601a      	str	r2, [r3, #0]

		//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
		*pOPTCR |= ( 1 << 1);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f043 0202 	orr.w	r2, r3, #2
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	601a      	str	r2, [r3, #0]

		//wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001446:	bf00      	nop
 8001448:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <configure_flash_sector_rw_protection+0x128>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1f9      	bne.n	8001448 <configure_flash_sector_rw_protection+0x108>

		HAL_FLASH_OB_Lock();
 8001454:	f000 fc86 	bl	8001d64 <HAL_FLASH_OB_Lock>
    }

		return 0;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40023c14 	.word	0x40023c14
 8001468:	40023c00 	.word	0x40023c00

0800146c <read_OB_rw_protection_status>:

uint16_t read_OB_rw_protection_status(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef OBInit;
	HAL_FLASH_OB_Unlock();
 8001472:	f000 fc5b 	bl	8001d2c <HAL_FLASH_OB_Unlock>
	HAL_FLASHEx_OBGetConfig(&OBInit);
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	4618      	mov	r0, r3
 800147a:	f000 fe31 	bl	80020e0 <HAL_FLASHEx_OBGetConfig>
	HAL_FLASH_Lock();
 800147e:	f000 fc45 	bl	8001d0c <HAL_FLASH_Lock>
	return (uint16_t)OBInit.WRPSector;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	b29b      	uxth	r3, r3

}
 8001486:	4618      	mov	r0, r3
 8001488:	3720      	adds	r7, #32
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <HAL_MspInit+0x4c>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149e:	4a0f      	ldr	r2, [pc, #60]	@ (80014dc <HAL_MspInit+0x4c>)
 80014a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014a6:	4b0d      	ldr	r3, [pc, #52]	@ (80014dc <HAL_MspInit+0x4c>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <HAL_MspInit+0x4c>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	4a08      	ldr	r2, [pc, #32]	@ (80014dc <HAL_MspInit+0x4c>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014c2:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <HAL_MspInit+0x4c>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800

080014e0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a0b      	ldr	r2, [pc, #44]	@ (800151c <HAL_CRC_MspInit+0x3c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d10d      	bne.n	800150e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <HAL_CRC_MspInit+0x40>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	4a09      	ldr	r2, [pc, #36]	@ (8001520 <HAL_CRC_MspInit+0x40>)
 80014fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001500:	6313      	str	r3, [r2, #48]	@ 0x30
 8001502:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <HAL_CRC_MspInit+0x40>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40023000 	.word	0x40023000
 8001520:	40023800 	.word	0x40023800

08001524 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08c      	sub	sp, #48	@ 0x30
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a41      	ldr	r2, [pc, #260]	@ (8001648 <HAL_UART_MspInit+0x124>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d12c      	bne.n	80015a0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	61bb      	str	r3, [r7, #24]
 800154a:	4b40      	ldr	r3, [pc, #256]	@ (800164c <HAL_UART_MspInit+0x128>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	4a3f      	ldr	r2, [pc, #252]	@ (800164c <HAL_UART_MspInit+0x128>)
 8001550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001554:	6413      	str	r3, [r2, #64]	@ 0x40
 8001556:	4b3d      	ldr	r3, [pc, #244]	@ (800164c <HAL_UART_MspInit+0x128>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155e:	61bb      	str	r3, [r7, #24]
 8001560:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	4b39      	ldr	r3, [pc, #228]	@ (800164c <HAL_UART_MspInit+0x128>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a38      	ldr	r2, [pc, #224]	@ (800164c <HAL_UART_MspInit+0x128>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b36      	ldr	r3, [pc, #216]	@ (800164c <HAL_UART_MspInit+0x128>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800157e:	230c      	movs	r3, #12
 8001580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800158e:	2307      	movs	r3, #7
 8001590:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	4619      	mov	r1, r3
 8001598:	482d      	ldr	r0, [pc, #180]	@ (8001650 <HAL_UART_MspInit+0x12c>)
 800159a:	f000 fec3 	bl	8002324 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800159e:	e04f      	b.n	8001640 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a2b      	ldr	r2, [pc, #172]	@ (8001654 <HAL_UART_MspInit+0x130>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d14a      	bne.n	8001640 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	4b27      	ldr	r3, [pc, #156]	@ (800164c <HAL_UART_MspInit+0x128>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	4a26      	ldr	r2, [pc, #152]	@ (800164c <HAL_UART_MspInit+0x128>)
 80015b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ba:	4b24      	ldr	r3, [pc, #144]	@ (800164c <HAL_UART_MspInit+0x128>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b20      	ldr	r3, [pc, #128]	@ (800164c <HAL_UART_MspInit+0x128>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	4a1f      	ldr	r2, [pc, #124]	@ (800164c <HAL_UART_MspInit+0x128>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d6:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <HAL_UART_MspInit+0x128>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	4b19      	ldr	r3, [pc, #100]	@ (800164c <HAL_UART_MspInit+0x128>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	4a18      	ldr	r2, [pc, #96]	@ (800164c <HAL_UART_MspInit+0x128>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f2:	4b16      	ldr	r3, [pc, #88]	@ (800164c <HAL_UART_MspInit+0x128>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015fe:	2320      	movs	r3, #32
 8001600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800160e:	2307      	movs	r3, #7
 8001610:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	4619      	mov	r1, r3
 8001618:	480f      	ldr	r0, [pc, #60]	@ (8001658 <HAL_UART_MspInit+0x134>)
 800161a:	f000 fe83 	bl	8002324 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800161e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162c:	2303      	movs	r3, #3
 800162e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001630:	2307      	movs	r3, #7
 8001632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001634:	f107 031c 	add.w	r3, r7, #28
 8001638:	4619      	mov	r1, r3
 800163a:	4808      	ldr	r0, [pc, #32]	@ (800165c <HAL_UART_MspInit+0x138>)
 800163c:	f000 fe72 	bl	8002324 <HAL_GPIO_Init>
}
 8001640:	bf00      	nop
 8001642:	3730      	adds	r7, #48	@ 0x30
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40004400 	.word	0x40004400
 800164c:	40023800 	.word	0x40023800
 8001650:	40020000 	.word	0x40020000
 8001654:	40004800 	.word	0x40004800
 8001658:	40020800 	.word	0x40020800
 800165c:	40020400 	.word	0x40020400

08001660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <NMI_Handler+0x4>

08001668 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <HardFault_Handler+0x4>

08001670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <MemManage_Handler+0x4>

08001678 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <BusFault_Handler+0x4>

08001680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <UsageFault_Handler+0x4>

08001688 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b6:	f000 f969 	bl	800198c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}

080016be <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b086      	sub	sp, #24
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	60f8      	str	r0, [r7, #12]
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	e00a      	b.n	80016e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016d0:	f3af 8000 	nop.w
 80016d4:	4601      	mov	r1, r0
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	60ba      	str	r2, [r7, #8]
 80016dc:	b2ca      	uxtb	r2, r1
 80016de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	3301      	adds	r3, #1
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	dbf0      	blt.n	80016d0 <_read+0x12>
  }

  return len;
 80016ee:	687b      	ldr	r3, [r7, #4]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	e009      	b.n	800171e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	1c5a      	adds	r2, r3, #1
 800170e:	60ba      	str	r2, [r7, #8]
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe ff72 	bl	80005fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	3301      	adds	r3, #1
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	429a      	cmp	r2, r3
 8001724:	dbf1      	blt.n	800170a <_write+0x12>
  }
  return len;
 8001726:	687b      	ldr	r3, [r7, #4]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <_close>:

int _close(int file)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001738:	f04f 33ff 	mov.w	r3, #4294967295
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001758:	605a      	str	r2, [r3, #4]
  return 0;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <_isatty>:

int _isatty(int file)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001770:	2301      	movs	r3, #1
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800177e:	b480      	push	{r7}
 8001780:	b085      	sub	sp, #20
 8001782:	af00      	add	r7, sp, #0
 8001784:	60f8      	str	r0, [r7, #12]
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a0:	4a14      	ldr	r2, [pc, #80]	@ (80017f4 <_sbrk+0x5c>)
 80017a2:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <_sbrk+0x60>)
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ac:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <_sbrk+0x64>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d102      	bne.n	80017ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b4:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <_sbrk+0x64>)
 80017b6:	4a12      	ldr	r2, [pc, #72]	@ (8001800 <_sbrk+0x68>)
 80017b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ba:	4b10      	ldr	r3, [pc, #64]	@ (80017fc <_sbrk+0x64>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d207      	bcs.n	80017d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c8:	f002 fcae 	bl	8004128 <__errno>
 80017cc:	4603      	mov	r3, r0
 80017ce:	220c      	movs	r2, #12
 80017d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295
 80017d6:	e009      	b.n	80017ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d8:	4b08      	ldr	r3, [pc, #32]	@ (80017fc <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017de:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <_sbrk+0x64>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	4a05      	ldr	r2, [pc, #20]	@ (80017fc <_sbrk+0x64>)
 80017e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ea:	68fb      	ldr	r3, [r7, #12]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20020000 	.word	0x20020000
 80017f8:	00000400 	.word	0x00000400
 80017fc:	200001ec 	.word	0x200001ec
 8001800:	20000360 	.word	0x20000360

08001804 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001808:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <SystemInit+0x20>)
 800180a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800180e:	4a05      	ldr	r2, [pc, #20]	@ (8001824 <SystemInit+0x20>)
 8001810:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001814:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001828:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001860 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800182c:	f7ff ffea 	bl	8001804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001830:	480c      	ldr	r0, [pc, #48]	@ (8001864 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001832:	490d      	ldr	r1, [pc, #52]	@ (8001868 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001834:	4a0d      	ldr	r2, [pc, #52]	@ (800186c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001838:	e002      	b.n	8001840 <LoopCopyDataInit>

0800183a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800183c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183e:	3304      	adds	r3, #4

08001840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001844:	d3f9      	bcc.n	800183a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001846:	4a0a      	ldr	r2, [pc, #40]	@ (8001870 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001848:	4c0a      	ldr	r4, [pc, #40]	@ (8001874 <LoopFillZerobss+0x22>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800184c:	e001      	b.n	8001852 <LoopFillZerobss>

0800184e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001850:	3204      	adds	r2, #4

08001852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001854:	d3fb      	bcc.n	800184e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001856:	f002 fc6d 	bl	8004134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800185a:	f7fe fee1 	bl	8000620 <main>
  bx  lr    
 800185e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001860:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001868:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800186c:	08005064 	.word	0x08005064
  ldr r2, =_sbss
 8001870:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001874:	20000360 	.word	0x20000360

08001878 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001878:	e7fe      	b.n	8001878 <ADC_IRQHandler>
	...

0800187c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001880:	4b0e      	ldr	r3, [pc, #56]	@ (80018bc <HAL_Init+0x40>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0d      	ldr	r2, [pc, #52]	@ (80018bc <HAL_Init+0x40>)
 8001886:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800188a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800188c:	4b0b      	ldr	r3, [pc, #44]	@ (80018bc <HAL_Init+0x40>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0a      	ldr	r2, [pc, #40]	@ (80018bc <HAL_Init+0x40>)
 8001892:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001896:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001898:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a07      	ldr	r2, [pc, #28]	@ (80018bc <HAL_Init+0x40>)
 800189e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a4:	2003      	movs	r0, #3
 80018a6:	f000 f943 	bl	8001b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018aa:	200f      	movs	r0, #15
 80018ac:	f000 f83e 	bl	800192c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b0:	f7ff fdee 	bl	8001490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40023c00 	.word	0x40023c00

080018c0 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80018c4:	4b11      	ldr	r3, [pc, #68]	@ (800190c <HAL_DeInit+0x4c>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	@ (8001910 <HAL_DeInit+0x50>)
 80018c8:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80018ca:	4b10      	ldr	r3, [pc, #64]	@ (800190c <HAL_DeInit+0x4c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80018d0:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <HAL_DeInit+0x4c>)
 80018d2:	4a10      	ldr	r2, [pc, #64]	@ (8001914 <HAL_DeInit+0x54>)
 80018d4:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80018d6:	4b0d      	ldr	r3, [pc, #52]	@ (800190c <HAL_DeInit+0x4c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80018dc:	4b0b      	ldr	r3, [pc, #44]	@ (800190c <HAL_DeInit+0x4c>)
 80018de:	4a0e      	ldr	r2, [pc, #56]	@ (8001918 <HAL_DeInit+0x58>)
 80018e0:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80018e2:	4b0a      	ldr	r3, [pc, #40]	@ (800190c <HAL_DeInit+0x4c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80018e8:	4b08      	ldr	r3, [pc, #32]	@ (800190c <HAL_DeInit+0x4c>)
 80018ea:	2281      	movs	r2, #129	@ 0x81
 80018ec:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80018ee:	4b07      	ldr	r3, [pc, #28]	@ (800190c <HAL_DeInit+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80018f4:	4b05      	ldr	r3, [pc, #20]	@ (800190c <HAL_DeInit+0x4c>)
 80018f6:	2203      	movs	r2, #3
 80018f8:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80018fa:	4b04      	ldr	r3, [pc, #16]	@ (800190c <HAL_DeInit+0x4c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001900:	f000 f80c 	bl	800191c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	3fffc9ff 	.word	0x3fffc9ff
 8001914:	00c77933 	.word	0x00c77933
 8001918:	206010ff 	.word	0x206010ff

0800191c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001934:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <HAL_InitTick+0x54>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <HAL_InitTick+0x58>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001942:	fbb3 f3f1 	udiv	r3, r3, r1
 8001946:	fbb2 f3f3 	udiv	r3, r2, r3
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f917 	bl	8001b7e <HAL_SYSTICK_Config>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e00e      	b.n	8001978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b0f      	cmp	r3, #15
 800195e:	d80a      	bhi.n	8001976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001960:	2200      	movs	r2, #0
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f000 f8ed 	bl	8001b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800196c:	4a06      	ldr	r2, [pc, #24]	@ (8001988 <HAL_InitTick+0x5c>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e000      	b.n	8001978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000008 	.word	0x20000008
 8001984:	20000010 	.word	0x20000010
 8001988:	2000000c 	.word	0x2000000c

0800198c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001990:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_IncTick+0x20>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <HAL_IncTick+0x24>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4413      	add	r3, r2
 800199c:	4a04      	ldr	r2, [pc, #16]	@ (80019b0 <HAL_IncTick+0x24>)
 800199e:	6013      	str	r3, [r2, #0]
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000010 	.word	0x20000010
 80019b0:	200001f0 	.word	0x200001f0

080019b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return uwTick;
 80019b8:	4b03      	ldr	r3, [pc, #12]	@ (80019c8 <HAL_GetTick+0x14>)
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	200001f0 	.word	0x200001f0

080019cc <__NVIC_SetPriorityGrouping>:
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019e8:	4013      	ands	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fe:	4a04      	ldr	r2, [pc, #16]	@ (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	60d3      	str	r3, [r2, #12]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_GetPriorityGrouping>:
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a18:	4b04      	ldr	r3, [pc, #16]	@ (8001a2c <__NVIC_GetPriorityGrouping+0x18>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	f003 0307 	and.w	r3, r3, #7
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_SetPriority>:
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	db0a      	blt.n	8001a5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	490c      	ldr	r1, [pc, #48]	@ (8001a7c <__NVIC_SetPriority+0x4c>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	0112      	lsls	r2, r2, #4
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	440b      	add	r3, r1
 8001a54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001a58:	e00a      	b.n	8001a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4908      	ldr	r1, [pc, #32]	@ (8001a80 <__NVIC_SetPriority+0x50>)
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	3b04      	subs	r3, #4
 8001a68:	0112      	lsls	r2, r2, #4
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	761a      	strb	r2, [r3, #24]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000e100 	.word	0xe000e100
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <NVIC_EncodePriority>:
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	@ 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f1c3 0307 	rsb	r3, r3, #7
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	bf28      	it	cs
 8001aa2:	2304      	movcs	r3, #4
 8001aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d902      	bls.n	8001ab4 <NVIC_EncodePriority+0x30>
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3b03      	subs	r3, #3
 8001ab2:	e000      	b.n	8001ab6 <NVIC_EncodePriority+0x32>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	43d9      	mvns	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	4313      	orrs	r3, r2
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3724      	adds	r7, #36	@ 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001afc:	d301      	bcc.n	8001b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afe:	2301      	movs	r3, #1
 8001b00:	e00f      	b.n	8001b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b02:	4a0a      	ldr	r2, [pc, #40]	@ (8001b2c <SysTick_Config+0x40>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0a:	210f      	movs	r1, #15
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b10:	f7ff ff8e 	bl	8001a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b14:	4b05      	ldr	r3, [pc, #20]	@ (8001b2c <SysTick_Config+0x40>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1a:	4b04      	ldr	r3, [pc, #16]	@ (8001b2c <SysTick_Config+0x40>)
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	e000e010 	.word	0xe000e010

08001b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff47 	bl	80019cc <__NVIC_SetPriorityGrouping>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b58:	f7ff ff5c 	bl	8001a14 <__NVIC_GetPriorityGrouping>
 8001b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	6978      	ldr	r0, [r7, #20]
 8001b64:	f7ff ff8e 	bl	8001a84 <NVIC_EncodePriority>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff5d 	bl	8001a30 <__NVIC_SetPriority>
}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ffb0 	bl	8001aec <SysTick_Config>
 8001b8c:	4603      	mov	r3, r0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e00e      	b.n	8001bc6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	795b      	ldrb	r3, [r3, #5]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d105      	bne.n	8001bbe <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff fc91 	bl	80014e0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b087      	sub	sp, #28
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2202      	movs	r2, #2
 8001be2:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	e00a      	b.n	8001c00 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	441a      	add	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d3f0      	bcc.n	8001bea <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2201      	movs	r2, #1
 8001c14:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001c16:	693b      	ldr	r3, [r7, #16]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	371c      	adds	r7, #28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001c32:	4b23      	ldr	r3, [pc, #140]	@ (8001cc0 <HAL_FLASH_Program+0x9c>)
 8001c34:	7e1b      	ldrb	r3, [r3, #24]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_FLASH_Program+0x1a>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e03b      	b.n	8001cb6 <HAL_FLASH_Program+0x92>
 8001c3e:	4b20      	ldr	r3, [pc, #128]	@ (8001cc0 <HAL_FLASH_Program+0x9c>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c44:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001c48:	f000 f89c 	bl	8001d84 <FLASH_WaitForLastOperation>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001c50:	7dfb      	ldrb	r3, [r7, #23]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d12b      	bne.n	8001cae <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d105      	bne.n	8001c68 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001c5c:	783b      	ldrb	r3, [r7, #0]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	68b8      	ldr	r0, [r7, #8]
 8001c62:	f000 f947 	bl	8001ef4 <FLASH_Program_Byte>
 8001c66:	e016      	b.n	8001c96 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d105      	bne.n	8001c7a <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001c6e:	883b      	ldrh	r3, [r7, #0]
 8001c70:	4619      	mov	r1, r3
 8001c72:	68b8      	ldr	r0, [r7, #8]
 8001c74:	f000 f91a 	bl	8001eac <FLASH_Program_HalfWord>
 8001c78:	e00d      	b.n	8001c96 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d105      	bne.n	8001c8c <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	4619      	mov	r1, r3
 8001c84:	68b8      	ldr	r0, [r7, #8]
 8001c86:	f000 f8ef 	bl	8001e68 <FLASH_Program_Word>
 8001c8a:	e004      	b.n	8001c96 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001c8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c90:	68b8      	ldr	r0, [r7, #8]
 8001c92:	f000 f8b7 	bl	8001e04 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c96:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001c9a:	f000 f873 	bl	8001d84 <FLASH_WaitForLastOperation>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001ca2:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <HAL_FLASH_Program+0xa0>)
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	4a07      	ldr	r2, [pc, #28]	@ (8001cc4 <HAL_FLASH_Program+0xa0>)
 8001ca8:	f023 0301 	bic.w	r3, r3, #1
 8001cac:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001cae:	4b04      	ldr	r3, [pc, #16]	@ (8001cc0 <HAL_FLASH_Program+0x9c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	761a      	strb	r2, [r3, #24]

  return status;
 8001cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200001f4 	.word	0x200001f4
 8001cc4:	40023c00 	.word	0x40023c00

08001cc8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <HAL_FLASH_Unlock+0x38>)
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	da0b      	bge.n	8001cf2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001cda:	4b09      	ldr	r3, [pc, #36]	@ (8001d00 <HAL_FLASH_Unlock+0x38>)
 8001cdc:	4a09      	ldr	r2, [pc, #36]	@ (8001d04 <HAL_FLASH_Unlock+0x3c>)
 8001cde:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ce0:	4b07      	ldr	r3, [pc, #28]	@ (8001d00 <HAL_FLASH_Unlock+0x38>)
 8001ce2:	4a09      	ldr	r2, [pc, #36]	@ (8001d08 <HAL_FLASH_Unlock+0x40>)
 8001ce4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001ce6:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <HAL_FLASH_Unlock+0x38>)
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	da01      	bge.n	8001cf2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	40023c00 	.word	0x40023c00
 8001d04:	45670123 	.word	0x45670123
 8001d08:	cdef89ab 	.word	0xcdef89ab

08001d0c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001d10:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <HAL_FLASH_Lock+0x1c>)
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	4a04      	ldr	r2, [pc, #16]	@ (8001d28 <HAL_FLASH_Lock+0x1c>)
 8001d16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001d1a:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	40023c00 	.word	0x40023c00

08001d2c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001d30:	4b09      	ldr	r3, [pc, #36]	@ (8001d58 <HAL_FLASH_OB_Unlock+0x2c>)
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d007      	beq.n	8001d4c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <HAL_FLASH_OB_Unlock+0x2c>)
 8001d3e:	4a07      	ldr	r2, [pc, #28]	@ (8001d5c <HAL_FLASH_OB_Unlock+0x30>)
 8001d40:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001d42:	4b05      	ldr	r3, [pc, #20]	@ (8001d58 <HAL_FLASH_OB_Unlock+0x2c>)
 8001d44:	4a06      	ldr	r2, [pc, #24]	@ (8001d60 <HAL_FLASH_OB_Unlock+0x34>)
 8001d46:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	e000      	b.n	8001d4e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	40023c00 	.word	0x40023c00
 8001d5c:	08192a3b 	.word	0x08192a3b
 8001d60:	4c5d6e7f 	.word	0x4c5d6e7f

08001d64 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001d68:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <HAL_FLASH_OB_Lock+0x1c>)
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	4a04      	ldr	r2, [pc, #16]	@ (8001d80 <HAL_FLASH_OB_Lock+0x1c>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	40023c00 	.word	0x40023c00

08001d84 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001d90:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <FLASH_WaitForLastOperation+0x78>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d96:	f7ff fe0d 	bl	80019b4 <HAL_GetTick>
 8001d9a:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001d9c:	e010      	b.n	8001dc0 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d00c      	beq.n	8001dc0 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d007      	beq.n	8001dbc <FLASH_WaitForLastOperation+0x38>
 8001dac:	f7ff fe02 	bl	80019b4 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d201      	bcs.n	8001dc0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e019      	b.n	8001df4 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e00 <FLASH_WaitForLastOperation+0x7c>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1e8      	bne.n	8001d9e <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e00 <FLASH_WaitForLastOperation+0x7c>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001dd8:	4b09      	ldr	r3, [pc, #36]	@ (8001e00 <FLASH_WaitForLastOperation+0x7c>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001dde:	4b08      	ldr	r3, [pc, #32]	@ (8001e00 <FLASH_WaitForLastOperation+0x7c>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001dea:	f000 f8a5 	bl	8001f38 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0

}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	200001f4 	.word	0x200001f4
 8001e00:	40023c00 	.word	0x40023c00

08001e04 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e10:	4b14      	ldr	r3, [pc, #80]	@ (8001e64 <FLASH_Program_DoubleWord+0x60>)
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	4a13      	ldr	r2, [pc, #76]	@ (8001e64 <FLASH_Program_DoubleWord+0x60>)
 8001e16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001e1c:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <FLASH_Program_DoubleWord+0x60>)
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	4a10      	ldr	r2, [pc, #64]	@ (8001e64 <FLASH_Program_DoubleWord+0x60>)
 8001e22:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001e26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e28:	4b0e      	ldr	r3, [pc, #56]	@ (8001e64 <FLASH_Program_DoubleWord+0x60>)
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e64 <FLASH_Program_DoubleWord+0x60>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001e3a:	f3bf 8f6f 	isb	sy
}
 8001e3e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8001e40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	000a      	movs	r2, r1
 8001e4e:	2300      	movs	r3, #0
 8001e50:	68f9      	ldr	r1, [r7, #12]
 8001e52:	3104      	adds	r1, #4
 8001e54:	4613      	mov	r3, r2
 8001e56:	600b      	str	r3, [r1, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	40023c00 	.word	0x40023c00

08001e68 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <FLASH_Program_Word+0x40>)
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea8 <FLASH_Program_Word+0x40>)
 8001e78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e7c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <FLASH_Program_Word+0x40>)
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	4a09      	ldr	r2, [pc, #36]	@ (8001ea8 <FLASH_Program_Word+0x40>)
 8001e84:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e88:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ea8 <FLASH_Program_Word+0x40>)
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	4a06      	ldr	r2, [pc, #24]	@ (8001ea8 <FLASH_Program_Word+0x40>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	601a      	str	r2, [r3, #0]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	40023c00 	.word	0x40023c00

08001eac <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef0 <FLASH_Program_HalfWord+0x44>)
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8001ef0 <FLASH_Program_HalfWord+0x44>)
 8001ebe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ec2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef0 <FLASH_Program_HalfWord+0x44>)
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	4a09      	ldr	r2, [pc, #36]	@ (8001ef0 <FLASH_Program_HalfWord+0x44>)
 8001eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ece:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ed0:	4b07      	ldr	r3, [pc, #28]	@ (8001ef0 <FLASH_Program_HalfWord+0x44>)
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	4a06      	ldr	r2, [pc, #24]	@ (8001ef0 <FLASH_Program_HalfWord+0x44>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	887a      	ldrh	r2, [r7, #2]
 8001ee0:	801a      	strh	r2, [r3, #0]
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40023c00 	.word	0x40023c00

08001ef4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f00:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <FLASH_Program_Byte+0x40>)
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	4a0b      	ldr	r2, [pc, #44]	@ (8001f34 <FLASH_Program_Byte+0x40>)
 8001f06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001f0c:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <FLASH_Program_Byte+0x40>)
 8001f0e:	4a09      	ldr	r2, [pc, #36]	@ (8001f34 <FLASH_Program_Byte+0x40>)
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f14:	4b07      	ldr	r3, [pc, #28]	@ (8001f34 <FLASH_Program_Byte+0x40>)
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	4a06      	ldr	r2, [pc, #24]	@ (8001f34 <FLASH_Program_Byte+0x40>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	78fa      	ldrb	r2, [r7, #3]
 8001f24:	701a      	strb	r2, [r3, #0]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40023c00 	.word	0x40023c00

08001f38 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001f3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001ffc <FLASH_SetErrorCode+0xc4>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0310 	and.w	r3, r3, #16
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001f48:	4b2d      	ldr	r3, [pc, #180]	@ (8002000 <FLASH_SetErrorCode+0xc8>)
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	f043 0310 	orr.w	r3, r3, #16
 8001f50:	4a2b      	ldr	r2, [pc, #172]	@ (8002000 <FLASH_SetErrorCode+0xc8>)
 8001f52:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001f54:	4b29      	ldr	r3, [pc, #164]	@ (8001ffc <FLASH_SetErrorCode+0xc4>)
 8001f56:	2210      	movs	r2, #16
 8001f58:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001f5a:	4b28      	ldr	r3, [pc, #160]	@ (8001ffc <FLASH_SetErrorCode+0xc4>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f003 0320 	and.w	r3, r3, #32
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001f66:	4b26      	ldr	r3, [pc, #152]	@ (8002000 <FLASH_SetErrorCode+0xc8>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f043 0308 	orr.w	r3, r3, #8
 8001f6e:	4a24      	ldr	r2, [pc, #144]	@ (8002000 <FLASH_SetErrorCode+0xc8>)
 8001f70:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001f72:	4b22      	ldr	r3, [pc, #136]	@ (8001ffc <FLASH_SetErrorCode+0xc4>)
 8001f74:	2220      	movs	r2, #32
 8001f76:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001f78:	4b20      	ldr	r3, [pc, #128]	@ (8001ffc <FLASH_SetErrorCode+0xc4>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001f84:	4b1e      	ldr	r3, [pc, #120]	@ (8002000 <FLASH_SetErrorCode+0xc8>)
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	f043 0304 	orr.w	r3, r3, #4
 8001f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8002000 <FLASH_SetErrorCode+0xc8>)
 8001f8e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001f90:	4b1a      	ldr	r3, [pc, #104]	@ (8001ffc <FLASH_SetErrorCode+0xc4>)
 8001f92:	2240      	movs	r2, #64	@ 0x40
 8001f94:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001f96:	4b19      	ldr	r3, [pc, #100]	@ (8001ffc <FLASH_SetErrorCode+0xc4>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d008      	beq.n	8001fb4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001fa2:	4b17      	ldr	r3, [pc, #92]	@ (8002000 <FLASH_SetErrorCode+0xc8>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f043 0302 	orr.w	r3, r3, #2
 8001faa:	4a15      	ldr	r2, [pc, #84]	@ (8002000 <FLASH_SetErrorCode+0xc8>)
 8001fac:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001fae:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <FLASH_SetErrorCode+0xc4>)
 8001fb0:	2280      	movs	r2, #128	@ 0x80
 8001fb2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001fb4:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <FLASH_SetErrorCode+0xc4>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d009      	beq.n	8001fd4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002000 <FLASH_SetErrorCode+0xc8>)
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002000 <FLASH_SetErrorCode+0xc8>)
 8001fca:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <FLASH_SetErrorCode+0xc4>)
 8001fce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fd2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001fd4:	4b09      	ldr	r3, [pc, #36]	@ (8001ffc <FLASH_SetErrorCode+0xc4>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001fe0:	4b07      	ldr	r3, [pc, #28]	@ (8002000 <FLASH_SetErrorCode+0xc8>)
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	f043 0320 	orr.w	r3, r3, #32
 8001fe8:	4a05      	ldr	r2, [pc, #20]	@ (8002000 <FLASH_SetErrorCode+0xc8>)
 8001fea:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001fec:	4b03      	ldr	r3, [pc, #12]	@ (8001ffc <FLASH_SetErrorCode+0xc4>)
 8001fee:	2202      	movs	r2, #2
 8001ff0:	60da      	str	r2, [r3, #12]
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	40023c00 	.word	0x40023c00
 8002000:	200001f4 	.word	0x200001f4

08002004 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002012:	4b31      	ldr	r3, [pc, #196]	@ (80020d8 <HAL_FLASHEx_Erase+0xd4>)
 8002014:	7e1b      	ldrb	r3, [r3, #24]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_FLASHEx_Erase+0x1a>
 800201a:	2302      	movs	r3, #2
 800201c:	e058      	b.n	80020d0 <HAL_FLASHEx_Erase+0xcc>
 800201e:	4b2e      	ldr	r3, [pc, #184]	@ (80020d8 <HAL_FLASHEx_Erase+0xd4>)
 8002020:	2201      	movs	r2, #1
 8002022:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002024:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002028:	f7ff feac 	bl	8001d84 <FLASH_WaitForLastOperation>
 800202c:	4603      	mov	r3, r0
 800202e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d148      	bne.n	80020c8 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	f04f 32ff 	mov.w	r2, #4294967295
 800203c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d115      	bne.n	8002072 <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	b2da      	uxtb	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4619      	mov	r1, r3
 8002052:	4610      	mov	r0, r2
 8002054:	f000 f868 	bl	8002128 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002058:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800205c:	f7ff fe92 	bl	8001d84 <FLASH_WaitForLastOperation>
 8002060:	4603      	mov	r3, r0
 8002062:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002064:	4b1d      	ldr	r3, [pc, #116]	@ (80020dc <HAL_FLASHEx_Erase+0xd8>)
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	4a1c      	ldr	r2, [pc, #112]	@ (80020dc <HAL_FLASHEx_Erase+0xd8>)
 800206a:	f023 0304 	bic.w	r3, r3, #4
 800206e:	6113      	str	r3, [r2, #16]
 8002070:	e028      	b.n	80020c4 <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	e01c      	b.n	80020b4 <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	4619      	mov	r1, r3
 8002082:	68b8      	ldr	r0, [r7, #8]
 8002084:	f000 f874 	bl	8002170 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002088:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800208c:	f7ff fe7a 	bl	8001d84 <FLASH_WaitForLastOperation>
 8002090:	4603      	mov	r3, r0
 8002092:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002094:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <HAL_FLASHEx_Erase+0xd8>)
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	4a10      	ldr	r2, [pc, #64]	@ (80020dc <HAL_FLASHEx_Erase+0xd8>)
 800209a:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800209e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	601a      	str	r2, [r3, #0]
          break;
 80020ac:	e00a      	b.n	80020c4 <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	3301      	adds	r3, #1
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	4413      	add	r3, r2
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d3da      	bcc.n	800207a <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80020c4:	f000 f8e8 	bl	8002298 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80020c8:	4b03      	ldr	r3, [pc, #12]	@ (80020d8 <HAL_FLASHEx_Erase+0xd4>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	761a      	strb	r2, [r3, #24]

  return status;
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	200001f4 	.word	0x200001f4
 80020dc:	40023c00 	.word	0x40023c00

080020e0 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	220f      	movs	r2, #15
 80020ec:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 80020ee:	f000 f897 	bl	8002220 <FLASH_OB_GetWRP>
 80020f2:	4603      	mov	r3, r0
 80020f4:	461a      	mov	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 80020fa:	f000 f89d 	bl	8002238 <FLASH_OB_GetRDP>
 80020fe:	4603      	mov	r3, r0
 8002100:	461a      	mov	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8002106:	f000 f87b 	bl	8002200 <FLASH_OB_GetUser>
 800210a:	4603      	mov	r3, r0
 800210c:	461a      	mov	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8002112:	f000 f8b1 	bl	8002278 <FLASH_OB_GetBOR>
 8002116:	4603      	mov	r3, r0
 8002118:	461a      	mov	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	615a      	str	r2, [r3, #20]
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002134:	4b0d      	ldr	r3, [pc, #52]	@ (800216c <FLASH_MassErase+0x44>)
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	4a0c      	ldr	r2, [pc, #48]	@ (800216c <FLASH_MassErase+0x44>)
 800213a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800213e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002140:	4b0a      	ldr	r3, [pc, #40]	@ (800216c <FLASH_MassErase+0x44>)
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	4a09      	ldr	r2, [pc, #36]	@ (800216c <FLASH_MassErase+0x44>)
 8002146:	f043 0304 	orr.w	r3, r3, #4
 800214a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800214c:	4b07      	ldr	r3, [pc, #28]	@ (800216c <FLASH_MassErase+0x44>)
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	4313      	orrs	r3, r2
 8002156:	4a05      	ldr	r2, [pc, #20]	@ (800216c <FLASH_MassErase+0x44>)
 8002158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800215c:	6113      	str	r3, [r2, #16]
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40023c00 	.word	0x40023c00

08002170 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d102      	bne.n	800218c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	e010      	b.n	80021ae <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d103      	bne.n	800219a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002192:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	e009      	b.n	80021ae <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800219a:	78fb      	ldrb	r3, [r7, #3]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d103      	bne.n	80021a8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80021a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	e002      	b.n	80021ae <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80021a8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80021ac:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80021ae:	4b13      	ldr	r3, [pc, #76]	@ (80021fc <FLASH_Erase_Sector+0x8c>)
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	4a12      	ldr	r2, [pc, #72]	@ (80021fc <FLASH_Erase_Sector+0x8c>)
 80021b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80021ba:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <FLASH_Erase_Sector+0x8c>)
 80021bc:	691a      	ldr	r2, [r3, #16]
 80021be:	490f      	ldr	r1, [pc, #60]	@ (80021fc <FLASH_Erase_Sector+0x8c>)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80021c6:	4b0d      	ldr	r3, [pc, #52]	@ (80021fc <FLASH_Erase_Sector+0x8c>)
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	4a0c      	ldr	r2, [pc, #48]	@ (80021fc <FLASH_Erase_Sector+0x8c>)
 80021cc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80021d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80021d2:	4b0a      	ldr	r3, [pc, #40]	@ (80021fc <FLASH_Erase_Sector+0x8c>)
 80021d4:	691a      	ldr	r2, [r3, #16]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4313      	orrs	r3, r2
 80021dc:	4a07      	ldr	r2, [pc, #28]	@ (80021fc <FLASH_Erase_Sector+0x8c>)
 80021de:	f043 0302 	orr.w	r3, r3, #2
 80021e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80021e4:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <FLASH_Erase_Sector+0x8c>)
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	4a04      	ldr	r2, [pc, #16]	@ (80021fc <FLASH_Erase_Sector+0x8c>)
 80021ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ee:	6113      	str	r3, [r2, #16]
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	40023c00 	.word	0x40023c00

08002200 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8002204:	4b05      	ldr	r3, [pc, #20]	@ (800221c <FLASH_OB_GetUser+0x1c>)
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f023 031f 	bic.w	r3, r3, #31
 800220e:	b2db      	uxtb	r3, r3
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40023c00 	.word	0x40023c00

08002220 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8002224:	4b03      	ldr	r3, [pc, #12]	@ (8002234 <FLASH_OB_GetWRP+0x14>)
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	b29b      	uxth	r3, r3
}
 800222a:	4618      	mov	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	40023c16 	.word	0x40023c16

08002238 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800223e:	23aa      	movs	r3, #170	@ 0xaa
 8002240:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 8002242:	4b0c      	ldr	r3, [pc, #48]	@ (8002274 <FLASH_OB_GetRDP+0x3c>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2bcc      	cmp	r3, #204	@ 0xcc
 800224a:	d102      	bne.n	8002252 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 800224c:	23cc      	movs	r3, #204	@ 0xcc
 800224e:	71fb      	strb	r3, [r7, #7]
 8002250:	e009      	b.n	8002266 <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 8002252:	4b08      	ldr	r3, [pc, #32]	@ (8002274 <FLASH_OB_GetRDP+0x3c>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2baa      	cmp	r3, #170	@ 0xaa
 800225a:	d102      	bne.n	8002262 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 800225c:	23aa      	movs	r3, #170	@ 0xaa
 800225e:	71fb      	strb	r3, [r7, #7]
 8002260:	e001      	b.n	8002266 <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 8002262:	2355      	movs	r3, #85	@ 0x55
 8002264:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8002266:	79fb      	ldrb	r3, [r7, #7]
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	40023c15 	.word	0x40023c15

08002278 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 800227c:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <FLASH_OB_GetBOR+0x1c>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	b2db      	uxtb	r3, r3
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40023c14 	.word	0x40023c14

08002298 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800229c:	4b20      	ldr	r3, [pc, #128]	@ (8002320 <FLASH_FlushCaches+0x88>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d017      	beq.n	80022d8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80022a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002320 <FLASH_FlushCaches+0x88>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002320 <FLASH_FlushCaches+0x88>)
 80022ae:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80022b2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80022b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <FLASH_FlushCaches+0x88>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a19      	ldr	r2, [pc, #100]	@ (8002320 <FLASH_FlushCaches+0x88>)
 80022ba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b17      	ldr	r3, [pc, #92]	@ (8002320 <FLASH_FlushCaches+0x88>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a16      	ldr	r2, [pc, #88]	@ (8002320 <FLASH_FlushCaches+0x88>)
 80022c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80022ca:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022cc:	4b14      	ldr	r3, [pc, #80]	@ (8002320 <FLASH_FlushCaches+0x88>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a13      	ldr	r2, [pc, #76]	@ (8002320 <FLASH_FlushCaches+0x88>)
 80022d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022d6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80022d8:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <FLASH_FlushCaches+0x88>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d017      	beq.n	8002314 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80022e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002320 <FLASH_FlushCaches+0x88>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002320 <FLASH_FlushCaches+0x88>)
 80022ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80022ee:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80022f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002320 <FLASH_FlushCaches+0x88>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002320 <FLASH_FlushCaches+0x88>)
 80022f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b08      	ldr	r3, [pc, #32]	@ (8002320 <FLASH_FlushCaches+0x88>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a07      	ldr	r2, [pc, #28]	@ (8002320 <FLASH_FlushCaches+0x88>)
 8002302:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002306:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002308:	4b05      	ldr	r3, [pc, #20]	@ (8002320 <FLASH_FlushCaches+0x88>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a04      	ldr	r2, [pc, #16]	@ (8002320 <FLASH_FlushCaches+0x88>)
 800230e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002312:	6013      	str	r3, [r2, #0]
  }
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40023c00 	.word	0x40023c00

08002324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	@ 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	e165      	b.n	800260c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002340:	2201      	movs	r2, #1
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	429a      	cmp	r2, r3
 800235a:	f040 8154 	bne.w	8002606 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b01      	cmp	r3, #1
 8002368:	d005      	beq.n	8002376 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002372:	2b02      	cmp	r3, #2
 8002374:	d130      	bne.n	80023d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	2203      	movs	r2, #3
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ac:	2201      	movs	r2, #1
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 0201 	and.w	r2, r3, #1
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d017      	beq.n	8002414 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	2203      	movs	r2, #3
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d123      	bne.n	8002468 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	08da      	lsrs	r2, r3, #3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3208      	adds	r2, #8
 8002428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	220f      	movs	r2, #15
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	08da      	lsrs	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3208      	adds	r2, #8
 8002462:	69b9      	ldr	r1, [r7, #24]
 8002464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	2203      	movs	r2, #3
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0203 	and.w	r2, r3, #3
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 80ae 	beq.w	8002606 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002624 <HAL_GPIO_Init+0x300>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b2:	4a5c      	ldr	r2, [pc, #368]	@ (8002624 <HAL_GPIO_Init+0x300>)
 80024b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002624 <HAL_GPIO_Init+0x300>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024c6:	4a58      	ldr	r2, [pc, #352]	@ (8002628 <HAL_GPIO_Init+0x304>)
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	089b      	lsrs	r3, r3, #2
 80024cc:	3302      	adds	r3, #2
 80024ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	220f      	movs	r2, #15
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a4f      	ldr	r2, [pc, #316]	@ (800262c <HAL_GPIO_Init+0x308>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d025      	beq.n	800253e <HAL_GPIO_Init+0x21a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4e      	ldr	r2, [pc, #312]	@ (8002630 <HAL_GPIO_Init+0x30c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d01f      	beq.n	800253a <HAL_GPIO_Init+0x216>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002634 <HAL_GPIO_Init+0x310>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d019      	beq.n	8002536 <HAL_GPIO_Init+0x212>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a4c      	ldr	r2, [pc, #304]	@ (8002638 <HAL_GPIO_Init+0x314>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d013      	beq.n	8002532 <HAL_GPIO_Init+0x20e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a4b      	ldr	r2, [pc, #300]	@ (800263c <HAL_GPIO_Init+0x318>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00d      	beq.n	800252e <HAL_GPIO_Init+0x20a>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a4a      	ldr	r2, [pc, #296]	@ (8002640 <HAL_GPIO_Init+0x31c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d007      	beq.n	800252a <HAL_GPIO_Init+0x206>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a49      	ldr	r2, [pc, #292]	@ (8002644 <HAL_GPIO_Init+0x320>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d101      	bne.n	8002526 <HAL_GPIO_Init+0x202>
 8002522:	2306      	movs	r3, #6
 8002524:	e00c      	b.n	8002540 <HAL_GPIO_Init+0x21c>
 8002526:	2307      	movs	r3, #7
 8002528:	e00a      	b.n	8002540 <HAL_GPIO_Init+0x21c>
 800252a:	2305      	movs	r3, #5
 800252c:	e008      	b.n	8002540 <HAL_GPIO_Init+0x21c>
 800252e:	2304      	movs	r3, #4
 8002530:	e006      	b.n	8002540 <HAL_GPIO_Init+0x21c>
 8002532:	2303      	movs	r3, #3
 8002534:	e004      	b.n	8002540 <HAL_GPIO_Init+0x21c>
 8002536:	2302      	movs	r3, #2
 8002538:	e002      	b.n	8002540 <HAL_GPIO_Init+0x21c>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <HAL_GPIO_Init+0x21c>
 800253e:	2300      	movs	r3, #0
 8002540:	69fa      	ldr	r2, [r7, #28]
 8002542:	f002 0203 	and.w	r2, r2, #3
 8002546:	0092      	lsls	r2, r2, #2
 8002548:	4093      	lsls	r3, r2
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002550:	4935      	ldr	r1, [pc, #212]	@ (8002628 <HAL_GPIO_Init+0x304>)
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	089b      	lsrs	r3, r3, #2
 8002556:	3302      	adds	r3, #2
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800255e:	4b3a      	ldr	r3, [pc, #232]	@ (8002648 <HAL_GPIO_Init+0x324>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	43db      	mvns	r3, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4013      	ands	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002582:	4a31      	ldr	r2, [pc, #196]	@ (8002648 <HAL_GPIO_Init+0x324>)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002588:	4b2f      	ldr	r3, [pc, #188]	@ (8002648 <HAL_GPIO_Init+0x324>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025ac:	4a26      	ldr	r2, [pc, #152]	@ (8002648 <HAL_GPIO_Init+0x324>)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025b2:	4b25      	ldr	r3, [pc, #148]	@ (8002648 <HAL_GPIO_Init+0x324>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4013      	ands	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002648 <HAL_GPIO_Init+0x324>)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002648 <HAL_GPIO_Init+0x324>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002600:	4a11      	ldr	r2, [pc, #68]	@ (8002648 <HAL_GPIO_Init+0x324>)
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3301      	adds	r3, #1
 800260a:	61fb      	str	r3, [r7, #28]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	2b0f      	cmp	r3, #15
 8002610:	f67f ae96 	bls.w	8002340 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop
 8002618:	3724      	adds	r7, #36	@ 0x24
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800
 8002628:	40013800 	.word	0x40013800
 800262c:	40020000 	.word	0x40020000
 8002630:	40020400 	.word	0x40020400
 8002634:	40020800 	.word	0x40020800
 8002638:	40020c00 	.word	0x40020c00
 800263c:	40021000 	.word	0x40021000
 8002640:	40021400 	.word	0x40021400
 8002644:	40021800 	.word	0x40021800
 8002648:	40013c00 	.word	0x40013c00

0800264c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	807b      	strh	r3, [r7, #2]
 8002658:	4613      	mov	r3, r2
 800265a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800265c:	787b      	ldrb	r3, [r7, #1]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002668:	e003      	b.n	8002672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800266a:	887b      	ldrh	r3, [r7, #2]
 800266c:	041a      	lsls	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	619a      	str	r2, [r3, #24]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0cc      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002694:	4b68      	ldr	r3, [pc, #416]	@ (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 030f 	and.w	r3, r3, #15
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d90c      	bls.n	80026bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a2:	4b65      	ldr	r3, [pc, #404]	@ (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	4b63      	ldr	r3, [pc, #396]	@ (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0b8      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d020      	beq.n	800270a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d4:	4b59      	ldr	r3, [pc, #356]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	4a58      	ldr	r2, [pc, #352]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026ec:	4b53      	ldr	r3, [pc, #332]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	4a52      	ldr	r2, [pc, #328]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f8:	4b50      	ldr	r3, [pc, #320]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	494d      	ldr	r1, [pc, #308]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	4313      	orrs	r3, r2
 8002708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d044      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d107      	bne.n	800272e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271e:	4b47      	ldr	r3, [pc, #284]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d119      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e07f      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d003      	beq.n	800273e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800273a:	2b03      	cmp	r3, #3
 800273c:	d107      	bne.n	800274e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273e:	4b3f      	ldr	r3, [pc, #252]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d109      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e06f      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274e:	4b3b      	ldr	r3, [pc, #236]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e067      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800275e:	4b37      	ldr	r3, [pc, #220]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f023 0203 	bic.w	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	4934      	ldr	r1, [pc, #208]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	4313      	orrs	r3, r2
 800276e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002770:	f7ff f920 	bl	80019b4 <HAL_GetTick>
 8002774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	e00a      	b.n	800278e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002778:	f7ff f91c 	bl	80019b4 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e04f      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278e:	4b2b      	ldr	r3, [pc, #172]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 020c 	and.w	r2, r3, #12
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	429a      	cmp	r2, r3
 800279e:	d1eb      	bne.n	8002778 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a0:	4b25      	ldr	r3, [pc, #148]	@ (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 030f 	and.w	r3, r3, #15
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d20c      	bcs.n	80027c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b22      	ldr	r3, [pc, #136]	@ (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b6:	4b20      	ldr	r3, [pc, #128]	@ (8002838 <HAL_RCC_ClockConfig+0x1b8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e032      	b.n	800282e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d4:	4b19      	ldr	r3, [pc, #100]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4916      	ldr	r1, [pc, #88]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d009      	beq.n	8002806 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027f2:	4b12      	ldr	r3, [pc, #72]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	490e      	ldr	r1, [pc, #56]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	4313      	orrs	r3, r2
 8002804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002806:	f000 f855 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 800280a:	4602      	mov	r2, r0
 800280c:	4b0b      	ldr	r3, [pc, #44]	@ (800283c <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	490a      	ldr	r1, [pc, #40]	@ (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 8002818:	5ccb      	ldrb	r3, [r1, r3]
 800281a:	fa22 f303 	lsr.w	r3, r2, r3
 800281e:	4a09      	ldr	r2, [pc, #36]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002822:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <HAL_RCC_ClockConfig+0x1c8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff f880 	bl	800192c <HAL_InitTick>

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40023c00 	.word	0x40023c00
 800283c:	40023800 	.word	0x40023800
 8002840:	08005008 	.word	0x08005008
 8002844:	20000008 	.word	0x20000008
 8002848:	2000000c 	.word	0x2000000c

0800284c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002850:	4b03      	ldr	r3, [pc, #12]	@ (8002860 <HAL_RCC_GetHCLKFreq+0x14>)
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	20000008 	.word	0x20000008

08002864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002868:	f7ff fff0 	bl	800284c <HAL_RCC_GetHCLKFreq>
 800286c:	4602      	mov	r2, r0
 800286e:	4b05      	ldr	r3, [pc, #20]	@ (8002884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	0a9b      	lsrs	r3, r3, #10
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	4903      	ldr	r1, [pc, #12]	@ (8002888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800287a:	5ccb      	ldrb	r3, [r1, r3]
 800287c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40023800 	.word	0x40023800
 8002888:	08005018 	.word	0x08005018

0800288c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002890:	f7ff ffdc 	bl	800284c <HAL_RCC_GetHCLKFreq>
 8002894:	4602      	mov	r2, r0
 8002896:	4b05      	ldr	r3, [pc, #20]	@ (80028ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	0b5b      	lsrs	r3, r3, #13
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	4903      	ldr	r1, [pc, #12]	@ (80028b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028a2:	5ccb      	ldrb	r3, [r1, r3]
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40023800 	.word	0x40023800
 80028b0:	08005018 	.word	0x08005018

080028b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028b8:	b0a6      	sub	sp, #152	@ 0x98
 80028ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028da:	4bc8      	ldr	r3, [pc, #800]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x348>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b0c      	cmp	r3, #12
 80028e4:	f200 817e 	bhi.w	8002be4 <HAL_RCC_GetSysClockFreq+0x330>
 80028e8:	a201      	add	r2, pc, #4	@ (adr r2, 80028f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80028ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ee:	bf00      	nop
 80028f0:	08002925 	.word	0x08002925
 80028f4:	08002be5 	.word	0x08002be5
 80028f8:	08002be5 	.word	0x08002be5
 80028fc:	08002be5 	.word	0x08002be5
 8002900:	0800292d 	.word	0x0800292d
 8002904:	08002be5 	.word	0x08002be5
 8002908:	08002be5 	.word	0x08002be5
 800290c:	08002be5 	.word	0x08002be5
 8002910:	08002935 	.word	0x08002935
 8002914:	08002be5 	.word	0x08002be5
 8002918:	08002be5 	.word	0x08002be5
 800291c:	08002be5 	.word	0x08002be5
 8002920:	08002a9f 	.word	0x08002a9f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002924:	4bb6      	ldr	r3, [pc, #728]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002926:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800292a:	e15f      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800292c:	4bb5      	ldr	r3, [pc, #724]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x350>)
 800292e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002932:	e15b      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002934:	4bb1      	ldr	r3, [pc, #708]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x348>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800293c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002940:	4bae      	ldr	r3, [pc, #696]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x348>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d031      	beq.n	80029b0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294c:	4bab      	ldr	r3, [pc, #684]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x348>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	099b      	lsrs	r3, r3, #6
 8002952:	2200      	movs	r2, #0
 8002954:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002956:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002958:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800295a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800295e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002960:	2300      	movs	r3, #0
 8002962:	667b      	str	r3, [r7, #100]	@ 0x64
 8002964:	4ba7      	ldr	r3, [pc, #668]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x350>)
 8002966:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800296a:	462a      	mov	r2, r5
 800296c:	fb03 f202 	mul.w	r2, r3, r2
 8002970:	2300      	movs	r3, #0
 8002972:	4621      	mov	r1, r4
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	4aa2      	ldr	r2, [pc, #648]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x350>)
 800297c:	4621      	mov	r1, r4
 800297e:	fba1 1202 	umull	r1, r2, r1, r2
 8002982:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002984:	460a      	mov	r2, r1
 8002986:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002988:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800298a:	4413      	add	r3, r2
 800298c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800298e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002992:	2200      	movs	r2, #0
 8002994:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002996:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002998:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800299c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80029a0:	f7fd fc86 	bl	80002b0 <__aeabi_uldivmod>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4613      	mov	r3, r2
 80029aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80029ae:	e064      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b0:	4b92      	ldr	r3, [pc, #584]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x348>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	099b      	lsrs	r3, r3, #6
 80029b6:	2200      	movs	r2, #0
 80029b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80029ba:	657a      	str	r2, [r7, #84]	@ 0x54
 80029bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029c4:	2300      	movs	r3, #0
 80029c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029c8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80029cc:	4622      	mov	r2, r4
 80029ce:	462b      	mov	r3, r5
 80029d0:	f04f 0000 	mov.w	r0, #0
 80029d4:	f04f 0100 	mov.w	r1, #0
 80029d8:	0159      	lsls	r1, r3, #5
 80029da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029de:	0150      	lsls	r0, r2, #5
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4621      	mov	r1, r4
 80029e6:	1a51      	subs	r1, r2, r1
 80029e8:	6139      	str	r1, [r7, #16]
 80029ea:	4629      	mov	r1, r5
 80029ec:	eb63 0301 	sbc.w	r3, r3, r1
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029fe:	4659      	mov	r1, fp
 8002a00:	018b      	lsls	r3, r1, #6
 8002a02:	4651      	mov	r1, sl
 8002a04:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a08:	4651      	mov	r1, sl
 8002a0a:	018a      	lsls	r2, r1, #6
 8002a0c:	4651      	mov	r1, sl
 8002a0e:	ebb2 0801 	subs.w	r8, r2, r1
 8002a12:	4659      	mov	r1, fp
 8002a14:	eb63 0901 	sbc.w	r9, r3, r1
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a2c:	4690      	mov	r8, r2
 8002a2e:	4699      	mov	r9, r3
 8002a30:	4623      	mov	r3, r4
 8002a32:	eb18 0303 	adds.w	r3, r8, r3
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	462b      	mov	r3, r5
 8002a3a:	eb49 0303 	adc.w	r3, r9, r3
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a4c:	4629      	mov	r1, r5
 8002a4e:	028b      	lsls	r3, r1, #10
 8002a50:	4621      	mov	r1, r4
 8002a52:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a56:	4621      	mov	r1, r4
 8002a58:	028a      	lsls	r2, r1, #10
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a62:	2200      	movs	r2, #0
 8002a64:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a66:	647a      	str	r2, [r7, #68]	@ 0x44
 8002a68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a6c:	f7fd fc20 	bl	80002b0 <__aeabi_uldivmod>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4613      	mov	r3, r2
 8002a76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a7a:	4b60      	ldr	r3, [pc, #384]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x348>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	0c1b      	lsrs	r3, r3, #16
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	3301      	adds	r3, #1
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002a8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002a90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002a9c:	e0a6      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a9e:	4b57      	ldr	r3, [pc, #348]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x348>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002aa6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aaa:	4b54      	ldr	r3, [pc, #336]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x348>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d02a      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab6:	4b51      	ldr	r3, [pc, #324]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x348>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	099b      	lsrs	r3, r3, #6
 8002abc:	2200      	movs	r2, #0
 8002abe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ac0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ac4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ac8:	2100      	movs	r1, #0
 8002aca:	4b4e      	ldr	r3, [pc, #312]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x350>)
 8002acc:	fb03 f201 	mul.w	r2, r3, r1
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	fb00 f303 	mul.w	r3, r0, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	4a4a      	ldr	r2, [pc, #296]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x350>)
 8002ada:	fba0 1202 	umull	r1, r2, r0, r2
 8002ade:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ae0:	460a      	mov	r2, r1
 8002ae2:	673a      	str	r2, [r7, #112]	@ 0x70
 8002ae4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002ae6:	4413      	add	r3, r2
 8002ae8:	677b      	str	r3, [r7, #116]	@ 0x74
 8002aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aee:	2200      	movs	r2, #0
 8002af0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002af2:	637a      	str	r2, [r7, #52]	@ 0x34
 8002af4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002af8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002afc:	f7fd fbd8 	bl	80002b0 <__aeabi_uldivmod>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4613      	mov	r3, r2
 8002b06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b0a:	e05b      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x348>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	099b      	lsrs	r3, r3, #6
 8002b12:	2200      	movs	r2, #0
 8002b14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b1e:	623b      	str	r3, [r7, #32]
 8002b20:	2300      	movs	r3, #0
 8002b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b28:	4642      	mov	r2, r8
 8002b2a:	464b      	mov	r3, r9
 8002b2c:	f04f 0000 	mov.w	r0, #0
 8002b30:	f04f 0100 	mov.w	r1, #0
 8002b34:	0159      	lsls	r1, r3, #5
 8002b36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b3a:	0150      	lsls	r0, r2, #5
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4641      	mov	r1, r8
 8002b42:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b46:	4649      	mov	r1, r9
 8002b48:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b60:	ebb2 040a 	subs.w	r4, r2, sl
 8002b64:	eb63 050b 	sbc.w	r5, r3, fp
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	00eb      	lsls	r3, r5, #3
 8002b72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b76:	00e2      	lsls	r2, r4, #3
 8002b78:	4614      	mov	r4, r2
 8002b7a:	461d      	mov	r5, r3
 8002b7c:	4643      	mov	r3, r8
 8002b7e:	18e3      	adds	r3, r4, r3
 8002b80:	603b      	str	r3, [r7, #0]
 8002b82:	464b      	mov	r3, r9
 8002b84:	eb45 0303 	adc.w	r3, r5, r3
 8002b88:	607b      	str	r3, [r7, #4]
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b96:	4629      	mov	r1, r5
 8002b98:	028b      	lsls	r3, r1, #10
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ba0:	4621      	mov	r1, r4
 8002ba2:	028a      	lsls	r2, r1, #10
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bac:	2200      	movs	r2, #0
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	61fa      	str	r2, [r7, #28]
 8002bb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bb6:	f7fd fb7b 	bl	80002b0 <__aeabi_uldivmod>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x348>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	0f1b      	lsrs	r3, r3, #28
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002bd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002bd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002be2:	e003      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002be4:	4b06      	ldr	r3, [pc, #24]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002be6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002bea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3798      	adds	r7, #152	@ 0x98
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	00f42400 	.word	0x00f42400
 8002c04:	017d7840 	.word	0x017d7840

08002c08 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002c0e:	f7fe fed1 	bl	80019b4 <HAL_GetTick>
 8002c12:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002c14:	4b72      	ldr	r3, [pc, #456]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a71      	ldr	r2, [pc, #452]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c22:	f7fe fec7 	bl	80019b4 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e0d0      	b.n	8002dd6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002c34:	4b6a      	ldr	r3, [pc, #424]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002c40:	4b67      	ldr	r3, [pc, #412]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a66      	ldr	r2, [pc, #408]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002c46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c4a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002c4c:	f7fe feb2 	bl	80019b4 <HAL_GetTick>
 8002c50:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002c52:	4b63      	ldr	r3, [pc, #396]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002c58:	e00a      	b.n	8002c70 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5a:	f7fe feab 	bl	80019b4 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e0b2      	b.n	8002dd6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002c70:	4b5b      	ldr	r3, [pc, #364]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 030c 	and.w	r3, r3, #12
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1ee      	bne.n	8002c5a <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002c7c:	f7fe fe9a 	bl	80019b4 <HAL_GetTick>
 8002c80:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8002c82:	4b57      	ldr	r3, [pc, #348]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a56      	ldr	r2, [pc, #344]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002c88:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8002c8c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7fe fe90 	bl	80019b4 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	@ 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e099      	b.n	8002dd6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002ca2:	4b4f      	ldr	r3, [pc, #316]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002cae:	f7fe fe81 	bl	80019b4 <HAL_GetTick>
 8002cb2:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002cb4:	4b4a      	ldr	r3, [pc, #296]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a49      	ldr	r2, [pc, #292]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002cba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cbe:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc2:	f7fe fe77 	bl	80019b4 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e080      	b.n	8002dd6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002cd4:	4b42      	ldr	r3, [pc, #264]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f0      	bne.n	8002cc2 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002ce0:	f7fe fe68 	bl	80019b4 <HAL_GetTick>
 8002ce4:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002ce6:	4b3e      	ldr	r3, [pc, #248]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a3d      	ldr	r2, [pc, #244]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002cec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002cf0:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cf4:	f7fe fe5e 	bl	80019b4 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e067      	b.n	8002dd6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002d06:	4b36      	ldr	r3, [pc, #216]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002d12:	f7fe fe4f 	bl	80019b4 <HAL_GetTick>
 8002d16:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8002d18:	4b31      	ldr	r3, [pc, #196]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a30      	ldr	r2, [pc, #192]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002d1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d22:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d26:	f7fe fe45 	bl	80019b4 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e04e      	b.n	8002dd6 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002d38:	4b29      	ldr	r3, [pc, #164]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f0      	bne.n	8002d26 <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 8002d44:	4b26      	ldr	r3, [pc, #152]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002d46:	4a27      	ldr	r2, [pc, #156]	@ (8002de4 <HAL_RCC_DeInit+0x1dc>)
 8002d48:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002d4a:	4b25      	ldr	r3, [pc, #148]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002d4c:	4a25      	ldr	r2, [pc, #148]	@ (8002de4 <HAL_RCC_DeInit+0x1dc>)
 8002d4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 8002d52:	4b23      	ldr	r3, [pc, #140]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002d54:	4a24      	ldr	r2, [pc, #144]	@ (8002de8 <HAL_RCC_DeInit+0x1e0>)
 8002d56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002d5a:	4b21      	ldr	r3, [pc, #132]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	4a20      	ldr	r2, [pc, #128]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002d60:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8002d64:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002d66:	4b1e      	ldr	r3, [pc, #120]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	4a1d      	ldr	r2, [pc, #116]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002d6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d70:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8002d72:	4b1b      	ldr	r3, [pc, #108]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	4a1a      	ldr	r2, [pc, #104]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002d78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d7c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 8002d7e:	4b18      	ldr	r3, [pc, #96]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	4a17      	ldr	r2, [pc, #92]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002d84:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 8002d88:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002d8a:	4b15      	ldr	r3, [pc, #84]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	4a14      	ldr	r2, [pc, #80]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002d90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d94:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8002d96:	4b12      	ldr	r3, [pc, #72]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	4a11      	ldr	r2, [pc, #68]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002d9c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002da0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002da2:	4b0f      	ldr	r3, [pc, #60]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002da4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002da6:	4a0e      	ldr	r2, [pc, #56]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002dae:	4b0c      	ldr	r3, [pc, #48]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002db2:	4a0b      	ldr	r2, [pc, #44]	@ (8002de0 <HAL_RCC_DeInit+0x1d8>)
 8002db4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002db8:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002dba:	4b0c      	ldr	r3, [pc, #48]	@ (8002dec <HAL_RCC_DeInit+0x1e4>)
 8002dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8002df0 <HAL_RCC_DeInit+0x1e8>)
 8002dbe:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002df4 <HAL_RCC_DeInit+0x1ec>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fe fdb1 	bl	800192c <HAL_InitTick>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
  }
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	24003010 	.word	0x24003010
 8002de8:	04003010 	.word	0x04003010
 8002dec:	20000008 	.word	0x20000008
 8002df0:	00f42400 	.word	0x00f42400
 8002df4:	2000000c 	.word	0x2000000c

08002df8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e28d      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 8083 	beq.w	8002f1e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e18:	4b94      	ldr	r3, [pc, #592]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d019      	beq.n	8002e58 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e24:	4b91      	ldr	r3, [pc, #580]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 030c 	and.w	r3, r3, #12
        || \
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d106      	bne.n	8002e3e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e30:	4b8e      	ldr	r3, [pc, #568]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e3c:	d00c      	beq.n	8002e58 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e3e:	4b8b      	ldr	r3, [pc, #556]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e46:	2b0c      	cmp	r3, #12
 8002e48:	d112      	bne.n	8002e70 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e4a:	4b88      	ldr	r3, [pc, #544]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e56:	d10b      	bne.n	8002e70 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e58:	4b84      	ldr	r3, [pc, #528]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d05b      	beq.n	8002f1c <HAL_RCC_OscConfig+0x124>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d157      	bne.n	8002f1c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e25a      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e78:	d106      	bne.n	8002e88 <HAL_RCC_OscConfig+0x90>
 8002e7a:	4b7c      	ldr	r3, [pc, #496]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a7b      	ldr	r2, [pc, #492]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002e80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	e01d      	b.n	8002ec4 <HAL_RCC_OscConfig+0xcc>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e90:	d10c      	bne.n	8002eac <HAL_RCC_OscConfig+0xb4>
 8002e92:	4b76      	ldr	r3, [pc, #472]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a75      	ldr	r2, [pc, #468]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002e98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	4b73      	ldr	r3, [pc, #460]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a72      	ldr	r2, [pc, #456]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002ea4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	e00b      	b.n	8002ec4 <HAL_RCC_OscConfig+0xcc>
 8002eac:	4b6f      	ldr	r3, [pc, #444]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a6e      	ldr	r2, [pc, #440]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002eb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eb6:	6013      	str	r3, [r2, #0]
 8002eb8:	4b6c      	ldr	r3, [pc, #432]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a6b      	ldr	r2, [pc, #428]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002ebe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d013      	beq.n	8002ef4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fe fd72 	bl	80019b4 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed4:	f7fe fd6e 	bl	80019b4 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	@ 0x64
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e21f      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee6:	4b61      	ldr	r3, [pc, #388]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0xdc>
 8002ef2:	e014      	b.n	8002f1e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef4:	f7fe fd5e 	bl	80019b4 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002efc:	f7fe fd5a 	bl	80019b4 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	@ 0x64
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e20b      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0e:	4b57      	ldr	r3, [pc, #348]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0x104>
 8002f1a:	e000      	b.n	8002f1e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d06f      	beq.n	800300a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f2a:	4b50      	ldr	r3, [pc, #320]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d017      	beq.n	8002f66 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f36:	4b4d      	ldr	r3, [pc, #308]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
        || \
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d105      	bne.n	8002f4e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f42:	4b4a      	ldr	r3, [pc, #296]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00b      	beq.n	8002f66 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f4e:	4b47      	ldr	r3, [pc, #284]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f56:	2b0c      	cmp	r3, #12
 8002f58:	d11c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f5a:	4b44      	ldr	r3, [pc, #272]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d116      	bne.n	8002f94 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f66:	4b41      	ldr	r3, [pc, #260]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d005      	beq.n	8002f7e <HAL_RCC_OscConfig+0x186>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d001      	beq.n	8002f7e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e1d3      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4937      	ldr	r1, [pc, #220]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f92:	e03a      	b.n	800300a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d020      	beq.n	8002fde <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f9c:	4b34      	ldr	r3, [pc, #208]	@ (8003070 <HAL_RCC_OscConfig+0x278>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa2:	f7fe fd07 	bl	80019b4 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002faa:	f7fe fd03 	bl	80019b4 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e1b4      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc8:	4b28      	ldr	r3, [pc, #160]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4925      	ldr	r1, [pc, #148]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	600b      	str	r3, [r1, #0]
 8002fdc:	e015      	b.n	800300a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fde:	4b24      	ldr	r3, [pc, #144]	@ (8003070 <HAL_RCC_OscConfig+0x278>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe4:	f7fe fce6 	bl	80019b4 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fec:	f7fe fce2 	bl	80019b4 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e193      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d036      	beq.n	8003084 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d016      	beq.n	800304c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800301e:	4b15      	ldr	r3, [pc, #84]	@ (8003074 <HAL_RCC_OscConfig+0x27c>)
 8003020:	2201      	movs	r2, #1
 8003022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003024:	f7fe fcc6 	bl	80019b4 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800302c:	f7fe fcc2 	bl	80019b4 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e173      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303e:	4b0b      	ldr	r3, [pc, #44]	@ (800306c <HAL_RCC_OscConfig+0x274>)
 8003040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f0      	beq.n	800302c <HAL_RCC_OscConfig+0x234>
 800304a:	e01b      	b.n	8003084 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800304c:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <HAL_RCC_OscConfig+0x27c>)
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003052:	f7fe fcaf 	bl	80019b4 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003058:	e00e      	b.n	8003078 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800305a:	f7fe fcab 	bl	80019b4 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d907      	bls.n	8003078 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e15c      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
 800306c:	40023800 	.word	0x40023800
 8003070:	42470000 	.word	0x42470000
 8003074:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003078:	4b8a      	ldr	r3, [pc, #552]	@ (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 800307a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1ea      	bne.n	800305a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 8097 	beq.w	80031c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003092:	2300      	movs	r3, #0
 8003094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003096:	4b83      	ldr	r3, [pc, #524]	@ (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10f      	bne.n	80030c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	4b7f      	ldr	r3, [pc, #508]	@ (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030aa:	4a7e      	ldr	r2, [pc, #504]	@ (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 80030ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030b2:	4b7c      	ldr	r3, [pc, #496]	@ (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ba:	60bb      	str	r3, [r7, #8]
 80030bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030be:	2301      	movs	r3, #1
 80030c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c2:	4b79      	ldr	r3, [pc, #484]	@ (80032a8 <HAL_RCC_OscConfig+0x4b0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d118      	bne.n	8003100 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ce:	4b76      	ldr	r3, [pc, #472]	@ (80032a8 <HAL_RCC_OscConfig+0x4b0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a75      	ldr	r2, [pc, #468]	@ (80032a8 <HAL_RCC_OscConfig+0x4b0>)
 80030d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030da:	f7fe fc6b 	bl	80019b4 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e2:	f7fe fc67 	bl	80019b4 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e118      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f4:	4b6c      	ldr	r3, [pc, #432]	@ (80032a8 <HAL_RCC_OscConfig+0x4b0>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0f0      	beq.n	80030e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d106      	bne.n	8003116 <HAL_RCC_OscConfig+0x31e>
 8003108:	4b66      	ldr	r3, [pc, #408]	@ (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 800310a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800310c:	4a65      	ldr	r2, [pc, #404]	@ (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 800310e:	f043 0301 	orr.w	r3, r3, #1
 8003112:	6713      	str	r3, [r2, #112]	@ 0x70
 8003114:	e01c      	b.n	8003150 <HAL_RCC_OscConfig+0x358>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2b05      	cmp	r3, #5
 800311c:	d10c      	bne.n	8003138 <HAL_RCC_OscConfig+0x340>
 800311e:	4b61      	ldr	r3, [pc, #388]	@ (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003122:	4a60      	ldr	r2, [pc, #384]	@ (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 8003124:	f043 0304 	orr.w	r3, r3, #4
 8003128:	6713      	str	r3, [r2, #112]	@ 0x70
 800312a:	4b5e      	ldr	r3, [pc, #376]	@ (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312e:	4a5d      	ldr	r2, [pc, #372]	@ (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	6713      	str	r3, [r2, #112]	@ 0x70
 8003136:	e00b      	b.n	8003150 <HAL_RCC_OscConfig+0x358>
 8003138:	4b5a      	ldr	r3, [pc, #360]	@ (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 800313a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800313c:	4a59      	ldr	r2, [pc, #356]	@ (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 800313e:	f023 0301 	bic.w	r3, r3, #1
 8003142:	6713      	str	r3, [r2, #112]	@ 0x70
 8003144:	4b57      	ldr	r3, [pc, #348]	@ (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 8003146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003148:	4a56      	ldr	r2, [pc, #344]	@ (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 800314a:	f023 0304 	bic.w	r3, r3, #4
 800314e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d015      	beq.n	8003184 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003158:	f7fe fc2c 	bl	80019b4 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315e:	e00a      	b.n	8003176 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003160:	f7fe fc28 	bl	80019b4 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800316e:	4293      	cmp	r3, r2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e0d7      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003176:	4b4b      	ldr	r3, [pc, #300]	@ (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 8003178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0ee      	beq.n	8003160 <HAL_RCC_OscConfig+0x368>
 8003182:	e014      	b.n	80031ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fe fc16 	bl	80019b4 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800318a:	e00a      	b.n	80031a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318c:	f7fe fc12 	bl	80019b4 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e0c1      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a2:	4b40      	ldr	r3, [pc, #256]	@ (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1ee      	bne.n	800318c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031ae:	7dfb      	ldrb	r3, [r7, #23]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d105      	bne.n	80031c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b4:	4b3b      	ldr	r3, [pc, #236]	@ (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 80031b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b8:	4a3a      	ldr	r2, [pc, #232]	@ (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 80031ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 80ad 	beq.w	8003324 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031ca:	4b36      	ldr	r3, [pc, #216]	@ (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d060      	beq.n	8003298 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d145      	bne.n	800326a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031de:	4b33      	ldr	r3, [pc, #204]	@ (80032ac <HAL_RCC_OscConfig+0x4b4>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fe fbe6 	bl	80019b4 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ec:	f7fe fbe2 	bl	80019b4 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e093      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fe:	4b29      	ldr	r3, [pc, #164]	@ (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69da      	ldr	r2, [r3, #28]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	019b      	lsls	r3, r3, #6
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003220:	085b      	lsrs	r3, r3, #1
 8003222:	3b01      	subs	r3, #1
 8003224:	041b      	lsls	r3, r3, #16
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322c:	061b      	lsls	r3, r3, #24
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003234:	071b      	lsls	r3, r3, #28
 8003236:	491b      	ldr	r1, [pc, #108]	@ (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 8003238:	4313      	orrs	r3, r2
 800323a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800323c:	4b1b      	ldr	r3, [pc, #108]	@ (80032ac <HAL_RCC_OscConfig+0x4b4>)
 800323e:	2201      	movs	r2, #1
 8003240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003242:	f7fe fbb7 	bl	80019b4 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800324a:	f7fe fbb3 	bl	80019b4 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e064      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325c:	4b11      	ldr	r3, [pc, #68]	@ (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_RCC_OscConfig+0x452>
 8003268:	e05c      	b.n	8003324 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326a:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <HAL_RCC_OscConfig+0x4b4>)
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7fe fba0 	bl	80019b4 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003278:	f7fe fb9c 	bl	80019b4 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e04d      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328a:	4b06      	ldr	r3, [pc, #24]	@ (80032a4 <HAL_RCC_OscConfig+0x4ac>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x480>
 8003296:	e045      	b.n	8003324 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d107      	bne.n	80032b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e040      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
 80032a4:	40023800 	.word	0x40023800
 80032a8:	40007000 	.word	0x40007000
 80032ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003330 <HAL_RCC_OscConfig+0x538>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d030      	beq.n	8003320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d129      	bne.n	8003320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d122      	bne.n	8003320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032e0:	4013      	ands	r3, r2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d119      	bne.n	8003320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	3b01      	subs	r3, #1
 80032fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d10f      	bne.n	8003320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800330c:	429a      	cmp	r2, r3
 800330e:	d107      	bne.n	8003320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e000      	b.n	8003326 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40023800 	.word	0x40023800

08003334 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e042      	b.n	80033cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d106      	bne.n	8003360 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7fe f8e2 	bl	8001524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2224      	movs	r2, #36	@ 0x24
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003376:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 fa09 	bl	8003790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800338c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	695a      	ldr	r2, [r3, #20]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800339c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	@ 0x28
 80033d8:	af02      	add	r7, sp, #8
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	4613      	mov	r3, r2
 80033e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d175      	bne.n	80034e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <HAL_UART_Transmit+0x2c>
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e06e      	b.n	80034e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2221      	movs	r2, #33	@ 0x21
 800340e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003412:	f7fe facf 	bl	80019b4 <HAL_GetTick>
 8003416:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	88fa      	ldrh	r2, [r7, #6]
 800341c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	88fa      	ldrh	r2, [r7, #6]
 8003422:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800342c:	d108      	bne.n	8003440 <HAL_UART_Transmit+0x6c>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d104      	bne.n	8003440 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	e003      	b.n	8003448 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003444:	2300      	movs	r3, #0
 8003446:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003448:	e02e      	b.n	80034a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2200      	movs	r2, #0
 8003452:	2180      	movs	r1, #128	@ 0x80
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f8df 	bl	8003618 <UART_WaitOnFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d005      	beq.n	800346c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e03a      	b.n	80034e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10b      	bne.n	800348a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	461a      	mov	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003480:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	3302      	adds	r3, #2
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	e007      	b.n	800349a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	781a      	ldrb	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	3301      	adds	r3, #1
 8003498:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1cb      	bne.n	800344a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2200      	movs	r2, #0
 80034ba:	2140      	movs	r1, #64	@ 0x40
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 f8ab 	bl	8003618 <UART_WaitOnFlagUntilTimeout>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e006      	b.n	80034e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	e000      	b.n	80034e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034e0:	2302      	movs	r3, #2
  }
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3720      	adds	r7, #32
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b08a      	sub	sp, #40	@ 0x28
 80034ee:	af02      	add	r7, sp, #8
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	603b      	str	r3, [r7, #0]
 80034f6:	4613      	mov	r3, r2
 80034f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b20      	cmp	r3, #32
 8003508:	f040 8081 	bne.w	800360e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <HAL_UART_Receive+0x2e>
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e079      	b.n	8003610 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2222      	movs	r2, #34	@ 0x22
 8003526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003530:	f7fe fa40 	bl	80019b4 <HAL_GetTick>
 8003534:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	88fa      	ldrh	r2, [r7, #6]
 800353a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	88fa      	ldrh	r2, [r7, #6]
 8003540:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800354a:	d108      	bne.n	800355e <HAL_UART_Receive+0x74>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d104      	bne.n	800355e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003554:	2300      	movs	r3, #0
 8003556:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	61bb      	str	r3, [r7, #24]
 800355c:	e003      	b.n	8003566 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003562:	2300      	movs	r3, #0
 8003564:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003566:	e047      	b.n	80035f8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	2200      	movs	r2, #0
 8003570:	2120      	movs	r1, #32
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f850 	bl	8003618 <UART_WaitOnFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d005      	beq.n	800358a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e042      	b.n	8003610 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10c      	bne.n	80035aa <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	b29b      	uxth	r3, r3
 8003598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800359c:	b29a      	uxth	r2, r3
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	3302      	adds	r3, #2
 80035a6:	61bb      	str	r3, [r7, #24]
 80035a8:	e01f      	b.n	80035ea <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035b2:	d007      	beq.n	80035c4 <HAL_UART_Receive+0xda>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10a      	bne.n	80035d2 <HAL_UART_Receive+0xe8>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d106      	bne.n	80035d2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	701a      	strb	r2, [r3, #0]
 80035d0:	e008      	b.n	80035e4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	3301      	adds	r3, #1
 80035e8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1b2      	bne.n	8003568 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	e000      	b.n	8003610 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800360e:	2302      	movs	r3, #2
  }
}
 8003610:	4618      	mov	r0, r3
 8003612:	3720      	adds	r7, #32
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	4613      	mov	r3, r2
 8003626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003628:	e03b      	b.n	80036a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003630:	d037      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003632:	f7fe f9bf 	bl	80019b4 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	6a3a      	ldr	r2, [r7, #32]
 800363e:	429a      	cmp	r2, r3
 8003640:	d302      	bcc.n	8003648 <UART_WaitOnFlagUntilTimeout+0x30>
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e03a      	b.n	80036c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b00      	cmp	r3, #0
 8003658:	d023      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b80      	cmp	r3, #128	@ 0x80
 800365e:	d020      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b40      	cmp	r3, #64	@ 0x40
 8003664:	d01d      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b08      	cmp	r3, #8
 8003672:	d116      	bne.n	80036a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 f81d 	bl	80036ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2208      	movs	r2, #8
 8003694:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e00f      	b.n	80036c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4013      	ands	r3, r2
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	bf0c      	ite	eq
 80036b2:	2301      	moveq	r3, #1
 80036b4:	2300      	movne	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	461a      	mov	r2, r3
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d0b4      	beq.n	800362a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b095      	sub	sp, #84	@ 0x54
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	330c      	adds	r3, #12
 80036d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	330c      	adds	r3, #12
 80036f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80036f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036fa:	e841 2300 	strex	r3, r2, [r1]
 80036fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1e5      	bne.n	80036d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3314      	adds	r3, #20
 800370c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	e853 3f00 	ldrex	r3, [r3]
 8003714:	61fb      	str	r3, [r7, #28]
   return(result);
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3314      	adds	r3, #20
 8003724:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003726:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003728:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800372c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800372e:	e841 2300 	strex	r3, r2, [r1]
 8003732:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1e5      	bne.n	8003706 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373e:	2b01      	cmp	r3, #1
 8003740:	d119      	bne.n	8003776 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	330c      	adds	r3, #12
 8003748:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	e853 3f00 	ldrex	r3, [r3]
 8003750:	60bb      	str	r3, [r7, #8]
   return(result);
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f023 0310 	bic.w	r3, r3, #16
 8003758:	647b      	str	r3, [r7, #68]	@ 0x44
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	330c      	adds	r3, #12
 8003760:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003762:	61ba      	str	r2, [r7, #24]
 8003764:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003766:	6979      	ldr	r1, [r7, #20]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	e841 2300 	strex	r3, r2, [r1]
 800376e:	613b      	str	r3, [r7, #16]
   return(result);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1e5      	bne.n	8003742 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003784:	bf00      	nop
 8003786:	3754      	adds	r7, #84	@ 0x54
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003794:	b0c0      	sub	sp, #256	@ 0x100
 8003796:	af00      	add	r7, sp, #0
 8003798:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800379c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80037a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ac:	68d9      	ldr	r1, [r3, #12]
 80037ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	ea40 0301 	orr.w	r3, r0, r1
 80037b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80037e8:	f021 010c 	bic.w	r1, r1, #12
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80037f6:	430b      	orrs	r3, r1
 80037f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380a:	6999      	ldr	r1, [r3, #24]
 800380c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	ea40 0301 	orr.w	r3, r0, r1
 8003816:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	4b8f      	ldr	r3, [pc, #572]	@ (8003a5c <UART_SetConfig+0x2cc>)
 8003820:	429a      	cmp	r2, r3
 8003822:	d005      	beq.n	8003830 <UART_SetConfig+0xa0>
 8003824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4b8d      	ldr	r3, [pc, #564]	@ (8003a60 <UART_SetConfig+0x2d0>)
 800382c:	429a      	cmp	r2, r3
 800382e:	d104      	bne.n	800383a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003830:	f7ff f82c 	bl	800288c <HAL_RCC_GetPCLK2Freq>
 8003834:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003838:	e003      	b.n	8003842 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800383a:	f7ff f813 	bl	8002864 <HAL_RCC_GetPCLK1Freq>
 800383e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800384c:	f040 810c 	bne.w	8003a68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003854:	2200      	movs	r2, #0
 8003856:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800385a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800385e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003862:	4622      	mov	r2, r4
 8003864:	462b      	mov	r3, r5
 8003866:	1891      	adds	r1, r2, r2
 8003868:	65b9      	str	r1, [r7, #88]	@ 0x58
 800386a:	415b      	adcs	r3, r3
 800386c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800386e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003872:	4621      	mov	r1, r4
 8003874:	eb12 0801 	adds.w	r8, r2, r1
 8003878:	4629      	mov	r1, r5
 800387a:	eb43 0901 	adc.w	r9, r3, r1
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800388a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800388e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003892:	4690      	mov	r8, r2
 8003894:	4699      	mov	r9, r3
 8003896:	4623      	mov	r3, r4
 8003898:	eb18 0303 	adds.w	r3, r8, r3
 800389c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038a0:	462b      	mov	r3, r5
 80038a2:	eb49 0303 	adc.w	r3, r9, r3
 80038a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80038ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038be:	460b      	mov	r3, r1
 80038c0:	18db      	adds	r3, r3, r3
 80038c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80038c4:	4613      	mov	r3, r2
 80038c6:	eb42 0303 	adc.w	r3, r2, r3
 80038ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80038cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80038d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80038d4:	f7fc fcec 	bl	80002b0 <__aeabi_uldivmod>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4b61      	ldr	r3, [pc, #388]	@ (8003a64 <UART_SetConfig+0x2d4>)
 80038de:	fba3 2302 	umull	r2, r3, r3, r2
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	011c      	lsls	r4, r3, #4
 80038e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038ea:	2200      	movs	r2, #0
 80038ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80038f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80038f8:	4642      	mov	r2, r8
 80038fa:	464b      	mov	r3, r9
 80038fc:	1891      	adds	r1, r2, r2
 80038fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003900:	415b      	adcs	r3, r3
 8003902:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003904:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003908:	4641      	mov	r1, r8
 800390a:	eb12 0a01 	adds.w	sl, r2, r1
 800390e:	4649      	mov	r1, r9
 8003910:	eb43 0b01 	adc.w	fp, r3, r1
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	f04f 0300 	mov.w	r3, #0
 800391c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003920:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003924:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003928:	4692      	mov	sl, r2
 800392a:	469b      	mov	fp, r3
 800392c:	4643      	mov	r3, r8
 800392e:	eb1a 0303 	adds.w	r3, sl, r3
 8003932:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003936:	464b      	mov	r3, r9
 8003938:	eb4b 0303 	adc.w	r3, fp, r3
 800393c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800394c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003950:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003954:	460b      	mov	r3, r1
 8003956:	18db      	adds	r3, r3, r3
 8003958:	643b      	str	r3, [r7, #64]	@ 0x40
 800395a:	4613      	mov	r3, r2
 800395c:	eb42 0303 	adc.w	r3, r2, r3
 8003960:	647b      	str	r3, [r7, #68]	@ 0x44
 8003962:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003966:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800396a:	f7fc fca1 	bl	80002b0 <__aeabi_uldivmod>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4611      	mov	r1, r2
 8003974:	4b3b      	ldr	r3, [pc, #236]	@ (8003a64 <UART_SetConfig+0x2d4>)
 8003976:	fba3 2301 	umull	r2, r3, r3, r1
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	2264      	movs	r2, #100	@ 0x64
 800397e:	fb02 f303 	mul.w	r3, r2, r3
 8003982:	1acb      	subs	r3, r1, r3
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800398a:	4b36      	ldr	r3, [pc, #216]	@ (8003a64 <UART_SetConfig+0x2d4>)
 800398c:	fba3 2302 	umull	r2, r3, r3, r2
 8003990:	095b      	lsrs	r3, r3, #5
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003998:	441c      	add	r4, r3
 800399a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800399e:	2200      	movs	r2, #0
 80039a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80039a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80039ac:	4642      	mov	r2, r8
 80039ae:	464b      	mov	r3, r9
 80039b0:	1891      	adds	r1, r2, r2
 80039b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039b4:	415b      	adcs	r3, r3
 80039b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80039bc:	4641      	mov	r1, r8
 80039be:	1851      	adds	r1, r2, r1
 80039c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80039c2:	4649      	mov	r1, r9
 80039c4:	414b      	adcs	r3, r1
 80039c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80039d4:	4659      	mov	r1, fp
 80039d6:	00cb      	lsls	r3, r1, #3
 80039d8:	4651      	mov	r1, sl
 80039da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039de:	4651      	mov	r1, sl
 80039e0:	00ca      	lsls	r2, r1, #3
 80039e2:	4610      	mov	r0, r2
 80039e4:	4619      	mov	r1, r3
 80039e6:	4603      	mov	r3, r0
 80039e8:	4642      	mov	r2, r8
 80039ea:	189b      	adds	r3, r3, r2
 80039ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039f0:	464b      	mov	r3, r9
 80039f2:	460a      	mov	r2, r1
 80039f4:	eb42 0303 	adc.w	r3, r2, r3
 80039f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a10:	460b      	mov	r3, r1
 8003a12:	18db      	adds	r3, r3, r3
 8003a14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a16:	4613      	mov	r3, r2
 8003a18:	eb42 0303 	adc.w	r3, r2, r3
 8003a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a26:	f7fc fc43 	bl	80002b0 <__aeabi_uldivmod>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a64 <UART_SetConfig+0x2d4>)
 8003a30:	fba3 1302 	umull	r1, r3, r3, r2
 8003a34:	095b      	lsrs	r3, r3, #5
 8003a36:	2164      	movs	r1, #100	@ 0x64
 8003a38:	fb01 f303 	mul.w	r3, r1, r3
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	3332      	adds	r3, #50	@ 0x32
 8003a42:	4a08      	ldr	r2, [pc, #32]	@ (8003a64 <UART_SetConfig+0x2d4>)
 8003a44:	fba2 2303 	umull	r2, r3, r2, r3
 8003a48:	095b      	lsrs	r3, r3, #5
 8003a4a:	f003 0207 	and.w	r2, r3, #7
 8003a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4422      	add	r2, r4
 8003a56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a58:	e106      	b.n	8003c68 <UART_SetConfig+0x4d8>
 8003a5a:	bf00      	nop
 8003a5c:	40011000 	.word	0x40011000
 8003a60:	40011400 	.word	0x40011400
 8003a64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a7a:	4642      	mov	r2, r8
 8003a7c:	464b      	mov	r3, r9
 8003a7e:	1891      	adds	r1, r2, r2
 8003a80:	6239      	str	r1, [r7, #32]
 8003a82:	415b      	adcs	r3, r3
 8003a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a8a:	4641      	mov	r1, r8
 8003a8c:	1854      	adds	r4, r2, r1
 8003a8e:	4649      	mov	r1, r9
 8003a90:	eb43 0501 	adc.w	r5, r3, r1
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	00eb      	lsls	r3, r5, #3
 8003a9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aa2:	00e2      	lsls	r2, r4, #3
 8003aa4:	4614      	mov	r4, r2
 8003aa6:	461d      	mov	r5, r3
 8003aa8:	4643      	mov	r3, r8
 8003aaa:	18e3      	adds	r3, r4, r3
 8003aac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ab0:	464b      	mov	r3, r9
 8003ab2:	eb45 0303 	adc.w	r3, r5, r3
 8003ab6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ac6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	008b      	lsls	r3, r1, #2
 8003ada:	4621      	mov	r1, r4
 8003adc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	008a      	lsls	r2, r1, #2
 8003ae4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ae8:	f7fc fbe2 	bl	80002b0 <__aeabi_uldivmod>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4b60      	ldr	r3, [pc, #384]	@ (8003c74 <UART_SetConfig+0x4e4>)
 8003af2:	fba3 2302 	umull	r2, r3, r3, r2
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	011c      	lsls	r4, r3, #4
 8003afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003afe:	2200      	movs	r2, #0
 8003b00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b0c:	4642      	mov	r2, r8
 8003b0e:	464b      	mov	r3, r9
 8003b10:	1891      	adds	r1, r2, r2
 8003b12:	61b9      	str	r1, [r7, #24]
 8003b14:	415b      	adcs	r3, r3
 8003b16:	61fb      	str	r3, [r7, #28]
 8003b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b1c:	4641      	mov	r1, r8
 8003b1e:	1851      	adds	r1, r2, r1
 8003b20:	6139      	str	r1, [r7, #16]
 8003b22:	4649      	mov	r1, r9
 8003b24:	414b      	adcs	r3, r1
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b34:	4659      	mov	r1, fp
 8003b36:	00cb      	lsls	r3, r1, #3
 8003b38:	4651      	mov	r1, sl
 8003b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b3e:	4651      	mov	r1, sl
 8003b40:	00ca      	lsls	r2, r1, #3
 8003b42:	4610      	mov	r0, r2
 8003b44:	4619      	mov	r1, r3
 8003b46:	4603      	mov	r3, r0
 8003b48:	4642      	mov	r2, r8
 8003b4a:	189b      	adds	r3, r3, r2
 8003b4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b50:	464b      	mov	r3, r9
 8003b52:	460a      	mov	r2, r1
 8003b54:	eb42 0303 	adc.w	r3, r2, r3
 8003b58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b74:	4649      	mov	r1, r9
 8003b76:	008b      	lsls	r3, r1, #2
 8003b78:	4641      	mov	r1, r8
 8003b7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b7e:	4641      	mov	r1, r8
 8003b80:	008a      	lsls	r2, r1, #2
 8003b82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b86:	f7fc fb93 	bl	80002b0 <__aeabi_uldivmod>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4611      	mov	r1, r2
 8003b90:	4b38      	ldr	r3, [pc, #224]	@ (8003c74 <UART_SetConfig+0x4e4>)
 8003b92:	fba3 2301 	umull	r2, r3, r3, r1
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	2264      	movs	r2, #100	@ 0x64
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	1acb      	subs	r3, r1, r3
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	3332      	adds	r3, #50	@ 0x32
 8003ba4:	4a33      	ldr	r2, [pc, #204]	@ (8003c74 <UART_SetConfig+0x4e4>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bb0:	441c      	add	r4, r3
 8003bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bba:	677a      	str	r2, [r7, #116]	@ 0x74
 8003bbc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003bc0:	4642      	mov	r2, r8
 8003bc2:	464b      	mov	r3, r9
 8003bc4:	1891      	adds	r1, r2, r2
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	415b      	adcs	r3, r3
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bd0:	4641      	mov	r1, r8
 8003bd2:	1851      	adds	r1, r2, r1
 8003bd4:	6039      	str	r1, [r7, #0]
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	414b      	adcs	r3, r1
 8003bda:	607b      	str	r3, [r7, #4]
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003be8:	4659      	mov	r1, fp
 8003bea:	00cb      	lsls	r3, r1, #3
 8003bec:	4651      	mov	r1, sl
 8003bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bf2:	4651      	mov	r1, sl
 8003bf4:	00ca      	lsls	r2, r1, #3
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4642      	mov	r2, r8
 8003bfe:	189b      	adds	r3, r3, r2
 8003c00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c02:	464b      	mov	r3, r9
 8003c04:	460a      	mov	r2, r1
 8003c06:	eb42 0303 	adc.w	r3, r2, r3
 8003c0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c16:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c24:	4649      	mov	r1, r9
 8003c26:	008b      	lsls	r3, r1, #2
 8003c28:	4641      	mov	r1, r8
 8003c2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c2e:	4641      	mov	r1, r8
 8003c30:	008a      	lsls	r2, r1, #2
 8003c32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c36:	f7fc fb3b 	bl	80002b0 <__aeabi_uldivmod>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c74 <UART_SetConfig+0x4e4>)
 8003c40:	fba3 1302 	umull	r1, r3, r3, r2
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	2164      	movs	r1, #100	@ 0x64
 8003c48:	fb01 f303 	mul.w	r3, r1, r3
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	3332      	adds	r3, #50	@ 0x32
 8003c52:	4a08      	ldr	r2, [pc, #32]	@ (8003c74 <UART_SetConfig+0x4e4>)
 8003c54:	fba2 2303 	umull	r2, r3, r2, r3
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	f003 020f 	and.w	r2, r3, #15
 8003c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4422      	add	r2, r4
 8003c66:	609a      	str	r2, [r3, #8]
}
 8003c68:	bf00      	nop
 8003c6a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c74:	51eb851f 	.word	0x51eb851f

08003c78 <std>:
 8003c78:	2300      	movs	r3, #0
 8003c7a:	b510      	push	{r4, lr}
 8003c7c:	4604      	mov	r4, r0
 8003c7e:	e9c0 3300 	strd	r3, r3, [r0]
 8003c82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c86:	6083      	str	r3, [r0, #8]
 8003c88:	8181      	strh	r1, [r0, #12]
 8003c8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c8c:	81c2      	strh	r2, [r0, #14]
 8003c8e:	6183      	str	r3, [r0, #24]
 8003c90:	4619      	mov	r1, r3
 8003c92:	2208      	movs	r2, #8
 8003c94:	305c      	adds	r0, #92	@ 0x5c
 8003c96:	f000 f9f9 	bl	800408c <memset>
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd0 <std+0x58>)
 8003c9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd4 <std+0x5c>)
 8003ca0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd8 <std+0x60>)
 8003ca4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cdc <std+0x64>)
 8003ca8:	6323      	str	r3, [r4, #48]	@ 0x30
 8003caa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce0 <std+0x68>)
 8003cac:	6224      	str	r4, [r4, #32]
 8003cae:	429c      	cmp	r4, r3
 8003cb0:	d006      	beq.n	8003cc0 <std+0x48>
 8003cb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003cb6:	4294      	cmp	r4, r2
 8003cb8:	d002      	beq.n	8003cc0 <std+0x48>
 8003cba:	33d0      	adds	r3, #208	@ 0xd0
 8003cbc:	429c      	cmp	r4, r3
 8003cbe:	d105      	bne.n	8003ccc <std+0x54>
 8003cc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cc8:	f000 ba58 	b.w	800417c <__retarget_lock_init_recursive>
 8003ccc:	bd10      	pop	{r4, pc}
 8003cce:	bf00      	nop
 8003cd0:	08003edd 	.word	0x08003edd
 8003cd4:	08003eff 	.word	0x08003eff
 8003cd8:	08003f37 	.word	0x08003f37
 8003cdc:	08003f5b 	.word	0x08003f5b
 8003ce0:	20000214 	.word	0x20000214

08003ce4 <stdio_exit_handler>:
 8003ce4:	4a02      	ldr	r2, [pc, #8]	@ (8003cf0 <stdio_exit_handler+0xc>)
 8003ce6:	4903      	ldr	r1, [pc, #12]	@ (8003cf4 <stdio_exit_handler+0x10>)
 8003ce8:	4803      	ldr	r0, [pc, #12]	@ (8003cf8 <stdio_exit_handler+0x14>)
 8003cea:	f000 b869 	b.w	8003dc0 <_fwalk_sglue>
 8003cee:	bf00      	nop
 8003cf0:	20000014 	.word	0x20000014
 8003cf4:	08004a1d 	.word	0x08004a1d
 8003cf8:	20000024 	.word	0x20000024

08003cfc <cleanup_stdio>:
 8003cfc:	6841      	ldr	r1, [r0, #4]
 8003cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8003d30 <cleanup_stdio+0x34>)
 8003d00:	4299      	cmp	r1, r3
 8003d02:	b510      	push	{r4, lr}
 8003d04:	4604      	mov	r4, r0
 8003d06:	d001      	beq.n	8003d0c <cleanup_stdio+0x10>
 8003d08:	f000 fe88 	bl	8004a1c <_fflush_r>
 8003d0c:	68a1      	ldr	r1, [r4, #8]
 8003d0e:	4b09      	ldr	r3, [pc, #36]	@ (8003d34 <cleanup_stdio+0x38>)
 8003d10:	4299      	cmp	r1, r3
 8003d12:	d002      	beq.n	8003d1a <cleanup_stdio+0x1e>
 8003d14:	4620      	mov	r0, r4
 8003d16:	f000 fe81 	bl	8004a1c <_fflush_r>
 8003d1a:	68e1      	ldr	r1, [r4, #12]
 8003d1c:	4b06      	ldr	r3, [pc, #24]	@ (8003d38 <cleanup_stdio+0x3c>)
 8003d1e:	4299      	cmp	r1, r3
 8003d20:	d004      	beq.n	8003d2c <cleanup_stdio+0x30>
 8003d22:	4620      	mov	r0, r4
 8003d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d28:	f000 be78 	b.w	8004a1c <_fflush_r>
 8003d2c:	bd10      	pop	{r4, pc}
 8003d2e:	bf00      	nop
 8003d30:	20000214 	.word	0x20000214
 8003d34:	2000027c 	.word	0x2000027c
 8003d38:	200002e4 	.word	0x200002e4

08003d3c <global_stdio_init.part.0>:
 8003d3c:	b510      	push	{r4, lr}
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d6c <global_stdio_init.part.0+0x30>)
 8003d40:	4c0b      	ldr	r4, [pc, #44]	@ (8003d70 <global_stdio_init.part.0+0x34>)
 8003d42:	4a0c      	ldr	r2, [pc, #48]	@ (8003d74 <global_stdio_init.part.0+0x38>)
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	4620      	mov	r0, r4
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2104      	movs	r1, #4
 8003d4c:	f7ff ff94 	bl	8003c78 <std>
 8003d50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003d54:	2201      	movs	r2, #1
 8003d56:	2109      	movs	r1, #9
 8003d58:	f7ff ff8e 	bl	8003c78 <std>
 8003d5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003d60:	2202      	movs	r2, #2
 8003d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d66:	2112      	movs	r1, #18
 8003d68:	f7ff bf86 	b.w	8003c78 <std>
 8003d6c:	2000034c 	.word	0x2000034c
 8003d70:	20000214 	.word	0x20000214
 8003d74:	08003ce5 	.word	0x08003ce5

08003d78 <__sfp_lock_acquire>:
 8003d78:	4801      	ldr	r0, [pc, #4]	@ (8003d80 <__sfp_lock_acquire+0x8>)
 8003d7a:	f000 ba00 	b.w	800417e <__retarget_lock_acquire_recursive>
 8003d7e:	bf00      	nop
 8003d80:	20000355 	.word	0x20000355

08003d84 <__sfp_lock_release>:
 8003d84:	4801      	ldr	r0, [pc, #4]	@ (8003d8c <__sfp_lock_release+0x8>)
 8003d86:	f000 b9fb 	b.w	8004180 <__retarget_lock_release_recursive>
 8003d8a:	bf00      	nop
 8003d8c:	20000355 	.word	0x20000355

08003d90 <__sinit>:
 8003d90:	b510      	push	{r4, lr}
 8003d92:	4604      	mov	r4, r0
 8003d94:	f7ff fff0 	bl	8003d78 <__sfp_lock_acquire>
 8003d98:	6a23      	ldr	r3, [r4, #32]
 8003d9a:	b11b      	cbz	r3, 8003da4 <__sinit+0x14>
 8003d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003da0:	f7ff bff0 	b.w	8003d84 <__sfp_lock_release>
 8003da4:	4b04      	ldr	r3, [pc, #16]	@ (8003db8 <__sinit+0x28>)
 8003da6:	6223      	str	r3, [r4, #32]
 8003da8:	4b04      	ldr	r3, [pc, #16]	@ (8003dbc <__sinit+0x2c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1f5      	bne.n	8003d9c <__sinit+0xc>
 8003db0:	f7ff ffc4 	bl	8003d3c <global_stdio_init.part.0>
 8003db4:	e7f2      	b.n	8003d9c <__sinit+0xc>
 8003db6:	bf00      	nop
 8003db8:	08003cfd 	.word	0x08003cfd
 8003dbc:	2000034c 	.word	0x2000034c

08003dc0 <_fwalk_sglue>:
 8003dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dc4:	4607      	mov	r7, r0
 8003dc6:	4688      	mov	r8, r1
 8003dc8:	4614      	mov	r4, r2
 8003dca:	2600      	movs	r6, #0
 8003dcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003dd0:	f1b9 0901 	subs.w	r9, r9, #1
 8003dd4:	d505      	bpl.n	8003de2 <_fwalk_sglue+0x22>
 8003dd6:	6824      	ldr	r4, [r4, #0]
 8003dd8:	2c00      	cmp	r4, #0
 8003dda:	d1f7      	bne.n	8003dcc <_fwalk_sglue+0xc>
 8003ddc:	4630      	mov	r0, r6
 8003dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003de2:	89ab      	ldrh	r3, [r5, #12]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d907      	bls.n	8003df8 <_fwalk_sglue+0x38>
 8003de8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003dec:	3301      	adds	r3, #1
 8003dee:	d003      	beq.n	8003df8 <_fwalk_sglue+0x38>
 8003df0:	4629      	mov	r1, r5
 8003df2:	4638      	mov	r0, r7
 8003df4:	47c0      	blx	r8
 8003df6:	4306      	orrs	r6, r0
 8003df8:	3568      	adds	r5, #104	@ 0x68
 8003dfa:	e7e9      	b.n	8003dd0 <_fwalk_sglue+0x10>

08003dfc <iprintf>:
 8003dfc:	b40f      	push	{r0, r1, r2, r3}
 8003dfe:	b507      	push	{r0, r1, r2, lr}
 8003e00:	4906      	ldr	r1, [pc, #24]	@ (8003e1c <iprintf+0x20>)
 8003e02:	ab04      	add	r3, sp, #16
 8003e04:	6808      	ldr	r0, [r1, #0]
 8003e06:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e0a:	6881      	ldr	r1, [r0, #8]
 8003e0c:	9301      	str	r3, [sp, #4]
 8003e0e:	f000 fadb 	bl	80043c8 <_vfiprintf_r>
 8003e12:	b003      	add	sp, #12
 8003e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e18:	b004      	add	sp, #16
 8003e1a:	4770      	bx	lr
 8003e1c:	20000020 	.word	0x20000020

08003e20 <_puts_r>:
 8003e20:	6a03      	ldr	r3, [r0, #32]
 8003e22:	b570      	push	{r4, r5, r6, lr}
 8003e24:	6884      	ldr	r4, [r0, #8]
 8003e26:	4605      	mov	r5, r0
 8003e28:	460e      	mov	r6, r1
 8003e2a:	b90b      	cbnz	r3, 8003e30 <_puts_r+0x10>
 8003e2c:	f7ff ffb0 	bl	8003d90 <__sinit>
 8003e30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e32:	07db      	lsls	r3, r3, #31
 8003e34:	d405      	bmi.n	8003e42 <_puts_r+0x22>
 8003e36:	89a3      	ldrh	r3, [r4, #12]
 8003e38:	0598      	lsls	r0, r3, #22
 8003e3a:	d402      	bmi.n	8003e42 <_puts_r+0x22>
 8003e3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e3e:	f000 f99e 	bl	800417e <__retarget_lock_acquire_recursive>
 8003e42:	89a3      	ldrh	r3, [r4, #12]
 8003e44:	0719      	lsls	r1, r3, #28
 8003e46:	d502      	bpl.n	8003e4e <_puts_r+0x2e>
 8003e48:	6923      	ldr	r3, [r4, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d135      	bne.n	8003eba <_puts_r+0x9a>
 8003e4e:	4621      	mov	r1, r4
 8003e50:	4628      	mov	r0, r5
 8003e52:	f000 f8c5 	bl	8003fe0 <__swsetup_r>
 8003e56:	b380      	cbz	r0, 8003eba <_puts_r+0x9a>
 8003e58:	f04f 35ff 	mov.w	r5, #4294967295
 8003e5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e5e:	07da      	lsls	r2, r3, #31
 8003e60:	d405      	bmi.n	8003e6e <_puts_r+0x4e>
 8003e62:	89a3      	ldrh	r3, [r4, #12]
 8003e64:	059b      	lsls	r3, r3, #22
 8003e66:	d402      	bmi.n	8003e6e <_puts_r+0x4e>
 8003e68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e6a:	f000 f989 	bl	8004180 <__retarget_lock_release_recursive>
 8003e6e:	4628      	mov	r0, r5
 8003e70:	bd70      	pop	{r4, r5, r6, pc}
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	da04      	bge.n	8003e80 <_puts_r+0x60>
 8003e76:	69a2      	ldr	r2, [r4, #24]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	dc17      	bgt.n	8003eac <_puts_r+0x8c>
 8003e7c:	290a      	cmp	r1, #10
 8003e7e:	d015      	beq.n	8003eac <_puts_r+0x8c>
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	6022      	str	r2, [r4, #0]
 8003e86:	7019      	strb	r1, [r3, #0]
 8003e88:	68a3      	ldr	r3, [r4, #8]
 8003e8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	60a3      	str	r3, [r4, #8]
 8003e92:	2900      	cmp	r1, #0
 8003e94:	d1ed      	bne.n	8003e72 <_puts_r+0x52>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	da11      	bge.n	8003ebe <_puts_r+0x9e>
 8003e9a:	4622      	mov	r2, r4
 8003e9c:	210a      	movs	r1, #10
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	f000 f85f 	bl	8003f62 <__swbuf_r>
 8003ea4:	3001      	adds	r0, #1
 8003ea6:	d0d7      	beq.n	8003e58 <_puts_r+0x38>
 8003ea8:	250a      	movs	r5, #10
 8003eaa:	e7d7      	b.n	8003e5c <_puts_r+0x3c>
 8003eac:	4622      	mov	r2, r4
 8003eae:	4628      	mov	r0, r5
 8003eb0:	f000 f857 	bl	8003f62 <__swbuf_r>
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	d1e7      	bne.n	8003e88 <_puts_r+0x68>
 8003eb8:	e7ce      	b.n	8003e58 <_puts_r+0x38>
 8003eba:	3e01      	subs	r6, #1
 8003ebc:	e7e4      	b.n	8003e88 <_puts_r+0x68>
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	6022      	str	r2, [r4, #0]
 8003ec4:	220a      	movs	r2, #10
 8003ec6:	701a      	strb	r2, [r3, #0]
 8003ec8:	e7ee      	b.n	8003ea8 <_puts_r+0x88>
	...

08003ecc <puts>:
 8003ecc:	4b02      	ldr	r3, [pc, #8]	@ (8003ed8 <puts+0xc>)
 8003ece:	4601      	mov	r1, r0
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	f7ff bfa5 	b.w	8003e20 <_puts_r>
 8003ed6:	bf00      	nop
 8003ed8:	20000020 	.word	0x20000020

08003edc <__sread>:
 8003edc:	b510      	push	{r4, lr}
 8003ede:	460c      	mov	r4, r1
 8003ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee4:	f000 f8fc 	bl	80040e0 <_read_r>
 8003ee8:	2800      	cmp	r0, #0
 8003eea:	bfab      	itete	ge
 8003eec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003eee:	89a3      	ldrhlt	r3, [r4, #12]
 8003ef0:	181b      	addge	r3, r3, r0
 8003ef2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003ef6:	bfac      	ite	ge
 8003ef8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003efa:	81a3      	strhlt	r3, [r4, #12]
 8003efc:	bd10      	pop	{r4, pc}

08003efe <__swrite>:
 8003efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f02:	461f      	mov	r7, r3
 8003f04:	898b      	ldrh	r3, [r1, #12]
 8003f06:	05db      	lsls	r3, r3, #23
 8003f08:	4605      	mov	r5, r0
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	4616      	mov	r6, r2
 8003f0e:	d505      	bpl.n	8003f1c <__swrite+0x1e>
 8003f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f14:	2302      	movs	r3, #2
 8003f16:	2200      	movs	r2, #0
 8003f18:	f000 f8d0 	bl	80040bc <_lseek_r>
 8003f1c:	89a3      	ldrh	r3, [r4, #12]
 8003f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f26:	81a3      	strh	r3, [r4, #12]
 8003f28:	4632      	mov	r2, r6
 8003f2a:	463b      	mov	r3, r7
 8003f2c:	4628      	mov	r0, r5
 8003f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f32:	f000 b8e7 	b.w	8004104 <_write_r>

08003f36 <__sseek>:
 8003f36:	b510      	push	{r4, lr}
 8003f38:	460c      	mov	r4, r1
 8003f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f3e:	f000 f8bd 	bl	80040bc <_lseek_r>
 8003f42:	1c43      	adds	r3, r0, #1
 8003f44:	89a3      	ldrh	r3, [r4, #12]
 8003f46:	bf15      	itete	ne
 8003f48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003f4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003f4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003f52:	81a3      	strheq	r3, [r4, #12]
 8003f54:	bf18      	it	ne
 8003f56:	81a3      	strhne	r3, [r4, #12]
 8003f58:	bd10      	pop	{r4, pc}

08003f5a <__sclose>:
 8003f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f5e:	f000 b89d 	b.w	800409c <_close_r>

08003f62 <__swbuf_r>:
 8003f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f64:	460e      	mov	r6, r1
 8003f66:	4614      	mov	r4, r2
 8003f68:	4605      	mov	r5, r0
 8003f6a:	b118      	cbz	r0, 8003f74 <__swbuf_r+0x12>
 8003f6c:	6a03      	ldr	r3, [r0, #32]
 8003f6e:	b90b      	cbnz	r3, 8003f74 <__swbuf_r+0x12>
 8003f70:	f7ff ff0e 	bl	8003d90 <__sinit>
 8003f74:	69a3      	ldr	r3, [r4, #24]
 8003f76:	60a3      	str	r3, [r4, #8]
 8003f78:	89a3      	ldrh	r3, [r4, #12]
 8003f7a:	071a      	lsls	r2, r3, #28
 8003f7c:	d501      	bpl.n	8003f82 <__swbuf_r+0x20>
 8003f7e:	6923      	ldr	r3, [r4, #16]
 8003f80:	b943      	cbnz	r3, 8003f94 <__swbuf_r+0x32>
 8003f82:	4621      	mov	r1, r4
 8003f84:	4628      	mov	r0, r5
 8003f86:	f000 f82b 	bl	8003fe0 <__swsetup_r>
 8003f8a:	b118      	cbz	r0, 8003f94 <__swbuf_r+0x32>
 8003f8c:	f04f 37ff 	mov.w	r7, #4294967295
 8003f90:	4638      	mov	r0, r7
 8003f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	6922      	ldr	r2, [r4, #16]
 8003f98:	1a98      	subs	r0, r3, r2
 8003f9a:	6963      	ldr	r3, [r4, #20]
 8003f9c:	b2f6      	uxtb	r6, r6
 8003f9e:	4283      	cmp	r3, r0
 8003fa0:	4637      	mov	r7, r6
 8003fa2:	dc05      	bgt.n	8003fb0 <__swbuf_r+0x4e>
 8003fa4:	4621      	mov	r1, r4
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	f000 fd38 	bl	8004a1c <_fflush_r>
 8003fac:	2800      	cmp	r0, #0
 8003fae:	d1ed      	bne.n	8003f8c <__swbuf_r+0x2a>
 8003fb0:	68a3      	ldr	r3, [r4, #8]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	60a3      	str	r3, [r4, #8]
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	6022      	str	r2, [r4, #0]
 8003fbc:	701e      	strb	r6, [r3, #0]
 8003fbe:	6962      	ldr	r2, [r4, #20]
 8003fc0:	1c43      	adds	r3, r0, #1
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d004      	beq.n	8003fd0 <__swbuf_r+0x6e>
 8003fc6:	89a3      	ldrh	r3, [r4, #12]
 8003fc8:	07db      	lsls	r3, r3, #31
 8003fca:	d5e1      	bpl.n	8003f90 <__swbuf_r+0x2e>
 8003fcc:	2e0a      	cmp	r6, #10
 8003fce:	d1df      	bne.n	8003f90 <__swbuf_r+0x2e>
 8003fd0:	4621      	mov	r1, r4
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	f000 fd22 	bl	8004a1c <_fflush_r>
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	d0d9      	beq.n	8003f90 <__swbuf_r+0x2e>
 8003fdc:	e7d6      	b.n	8003f8c <__swbuf_r+0x2a>
	...

08003fe0 <__swsetup_r>:
 8003fe0:	b538      	push	{r3, r4, r5, lr}
 8003fe2:	4b29      	ldr	r3, [pc, #164]	@ (8004088 <__swsetup_r+0xa8>)
 8003fe4:	4605      	mov	r5, r0
 8003fe6:	6818      	ldr	r0, [r3, #0]
 8003fe8:	460c      	mov	r4, r1
 8003fea:	b118      	cbz	r0, 8003ff4 <__swsetup_r+0x14>
 8003fec:	6a03      	ldr	r3, [r0, #32]
 8003fee:	b90b      	cbnz	r3, 8003ff4 <__swsetup_r+0x14>
 8003ff0:	f7ff fece 	bl	8003d90 <__sinit>
 8003ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ff8:	0719      	lsls	r1, r3, #28
 8003ffa:	d422      	bmi.n	8004042 <__swsetup_r+0x62>
 8003ffc:	06da      	lsls	r2, r3, #27
 8003ffe:	d407      	bmi.n	8004010 <__swsetup_r+0x30>
 8004000:	2209      	movs	r2, #9
 8004002:	602a      	str	r2, [r5, #0]
 8004004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004008:	81a3      	strh	r3, [r4, #12]
 800400a:	f04f 30ff 	mov.w	r0, #4294967295
 800400e:	e033      	b.n	8004078 <__swsetup_r+0x98>
 8004010:	0758      	lsls	r0, r3, #29
 8004012:	d512      	bpl.n	800403a <__swsetup_r+0x5a>
 8004014:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004016:	b141      	cbz	r1, 800402a <__swsetup_r+0x4a>
 8004018:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800401c:	4299      	cmp	r1, r3
 800401e:	d002      	beq.n	8004026 <__swsetup_r+0x46>
 8004020:	4628      	mov	r0, r5
 8004022:	f000 f8af 	bl	8004184 <_free_r>
 8004026:	2300      	movs	r3, #0
 8004028:	6363      	str	r3, [r4, #52]	@ 0x34
 800402a:	89a3      	ldrh	r3, [r4, #12]
 800402c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004030:	81a3      	strh	r3, [r4, #12]
 8004032:	2300      	movs	r3, #0
 8004034:	6063      	str	r3, [r4, #4]
 8004036:	6923      	ldr	r3, [r4, #16]
 8004038:	6023      	str	r3, [r4, #0]
 800403a:	89a3      	ldrh	r3, [r4, #12]
 800403c:	f043 0308 	orr.w	r3, r3, #8
 8004040:	81a3      	strh	r3, [r4, #12]
 8004042:	6923      	ldr	r3, [r4, #16]
 8004044:	b94b      	cbnz	r3, 800405a <__swsetup_r+0x7a>
 8004046:	89a3      	ldrh	r3, [r4, #12]
 8004048:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800404c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004050:	d003      	beq.n	800405a <__swsetup_r+0x7a>
 8004052:	4621      	mov	r1, r4
 8004054:	4628      	mov	r0, r5
 8004056:	f000 fd2f 	bl	8004ab8 <__smakebuf_r>
 800405a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800405e:	f013 0201 	ands.w	r2, r3, #1
 8004062:	d00a      	beq.n	800407a <__swsetup_r+0x9a>
 8004064:	2200      	movs	r2, #0
 8004066:	60a2      	str	r2, [r4, #8]
 8004068:	6962      	ldr	r2, [r4, #20]
 800406a:	4252      	negs	r2, r2
 800406c:	61a2      	str	r2, [r4, #24]
 800406e:	6922      	ldr	r2, [r4, #16]
 8004070:	b942      	cbnz	r2, 8004084 <__swsetup_r+0xa4>
 8004072:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004076:	d1c5      	bne.n	8004004 <__swsetup_r+0x24>
 8004078:	bd38      	pop	{r3, r4, r5, pc}
 800407a:	0799      	lsls	r1, r3, #30
 800407c:	bf58      	it	pl
 800407e:	6962      	ldrpl	r2, [r4, #20]
 8004080:	60a2      	str	r2, [r4, #8]
 8004082:	e7f4      	b.n	800406e <__swsetup_r+0x8e>
 8004084:	2000      	movs	r0, #0
 8004086:	e7f7      	b.n	8004078 <__swsetup_r+0x98>
 8004088:	20000020 	.word	0x20000020

0800408c <memset>:
 800408c:	4402      	add	r2, r0
 800408e:	4603      	mov	r3, r0
 8004090:	4293      	cmp	r3, r2
 8004092:	d100      	bne.n	8004096 <memset+0xa>
 8004094:	4770      	bx	lr
 8004096:	f803 1b01 	strb.w	r1, [r3], #1
 800409a:	e7f9      	b.n	8004090 <memset+0x4>

0800409c <_close_r>:
 800409c:	b538      	push	{r3, r4, r5, lr}
 800409e:	4d06      	ldr	r5, [pc, #24]	@ (80040b8 <_close_r+0x1c>)
 80040a0:	2300      	movs	r3, #0
 80040a2:	4604      	mov	r4, r0
 80040a4:	4608      	mov	r0, r1
 80040a6:	602b      	str	r3, [r5, #0]
 80040a8:	f7fd fb42 	bl	8001730 <_close>
 80040ac:	1c43      	adds	r3, r0, #1
 80040ae:	d102      	bne.n	80040b6 <_close_r+0x1a>
 80040b0:	682b      	ldr	r3, [r5, #0]
 80040b2:	b103      	cbz	r3, 80040b6 <_close_r+0x1a>
 80040b4:	6023      	str	r3, [r4, #0]
 80040b6:	bd38      	pop	{r3, r4, r5, pc}
 80040b8:	20000350 	.word	0x20000350

080040bc <_lseek_r>:
 80040bc:	b538      	push	{r3, r4, r5, lr}
 80040be:	4d07      	ldr	r5, [pc, #28]	@ (80040dc <_lseek_r+0x20>)
 80040c0:	4604      	mov	r4, r0
 80040c2:	4608      	mov	r0, r1
 80040c4:	4611      	mov	r1, r2
 80040c6:	2200      	movs	r2, #0
 80040c8:	602a      	str	r2, [r5, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	f7fd fb57 	bl	800177e <_lseek>
 80040d0:	1c43      	adds	r3, r0, #1
 80040d2:	d102      	bne.n	80040da <_lseek_r+0x1e>
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	b103      	cbz	r3, 80040da <_lseek_r+0x1e>
 80040d8:	6023      	str	r3, [r4, #0]
 80040da:	bd38      	pop	{r3, r4, r5, pc}
 80040dc:	20000350 	.word	0x20000350

080040e0 <_read_r>:
 80040e0:	b538      	push	{r3, r4, r5, lr}
 80040e2:	4d07      	ldr	r5, [pc, #28]	@ (8004100 <_read_r+0x20>)
 80040e4:	4604      	mov	r4, r0
 80040e6:	4608      	mov	r0, r1
 80040e8:	4611      	mov	r1, r2
 80040ea:	2200      	movs	r2, #0
 80040ec:	602a      	str	r2, [r5, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	f7fd fae5 	bl	80016be <_read>
 80040f4:	1c43      	adds	r3, r0, #1
 80040f6:	d102      	bne.n	80040fe <_read_r+0x1e>
 80040f8:	682b      	ldr	r3, [r5, #0]
 80040fa:	b103      	cbz	r3, 80040fe <_read_r+0x1e>
 80040fc:	6023      	str	r3, [r4, #0]
 80040fe:	bd38      	pop	{r3, r4, r5, pc}
 8004100:	20000350 	.word	0x20000350

08004104 <_write_r>:
 8004104:	b538      	push	{r3, r4, r5, lr}
 8004106:	4d07      	ldr	r5, [pc, #28]	@ (8004124 <_write_r+0x20>)
 8004108:	4604      	mov	r4, r0
 800410a:	4608      	mov	r0, r1
 800410c:	4611      	mov	r1, r2
 800410e:	2200      	movs	r2, #0
 8004110:	602a      	str	r2, [r5, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	f7fd faf0 	bl	80016f8 <_write>
 8004118:	1c43      	adds	r3, r0, #1
 800411a:	d102      	bne.n	8004122 <_write_r+0x1e>
 800411c:	682b      	ldr	r3, [r5, #0]
 800411e:	b103      	cbz	r3, 8004122 <_write_r+0x1e>
 8004120:	6023      	str	r3, [r4, #0]
 8004122:	bd38      	pop	{r3, r4, r5, pc}
 8004124:	20000350 	.word	0x20000350

08004128 <__errno>:
 8004128:	4b01      	ldr	r3, [pc, #4]	@ (8004130 <__errno+0x8>)
 800412a:	6818      	ldr	r0, [r3, #0]
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	20000020 	.word	0x20000020

08004134 <__libc_init_array>:
 8004134:	b570      	push	{r4, r5, r6, lr}
 8004136:	4d0d      	ldr	r5, [pc, #52]	@ (800416c <__libc_init_array+0x38>)
 8004138:	4c0d      	ldr	r4, [pc, #52]	@ (8004170 <__libc_init_array+0x3c>)
 800413a:	1b64      	subs	r4, r4, r5
 800413c:	10a4      	asrs	r4, r4, #2
 800413e:	2600      	movs	r6, #0
 8004140:	42a6      	cmp	r6, r4
 8004142:	d109      	bne.n	8004158 <__libc_init_array+0x24>
 8004144:	4d0b      	ldr	r5, [pc, #44]	@ (8004174 <__libc_init_array+0x40>)
 8004146:	4c0c      	ldr	r4, [pc, #48]	@ (8004178 <__libc_init_array+0x44>)
 8004148:	f000 fd24 	bl	8004b94 <_init>
 800414c:	1b64      	subs	r4, r4, r5
 800414e:	10a4      	asrs	r4, r4, #2
 8004150:	2600      	movs	r6, #0
 8004152:	42a6      	cmp	r6, r4
 8004154:	d105      	bne.n	8004162 <__libc_init_array+0x2e>
 8004156:	bd70      	pop	{r4, r5, r6, pc}
 8004158:	f855 3b04 	ldr.w	r3, [r5], #4
 800415c:	4798      	blx	r3
 800415e:	3601      	adds	r6, #1
 8004160:	e7ee      	b.n	8004140 <__libc_init_array+0xc>
 8004162:	f855 3b04 	ldr.w	r3, [r5], #4
 8004166:	4798      	blx	r3
 8004168:	3601      	adds	r6, #1
 800416a:	e7f2      	b.n	8004152 <__libc_init_array+0x1e>
 800416c:	0800505c 	.word	0x0800505c
 8004170:	0800505c 	.word	0x0800505c
 8004174:	0800505c 	.word	0x0800505c
 8004178:	08005060 	.word	0x08005060

0800417c <__retarget_lock_init_recursive>:
 800417c:	4770      	bx	lr

0800417e <__retarget_lock_acquire_recursive>:
 800417e:	4770      	bx	lr

08004180 <__retarget_lock_release_recursive>:
 8004180:	4770      	bx	lr
	...

08004184 <_free_r>:
 8004184:	b538      	push	{r3, r4, r5, lr}
 8004186:	4605      	mov	r5, r0
 8004188:	2900      	cmp	r1, #0
 800418a:	d041      	beq.n	8004210 <_free_r+0x8c>
 800418c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004190:	1f0c      	subs	r4, r1, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	bfb8      	it	lt
 8004196:	18e4      	addlt	r4, r4, r3
 8004198:	f000 f8e0 	bl	800435c <__malloc_lock>
 800419c:	4a1d      	ldr	r2, [pc, #116]	@ (8004214 <_free_r+0x90>)
 800419e:	6813      	ldr	r3, [r2, #0]
 80041a0:	b933      	cbnz	r3, 80041b0 <_free_r+0x2c>
 80041a2:	6063      	str	r3, [r4, #4]
 80041a4:	6014      	str	r4, [r2, #0]
 80041a6:	4628      	mov	r0, r5
 80041a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041ac:	f000 b8dc 	b.w	8004368 <__malloc_unlock>
 80041b0:	42a3      	cmp	r3, r4
 80041b2:	d908      	bls.n	80041c6 <_free_r+0x42>
 80041b4:	6820      	ldr	r0, [r4, #0]
 80041b6:	1821      	adds	r1, r4, r0
 80041b8:	428b      	cmp	r3, r1
 80041ba:	bf01      	itttt	eq
 80041bc:	6819      	ldreq	r1, [r3, #0]
 80041be:	685b      	ldreq	r3, [r3, #4]
 80041c0:	1809      	addeq	r1, r1, r0
 80041c2:	6021      	streq	r1, [r4, #0]
 80041c4:	e7ed      	b.n	80041a2 <_free_r+0x1e>
 80041c6:	461a      	mov	r2, r3
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	b10b      	cbz	r3, 80041d0 <_free_r+0x4c>
 80041cc:	42a3      	cmp	r3, r4
 80041ce:	d9fa      	bls.n	80041c6 <_free_r+0x42>
 80041d0:	6811      	ldr	r1, [r2, #0]
 80041d2:	1850      	adds	r0, r2, r1
 80041d4:	42a0      	cmp	r0, r4
 80041d6:	d10b      	bne.n	80041f0 <_free_r+0x6c>
 80041d8:	6820      	ldr	r0, [r4, #0]
 80041da:	4401      	add	r1, r0
 80041dc:	1850      	adds	r0, r2, r1
 80041de:	4283      	cmp	r3, r0
 80041e0:	6011      	str	r1, [r2, #0]
 80041e2:	d1e0      	bne.n	80041a6 <_free_r+0x22>
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	6053      	str	r3, [r2, #4]
 80041ea:	4408      	add	r0, r1
 80041ec:	6010      	str	r0, [r2, #0]
 80041ee:	e7da      	b.n	80041a6 <_free_r+0x22>
 80041f0:	d902      	bls.n	80041f8 <_free_r+0x74>
 80041f2:	230c      	movs	r3, #12
 80041f4:	602b      	str	r3, [r5, #0]
 80041f6:	e7d6      	b.n	80041a6 <_free_r+0x22>
 80041f8:	6820      	ldr	r0, [r4, #0]
 80041fa:	1821      	adds	r1, r4, r0
 80041fc:	428b      	cmp	r3, r1
 80041fe:	bf04      	itt	eq
 8004200:	6819      	ldreq	r1, [r3, #0]
 8004202:	685b      	ldreq	r3, [r3, #4]
 8004204:	6063      	str	r3, [r4, #4]
 8004206:	bf04      	itt	eq
 8004208:	1809      	addeq	r1, r1, r0
 800420a:	6021      	streq	r1, [r4, #0]
 800420c:	6054      	str	r4, [r2, #4]
 800420e:	e7ca      	b.n	80041a6 <_free_r+0x22>
 8004210:	bd38      	pop	{r3, r4, r5, pc}
 8004212:	bf00      	nop
 8004214:	2000035c 	.word	0x2000035c

08004218 <sbrk_aligned>:
 8004218:	b570      	push	{r4, r5, r6, lr}
 800421a:	4e0f      	ldr	r6, [pc, #60]	@ (8004258 <sbrk_aligned+0x40>)
 800421c:	460c      	mov	r4, r1
 800421e:	6831      	ldr	r1, [r6, #0]
 8004220:	4605      	mov	r5, r0
 8004222:	b911      	cbnz	r1, 800422a <sbrk_aligned+0x12>
 8004224:	f000 fca6 	bl	8004b74 <_sbrk_r>
 8004228:	6030      	str	r0, [r6, #0]
 800422a:	4621      	mov	r1, r4
 800422c:	4628      	mov	r0, r5
 800422e:	f000 fca1 	bl	8004b74 <_sbrk_r>
 8004232:	1c43      	adds	r3, r0, #1
 8004234:	d103      	bne.n	800423e <sbrk_aligned+0x26>
 8004236:	f04f 34ff 	mov.w	r4, #4294967295
 800423a:	4620      	mov	r0, r4
 800423c:	bd70      	pop	{r4, r5, r6, pc}
 800423e:	1cc4      	adds	r4, r0, #3
 8004240:	f024 0403 	bic.w	r4, r4, #3
 8004244:	42a0      	cmp	r0, r4
 8004246:	d0f8      	beq.n	800423a <sbrk_aligned+0x22>
 8004248:	1a21      	subs	r1, r4, r0
 800424a:	4628      	mov	r0, r5
 800424c:	f000 fc92 	bl	8004b74 <_sbrk_r>
 8004250:	3001      	adds	r0, #1
 8004252:	d1f2      	bne.n	800423a <sbrk_aligned+0x22>
 8004254:	e7ef      	b.n	8004236 <sbrk_aligned+0x1e>
 8004256:	bf00      	nop
 8004258:	20000358 	.word	0x20000358

0800425c <_malloc_r>:
 800425c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004260:	1ccd      	adds	r5, r1, #3
 8004262:	f025 0503 	bic.w	r5, r5, #3
 8004266:	3508      	adds	r5, #8
 8004268:	2d0c      	cmp	r5, #12
 800426a:	bf38      	it	cc
 800426c:	250c      	movcc	r5, #12
 800426e:	2d00      	cmp	r5, #0
 8004270:	4606      	mov	r6, r0
 8004272:	db01      	blt.n	8004278 <_malloc_r+0x1c>
 8004274:	42a9      	cmp	r1, r5
 8004276:	d904      	bls.n	8004282 <_malloc_r+0x26>
 8004278:	230c      	movs	r3, #12
 800427a:	6033      	str	r3, [r6, #0]
 800427c:	2000      	movs	r0, #0
 800427e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004282:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004358 <_malloc_r+0xfc>
 8004286:	f000 f869 	bl	800435c <__malloc_lock>
 800428a:	f8d8 3000 	ldr.w	r3, [r8]
 800428e:	461c      	mov	r4, r3
 8004290:	bb44      	cbnz	r4, 80042e4 <_malloc_r+0x88>
 8004292:	4629      	mov	r1, r5
 8004294:	4630      	mov	r0, r6
 8004296:	f7ff ffbf 	bl	8004218 <sbrk_aligned>
 800429a:	1c43      	adds	r3, r0, #1
 800429c:	4604      	mov	r4, r0
 800429e:	d158      	bne.n	8004352 <_malloc_r+0xf6>
 80042a0:	f8d8 4000 	ldr.w	r4, [r8]
 80042a4:	4627      	mov	r7, r4
 80042a6:	2f00      	cmp	r7, #0
 80042a8:	d143      	bne.n	8004332 <_malloc_r+0xd6>
 80042aa:	2c00      	cmp	r4, #0
 80042ac:	d04b      	beq.n	8004346 <_malloc_r+0xea>
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	4639      	mov	r1, r7
 80042b2:	4630      	mov	r0, r6
 80042b4:	eb04 0903 	add.w	r9, r4, r3
 80042b8:	f000 fc5c 	bl	8004b74 <_sbrk_r>
 80042bc:	4581      	cmp	r9, r0
 80042be:	d142      	bne.n	8004346 <_malloc_r+0xea>
 80042c0:	6821      	ldr	r1, [r4, #0]
 80042c2:	1a6d      	subs	r5, r5, r1
 80042c4:	4629      	mov	r1, r5
 80042c6:	4630      	mov	r0, r6
 80042c8:	f7ff ffa6 	bl	8004218 <sbrk_aligned>
 80042cc:	3001      	adds	r0, #1
 80042ce:	d03a      	beq.n	8004346 <_malloc_r+0xea>
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	442b      	add	r3, r5
 80042d4:	6023      	str	r3, [r4, #0]
 80042d6:	f8d8 3000 	ldr.w	r3, [r8]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	bb62      	cbnz	r2, 8004338 <_malloc_r+0xdc>
 80042de:	f8c8 7000 	str.w	r7, [r8]
 80042e2:	e00f      	b.n	8004304 <_malloc_r+0xa8>
 80042e4:	6822      	ldr	r2, [r4, #0]
 80042e6:	1b52      	subs	r2, r2, r5
 80042e8:	d420      	bmi.n	800432c <_malloc_r+0xd0>
 80042ea:	2a0b      	cmp	r2, #11
 80042ec:	d917      	bls.n	800431e <_malloc_r+0xc2>
 80042ee:	1961      	adds	r1, r4, r5
 80042f0:	42a3      	cmp	r3, r4
 80042f2:	6025      	str	r5, [r4, #0]
 80042f4:	bf18      	it	ne
 80042f6:	6059      	strne	r1, [r3, #4]
 80042f8:	6863      	ldr	r3, [r4, #4]
 80042fa:	bf08      	it	eq
 80042fc:	f8c8 1000 	streq.w	r1, [r8]
 8004300:	5162      	str	r2, [r4, r5]
 8004302:	604b      	str	r3, [r1, #4]
 8004304:	4630      	mov	r0, r6
 8004306:	f000 f82f 	bl	8004368 <__malloc_unlock>
 800430a:	f104 000b 	add.w	r0, r4, #11
 800430e:	1d23      	adds	r3, r4, #4
 8004310:	f020 0007 	bic.w	r0, r0, #7
 8004314:	1ac2      	subs	r2, r0, r3
 8004316:	bf1c      	itt	ne
 8004318:	1a1b      	subne	r3, r3, r0
 800431a:	50a3      	strne	r3, [r4, r2]
 800431c:	e7af      	b.n	800427e <_malloc_r+0x22>
 800431e:	6862      	ldr	r2, [r4, #4]
 8004320:	42a3      	cmp	r3, r4
 8004322:	bf0c      	ite	eq
 8004324:	f8c8 2000 	streq.w	r2, [r8]
 8004328:	605a      	strne	r2, [r3, #4]
 800432a:	e7eb      	b.n	8004304 <_malloc_r+0xa8>
 800432c:	4623      	mov	r3, r4
 800432e:	6864      	ldr	r4, [r4, #4]
 8004330:	e7ae      	b.n	8004290 <_malloc_r+0x34>
 8004332:	463c      	mov	r4, r7
 8004334:	687f      	ldr	r7, [r7, #4]
 8004336:	e7b6      	b.n	80042a6 <_malloc_r+0x4a>
 8004338:	461a      	mov	r2, r3
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	42a3      	cmp	r3, r4
 800433e:	d1fb      	bne.n	8004338 <_malloc_r+0xdc>
 8004340:	2300      	movs	r3, #0
 8004342:	6053      	str	r3, [r2, #4]
 8004344:	e7de      	b.n	8004304 <_malloc_r+0xa8>
 8004346:	230c      	movs	r3, #12
 8004348:	6033      	str	r3, [r6, #0]
 800434a:	4630      	mov	r0, r6
 800434c:	f000 f80c 	bl	8004368 <__malloc_unlock>
 8004350:	e794      	b.n	800427c <_malloc_r+0x20>
 8004352:	6005      	str	r5, [r0, #0]
 8004354:	e7d6      	b.n	8004304 <_malloc_r+0xa8>
 8004356:	bf00      	nop
 8004358:	2000035c 	.word	0x2000035c

0800435c <__malloc_lock>:
 800435c:	4801      	ldr	r0, [pc, #4]	@ (8004364 <__malloc_lock+0x8>)
 800435e:	f7ff bf0e 	b.w	800417e <__retarget_lock_acquire_recursive>
 8004362:	bf00      	nop
 8004364:	20000354 	.word	0x20000354

08004368 <__malloc_unlock>:
 8004368:	4801      	ldr	r0, [pc, #4]	@ (8004370 <__malloc_unlock+0x8>)
 800436a:	f7ff bf09 	b.w	8004180 <__retarget_lock_release_recursive>
 800436e:	bf00      	nop
 8004370:	20000354 	.word	0x20000354

08004374 <__sfputc_r>:
 8004374:	6893      	ldr	r3, [r2, #8]
 8004376:	3b01      	subs	r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	b410      	push	{r4}
 800437c:	6093      	str	r3, [r2, #8]
 800437e:	da08      	bge.n	8004392 <__sfputc_r+0x1e>
 8004380:	6994      	ldr	r4, [r2, #24]
 8004382:	42a3      	cmp	r3, r4
 8004384:	db01      	blt.n	800438a <__sfputc_r+0x16>
 8004386:	290a      	cmp	r1, #10
 8004388:	d103      	bne.n	8004392 <__sfputc_r+0x1e>
 800438a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800438e:	f7ff bde8 	b.w	8003f62 <__swbuf_r>
 8004392:	6813      	ldr	r3, [r2, #0]
 8004394:	1c58      	adds	r0, r3, #1
 8004396:	6010      	str	r0, [r2, #0]
 8004398:	7019      	strb	r1, [r3, #0]
 800439a:	4608      	mov	r0, r1
 800439c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <__sfputs_r>:
 80043a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a4:	4606      	mov	r6, r0
 80043a6:	460f      	mov	r7, r1
 80043a8:	4614      	mov	r4, r2
 80043aa:	18d5      	adds	r5, r2, r3
 80043ac:	42ac      	cmp	r4, r5
 80043ae:	d101      	bne.n	80043b4 <__sfputs_r+0x12>
 80043b0:	2000      	movs	r0, #0
 80043b2:	e007      	b.n	80043c4 <__sfputs_r+0x22>
 80043b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043b8:	463a      	mov	r2, r7
 80043ba:	4630      	mov	r0, r6
 80043bc:	f7ff ffda 	bl	8004374 <__sfputc_r>
 80043c0:	1c43      	adds	r3, r0, #1
 80043c2:	d1f3      	bne.n	80043ac <__sfputs_r+0xa>
 80043c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043c8 <_vfiprintf_r>:
 80043c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043cc:	460d      	mov	r5, r1
 80043ce:	b09d      	sub	sp, #116	@ 0x74
 80043d0:	4614      	mov	r4, r2
 80043d2:	4698      	mov	r8, r3
 80043d4:	4606      	mov	r6, r0
 80043d6:	b118      	cbz	r0, 80043e0 <_vfiprintf_r+0x18>
 80043d8:	6a03      	ldr	r3, [r0, #32]
 80043da:	b90b      	cbnz	r3, 80043e0 <_vfiprintf_r+0x18>
 80043dc:	f7ff fcd8 	bl	8003d90 <__sinit>
 80043e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043e2:	07d9      	lsls	r1, r3, #31
 80043e4:	d405      	bmi.n	80043f2 <_vfiprintf_r+0x2a>
 80043e6:	89ab      	ldrh	r3, [r5, #12]
 80043e8:	059a      	lsls	r2, r3, #22
 80043ea:	d402      	bmi.n	80043f2 <_vfiprintf_r+0x2a>
 80043ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043ee:	f7ff fec6 	bl	800417e <__retarget_lock_acquire_recursive>
 80043f2:	89ab      	ldrh	r3, [r5, #12]
 80043f4:	071b      	lsls	r3, r3, #28
 80043f6:	d501      	bpl.n	80043fc <_vfiprintf_r+0x34>
 80043f8:	692b      	ldr	r3, [r5, #16]
 80043fa:	b99b      	cbnz	r3, 8004424 <_vfiprintf_r+0x5c>
 80043fc:	4629      	mov	r1, r5
 80043fe:	4630      	mov	r0, r6
 8004400:	f7ff fdee 	bl	8003fe0 <__swsetup_r>
 8004404:	b170      	cbz	r0, 8004424 <_vfiprintf_r+0x5c>
 8004406:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004408:	07dc      	lsls	r4, r3, #31
 800440a:	d504      	bpl.n	8004416 <_vfiprintf_r+0x4e>
 800440c:	f04f 30ff 	mov.w	r0, #4294967295
 8004410:	b01d      	add	sp, #116	@ 0x74
 8004412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004416:	89ab      	ldrh	r3, [r5, #12]
 8004418:	0598      	lsls	r0, r3, #22
 800441a:	d4f7      	bmi.n	800440c <_vfiprintf_r+0x44>
 800441c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800441e:	f7ff feaf 	bl	8004180 <__retarget_lock_release_recursive>
 8004422:	e7f3      	b.n	800440c <_vfiprintf_r+0x44>
 8004424:	2300      	movs	r3, #0
 8004426:	9309      	str	r3, [sp, #36]	@ 0x24
 8004428:	2320      	movs	r3, #32
 800442a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800442e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004432:	2330      	movs	r3, #48	@ 0x30
 8004434:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80045e4 <_vfiprintf_r+0x21c>
 8004438:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800443c:	f04f 0901 	mov.w	r9, #1
 8004440:	4623      	mov	r3, r4
 8004442:	469a      	mov	sl, r3
 8004444:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004448:	b10a      	cbz	r2, 800444e <_vfiprintf_r+0x86>
 800444a:	2a25      	cmp	r2, #37	@ 0x25
 800444c:	d1f9      	bne.n	8004442 <_vfiprintf_r+0x7a>
 800444e:	ebba 0b04 	subs.w	fp, sl, r4
 8004452:	d00b      	beq.n	800446c <_vfiprintf_r+0xa4>
 8004454:	465b      	mov	r3, fp
 8004456:	4622      	mov	r2, r4
 8004458:	4629      	mov	r1, r5
 800445a:	4630      	mov	r0, r6
 800445c:	f7ff ffa1 	bl	80043a2 <__sfputs_r>
 8004460:	3001      	adds	r0, #1
 8004462:	f000 80a7 	beq.w	80045b4 <_vfiprintf_r+0x1ec>
 8004466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004468:	445a      	add	r2, fp
 800446a:	9209      	str	r2, [sp, #36]	@ 0x24
 800446c:	f89a 3000 	ldrb.w	r3, [sl]
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 809f 	beq.w	80045b4 <_vfiprintf_r+0x1ec>
 8004476:	2300      	movs	r3, #0
 8004478:	f04f 32ff 	mov.w	r2, #4294967295
 800447c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004480:	f10a 0a01 	add.w	sl, sl, #1
 8004484:	9304      	str	r3, [sp, #16]
 8004486:	9307      	str	r3, [sp, #28]
 8004488:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800448c:	931a      	str	r3, [sp, #104]	@ 0x68
 800448e:	4654      	mov	r4, sl
 8004490:	2205      	movs	r2, #5
 8004492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004496:	4853      	ldr	r0, [pc, #332]	@ (80045e4 <_vfiprintf_r+0x21c>)
 8004498:	f7fb feba 	bl	8000210 <memchr>
 800449c:	9a04      	ldr	r2, [sp, #16]
 800449e:	b9d8      	cbnz	r0, 80044d8 <_vfiprintf_r+0x110>
 80044a0:	06d1      	lsls	r1, r2, #27
 80044a2:	bf44      	itt	mi
 80044a4:	2320      	movmi	r3, #32
 80044a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044aa:	0713      	lsls	r3, r2, #28
 80044ac:	bf44      	itt	mi
 80044ae:	232b      	movmi	r3, #43	@ 0x2b
 80044b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044b4:	f89a 3000 	ldrb.w	r3, [sl]
 80044b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80044ba:	d015      	beq.n	80044e8 <_vfiprintf_r+0x120>
 80044bc:	9a07      	ldr	r2, [sp, #28]
 80044be:	4654      	mov	r4, sl
 80044c0:	2000      	movs	r0, #0
 80044c2:	f04f 0c0a 	mov.w	ip, #10
 80044c6:	4621      	mov	r1, r4
 80044c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044cc:	3b30      	subs	r3, #48	@ 0x30
 80044ce:	2b09      	cmp	r3, #9
 80044d0:	d94b      	bls.n	800456a <_vfiprintf_r+0x1a2>
 80044d2:	b1b0      	cbz	r0, 8004502 <_vfiprintf_r+0x13a>
 80044d4:	9207      	str	r2, [sp, #28]
 80044d6:	e014      	b.n	8004502 <_vfiprintf_r+0x13a>
 80044d8:	eba0 0308 	sub.w	r3, r0, r8
 80044dc:	fa09 f303 	lsl.w	r3, r9, r3
 80044e0:	4313      	orrs	r3, r2
 80044e2:	9304      	str	r3, [sp, #16]
 80044e4:	46a2      	mov	sl, r4
 80044e6:	e7d2      	b.n	800448e <_vfiprintf_r+0xc6>
 80044e8:	9b03      	ldr	r3, [sp, #12]
 80044ea:	1d19      	adds	r1, r3, #4
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	9103      	str	r1, [sp, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	bfbb      	ittet	lt
 80044f4:	425b      	neglt	r3, r3
 80044f6:	f042 0202 	orrlt.w	r2, r2, #2
 80044fa:	9307      	strge	r3, [sp, #28]
 80044fc:	9307      	strlt	r3, [sp, #28]
 80044fe:	bfb8      	it	lt
 8004500:	9204      	strlt	r2, [sp, #16]
 8004502:	7823      	ldrb	r3, [r4, #0]
 8004504:	2b2e      	cmp	r3, #46	@ 0x2e
 8004506:	d10a      	bne.n	800451e <_vfiprintf_r+0x156>
 8004508:	7863      	ldrb	r3, [r4, #1]
 800450a:	2b2a      	cmp	r3, #42	@ 0x2a
 800450c:	d132      	bne.n	8004574 <_vfiprintf_r+0x1ac>
 800450e:	9b03      	ldr	r3, [sp, #12]
 8004510:	1d1a      	adds	r2, r3, #4
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	9203      	str	r2, [sp, #12]
 8004516:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800451a:	3402      	adds	r4, #2
 800451c:	9305      	str	r3, [sp, #20]
 800451e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80045f4 <_vfiprintf_r+0x22c>
 8004522:	7821      	ldrb	r1, [r4, #0]
 8004524:	2203      	movs	r2, #3
 8004526:	4650      	mov	r0, sl
 8004528:	f7fb fe72 	bl	8000210 <memchr>
 800452c:	b138      	cbz	r0, 800453e <_vfiprintf_r+0x176>
 800452e:	9b04      	ldr	r3, [sp, #16]
 8004530:	eba0 000a 	sub.w	r0, r0, sl
 8004534:	2240      	movs	r2, #64	@ 0x40
 8004536:	4082      	lsls	r2, r0
 8004538:	4313      	orrs	r3, r2
 800453a:	3401      	adds	r4, #1
 800453c:	9304      	str	r3, [sp, #16]
 800453e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004542:	4829      	ldr	r0, [pc, #164]	@ (80045e8 <_vfiprintf_r+0x220>)
 8004544:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004548:	2206      	movs	r2, #6
 800454a:	f7fb fe61 	bl	8000210 <memchr>
 800454e:	2800      	cmp	r0, #0
 8004550:	d03f      	beq.n	80045d2 <_vfiprintf_r+0x20a>
 8004552:	4b26      	ldr	r3, [pc, #152]	@ (80045ec <_vfiprintf_r+0x224>)
 8004554:	bb1b      	cbnz	r3, 800459e <_vfiprintf_r+0x1d6>
 8004556:	9b03      	ldr	r3, [sp, #12]
 8004558:	3307      	adds	r3, #7
 800455a:	f023 0307 	bic.w	r3, r3, #7
 800455e:	3308      	adds	r3, #8
 8004560:	9303      	str	r3, [sp, #12]
 8004562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004564:	443b      	add	r3, r7
 8004566:	9309      	str	r3, [sp, #36]	@ 0x24
 8004568:	e76a      	b.n	8004440 <_vfiprintf_r+0x78>
 800456a:	fb0c 3202 	mla	r2, ip, r2, r3
 800456e:	460c      	mov	r4, r1
 8004570:	2001      	movs	r0, #1
 8004572:	e7a8      	b.n	80044c6 <_vfiprintf_r+0xfe>
 8004574:	2300      	movs	r3, #0
 8004576:	3401      	adds	r4, #1
 8004578:	9305      	str	r3, [sp, #20]
 800457a:	4619      	mov	r1, r3
 800457c:	f04f 0c0a 	mov.w	ip, #10
 8004580:	4620      	mov	r0, r4
 8004582:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004586:	3a30      	subs	r2, #48	@ 0x30
 8004588:	2a09      	cmp	r2, #9
 800458a:	d903      	bls.n	8004594 <_vfiprintf_r+0x1cc>
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0c6      	beq.n	800451e <_vfiprintf_r+0x156>
 8004590:	9105      	str	r1, [sp, #20]
 8004592:	e7c4      	b.n	800451e <_vfiprintf_r+0x156>
 8004594:	fb0c 2101 	mla	r1, ip, r1, r2
 8004598:	4604      	mov	r4, r0
 800459a:	2301      	movs	r3, #1
 800459c:	e7f0      	b.n	8004580 <_vfiprintf_r+0x1b8>
 800459e:	ab03      	add	r3, sp, #12
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	462a      	mov	r2, r5
 80045a4:	4b12      	ldr	r3, [pc, #72]	@ (80045f0 <_vfiprintf_r+0x228>)
 80045a6:	a904      	add	r1, sp, #16
 80045a8:	4630      	mov	r0, r6
 80045aa:	f3af 8000 	nop.w
 80045ae:	4607      	mov	r7, r0
 80045b0:	1c78      	adds	r0, r7, #1
 80045b2:	d1d6      	bne.n	8004562 <_vfiprintf_r+0x19a>
 80045b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80045b6:	07d9      	lsls	r1, r3, #31
 80045b8:	d405      	bmi.n	80045c6 <_vfiprintf_r+0x1fe>
 80045ba:	89ab      	ldrh	r3, [r5, #12]
 80045bc:	059a      	lsls	r2, r3, #22
 80045be:	d402      	bmi.n	80045c6 <_vfiprintf_r+0x1fe>
 80045c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045c2:	f7ff fddd 	bl	8004180 <__retarget_lock_release_recursive>
 80045c6:	89ab      	ldrh	r3, [r5, #12]
 80045c8:	065b      	lsls	r3, r3, #25
 80045ca:	f53f af1f 	bmi.w	800440c <_vfiprintf_r+0x44>
 80045ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045d0:	e71e      	b.n	8004410 <_vfiprintf_r+0x48>
 80045d2:	ab03      	add	r3, sp, #12
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	462a      	mov	r2, r5
 80045d8:	4b05      	ldr	r3, [pc, #20]	@ (80045f0 <_vfiprintf_r+0x228>)
 80045da:	a904      	add	r1, sp, #16
 80045dc:	4630      	mov	r0, r6
 80045de:	f000 f879 	bl	80046d4 <_printf_i>
 80045e2:	e7e4      	b.n	80045ae <_vfiprintf_r+0x1e6>
 80045e4:	08005020 	.word	0x08005020
 80045e8:	0800502a 	.word	0x0800502a
 80045ec:	00000000 	.word	0x00000000
 80045f0:	080043a3 	.word	0x080043a3
 80045f4:	08005026 	.word	0x08005026

080045f8 <_printf_common>:
 80045f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045fc:	4616      	mov	r6, r2
 80045fe:	4698      	mov	r8, r3
 8004600:	688a      	ldr	r2, [r1, #8]
 8004602:	690b      	ldr	r3, [r1, #16]
 8004604:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004608:	4293      	cmp	r3, r2
 800460a:	bfb8      	it	lt
 800460c:	4613      	movlt	r3, r2
 800460e:	6033      	str	r3, [r6, #0]
 8004610:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004614:	4607      	mov	r7, r0
 8004616:	460c      	mov	r4, r1
 8004618:	b10a      	cbz	r2, 800461e <_printf_common+0x26>
 800461a:	3301      	adds	r3, #1
 800461c:	6033      	str	r3, [r6, #0]
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	0699      	lsls	r1, r3, #26
 8004622:	bf42      	ittt	mi
 8004624:	6833      	ldrmi	r3, [r6, #0]
 8004626:	3302      	addmi	r3, #2
 8004628:	6033      	strmi	r3, [r6, #0]
 800462a:	6825      	ldr	r5, [r4, #0]
 800462c:	f015 0506 	ands.w	r5, r5, #6
 8004630:	d106      	bne.n	8004640 <_printf_common+0x48>
 8004632:	f104 0a19 	add.w	sl, r4, #25
 8004636:	68e3      	ldr	r3, [r4, #12]
 8004638:	6832      	ldr	r2, [r6, #0]
 800463a:	1a9b      	subs	r3, r3, r2
 800463c:	42ab      	cmp	r3, r5
 800463e:	dc26      	bgt.n	800468e <_printf_common+0x96>
 8004640:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004644:	6822      	ldr	r2, [r4, #0]
 8004646:	3b00      	subs	r3, #0
 8004648:	bf18      	it	ne
 800464a:	2301      	movne	r3, #1
 800464c:	0692      	lsls	r2, r2, #26
 800464e:	d42b      	bmi.n	80046a8 <_printf_common+0xb0>
 8004650:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004654:	4641      	mov	r1, r8
 8004656:	4638      	mov	r0, r7
 8004658:	47c8      	blx	r9
 800465a:	3001      	adds	r0, #1
 800465c:	d01e      	beq.n	800469c <_printf_common+0xa4>
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	6922      	ldr	r2, [r4, #16]
 8004662:	f003 0306 	and.w	r3, r3, #6
 8004666:	2b04      	cmp	r3, #4
 8004668:	bf02      	ittt	eq
 800466a:	68e5      	ldreq	r5, [r4, #12]
 800466c:	6833      	ldreq	r3, [r6, #0]
 800466e:	1aed      	subeq	r5, r5, r3
 8004670:	68a3      	ldr	r3, [r4, #8]
 8004672:	bf0c      	ite	eq
 8004674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004678:	2500      	movne	r5, #0
 800467a:	4293      	cmp	r3, r2
 800467c:	bfc4      	itt	gt
 800467e:	1a9b      	subgt	r3, r3, r2
 8004680:	18ed      	addgt	r5, r5, r3
 8004682:	2600      	movs	r6, #0
 8004684:	341a      	adds	r4, #26
 8004686:	42b5      	cmp	r5, r6
 8004688:	d11a      	bne.n	80046c0 <_printf_common+0xc8>
 800468a:	2000      	movs	r0, #0
 800468c:	e008      	b.n	80046a0 <_printf_common+0xa8>
 800468e:	2301      	movs	r3, #1
 8004690:	4652      	mov	r2, sl
 8004692:	4641      	mov	r1, r8
 8004694:	4638      	mov	r0, r7
 8004696:	47c8      	blx	r9
 8004698:	3001      	adds	r0, #1
 800469a:	d103      	bne.n	80046a4 <_printf_common+0xac>
 800469c:	f04f 30ff 	mov.w	r0, #4294967295
 80046a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a4:	3501      	adds	r5, #1
 80046a6:	e7c6      	b.n	8004636 <_printf_common+0x3e>
 80046a8:	18e1      	adds	r1, r4, r3
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	2030      	movs	r0, #48	@ 0x30
 80046ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046b2:	4422      	add	r2, r4
 80046b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046bc:	3302      	adds	r3, #2
 80046be:	e7c7      	b.n	8004650 <_printf_common+0x58>
 80046c0:	2301      	movs	r3, #1
 80046c2:	4622      	mov	r2, r4
 80046c4:	4641      	mov	r1, r8
 80046c6:	4638      	mov	r0, r7
 80046c8:	47c8      	blx	r9
 80046ca:	3001      	adds	r0, #1
 80046cc:	d0e6      	beq.n	800469c <_printf_common+0xa4>
 80046ce:	3601      	adds	r6, #1
 80046d0:	e7d9      	b.n	8004686 <_printf_common+0x8e>
	...

080046d4 <_printf_i>:
 80046d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046d8:	7e0f      	ldrb	r7, [r1, #24]
 80046da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046dc:	2f78      	cmp	r7, #120	@ 0x78
 80046de:	4691      	mov	r9, r2
 80046e0:	4680      	mov	r8, r0
 80046e2:	460c      	mov	r4, r1
 80046e4:	469a      	mov	sl, r3
 80046e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046ea:	d807      	bhi.n	80046fc <_printf_i+0x28>
 80046ec:	2f62      	cmp	r7, #98	@ 0x62
 80046ee:	d80a      	bhi.n	8004706 <_printf_i+0x32>
 80046f0:	2f00      	cmp	r7, #0
 80046f2:	f000 80d2 	beq.w	800489a <_printf_i+0x1c6>
 80046f6:	2f58      	cmp	r7, #88	@ 0x58
 80046f8:	f000 80b9 	beq.w	800486e <_printf_i+0x19a>
 80046fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004700:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004704:	e03a      	b.n	800477c <_printf_i+0xa8>
 8004706:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800470a:	2b15      	cmp	r3, #21
 800470c:	d8f6      	bhi.n	80046fc <_printf_i+0x28>
 800470e:	a101      	add	r1, pc, #4	@ (adr r1, 8004714 <_printf_i+0x40>)
 8004710:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004714:	0800476d 	.word	0x0800476d
 8004718:	08004781 	.word	0x08004781
 800471c:	080046fd 	.word	0x080046fd
 8004720:	080046fd 	.word	0x080046fd
 8004724:	080046fd 	.word	0x080046fd
 8004728:	080046fd 	.word	0x080046fd
 800472c:	08004781 	.word	0x08004781
 8004730:	080046fd 	.word	0x080046fd
 8004734:	080046fd 	.word	0x080046fd
 8004738:	080046fd 	.word	0x080046fd
 800473c:	080046fd 	.word	0x080046fd
 8004740:	08004881 	.word	0x08004881
 8004744:	080047ab 	.word	0x080047ab
 8004748:	0800483b 	.word	0x0800483b
 800474c:	080046fd 	.word	0x080046fd
 8004750:	080046fd 	.word	0x080046fd
 8004754:	080048a3 	.word	0x080048a3
 8004758:	080046fd 	.word	0x080046fd
 800475c:	080047ab 	.word	0x080047ab
 8004760:	080046fd 	.word	0x080046fd
 8004764:	080046fd 	.word	0x080046fd
 8004768:	08004843 	.word	0x08004843
 800476c:	6833      	ldr	r3, [r6, #0]
 800476e:	1d1a      	adds	r2, r3, #4
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6032      	str	r2, [r6, #0]
 8004774:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004778:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800477c:	2301      	movs	r3, #1
 800477e:	e09d      	b.n	80048bc <_printf_i+0x1e8>
 8004780:	6833      	ldr	r3, [r6, #0]
 8004782:	6820      	ldr	r0, [r4, #0]
 8004784:	1d19      	adds	r1, r3, #4
 8004786:	6031      	str	r1, [r6, #0]
 8004788:	0606      	lsls	r6, r0, #24
 800478a:	d501      	bpl.n	8004790 <_printf_i+0xbc>
 800478c:	681d      	ldr	r5, [r3, #0]
 800478e:	e003      	b.n	8004798 <_printf_i+0xc4>
 8004790:	0645      	lsls	r5, r0, #25
 8004792:	d5fb      	bpl.n	800478c <_printf_i+0xb8>
 8004794:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004798:	2d00      	cmp	r5, #0
 800479a:	da03      	bge.n	80047a4 <_printf_i+0xd0>
 800479c:	232d      	movs	r3, #45	@ 0x2d
 800479e:	426d      	negs	r5, r5
 80047a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047a4:	4859      	ldr	r0, [pc, #356]	@ (800490c <_printf_i+0x238>)
 80047a6:	230a      	movs	r3, #10
 80047a8:	e011      	b.n	80047ce <_printf_i+0xfa>
 80047aa:	6821      	ldr	r1, [r4, #0]
 80047ac:	6833      	ldr	r3, [r6, #0]
 80047ae:	0608      	lsls	r0, r1, #24
 80047b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80047b4:	d402      	bmi.n	80047bc <_printf_i+0xe8>
 80047b6:	0649      	lsls	r1, r1, #25
 80047b8:	bf48      	it	mi
 80047ba:	b2ad      	uxthmi	r5, r5
 80047bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80047be:	4853      	ldr	r0, [pc, #332]	@ (800490c <_printf_i+0x238>)
 80047c0:	6033      	str	r3, [r6, #0]
 80047c2:	bf14      	ite	ne
 80047c4:	230a      	movne	r3, #10
 80047c6:	2308      	moveq	r3, #8
 80047c8:	2100      	movs	r1, #0
 80047ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047ce:	6866      	ldr	r6, [r4, #4]
 80047d0:	60a6      	str	r6, [r4, #8]
 80047d2:	2e00      	cmp	r6, #0
 80047d4:	bfa2      	ittt	ge
 80047d6:	6821      	ldrge	r1, [r4, #0]
 80047d8:	f021 0104 	bicge.w	r1, r1, #4
 80047dc:	6021      	strge	r1, [r4, #0]
 80047de:	b90d      	cbnz	r5, 80047e4 <_printf_i+0x110>
 80047e0:	2e00      	cmp	r6, #0
 80047e2:	d04b      	beq.n	800487c <_printf_i+0x1a8>
 80047e4:	4616      	mov	r6, r2
 80047e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80047ea:	fb03 5711 	mls	r7, r3, r1, r5
 80047ee:	5dc7      	ldrb	r7, [r0, r7]
 80047f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047f4:	462f      	mov	r7, r5
 80047f6:	42bb      	cmp	r3, r7
 80047f8:	460d      	mov	r5, r1
 80047fa:	d9f4      	bls.n	80047e6 <_printf_i+0x112>
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d10b      	bne.n	8004818 <_printf_i+0x144>
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	07df      	lsls	r7, r3, #31
 8004804:	d508      	bpl.n	8004818 <_printf_i+0x144>
 8004806:	6923      	ldr	r3, [r4, #16]
 8004808:	6861      	ldr	r1, [r4, #4]
 800480a:	4299      	cmp	r1, r3
 800480c:	bfde      	ittt	le
 800480e:	2330      	movle	r3, #48	@ 0x30
 8004810:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004814:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004818:	1b92      	subs	r2, r2, r6
 800481a:	6122      	str	r2, [r4, #16]
 800481c:	f8cd a000 	str.w	sl, [sp]
 8004820:	464b      	mov	r3, r9
 8004822:	aa03      	add	r2, sp, #12
 8004824:	4621      	mov	r1, r4
 8004826:	4640      	mov	r0, r8
 8004828:	f7ff fee6 	bl	80045f8 <_printf_common>
 800482c:	3001      	adds	r0, #1
 800482e:	d14a      	bne.n	80048c6 <_printf_i+0x1f2>
 8004830:	f04f 30ff 	mov.w	r0, #4294967295
 8004834:	b004      	add	sp, #16
 8004836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	f043 0320 	orr.w	r3, r3, #32
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	4833      	ldr	r0, [pc, #204]	@ (8004910 <_printf_i+0x23c>)
 8004844:	2778      	movs	r7, #120	@ 0x78
 8004846:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	6831      	ldr	r1, [r6, #0]
 800484e:	061f      	lsls	r7, r3, #24
 8004850:	f851 5b04 	ldr.w	r5, [r1], #4
 8004854:	d402      	bmi.n	800485c <_printf_i+0x188>
 8004856:	065f      	lsls	r7, r3, #25
 8004858:	bf48      	it	mi
 800485a:	b2ad      	uxthmi	r5, r5
 800485c:	6031      	str	r1, [r6, #0]
 800485e:	07d9      	lsls	r1, r3, #31
 8004860:	bf44      	itt	mi
 8004862:	f043 0320 	orrmi.w	r3, r3, #32
 8004866:	6023      	strmi	r3, [r4, #0]
 8004868:	b11d      	cbz	r5, 8004872 <_printf_i+0x19e>
 800486a:	2310      	movs	r3, #16
 800486c:	e7ac      	b.n	80047c8 <_printf_i+0xf4>
 800486e:	4827      	ldr	r0, [pc, #156]	@ (800490c <_printf_i+0x238>)
 8004870:	e7e9      	b.n	8004846 <_printf_i+0x172>
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	f023 0320 	bic.w	r3, r3, #32
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	e7f6      	b.n	800486a <_printf_i+0x196>
 800487c:	4616      	mov	r6, r2
 800487e:	e7bd      	b.n	80047fc <_printf_i+0x128>
 8004880:	6833      	ldr	r3, [r6, #0]
 8004882:	6825      	ldr	r5, [r4, #0]
 8004884:	6961      	ldr	r1, [r4, #20]
 8004886:	1d18      	adds	r0, r3, #4
 8004888:	6030      	str	r0, [r6, #0]
 800488a:	062e      	lsls	r6, r5, #24
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	d501      	bpl.n	8004894 <_printf_i+0x1c0>
 8004890:	6019      	str	r1, [r3, #0]
 8004892:	e002      	b.n	800489a <_printf_i+0x1c6>
 8004894:	0668      	lsls	r0, r5, #25
 8004896:	d5fb      	bpl.n	8004890 <_printf_i+0x1bc>
 8004898:	8019      	strh	r1, [r3, #0]
 800489a:	2300      	movs	r3, #0
 800489c:	6123      	str	r3, [r4, #16]
 800489e:	4616      	mov	r6, r2
 80048a0:	e7bc      	b.n	800481c <_printf_i+0x148>
 80048a2:	6833      	ldr	r3, [r6, #0]
 80048a4:	1d1a      	adds	r2, r3, #4
 80048a6:	6032      	str	r2, [r6, #0]
 80048a8:	681e      	ldr	r6, [r3, #0]
 80048aa:	6862      	ldr	r2, [r4, #4]
 80048ac:	2100      	movs	r1, #0
 80048ae:	4630      	mov	r0, r6
 80048b0:	f7fb fcae 	bl	8000210 <memchr>
 80048b4:	b108      	cbz	r0, 80048ba <_printf_i+0x1e6>
 80048b6:	1b80      	subs	r0, r0, r6
 80048b8:	6060      	str	r0, [r4, #4]
 80048ba:	6863      	ldr	r3, [r4, #4]
 80048bc:	6123      	str	r3, [r4, #16]
 80048be:	2300      	movs	r3, #0
 80048c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048c4:	e7aa      	b.n	800481c <_printf_i+0x148>
 80048c6:	6923      	ldr	r3, [r4, #16]
 80048c8:	4632      	mov	r2, r6
 80048ca:	4649      	mov	r1, r9
 80048cc:	4640      	mov	r0, r8
 80048ce:	47d0      	blx	sl
 80048d0:	3001      	adds	r0, #1
 80048d2:	d0ad      	beq.n	8004830 <_printf_i+0x15c>
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	079b      	lsls	r3, r3, #30
 80048d8:	d413      	bmi.n	8004902 <_printf_i+0x22e>
 80048da:	68e0      	ldr	r0, [r4, #12]
 80048dc:	9b03      	ldr	r3, [sp, #12]
 80048de:	4298      	cmp	r0, r3
 80048e0:	bfb8      	it	lt
 80048e2:	4618      	movlt	r0, r3
 80048e4:	e7a6      	b.n	8004834 <_printf_i+0x160>
 80048e6:	2301      	movs	r3, #1
 80048e8:	4632      	mov	r2, r6
 80048ea:	4649      	mov	r1, r9
 80048ec:	4640      	mov	r0, r8
 80048ee:	47d0      	blx	sl
 80048f0:	3001      	adds	r0, #1
 80048f2:	d09d      	beq.n	8004830 <_printf_i+0x15c>
 80048f4:	3501      	adds	r5, #1
 80048f6:	68e3      	ldr	r3, [r4, #12]
 80048f8:	9903      	ldr	r1, [sp, #12]
 80048fa:	1a5b      	subs	r3, r3, r1
 80048fc:	42ab      	cmp	r3, r5
 80048fe:	dcf2      	bgt.n	80048e6 <_printf_i+0x212>
 8004900:	e7eb      	b.n	80048da <_printf_i+0x206>
 8004902:	2500      	movs	r5, #0
 8004904:	f104 0619 	add.w	r6, r4, #25
 8004908:	e7f5      	b.n	80048f6 <_printf_i+0x222>
 800490a:	bf00      	nop
 800490c:	08005031 	.word	0x08005031
 8004910:	08005042 	.word	0x08005042

08004914 <__sflush_r>:
 8004914:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800491c:	0716      	lsls	r6, r2, #28
 800491e:	4605      	mov	r5, r0
 8004920:	460c      	mov	r4, r1
 8004922:	d454      	bmi.n	80049ce <__sflush_r+0xba>
 8004924:	684b      	ldr	r3, [r1, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	dc02      	bgt.n	8004930 <__sflush_r+0x1c>
 800492a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800492c:	2b00      	cmp	r3, #0
 800492e:	dd48      	ble.n	80049c2 <__sflush_r+0xae>
 8004930:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004932:	2e00      	cmp	r6, #0
 8004934:	d045      	beq.n	80049c2 <__sflush_r+0xae>
 8004936:	2300      	movs	r3, #0
 8004938:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800493c:	682f      	ldr	r7, [r5, #0]
 800493e:	6a21      	ldr	r1, [r4, #32]
 8004940:	602b      	str	r3, [r5, #0]
 8004942:	d030      	beq.n	80049a6 <__sflush_r+0x92>
 8004944:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004946:	89a3      	ldrh	r3, [r4, #12]
 8004948:	0759      	lsls	r1, r3, #29
 800494a:	d505      	bpl.n	8004958 <__sflush_r+0x44>
 800494c:	6863      	ldr	r3, [r4, #4]
 800494e:	1ad2      	subs	r2, r2, r3
 8004950:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004952:	b10b      	cbz	r3, 8004958 <__sflush_r+0x44>
 8004954:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004956:	1ad2      	subs	r2, r2, r3
 8004958:	2300      	movs	r3, #0
 800495a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800495c:	6a21      	ldr	r1, [r4, #32]
 800495e:	4628      	mov	r0, r5
 8004960:	47b0      	blx	r6
 8004962:	1c43      	adds	r3, r0, #1
 8004964:	89a3      	ldrh	r3, [r4, #12]
 8004966:	d106      	bne.n	8004976 <__sflush_r+0x62>
 8004968:	6829      	ldr	r1, [r5, #0]
 800496a:	291d      	cmp	r1, #29
 800496c:	d82b      	bhi.n	80049c6 <__sflush_r+0xb2>
 800496e:	4a2a      	ldr	r2, [pc, #168]	@ (8004a18 <__sflush_r+0x104>)
 8004970:	410a      	asrs	r2, r1
 8004972:	07d6      	lsls	r6, r2, #31
 8004974:	d427      	bmi.n	80049c6 <__sflush_r+0xb2>
 8004976:	2200      	movs	r2, #0
 8004978:	6062      	str	r2, [r4, #4]
 800497a:	04d9      	lsls	r1, r3, #19
 800497c:	6922      	ldr	r2, [r4, #16]
 800497e:	6022      	str	r2, [r4, #0]
 8004980:	d504      	bpl.n	800498c <__sflush_r+0x78>
 8004982:	1c42      	adds	r2, r0, #1
 8004984:	d101      	bne.n	800498a <__sflush_r+0x76>
 8004986:	682b      	ldr	r3, [r5, #0]
 8004988:	b903      	cbnz	r3, 800498c <__sflush_r+0x78>
 800498a:	6560      	str	r0, [r4, #84]	@ 0x54
 800498c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800498e:	602f      	str	r7, [r5, #0]
 8004990:	b1b9      	cbz	r1, 80049c2 <__sflush_r+0xae>
 8004992:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004996:	4299      	cmp	r1, r3
 8004998:	d002      	beq.n	80049a0 <__sflush_r+0x8c>
 800499a:	4628      	mov	r0, r5
 800499c:	f7ff fbf2 	bl	8004184 <_free_r>
 80049a0:	2300      	movs	r3, #0
 80049a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80049a4:	e00d      	b.n	80049c2 <__sflush_r+0xae>
 80049a6:	2301      	movs	r3, #1
 80049a8:	4628      	mov	r0, r5
 80049aa:	47b0      	blx	r6
 80049ac:	4602      	mov	r2, r0
 80049ae:	1c50      	adds	r0, r2, #1
 80049b0:	d1c9      	bne.n	8004946 <__sflush_r+0x32>
 80049b2:	682b      	ldr	r3, [r5, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0c6      	beq.n	8004946 <__sflush_r+0x32>
 80049b8:	2b1d      	cmp	r3, #29
 80049ba:	d001      	beq.n	80049c0 <__sflush_r+0xac>
 80049bc:	2b16      	cmp	r3, #22
 80049be:	d11e      	bne.n	80049fe <__sflush_r+0xea>
 80049c0:	602f      	str	r7, [r5, #0]
 80049c2:	2000      	movs	r0, #0
 80049c4:	e022      	b.n	8004a0c <__sflush_r+0xf8>
 80049c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049ca:	b21b      	sxth	r3, r3
 80049cc:	e01b      	b.n	8004a06 <__sflush_r+0xf2>
 80049ce:	690f      	ldr	r7, [r1, #16]
 80049d0:	2f00      	cmp	r7, #0
 80049d2:	d0f6      	beq.n	80049c2 <__sflush_r+0xae>
 80049d4:	0793      	lsls	r3, r2, #30
 80049d6:	680e      	ldr	r6, [r1, #0]
 80049d8:	bf08      	it	eq
 80049da:	694b      	ldreq	r3, [r1, #20]
 80049dc:	600f      	str	r7, [r1, #0]
 80049de:	bf18      	it	ne
 80049e0:	2300      	movne	r3, #0
 80049e2:	eba6 0807 	sub.w	r8, r6, r7
 80049e6:	608b      	str	r3, [r1, #8]
 80049e8:	f1b8 0f00 	cmp.w	r8, #0
 80049ec:	dde9      	ble.n	80049c2 <__sflush_r+0xae>
 80049ee:	6a21      	ldr	r1, [r4, #32]
 80049f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80049f2:	4643      	mov	r3, r8
 80049f4:	463a      	mov	r2, r7
 80049f6:	4628      	mov	r0, r5
 80049f8:	47b0      	blx	r6
 80049fa:	2800      	cmp	r0, #0
 80049fc:	dc08      	bgt.n	8004a10 <__sflush_r+0xfc>
 80049fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a06:	81a3      	strh	r3, [r4, #12]
 8004a08:	f04f 30ff 	mov.w	r0, #4294967295
 8004a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a10:	4407      	add	r7, r0
 8004a12:	eba8 0800 	sub.w	r8, r8, r0
 8004a16:	e7e7      	b.n	80049e8 <__sflush_r+0xd4>
 8004a18:	dfbffffe 	.word	0xdfbffffe

08004a1c <_fflush_r>:
 8004a1c:	b538      	push	{r3, r4, r5, lr}
 8004a1e:	690b      	ldr	r3, [r1, #16]
 8004a20:	4605      	mov	r5, r0
 8004a22:	460c      	mov	r4, r1
 8004a24:	b913      	cbnz	r3, 8004a2c <_fflush_r+0x10>
 8004a26:	2500      	movs	r5, #0
 8004a28:	4628      	mov	r0, r5
 8004a2a:	bd38      	pop	{r3, r4, r5, pc}
 8004a2c:	b118      	cbz	r0, 8004a36 <_fflush_r+0x1a>
 8004a2e:	6a03      	ldr	r3, [r0, #32]
 8004a30:	b90b      	cbnz	r3, 8004a36 <_fflush_r+0x1a>
 8004a32:	f7ff f9ad 	bl	8003d90 <__sinit>
 8004a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0f3      	beq.n	8004a26 <_fflush_r+0xa>
 8004a3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a40:	07d0      	lsls	r0, r2, #31
 8004a42:	d404      	bmi.n	8004a4e <_fflush_r+0x32>
 8004a44:	0599      	lsls	r1, r3, #22
 8004a46:	d402      	bmi.n	8004a4e <_fflush_r+0x32>
 8004a48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a4a:	f7ff fb98 	bl	800417e <__retarget_lock_acquire_recursive>
 8004a4e:	4628      	mov	r0, r5
 8004a50:	4621      	mov	r1, r4
 8004a52:	f7ff ff5f 	bl	8004914 <__sflush_r>
 8004a56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a58:	07da      	lsls	r2, r3, #31
 8004a5a:	4605      	mov	r5, r0
 8004a5c:	d4e4      	bmi.n	8004a28 <_fflush_r+0xc>
 8004a5e:	89a3      	ldrh	r3, [r4, #12]
 8004a60:	059b      	lsls	r3, r3, #22
 8004a62:	d4e1      	bmi.n	8004a28 <_fflush_r+0xc>
 8004a64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a66:	f7ff fb8b 	bl	8004180 <__retarget_lock_release_recursive>
 8004a6a:	e7dd      	b.n	8004a28 <_fflush_r+0xc>

08004a6c <__swhatbuf_r>:
 8004a6c:	b570      	push	{r4, r5, r6, lr}
 8004a6e:	460c      	mov	r4, r1
 8004a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a74:	2900      	cmp	r1, #0
 8004a76:	b096      	sub	sp, #88	@ 0x58
 8004a78:	4615      	mov	r5, r2
 8004a7a:	461e      	mov	r6, r3
 8004a7c:	da0d      	bge.n	8004a9a <__swhatbuf_r+0x2e>
 8004a7e:	89a3      	ldrh	r3, [r4, #12]
 8004a80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004a84:	f04f 0100 	mov.w	r1, #0
 8004a88:	bf14      	ite	ne
 8004a8a:	2340      	movne	r3, #64	@ 0x40
 8004a8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004a90:	2000      	movs	r0, #0
 8004a92:	6031      	str	r1, [r6, #0]
 8004a94:	602b      	str	r3, [r5, #0]
 8004a96:	b016      	add	sp, #88	@ 0x58
 8004a98:	bd70      	pop	{r4, r5, r6, pc}
 8004a9a:	466a      	mov	r2, sp
 8004a9c:	f000 f848 	bl	8004b30 <_fstat_r>
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	dbec      	blt.n	8004a7e <__swhatbuf_r+0x12>
 8004aa4:	9901      	ldr	r1, [sp, #4]
 8004aa6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004aaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004aae:	4259      	negs	r1, r3
 8004ab0:	4159      	adcs	r1, r3
 8004ab2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ab6:	e7eb      	b.n	8004a90 <__swhatbuf_r+0x24>

08004ab8 <__smakebuf_r>:
 8004ab8:	898b      	ldrh	r3, [r1, #12]
 8004aba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004abc:	079d      	lsls	r5, r3, #30
 8004abe:	4606      	mov	r6, r0
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	d507      	bpl.n	8004ad4 <__smakebuf_r+0x1c>
 8004ac4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004ac8:	6023      	str	r3, [r4, #0]
 8004aca:	6123      	str	r3, [r4, #16]
 8004acc:	2301      	movs	r3, #1
 8004ace:	6163      	str	r3, [r4, #20]
 8004ad0:	b003      	add	sp, #12
 8004ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ad4:	ab01      	add	r3, sp, #4
 8004ad6:	466a      	mov	r2, sp
 8004ad8:	f7ff ffc8 	bl	8004a6c <__swhatbuf_r>
 8004adc:	9f00      	ldr	r7, [sp, #0]
 8004ade:	4605      	mov	r5, r0
 8004ae0:	4639      	mov	r1, r7
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	f7ff fbba 	bl	800425c <_malloc_r>
 8004ae8:	b948      	cbnz	r0, 8004afe <__smakebuf_r+0x46>
 8004aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aee:	059a      	lsls	r2, r3, #22
 8004af0:	d4ee      	bmi.n	8004ad0 <__smakebuf_r+0x18>
 8004af2:	f023 0303 	bic.w	r3, r3, #3
 8004af6:	f043 0302 	orr.w	r3, r3, #2
 8004afa:	81a3      	strh	r3, [r4, #12]
 8004afc:	e7e2      	b.n	8004ac4 <__smakebuf_r+0xc>
 8004afe:	89a3      	ldrh	r3, [r4, #12]
 8004b00:	6020      	str	r0, [r4, #0]
 8004b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b06:	81a3      	strh	r3, [r4, #12]
 8004b08:	9b01      	ldr	r3, [sp, #4]
 8004b0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004b0e:	b15b      	cbz	r3, 8004b28 <__smakebuf_r+0x70>
 8004b10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b14:	4630      	mov	r0, r6
 8004b16:	f000 f81d 	bl	8004b54 <_isatty_r>
 8004b1a:	b128      	cbz	r0, 8004b28 <__smakebuf_r+0x70>
 8004b1c:	89a3      	ldrh	r3, [r4, #12]
 8004b1e:	f023 0303 	bic.w	r3, r3, #3
 8004b22:	f043 0301 	orr.w	r3, r3, #1
 8004b26:	81a3      	strh	r3, [r4, #12]
 8004b28:	89a3      	ldrh	r3, [r4, #12]
 8004b2a:	431d      	orrs	r5, r3
 8004b2c:	81a5      	strh	r5, [r4, #12]
 8004b2e:	e7cf      	b.n	8004ad0 <__smakebuf_r+0x18>

08004b30 <_fstat_r>:
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	4d07      	ldr	r5, [pc, #28]	@ (8004b50 <_fstat_r+0x20>)
 8004b34:	2300      	movs	r3, #0
 8004b36:	4604      	mov	r4, r0
 8004b38:	4608      	mov	r0, r1
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	602b      	str	r3, [r5, #0]
 8004b3e:	f7fc fe03 	bl	8001748 <_fstat>
 8004b42:	1c43      	adds	r3, r0, #1
 8004b44:	d102      	bne.n	8004b4c <_fstat_r+0x1c>
 8004b46:	682b      	ldr	r3, [r5, #0]
 8004b48:	b103      	cbz	r3, 8004b4c <_fstat_r+0x1c>
 8004b4a:	6023      	str	r3, [r4, #0]
 8004b4c:	bd38      	pop	{r3, r4, r5, pc}
 8004b4e:	bf00      	nop
 8004b50:	20000350 	.word	0x20000350

08004b54 <_isatty_r>:
 8004b54:	b538      	push	{r3, r4, r5, lr}
 8004b56:	4d06      	ldr	r5, [pc, #24]	@ (8004b70 <_isatty_r+0x1c>)
 8004b58:	2300      	movs	r3, #0
 8004b5a:	4604      	mov	r4, r0
 8004b5c:	4608      	mov	r0, r1
 8004b5e:	602b      	str	r3, [r5, #0]
 8004b60:	f7fc fe02 	bl	8001768 <_isatty>
 8004b64:	1c43      	adds	r3, r0, #1
 8004b66:	d102      	bne.n	8004b6e <_isatty_r+0x1a>
 8004b68:	682b      	ldr	r3, [r5, #0]
 8004b6a:	b103      	cbz	r3, 8004b6e <_isatty_r+0x1a>
 8004b6c:	6023      	str	r3, [r4, #0]
 8004b6e:	bd38      	pop	{r3, r4, r5, pc}
 8004b70:	20000350 	.word	0x20000350

08004b74 <_sbrk_r>:
 8004b74:	b538      	push	{r3, r4, r5, lr}
 8004b76:	4d06      	ldr	r5, [pc, #24]	@ (8004b90 <_sbrk_r+0x1c>)
 8004b78:	2300      	movs	r3, #0
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	4608      	mov	r0, r1
 8004b7e:	602b      	str	r3, [r5, #0]
 8004b80:	f7fc fe0a 	bl	8001798 <_sbrk>
 8004b84:	1c43      	adds	r3, r0, #1
 8004b86:	d102      	bne.n	8004b8e <_sbrk_r+0x1a>
 8004b88:	682b      	ldr	r3, [r5, #0]
 8004b8a:	b103      	cbz	r3, 8004b8e <_sbrk_r+0x1a>
 8004b8c:	6023      	str	r3, [r4, #0]
 8004b8e:	bd38      	pop	{r3, r4, r5, pc}
 8004b90:	20000350 	.word	0x20000350

08004b94 <_init>:
 8004b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b96:	bf00      	nop
 8004b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9a:	bc08      	pop	{r3}
 8004b9c:	469e      	mov	lr, r3
 8004b9e:	4770      	bx	lr

08004ba0 <_fini>:
 8004ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba2:	bf00      	nop
 8004ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ba6:	bc08      	pop	{r3}
 8004ba8:	469e      	mov	lr, r3
 8004baa:	4770      	bx	lr
