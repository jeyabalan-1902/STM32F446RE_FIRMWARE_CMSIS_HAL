
BOOTLOADER_F446RET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ab0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08003c80  08003c80  00004c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003de8  08003de8  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003de8  08003de8  00004de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003df0  08003df0  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003df0  08003df0  00004df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003df4  08003df4  00004df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003df8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000068  08003e60  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08003e60  00005338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f68  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019e8  00000000  00000000  0000e000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  0000f9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000660  00000000  00000000  00010258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021dde  00000000  00000000  000108b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a8fe  00000000  00000000  00032696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca907  00000000  00000000  0003cf94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010789b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002940  00000000  00000000  001078e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  0010a220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003c68 	.word	0x08003c68

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08003c68 	.word	0x08003c68

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fd3c 	bl	8001020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f82a 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 f8fc 	bl	80007a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b0:	f000 f8a6 	bl	8000700 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005b4:	f000 f8ce 	bl	8000754 <MX_USART3_UART_Init>
  MX_CRC_Init();
 80005b8:	f000 f88e 	bl	80006d8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  printf("Bootloader ready...\n");
 80005bc:	480c      	ldr	r0, [pc, #48]	@ (80005f0 <main+0x50>)
 80005be:	f002 fcef 	bl	8002fa0 <puts>
  if (HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin) == GPIO_PIN_RESET)
 80005c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c6:	480b      	ldr	r0, [pc, #44]	@ (80005f4 <main+0x54>)
 80005c8:	f001 f892 	bl	80016f0 <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d105      	bne.n	80005de <main+0x3e>
  {
	  printf("Button is pressed...going to bootloader mode\n\r");
 80005d2:	4809      	ldr	r0, [pc, #36]	@ (80005f8 <main+0x58>)
 80005d4:	f002 fc7c 	bl	8002ed0 <iprintf>
	  bootloader_read_uart_data();
 80005d8:	f000 f954 	bl	8000884 <bootloader_read_uart_data>
 80005dc:	e005      	b.n	80005ea <main+0x4a>
  }
  else
  {
	  printf("button is not pressed...execute application code\n\r");
 80005de:	4807      	ldr	r0, [pc, #28]	@ (80005fc <main+0x5c>)
 80005e0:	f002 fc76 	bl	8002ed0 <iprintf>
	  bootloader_jump_to_application();
 80005e4:	f000 f9bc 	bl	8000960 <bootloader_jump_to_application>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
 80005ec:	e7fd      	b.n	80005ea <main+0x4a>
 80005ee:	bf00      	nop
 80005f0:	08003c80 	.word	0x08003c80
 80005f4:	40020800 	.word	0x40020800
 80005f8:	08003c94 	.word	0x08003c94
 80005fc:	08003cc4 	.word	0x08003cc4

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	@ 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	2234      	movs	r2, #52	@ 0x34
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f002 fda6 	bl	8003160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b29      	ldr	r3, [pc, #164]	@ (80006d0 <SystemClock_Config+0xd0>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	4a28      	ldr	r2, [pc, #160]	@ (80006d0 <SystemClock_Config+0xd0>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	@ 0x40
 8000634:	4b26      	ldr	r3, [pc, #152]	@ (80006d0 <SystemClock_Config+0xd0>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000640:	2300      	movs	r3, #0
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	4b23      	ldr	r3, [pc, #140]	@ (80006d4 <SystemClock_Config+0xd4>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800064c:	4a21      	ldr	r2, [pc, #132]	@ (80006d4 <SystemClock_Config+0xd4>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <SystemClock_Config+0xd4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000670:	2300      	movs	r3, #0
 8000672:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000674:	2308      	movs	r3, #8
 8000676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000678:	2354      	movs	r3, #84	@ 0x54
 800067a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000680:	2302      	movs	r3, #2
 8000682:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000684:	2302      	movs	r3, #2
 8000686:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	4618      	mov	r0, r3
 800068e:	f001 fc1d 	bl	8001ecc <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000698:	f000 fac6 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b2:	f107 0308 	add.w	r3, r7, #8
 80006b6:	2102      	movs	r1, #2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 f84b 	bl	8001754 <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006c4:	f000 fab0 	bl	8000c28 <Error_Handler>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3750      	adds	r7, #80	@ 0x50
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006dc:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <MX_CRC_Init+0x20>)
 80006de:	4a07      	ldr	r2, [pc, #28]	@ (80006fc <MX_CRC_Init+0x24>)
 80006e0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <MX_CRC_Init+0x20>)
 80006e4:	f000 fe29 	bl	800133a <HAL_CRC_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006ee:	f000 fa9b 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000084 	.word	0x20000084
 80006fc:	40023000 	.word	0x40023000

08000700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000704:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000706:	4a12      	ldr	r2, [pc, #72]	@ (8000750 <MX_USART2_UART_Init+0x50>)
 8000708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070a:	4b10      	ldr	r3, [pc, #64]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b08      	ldr	r3, [pc, #32]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	@ (800074c <MX_USART2_UART_Init+0x4c>)
 8000738:	f001 fe66 	bl	8002408 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000742:	f000 fa71 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	2000008c 	.word	0x2000008c
 8000750:	40004400 	.word	0x40004400

08000754 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000758:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 800075a:	4a12      	ldr	r2, [pc, #72]	@ (80007a4 <MX_USART3_UART_Init+0x50>)
 800075c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800075e:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_USART3_UART_Init+0x4c>)
 800078c:	f001 fe3c 	bl	8002408 <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000796:	f000 fa47 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000d4 	.word	0x200000d4
 80007a4:	40004800 	.word	0x40004800

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	@ 0x28
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000878 <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a2c      	ldr	r2, [pc, #176]	@ (8000878 <MX_GPIO_Init+0xd0>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000878 <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b26      	ldr	r3, [pc, #152]	@ (8000878 <MX_GPIO_Init+0xd0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a25      	ldr	r2, [pc, #148]	@ (8000878 <MX_GPIO_Init+0xd0>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b23      	ldr	r3, [pc, #140]	@ (8000878 <MX_GPIO_Init+0xd0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000878 <MX_GPIO_Init+0xd0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a1e      	ldr	r2, [pc, #120]	@ (8000878 <MX_GPIO_Init+0xd0>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <MX_GPIO_Init+0xd0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <MX_GPIO_Init+0xd0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a17      	ldr	r2, [pc, #92]	@ (8000878 <MX_GPIO_Init+0xd0>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <MX_GPIO_Init+0xd0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2120      	movs	r1, #32
 8000832:	4812      	ldr	r0, [pc, #72]	@ (800087c <MX_GPIO_Init+0xd4>)
 8000834:	f000 ff74 	bl	8001720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8000838:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000842:	2302      	movs	r3, #2
 8000844:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	480c      	ldr	r0, [pc, #48]	@ (8000880 <MX_GPIO_Init+0xd8>)
 800084e:	f000 fdbb 	bl	80013c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000852:	2320      	movs	r3, #32
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	4804      	ldr	r0, [pc, #16]	@ (800087c <MX_GPIO_Init+0xd4>)
 800086a:	f000 fdad 	bl	80013c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086e:	bf00      	nop
 8000870:	3728      	adds	r7, #40	@ 0x28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40020000 	.word	0x40020000
 8000880:	40020800 	.word	0x40020800

08000884 <bootloader_read_uart_data>:

/* USER CODE BEGIN 4 */

void bootloader_read_uart_data(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
	uint8_t rcv_len = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		memset(bl_rx_buffer, 0, 200);
 800088e:	22c8      	movs	r2, #200	@ 0xc8
 8000890:	2100      	movs	r1, #0
 8000892:	4830      	ldr	r0, [pc, #192]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 8000894:	f002 fc64 	bl	8003160 <memset>
		HAL_UART_Receive(&huart3, &bl_rx_buffer, 1, HAL_MAX_DELAY);
 8000898:	f04f 33ff 	mov.w	r3, #4294967295
 800089c:	2201      	movs	r2, #1
 800089e:	492d      	ldr	r1, [pc, #180]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 80008a0:	482d      	ldr	r0, [pc, #180]	@ (8000958 <bootloader_read_uart_data+0xd4>)
 80008a2:	f001 fe8c 	bl	80025be <HAL_UART_Receive>
		rcv_len = bl_rx_buffer[0];
 80008a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(&huart3, &bl_rx_buffer[1], rcv_len, HAL_MAX_DELAY);
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	f04f 33ff 	mov.w	r3, #4294967295
 80008b4:	4929      	ldr	r1, [pc, #164]	@ (800095c <bootloader_read_uart_data+0xd8>)
 80008b6:	4828      	ldr	r0, [pc, #160]	@ (8000958 <bootloader_read_uart_data+0xd4>)
 80008b8:	f001 fe81 	bl	80025be <HAL_UART_Receive>
		switch(bl_rx_buffer[1])
 80008bc:	4b25      	ldr	r3, [pc, #148]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 80008be:	785b      	ldrb	r3, [r3, #1]
 80008c0:	3b51      	subs	r3, #81	@ 0x51
 80008c2:	2b0a      	cmp	r3, #10
 80008c4:	d844      	bhi.n	8000950 <bootloader_read_uart_data+0xcc>
 80008c6:	a201      	add	r2, pc, #4	@ (adr r2, 80008cc <bootloader_read_uart_data+0x48>)
 80008c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008cc:	080008f9 	.word	0x080008f9
 80008d0:	08000901 	.word	0x08000901
 80008d4:	08000909 	.word	0x08000909
 80008d8:	08000911 	.word	0x08000911
 80008dc:	08000919 	.word	0x08000919
 80008e0:	08000921 	.word	0x08000921
 80008e4:	08000929 	.word	0x08000929
 80008e8:	08000931 	.word	0x08000931
 80008ec:	08000939 	.word	0x08000939
 80008f0:	08000941 	.word	0x08000941
 80008f4:	08000949 	.word	0x08000949
		{
			case BL_GET_VER:
				bootloader_handle_getver_cmd(bl_rx_buffer);
 80008f8:	4816      	ldr	r0, [pc, #88]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 80008fa:	f000 f8c7 	bl	8000a8c <bootloader_handle_getver_cmd>
				break;
 80008fe:	e028      	b.n	8000952 <bootloader_read_uart_data+0xce>
			case BL_GET_HELP:
				bootloader_handle_gethelp_cmd(bl_rx_buffer);
 8000900:	4814      	ldr	r0, [pc, #80]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 8000902:	f000 f8b9 	bl	8000a78 <bootloader_handle_gethelp_cmd>
				break;
 8000906:	e024      	b.n	8000952 <bootloader_read_uart_data+0xce>
			case BL_GET_CID:
				bootloader_handle_getcid_cmd(bl_rx_buffer);
 8000908:	4812      	ldr	r0, [pc, #72]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 800090a:	f000 f8ab 	bl	8000a64 <bootloader_handle_getcid_cmd>
				break;
 800090e:	e020      	b.n	8000952 <bootloader_read_uart_data+0xce>
			case BL_GET_RDP_STATUS:
				bootloader_handle_getrdp_cmd(bl_rx_buffer);
 8000910:	4810      	ldr	r0, [pc, #64]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 8000912:	f000 f89d 	bl	8000a50 <bootloader_handle_getrdp_cmd>
		 	    break;
 8000916:	e01c      	b.n	8000952 <bootloader_read_uart_data+0xce>
			case BL_GO_TO_ADDR:
				bootloader_handle_go_cmd(bl_rx_buffer);
 8000918:	480e      	ldr	r0, [pc, #56]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 800091a:	f000 f88f 	bl	8000a3c <bootloader_handle_go_cmd>
				break;
 800091e:	e018      	b.n	8000952 <bootloader_read_uart_data+0xce>
			case BL_FLASH_ERASE:
				bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8000920:	480c      	ldr	r0, [pc, #48]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 8000922:	f000 f881 	bl	8000a28 <bootloader_handle_flash_erase_cmd>
				break;
 8000926:	e014      	b.n	8000952 <bootloader_read_uart_data+0xce>
			case BL_MEM_WRITE:
				bootloader_handle_mem_write_cmd(bl_rx_buffer);
 8000928:	480a      	ldr	r0, [pc, #40]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 800092a:	f000 f873 	bl	8000a14 <bootloader_handle_mem_write_cmd>
				break;
 800092e:	e010      	b.n	8000952 <bootloader_read_uart_data+0xce>
			case BL_EN_RW_PROTECT:
				bootloader_handle_endis_rw_protect(bl_rx_buffer);
 8000930:	4808      	ldr	r0, [pc, #32]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 8000932:	f000 f865 	bl	8000a00 <bootloader_handle_endis_rw_protect>
				break;
 8000936:	e00c      	b.n	8000952 <bootloader_read_uart_data+0xce>
			case BL_MEM_READ:
				bootloader_handle_mem_read(bl_rx_buffer);
 8000938:	4806      	ldr	r0, [pc, #24]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 800093a:	f000 f857 	bl	80009ec <bootloader_handle_mem_read>
				break;
 800093e:	e008      	b.n	8000952 <bootloader_read_uart_data+0xce>
			case BL_READ_SECTOR_STATUS:
				bootloader_handle_read_sector_status(bl_rx_buffer);
 8000940:	4804      	ldr	r0, [pc, #16]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 8000942:	f000 f849 	bl	80009d8 <bootloader_handle_read_sector_status>
				break;
 8000946:	e004      	b.n	8000952 <bootloader_read_uart_data+0xce>
			case BL_OTP_READ:
				bootloader_handle_read_otp(bl_rx_buffer);
 8000948:	4802      	ldr	r0, [pc, #8]	@ (8000954 <bootloader_read_uart_data+0xd0>)
 800094a:	f000 f83b 	bl	80009c4 <bootloader_handle_read_otp>
				break;
 800094e:	e000      	b.n	8000952 <bootloader_read_uart_data+0xce>
			default:
				break;
 8000950:	bf00      	nop
		memset(bl_rx_buffer, 0, 200);
 8000952:	e79c      	b.n	800088e <bootloader_read_uart_data+0xa>
 8000954:	2000011c 	.word	0x2000011c
 8000958:	200000d4 	.word	0x200000d4
 800095c:	2000011d 	.word	0x2000011d

08000960 <bootloader_jump_to_application>:
		}
	}
}

void bootloader_jump_to_application(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
	printf("jumping to user application...\n");
 8000966:	4812      	ldr	r0, [pc, #72]	@ (80009b0 <bootloader_jump_to_application+0x50>)
 8000968:	f002 fb1a 	bl	8002fa0 <puts>
	void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (0x08008000 + 4U)));
 800096c:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <bootloader_jump_to_application+0x54>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	607b      	str	r3, [r7, #4]
    printf("app reset handler addr:%#lx\n", app_reset_handler);
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	4810      	ldr	r0, [pc, #64]	@ (80009b8 <bootloader_jump_to_application+0x58>)
 8000976:	f002 faab 	bl	8002ed0 <iprintf>
	  /* Reset the Clock */
	  HAL_RCC_DeInit();
 800097a:	f001 f9af 	bl	8001cdc <HAL_RCC_DeInit>
	  HAL_DeInit();
 800097e:	f000 fb71 	bl	8001064 <HAL_DeInit>
	  __set_MSP(*(volatile uint32_t*) 0x08008000);
 8000982:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <bootloader_jump_to_application+0x5c>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	f383 8808 	msr	MSP, r3
}
 800098e:	bf00      	nop
	  SysTick->CTRL = 0;
 8000990:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <bootloader_jump_to_application+0x60>)
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
	  SysTick->LOAD = 0;
 8000996:	4b0a      	ldr	r3, [pc, #40]	@ (80009c0 <bootloader_jump_to_application+0x60>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]
	  SysTick->VAL = 0;
 800099c:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <bootloader_jump_to_application+0x60>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]

	  /* Jump to application */
	  app_reset_handler();
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4798      	blx	r3
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	08003cf8 	.word	0x08003cf8
 80009b4:	08008004 	.word	0x08008004
 80009b8:	08003d18 	.word	0x08003d18
 80009bc:	08008000 	.word	0x08008000
 80009c0:	e000e010 	.word	0xe000e010

080009c4 <bootloader_handle_read_otp>:

void bootloader_handle_read_otp(uint8_t *bl_rx_buffer)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <bootloader_handle_read_sector_status>:

void bootloader_handle_read_sector_status(uint8_t *bl_rx_buffer)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <bootloader_handle_mem_read>:

void bootloader_handle_mem_read(uint8_t *bl_rx_buffer)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]

}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <bootloader_handle_endis_rw_protect>:

void bootloader_handle_endis_rw_protect(uint8_t *bl_rx_buffer)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]

}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <bootloader_handle_mem_write_cmd>:

void bootloader_handle_mem_write_cmd(uint8_t *bl_rx_buffer)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]

}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <bootloader_handle_flash_erase_cmd>:

void bootloader_handle_flash_erase_cmd(uint8_t *bl_rx_buffer)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <bootloader_handle_go_cmd>:

void bootloader_handle_go_cmd(uint8_t *bl_rx_buffer)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]

}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <bootloader_handle_getrdp_cmd>:

void bootloader_handle_getrdp_cmd(uint8_t *bl_rx_buffer)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <bootloader_handle_getcid_cmd>:

void bootloader_handle_getcid_cmd(uint8_t *bl_rx_buffer)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <bootloader_handle_gethelp_cmd>:

void bootloader_handle_gethelp_cmd(uint8_t *bl_rx_buffer)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <bootloader_handle_getver_cmd>:

void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	uint8_t bl_version;
	printf("bootloader handle get version command\n");
 8000a94:	481d      	ldr	r0, [pc, #116]	@ (8000b0c <bootloader_handle_getver_cmd+0x80>)
 8000a96:	f002 fa83 	bl	8002fa0 <puts>
	uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t *) (bl_rx_buffer + command_packet_len - 4));
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	3b04      	subs	r3, #4
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	613b      	str	r3, [r7, #16]
	if (! bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len-4, host_crc))
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	3b04      	subs	r3, #4
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f000 f85c 	bl	8000b74 <bootloader_verify_crc>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d11a      	bne.n	8000af8 <bootloader_handle_getver_cmd+0x6c>
	{
		printf("checksum success !!\n");
 8000ac2:	4813      	ldr	r0, [pc, #76]	@ (8000b10 <bootloader_handle_getver_cmd+0x84>)
 8000ac4:	f002 fa6c 	bl	8002fa0 <puts>
		bootloader_send_ack(bl_rx_buffer[0], 1);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2101      	movs	r1, #1
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 f824 	bl	8000b1c <bootloader_send_ack>
		bl_version = get_bootloader_version();
 8000ad4:	f000 f88e 	bl	8000bf4 <get_bootloader_version>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	73fb      	strb	r3, [r7, #15]
		printf("BL VERSION: %d %#x\n", bl_version, bl_version);
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	4619      	mov	r1, r3
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	480b      	ldr	r0, [pc, #44]	@ (8000b14 <bootloader_handle_getver_cmd+0x88>)
 8000ae6:	f002 f9f3 	bl	8002ed0 <iprintf>
		bootloader_uart_write_data(&bl_version, 1);
 8000aea:	f107 030f 	add.w	r3, r7, #15
 8000aee:	2101      	movs	r1, #1
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 f86b 	bl	8000bcc <bootloader_uart_write_data>
	{
		printf("checksum failed !!\n");
		bootloader_send_nack();
	}

}
 8000af6:	e004      	b.n	8000b02 <bootloader_handle_getver_cmd+0x76>
		printf("checksum failed !!\n");
 8000af8:	4807      	ldr	r0, [pc, #28]	@ (8000b18 <bootloader_handle_getver_cmd+0x8c>)
 8000afa:	f002 fa51 	bl	8002fa0 <puts>
		bootloader_send_nack();
 8000afe:	f000 f827 	bl	8000b50 <bootloader_send_nack>
}
 8000b02:	bf00      	nop
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	08003d38 	.word	0x08003d38
 8000b10:	08003d60 	.word	0x08003d60
 8000b14:	08003d74 	.word	0x08003d74
 8000b18:	08003d88 	.word	0x08003d88

08000b1c <bootloader_send_ack>:

void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	460a      	mov	r2, r1
 8000b26:	71fb      	strb	r3, [r7, #7]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	71bb      	strb	r3, [r7, #6]
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 8000b2c:	23a5      	movs	r3, #165	@ 0xa5
 8000b2e:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 8000b30:	79bb      	ldrb	r3, [r7, #6]
 8000b32:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&huart3, ack_buf, 2, HAL_MAX_DELAY);
 8000b34:	f107 010c 	add.w	r1, r7, #12
 8000b38:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	4803      	ldr	r0, [pc, #12]	@ (8000b4c <bootloader_send_ack+0x30>)
 8000b40:	f001 fcb2 	bl	80024a8 <HAL_UART_Transmit>
}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200000d4 	.word	0x200000d4

08000b50 <bootloader_send_nack>:

void bootloader_send_nack(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 8000b56:	237f      	movs	r3, #127	@ 0x7f
 8000b58:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3, &nack, 1, HAL_MAX_DELAY);
 8000b5a:	1df9      	adds	r1, r7, #7
 8000b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b60:	2201      	movs	r2, #1
 8000b62:	4803      	ldr	r0, [pc, #12]	@ (8000b70 <bootloader_send_nack+0x20>)
 8000b64:	f001 fca0 	bl	80024a8 <HAL_UART_Transmit>
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200000d4 	.word	0x200000d4

08000b74 <bootloader_verify_crc>:

uint8_t bootloader_verify_crc(uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
	uint32_t uwCRCValue = 0xff;
 8000b80:	23ff      	movs	r3, #255	@ 0xff
 8000b82:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < len; i++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	61bb      	str	r3, [r7, #24]
 8000b88:	e00f      	b.n	8000baa <bootloader_verify_crc+0x36>
	{
		uint32_t i_data = pData[i];
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	4413      	add	r3, r2
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	617b      	str	r3, [r7, #20]
		uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2201      	movs	r2, #1
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480a      	ldr	r0, [pc, #40]	@ (8000bc8 <bootloader_verify_crc+0x54>)
 8000b9e:	f000 fbe8 	bl	8001372 <HAL_CRC_Accumulate>
 8000ba2:	61f8      	str	r0, [r7, #28]
	for (uint32_t i = 0; i < len; i++)
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d3eb      	bcc.n	8000b8a <bootloader_verify_crc+0x16>
	}
	if(uwCRCValue == crc_host)
 8000bb2:	69fa      	ldr	r2, [r7, #28]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d101      	bne.n	8000bbe <bootloader_verify_crc+0x4a>
	{
		return VERIFY_CRC_SUCCESS;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e000      	b.n	8000bc0 <bootloader_verify_crc+0x4c>
	}
	return VERIFY_CRC_FAIL;
 8000bbe:	2301      	movs	r3, #1
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3720      	adds	r7, #32
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000084 	.word	0x20000084

08000bcc <bootloader_uart_write_data>:

void bootloader_uart_write_data(uint8_t *pBuffer, uint32_t len)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, pBuffer, len, HAL_MAX_DELAY);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	4803      	ldr	r0, [pc, #12]	@ (8000bf0 <bootloader_uart_write_data+0x24>)
 8000be2:	f001 fc61 	bl	80024a8 <HAL_UART_Transmit>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200000d4 	.word	0x200000d4

08000bf4 <get_bootloader_version>:

uint8_t get_bootloader_version(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
	return (uint8_t)BL_VERSION;
 8000bf8:	2310      	movs	r3, #16
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <__io_putchar>:

#define PRINTF   int __io_putchar(int ch)
PRINTF
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000c0c:	1d39      	adds	r1, r7, #4
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c12:	2201      	movs	r2, #1
 8000c14:	4803      	ldr	r0, [pc, #12]	@ (8000c24 <__io_putchar+0x20>)
 8000c16:	f001 fc47 	bl	80024a8 <HAL_UART_Transmit>
	return ch;
 8000c1a:	687b      	ldr	r3, [r7, #4]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	2000008c 	.word	0x2000008c

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <Error_Handler+0x8>

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c42:	4a0f      	ldr	r2, [pc, #60]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5e:	4a08      	ldr	r2, [pc, #32]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c66:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800

08000c84 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc0 <HAL_CRC_MspInit+0x3c>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d10d      	bne.n	8000cb2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <HAL_CRC_MspInit+0x40>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a09      	ldr	r2, [pc, #36]	@ (8000cc4 <HAL_CRC_MspInit+0x40>)
 8000ca0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <HAL_CRC_MspInit+0x40>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000cb2:	bf00      	nop
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40023000 	.word	0x40023000
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08c      	sub	sp, #48	@ 0x30
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a41      	ldr	r2, [pc, #260]	@ (8000dec <HAL_UART_MspInit+0x124>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d12c      	bne.n	8000d44 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	61bb      	str	r3, [r7, #24]
 8000cee:	4b40      	ldr	r3, [pc, #256]	@ (8000df0 <HAL_UART_MspInit+0x128>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf2:	4a3f      	ldr	r2, [pc, #252]	@ (8000df0 <HAL_UART_MspInit+0x128>)
 8000cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cfa:	4b3d      	ldr	r3, [pc, #244]	@ (8000df0 <HAL_UART_MspInit+0x128>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d02:	61bb      	str	r3, [r7, #24]
 8000d04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	4b39      	ldr	r3, [pc, #228]	@ (8000df0 <HAL_UART_MspInit+0x128>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a38      	ldr	r2, [pc, #224]	@ (8000df0 <HAL_UART_MspInit+0x128>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b36      	ldr	r3, [pc, #216]	@ (8000df0 <HAL_UART_MspInit+0x128>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d22:	230c      	movs	r3, #12
 8000d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d32:	2307      	movs	r3, #7
 8000d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 031c 	add.w	r3, r7, #28
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	482d      	ldr	r0, [pc, #180]	@ (8000df4 <HAL_UART_MspInit+0x12c>)
 8000d3e:	f000 fb43 	bl	80013c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d42:	e04f      	b.n	8000de4 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a2b      	ldr	r2, [pc, #172]	@ (8000df8 <HAL_UART_MspInit+0x130>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d14a      	bne.n	8000de4 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <HAL_UART_MspInit+0x128>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d56:	4a26      	ldr	r2, [pc, #152]	@ (8000df0 <HAL_UART_MspInit+0x128>)
 8000d58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d5e:	4b24      	ldr	r3, [pc, #144]	@ (8000df0 <HAL_UART_MspInit+0x128>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b20      	ldr	r3, [pc, #128]	@ (8000df0 <HAL_UART_MspInit+0x128>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	4a1f      	ldr	r2, [pc, #124]	@ (8000df0 <HAL_UART_MspInit+0x128>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000df0 <HAL_UART_MspInit+0x128>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <HAL_UART_MspInit+0x128>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a18      	ldr	r2, [pc, #96]	@ (8000df0 <HAL_UART_MspInit+0x128>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b16      	ldr	r3, [pc, #88]	@ (8000df0 <HAL_UART_MspInit+0x128>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000da2:	2320      	movs	r3, #32
 8000da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000db2:	2307      	movs	r3, #7
 8000db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480f      	ldr	r0, [pc, #60]	@ (8000dfc <HAL_UART_MspInit+0x134>)
 8000dbe:	f000 fb03 	bl	80013c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dd4:	2307      	movs	r3, #7
 8000dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4808      	ldr	r0, [pc, #32]	@ (8000e00 <HAL_UART_MspInit+0x138>)
 8000de0:	f000 faf2 	bl	80013c8 <HAL_GPIO_Init>
}
 8000de4:	bf00      	nop
 8000de6:	3730      	adds	r7, #48	@ 0x30
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40004400 	.word	0x40004400
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020000 	.word	0x40020000
 8000df8:	40004800 	.word	0x40004800
 8000dfc:	40020800 	.word	0x40020800
 8000e00:	40020400 	.word	0x40020400

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <NMI_Handler+0x4>

08000e0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <HardFault_Handler+0x4>

08000e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <MemManage_Handler+0x4>

08000e1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <BusFault_Handler+0x4>

08000e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <UsageFault_Handler+0x4>

08000e2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e5a:	f000 f969 	bl	8001130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	60f8      	str	r0, [r7, #12]
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	e00a      	b.n	8000e8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e74:	f3af 8000 	nop.w
 8000e78:	4601      	mov	r1, r0
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	1c5a      	adds	r2, r3, #1
 8000e7e:	60ba      	str	r2, [r7, #8]
 8000e80:	b2ca      	uxtb	r2, r1
 8000e82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	3301      	adds	r3, #1
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	dbf0      	blt.n	8000e74 <_read+0x12>
  }

  return len;
 8000e92:	687b      	ldr	r3, [r7, #4]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	e009      	b.n	8000ec2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	1c5a      	adds	r2, r3, #1
 8000eb2:	60ba      	str	r2, [r7, #8]
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fea4 	bl	8000c04 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	617b      	str	r3, [r7, #20]
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	dbf1      	blt.n	8000eae <_write+0x12>
  }
  return len;
 8000eca:	687b      	ldr	r3, [r7, #4]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <_close>:

int _close(int file)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000edc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000efc:	605a      	str	r2, [r3, #4]
  return 0;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <_isatty>:

int _isatty(int file)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f14:	2301      	movs	r3, #1
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b085      	sub	sp, #20
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	60f8      	str	r0, [r7, #12]
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f44:	4a14      	ldr	r2, [pc, #80]	@ (8000f98 <_sbrk+0x5c>)
 8000f46:	4b15      	ldr	r3, [pc, #84]	@ (8000f9c <_sbrk+0x60>)
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f50:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <_sbrk+0x64>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	@ (8000fa4 <_sbrk+0x68>)
 8000f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5e:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d207      	bcs.n	8000f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f6c:	f002 f946 	bl	80031fc <__errno>
 8000f70:	4603      	mov	r3, r0
 8000f72:	220c      	movs	r2, #12
 8000f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	e009      	b.n	8000f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <_sbrk+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f82:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a05      	ldr	r2, [pc, #20]	@ (8000fa0 <_sbrk+0x64>)
 8000f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20020000 	.word	0x20020000
 8000f9c:	00000400 	.word	0x00000400
 8000fa0:	200001e4 	.word	0x200001e4
 8000fa4:	20000338 	.word	0x20000338

08000fa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <SystemInit+0x20>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fb2:	4a05      	ldr	r2, [pc, #20]	@ (8000fc8 <SystemInit+0x20>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001004 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fd0:	f7ff ffea 	bl	8000fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd4:	480c      	ldr	r0, [pc, #48]	@ (8001008 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fd6:	490d      	ldr	r1, [pc, #52]	@ (800100c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001010 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fec:	4c0a      	ldr	r4, [pc, #40]	@ (8001018 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ffa:	f002 f905 	bl	8003208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffe:	f7ff facf 	bl	80005a0 <main>
  bx  lr    
 8001002:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001004:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800100c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001010:	08003df8 	.word	0x08003df8
  ldr r2, =_sbss
 8001014:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001018:	20000338 	.word	0x20000338

0800101c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800101c:	e7fe      	b.n	800101c <ADC_IRQHandler>
	...

08001020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001024:	4b0e      	ldr	r3, [pc, #56]	@ (8001060 <HAL_Init+0x40>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0d      	ldr	r2, [pc, #52]	@ (8001060 <HAL_Init+0x40>)
 800102a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800102e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001030:	4b0b      	ldr	r3, [pc, #44]	@ (8001060 <HAL_Init+0x40>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <HAL_Init+0x40>)
 8001036:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800103a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800103c:	4b08      	ldr	r3, [pc, #32]	@ (8001060 <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a07      	ldr	r2, [pc, #28]	@ (8001060 <HAL_Init+0x40>)
 8001042:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001046:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001048:	2003      	movs	r0, #3
 800104a:	f000 f943 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104e:	200f      	movs	r0, #15
 8001050:	f000 f83e 	bl	80010d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001054:	f7ff fdee 	bl	8000c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023c00 	.word	0x40023c00

08001064 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001068:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <HAL_DeInit+0x4c>)
 800106a:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <HAL_DeInit+0x50>)
 800106c:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 800106e:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <HAL_DeInit+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001074:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <HAL_DeInit+0x4c>)
 8001076:	4a10      	ldr	r2, [pc, #64]	@ (80010b8 <HAL_DeInit+0x54>)
 8001078:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800107a:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <HAL_DeInit+0x4c>)
 800107c:	2200      	movs	r2, #0
 800107e:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001080:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <HAL_DeInit+0x4c>)
 8001082:	4a0e      	ldr	r2, [pc, #56]	@ (80010bc <HAL_DeInit+0x58>)
 8001084:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001086:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <HAL_DeInit+0x4c>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800108c:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <HAL_DeInit+0x4c>)
 800108e:	2281      	movs	r2, #129	@ 0x81
 8001090:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001092:	4b07      	ldr	r3, [pc, #28]	@ (80010b0 <HAL_DeInit+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001098:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <HAL_DeInit+0x4c>)
 800109a:	2203      	movs	r2, #3
 800109c:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 800109e:	4b04      	ldr	r3, [pc, #16]	@ (80010b0 <HAL_DeInit+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80010a4:	f000 f80c 	bl	80010c0 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800
 80010b4:	3fffc9ff 	.word	0x3fffc9ff
 80010b8:	00c77933 	.word	0x00c77933
 80010bc:	206010ff 	.word	0x206010ff

080010c0 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d8:	4b12      	ldr	r3, [pc, #72]	@ (8001124 <HAL_InitTick+0x54>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <HAL_InitTick+0x58>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 f917 	bl	8001322 <HAL_SYSTICK_Config>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00e      	b.n	800111c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b0f      	cmp	r3, #15
 8001102:	d80a      	bhi.n	800111a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001104:	2200      	movs	r2, #0
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f000 f8ed 	bl	80012ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001110:	4a06      	ldr	r2, [pc, #24]	@ (800112c <HAL_InitTick+0x5c>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	e000      	b.n	800111c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000000 	.word	0x20000000
 8001128:	20000008 	.word	0x20000008
 800112c:	20000004 	.word	0x20000004

08001130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001134:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <HAL_IncTick+0x20>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_IncTick+0x24>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
 8001140:	4a04      	ldr	r2, [pc, #16]	@ (8001154 <HAL_IncTick+0x24>)
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000008 	.word	0x20000008
 8001154:	200001e8 	.word	0x200001e8

08001158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b03      	ldr	r3, [pc, #12]	@ (800116c <HAL_GetTick+0x14>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	200001e8 	.word	0x200001e8

08001170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001180:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800118c:	4013      	ands	r3, r2
 800118e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001198:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800119c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a2:	4a04      	ldr	r2, [pc, #16]	@ (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	60d3      	str	r3, [r2, #12]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011bc:	4b04      	ldr	r3, [pc, #16]	@ (80011d0 <__NVIC_GetPriorityGrouping+0x18>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	f003 0307 	and.w	r3, r3, #7
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	db0a      	blt.n	80011fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	490c      	ldr	r1, [pc, #48]	@ (8001220 <__NVIC_SetPriority+0x4c>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	0112      	lsls	r2, r2, #4
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	440b      	add	r3, r1
 80011f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011fc:	e00a      	b.n	8001214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4908      	ldr	r1, [pc, #32]	@ (8001224 <__NVIC_SetPriority+0x50>)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	3b04      	subs	r3, #4
 800120c:	0112      	lsls	r2, r2, #4
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	440b      	add	r3, r1
 8001212:	761a      	strb	r2, [r3, #24]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000e100 	.word	0xe000e100
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	@ 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f1c3 0307 	rsb	r3, r3, #7
 8001242:	2b04      	cmp	r3, #4
 8001244:	bf28      	it	cs
 8001246:	2304      	movcs	r3, #4
 8001248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3304      	adds	r3, #4
 800124e:	2b06      	cmp	r3, #6
 8001250:	d902      	bls.n	8001258 <NVIC_EncodePriority+0x30>
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3b03      	subs	r3, #3
 8001256:	e000      	b.n	800125a <NVIC_EncodePriority+0x32>
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	f04f 32ff 	mov.w	r2, #4294967295
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43da      	mvns	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	401a      	ands	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001270:	f04f 31ff 	mov.w	r1, #4294967295
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	43d9      	mvns	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	4313      	orrs	r3, r2
         );
}
 8001282:	4618      	mov	r0, r3
 8001284:	3724      	adds	r7, #36	@ 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012a0:	d301      	bcc.n	80012a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00f      	b.n	80012c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a6:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <SysTick_Config+0x40>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ae:	210f      	movs	r1, #15
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295
 80012b4:	f7ff ff8e 	bl	80011d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b8:	4b05      	ldr	r3, [pc, #20]	@ (80012d0 <SysTick_Config+0x40>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012be:	4b04      	ldr	r3, [pc, #16]	@ (80012d0 <SysTick_Config+0x40>)
 80012c0:	2207      	movs	r2, #7
 80012c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	e000e010 	.word	0xe000e010

080012d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff47 	bl	8001170 <__NVIC_SetPriorityGrouping>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012fc:	f7ff ff5c 	bl	80011b8 <__NVIC_GetPriorityGrouping>
 8001300:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	6978      	ldr	r0, [r7, #20]
 8001308:	f7ff ff8e 	bl	8001228 <NVIC_EncodePriority>
 800130c:	4602      	mov	r2, r0
 800130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff5d 	bl	80011d4 <__NVIC_SetPriority>
}
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ffb0 	bl	8001290 <SysTick_Config>
 8001330:	4603      	mov	r3, r0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e00e      	b.n	800136a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	795b      	ldrb	r3, [r3, #5]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d105      	bne.n	8001362 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff fc91 	bl	8000c84 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001372:	b480      	push	{r7}
 8001374:	b087      	sub	sp, #28
 8001376:	af00      	add	r7, sp, #0
 8001378:	60f8      	str	r0, [r7, #12]
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2202      	movs	r2, #2
 8001386:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	e00a      	b.n	80013a4 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	441a      	add	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	3301      	adds	r3, #1
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d3f0      	bcc.n	800138e <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2201      	movs	r2, #1
 80013b8:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80013ba:	693b      	ldr	r3, [r7, #16]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	371c      	adds	r7, #28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	@ 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	e165      	b.n	80016b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013e4:	2201      	movs	r2, #1
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	f040 8154 	bne.w	80016aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	2b01      	cmp	r3, #1
 800140c:	d005      	beq.n	800141a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001416:	2b02      	cmp	r3, #2
 8001418:	d130      	bne.n	800147c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	2203      	movs	r2, #3
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	68da      	ldr	r2, [r3, #12]
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001450:	2201      	movs	r2, #1
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	091b      	lsrs	r3, r3, #4
 8001466:	f003 0201 	and.w	r2, r3, #1
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b03      	cmp	r3, #3
 8001486:	d017      	beq.n	80014b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d123      	bne.n	800150c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	08da      	lsrs	r2, r3, #3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3208      	adds	r2, #8
 80014cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	220f      	movs	r2, #15
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	691a      	ldr	r2, [r3, #16]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	08da      	lsrs	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3208      	adds	r2, #8
 8001506:	69b9      	ldr	r1, [r7, #24]
 8001508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	2203      	movs	r2, #3
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0203 	and.w	r2, r3, #3
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 80ae 	beq.w	80016aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b5d      	ldr	r3, [pc, #372]	@ (80016c8 <HAL_GPIO_Init+0x300>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001556:	4a5c      	ldr	r2, [pc, #368]	@ (80016c8 <HAL_GPIO_Init+0x300>)
 8001558:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800155c:	6453      	str	r3, [r2, #68]	@ 0x44
 800155e:	4b5a      	ldr	r3, [pc, #360]	@ (80016c8 <HAL_GPIO_Init+0x300>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001562:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800156a:	4a58      	ldr	r2, [pc, #352]	@ (80016cc <HAL_GPIO_Init+0x304>)
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	3302      	adds	r3, #2
 8001572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	220f      	movs	r2, #15
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4f      	ldr	r2, [pc, #316]	@ (80016d0 <HAL_GPIO_Init+0x308>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d025      	beq.n	80015e2 <HAL_GPIO_Init+0x21a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4e      	ldr	r2, [pc, #312]	@ (80016d4 <HAL_GPIO_Init+0x30c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d01f      	beq.n	80015de <HAL_GPIO_Init+0x216>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4d      	ldr	r2, [pc, #308]	@ (80016d8 <HAL_GPIO_Init+0x310>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d019      	beq.n	80015da <HAL_GPIO_Init+0x212>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a4c      	ldr	r2, [pc, #304]	@ (80016dc <HAL_GPIO_Init+0x314>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d013      	beq.n	80015d6 <HAL_GPIO_Init+0x20e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4b      	ldr	r2, [pc, #300]	@ (80016e0 <HAL_GPIO_Init+0x318>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d00d      	beq.n	80015d2 <HAL_GPIO_Init+0x20a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a4a      	ldr	r2, [pc, #296]	@ (80016e4 <HAL_GPIO_Init+0x31c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d007      	beq.n	80015ce <HAL_GPIO_Init+0x206>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a49      	ldr	r2, [pc, #292]	@ (80016e8 <HAL_GPIO_Init+0x320>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_GPIO_Init+0x202>
 80015c6:	2306      	movs	r3, #6
 80015c8:	e00c      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015ca:	2307      	movs	r3, #7
 80015cc:	e00a      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015ce:	2305      	movs	r3, #5
 80015d0:	e008      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015d2:	2304      	movs	r3, #4
 80015d4:	e006      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015d6:	2303      	movs	r3, #3
 80015d8:	e004      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015da:	2302      	movs	r3, #2
 80015dc:	e002      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <HAL_GPIO_Init+0x21c>
 80015e2:	2300      	movs	r3, #0
 80015e4:	69fa      	ldr	r2, [r7, #28]
 80015e6:	f002 0203 	and.w	r2, r2, #3
 80015ea:	0092      	lsls	r2, r2, #2
 80015ec:	4093      	lsls	r3, r2
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f4:	4935      	ldr	r1, [pc, #212]	@ (80016cc <HAL_GPIO_Init+0x304>)
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	089b      	lsrs	r3, r3, #2
 80015fa:	3302      	adds	r3, #2
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001602:	4b3a      	ldr	r3, [pc, #232]	@ (80016ec <HAL_GPIO_Init+0x324>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001626:	4a31      	ldr	r2, [pc, #196]	@ (80016ec <HAL_GPIO_Init+0x324>)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800162c:	4b2f      	ldr	r3, [pc, #188]	@ (80016ec <HAL_GPIO_Init+0x324>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001650:	4a26      	ldr	r2, [pc, #152]	@ (80016ec <HAL_GPIO_Init+0x324>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001656:	4b25      	ldr	r3, [pc, #148]	@ (80016ec <HAL_GPIO_Init+0x324>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800167a:	4a1c      	ldr	r2, [pc, #112]	@ (80016ec <HAL_GPIO_Init+0x324>)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001680:	4b1a      	ldr	r3, [pc, #104]	@ (80016ec <HAL_GPIO_Init+0x324>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016a4:	4a11      	ldr	r2, [pc, #68]	@ (80016ec <HAL_GPIO_Init+0x324>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3301      	adds	r3, #1
 80016ae:	61fb      	str	r3, [r7, #28]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	2b0f      	cmp	r3, #15
 80016b4:	f67f ae96 	bls.w	80013e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3724      	adds	r7, #36	@ 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40013800 	.word	0x40013800
 80016d0:	40020000 	.word	0x40020000
 80016d4:	40020400 	.word	0x40020400
 80016d8:	40020800 	.word	0x40020800
 80016dc:	40020c00 	.word	0x40020c00
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40021400 	.word	0x40021400
 80016e8:	40021800 	.word	0x40021800
 80016ec:	40013c00 	.word	0x40013c00

080016f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	691a      	ldr	r2, [r3, #16]
 8001700:	887b      	ldrh	r3, [r7, #2]
 8001702:	4013      	ands	r3, r2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d002      	beq.n	800170e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
 800170c:	e001      	b.n	8001712 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001712:	7bfb      	ldrb	r3, [r7, #15]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	807b      	strh	r3, [r7, #2]
 800172c:	4613      	mov	r3, r2
 800172e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001730:	787b      	ldrb	r3, [r7, #1]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001736:	887a      	ldrh	r2, [r7, #2]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800173c:	e003      	b.n	8001746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800173e:	887b      	ldrh	r3, [r7, #2]
 8001740:	041a      	lsls	r2, r3, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	619a      	str	r2, [r3, #24]
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0cc      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001768:	4b68      	ldr	r3, [pc, #416]	@ (800190c <HAL_RCC_ClockConfig+0x1b8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 030f 	and.w	r3, r3, #15
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d90c      	bls.n	8001790 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001776:	4b65      	ldr	r3, [pc, #404]	@ (800190c <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800177e:	4b63      	ldr	r3, [pc, #396]	@ (800190c <HAL_RCC_ClockConfig+0x1b8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d001      	beq.n	8001790 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e0b8      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d020      	beq.n	80017de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a8:	4b59      	ldr	r3, [pc, #356]	@ (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4a58      	ldr	r2, [pc, #352]	@ (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017c0:	4b53      	ldr	r3, [pc, #332]	@ (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	4a52      	ldr	r2, [pc, #328]	@ (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017cc:	4b50      	ldr	r3, [pc, #320]	@ (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	494d      	ldr	r1, [pc, #308]	@ (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d044      	beq.n	8001874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d107      	bne.n	8001802 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	4b47      	ldr	r3, [pc, #284]	@ (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d119      	bne.n	8001832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e07f      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d003      	beq.n	8001812 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800180e:	2b03      	cmp	r3, #3
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001812:	4b3f      	ldr	r3, [pc, #252]	@ (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d109      	bne.n	8001832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e06f      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001822:	4b3b      	ldr	r3, [pc, #236]	@ (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e067      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001832:	4b37      	ldr	r3, [pc, #220]	@ (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f023 0203 	bic.w	r2, r3, #3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4934      	ldr	r1, [pc, #208]	@ (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	4313      	orrs	r3, r2
 8001842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001844:	f7ff fc88 	bl	8001158 <HAL_GetTick>
 8001848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	e00a      	b.n	8001862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184c:	f7ff fc84 	bl	8001158 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e04f      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001862:	4b2b      	ldr	r3, [pc, #172]	@ (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 020c 	and.w	r2, r3, #12
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	429a      	cmp	r2, r3
 8001872:	d1eb      	bne.n	800184c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001874:	4b25      	ldr	r3, [pc, #148]	@ (800190c <HAL_RCC_ClockConfig+0x1b8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 030f 	and.w	r3, r3, #15
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d20c      	bcs.n	800189c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b22      	ldr	r3, [pc, #136]	@ (800190c <HAL_RCC_ClockConfig+0x1b8>)
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800188a:	4b20      	ldr	r3, [pc, #128]	@ (800190c <HAL_RCC_ClockConfig+0x1b8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d001      	beq.n	800189c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e032      	b.n	8001902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d008      	beq.n	80018ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a8:	4b19      	ldr	r3, [pc, #100]	@ (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	4916      	ldr	r1, [pc, #88]	@ (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d009      	beq.n	80018da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018c6:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	490e      	ldr	r1, [pc, #56]	@ (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018da:	f000 f855 	bl	8001988 <HAL_RCC_GetSysClockFreq>
 80018de:	4602      	mov	r2, r0
 80018e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001910 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	091b      	lsrs	r3, r3, #4
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	490a      	ldr	r1, [pc, #40]	@ (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 80018ec:	5ccb      	ldrb	r3, [r1, r3]
 80018ee:	fa22 f303 	lsr.w	r3, r2, r3
 80018f2:	4a09      	ldr	r2, [pc, #36]	@ (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018f6:	4b09      	ldr	r3, [pc, #36]	@ (800191c <HAL_RCC_ClockConfig+0x1c8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fbe8 	bl	80010d0 <HAL_InitTick>

  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023c00 	.word	0x40023c00
 8001910:	40023800 	.word	0x40023800
 8001914:	08003d9c 	.word	0x08003d9c
 8001918:	20000000 	.word	0x20000000
 800191c:	20000004 	.word	0x20000004

08001920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001924:	4b03      	ldr	r3, [pc, #12]	@ (8001934 <HAL_RCC_GetHCLKFreq+0x14>)
 8001926:	681b      	ldr	r3, [r3, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20000000 	.word	0x20000000

08001938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800193c:	f7ff fff0 	bl	8001920 <HAL_RCC_GetHCLKFreq>
 8001940:	4602      	mov	r2, r0
 8001942:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	0a9b      	lsrs	r3, r3, #10
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	4903      	ldr	r1, [pc, #12]	@ (800195c <HAL_RCC_GetPCLK1Freq+0x24>)
 800194e:	5ccb      	ldrb	r3, [r1, r3]
 8001950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	08003dac 	.word	0x08003dac

08001960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001964:	f7ff ffdc 	bl	8001920 <HAL_RCC_GetHCLKFreq>
 8001968:	4602      	mov	r2, r0
 800196a:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	0b5b      	lsrs	r3, r3, #13
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	4903      	ldr	r1, [pc, #12]	@ (8001984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001976:	5ccb      	ldrb	r3, [r1, r3]
 8001978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800197c:	4618      	mov	r0, r3
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40023800 	.word	0x40023800
 8001984:	08003dac 	.word	0x08003dac

08001988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800198c:	b0a6      	sub	sp, #152	@ 0x98
 800198e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001996:	2300      	movs	r3, #0
 8001998:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019ae:	4bc8      	ldr	r3, [pc, #800]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x348>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b0c      	cmp	r3, #12
 80019b8:	f200 817e 	bhi.w	8001cb8 <HAL_RCC_GetSysClockFreq+0x330>
 80019bc:	a201      	add	r2, pc, #4	@ (adr r2, 80019c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80019be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c2:	bf00      	nop
 80019c4:	080019f9 	.word	0x080019f9
 80019c8:	08001cb9 	.word	0x08001cb9
 80019cc:	08001cb9 	.word	0x08001cb9
 80019d0:	08001cb9 	.word	0x08001cb9
 80019d4:	08001a01 	.word	0x08001a01
 80019d8:	08001cb9 	.word	0x08001cb9
 80019dc:	08001cb9 	.word	0x08001cb9
 80019e0:	08001cb9 	.word	0x08001cb9
 80019e4:	08001a09 	.word	0x08001a09
 80019e8:	08001cb9 	.word	0x08001cb9
 80019ec:	08001cb9 	.word	0x08001cb9
 80019f0:	08001cb9 	.word	0x08001cb9
 80019f4:	08001b73 	.word	0x08001b73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019f8:	4bb6      	ldr	r3, [pc, #728]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80019fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80019fe:	e15f      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a00:	4bb5      	ldr	r3, [pc, #724]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001a06:	e15b      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a08:	4bb1      	ldr	r3, [pc, #708]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a14:	4bae      	ldr	r3, [pc, #696]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d031      	beq.n	8001a84 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a20:	4bab      	ldr	r3, [pc, #684]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	099b      	lsrs	r3, r3, #6
 8001a26:	2200      	movs	r2, #0
 8001a28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a32:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a34:	2300      	movs	r3, #0
 8001a36:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a38:	4ba7      	ldr	r3, [pc, #668]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a3a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a3e:	462a      	mov	r2, r5
 8001a40:	fb03 f202 	mul.w	r2, r3, r2
 8001a44:	2300      	movs	r3, #0
 8001a46:	4621      	mov	r1, r4
 8001a48:	fb01 f303 	mul.w	r3, r1, r3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4aa2      	ldr	r2, [pc, #648]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a50:	4621      	mov	r1, r4
 8001a52:	fba1 1202 	umull	r1, r2, r1, r2
 8001a56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001a58:	460a      	mov	r2, r1
 8001a5a:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001a5c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001a5e:	4413      	add	r3, r2
 8001a60:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a66:	2200      	movs	r2, #0
 8001a68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001a6a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001a6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001a70:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001a74:	f7fe fc1c 	bl	80002b0 <__aeabi_uldivmod>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a82:	e064      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a84:	4b92      	ldr	r3, [pc, #584]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	099b      	lsrs	r3, r3, #6
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a8e:	657a      	str	r2, [r7, #84]	@ 0x54
 8001a90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a98:	2300      	movs	r3, #0
 8001a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a9c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001aa0:	4622      	mov	r2, r4
 8001aa2:	462b      	mov	r3, r5
 8001aa4:	f04f 0000 	mov.w	r0, #0
 8001aa8:	f04f 0100 	mov.w	r1, #0
 8001aac:	0159      	lsls	r1, r3, #5
 8001aae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ab2:	0150      	lsls	r0, r2, #5
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4621      	mov	r1, r4
 8001aba:	1a51      	subs	r1, r2, r1
 8001abc:	6139      	str	r1, [r7, #16]
 8001abe:	4629      	mov	r1, r5
 8001ac0:	eb63 0301 	sbc.w	r3, r3, r1
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ad2:	4659      	mov	r1, fp
 8001ad4:	018b      	lsls	r3, r1, #6
 8001ad6:	4651      	mov	r1, sl
 8001ad8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001adc:	4651      	mov	r1, sl
 8001ade:	018a      	lsls	r2, r1, #6
 8001ae0:	4651      	mov	r1, sl
 8001ae2:	ebb2 0801 	subs.w	r8, r2, r1
 8001ae6:	4659      	mov	r1, fp
 8001ae8:	eb63 0901 	sbc.w	r9, r3, r1
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001af8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001afc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b00:	4690      	mov	r8, r2
 8001b02:	4699      	mov	r9, r3
 8001b04:	4623      	mov	r3, r4
 8001b06:	eb18 0303 	adds.w	r3, r8, r3
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	462b      	mov	r3, r5
 8001b0e:	eb49 0303 	adc.w	r3, r9, r3
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	f04f 0300 	mov.w	r3, #0
 8001b1c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b20:	4629      	mov	r1, r5
 8001b22:	028b      	lsls	r3, r1, #10
 8001b24:	4621      	mov	r1, r4
 8001b26:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b2a:	4621      	mov	r1, r4
 8001b2c:	028a      	lsls	r2, r1, #10
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b36:	2200      	movs	r2, #0
 8001b38:	643b      	str	r3, [r7, #64]	@ 0x40
 8001b3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8001b3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001b40:	f7fe fbb6 	bl	80002b0 <__aeabi_uldivmod>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4613      	mov	r3, r2
 8001b4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b4e:	4b60      	ldr	r3, [pc, #384]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	0c1b      	lsrs	r3, r3, #16
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	3301      	adds	r3, #1
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001b60:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001b64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001b70:	e0a6      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b72:	4b57      	ldr	r3, [pc, #348]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b7e:	4b54      	ldr	r3, [pc, #336]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d02a      	beq.n	8001be0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8a:	4b51      	ldr	r3, [pc, #324]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	099b      	lsrs	r3, r3, #6
 8001b90:	2200      	movs	r2, #0
 8001b92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4b4e      	ldr	r3, [pc, #312]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001ba0:	fb03 f201 	mul.w	r2, r3, r1
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	fb00 f303 	mul.w	r3, r0, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	4a4a      	ldr	r2, [pc, #296]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001bae:	fba0 1202 	umull	r1, r2, r0, r2
 8001bb2:	677a      	str	r2, [r7, #116]	@ 0x74
 8001bb4:	460a      	mov	r2, r1
 8001bb6:	673a      	str	r2, [r7, #112]	@ 0x70
 8001bb8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001bba:	4413      	add	r3, r2
 8001bbc:	677b      	str	r3, [r7, #116]	@ 0x74
 8001bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bc6:	637a      	str	r2, [r7, #52]	@ 0x34
 8001bc8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001bcc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001bd0:	f7fe fb6e 	bl	80002b0 <__aeabi_uldivmod>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4613      	mov	r3, r2
 8001bda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001bde:	e05b      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be0:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	099b      	lsrs	r3, r3, #6
 8001be6:	2200      	movs	r2, #0
 8001be8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bf2:	623b      	str	r3, [r7, #32]
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bf8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bfc:	4642      	mov	r2, r8
 8001bfe:	464b      	mov	r3, r9
 8001c00:	f04f 0000 	mov.w	r0, #0
 8001c04:	f04f 0100 	mov.w	r1, #0
 8001c08:	0159      	lsls	r1, r3, #5
 8001c0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c0e:	0150      	lsls	r0, r2, #5
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4641      	mov	r1, r8
 8001c16:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c1a:	4649      	mov	r1, r9
 8001c1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c34:	ebb2 040a 	subs.w	r4, r2, sl
 8001c38:	eb63 050b 	sbc.w	r5, r3, fp
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	f04f 0300 	mov.w	r3, #0
 8001c44:	00eb      	lsls	r3, r5, #3
 8001c46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c4a:	00e2      	lsls	r2, r4, #3
 8001c4c:	4614      	mov	r4, r2
 8001c4e:	461d      	mov	r5, r3
 8001c50:	4643      	mov	r3, r8
 8001c52:	18e3      	adds	r3, r4, r3
 8001c54:	603b      	str	r3, [r7, #0]
 8001c56:	464b      	mov	r3, r9
 8001c58:	eb45 0303 	adc.w	r3, r5, r3
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c6a:	4629      	mov	r1, r5
 8001c6c:	028b      	lsls	r3, r1, #10
 8001c6e:	4621      	mov	r1, r4
 8001c70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c74:	4621      	mov	r1, r4
 8001c76:	028a      	lsls	r2, r1, #10
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c80:	2200      	movs	r2, #0
 8001c82:	61bb      	str	r3, [r7, #24]
 8001c84:	61fa      	str	r2, [r7, #28]
 8001c86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c8a:	f7fe fb11 	bl	80002b0 <__aeabi_uldivmod>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4613      	mov	r3, r2
 8001c94:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c98:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	0f1b      	lsrs	r3, r3, #28
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001ca6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001caa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001cb6:	e003      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001cba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001cbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3798      	adds	r7, #152	@ 0x98
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	00f42400 	.word	0x00f42400
 8001cd8:	017d7840 	.word	0x017d7840

08001cdc <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001ce2:	f7ff fa39 	bl	8001158 <HAL_GetTick>
 8001ce6:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001ce8:	4b72      	ldr	r3, [pc, #456]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a71      	ldr	r2, [pc, #452]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf6:	f7ff fa2f 	bl	8001158 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e0d0      	b.n	8001eaa <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001d08:	4b6a      	ldr	r3, [pc, #424]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8001d14:	4b67      	ldr	r3, [pc, #412]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a66      	ldr	r2, [pc, #408]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d1e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001d20:	f7ff fa1a 	bl	8001158 <HAL_GetTick>
 8001d24:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001d26:	4b63      	ldr	r3, [pc, #396]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2e:	f7ff fa13 	bl	8001158 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e0b2      	b.n	8001eaa <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001d44:	4b5b      	ldr	r3, [pc, #364]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1ee      	bne.n	8001d2e <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001d50:	f7ff fa02 	bl	8001158 <HAL_GetTick>
 8001d54:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8001d56:	4b57      	ldr	r3, [pc, #348]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a56      	ldr	r2, [pc, #344]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001d5c:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8001d60:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d64:	f7ff f9f8 	bl	8001158 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	@ 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e099      	b.n	8001eaa <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001d76:	4b4f      	ldr	r3, [pc, #316]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001d82:	f7ff f9e9 	bl	8001158 <HAL_GetTick>
 8001d86:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001d88:	4b4a      	ldr	r3, [pc, #296]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a49      	ldr	r2, [pc, #292]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001d8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d92:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d96:	f7ff f9df 	bl	8001158 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e080      	b.n	8001eaa <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001da8:	4b42      	ldr	r3, [pc, #264]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f0      	bne.n	8001d96 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001db4:	f7ff f9d0 	bl	8001158 <HAL_GetTick>
 8001db8:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8001dba:	4b3e      	ldr	r3, [pc, #248]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a3d      	ldr	r2, [pc, #244]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001dc0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001dc4:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001dc8:	f7ff f9c6 	bl	8001158 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e067      	b.n	8001eaa <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8001dda:	4b36      	ldr	r3, [pc, #216]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001de6:	f7ff f9b7 	bl	8001158 <HAL_GetTick>
 8001dea:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8001dec:	4b31      	ldr	r3, [pc, #196]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a30      	ldr	r2, [pc, #192]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001df2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001df6:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001dfa:	f7ff f9ad 	bl	8001158 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e04e      	b.n	8001eaa <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8001e0c:	4b29      	ldr	r3, [pc, #164]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1f0      	bne.n	8001dfa <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 8001e18:	4b26      	ldr	r3, [pc, #152]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001e1a:	4a27      	ldr	r2, [pc, #156]	@ (8001eb8 <HAL_RCC_DeInit+0x1dc>)
 8001e1c:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8001e1e:	4b25      	ldr	r3, [pc, #148]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001e20:	4a25      	ldr	r2, [pc, #148]	@ (8001eb8 <HAL_RCC_DeInit+0x1dc>)
 8001e22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 8001e26:	4b23      	ldr	r3, [pc, #140]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001e28:	4a24      	ldr	r2, [pc, #144]	@ (8001ebc <HAL_RCC_DeInit+0x1e0>)
 8001e2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8001e2e:	4b21      	ldr	r3, [pc, #132]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	4a20      	ldr	r2, [pc, #128]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001e34:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8001e38:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	4a1d      	ldr	r2, [pc, #116]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001e40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001e44:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8001e46:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	4a1a      	ldr	r2, [pc, #104]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001e4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e50:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 8001e52:	4b18      	ldr	r3, [pc, #96]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	4a17      	ldr	r2, [pc, #92]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001e58:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 8001e5c:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8001e5e:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	4a14      	ldr	r2, [pc, #80]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001e64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e68:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8001e6a:	4b12      	ldr	r3, [pc, #72]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	4a11      	ldr	r2, [pc, #68]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001e70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e74:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001e76:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001e82:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e86:	4a0b      	ldr	r2, [pc, #44]	@ (8001eb4 <HAL_RCC_DeInit+0x1d8>)
 8001e88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e8c:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8001e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec0 <HAL_RCC_DeInit+0x1e4>)
 8001e90:	4a0c      	ldr	r2, [pc, #48]	@ (8001ec4 <HAL_RCC_DeInit+0x1e8>)
 8001e92:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e94:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec8 <HAL_RCC_DeInit+0x1ec>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff f919 	bl	80010d0 <HAL_InitTick>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e000      	b.n	8001eaa <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
  }
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	24003010 	.word	0x24003010
 8001ebc:	04003010 	.word	0x04003010
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	00f42400 	.word	0x00f42400
 8001ec8:	20000004 	.word	0x20000004

08001ecc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e28d      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 8083 	beq.w	8001ff2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001eec:	4b94      	ldr	r3, [pc, #592]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d019      	beq.n	8001f2c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001ef8:	4b91      	ldr	r3, [pc, #580]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 030c 	and.w	r3, r3, #12
        || \
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d106      	bne.n	8001f12 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001f04:	4b8e      	ldr	r3, [pc, #568]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f10:	d00c      	beq.n	8001f2c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f12:	4b8b      	ldr	r3, [pc, #556]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001f1a:	2b0c      	cmp	r3, #12
 8001f1c:	d112      	bne.n	8001f44 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f1e:	4b88      	ldr	r3, [pc, #544]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f2a:	d10b      	bne.n	8001f44 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2c:	4b84      	ldr	r3, [pc, #528]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d05b      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x124>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d157      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e25a      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f4c:	d106      	bne.n	8001f5c <HAL_RCC_OscConfig+0x90>
 8001f4e:	4b7c      	ldr	r3, [pc, #496]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a7b      	ldr	r2, [pc, #492]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e01d      	b.n	8001f98 <HAL_RCC_OscConfig+0xcc>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f64:	d10c      	bne.n	8001f80 <HAL_RCC_OscConfig+0xb4>
 8001f66:	4b76      	ldr	r3, [pc, #472]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a75      	ldr	r2, [pc, #468]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	4b73      	ldr	r3, [pc, #460]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a72      	ldr	r2, [pc, #456]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	e00b      	b.n	8001f98 <HAL_RCC_OscConfig+0xcc>
 8001f80:	4b6f      	ldr	r3, [pc, #444]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a6e      	ldr	r2, [pc, #440]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	4b6c      	ldr	r3, [pc, #432]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a6b      	ldr	r2, [pc, #428]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d013      	beq.n	8001fc8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7ff f8da 	bl	8001158 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa8:	f7ff f8d6 	bl	8001158 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	@ 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e21f      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fba:	4b61      	ldr	r3, [pc, #388]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0xdc>
 8001fc6:	e014      	b.n	8001ff2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7ff f8c6 	bl	8001158 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd0:	f7ff f8c2 	bl	8001158 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b64      	cmp	r3, #100	@ 0x64
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e20b      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe2:	4b57      	ldr	r3, [pc, #348]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x104>
 8001fee:	e000      	b.n	8001ff2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d06f      	beq.n	80020de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ffe:	4b50      	ldr	r3, [pc, #320]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b00      	cmp	r3, #0
 8002008:	d017      	beq.n	800203a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800200a:	4b4d      	ldr	r3, [pc, #308]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002012:	2b08      	cmp	r3, #8
 8002014:	d105      	bne.n	8002022 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002016:	4b4a      	ldr	r3, [pc, #296]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002022:	4b47      	ldr	r3, [pc, #284]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800202a:	2b0c      	cmp	r3, #12
 800202c:	d11c      	bne.n	8002068 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202e:	4b44      	ldr	r3, [pc, #272]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d116      	bne.n	8002068 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	4b41      	ldr	r3, [pc, #260]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_RCC_OscConfig+0x186>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e1d3      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002052:	4b3b      	ldr	r3, [pc, #236]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4937      	ldr	r1, [pc, #220]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	e03a      	b.n	80020de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d020      	beq.n	80020b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002070:	4b34      	ldr	r3, [pc, #208]	@ (8002144 <HAL_RCC_OscConfig+0x278>)
 8002072:	2201      	movs	r2, #1
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002076:	f7ff f86f 	bl	8001158 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800207e:	f7ff f86b 	bl	8001158 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e1b4      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002090:	4b2b      	ldr	r3, [pc, #172]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209c:	4b28      	ldr	r3, [pc, #160]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4925      	ldr	r1, [pc, #148]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
 80020b0:	e015      	b.n	80020de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b2:	4b24      	ldr	r3, [pc, #144]	@ (8002144 <HAL_RCC_OscConfig+0x278>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7ff f84e 	bl	8001158 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c0:	f7ff f84a 	bl	8001158 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e193      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d036      	beq.n	8002158 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d016      	beq.n	8002120 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f2:	4b15      	ldr	r3, [pc, #84]	@ (8002148 <HAL_RCC_OscConfig+0x27c>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7ff f82e 	bl	8001158 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002100:	f7ff f82a 	bl	8001158 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e173      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002112:	4b0b      	ldr	r3, [pc, #44]	@ (8002140 <HAL_RCC_OscConfig+0x274>)
 8002114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x234>
 800211e:	e01b      	b.n	8002158 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002120:	4b09      	ldr	r3, [pc, #36]	@ (8002148 <HAL_RCC_OscConfig+0x27c>)
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002126:	f7ff f817 	bl	8001158 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212c:	e00e      	b.n	800214c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800212e:	f7ff f813 	bl	8001158 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d907      	bls.n	800214c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e15c      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
 8002140:	40023800 	.word	0x40023800
 8002144:	42470000 	.word	0x42470000
 8002148:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214c:	4b8a      	ldr	r3, [pc, #552]	@ (8002378 <HAL_RCC_OscConfig+0x4ac>)
 800214e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1ea      	bne.n	800212e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 8097 	beq.w	8002294 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800216a:	4b83      	ldr	r3, [pc, #524]	@ (8002378 <HAL_RCC_OscConfig+0x4ac>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10f      	bne.n	8002196 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	4b7f      	ldr	r3, [pc, #508]	@ (8002378 <HAL_RCC_OscConfig+0x4ac>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	4a7e      	ldr	r2, [pc, #504]	@ (8002378 <HAL_RCC_OscConfig+0x4ac>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002184:	6413      	str	r3, [r2, #64]	@ 0x40
 8002186:	4b7c      	ldr	r3, [pc, #496]	@ (8002378 <HAL_RCC_OscConfig+0x4ac>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002192:	2301      	movs	r3, #1
 8002194:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002196:	4b79      	ldr	r3, [pc, #484]	@ (800237c <HAL_RCC_OscConfig+0x4b0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d118      	bne.n	80021d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a2:	4b76      	ldr	r3, [pc, #472]	@ (800237c <HAL_RCC_OscConfig+0x4b0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a75      	ldr	r2, [pc, #468]	@ (800237c <HAL_RCC_OscConfig+0x4b0>)
 80021a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ae:	f7fe ffd3 	bl	8001158 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b6:	f7fe ffcf 	bl	8001158 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e118      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	4b6c      	ldr	r3, [pc, #432]	@ (800237c <HAL_RCC_OscConfig+0x4b0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d106      	bne.n	80021ea <HAL_RCC_OscConfig+0x31e>
 80021dc:	4b66      	ldr	r3, [pc, #408]	@ (8002378 <HAL_RCC_OscConfig+0x4ac>)
 80021de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e0:	4a65      	ldr	r2, [pc, #404]	@ (8002378 <HAL_RCC_OscConfig+0x4ac>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80021e8:	e01c      	b.n	8002224 <HAL_RCC_OscConfig+0x358>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2b05      	cmp	r3, #5
 80021f0:	d10c      	bne.n	800220c <HAL_RCC_OscConfig+0x340>
 80021f2:	4b61      	ldr	r3, [pc, #388]	@ (8002378 <HAL_RCC_OscConfig+0x4ac>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f6:	4a60      	ldr	r2, [pc, #384]	@ (8002378 <HAL_RCC_OscConfig+0x4ac>)
 80021f8:	f043 0304 	orr.w	r3, r3, #4
 80021fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80021fe:	4b5e      	ldr	r3, [pc, #376]	@ (8002378 <HAL_RCC_OscConfig+0x4ac>)
 8002200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002202:	4a5d      	ldr	r2, [pc, #372]	@ (8002378 <HAL_RCC_OscConfig+0x4ac>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6713      	str	r3, [r2, #112]	@ 0x70
 800220a:	e00b      	b.n	8002224 <HAL_RCC_OscConfig+0x358>
 800220c:	4b5a      	ldr	r3, [pc, #360]	@ (8002378 <HAL_RCC_OscConfig+0x4ac>)
 800220e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002210:	4a59      	ldr	r2, [pc, #356]	@ (8002378 <HAL_RCC_OscConfig+0x4ac>)
 8002212:	f023 0301 	bic.w	r3, r3, #1
 8002216:	6713      	str	r3, [r2, #112]	@ 0x70
 8002218:	4b57      	ldr	r3, [pc, #348]	@ (8002378 <HAL_RCC_OscConfig+0x4ac>)
 800221a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800221c:	4a56      	ldr	r2, [pc, #344]	@ (8002378 <HAL_RCC_OscConfig+0x4ac>)
 800221e:	f023 0304 	bic.w	r3, r3, #4
 8002222:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d015      	beq.n	8002258 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222c:	f7fe ff94 	bl	8001158 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002232:	e00a      	b.n	800224a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002234:	f7fe ff90 	bl	8001158 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e0d7      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224a:	4b4b      	ldr	r3, [pc, #300]	@ (8002378 <HAL_RCC_OscConfig+0x4ac>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0ee      	beq.n	8002234 <HAL_RCC_OscConfig+0x368>
 8002256:	e014      	b.n	8002282 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7fe ff7e 	bl	8001158 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225e:	e00a      	b.n	8002276 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002260:	f7fe ff7a 	bl	8001158 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e0c1      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002276:	4b40      	ldr	r3, [pc, #256]	@ (8002378 <HAL_RCC_OscConfig+0x4ac>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1ee      	bne.n	8002260 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002282:	7dfb      	ldrb	r3, [r7, #23]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d105      	bne.n	8002294 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002288:	4b3b      	ldr	r3, [pc, #236]	@ (8002378 <HAL_RCC_OscConfig+0x4ac>)
 800228a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228c:	4a3a      	ldr	r2, [pc, #232]	@ (8002378 <HAL_RCC_OscConfig+0x4ac>)
 800228e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002292:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80ad 	beq.w	80023f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800229e:	4b36      	ldr	r3, [pc, #216]	@ (8002378 <HAL_RCC_OscConfig+0x4ac>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d060      	beq.n	800236c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d145      	bne.n	800233e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b2:	4b33      	ldr	r3, [pc, #204]	@ (8002380 <HAL_RCC_OscConfig+0x4b4>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe ff4e 	bl	8001158 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c0:	f7fe ff4a 	bl	8001158 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e093      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d2:	4b29      	ldr	r3, [pc, #164]	@ (8002378 <HAL_RCC_OscConfig+0x4ac>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69da      	ldr	r2, [r3, #28]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ec:	019b      	lsls	r3, r3, #6
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	3b01      	subs	r3, #1
 80022f8:	041b      	lsls	r3, r3, #16
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002300:	061b      	lsls	r3, r3, #24
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002308:	071b      	lsls	r3, r3, #28
 800230a:	491b      	ldr	r1, [pc, #108]	@ (8002378 <HAL_RCC_OscConfig+0x4ac>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002310:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <HAL_RCC_OscConfig+0x4b4>)
 8002312:	2201      	movs	r2, #1
 8002314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002316:	f7fe ff1f 	bl	8001158 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231e:	f7fe ff1b 	bl	8001158 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e064      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002330:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <HAL_RCC_OscConfig+0x4ac>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x452>
 800233c:	e05c      	b.n	80023f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233e:	4b10      	ldr	r3, [pc, #64]	@ (8002380 <HAL_RCC_OscConfig+0x4b4>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7fe ff08 	bl	8001158 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234c:	f7fe ff04 	bl	8001158 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e04d      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235e:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <HAL_RCC_OscConfig+0x4ac>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x480>
 800236a:	e045      	b.n	80023f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d107      	bne.n	8002384 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e040      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
 8002378:	40023800 	.word	0x40023800
 800237c:	40007000 	.word	0x40007000
 8002380:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002384:	4b1f      	ldr	r3, [pc, #124]	@ (8002404 <HAL_RCC_OscConfig+0x538>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d030      	beq.n	80023f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800239c:	429a      	cmp	r2, r3
 800239e:	d129      	bne.n	80023f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d122      	bne.n	80023f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023b4:	4013      	ands	r3, r2
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023bc:	4293      	cmp	r3, r2
 80023be:	d119      	bne.n	80023f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ca:	085b      	lsrs	r3, r3, #1
 80023cc:	3b01      	subs	r3, #1
 80023ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d10f      	bne.n	80023f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d107      	bne.n	80023f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e000      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800

08002408 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e042      	b.n	80024a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d106      	bne.n	8002434 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7fe fc4a 	bl	8000cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2224      	movs	r2, #36	@ 0x24
 8002438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800244a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 fa09 	bl	8002864 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002460:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695a      	ldr	r2, [r3, #20]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002470:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002480:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2220      	movs	r2, #32
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	@ 0x28
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	4613      	mov	r3, r2
 80024b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	d175      	bne.n	80025b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <HAL_UART_Transmit+0x2c>
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e06e      	b.n	80025b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2221      	movs	r2, #33	@ 0x21
 80024e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024e6:	f7fe fe37 	bl	8001158 <HAL_GetTick>
 80024ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	88fa      	ldrh	r2, [r7, #6]
 80024f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	88fa      	ldrh	r2, [r7, #6]
 80024f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002500:	d108      	bne.n	8002514 <HAL_UART_Transmit+0x6c>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d104      	bne.n	8002514 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	e003      	b.n	800251c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002518:	2300      	movs	r3, #0
 800251a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800251c:	e02e      	b.n	800257c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2200      	movs	r2, #0
 8002526:	2180      	movs	r1, #128	@ 0x80
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f8df 	bl	80026ec <UART_WaitOnFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e03a      	b.n	80025b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10b      	bne.n	800255e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002554:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	3302      	adds	r3, #2
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	e007      	b.n	800256e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	781a      	ldrb	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	3301      	adds	r3, #1
 800256c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002572:	b29b      	uxth	r3, r3
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1cb      	bne.n	800251e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2200      	movs	r2, #0
 800258e:	2140      	movs	r1, #64	@ 0x40
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f8ab 	bl	80026ec <UART_WaitOnFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e006      	b.n	80025b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	e000      	b.n	80025b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80025b4:	2302      	movs	r3, #2
  }
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3720      	adds	r7, #32
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b08a      	sub	sp, #40	@ 0x28
 80025c2:	af02      	add	r7, sp, #8
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	603b      	str	r3, [r7, #0]
 80025ca:	4613      	mov	r3, r2
 80025cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b20      	cmp	r3, #32
 80025dc:	f040 8081 	bne.w	80026e2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <HAL_UART_Receive+0x2e>
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e079      	b.n	80026e4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2222      	movs	r2, #34	@ 0x22
 80025fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002604:	f7fe fda8 	bl	8001158 <HAL_GetTick>
 8002608:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	88fa      	ldrh	r2, [r7, #6]
 800260e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	88fa      	ldrh	r2, [r7, #6]
 8002614:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800261e:	d108      	bne.n	8002632 <HAL_UART_Receive+0x74>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d104      	bne.n	8002632 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002628:	2300      	movs	r3, #0
 800262a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	61bb      	str	r3, [r7, #24]
 8002630:	e003      	b.n	800263a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002636:	2300      	movs	r3, #0
 8002638:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800263a:	e047      	b.n	80026cc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	2200      	movs	r2, #0
 8002644:	2120      	movs	r1, #32
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 f850 	bl	80026ec <UART_WaitOnFlagUntilTimeout>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2220      	movs	r2, #32
 8002656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e042      	b.n	80026e4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10c      	bne.n	800267e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	b29b      	uxth	r3, r3
 800266c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002670:	b29a      	uxth	r2, r3
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	3302      	adds	r3, #2
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	e01f      	b.n	80026be <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002686:	d007      	beq.n	8002698 <HAL_UART_Receive+0xda>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10a      	bne.n	80026a6 <HAL_UART_Receive+0xe8>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d106      	bne.n	80026a6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	701a      	strb	r2, [r3, #0]
 80026a4:	e008      	b.n	80026b8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	3301      	adds	r3, #1
 80026bc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1b2      	bne.n	800263c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2220      	movs	r2, #32
 80026da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	e000      	b.n	80026e4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80026e2:	2302      	movs	r3, #2
  }
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3720      	adds	r7, #32
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	4613      	mov	r3, r2
 80026fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026fc:	e03b      	b.n	8002776 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002704:	d037      	beq.n	8002776 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002706:	f7fe fd27 	bl	8001158 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	6a3a      	ldr	r2, [r7, #32]
 8002712:	429a      	cmp	r2, r3
 8002714:	d302      	bcc.n	800271c <UART_WaitOnFlagUntilTimeout+0x30>
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e03a      	b.n	8002796 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b00      	cmp	r3, #0
 800272c:	d023      	beq.n	8002776 <UART_WaitOnFlagUntilTimeout+0x8a>
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2b80      	cmp	r3, #128	@ 0x80
 8002732:	d020      	beq.n	8002776 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b40      	cmp	r3, #64	@ 0x40
 8002738:	d01d      	beq.n	8002776 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b08      	cmp	r3, #8
 8002746:	d116      	bne.n	8002776 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f81d 	bl	800279e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2208      	movs	r2, #8
 8002768:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e00f      	b.n	8002796 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	4013      	ands	r3, r2
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	429a      	cmp	r2, r3
 8002784:	bf0c      	ite	eq
 8002786:	2301      	moveq	r3, #1
 8002788:	2300      	movne	r3, #0
 800278a:	b2db      	uxtb	r3, r3
 800278c:	461a      	mov	r2, r3
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	429a      	cmp	r2, r3
 8002792:	d0b4      	beq.n	80026fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800279e:	b480      	push	{r7}
 80027a0:	b095      	sub	sp, #84	@ 0x54
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	330c      	adds	r3, #12
 80027ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027b0:	e853 3f00 	ldrex	r3, [r3]
 80027b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80027b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80027bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	330c      	adds	r3, #12
 80027c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80027c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80027cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027ce:	e841 2300 	strex	r3, r2, [r1]
 80027d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80027d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1e5      	bne.n	80027a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	3314      	adds	r3, #20
 80027e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	e853 3f00 	ldrex	r3, [r3]
 80027e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f023 0301 	bic.w	r3, r3, #1
 80027f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	3314      	adds	r3, #20
 80027f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002800:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002802:	e841 2300 	strex	r3, r2, [r1]
 8002806:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1e5      	bne.n	80027da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002812:	2b01      	cmp	r3, #1
 8002814:	d119      	bne.n	800284a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	330c      	adds	r3, #12
 800281c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	e853 3f00 	ldrex	r3, [r3]
 8002824:	60bb      	str	r3, [r7, #8]
   return(result);
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	f023 0310 	bic.w	r3, r3, #16
 800282c:	647b      	str	r3, [r7, #68]	@ 0x44
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	330c      	adds	r3, #12
 8002834:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002836:	61ba      	str	r2, [r7, #24]
 8002838:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283a:	6979      	ldr	r1, [r7, #20]
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	e841 2300 	strex	r3, r2, [r1]
 8002842:	613b      	str	r3, [r7, #16]
   return(result);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1e5      	bne.n	8002816 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002858:	bf00      	nop
 800285a:	3754      	adds	r7, #84	@ 0x54
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002868:	b0c0      	sub	sp, #256	@ 0x100
 800286a:	af00      	add	r7, sp, #0
 800286c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800287c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002880:	68d9      	ldr	r1, [r3, #12]
 8002882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	ea40 0301 	orr.w	r3, r0, r1
 800288c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800288e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	431a      	orrs	r2, r3
 800289c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80028bc:	f021 010c 	bic.w	r1, r1, #12
 80028c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80028ca:	430b      	orrs	r3, r1
 80028cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80028da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028de:	6999      	ldr	r1, [r3, #24]
 80028e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	ea40 0301 	orr.w	r3, r0, r1
 80028ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	4b8f      	ldr	r3, [pc, #572]	@ (8002b30 <UART_SetConfig+0x2cc>)
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d005      	beq.n	8002904 <UART_SetConfig+0xa0>
 80028f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	4b8d      	ldr	r3, [pc, #564]	@ (8002b34 <UART_SetConfig+0x2d0>)
 8002900:	429a      	cmp	r2, r3
 8002902:	d104      	bne.n	800290e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002904:	f7ff f82c 	bl	8001960 <HAL_RCC_GetPCLK2Freq>
 8002908:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800290c:	e003      	b.n	8002916 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800290e:	f7ff f813 	bl	8001938 <HAL_RCC_GetPCLK1Freq>
 8002912:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002920:	f040 810c 	bne.w	8002b3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002928:	2200      	movs	r2, #0
 800292a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800292e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002932:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002936:	4622      	mov	r2, r4
 8002938:	462b      	mov	r3, r5
 800293a:	1891      	adds	r1, r2, r2
 800293c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800293e:	415b      	adcs	r3, r3
 8002940:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002942:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002946:	4621      	mov	r1, r4
 8002948:	eb12 0801 	adds.w	r8, r2, r1
 800294c:	4629      	mov	r1, r5
 800294e:	eb43 0901 	adc.w	r9, r3, r1
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800295e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002962:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002966:	4690      	mov	r8, r2
 8002968:	4699      	mov	r9, r3
 800296a:	4623      	mov	r3, r4
 800296c:	eb18 0303 	adds.w	r3, r8, r3
 8002970:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002974:	462b      	mov	r3, r5
 8002976:	eb49 0303 	adc.w	r3, r9, r3
 800297a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800297e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800298a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800298e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002992:	460b      	mov	r3, r1
 8002994:	18db      	adds	r3, r3, r3
 8002996:	653b      	str	r3, [r7, #80]	@ 0x50
 8002998:	4613      	mov	r3, r2
 800299a:	eb42 0303 	adc.w	r3, r2, r3
 800299e:	657b      	str	r3, [r7, #84]	@ 0x54
 80029a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80029a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80029a8:	f7fd fc82 	bl	80002b0 <__aeabi_uldivmod>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4b61      	ldr	r3, [pc, #388]	@ (8002b38 <UART_SetConfig+0x2d4>)
 80029b2:	fba3 2302 	umull	r2, r3, r3, r2
 80029b6:	095b      	lsrs	r3, r3, #5
 80029b8:	011c      	lsls	r4, r3, #4
 80029ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029be:	2200      	movs	r2, #0
 80029c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80029c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80029cc:	4642      	mov	r2, r8
 80029ce:	464b      	mov	r3, r9
 80029d0:	1891      	adds	r1, r2, r2
 80029d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80029d4:	415b      	adcs	r3, r3
 80029d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029dc:	4641      	mov	r1, r8
 80029de:	eb12 0a01 	adds.w	sl, r2, r1
 80029e2:	4649      	mov	r1, r9
 80029e4:	eb43 0b01 	adc.w	fp, r3, r1
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	f04f 0300 	mov.w	r3, #0
 80029f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029fc:	4692      	mov	sl, r2
 80029fe:	469b      	mov	fp, r3
 8002a00:	4643      	mov	r3, r8
 8002a02:	eb1a 0303 	adds.w	r3, sl, r3
 8002a06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a0a:	464b      	mov	r3, r9
 8002a0c:	eb4b 0303 	adc.w	r3, fp, r3
 8002a10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a20:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	18db      	adds	r3, r3, r3
 8002a2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a2e:	4613      	mov	r3, r2
 8002a30:	eb42 0303 	adc.w	r3, r2, r3
 8002a34:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a3e:	f7fd fc37 	bl	80002b0 <__aeabi_uldivmod>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4611      	mov	r1, r2
 8002a48:	4b3b      	ldr	r3, [pc, #236]	@ (8002b38 <UART_SetConfig+0x2d4>)
 8002a4a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	2264      	movs	r2, #100	@ 0x64
 8002a52:	fb02 f303 	mul.w	r3, r2, r3
 8002a56:	1acb      	subs	r3, r1, r3
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a5e:	4b36      	ldr	r3, [pc, #216]	@ (8002b38 <UART_SetConfig+0x2d4>)
 8002a60:	fba3 2302 	umull	r2, r3, r3, r2
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a6c:	441c      	add	r4, r3
 8002a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a72:	2200      	movs	r2, #0
 8002a74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a78:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a80:	4642      	mov	r2, r8
 8002a82:	464b      	mov	r3, r9
 8002a84:	1891      	adds	r1, r2, r2
 8002a86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a88:	415b      	adcs	r3, r3
 8002a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a90:	4641      	mov	r1, r8
 8002a92:	1851      	adds	r1, r2, r1
 8002a94:	6339      	str	r1, [r7, #48]	@ 0x30
 8002a96:	4649      	mov	r1, r9
 8002a98:	414b      	adcs	r3, r1
 8002a9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002aa8:	4659      	mov	r1, fp
 8002aaa:	00cb      	lsls	r3, r1, #3
 8002aac:	4651      	mov	r1, sl
 8002aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ab2:	4651      	mov	r1, sl
 8002ab4:	00ca      	lsls	r2, r1, #3
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4603      	mov	r3, r0
 8002abc:	4642      	mov	r2, r8
 8002abe:	189b      	adds	r3, r3, r2
 8002ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ac4:	464b      	mov	r3, r9
 8002ac6:	460a      	mov	r2, r1
 8002ac8:	eb42 0303 	adc.w	r3, r2, r3
 8002acc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002adc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002ae0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	18db      	adds	r3, r3, r3
 8002ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aea:	4613      	mov	r3, r2
 8002aec:	eb42 0303 	adc.w	r3, r2, r3
 8002af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002af2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002af6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002afa:	f7fd fbd9 	bl	80002b0 <__aeabi_uldivmod>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4b0d      	ldr	r3, [pc, #52]	@ (8002b38 <UART_SetConfig+0x2d4>)
 8002b04:	fba3 1302 	umull	r1, r3, r3, r2
 8002b08:	095b      	lsrs	r3, r3, #5
 8002b0a:	2164      	movs	r1, #100	@ 0x64
 8002b0c:	fb01 f303 	mul.w	r3, r1, r3
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	3332      	adds	r3, #50	@ 0x32
 8002b16:	4a08      	ldr	r2, [pc, #32]	@ (8002b38 <UART_SetConfig+0x2d4>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	f003 0207 	and.w	r2, r3, #7
 8002b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4422      	add	r2, r4
 8002b2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b2c:	e106      	b.n	8002d3c <UART_SetConfig+0x4d8>
 8002b2e:	bf00      	nop
 8002b30:	40011000 	.word	0x40011000
 8002b34:	40011400 	.word	0x40011400
 8002b38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b40:	2200      	movs	r2, #0
 8002b42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b46:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b4e:	4642      	mov	r2, r8
 8002b50:	464b      	mov	r3, r9
 8002b52:	1891      	adds	r1, r2, r2
 8002b54:	6239      	str	r1, [r7, #32]
 8002b56:	415b      	adcs	r3, r3
 8002b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b5e:	4641      	mov	r1, r8
 8002b60:	1854      	adds	r4, r2, r1
 8002b62:	4649      	mov	r1, r9
 8002b64:	eb43 0501 	adc.w	r5, r3, r1
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	00eb      	lsls	r3, r5, #3
 8002b72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b76:	00e2      	lsls	r2, r4, #3
 8002b78:	4614      	mov	r4, r2
 8002b7a:	461d      	mov	r5, r3
 8002b7c:	4643      	mov	r3, r8
 8002b7e:	18e3      	adds	r3, r4, r3
 8002b80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b84:	464b      	mov	r3, r9
 8002b86:	eb45 0303 	adc.w	r3, r5, r3
 8002b8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002baa:	4629      	mov	r1, r5
 8002bac:	008b      	lsls	r3, r1, #2
 8002bae:	4621      	mov	r1, r4
 8002bb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	008a      	lsls	r2, r1, #2
 8002bb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002bbc:	f7fd fb78 	bl	80002b0 <__aeabi_uldivmod>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4b60      	ldr	r3, [pc, #384]	@ (8002d48 <UART_SetConfig+0x4e4>)
 8002bc6:	fba3 2302 	umull	r2, r3, r3, r2
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	011c      	lsls	r4, r3, #4
 8002bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002bd8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002bdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002be0:	4642      	mov	r2, r8
 8002be2:	464b      	mov	r3, r9
 8002be4:	1891      	adds	r1, r2, r2
 8002be6:	61b9      	str	r1, [r7, #24]
 8002be8:	415b      	adcs	r3, r3
 8002bea:	61fb      	str	r3, [r7, #28]
 8002bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bf0:	4641      	mov	r1, r8
 8002bf2:	1851      	adds	r1, r2, r1
 8002bf4:	6139      	str	r1, [r7, #16]
 8002bf6:	4649      	mov	r1, r9
 8002bf8:	414b      	adcs	r3, r1
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c08:	4659      	mov	r1, fp
 8002c0a:	00cb      	lsls	r3, r1, #3
 8002c0c:	4651      	mov	r1, sl
 8002c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c12:	4651      	mov	r1, sl
 8002c14:	00ca      	lsls	r2, r1, #3
 8002c16:	4610      	mov	r0, r2
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4642      	mov	r2, r8
 8002c1e:	189b      	adds	r3, r3, r2
 8002c20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c24:	464b      	mov	r3, r9
 8002c26:	460a      	mov	r2, r1
 8002c28:	eb42 0303 	adc.w	r3, r2, r3
 8002c2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c48:	4649      	mov	r1, r9
 8002c4a:	008b      	lsls	r3, r1, #2
 8002c4c:	4641      	mov	r1, r8
 8002c4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c52:	4641      	mov	r1, r8
 8002c54:	008a      	lsls	r2, r1, #2
 8002c56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c5a:	f7fd fb29 	bl	80002b0 <__aeabi_uldivmod>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4611      	mov	r1, r2
 8002c64:	4b38      	ldr	r3, [pc, #224]	@ (8002d48 <UART_SetConfig+0x4e4>)
 8002c66:	fba3 2301 	umull	r2, r3, r3, r1
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	2264      	movs	r2, #100	@ 0x64
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	1acb      	subs	r3, r1, r3
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	3332      	adds	r3, #50	@ 0x32
 8002c78:	4a33      	ldr	r2, [pc, #204]	@ (8002d48 <UART_SetConfig+0x4e4>)
 8002c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7e:	095b      	lsrs	r3, r3, #5
 8002c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c84:	441c      	add	r4, r3
 8002c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002c94:	4642      	mov	r2, r8
 8002c96:	464b      	mov	r3, r9
 8002c98:	1891      	adds	r1, r2, r2
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	415b      	adcs	r3, r3
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ca4:	4641      	mov	r1, r8
 8002ca6:	1851      	adds	r1, r2, r1
 8002ca8:	6039      	str	r1, [r7, #0]
 8002caa:	4649      	mov	r1, r9
 8002cac:	414b      	adcs	r3, r1
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cbc:	4659      	mov	r1, fp
 8002cbe:	00cb      	lsls	r3, r1, #3
 8002cc0:	4651      	mov	r1, sl
 8002cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cc6:	4651      	mov	r1, sl
 8002cc8:	00ca      	lsls	r2, r1, #3
 8002cca:	4610      	mov	r0, r2
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4603      	mov	r3, r0
 8002cd0:	4642      	mov	r2, r8
 8002cd2:	189b      	adds	r3, r3, r2
 8002cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cd6:	464b      	mov	r3, r9
 8002cd8:	460a      	mov	r2, r1
 8002cda:	eb42 0303 	adc.w	r3, r2, r3
 8002cde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cea:	667a      	str	r2, [r7, #100]	@ 0x64
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002cf8:	4649      	mov	r1, r9
 8002cfa:	008b      	lsls	r3, r1, #2
 8002cfc:	4641      	mov	r1, r8
 8002cfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d02:	4641      	mov	r1, r8
 8002d04:	008a      	lsls	r2, r1, #2
 8002d06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d0a:	f7fd fad1 	bl	80002b0 <__aeabi_uldivmod>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4b0d      	ldr	r3, [pc, #52]	@ (8002d48 <UART_SetConfig+0x4e4>)
 8002d14:	fba3 1302 	umull	r1, r3, r3, r2
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	2164      	movs	r1, #100	@ 0x64
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	3332      	adds	r3, #50	@ 0x32
 8002d26:	4a08      	ldr	r2, [pc, #32]	@ (8002d48 <UART_SetConfig+0x4e4>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	f003 020f 	and.w	r2, r3, #15
 8002d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4422      	add	r2, r4
 8002d3a:	609a      	str	r2, [r3, #8]
}
 8002d3c:	bf00      	nop
 8002d3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d42:	46bd      	mov	sp, r7
 8002d44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d48:	51eb851f 	.word	0x51eb851f

08002d4c <std>:
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	b510      	push	{r4, lr}
 8002d50:	4604      	mov	r4, r0
 8002d52:	e9c0 3300 	strd	r3, r3, [r0]
 8002d56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d5a:	6083      	str	r3, [r0, #8]
 8002d5c:	8181      	strh	r1, [r0, #12]
 8002d5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002d60:	81c2      	strh	r2, [r0, #14]
 8002d62:	6183      	str	r3, [r0, #24]
 8002d64:	4619      	mov	r1, r3
 8002d66:	2208      	movs	r2, #8
 8002d68:	305c      	adds	r0, #92	@ 0x5c
 8002d6a:	f000 f9f9 	bl	8003160 <memset>
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002da4 <std+0x58>)
 8002d70:	6263      	str	r3, [r4, #36]	@ 0x24
 8002d72:	4b0d      	ldr	r3, [pc, #52]	@ (8002da8 <std+0x5c>)
 8002d74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002d76:	4b0d      	ldr	r3, [pc, #52]	@ (8002dac <std+0x60>)
 8002d78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002db0 <std+0x64>)
 8002d7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002db4 <std+0x68>)
 8002d80:	6224      	str	r4, [r4, #32]
 8002d82:	429c      	cmp	r4, r3
 8002d84:	d006      	beq.n	8002d94 <std+0x48>
 8002d86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002d8a:	4294      	cmp	r4, r2
 8002d8c:	d002      	beq.n	8002d94 <std+0x48>
 8002d8e:	33d0      	adds	r3, #208	@ 0xd0
 8002d90:	429c      	cmp	r4, r3
 8002d92:	d105      	bne.n	8002da0 <std+0x54>
 8002d94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d9c:	f000 ba58 	b.w	8003250 <__retarget_lock_init_recursive>
 8002da0:	bd10      	pop	{r4, pc}
 8002da2:	bf00      	nop
 8002da4:	08002fb1 	.word	0x08002fb1
 8002da8:	08002fd3 	.word	0x08002fd3
 8002dac:	0800300b 	.word	0x0800300b
 8002db0:	0800302f 	.word	0x0800302f
 8002db4:	200001ec 	.word	0x200001ec

08002db8 <stdio_exit_handler>:
 8002db8:	4a02      	ldr	r2, [pc, #8]	@ (8002dc4 <stdio_exit_handler+0xc>)
 8002dba:	4903      	ldr	r1, [pc, #12]	@ (8002dc8 <stdio_exit_handler+0x10>)
 8002dbc:	4803      	ldr	r0, [pc, #12]	@ (8002dcc <stdio_exit_handler+0x14>)
 8002dbe:	f000 b869 	b.w	8002e94 <_fwalk_sglue>
 8002dc2:	bf00      	nop
 8002dc4:	2000000c 	.word	0x2000000c
 8002dc8:	08003af1 	.word	0x08003af1
 8002dcc:	2000001c 	.word	0x2000001c

08002dd0 <cleanup_stdio>:
 8002dd0:	6841      	ldr	r1, [r0, #4]
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002e04 <cleanup_stdio+0x34>)
 8002dd4:	4299      	cmp	r1, r3
 8002dd6:	b510      	push	{r4, lr}
 8002dd8:	4604      	mov	r4, r0
 8002dda:	d001      	beq.n	8002de0 <cleanup_stdio+0x10>
 8002ddc:	f000 fe88 	bl	8003af0 <_fflush_r>
 8002de0:	68a1      	ldr	r1, [r4, #8]
 8002de2:	4b09      	ldr	r3, [pc, #36]	@ (8002e08 <cleanup_stdio+0x38>)
 8002de4:	4299      	cmp	r1, r3
 8002de6:	d002      	beq.n	8002dee <cleanup_stdio+0x1e>
 8002de8:	4620      	mov	r0, r4
 8002dea:	f000 fe81 	bl	8003af0 <_fflush_r>
 8002dee:	68e1      	ldr	r1, [r4, #12]
 8002df0:	4b06      	ldr	r3, [pc, #24]	@ (8002e0c <cleanup_stdio+0x3c>)
 8002df2:	4299      	cmp	r1, r3
 8002df4:	d004      	beq.n	8002e00 <cleanup_stdio+0x30>
 8002df6:	4620      	mov	r0, r4
 8002df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dfc:	f000 be78 	b.w	8003af0 <_fflush_r>
 8002e00:	bd10      	pop	{r4, pc}
 8002e02:	bf00      	nop
 8002e04:	200001ec 	.word	0x200001ec
 8002e08:	20000254 	.word	0x20000254
 8002e0c:	200002bc 	.word	0x200002bc

08002e10 <global_stdio_init.part.0>:
 8002e10:	b510      	push	{r4, lr}
 8002e12:	4b0b      	ldr	r3, [pc, #44]	@ (8002e40 <global_stdio_init.part.0+0x30>)
 8002e14:	4c0b      	ldr	r4, [pc, #44]	@ (8002e44 <global_stdio_init.part.0+0x34>)
 8002e16:	4a0c      	ldr	r2, [pc, #48]	@ (8002e48 <global_stdio_init.part.0+0x38>)
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2104      	movs	r1, #4
 8002e20:	f7ff ff94 	bl	8002d4c <std>
 8002e24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002e28:	2201      	movs	r2, #1
 8002e2a:	2109      	movs	r1, #9
 8002e2c:	f7ff ff8e 	bl	8002d4c <std>
 8002e30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002e34:	2202      	movs	r2, #2
 8002e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e3a:	2112      	movs	r1, #18
 8002e3c:	f7ff bf86 	b.w	8002d4c <std>
 8002e40:	20000324 	.word	0x20000324
 8002e44:	200001ec 	.word	0x200001ec
 8002e48:	08002db9 	.word	0x08002db9

08002e4c <__sfp_lock_acquire>:
 8002e4c:	4801      	ldr	r0, [pc, #4]	@ (8002e54 <__sfp_lock_acquire+0x8>)
 8002e4e:	f000 ba00 	b.w	8003252 <__retarget_lock_acquire_recursive>
 8002e52:	bf00      	nop
 8002e54:	2000032d 	.word	0x2000032d

08002e58 <__sfp_lock_release>:
 8002e58:	4801      	ldr	r0, [pc, #4]	@ (8002e60 <__sfp_lock_release+0x8>)
 8002e5a:	f000 b9fb 	b.w	8003254 <__retarget_lock_release_recursive>
 8002e5e:	bf00      	nop
 8002e60:	2000032d 	.word	0x2000032d

08002e64 <__sinit>:
 8002e64:	b510      	push	{r4, lr}
 8002e66:	4604      	mov	r4, r0
 8002e68:	f7ff fff0 	bl	8002e4c <__sfp_lock_acquire>
 8002e6c:	6a23      	ldr	r3, [r4, #32]
 8002e6e:	b11b      	cbz	r3, 8002e78 <__sinit+0x14>
 8002e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e74:	f7ff bff0 	b.w	8002e58 <__sfp_lock_release>
 8002e78:	4b04      	ldr	r3, [pc, #16]	@ (8002e8c <__sinit+0x28>)
 8002e7a:	6223      	str	r3, [r4, #32]
 8002e7c:	4b04      	ldr	r3, [pc, #16]	@ (8002e90 <__sinit+0x2c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1f5      	bne.n	8002e70 <__sinit+0xc>
 8002e84:	f7ff ffc4 	bl	8002e10 <global_stdio_init.part.0>
 8002e88:	e7f2      	b.n	8002e70 <__sinit+0xc>
 8002e8a:	bf00      	nop
 8002e8c:	08002dd1 	.word	0x08002dd1
 8002e90:	20000324 	.word	0x20000324

08002e94 <_fwalk_sglue>:
 8002e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e98:	4607      	mov	r7, r0
 8002e9a:	4688      	mov	r8, r1
 8002e9c:	4614      	mov	r4, r2
 8002e9e:	2600      	movs	r6, #0
 8002ea0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002ea4:	f1b9 0901 	subs.w	r9, r9, #1
 8002ea8:	d505      	bpl.n	8002eb6 <_fwalk_sglue+0x22>
 8002eaa:	6824      	ldr	r4, [r4, #0]
 8002eac:	2c00      	cmp	r4, #0
 8002eae:	d1f7      	bne.n	8002ea0 <_fwalk_sglue+0xc>
 8002eb0:	4630      	mov	r0, r6
 8002eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002eb6:	89ab      	ldrh	r3, [r5, #12]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d907      	bls.n	8002ecc <_fwalk_sglue+0x38>
 8002ebc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	d003      	beq.n	8002ecc <_fwalk_sglue+0x38>
 8002ec4:	4629      	mov	r1, r5
 8002ec6:	4638      	mov	r0, r7
 8002ec8:	47c0      	blx	r8
 8002eca:	4306      	orrs	r6, r0
 8002ecc:	3568      	adds	r5, #104	@ 0x68
 8002ece:	e7e9      	b.n	8002ea4 <_fwalk_sglue+0x10>

08002ed0 <iprintf>:
 8002ed0:	b40f      	push	{r0, r1, r2, r3}
 8002ed2:	b507      	push	{r0, r1, r2, lr}
 8002ed4:	4906      	ldr	r1, [pc, #24]	@ (8002ef0 <iprintf+0x20>)
 8002ed6:	ab04      	add	r3, sp, #16
 8002ed8:	6808      	ldr	r0, [r1, #0]
 8002eda:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ede:	6881      	ldr	r1, [r0, #8]
 8002ee0:	9301      	str	r3, [sp, #4]
 8002ee2:	f000 fadb 	bl	800349c <_vfiprintf_r>
 8002ee6:	b003      	add	sp, #12
 8002ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002eec:	b004      	add	sp, #16
 8002eee:	4770      	bx	lr
 8002ef0:	20000018 	.word	0x20000018

08002ef4 <_puts_r>:
 8002ef4:	6a03      	ldr	r3, [r0, #32]
 8002ef6:	b570      	push	{r4, r5, r6, lr}
 8002ef8:	6884      	ldr	r4, [r0, #8]
 8002efa:	4605      	mov	r5, r0
 8002efc:	460e      	mov	r6, r1
 8002efe:	b90b      	cbnz	r3, 8002f04 <_puts_r+0x10>
 8002f00:	f7ff ffb0 	bl	8002e64 <__sinit>
 8002f04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f06:	07db      	lsls	r3, r3, #31
 8002f08:	d405      	bmi.n	8002f16 <_puts_r+0x22>
 8002f0a:	89a3      	ldrh	r3, [r4, #12]
 8002f0c:	0598      	lsls	r0, r3, #22
 8002f0e:	d402      	bmi.n	8002f16 <_puts_r+0x22>
 8002f10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f12:	f000 f99e 	bl	8003252 <__retarget_lock_acquire_recursive>
 8002f16:	89a3      	ldrh	r3, [r4, #12]
 8002f18:	0719      	lsls	r1, r3, #28
 8002f1a:	d502      	bpl.n	8002f22 <_puts_r+0x2e>
 8002f1c:	6923      	ldr	r3, [r4, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d135      	bne.n	8002f8e <_puts_r+0x9a>
 8002f22:	4621      	mov	r1, r4
 8002f24:	4628      	mov	r0, r5
 8002f26:	f000 f8c5 	bl	80030b4 <__swsetup_r>
 8002f2a:	b380      	cbz	r0, 8002f8e <_puts_r+0x9a>
 8002f2c:	f04f 35ff 	mov.w	r5, #4294967295
 8002f30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f32:	07da      	lsls	r2, r3, #31
 8002f34:	d405      	bmi.n	8002f42 <_puts_r+0x4e>
 8002f36:	89a3      	ldrh	r3, [r4, #12]
 8002f38:	059b      	lsls	r3, r3, #22
 8002f3a:	d402      	bmi.n	8002f42 <_puts_r+0x4e>
 8002f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f3e:	f000 f989 	bl	8003254 <__retarget_lock_release_recursive>
 8002f42:	4628      	mov	r0, r5
 8002f44:	bd70      	pop	{r4, r5, r6, pc}
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	da04      	bge.n	8002f54 <_puts_r+0x60>
 8002f4a:	69a2      	ldr	r2, [r4, #24]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	dc17      	bgt.n	8002f80 <_puts_r+0x8c>
 8002f50:	290a      	cmp	r1, #10
 8002f52:	d015      	beq.n	8002f80 <_puts_r+0x8c>
 8002f54:	6823      	ldr	r3, [r4, #0]
 8002f56:	1c5a      	adds	r2, r3, #1
 8002f58:	6022      	str	r2, [r4, #0]
 8002f5a:	7019      	strb	r1, [r3, #0]
 8002f5c:	68a3      	ldr	r3, [r4, #8]
 8002f5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f62:	3b01      	subs	r3, #1
 8002f64:	60a3      	str	r3, [r4, #8]
 8002f66:	2900      	cmp	r1, #0
 8002f68:	d1ed      	bne.n	8002f46 <_puts_r+0x52>
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	da11      	bge.n	8002f92 <_puts_r+0x9e>
 8002f6e:	4622      	mov	r2, r4
 8002f70:	210a      	movs	r1, #10
 8002f72:	4628      	mov	r0, r5
 8002f74:	f000 f85f 	bl	8003036 <__swbuf_r>
 8002f78:	3001      	adds	r0, #1
 8002f7a:	d0d7      	beq.n	8002f2c <_puts_r+0x38>
 8002f7c:	250a      	movs	r5, #10
 8002f7e:	e7d7      	b.n	8002f30 <_puts_r+0x3c>
 8002f80:	4622      	mov	r2, r4
 8002f82:	4628      	mov	r0, r5
 8002f84:	f000 f857 	bl	8003036 <__swbuf_r>
 8002f88:	3001      	adds	r0, #1
 8002f8a:	d1e7      	bne.n	8002f5c <_puts_r+0x68>
 8002f8c:	e7ce      	b.n	8002f2c <_puts_r+0x38>
 8002f8e:	3e01      	subs	r6, #1
 8002f90:	e7e4      	b.n	8002f5c <_puts_r+0x68>
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	6022      	str	r2, [r4, #0]
 8002f98:	220a      	movs	r2, #10
 8002f9a:	701a      	strb	r2, [r3, #0]
 8002f9c:	e7ee      	b.n	8002f7c <_puts_r+0x88>
	...

08002fa0 <puts>:
 8002fa0:	4b02      	ldr	r3, [pc, #8]	@ (8002fac <puts+0xc>)
 8002fa2:	4601      	mov	r1, r0
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	f7ff bfa5 	b.w	8002ef4 <_puts_r>
 8002faa:	bf00      	nop
 8002fac:	20000018 	.word	0x20000018

08002fb0 <__sread>:
 8002fb0:	b510      	push	{r4, lr}
 8002fb2:	460c      	mov	r4, r1
 8002fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fb8:	f000 f8fc 	bl	80031b4 <_read_r>
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	bfab      	itete	ge
 8002fc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002fc2:	89a3      	ldrhlt	r3, [r4, #12]
 8002fc4:	181b      	addge	r3, r3, r0
 8002fc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002fca:	bfac      	ite	ge
 8002fcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002fce:	81a3      	strhlt	r3, [r4, #12]
 8002fd0:	bd10      	pop	{r4, pc}

08002fd2 <__swrite>:
 8002fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fd6:	461f      	mov	r7, r3
 8002fd8:	898b      	ldrh	r3, [r1, #12]
 8002fda:	05db      	lsls	r3, r3, #23
 8002fdc:	4605      	mov	r5, r0
 8002fde:	460c      	mov	r4, r1
 8002fe0:	4616      	mov	r6, r2
 8002fe2:	d505      	bpl.n	8002ff0 <__swrite+0x1e>
 8002fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fe8:	2302      	movs	r3, #2
 8002fea:	2200      	movs	r2, #0
 8002fec:	f000 f8d0 	bl	8003190 <_lseek_r>
 8002ff0:	89a3      	ldrh	r3, [r4, #12]
 8002ff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ff6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ffa:	81a3      	strh	r3, [r4, #12]
 8002ffc:	4632      	mov	r2, r6
 8002ffe:	463b      	mov	r3, r7
 8003000:	4628      	mov	r0, r5
 8003002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003006:	f000 b8e7 	b.w	80031d8 <_write_r>

0800300a <__sseek>:
 800300a:	b510      	push	{r4, lr}
 800300c:	460c      	mov	r4, r1
 800300e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003012:	f000 f8bd 	bl	8003190 <_lseek_r>
 8003016:	1c43      	adds	r3, r0, #1
 8003018:	89a3      	ldrh	r3, [r4, #12]
 800301a:	bf15      	itete	ne
 800301c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800301e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003022:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003026:	81a3      	strheq	r3, [r4, #12]
 8003028:	bf18      	it	ne
 800302a:	81a3      	strhne	r3, [r4, #12]
 800302c:	bd10      	pop	{r4, pc}

0800302e <__sclose>:
 800302e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003032:	f000 b89d 	b.w	8003170 <_close_r>

08003036 <__swbuf_r>:
 8003036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003038:	460e      	mov	r6, r1
 800303a:	4614      	mov	r4, r2
 800303c:	4605      	mov	r5, r0
 800303e:	b118      	cbz	r0, 8003048 <__swbuf_r+0x12>
 8003040:	6a03      	ldr	r3, [r0, #32]
 8003042:	b90b      	cbnz	r3, 8003048 <__swbuf_r+0x12>
 8003044:	f7ff ff0e 	bl	8002e64 <__sinit>
 8003048:	69a3      	ldr	r3, [r4, #24]
 800304a:	60a3      	str	r3, [r4, #8]
 800304c:	89a3      	ldrh	r3, [r4, #12]
 800304e:	071a      	lsls	r2, r3, #28
 8003050:	d501      	bpl.n	8003056 <__swbuf_r+0x20>
 8003052:	6923      	ldr	r3, [r4, #16]
 8003054:	b943      	cbnz	r3, 8003068 <__swbuf_r+0x32>
 8003056:	4621      	mov	r1, r4
 8003058:	4628      	mov	r0, r5
 800305a:	f000 f82b 	bl	80030b4 <__swsetup_r>
 800305e:	b118      	cbz	r0, 8003068 <__swbuf_r+0x32>
 8003060:	f04f 37ff 	mov.w	r7, #4294967295
 8003064:	4638      	mov	r0, r7
 8003066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003068:	6823      	ldr	r3, [r4, #0]
 800306a:	6922      	ldr	r2, [r4, #16]
 800306c:	1a98      	subs	r0, r3, r2
 800306e:	6963      	ldr	r3, [r4, #20]
 8003070:	b2f6      	uxtb	r6, r6
 8003072:	4283      	cmp	r3, r0
 8003074:	4637      	mov	r7, r6
 8003076:	dc05      	bgt.n	8003084 <__swbuf_r+0x4e>
 8003078:	4621      	mov	r1, r4
 800307a:	4628      	mov	r0, r5
 800307c:	f000 fd38 	bl	8003af0 <_fflush_r>
 8003080:	2800      	cmp	r0, #0
 8003082:	d1ed      	bne.n	8003060 <__swbuf_r+0x2a>
 8003084:	68a3      	ldr	r3, [r4, #8]
 8003086:	3b01      	subs	r3, #1
 8003088:	60a3      	str	r3, [r4, #8]
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	6022      	str	r2, [r4, #0]
 8003090:	701e      	strb	r6, [r3, #0]
 8003092:	6962      	ldr	r2, [r4, #20]
 8003094:	1c43      	adds	r3, r0, #1
 8003096:	429a      	cmp	r2, r3
 8003098:	d004      	beq.n	80030a4 <__swbuf_r+0x6e>
 800309a:	89a3      	ldrh	r3, [r4, #12]
 800309c:	07db      	lsls	r3, r3, #31
 800309e:	d5e1      	bpl.n	8003064 <__swbuf_r+0x2e>
 80030a0:	2e0a      	cmp	r6, #10
 80030a2:	d1df      	bne.n	8003064 <__swbuf_r+0x2e>
 80030a4:	4621      	mov	r1, r4
 80030a6:	4628      	mov	r0, r5
 80030a8:	f000 fd22 	bl	8003af0 <_fflush_r>
 80030ac:	2800      	cmp	r0, #0
 80030ae:	d0d9      	beq.n	8003064 <__swbuf_r+0x2e>
 80030b0:	e7d6      	b.n	8003060 <__swbuf_r+0x2a>
	...

080030b4 <__swsetup_r>:
 80030b4:	b538      	push	{r3, r4, r5, lr}
 80030b6:	4b29      	ldr	r3, [pc, #164]	@ (800315c <__swsetup_r+0xa8>)
 80030b8:	4605      	mov	r5, r0
 80030ba:	6818      	ldr	r0, [r3, #0]
 80030bc:	460c      	mov	r4, r1
 80030be:	b118      	cbz	r0, 80030c8 <__swsetup_r+0x14>
 80030c0:	6a03      	ldr	r3, [r0, #32]
 80030c2:	b90b      	cbnz	r3, 80030c8 <__swsetup_r+0x14>
 80030c4:	f7ff fece 	bl	8002e64 <__sinit>
 80030c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030cc:	0719      	lsls	r1, r3, #28
 80030ce:	d422      	bmi.n	8003116 <__swsetup_r+0x62>
 80030d0:	06da      	lsls	r2, r3, #27
 80030d2:	d407      	bmi.n	80030e4 <__swsetup_r+0x30>
 80030d4:	2209      	movs	r2, #9
 80030d6:	602a      	str	r2, [r5, #0]
 80030d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030dc:	81a3      	strh	r3, [r4, #12]
 80030de:	f04f 30ff 	mov.w	r0, #4294967295
 80030e2:	e033      	b.n	800314c <__swsetup_r+0x98>
 80030e4:	0758      	lsls	r0, r3, #29
 80030e6:	d512      	bpl.n	800310e <__swsetup_r+0x5a>
 80030e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80030ea:	b141      	cbz	r1, 80030fe <__swsetup_r+0x4a>
 80030ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80030f0:	4299      	cmp	r1, r3
 80030f2:	d002      	beq.n	80030fa <__swsetup_r+0x46>
 80030f4:	4628      	mov	r0, r5
 80030f6:	f000 f8af 	bl	8003258 <_free_r>
 80030fa:	2300      	movs	r3, #0
 80030fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80030fe:	89a3      	ldrh	r3, [r4, #12]
 8003100:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003104:	81a3      	strh	r3, [r4, #12]
 8003106:	2300      	movs	r3, #0
 8003108:	6063      	str	r3, [r4, #4]
 800310a:	6923      	ldr	r3, [r4, #16]
 800310c:	6023      	str	r3, [r4, #0]
 800310e:	89a3      	ldrh	r3, [r4, #12]
 8003110:	f043 0308 	orr.w	r3, r3, #8
 8003114:	81a3      	strh	r3, [r4, #12]
 8003116:	6923      	ldr	r3, [r4, #16]
 8003118:	b94b      	cbnz	r3, 800312e <__swsetup_r+0x7a>
 800311a:	89a3      	ldrh	r3, [r4, #12]
 800311c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003124:	d003      	beq.n	800312e <__swsetup_r+0x7a>
 8003126:	4621      	mov	r1, r4
 8003128:	4628      	mov	r0, r5
 800312a:	f000 fd2f 	bl	8003b8c <__smakebuf_r>
 800312e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003132:	f013 0201 	ands.w	r2, r3, #1
 8003136:	d00a      	beq.n	800314e <__swsetup_r+0x9a>
 8003138:	2200      	movs	r2, #0
 800313a:	60a2      	str	r2, [r4, #8]
 800313c:	6962      	ldr	r2, [r4, #20]
 800313e:	4252      	negs	r2, r2
 8003140:	61a2      	str	r2, [r4, #24]
 8003142:	6922      	ldr	r2, [r4, #16]
 8003144:	b942      	cbnz	r2, 8003158 <__swsetup_r+0xa4>
 8003146:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800314a:	d1c5      	bne.n	80030d8 <__swsetup_r+0x24>
 800314c:	bd38      	pop	{r3, r4, r5, pc}
 800314e:	0799      	lsls	r1, r3, #30
 8003150:	bf58      	it	pl
 8003152:	6962      	ldrpl	r2, [r4, #20]
 8003154:	60a2      	str	r2, [r4, #8]
 8003156:	e7f4      	b.n	8003142 <__swsetup_r+0x8e>
 8003158:	2000      	movs	r0, #0
 800315a:	e7f7      	b.n	800314c <__swsetup_r+0x98>
 800315c:	20000018 	.word	0x20000018

08003160 <memset>:
 8003160:	4402      	add	r2, r0
 8003162:	4603      	mov	r3, r0
 8003164:	4293      	cmp	r3, r2
 8003166:	d100      	bne.n	800316a <memset+0xa>
 8003168:	4770      	bx	lr
 800316a:	f803 1b01 	strb.w	r1, [r3], #1
 800316e:	e7f9      	b.n	8003164 <memset+0x4>

08003170 <_close_r>:
 8003170:	b538      	push	{r3, r4, r5, lr}
 8003172:	4d06      	ldr	r5, [pc, #24]	@ (800318c <_close_r+0x1c>)
 8003174:	2300      	movs	r3, #0
 8003176:	4604      	mov	r4, r0
 8003178:	4608      	mov	r0, r1
 800317a:	602b      	str	r3, [r5, #0]
 800317c:	f7fd feaa 	bl	8000ed4 <_close>
 8003180:	1c43      	adds	r3, r0, #1
 8003182:	d102      	bne.n	800318a <_close_r+0x1a>
 8003184:	682b      	ldr	r3, [r5, #0]
 8003186:	b103      	cbz	r3, 800318a <_close_r+0x1a>
 8003188:	6023      	str	r3, [r4, #0]
 800318a:	bd38      	pop	{r3, r4, r5, pc}
 800318c:	20000328 	.word	0x20000328

08003190 <_lseek_r>:
 8003190:	b538      	push	{r3, r4, r5, lr}
 8003192:	4d07      	ldr	r5, [pc, #28]	@ (80031b0 <_lseek_r+0x20>)
 8003194:	4604      	mov	r4, r0
 8003196:	4608      	mov	r0, r1
 8003198:	4611      	mov	r1, r2
 800319a:	2200      	movs	r2, #0
 800319c:	602a      	str	r2, [r5, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	f7fd febf 	bl	8000f22 <_lseek>
 80031a4:	1c43      	adds	r3, r0, #1
 80031a6:	d102      	bne.n	80031ae <_lseek_r+0x1e>
 80031a8:	682b      	ldr	r3, [r5, #0]
 80031aa:	b103      	cbz	r3, 80031ae <_lseek_r+0x1e>
 80031ac:	6023      	str	r3, [r4, #0]
 80031ae:	bd38      	pop	{r3, r4, r5, pc}
 80031b0:	20000328 	.word	0x20000328

080031b4 <_read_r>:
 80031b4:	b538      	push	{r3, r4, r5, lr}
 80031b6:	4d07      	ldr	r5, [pc, #28]	@ (80031d4 <_read_r+0x20>)
 80031b8:	4604      	mov	r4, r0
 80031ba:	4608      	mov	r0, r1
 80031bc:	4611      	mov	r1, r2
 80031be:	2200      	movs	r2, #0
 80031c0:	602a      	str	r2, [r5, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	f7fd fe4d 	bl	8000e62 <_read>
 80031c8:	1c43      	adds	r3, r0, #1
 80031ca:	d102      	bne.n	80031d2 <_read_r+0x1e>
 80031cc:	682b      	ldr	r3, [r5, #0]
 80031ce:	b103      	cbz	r3, 80031d2 <_read_r+0x1e>
 80031d0:	6023      	str	r3, [r4, #0]
 80031d2:	bd38      	pop	{r3, r4, r5, pc}
 80031d4:	20000328 	.word	0x20000328

080031d8 <_write_r>:
 80031d8:	b538      	push	{r3, r4, r5, lr}
 80031da:	4d07      	ldr	r5, [pc, #28]	@ (80031f8 <_write_r+0x20>)
 80031dc:	4604      	mov	r4, r0
 80031de:	4608      	mov	r0, r1
 80031e0:	4611      	mov	r1, r2
 80031e2:	2200      	movs	r2, #0
 80031e4:	602a      	str	r2, [r5, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	f7fd fe58 	bl	8000e9c <_write>
 80031ec:	1c43      	adds	r3, r0, #1
 80031ee:	d102      	bne.n	80031f6 <_write_r+0x1e>
 80031f0:	682b      	ldr	r3, [r5, #0]
 80031f2:	b103      	cbz	r3, 80031f6 <_write_r+0x1e>
 80031f4:	6023      	str	r3, [r4, #0]
 80031f6:	bd38      	pop	{r3, r4, r5, pc}
 80031f8:	20000328 	.word	0x20000328

080031fc <__errno>:
 80031fc:	4b01      	ldr	r3, [pc, #4]	@ (8003204 <__errno+0x8>)
 80031fe:	6818      	ldr	r0, [r3, #0]
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000018 	.word	0x20000018

08003208 <__libc_init_array>:
 8003208:	b570      	push	{r4, r5, r6, lr}
 800320a:	4d0d      	ldr	r5, [pc, #52]	@ (8003240 <__libc_init_array+0x38>)
 800320c:	4c0d      	ldr	r4, [pc, #52]	@ (8003244 <__libc_init_array+0x3c>)
 800320e:	1b64      	subs	r4, r4, r5
 8003210:	10a4      	asrs	r4, r4, #2
 8003212:	2600      	movs	r6, #0
 8003214:	42a6      	cmp	r6, r4
 8003216:	d109      	bne.n	800322c <__libc_init_array+0x24>
 8003218:	4d0b      	ldr	r5, [pc, #44]	@ (8003248 <__libc_init_array+0x40>)
 800321a:	4c0c      	ldr	r4, [pc, #48]	@ (800324c <__libc_init_array+0x44>)
 800321c:	f000 fd24 	bl	8003c68 <_init>
 8003220:	1b64      	subs	r4, r4, r5
 8003222:	10a4      	asrs	r4, r4, #2
 8003224:	2600      	movs	r6, #0
 8003226:	42a6      	cmp	r6, r4
 8003228:	d105      	bne.n	8003236 <__libc_init_array+0x2e>
 800322a:	bd70      	pop	{r4, r5, r6, pc}
 800322c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003230:	4798      	blx	r3
 8003232:	3601      	adds	r6, #1
 8003234:	e7ee      	b.n	8003214 <__libc_init_array+0xc>
 8003236:	f855 3b04 	ldr.w	r3, [r5], #4
 800323a:	4798      	blx	r3
 800323c:	3601      	adds	r6, #1
 800323e:	e7f2      	b.n	8003226 <__libc_init_array+0x1e>
 8003240:	08003df0 	.word	0x08003df0
 8003244:	08003df0 	.word	0x08003df0
 8003248:	08003df0 	.word	0x08003df0
 800324c:	08003df4 	.word	0x08003df4

08003250 <__retarget_lock_init_recursive>:
 8003250:	4770      	bx	lr

08003252 <__retarget_lock_acquire_recursive>:
 8003252:	4770      	bx	lr

08003254 <__retarget_lock_release_recursive>:
 8003254:	4770      	bx	lr
	...

08003258 <_free_r>:
 8003258:	b538      	push	{r3, r4, r5, lr}
 800325a:	4605      	mov	r5, r0
 800325c:	2900      	cmp	r1, #0
 800325e:	d041      	beq.n	80032e4 <_free_r+0x8c>
 8003260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003264:	1f0c      	subs	r4, r1, #4
 8003266:	2b00      	cmp	r3, #0
 8003268:	bfb8      	it	lt
 800326a:	18e4      	addlt	r4, r4, r3
 800326c:	f000 f8e0 	bl	8003430 <__malloc_lock>
 8003270:	4a1d      	ldr	r2, [pc, #116]	@ (80032e8 <_free_r+0x90>)
 8003272:	6813      	ldr	r3, [r2, #0]
 8003274:	b933      	cbnz	r3, 8003284 <_free_r+0x2c>
 8003276:	6063      	str	r3, [r4, #4]
 8003278:	6014      	str	r4, [r2, #0]
 800327a:	4628      	mov	r0, r5
 800327c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003280:	f000 b8dc 	b.w	800343c <__malloc_unlock>
 8003284:	42a3      	cmp	r3, r4
 8003286:	d908      	bls.n	800329a <_free_r+0x42>
 8003288:	6820      	ldr	r0, [r4, #0]
 800328a:	1821      	adds	r1, r4, r0
 800328c:	428b      	cmp	r3, r1
 800328e:	bf01      	itttt	eq
 8003290:	6819      	ldreq	r1, [r3, #0]
 8003292:	685b      	ldreq	r3, [r3, #4]
 8003294:	1809      	addeq	r1, r1, r0
 8003296:	6021      	streq	r1, [r4, #0]
 8003298:	e7ed      	b.n	8003276 <_free_r+0x1e>
 800329a:	461a      	mov	r2, r3
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	b10b      	cbz	r3, 80032a4 <_free_r+0x4c>
 80032a0:	42a3      	cmp	r3, r4
 80032a2:	d9fa      	bls.n	800329a <_free_r+0x42>
 80032a4:	6811      	ldr	r1, [r2, #0]
 80032a6:	1850      	adds	r0, r2, r1
 80032a8:	42a0      	cmp	r0, r4
 80032aa:	d10b      	bne.n	80032c4 <_free_r+0x6c>
 80032ac:	6820      	ldr	r0, [r4, #0]
 80032ae:	4401      	add	r1, r0
 80032b0:	1850      	adds	r0, r2, r1
 80032b2:	4283      	cmp	r3, r0
 80032b4:	6011      	str	r1, [r2, #0]
 80032b6:	d1e0      	bne.n	800327a <_free_r+0x22>
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	6053      	str	r3, [r2, #4]
 80032be:	4408      	add	r0, r1
 80032c0:	6010      	str	r0, [r2, #0]
 80032c2:	e7da      	b.n	800327a <_free_r+0x22>
 80032c4:	d902      	bls.n	80032cc <_free_r+0x74>
 80032c6:	230c      	movs	r3, #12
 80032c8:	602b      	str	r3, [r5, #0]
 80032ca:	e7d6      	b.n	800327a <_free_r+0x22>
 80032cc:	6820      	ldr	r0, [r4, #0]
 80032ce:	1821      	adds	r1, r4, r0
 80032d0:	428b      	cmp	r3, r1
 80032d2:	bf04      	itt	eq
 80032d4:	6819      	ldreq	r1, [r3, #0]
 80032d6:	685b      	ldreq	r3, [r3, #4]
 80032d8:	6063      	str	r3, [r4, #4]
 80032da:	bf04      	itt	eq
 80032dc:	1809      	addeq	r1, r1, r0
 80032de:	6021      	streq	r1, [r4, #0]
 80032e0:	6054      	str	r4, [r2, #4]
 80032e2:	e7ca      	b.n	800327a <_free_r+0x22>
 80032e4:	bd38      	pop	{r3, r4, r5, pc}
 80032e6:	bf00      	nop
 80032e8:	20000334 	.word	0x20000334

080032ec <sbrk_aligned>:
 80032ec:	b570      	push	{r4, r5, r6, lr}
 80032ee:	4e0f      	ldr	r6, [pc, #60]	@ (800332c <sbrk_aligned+0x40>)
 80032f0:	460c      	mov	r4, r1
 80032f2:	6831      	ldr	r1, [r6, #0]
 80032f4:	4605      	mov	r5, r0
 80032f6:	b911      	cbnz	r1, 80032fe <sbrk_aligned+0x12>
 80032f8:	f000 fca6 	bl	8003c48 <_sbrk_r>
 80032fc:	6030      	str	r0, [r6, #0]
 80032fe:	4621      	mov	r1, r4
 8003300:	4628      	mov	r0, r5
 8003302:	f000 fca1 	bl	8003c48 <_sbrk_r>
 8003306:	1c43      	adds	r3, r0, #1
 8003308:	d103      	bne.n	8003312 <sbrk_aligned+0x26>
 800330a:	f04f 34ff 	mov.w	r4, #4294967295
 800330e:	4620      	mov	r0, r4
 8003310:	bd70      	pop	{r4, r5, r6, pc}
 8003312:	1cc4      	adds	r4, r0, #3
 8003314:	f024 0403 	bic.w	r4, r4, #3
 8003318:	42a0      	cmp	r0, r4
 800331a:	d0f8      	beq.n	800330e <sbrk_aligned+0x22>
 800331c:	1a21      	subs	r1, r4, r0
 800331e:	4628      	mov	r0, r5
 8003320:	f000 fc92 	bl	8003c48 <_sbrk_r>
 8003324:	3001      	adds	r0, #1
 8003326:	d1f2      	bne.n	800330e <sbrk_aligned+0x22>
 8003328:	e7ef      	b.n	800330a <sbrk_aligned+0x1e>
 800332a:	bf00      	nop
 800332c:	20000330 	.word	0x20000330

08003330 <_malloc_r>:
 8003330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003334:	1ccd      	adds	r5, r1, #3
 8003336:	f025 0503 	bic.w	r5, r5, #3
 800333a:	3508      	adds	r5, #8
 800333c:	2d0c      	cmp	r5, #12
 800333e:	bf38      	it	cc
 8003340:	250c      	movcc	r5, #12
 8003342:	2d00      	cmp	r5, #0
 8003344:	4606      	mov	r6, r0
 8003346:	db01      	blt.n	800334c <_malloc_r+0x1c>
 8003348:	42a9      	cmp	r1, r5
 800334a:	d904      	bls.n	8003356 <_malloc_r+0x26>
 800334c:	230c      	movs	r3, #12
 800334e:	6033      	str	r3, [r6, #0]
 8003350:	2000      	movs	r0, #0
 8003352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003356:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800342c <_malloc_r+0xfc>
 800335a:	f000 f869 	bl	8003430 <__malloc_lock>
 800335e:	f8d8 3000 	ldr.w	r3, [r8]
 8003362:	461c      	mov	r4, r3
 8003364:	bb44      	cbnz	r4, 80033b8 <_malloc_r+0x88>
 8003366:	4629      	mov	r1, r5
 8003368:	4630      	mov	r0, r6
 800336a:	f7ff ffbf 	bl	80032ec <sbrk_aligned>
 800336e:	1c43      	adds	r3, r0, #1
 8003370:	4604      	mov	r4, r0
 8003372:	d158      	bne.n	8003426 <_malloc_r+0xf6>
 8003374:	f8d8 4000 	ldr.w	r4, [r8]
 8003378:	4627      	mov	r7, r4
 800337a:	2f00      	cmp	r7, #0
 800337c:	d143      	bne.n	8003406 <_malloc_r+0xd6>
 800337e:	2c00      	cmp	r4, #0
 8003380:	d04b      	beq.n	800341a <_malloc_r+0xea>
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	4639      	mov	r1, r7
 8003386:	4630      	mov	r0, r6
 8003388:	eb04 0903 	add.w	r9, r4, r3
 800338c:	f000 fc5c 	bl	8003c48 <_sbrk_r>
 8003390:	4581      	cmp	r9, r0
 8003392:	d142      	bne.n	800341a <_malloc_r+0xea>
 8003394:	6821      	ldr	r1, [r4, #0]
 8003396:	1a6d      	subs	r5, r5, r1
 8003398:	4629      	mov	r1, r5
 800339a:	4630      	mov	r0, r6
 800339c:	f7ff ffa6 	bl	80032ec <sbrk_aligned>
 80033a0:	3001      	adds	r0, #1
 80033a2:	d03a      	beq.n	800341a <_malloc_r+0xea>
 80033a4:	6823      	ldr	r3, [r4, #0]
 80033a6:	442b      	add	r3, r5
 80033a8:	6023      	str	r3, [r4, #0]
 80033aa:	f8d8 3000 	ldr.w	r3, [r8]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	bb62      	cbnz	r2, 800340c <_malloc_r+0xdc>
 80033b2:	f8c8 7000 	str.w	r7, [r8]
 80033b6:	e00f      	b.n	80033d8 <_malloc_r+0xa8>
 80033b8:	6822      	ldr	r2, [r4, #0]
 80033ba:	1b52      	subs	r2, r2, r5
 80033bc:	d420      	bmi.n	8003400 <_malloc_r+0xd0>
 80033be:	2a0b      	cmp	r2, #11
 80033c0:	d917      	bls.n	80033f2 <_malloc_r+0xc2>
 80033c2:	1961      	adds	r1, r4, r5
 80033c4:	42a3      	cmp	r3, r4
 80033c6:	6025      	str	r5, [r4, #0]
 80033c8:	bf18      	it	ne
 80033ca:	6059      	strne	r1, [r3, #4]
 80033cc:	6863      	ldr	r3, [r4, #4]
 80033ce:	bf08      	it	eq
 80033d0:	f8c8 1000 	streq.w	r1, [r8]
 80033d4:	5162      	str	r2, [r4, r5]
 80033d6:	604b      	str	r3, [r1, #4]
 80033d8:	4630      	mov	r0, r6
 80033da:	f000 f82f 	bl	800343c <__malloc_unlock>
 80033de:	f104 000b 	add.w	r0, r4, #11
 80033e2:	1d23      	adds	r3, r4, #4
 80033e4:	f020 0007 	bic.w	r0, r0, #7
 80033e8:	1ac2      	subs	r2, r0, r3
 80033ea:	bf1c      	itt	ne
 80033ec:	1a1b      	subne	r3, r3, r0
 80033ee:	50a3      	strne	r3, [r4, r2]
 80033f0:	e7af      	b.n	8003352 <_malloc_r+0x22>
 80033f2:	6862      	ldr	r2, [r4, #4]
 80033f4:	42a3      	cmp	r3, r4
 80033f6:	bf0c      	ite	eq
 80033f8:	f8c8 2000 	streq.w	r2, [r8]
 80033fc:	605a      	strne	r2, [r3, #4]
 80033fe:	e7eb      	b.n	80033d8 <_malloc_r+0xa8>
 8003400:	4623      	mov	r3, r4
 8003402:	6864      	ldr	r4, [r4, #4]
 8003404:	e7ae      	b.n	8003364 <_malloc_r+0x34>
 8003406:	463c      	mov	r4, r7
 8003408:	687f      	ldr	r7, [r7, #4]
 800340a:	e7b6      	b.n	800337a <_malloc_r+0x4a>
 800340c:	461a      	mov	r2, r3
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	42a3      	cmp	r3, r4
 8003412:	d1fb      	bne.n	800340c <_malloc_r+0xdc>
 8003414:	2300      	movs	r3, #0
 8003416:	6053      	str	r3, [r2, #4]
 8003418:	e7de      	b.n	80033d8 <_malloc_r+0xa8>
 800341a:	230c      	movs	r3, #12
 800341c:	6033      	str	r3, [r6, #0]
 800341e:	4630      	mov	r0, r6
 8003420:	f000 f80c 	bl	800343c <__malloc_unlock>
 8003424:	e794      	b.n	8003350 <_malloc_r+0x20>
 8003426:	6005      	str	r5, [r0, #0]
 8003428:	e7d6      	b.n	80033d8 <_malloc_r+0xa8>
 800342a:	bf00      	nop
 800342c:	20000334 	.word	0x20000334

08003430 <__malloc_lock>:
 8003430:	4801      	ldr	r0, [pc, #4]	@ (8003438 <__malloc_lock+0x8>)
 8003432:	f7ff bf0e 	b.w	8003252 <__retarget_lock_acquire_recursive>
 8003436:	bf00      	nop
 8003438:	2000032c 	.word	0x2000032c

0800343c <__malloc_unlock>:
 800343c:	4801      	ldr	r0, [pc, #4]	@ (8003444 <__malloc_unlock+0x8>)
 800343e:	f7ff bf09 	b.w	8003254 <__retarget_lock_release_recursive>
 8003442:	bf00      	nop
 8003444:	2000032c 	.word	0x2000032c

08003448 <__sfputc_r>:
 8003448:	6893      	ldr	r3, [r2, #8]
 800344a:	3b01      	subs	r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	b410      	push	{r4}
 8003450:	6093      	str	r3, [r2, #8]
 8003452:	da08      	bge.n	8003466 <__sfputc_r+0x1e>
 8003454:	6994      	ldr	r4, [r2, #24]
 8003456:	42a3      	cmp	r3, r4
 8003458:	db01      	blt.n	800345e <__sfputc_r+0x16>
 800345a:	290a      	cmp	r1, #10
 800345c:	d103      	bne.n	8003466 <__sfputc_r+0x1e>
 800345e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003462:	f7ff bde8 	b.w	8003036 <__swbuf_r>
 8003466:	6813      	ldr	r3, [r2, #0]
 8003468:	1c58      	adds	r0, r3, #1
 800346a:	6010      	str	r0, [r2, #0]
 800346c:	7019      	strb	r1, [r3, #0]
 800346e:	4608      	mov	r0, r1
 8003470:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003474:	4770      	bx	lr

08003476 <__sfputs_r>:
 8003476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003478:	4606      	mov	r6, r0
 800347a:	460f      	mov	r7, r1
 800347c:	4614      	mov	r4, r2
 800347e:	18d5      	adds	r5, r2, r3
 8003480:	42ac      	cmp	r4, r5
 8003482:	d101      	bne.n	8003488 <__sfputs_r+0x12>
 8003484:	2000      	movs	r0, #0
 8003486:	e007      	b.n	8003498 <__sfputs_r+0x22>
 8003488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800348c:	463a      	mov	r2, r7
 800348e:	4630      	mov	r0, r6
 8003490:	f7ff ffda 	bl	8003448 <__sfputc_r>
 8003494:	1c43      	adds	r3, r0, #1
 8003496:	d1f3      	bne.n	8003480 <__sfputs_r+0xa>
 8003498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800349c <_vfiprintf_r>:
 800349c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034a0:	460d      	mov	r5, r1
 80034a2:	b09d      	sub	sp, #116	@ 0x74
 80034a4:	4614      	mov	r4, r2
 80034a6:	4698      	mov	r8, r3
 80034a8:	4606      	mov	r6, r0
 80034aa:	b118      	cbz	r0, 80034b4 <_vfiprintf_r+0x18>
 80034ac:	6a03      	ldr	r3, [r0, #32]
 80034ae:	b90b      	cbnz	r3, 80034b4 <_vfiprintf_r+0x18>
 80034b0:	f7ff fcd8 	bl	8002e64 <__sinit>
 80034b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80034b6:	07d9      	lsls	r1, r3, #31
 80034b8:	d405      	bmi.n	80034c6 <_vfiprintf_r+0x2a>
 80034ba:	89ab      	ldrh	r3, [r5, #12]
 80034bc:	059a      	lsls	r2, r3, #22
 80034be:	d402      	bmi.n	80034c6 <_vfiprintf_r+0x2a>
 80034c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034c2:	f7ff fec6 	bl	8003252 <__retarget_lock_acquire_recursive>
 80034c6:	89ab      	ldrh	r3, [r5, #12]
 80034c8:	071b      	lsls	r3, r3, #28
 80034ca:	d501      	bpl.n	80034d0 <_vfiprintf_r+0x34>
 80034cc:	692b      	ldr	r3, [r5, #16]
 80034ce:	b99b      	cbnz	r3, 80034f8 <_vfiprintf_r+0x5c>
 80034d0:	4629      	mov	r1, r5
 80034d2:	4630      	mov	r0, r6
 80034d4:	f7ff fdee 	bl	80030b4 <__swsetup_r>
 80034d8:	b170      	cbz	r0, 80034f8 <_vfiprintf_r+0x5c>
 80034da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80034dc:	07dc      	lsls	r4, r3, #31
 80034de:	d504      	bpl.n	80034ea <_vfiprintf_r+0x4e>
 80034e0:	f04f 30ff 	mov.w	r0, #4294967295
 80034e4:	b01d      	add	sp, #116	@ 0x74
 80034e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ea:	89ab      	ldrh	r3, [r5, #12]
 80034ec:	0598      	lsls	r0, r3, #22
 80034ee:	d4f7      	bmi.n	80034e0 <_vfiprintf_r+0x44>
 80034f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034f2:	f7ff feaf 	bl	8003254 <__retarget_lock_release_recursive>
 80034f6:	e7f3      	b.n	80034e0 <_vfiprintf_r+0x44>
 80034f8:	2300      	movs	r3, #0
 80034fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80034fc:	2320      	movs	r3, #32
 80034fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003502:	f8cd 800c 	str.w	r8, [sp, #12]
 8003506:	2330      	movs	r3, #48	@ 0x30
 8003508:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80036b8 <_vfiprintf_r+0x21c>
 800350c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003510:	f04f 0901 	mov.w	r9, #1
 8003514:	4623      	mov	r3, r4
 8003516:	469a      	mov	sl, r3
 8003518:	f813 2b01 	ldrb.w	r2, [r3], #1
 800351c:	b10a      	cbz	r2, 8003522 <_vfiprintf_r+0x86>
 800351e:	2a25      	cmp	r2, #37	@ 0x25
 8003520:	d1f9      	bne.n	8003516 <_vfiprintf_r+0x7a>
 8003522:	ebba 0b04 	subs.w	fp, sl, r4
 8003526:	d00b      	beq.n	8003540 <_vfiprintf_r+0xa4>
 8003528:	465b      	mov	r3, fp
 800352a:	4622      	mov	r2, r4
 800352c:	4629      	mov	r1, r5
 800352e:	4630      	mov	r0, r6
 8003530:	f7ff ffa1 	bl	8003476 <__sfputs_r>
 8003534:	3001      	adds	r0, #1
 8003536:	f000 80a7 	beq.w	8003688 <_vfiprintf_r+0x1ec>
 800353a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800353c:	445a      	add	r2, fp
 800353e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003540:	f89a 3000 	ldrb.w	r3, [sl]
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 809f 	beq.w	8003688 <_vfiprintf_r+0x1ec>
 800354a:	2300      	movs	r3, #0
 800354c:	f04f 32ff 	mov.w	r2, #4294967295
 8003550:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003554:	f10a 0a01 	add.w	sl, sl, #1
 8003558:	9304      	str	r3, [sp, #16]
 800355a:	9307      	str	r3, [sp, #28]
 800355c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003560:	931a      	str	r3, [sp, #104]	@ 0x68
 8003562:	4654      	mov	r4, sl
 8003564:	2205      	movs	r2, #5
 8003566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800356a:	4853      	ldr	r0, [pc, #332]	@ (80036b8 <_vfiprintf_r+0x21c>)
 800356c:	f7fc fe50 	bl	8000210 <memchr>
 8003570:	9a04      	ldr	r2, [sp, #16]
 8003572:	b9d8      	cbnz	r0, 80035ac <_vfiprintf_r+0x110>
 8003574:	06d1      	lsls	r1, r2, #27
 8003576:	bf44      	itt	mi
 8003578:	2320      	movmi	r3, #32
 800357a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800357e:	0713      	lsls	r3, r2, #28
 8003580:	bf44      	itt	mi
 8003582:	232b      	movmi	r3, #43	@ 0x2b
 8003584:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003588:	f89a 3000 	ldrb.w	r3, [sl]
 800358c:	2b2a      	cmp	r3, #42	@ 0x2a
 800358e:	d015      	beq.n	80035bc <_vfiprintf_r+0x120>
 8003590:	9a07      	ldr	r2, [sp, #28]
 8003592:	4654      	mov	r4, sl
 8003594:	2000      	movs	r0, #0
 8003596:	f04f 0c0a 	mov.w	ip, #10
 800359a:	4621      	mov	r1, r4
 800359c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035a0:	3b30      	subs	r3, #48	@ 0x30
 80035a2:	2b09      	cmp	r3, #9
 80035a4:	d94b      	bls.n	800363e <_vfiprintf_r+0x1a2>
 80035a6:	b1b0      	cbz	r0, 80035d6 <_vfiprintf_r+0x13a>
 80035a8:	9207      	str	r2, [sp, #28]
 80035aa:	e014      	b.n	80035d6 <_vfiprintf_r+0x13a>
 80035ac:	eba0 0308 	sub.w	r3, r0, r8
 80035b0:	fa09 f303 	lsl.w	r3, r9, r3
 80035b4:	4313      	orrs	r3, r2
 80035b6:	9304      	str	r3, [sp, #16]
 80035b8:	46a2      	mov	sl, r4
 80035ba:	e7d2      	b.n	8003562 <_vfiprintf_r+0xc6>
 80035bc:	9b03      	ldr	r3, [sp, #12]
 80035be:	1d19      	adds	r1, r3, #4
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	9103      	str	r1, [sp, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bfbb      	ittet	lt
 80035c8:	425b      	neglt	r3, r3
 80035ca:	f042 0202 	orrlt.w	r2, r2, #2
 80035ce:	9307      	strge	r3, [sp, #28]
 80035d0:	9307      	strlt	r3, [sp, #28]
 80035d2:	bfb8      	it	lt
 80035d4:	9204      	strlt	r2, [sp, #16]
 80035d6:	7823      	ldrb	r3, [r4, #0]
 80035d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80035da:	d10a      	bne.n	80035f2 <_vfiprintf_r+0x156>
 80035dc:	7863      	ldrb	r3, [r4, #1]
 80035de:	2b2a      	cmp	r3, #42	@ 0x2a
 80035e0:	d132      	bne.n	8003648 <_vfiprintf_r+0x1ac>
 80035e2:	9b03      	ldr	r3, [sp, #12]
 80035e4:	1d1a      	adds	r2, r3, #4
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	9203      	str	r2, [sp, #12]
 80035ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80035ee:	3402      	adds	r4, #2
 80035f0:	9305      	str	r3, [sp, #20]
 80035f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80036c8 <_vfiprintf_r+0x22c>
 80035f6:	7821      	ldrb	r1, [r4, #0]
 80035f8:	2203      	movs	r2, #3
 80035fa:	4650      	mov	r0, sl
 80035fc:	f7fc fe08 	bl	8000210 <memchr>
 8003600:	b138      	cbz	r0, 8003612 <_vfiprintf_r+0x176>
 8003602:	9b04      	ldr	r3, [sp, #16]
 8003604:	eba0 000a 	sub.w	r0, r0, sl
 8003608:	2240      	movs	r2, #64	@ 0x40
 800360a:	4082      	lsls	r2, r0
 800360c:	4313      	orrs	r3, r2
 800360e:	3401      	adds	r4, #1
 8003610:	9304      	str	r3, [sp, #16]
 8003612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003616:	4829      	ldr	r0, [pc, #164]	@ (80036bc <_vfiprintf_r+0x220>)
 8003618:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800361c:	2206      	movs	r2, #6
 800361e:	f7fc fdf7 	bl	8000210 <memchr>
 8003622:	2800      	cmp	r0, #0
 8003624:	d03f      	beq.n	80036a6 <_vfiprintf_r+0x20a>
 8003626:	4b26      	ldr	r3, [pc, #152]	@ (80036c0 <_vfiprintf_r+0x224>)
 8003628:	bb1b      	cbnz	r3, 8003672 <_vfiprintf_r+0x1d6>
 800362a:	9b03      	ldr	r3, [sp, #12]
 800362c:	3307      	adds	r3, #7
 800362e:	f023 0307 	bic.w	r3, r3, #7
 8003632:	3308      	adds	r3, #8
 8003634:	9303      	str	r3, [sp, #12]
 8003636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003638:	443b      	add	r3, r7
 800363a:	9309      	str	r3, [sp, #36]	@ 0x24
 800363c:	e76a      	b.n	8003514 <_vfiprintf_r+0x78>
 800363e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003642:	460c      	mov	r4, r1
 8003644:	2001      	movs	r0, #1
 8003646:	e7a8      	b.n	800359a <_vfiprintf_r+0xfe>
 8003648:	2300      	movs	r3, #0
 800364a:	3401      	adds	r4, #1
 800364c:	9305      	str	r3, [sp, #20]
 800364e:	4619      	mov	r1, r3
 8003650:	f04f 0c0a 	mov.w	ip, #10
 8003654:	4620      	mov	r0, r4
 8003656:	f810 2b01 	ldrb.w	r2, [r0], #1
 800365a:	3a30      	subs	r2, #48	@ 0x30
 800365c:	2a09      	cmp	r2, #9
 800365e:	d903      	bls.n	8003668 <_vfiprintf_r+0x1cc>
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0c6      	beq.n	80035f2 <_vfiprintf_r+0x156>
 8003664:	9105      	str	r1, [sp, #20]
 8003666:	e7c4      	b.n	80035f2 <_vfiprintf_r+0x156>
 8003668:	fb0c 2101 	mla	r1, ip, r1, r2
 800366c:	4604      	mov	r4, r0
 800366e:	2301      	movs	r3, #1
 8003670:	e7f0      	b.n	8003654 <_vfiprintf_r+0x1b8>
 8003672:	ab03      	add	r3, sp, #12
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	462a      	mov	r2, r5
 8003678:	4b12      	ldr	r3, [pc, #72]	@ (80036c4 <_vfiprintf_r+0x228>)
 800367a:	a904      	add	r1, sp, #16
 800367c:	4630      	mov	r0, r6
 800367e:	f3af 8000 	nop.w
 8003682:	4607      	mov	r7, r0
 8003684:	1c78      	adds	r0, r7, #1
 8003686:	d1d6      	bne.n	8003636 <_vfiprintf_r+0x19a>
 8003688:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800368a:	07d9      	lsls	r1, r3, #31
 800368c:	d405      	bmi.n	800369a <_vfiprintf_r+0x1fe>
 800368e:	89ab      	ldrh	r3, [r5, #12]
 8003690:	059a      	lsls	r2, r3, #22
 8003692:	d402      	bmi.n	800369a <_vfiprintf_r+0x1fe>
 8003694:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003696:	f7ff fddd 	bl	8003254 <__retarget_lock_release_recursive>
 800369a:	89ab      	ldrh	r3, [r5, #12]
 800369c:	065b      	lsls	r3, r3, #25
 800369e:	f53f af1f 	bmi.w	80034e0 <_vfiprintf_r+0x44>
 80036a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80036a4:	e71e      	b.n	80034e4 <_vfiprintf_r+0x48>
 80036a6:	ab03      	add	r3, sp, #12
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	462a      	mov	r2, r5
 80036ac:	4b05      	ldr	r3, [pc, #20]	@ (80036c4 <_vfiprintf_r+0x228>)
 80036ae:	a904      	add	r1, sp, #16
 80036b0:	4630      	mov	r0, r6
 80036b2:	f000 f879 	bl	80037a8 <_printf_i>
 80036b6:	e7e4      	b.n	8003682 <_vfiprintf_r+0x1e6>
 80036b8:	08003db4 	.word	0x08003db4
 80036bc:	08003dbe 	.word	0x08003dbe
 80036c0:	00000000 	.word	0x00000000
 80036c4:	08003477 	.word	0x08003477
 80036c8:	08003dba 	.word	0x08003dba

080036cc <_printf_common>:
 80036cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036d0:	4616      	mov	r6, r2
 80036d2:	4698      	mov	r8, r3
 80036d4:	688a      	ldr	r2, [r1, #8]
 80036d6:	690b      	ldr	r3, [r1, #16]
 80036d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036dc:	4293      	cmp	r3, r2
 80036de:	bfb8      	it	lt
 80036e0:	4613      	movlt	r3, r2
 80036e2:	6033      	str	r3, [r6, #0]
 80036e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036e8:	4607      	mov	r7, r0
 80036ea:	460c      	mov	r4, r1
 80036ec:	b10a      	cbz	r2, 80036f2 <_printf_common+0x26>
 80036ee:	3301      	adds	r3, #1
 80036f0:	6033      	str	r3, [r6, #0]
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	0699      	lsls	r1, r3, #26
 80036f6:	bf42      	ittt	mi
 80036f8:	6833      	ldrmi	r3, [r6, #0]
 80036fa:	3302      	addmi	r3, #2
 80036fc:	6033      	strmi	r3, [r6, #0]
 80036fe:	6825      	ldr	r5, [r4, #0]
 8003700:	f015 0506 	ands.w	r5, r5, #6
 8003704:	d106      	bne.n	8003714 <_printf_common+0x48>
 8003706:	f104 0a19 	add.w	sl, r4, #25
 800370a:	68e3      	ldr	r3, [r4, #12]
 800370c:	6832      	ldr	r2, [r6, #0]
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	42ab      	cmp	r3, r5
 8003712:	dc26      	bgt.n	8003762 <_printf_common+0x96>
 8003714:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003718:	6822      	ldr	r2, [r4, #0]
 800371a:	3b00      	subs	r3, #0
 800371c:	bf18      	it	ne
 800371e:	2301      	movne	r3, #1
 8003720:	0692      	lsls	r2, r2, #26
 8003722:	d42b      	bmi.n	800377c <_printf_common+0xb0>
 8003724:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003728:	4641      	mov	r1, r8
 800372a:	4638      	mov	r0, r7
 800372c:	47c8      	blx	r9
 800372e:	3001      	adds	r0, #1
 8003730:	d01e      	beq.n	8003770 <_printf_common+0xa4>
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	6922      	ldr	r2, [r4, #16]
 8003736:	f003 0306 	and.w	r3, r3, #6
 800373a:	2b04      	cmp	r3, #4
 800373c:	bf02      	ittt	eq
 800373e:	68e5      	ldreq	r5, [r4, #12]
 8003740:	6833      	ldreq	r3, [r6, #0]
 8003742:	1aed      	subeq	r5, r5, r3
 8003744:	68a3      	ldr	r3, [r4, #8]
 8003746:	bf0c      	ite	eq
 8003748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800374c:	2500      	movne	r5, #0
 800374e:	4293      	cmp	r3, r2
 8003750:	bfc4      	itt	gt
 8003752:	1a9b      	subgt	r3, r3, r2
 8003754:	18ed      	addgt	r5, r5, r3
 8003756:	2600      	movs	r6, #0
 8003758:	341a      	adds	r4, #26
 800375a:	42b5      	cmp	r5, r6
 800375c:	d11a      	bne.n	8003794 <_printf_common+0xc8>
 800375e:	2000      	movs	r0, #0
 8003760:	e008      	b.n	8003774 <_printf_common+0xa8>
 8003762:	2301      	movs	r3, #1
 8003764:	4652      	mov	r2, sl
 8003766:	4641      	mov	r1, r8
 8003768:	4638      	mov	r0, r7
 800376a:	47c8      	blx	r9
 800376c:	3001      	adds	r0, #1
 800376e:	d103      	bne.n	8003778 <_printf_common+0xac>
 8003770:	f04f 30ff 	mov.w	r0, #4294967295
 8003774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003778:	3501      	adds	r5, #1
 800377a:	e7c6      	b.n	800370a <_printf_common+0x3e>
 800377c:	18e1      	adds	r1, r4, r3
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	2030      	movs	r0, #48	@ 0x30
 8003782:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003786:	4422      	add	r2, r4
 8003788:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800378c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003790:	3302      	adds	r3, #2
 8003792:	e7c7      	b.n	8003724 <_printf_common+0x58>
 8003794:	2301      	movs	r3, #1
 8003796:	4622      	mov	r2, r4
 8003798:	4641      	mov	r1, r8
 800379a:	4638      	mov	r0, r7
 800379c:	47c8      	blx	r9
 800379e:	3001      	adds	r0, #1
 80037a0:	d0e6      	beq.n	8003770 <_printf_common+0xa4>
 80037a2:	3601      	adds	r6, #1
 80037a4:	e7d9      	b.n	800375a <_printf_common+0x8e>
	...

080037a8 <_printf_i>:
 80037a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037ac:	7e0f      	ldrb	r7, [r1, #24]
 80037ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80037b0:	2f78      	cmp	r7, #120	@ 0x78
 80037b2:	4691      	mov	r9, r2
 80037b4:	4680      	mov	r8, r0
 80037b6:	460c      	mov	r4, r1
 80037b8:	469a      	mov	sl, r3
 80037ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037be:	d807      	bhi.n	80037d0 <_printf_i+0x28>
 80037c0:	2f62      	cmp	r7, #98	@ 0x62
 80037c2:	d80a      	bhi.n	80037da <_printf_i+0x32>
 80037c4:	2f00      	cmp	r7, #0
 80037c6:	f000 80d2 	beq.w	800396e <_printf_i+0x1c6>
 80037ca:	2f58      	cmp	r7, #88	@ 0x58
 80037cc:	f000 80b9 	beq.w	8003942 <_printf_i+0x19a>
 80037d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037d8:	e03a      	b.n	8003850 <_printf_i+0xa8>
 80037da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037de:	2b15      	cmp	r3, #21
 80037e0:	d8f6      	bhi.n	80037d0 <_printf_i+0x28>
 80037e2:	a101      	add	r1, pc, #4	@ (adr r1, 80037e8 <_printf_i+0x40>)
 80037e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037e8:	08003841 	.word	0x08003841
 80037ec:	08003855 	.word	0x08003855
 80037f0:	080037d1 	.word	0x080037d1
 80037f4:	080037d1 	.word	0x080037d1
 80037f8:	080037d1 	.word	0x080037d1
 80037fc:	080037d1 	.word	0x080037d1
 8003800:	08003855 	.word	0x08003855
 8003804:	080037d1 	.word	0x080037d1
 8003808:	080037d1 	.word	0x080037d1
 800380c:	080037d1 	.word	0x080037d1
 8003810:	080037d1 	.word	0x080037d1
 8003814:	08003955 	.word	0x08003955
 8003818:	0800387f 	.word	0x0800387f
 800381c:	0800390f 	.word	0x0800390f
 8003820:	080037d1 	.word	0x080037d1
 8003824:	080037d1 	.word	0x080037d1
 8003828:	08003977 	.word	0x08003977
 800382c:	080037d1 	.word	0x080037d1
 8003830:	0800387f 	.word	0x0800387f
 8003834:	080037d1 	.word	0x080037d1
 8003838:	080037d1 	.word	0x080037d1
 800383c:	08003917 	.word	0x08003917
 8003840:	6833      	ldr	r3, [r6, #0]
 8003842:	1d1a      	adds	r2, r3, #4
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6032      	str	r2, [r6, #0]
 8003848:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800384c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003850:	2301      	movs	r3, #1
 8003852:	e09d      	b.n	8003990 <_printf_i+0x1e8>
 8003854:	6833      	ldr	r3, [r6, #0]
 8003856:	6820      	ldr	r0, [r4, #0]
 8003858:	1d19      	adds	r1, r3, #4
 800385a:	6031      	str	r1, [r6, #0]
 800385c:	0606      	lsls	r6, r0, #24
 800385e:	d501      	bpl.n	8003864 <_printf_i+0xbc>
 8003860:	681d      	ldr	r5, [r3, #0]
 8003862:	e003      	b.n	800386c <_printf_i+0xc4>
 8003864:	0645      	lsls	r5, r0, #25
 8003866:	d5fb      	bpl.n	8003860 <_printf_i+0xb8>
 8003868:	f9b3 5000 	ldrsh.w	r5, [r3]
 800386c:	2d00      	cmp	r5, #0
 800386e:	da03      	bge.n	8003878 <_printf_i+0xd0>
 8003870:	232d      	movs	r3, #45	@ 0x2d
 8003872:	426d      	negs	r5, r5
 8003874:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003878:	4859      	ldr	r0, [pc, #356]	@ (80039e0 <_printf_i+0x238>)
 800387a:	230a      	movs	r3, #10
 800387c:	e011      	b.n	80038a2 <_printf_i+0xfa>
 800387e:	6821      	ldr	r1, [r4, #0]
 8003880:	6833      	ldr	r3, [r6, #0]
 8003882:	0608      	lsls	r0, r1, #24
 8003884:	f853 5b04 	ldr.w	r5, [r3], #4
 8003888:	d402      	bmi.n	8003890 <_printf_i+0xe8>
 800388a:	0649      	lsls	r1, r1, #25
 800388c:	bf48      	it	mi
 800388e:	b2ad      	uxthmi	r5, r5
 8003890:	2f6f      	cmp	r7, #111	@ 0x6f
 8003892:	4853      	ldr	r0, [pc, #332]	@ (80039e0 <_printf_i+0x238>)
 8003894:	6033      	str	r3, [r6, #0]
 8003896:	bf14      	ite	ne
 8003898:	230a      	movne	r3, #10
 800389a:	2308      	moveq	r3, #8
 800389c:	2100      	movs	r1, #0
 800389e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80038a2:	6866      	ldr	r6, [r4, #4]
 80038a4:	60a6      	str	r6, [r4, #8]
 80038a6:	2e00      	cmp	r6, #0
 80038a8:	bfa2      	ittt	ge
 80038aa:	6821      	ldrge	r1, [r4, #0]
 80038ac:	f021 0104 	bicge.w	r1, r1, #4
 80038b0:	6021      	strge	r1, [r4, #0]
 80038b2:	b90d      	cbnz	r5, 80038b8 <_printf_i+0x110>
 80038b4:	2e00      	cmp	r6, #0
 80038b6:	d04b      	beq.n	8003950 <_printf_i+0x1a8>
 80038b8:	4616      	mov	r6, r2
 80038ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80038be:	fb03 5711 	mls	r7, r3, r1, r5
 80038c2:	5dc7      	ldrb	r7, [r0, r7]
 80038c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038c8:	462f      	mov	r7, r5
 80038ca:	42bb      	cmp	r3, r7
 80038cc:	460d      	mov	r5, r1
 80038ce:	d9f4      	bls.n	80038ba <_printf_i+0x112>
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d10b      	bne.n	80038ec <_printf_i+0x144>
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	07df      	lsls	r7, r3, #31
 80038d8:	d508      	bpl.n	80038ec <_printf_i+0x144>
 80038da:	6923      	ldr	r3, [r4, #16]
 80038dc:	6861      	ldr	r1, [r4, #4]
 80038de:	4299      	cmp	r1, r3
 80038e0:	bfde      	ittt	le
 80038e2:	2330      	movle	r3, #48	@ 0x30
 80038e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038ec:	1b92      	subs	r2, r2, r6
 80038ee:	6122      	str	r2, [r4, #16]
 80038f0:	f8cd a000 	str.w	sl, [sp]
 80038f4:	464b      	mov	r3, r9
 80038f6:	aa03      	add	r2, sp, #12
 80038f8:	4621      	mov	r1, r4
 80038fa:	4640      	mov	r0, r8
 80038fc:	f7ff fee6 	bl	80036cc <_printf_common>
 8003900:	3001      	adds	r0, #1
 8003902:	d14a      	bne.n	800399a <_printf_i+0x1f2>
 8003904:	f04f 30ff 	mov.w	r0, #4294967295
 8003908:	b004      	add	sp, #16
 800390a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	f043 0320 	orr.w	r3, r3, #32
 8003914:	6023      	str	r3, [r4, #0]
 8003916:	4833      	ldr	r0, [pc, #204]	@ (80039e4 <_printf_i+0x23c>)
 8003918:	2778      	movs	r7, #120	@ 0x78
 800391a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800391e:	6823      	ldr	r3, [r4, #0]
 8003920:	6831      	ldr	r1, [r6, #0]
 8003922:	061f      	lsls	r7, r3, #24
 8003924:	f851 5b04 	ldr.w	r5, [r1], #4
 8003928:	d402      	bmi.n	8003930 <_printf_i+0x188>
 800392a:	065f      	lsls	r7, r3, #25
 800392c:	bf48      	it	mi
 800392e:	b2ad      	uxthmi	r5, r5
 8003930:	6031      	str	r1, [r6, #0]
 8003932:	07d9      	lsls	r1, r3, #31
 8003934:	bf44      	itt	mi
 8003936:	f043 0320 	orrmi.w	r3, r3, #32
 800393a:	6023      	strmi	r3, [r4, #0]
 800393c:	b11d      	cbz	r5, 8003946 <_printf_i+0x19e>
 800393e:	2310      	movs	r3, #16
 8003940:	e7ac      	b.n	800389c <_printf_i+0xf4>
 8003942:	4827      	ldr	r0, [pc, #156]	@ (80039e0 <_printf_i+0x238>)
 8003944:	e7e9      	b.n	800391a <_printf_i+0x172>
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	f023 0320 	bic.w	r3, r3, #32
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	e7f6      	b.n	800393e <_printf_i+0x196>
 8003950:	4616      	mov	r6, r2
 8003952:	e7bd      	b.n	80038d0 <_printf_i+0x128>
 8003954:	6833      	ldr	r3, [r6, #0]
 8003956:	6825      	ldr	r5, [r4, #0]
 8003958:	6961      	ldr	r1, [r4, #20]
 800395a:	1d18      	adds	r0, r3, #4
 800395c:	6030      	str	r0, [r6, #0]
 800395e:	062e      	lsls	r6, r5, #24
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	d501      	bpl.n	8003968 <_printf_i+0x1c0>
 8003964:	6019      	str	r1, [r3, #0]
 8003966:	e002      	b.n	800396e <_printf_i+0x1c6>
 8003968:	0668      	lsls	r0, r5, #25
 800396a:	d5fb      	bpl.n	8003964 <_printf_i+0x1bc>
 800396c:	8019      	strh	r1, [r3, #0]
 800396e:	2300      	movs	r3, #0
 8003970:	6123      	str	r3, [r4, #16]
 8003972:	4616      	mov	r6, r2
 8003974:	e7bc      	b.n	80038f0 <_printf_i+0x148>
 8003976:	6833      	ldr	r3, [r6, #0]
 8003978:	1d1a      	adds	r2, r3, #4
 800397a:	6032      	str	r2, [r6, #0]
 800397c:	681e      	ldr	r6, [r3, #0]
 800397e:	6862      	ldr	r2, [r4, #4]
 8003980:	2100      	movs	r1, #0
 8003982:	4630      	mov	r0, r6
 8003984:	f7fc fc44 	bl	8000210 <memchr>
 8003988:	b108      	cbz	r0, 800398e <_printf_i+0x1e6>
 800398a:	1b80      	subs	r0, r0, r6
 800398c:	6060      	str	r0, [r4, #4]
 800398e:	6863      	ldr	r3, [r4, #4]
 8003990:	6123      	str	r3, [r4, #16]
 8003992:	2300      	movs	r3, #0
 8003994:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003998:	e7aa      	b.n	80038f0 <_printf_i+0x148>
 800399a:	6923      	ldr	r3, [r4, #16]
 800399c:	4632      	mov	r2, r6
 800399e:	4649      	mov	r1, r9
 80039a0:	4640      	mov	r0, r8
 80039a2:	47d0      	blx	sl
 80039a4:	3001      	adds	r0, #1
 80039a6:	d0ad      	beq.n	8003904 <_printf_i+0x15c>
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	079b      	lsls	r3, r3, #30
 80039ac:	d413      	bmi.n	80039d6 <_printf_i+0x22e>
 80039ae:	68e0      	ldr	r0, [r4, #12]
 80039b0:	9b03      	ldr	r3, [sp, #12]
 80039b2:	4298      	cmp	r0, r3
 80039b4:	bfb8      	it	lt
 80039b6:	4618      	movlt	r0, r3
 80039b8:	e7a6      	b.n	8003908 <_printf_i+0x160>
 80039ba:	2301      	movs	r3, #1
 80039bc:	4632      	mov	r2, r6
 80039be:	4649      	mov	r1, r9
 80039c0:	4640      	mov	r0, r8
 80039c2:	47d0      	blx	sl
 80039c4:	3001      	adds	r0, #1
 80039c6:	d09d      	beq.n	8003904 <_printf_i+0x15c>
 80039c8:	3501      	adds	r5, #1
 80039ca:	68e3      	ldr	r3, [r4, #12]
 80039cc:	9903      	ldr	r1, [sp, #12]
 80039ce:	1a5b      	subs	r3, r3, r1
 80039d0:	42ab      	cmp	r3, r5
 80039d2:	dcf2      	bgt.n	80039ba <_printf_i+0x212>
 80039d4:	e7eb      	b.n	80039ae <_printf_i+0x206>
 80039d6:	2500      	movs	r5, #0
 80039d8:	f104 0619 	add.w	r6, r4, #25
 80039dc:	e7f5      	b.n	80039ca <_printf_i+0x222>
 80039de:	bf00      	nop
 80039e0:	08003dc5 	.word	0x08003dc5
 80039e4:	08003dd6 	.word	0x08003dd6

080039e8 <__sflush_r>:
 80039e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039f0:	0716      	lsls	r6, r2, #28
 80039f2:	4605      	mov	r5, r0
 80039f4:	460c      	mov	r4, r1
 80039f6:	d454      	bmi.n	8003aa2 <__sflush_r+0xba>
 80039f8:	684b      	ldr	r3, [r1, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	dc02      	bgt.n	8003a04 <__sflush_r+0x1c>
 80039fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	dd48      	ble.n	8003a96 <__sflush_r+0xae>
 8003a04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a06:	2e00      	cmp	r6, #0
 8003a08:	d045      	beq.n	8003a96 <__sflush_r+0xae>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003a10:	682f      	ldr	r7, [r5, #0]
 8003a12:	6a21      	ldr	r1, [r4, #32]
 8003a14:	602b      	str	r3, [r5, #0]
 8003a16:	d030      	beq.n	8003a7a <__sflush_r+0x92>
 8003a18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003a1a:	89a3      	ldrh	r3, [r4, #12]
 8003a1c:	0759      	lsls	r1, r3, #29
 8003a1e:	d505      	bpl.n	8003a2c <__sflush_r+0x44>
 8003a20:	6863      	ldr	r3, [r4, #4]
 8003a22:	1ad2      	subs	r2, r2, r3
 8003a24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003a26:	b10b      	cbz	r3, 8003a2c <__sflush_r+0x44>
 8003a28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003a2a:	1ad2      	subs	r2, r2, r3
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a30:	6a21      	ldr	r1, [r4, #32]
 8003a32:	4628      	mov	r0, r5
 8003a34:	47b0      	blx	r6
 8003a36:	1c43      	adds	r3, r0, #1
 8003a38:	89a3      	ldrh	r3, [r4, #12]
 8003a3a:	d106      	bne.n	8003a4a <__sflush_r+0x62>
 8003a3c:	6829      	ldr	r1, [r5, #0]
 8003a3e:	291d      	cmp	r1, #29
 8003a40:	d82b      	bhi.n	8003a9a <__sflush_r+0xb2>
 8003a42:	4a2a      	ldr	r2, [pc, #168]	@ (8003aec <__sflush_r+0x104>)
 8003a44:	410a      	asrs	r2, r1
 8003a46:	07d6      	lsls	r6, r2, #31
 8003a48:	d427      	bmi.n	8003a9a <__sflush_r+0xb2>
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	6062      	str	r2, [r4, #4]
 8003a4e:	04d9      	lsls	r1, r3, #19
 8003a50:	6922      	ldr	r2, [r4, #16]
 8003a52:	6022      	str	r2, [r4, #0]
 8003a54:	d504      	bpl.n	8003a60 <__sflush_r+0x78>
 8003a56:	1c42      	adds	r2, r0, #1
 8003a58:	d101      	bne.n	8003a5e <__sflush_r+0x76>
 8003a5a:	682b      	ldr	r3, [r5, #0]
 8003a5c:	b903      	cbnz	r3, 8003a60 <__sflush_r+0x78>
 8003a5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a62:	602f      	str	r7, [r5, #0]
 8003a64:	b1b9      	cbz	r1, 8003a96 <__sflush_r+0xae>
 8003a66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a6a:	4299      	cmp	r1, r3
 8003a6c:	d002      	beq.n	8003a74 <__sflush_r+0x8c>
 8003a6e:	4628      	mov	r0, r5
 8003a70:	f7ff fbf2 	bl	8003258 <_free_r>
 8003a74:	2300      	movs	r3, #0
 8003a76:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a78:	e00d      	b.n	8003a96 <__sflush_r+0xae>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	47b0      	blx	r6
 8003a80:	4602      	mov	r2, r0
 8003a82:	1c50      	adds	r0, r2, #1
 8003a84:	d1c9      	bne.n	8003a1a <__sflush_r+0x32>
 8003a86:	682b      	ldr	r3, [r5, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0c6      	beq.n	8003a1a <__sflush_r+0x32>
 8003a8c:	2b1d      	cmp	r3, #29
 8003a8e:	d001      	beq.n	8003a94 <__sflush_r+0xac>
 8003a90:	2b16      	cmp	r3, #22
 8003a92:	d11e      	bne.n	8003ad2 <__sflush_r+0xea>
 8003a94:	602f      	str	r7, [r5, #0]
 8003a96:	2000      	movs	r0, #0
 8003a98:	e022      	b.n	8003ae0 <__sflush_r+0xf8>
 8003a9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a9e:	b21b      	sxth	r3, r3
 8003aa0:	e01b      	b.n	8003ada <__sflush_r+0xf2>
 8003aa2:	690f      	ldr	r7, [r1, #16]
 8003aa4:	2f00      	cmp	r7, #0
 8003aa6:	d0f6      	beq.n	8003a96 <__sflush_r+0xae>
 8003aa8:	0793      	lsls	r3, r2, #30
 8003aaa:	680e      	ldr	r6, [r1, #0]
 8003aac:	bf08      	it	eq
 8003aae:	694b      	ldreq	r3, [r1, #20]
 8003ab0:	600f      	str	r7, [r1, #0]
 8003ab2:	bf18      	it	ne
 8003ab4:	2300      	movne	r3, #0
 8003ab6:	eba6 0807 	sub.w	r8, r6, r7
 8003aba:	608b      	str	r3, [r1, #8]
 8003abc:	f1b8 0f00 	cmp.w	r8, #0
 8003ac0:	dde9      	ble.n	8003a96 <__sflush_r+0xae>
 8003ac2:	6a21      	ldr	r1, [r4, #32]
 8003ac4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003ac6:	4643      	mov	r3, r8
 8003ac8:	463a      	mov	r2, r7
 8003aca:	4628      	mov	r0, r5
 8003acc:	47b0      	blx	r6
 8003ace:	2800      	cmp	r0, #0
 8003ad0:	dc08      	bgt.n	8003ae4 <__sflush_r+0xfc>
 8003ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ada:	81a3      	strh	r3, [r4, #12]
 8003adc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ae4:	4407      	add	r7, r0
 8003ae6:	eba8 0800 	sub.w	r8, r8, r0
 8003aea:	e7e7      	b.n	8003abc <__sflush_r+0xd4>
 8003aec:	dfbffffe 	.word	0xdfbffffe

08003af0 <_fflush_r>:
 8003af0:	b538      	push	{r3, r4, r5, lr}
 8003af2:	690b      	ldr	r3, [r1, #16]
 8003af4:	4605      	mov	r5, r0
 8003af6:	460c      	mov	r4, r1
 8003af8:	b913      	cbnz	r3, 8003b00 <_fflush_r+0x10>
 8003afa:	2500      	movs	r5, #0
 8003afc:	4628      	mov	r0, r5
 8003afe:	bd38      	pop	{r3, r4, r5, pc}
 8003b00:	b118      	cbz	r0, 8003b0a <_fflush_r+0x1a>
 8003b02:	6a03      	ldr	r3, [r0, #32]
 8003b04:	b90b      	cbnz	r3, 8003b0a <_fflush_r+0x1a>
 8003b06:	f7ff f9ad 	bl	8002e64 <__sinit>
 8003b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f3      	beq.n	8003afa <_fflush_r+0xa>
 8003b12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003b14:	07d0      	lsls	r0, r2, #31
 8003b16:	d404      	bmi.n	8003b22 <_fflush_r+0x32>
 8003b18:	0599      	lsls	r1, r3, #22
 8003b1a:	d402      	bmi.n	8003b22 <_fflush_r+0x32>
 8003b1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b1e:	f7ff fb98 	bl	8003252 <__retarget_lock_acquire_recursive>
 8003b22:	4628      	mov	r0, r5
 8003b24:	4621      	mov	r1, r4
 8003b26:	f7ff ff5f 	bl	80039e8 <__sflush_r>
 8003b2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b2c:	07da      	lsls	r2, r3, #31
 8003b2e:	4605      	mov	r5, r0
 8003b30:	d4e4      	bmi.n	8003afc <_fflush_r+0xc>
 8003b32:	89a3      	ldrh	r3, [r4, #12]
 8003b34:	059b      	lsls	r3, r3, #22
 8003b36:	d4e1      	bmi.n	8003afc <_fflush_r+0xc>
 8003b38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b3a:	f7ff fb8b 	bl	8003254 <__retarget_lock_release_recursive>
 8003b3e:	e7dd      	b.n	8003afc <_fflush_r+0xc>

08003b40 <__swhatbuf_r>:
 8003b40:	b570      	push	{r4, r5, r6, lr}
 8003b42:	460c      	mov	r4, r1
 8003b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b48:	2900      	cmp	r1, #0
 8003b4a:	b096      	sub	sp, #88	@ 0x58
 8003b4c:	4615      	mov	r5, r2
 8003b4e:	461e      	mov	r6, r3
 8003b50:	da0d      	bge.n	8003b6e <__swhatbuf_r+0x2e>
 8003b52:	89a3      	ldrh	r3, [r4, #12]
 8003b54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003b58:	f04f 0100 	mov.w	r1, #0
 8003b5c:	bf14      	ite	ne
 8003b5e:	2340      	movne	r3, #64	@ 0x40
 8003b60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003b64:	2000      	movs	r0, #0
 8003b66:	6031      	str	r1, [r6, #0]
 8003b68:	602b      	str	r3, [r5, #0]
 8003b6a:	b016      	add	sp, #88	@ 0x58
 8003b6c:	bd70      	pop	{r4, r5, r6, pc}
 8003b6e:	466a      	mov	r2, sp
 8003b70:	f000 f848 	bl	8003c04 <_fstat_r>
 8003b74:	2800      	cmp	r0, #0
 8003b76:	dbec      	blt.n	8003b52 <__swhatbuf_r+0x12>
 8003b78:	9901      	ldr	r1, [sp, #4]
 8003b7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003b7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003b82:	4259      	negs	r1, r3
 8003b84:	4159      	adcs	r1, r3
 8003b86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b8a:	e7eb      	b.n	8003b64 <__swhatbuf_r+0x24>

08003b8c <__smakebuf_r>:
 8003b8c:	898b      	ldrh	r3, [r1, #12]
 8003b8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b90:	079d      	lsls	r5, r3, #30
 8003b92:	4606      	mov	r6, r0
 8003b94:	460c      	mov	r4, r1
 8003b96:	d507      	bpl.n	8003ba8 <__smakebuf_r+0x1c>
 8003b98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003b9c:	6023      	str	r3, [r4, #0]
 8003b9e:	6123      	str	r3, [r4, #16]
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	6163      	str	r3, [r4, #20]
 8003ba4:	b003      	add	sp, #12
 8003ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ba8:	ab01      	add	r3, sp, #4
 8003baa:	466a      	mov	r2, sp
 8003bac:	f7ff ffc8 	bl	8003b40 <__swhatbuf_r>
 8003bb0:	9f00      	ldr	r7, [sp, #0]
 8003bb2:	4605      	mov	r5, r0
 8003bb4:	4639      	mov	r1, r7
 8003bb6:	4630      	mov	r0, r6
 8003bb8:	f7ff fbba 	bl	8003330 <_malloc_r>
 8003bbc:	b948      	cbnz	r0, 8003bd2 <__smakebuf_r+0x46>
 8003bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bc2:	059a      	lsls	r2, r3, #22
 8003bc4:	d4ee      	bmi.n	8003ba4 <__smakebuf_r+0x18>
 8003bc6:	f023 0303 	bic.w	r3, r3, #3
 8003bca:	f043 0302 	orr.w	r3, r3, #2
 8003bce:	81a3      	strh	r3, [r4, #12]
 8003bd0:	e7e2      	b.n	8003b98 <__smakebuf_r+0xc>
 8003bd2:	89a3      	ldrh	r3, [r4, #12]
 8003bd4:	6020      	str	r0, [r4, #0]
 8003bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bda:	81a3      	strh	r3, [r4, #12]
 8003bdc:	9b01      	ldr	r3, [sp, #4]
 8003bde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003be2:	b15b      	cbz	r3, 8003bfc <__smakebuf_r+0x70>
 8003be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003be8:	4630      	mov	r0, r6
 8003bea:	f000 f81d 	bl	8003c28 <_isatty_r>
 8003bee:	b128      	cbz	r0, 8003bfc <__smakebuf_r+0x70>
 8003bf0:	89a3      	ldrh	r3, [r4, #12]
 8003bf2:	f023 0303 	bic.w	r3, r3, #3
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	81a3      	strh	r3, [r4, #12]
 8003bfc:	89a3      	ldrh	r3, [r4, #12]
 8003bfe:	431d      	orrs	r5, r3
 8003c00:	81a5      	strh	r5, [r4, #12]
 8003c02:	e7cf      	b.n	8003ba4 <__smakebuf_r+0x18>

08003c04 <_fstat_r>:
 8003c04:	b538      	push	{r3, r4, r5, lr}
 8003c06:	4d07      	ldr	r5, [pc, #28]	@ (8003c24 <_fstat_r+0x20>)
 8003c08:	2300      	movs	r3, #0
 8003c0a:	4604      	mov	r4, r0
 8003c0c:	4608      	mov	r0, r1
 8003c0e:	4611      	mov	r1, r2
 8003c10:	602b      	str	r3, [r5, #0]
 8003c12:	f7fd f96b 	bl	8000eec <_fstat>
 8003c16:	1c43      	adds	r3, r0, #1
 8003c18:	d102      	bne.n	8003c20 <_fstat_r+0x1c>
 8003c1a:	682b      	ldr	r3, [r5, #0]
 8003c1c:	b103      	cbz	r3, 8003c20 <_fstat_r+0x1c>
 8003c1e:	6023      	str	r3, [r4, #0]
 8003c20:	bd38      	pop	{r3, r4, r5, pc}
 8003c22:	bf00      	nop
 8003c24:	20000328 	.word	0x20000328

08003c28 <_isatty_r>:
 8003c28:	b538      	push	{r3, r4, r5, lr}
 8003c2a:	4d06      	ldr	r5, [pc, #24]	@ (8003c44 <_isatty_r+0x1c>)
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	4604      	mov	r4, r0
 8003c30:	4608      	mov	r0, r1
 8003c32:	602b      	str	r3, [r5, #0]
 8003c34:	f7fd f96a 	bl	8000f0c <_isatty>
 8003c38:	1c43      	adds	r3, r0, #1
 8003c3a:	d102      	bne.n	8003c42 <_isatty_r+0x1a>
 8003c3c:	682b      	ldr	r3, [r5, #0]
 8003c3e:	b103      	cbz	r3, 8003c42 <_isatty_r+0x1a>
 8003c40:	6023      	str	r3, [r4, #0]
 8003c42:	bd38      	pop	{r3, r4, r5, pc}
 8003c44:	20000328 	.word	0x20000328

08003c48 <_sbrk_r>:
 8003c48:	b538      	push	{r3, r4, r5, lr}
 8003c4a:	4d06      	ldr	r5, [pc, #24]	@ (8003c64 <_sbrk_r+0x1c>)
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	4604      	mov	r4, r0
 8003c50:	4608      	mov	r0, r1
 8003c52:	602b      	str	r3, [r5, #0]
 8003c54:	f7fd f972 	bl	8000f3c <_sbrk>
 8003c58:	1c43      	adds	r3, r0, #1
 8003c5a:	d102      	bne.n	8003c62 <_sbrk_r+0x1a>
 8003c5c:	682b      	ldr	r3, [r5, #0]
 8003c5e:	b103      	cbz	r3, 8003c62 <_sbrk_r+0x1a>
 8003c60:	6023      	str	r3, [r4, #0]
 8003c62:	bd38      	pop	{r3, r4, r5, pc}
 8003c64:	20000328 	.word	0x20000328

08003c68 <_init>:
 8003c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6a:	bf00      	nop
 8003c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c6e:	bc08      	pop	{r3}
 8003c70:	469e      	mov	lr, r3
 8003c72:	4770      	bx	lr

08003c74 <_fini>:
 8003c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c76:	bf00      	nop
 8003c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7a:	bc08      	pop	{r3}
 8003c7c:	469e      	mov	lr, r3
 8003c7e:	4770      	bx	lr
