
BOOTLOADER_F446RET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  08004bc0  08004bc0  00005bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005078  08005078  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005078  08005078  00006078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005080  08005080  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005080  08005080  00006080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005084  08005084  00006084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005088  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000070  080050f8  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  080050f8  00007360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad5f  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021e1  00000000  00000000  00011dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  00013fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c7  00000000  00000000  00014a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022808  00000000  00000000  000151ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd87  00000000  00000000  000379f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb238  00000000  00000000  0004477e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010f9b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003064  00000000  00000000  0010f9fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00112a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004ba8 	.word	0x08004ba8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004ba8 	.word	0x08004ba8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <bootloader_main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void bootloader_main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
	uint8_t rx_byte = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status;
	// Wait for 1 byte for up to 3 seconds
	status = HAL_UART_Receive(&huart3, &rx_byte, 1, UART_TIMEOUT_MS);
 80005aa:	1db9      	adds	r1, r7, #6
 80005ac:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80005b0:	2201      	movs	r2, #1
 80005b2:	480e      	ldr	r0, [pc, #56]	@ (80005ec <bootloader_main+0x4c>)
 80005b4:	f002 ffa3 	bl	80034fe <HAL_UART_Receive>
 80005b8:	4603      	mov	r3, r0
 80005ba:	71fb      	strb	r3, [r7, #7]

	if (status == HAL_OK && rx_byte == BOOT_CMD)
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d108      	bne.n	80005d4 <bootloader_main+0x34>
 80005c2:	79bb      	ldrb	r3, [r7, #6]
 80005c4:	2b50      	cmp	r3, #80	@ 0x50
 80005c6:	d105      	bne.n	80005d4 <bootloader_main+0x34>
	{
		printf("BOOT_CMD received...entering bootloader mode\n\r");
 80005c8:	4809      	ldr	r0, [pc, #36]	@ (80005f0 <bootloader_main+0x50>)
 80005ca:	f003 fc21 	bl	8003e10 <iprintf>
		bootloader_read_uart_data();
 80005ce:	f000 f99d 	bl	800090c <bootloader_read_uart_data>
 80005d2:	e006      	b.n	80005e2 <bootloader_main+0x42>
	}
	else
	{
		printf("No valid BOOT_CMD received...jumping to application\n\r");
 80005d4:	4807      	ldr	r0, [pc, #28]	@ (80005f4 <bootloader_main+0x54>)
 80005d6:	f003 fc1b 	bl	8003e10 <iprintf>
		bootloader_jump_to_user_app(FLASH_SECTOR2_BASE_ADDRESS);
 80005da:	4807      	ldr	r0, [pc, #28]	@ (80005f8 <bootloader_main+0x58>)
 80005dc:	f000 fa04 	bl	80009e8 <bootloader_jump_to_user_app>
	}
}
 80005e0:	bf00      	nop
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	200000dc 	.word	0x200000dc
 80005f0:	08004bc0 	.word	0x08004bc0
 80005f4:	08004bf0 	.word	0x08004bf0
 80005f8:	08008000 	.word	0x08008000

080005fc <__io_putchar>:


#define PRINTF   int __io_putchar(int ch)
PRINTF
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000604:	1d39      	adds	r1, r7, #4
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
 800060a:	2201      	movs	r2, #1
 800060c:	4803      	ldr	r0, [pc, #12]	@ (800061c <__io_putchar+0x20>)
 800060e:	f002 feeb 	bl	80033e8 <HAL_UART_Transmit>
	return ch;
 8000612:	687b      	ldr	r3, [r7, #4]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000094 	.word	0x20000094

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f001 f934 	bl	8001890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f812 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 f8e4 	bl	80007f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000630:	f000 f88e 	bl	8000750 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000634:	f000 f8b6 	bl	80007a4 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000638:	f000 f876 	bl	8000728 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  printf("Bootloader running.....\n");
 800063c:	4803      	ldr	r0, [pc, #12]	@ (800064c <main+0x2c>)
 800063e:	f003 fc4f 	bl	8003ee0 <puts>
  bootloader_main();
 8000642:	f7ff ffad 	bl	80005a0 <bootloader_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000646:	bf00      	nop
 8000648:	e7fd      	b.n	8000646 <main+0x26>
 800064a:	bf00      	nop
 800064c:	08004c28 	.word	0x08004c28

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	@ 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	2234      	movs	r2, #52	@ 0x34
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f003 fd1e 	bl	80040a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b29      	ldr	r3, [pc, #164]	@ (8000720 <SystemClock_Config+0xd0>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a28      	ldr	r2, [pc, #160]	@ (8000720 <SystemClock_Config+0xd0>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
 8000684:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <SystemClock_Config+0xd0>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000690:	2300      	movs	r3, #0
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	4b23      	ldr	r3, [pc, #140]	@ (8000724 <SystemClock_Config+0xd4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800069c:	4a21      	ldr	r2, [pc, #132]	@ (8000724 <SystemClock_Config+0xd4>)
 800069e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000724 <SystemClock_Config+0xd4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c0:	2300      	movs	r3, #0
 80006c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c4:	2308      	movs	r3, #8
 80006c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80006c8:	2354      	movs	r3, #84	@ 0x54
 80006ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 fb95 	bl	8002e0c <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006e8:	f000 f8f4 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2302      	movs	r3, #2
 80006f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	2102      	movs	r1, #2
 8000708:	4618      	mov	r0, r3
 800070a:	f001 ffc3 	bl	8002694 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000714:	f000 f8de 	bl	80008d4 <Error_Handler>
  }
}
 8000718:	bf00      	nop
 800071a:	3750      	adds	r7, #80	@ 0x50
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <MX_CRC_Init+0x20>)
 800072e:	4a07      	ldr	r2, [pc, #28]	@ (800074c <MX_CRC_Init+0x24>)
 8000730:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <MX_CRC_Init+0x20>)
 8000734:	f001 fa39 	bl	8001baa <HAL_CRC_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800073e:	f000 f8c9 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2000008c 	.word	0x2000008c
 800074c:	40023000 	.word	0x40023000

08000750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000754:	4b11      	ldr	r3, [pc, #68]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 8000756:	4a12      	ldr	r2, [pc, #72]	@ (80007a0 <MX_USART2_UART_Init+0x50>)
 8000758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b09      	ldr	r3, [pc, #36]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b08      	ldr	r3, [pc, #32]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	@ (800079c <MX_USART2_UART_Init+0x4c>)
 8000788:	f002 fdde 	bl	8003348 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000792:	f000 f89f 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000094 	.word	0x20000094
 80007a0:	40004400 	.word	0x40004400

080007a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007a8:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007aa:	4a12      	ldr	r2, [pc, #72]	@ (80007f4 <MX_USART3_UART_Init+0x50>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ae:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_USART3_UART_Init+0x4c>)
 80007dc:	f002 fdb4 	bl	8003348 <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007e6:	f000 f875 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000dc 	.word	0x200000dc
 80007f4:	40004800 	.word	0x40004800

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	@ 0x28
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b2d      	ldr	r3, [pc, #180]	@ (80008c8 <MX_GPIO_Init+0xd0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a2c      	ldr	r2, [pc, #176]	@ (80008c8 <MX_GPIO_Init+0xd0>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b2a      	ldr	r3, [pc, #168]	@ (80008c8 <MX_GPIO_Init+0xd0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b26      	ldr	r3, [pc, #152]	@ (80008c8 <MX_GPIO_Init+0xd0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a25      	ldr	r2, [pc, #148]	@ (80008c8 <MX_GPIO_Init+0xd0>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b23      	ldr	r3, [pc, #140]	@ (80008c8 <MX_GPIO_Init+0xd0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b1f      	ldr	r3, [pc, #124]	@ (80008c8 <MX_GPIO_Init+0xd0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a1e      	ldr	r2, [pc, #120]	@ (80008c8 <MX_GPIO_Init+0xd0>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b1c      	ldr	r3, [pc, #112]	@ (80008c8 <MX_GPIO_Init+0xd0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b18      	ldr	r3, [pc, #96]	@ (80008c8 <MX_GPIO_Init+0xd0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a17      	ldr	r2, [pc, #92]	@ (80008c8 <MX_GPIO_Init+0xd0>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <MX_GPIO_Init+0xd0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2120      	movs	r1, #32
 8000882:	4812      	ldr	r0, [pc, #72]	@ (80008cc <MX_GPIO_Init+0xd4>)
 8000884:	f001 feec 	bl	8002660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000892:	2302      	movs	r3, #2
 8000894:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	480c      	ldr	r0, [pc, #48]	@ (80008d0 <MX_GPIO_Init+0xd8>)
 800089e:	f001 fd4b 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a2:	2320      	movs	r3, #32
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	4804      	ldr	r0, [pc, #16]	@ (80008cc <MX_GPIO_Init+0xd4>)
 80008ba:	f001 fd3d 	bl	8002338 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008be:	bf00      	nop
 80008c0:	3728      	adds	r7, #40	@ 0x28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020000 	.word	0x40020000
 80008d0:	40020800 	.word	0x40020800

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <Error_Handler+0x8>

080008e0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80008e4:	f3bf 8f4f 	dsb	sy
}
 80008e8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80008ea:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <__NVIC_SystemReset+0x24>)
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80008f2:	4904      	ldr	r1, [pc, #16]	@ (8000904 <__NVIC_SystemReset+0x24>)
 80008f4:	4b04      	ldr	r3, [pc, #16]	@ (8000908 <__NVIC_SystemReset+0x28>)
 80008f6:	4313      	orrs	r3, r2
 80008f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80008fa:	f3bf 8f4f 	dsb	sy
}
 80008fe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <__NVIC_SystemReset+0x20>
 8000904:	e000ed00 	.word	0xe000ed00
 8000908:	05fa0004 	.word	0x05fa0004

0800090c <bootloader_read_uart_data>:
                               BL_MEM_WRITE,
							   BL_READ_SECTOR_STATUS} ;


void bootloader_read_uart_data(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
	uint8_t rcv_len = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		memset(bl_rx_buffer, 0, 200);
 8000916:	22c8      	movs	r2, #200	@ 0xc8
 8000918:	2100      	movs	r1, #0
 800091a:	4830      	ldr	r0, [pc, #192]	@ (80009dc <bootloader_read_uart_data+0xd0>)
 800091c:	f003 fbc0 	bl	80040a0 <memset>
		HAL_UART_Receive(&huart3, &bl_rx_buffer, 1, HAL_MAX_DELAY);
 8000920:	f04f 33ff 	mov.w	r3, #4294967295
 8000924:	2201      	movs	r2, #1
 8000926:	492d      	ldr	r1, [pc, #180]	@ (80009dc <bootloader_read_uart_data+0xd0>)
 8000928:	482d      	ldr	r0, [pc, #180]	@ (80009e0 <bootloader_read_uart_data+0xd4>)
 800092a:	f002 fde8 	bl	80034fe <HAL_UART_Receive>
		rcv_len = bl_rx_buffer[0];
 800092e:	4b2b      	ldr	r3, [pc, #172]	@ (80009dc <bootloader_read_uart_data+0xd0>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(&huart3, &bl_rx_buffer[1], rcv_len, HAL_MAX_DELAY);
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	b29a      	uxth	r2, r3
 8000938:	f04f 33ff 	mov.w	r3, #4294967295
 800093c:	4929      	ldr	r1, [pc, #164]	@ (80009e4 <bootloader_read_uart_data+0xd8>)
 800093e:	4828      	ldr	r0, [pc, #160]	@ (80009e0 <bootloader_read_uart_data+0xd4>)
 8000940:	f002 fddd 	bl	80034fe <HAL_UART_Receive>
		switch(bl_rx_buffer[1])
 8000944:	4b25      	ldr	r3, [pc, #148]	@ (80009dc <bootloader_read_uart_data+0xd0>)
 8000946:	785b      	ldrb	r3, [r3, #1]
 8000948:	3b51      	subs	r3, #81	@ 0x51
 800094a:	2b0a      	cmp	r3, #10
 800094c:	d844      	bhi.n	80009d8 <bootloader_read_uart_data+0xcc>
 800094e:	a201      	add	r2, pc, #4	@ (adr r2, 8000954 <bootloader_read_uart_data+0x48>)
 8000950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000954:	08000981 	.word	0x08000981
 8000958:	08000989 	.word	0x08000989
 800095c:	08000991 	.word	0x08000991
 8000960:	08000999 	.word	0x08000999
 8000964:	080009a1 	.word	0x080009a1
 8000968:	080009a9 	.word	0x080009a9
 800096c:	080009b1 	.word	0x080009b1
 8000970:	080009b9 	.word	0x080009b9
 8000974:	080009c1 	.word	0x080009c1
 8000978:	080009c9 	.word	0x080009c9
 800097c:	080009d1 	.word	0x080009d1
		{
			case BL_GET_VER:
				bootloader_handle_getver_cmd(bl_rx_buffer);
 8000980:	4816      	ldr	r0, [pc, #88]	@ (80009dc <bootloader_read_uart_data+0xd0>)
 8000982:	f000 fb4b 	bl	800101c <bootloader_handle_getver_cmd>
				break;
 8000986:	e028      	b.n	80009da <bootloader_read_uart_data+0xce>
			case BL_GET_HELP:
				bootloader_handle_gethelp_cmd(bl_rx_buffer);
 8000988:	4814      	ldr	r0, [pc, #80]	@ (80009dc <bootloader_read_uart_data+0xd0>)
 800098a:	f000 fb0d 	bl	8000fa8 <bootloader_handle_gethelp_cmd>
				break;
 800098e:	e024      	b.n	80009da <bootloader_read_uart_data+0xce>
			case BL_GET_CID:
				bootloader_handle_getcid_cmd(bl_rx_buffer);
 8000990:	4812      	ldr	r0, [pc, #72]	@ (80009dc <bootloader_read_uart_data+0xd0>)
 8000992:	f000 fabf 	bl	8000f14 <bootloader_handle_getcid_cmd>
				break;
 8000996:	e020      	b.n	80009da <bootloader_read_uart_data+0xce>
			case BL_GET_RDP_STATUS:
				bootloader_handle_getrdp_cmd(bl_rx_buffer);
 8000998:	4810      	ldr	r0, [pc, #64]	@ (80009dc <bootloader_read_uart_data+0xd0>)
 800099a:	f000 fa71 	bl	8000e80 <bootloader_handle_getrdp_cmd>
		 	    break;
 800099e:	e01c      	b.n	80009da <bootloader_read_uart_data+0xce>
			case BL_GO_TO_ADDR:
				bootloader_handle_go_cmd(bl_rx_buffer);
 80009a0:	480e      	ldr	r0, [pc, #56]	@ (80009dc <bootloader_read_uart_data+0xd0>)
 80009a2:	f000 fa0d 	bl	8000dc0 <bootloader_handle_go_cmd>
				break;
 80009a6:	e018      	b.n	80009da <bootloader_read_uart_data+0xce>
			case BL_FLASH_ERASE:
				bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 80009a8:	480c      	ldr	r0, [pc, #48]	@ (80009dc <bootloader_read_uart_data+0xd0>)
 80009aa:	f000 f9a1 	bl	8000cf0 <bootloader_handle_flash_erase_cmd>
				break;
 80009ae:	e014      	b.n	80009da <bootloader_read_uart_data+0xce>
			case BL_MEM_WRITE:
				bootloader_handle_mem_write_cmd(bl_rx_buffer);
 80009b0:	480a      	ldr	r0, [pc, #40]	@ (80009dc <bootloader_read_uart_data+0xd0>)
 80009b2:	f000 f919 	bl	8000be8 <bootloader_handle_mem_write_cmd>
				break;
 80009b6:	e010      	b.n	80009da <bootloader_read_uart_data+0xce>
			case BL_EN_RW_PROTECT:
				bootloader_handle_endis_rw_protect(bl_rx_buffer);
 80009b8:	4808      	ldr	r0, [pc, #32]	@ (80009dc <bootloader_read_uart_data+0xd0>)
 80009ba:	f000 f8c5 	bl	8000b48 <bootloader_handle_endis_rw_protect>
				break;
 80009be:	e00c      	b.n	80009da <bootloader_read_uart_data+0xce>
			case BL_MEM_READ:
				bootloader_handle_mem_read(bl_rx_buffer);
 80009c0:	4806      	ldr	r0, [pc, #24]	@ (80009dc <bootloader_read_uart_data+0xd0>)
 80009c2:	f000 f8b7 	bl	8000b34 <bootloader_handle_mem_read>
				break;
 80009c6:	e008      	b.n	80009da <bootloader_read_uart_data+0xce>
			case BL_READ_SECTOR_STATUS:
				bootloader_handle_read_sector_status(bl_rx_buffer);
 80009c8:	4804      	ldr	r0, [pc, #16]	@ (80009dc <bootloader_read_uart_data+0xd0>)
 80009ca:	f000 f863 	bl	8000a94 <bootloader_handle_read_sector_status>
				break;
 80009ce:	e004      	b.n	80009da <bootloader_read_uart_data+0xce>
			case BL_OTP_READ:
				bootloader_handle_read_otp(bl_rx_buffer);
 80009d0:	4802      	ldr	r0, [pc, #8]	@ (80009dc <bootloader_read_uart_data+0xd0>)
 80009d2:	f000 f8a5 	bl	8000b20 <bootloader_handle_read_otp>
				break;
 80009d6:	e000      	b.n	80009da <bootloader_read_uart_data+0xce>
			default:
				break;
 80009d8:	bf00      	nop
		memset(bl_rx_buffer, 0, 200);
 80009da:	e79c      	b.n	8000916 <bootloader_read_uart_data+0xa>
 80009dc:	20000124 	.word	0x20000124
 80009e0:	200000dc 	.word	0x200000dc
 80009e4:	20000125 	.word	0x20000125

080009e8 <bootloader_jump_to_user_app>:
		}
	}
}

void bootloader_jump_to_user_app(uint32_t app_start_address)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
    void (*app_reset_handler)(void);
    uint32_t msp_value = *(volatile uint32_t*)app_start_address;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	617b      	str	r3, [r7, #20]
    uint32_t reset_handler_address = *(volatile uint32_t*)(app_start_address + 4);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	3304      	adds	r3, #4
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	613b      	str	r3, [r7, #16]

    printf("app reset handler addr: 0x%08lx\n", reset_handler_address);
 80009fe:	6939      	ldr	r1, [r7, #16]
 8000a00:	480a      	ldr	r0, [pc, #40]	@ (8000a2c <bootloader_jump_to_user_app+0x44>)
 8000a02:	f003 fa05 	bl	8003e10 <iprintf>
    SCB->VTOR = app_start_address;
 8000a06:	4a0a      	ldr	r2, [pc, #40]	@ (8000a30 <bootloader_jump_to_user_app+0x48>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6093      	str	r3, [r2, #8]
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	f383 8808 	msr	MSP, r3
}
 8000a16:	bf00      	nop
    __set_MSP(msp_value);
    app_reset_handler = (void*) (reset_handler_address | 0x1);  // Ensure Thumb bit is set
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
    app_reset_handler();
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4798      	blx	r3
}
 8000a24:	bf00      	nop
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	08004c40 	.word	0x08004c40
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <jump_to_updated_application>:

void jump_to_updated_application(uint32_t app_start_address)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	void (*app_reset_handler)(void);
	uint32_t msp_value = *(volatile uint32_t*)app_start_address;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	617b      	str	r3, [r7, #20]
	uint32_t reset_handler_address = *(volatile uint32_t*)(app_start_address + 4);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3304      	adds	r3, #4
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	613b      	str	r3, [r7, #16]

	printf("app reset handler addr: 0x%08lx\n", reset_handler_address);
 8000a4a:	6939      	ldr	r1, [r7, #16]
 8000a4c:	480e      	ldr	r0, [pc, #56]	@ (8000a88 <jump_to_updated_application+0x54>)
 8000a4e:	f003 f9df 	bl	8003e10 <iprintf>

	HAL_RCC_DeInit();
 8000a52:	f002 f8e3 	bl	8002c1c <HAL_RCC_DeInit>
	HAL_DeInit();
 8000a56:	f000 ff3d 	bl	80018d4 <HAL_DeInit>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5a:	b672      	cpsid	i
}
 8000a5c:	bf00      	nop
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f383 8808 	msr	MSP, r3
}
 8000a68:	bf00      	nop
	__disable_irq();
	__set_MSP(msp_value);
	SCB->VTOR = app_start_address;
 8000a6a:	4a08      	ldr	r2, [pc, #32]	@ (8000a8c <jump_to_updated_application+0x58>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6093      	str	r3, [r2, #8]

	SysTick->CTRL = 0;
 8000a70:	4b07      	ldr	r3, [pc, #28]	@ (8000a90 <jump_to_updated_application+0x5c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8000a76:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <jump_to_updated_application+0x5c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000a7c:	4b04      	ldr	r3, [pc, #16]	@ (8000a90 <jump_to_updated_application+0x5c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
	NVIC_SystemReset();
 8000a82:	f7ff ff2d 	bl	80008e0 <__NVIC_SystemReset>
 8000a86:	bf00      	nop
 8000a88:	08004c40 	.word	0x08004c40
 8000a8c:	e000ed00 	.word	0xe000ed00
 8000a90:	e000e010 	.word	0xe000e010

08000a94 <bootloader_handle_read_sector_status>:
	app_reset_handler();

}

void bootloader_handle_read_sector_status(uint8_t *bl_rx_buffer)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	uint16_t status;
	printf("BL_DEBUG_MSG:bootloader_handle_read_sector_protection_status\n");
 8000a9c:	481c      	ldr	r0, [pc, #112]	@ (8000b10 <bootloader_handle_read_sector_status+0x7c>)
 8000a9e:	f003 fa1f 	bl	8003ee0 <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3b04      	subs	r3, #4
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3b04      	subs	r3, #4
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4619      	mov	r1, r3
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f000 fb20 	bl	8001104 <bootloader_verify_crc>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d118      	bne.n	8000afc <bootloader_handle_read_sector_status+0x68>
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
 8000aca:	4812      	ldr	r0, [pc, #72]	@ (8000b14 <bootloader_handle_read_sector_status+0x80>)
 8000acc:	f003 fa08 	bl	8003ee0 <puts>
		bootloader_send_ack(bl_rx_buffer[0],2);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 fae8 	bl	80010ac <bootloader_send_ack>
		status=read_OB_rw_protection_status();
 8000adc:	f000 fcd0 	bl	8001480 <read_OB_rw_protection_status>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	81fb      	strh	r3, [r7, #14]
		printf("BL_DEBUG_MSG: nWRP status: %#x\n",status);
 8000ae4:	89fb      	ldrh	r3, [r7, #14]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480b      	ldr	r0, [pc, #44]	@ (8000b18 <bootloader_handle_read_sector_status+0x84>)
 8000aea:	f003 f991 	bl	8003e10 <iprintf>
		bootloader_uart_write_data((uint8_t*)&status,2);
 8000aee:	f107 030e 	add.w	r3, r7, #14
 8000af2:	2102      	movs	r1, #2
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 fb39 	bl	800116c <bootloader_uart_write_data>
	else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000afa:	e004      	b.n	8000b06 <bootloader_handle_read_sector_status+0x72>
		printf("BL_DEBUG_MSG:checksum fail !!\n");
 8000afc:	4807      	ldr	r0, [pc, #28]	@ (8000b1c <bootloader_handle_read_sector_status+0x88>)
 8000afe:	f003 f9ef 	bl	8003ee0 <puts>
		bootloader_send_nack();
 8000b02:	f000 faed 	bl	80010e0 <bootloader_send_nack>
}
 8000b06:	bf00      	nop
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	08004c64 	.word	0x08004c64
 8000b14:	08004ca4 	.word	0x08004ca4
 8000b18:	08004cc8 	.word	0x08004cc8
 8000b1c:	08004ce8 	.word	0x08004ce8

08000b20 <bootloader_handle_read_otp>:

void bootloader_handle_read_otp(uint8_t *bl_rx_buffer)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]

}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <bootloader_handle_mem_read>:

void bootloader_handle_mem_read(uint8_t *bl_rx_buffer)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]


}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <bootloader_handle_endis_rw_protect>:
        bootloader_send_nack();
	}
}

void bootloader_handle_endis_rw_protect(uint8_t *bl_rx_buffer)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x00;
 8000b50:	2300      	movs	r3, #0
 8000b52:	73fb      	strb	r3, [r7, #15]
	printf("BL_DEBUG_MSG:bootloader_handle_endis_rw_protect\n");
 8000b54:	4820      	ldr	r0, [pc, #128]	@ (8000bd8 <bootloader_handle_endis_rw_protect+0x90>)
 8000b56:	f003 f9c3 	bl	8003ee0 <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	3b04      	subs	r3, #4
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	3b04      	subs	r3, #4
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4619      	mov	r1, r3
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 fac4 	bl	8001104 <bootloader_verify_crc>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d120      	bne.n	8000bc4 <bootloader_handle_endis_rw_protect+0x7c>
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
 8000b82:	4816      	ldr	r0, [pc, #88]	@ (8000bdc <bootloader_handle_endis_rw_protect+0x94>)
 8000b84:	f003 f9ac 	bl	8003ee0 <puts>
		bootloader_send_ack(bl_rx_buffer[0],1);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 fa8c 	bl	80010ac <bootloader_send_ack>
		status = configure_flash_sector_rw_protection(bl_rx_buffer[2] , bl_rx_buffer[3],0);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3302      	adds	r3, #2
 8000b98:	7818      	ldrb	r0, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	3303      	adds	r3, #3
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f000 fbd6 	bl	8001354 <configure_flash_sector_rw_protection>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	73fb      	strb	r3, [r7, #15]
		printf("BL_DEBUG_MSG: flash erase status: %#x\n",status);
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480b      	ldr	r0, [pc, #44]	@ (8000be0 <bootloader_handle_endis_rw_protect+0x98>)
 8000bb2:	f003 f92d 	bl	8003e10 <iprintf>
		bootloader_uart_write_data(&status,1);
 8000bb6:	f107 030f 	add.w	r3, r7, #15
 8000bba:	2101      	movs	r1, #1
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 fad5 	bl	800116c <bootloader_uart_write_data>
	}else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000bc2:	e004      	b.n	8000bce <bootloader_handle_endis_rw_protect+0x86>
		printf("BL_DEBUG_MSG:checksum fail !!\n");
 8000bc4:	4807      	ldr	r0, [pc, #28]	@ (8000be4 <bootloader_handle_endis_rw_protect+0x9c>)
 8000bc6:	f003 f98b 	bl	8003ee0 <puts>
		bootloader_send_nack();
 8000bca:	f000 fa89 	bl	80010e0 <bootloader_send_nack>
}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	08004d60 	.word	0x08004d60
 8000bdc:	08004ca4 	.word	0x08004ca4
 8000be0:	08004d38 	.word	0x08004d38
 8000be4:	08004ce8 	.word	0x08004ce8

08000be8 <bootloader_handle_mem_write_cmd>:

void bootloader_handle_mem_write_cmd(uint8_t *bl_rx_buffer)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	uint8_t write_status = 0x00;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	73fb      	strb	r3, [r7, #15]
	uint8_t chksum =0, len=0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	77fb      	strb	r3, [r7, #31]
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	77bb      	strb	r3, [r7, #30]
	len = bl_rx_buffer[0];
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	77bb      	strb	r3, [r7, #30]
	uint8_t payload_len = bl_rx_buffer[6];
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	799b      	ldrb	r3, [r3, #6]
 8000c06:	777b      	strb	r3, [r7, #29]
	uint32_t mem_address = *((uint32_t *) ( &bl_rx_buffer[2]) );
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000c0e:	61bb      	str	r3, [r7, #24]
	chksum = bl_rx_buffer[len];
 8000c10:	7fbb      	ldrb	r3, [r7, #30]
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	77fb      	strb	r3, [r7, #31]
	printf("BL_DEBUG_MSG:bootloader_handle_mem_write_cmd\n");
 8000c1a:	482e      	ldr	r0, [pc, #184]	@ (8000cd4 <bootloader_handle_mem_write_cmd+0xec>)
 8000c1c:	f003 f960 	bl	8003ee0 <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	3301      	adds	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	4413      	add	r3, r2
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	613b      	str	r3, [r7, #16]


	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	3b04      	subs	r3, #4
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f000 fa61 	bl	8001104 <bootloader_verify_crc>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d13b      	bne.n	8000cc0 <bootloader_handle_mem_write_cmd+0xd8>
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
 8000c48:	4823      	ldr	r0, [pc, #140]	@ (8000cd8 <bootloader_handle_mem_write_cmd+0xf0>)
 8000c4a:	f003 f949 	bl	8003ee0 <puts>

		bootloader_send_ack(bl_rx_buffer[0],1);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2101      	movs	r1, #1
 8000c54:	4618      	mov	r0, r3
 8000c56:	f000 fa29 	bl	80010ac <bootloader_send_ack>

		printf("BL_DEBUG_MSG: mem write address : %#x\n",mem_address);
 8000c5a:	69b9      	ldr	r1, [r7, #24]
 8000c5c:	481f      	ldr	r0, [pc, #124]	@ (8000cdc <bootloader_handle_mem_write_cmd+0xf4>)
 8000c5e:	f003 f8d7 	bl	8003e10 <iprintf>

		if( verify_address(mem_address) == ADDR_VALID )
 8000c62:	69b8      	ldr	r0, [r7, #24]
 8000c64:	f000 fac4 	bl	80011f0 <verify_address>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d11c      	bne.n	8000ca8 <bootloader_handle_mem_write_cmd+0xc0>
		{
			printf("BL_DEBUG_MSG: valid mem write address\n");
 8000c6e:	481c      	ldr	r0, [pc, #112]	@ (8000ce0 <bootloader_handle_mem_write_cmd+0xf8>)
 8000c70:	f003 f936 	bl	8003ee0 <puts>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2120      	movs	r1, #32
 8000c78:	481a      	ldr	r0, [pc, #104]	@ (8000ce4 <bootloader_handle_mem_write_cmd+0xfc>)
 8000c7a:	f001 fcf1 	bl	8002660 <HAL_GPIO_WritePin>
			write_status = execute_mem_write(&bl_rx_buffer[7],mem_address, payload_len);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3307      	adds	r3, #7
 8000c82:	7f7a      	ldrb	r2, [r7, #29]
 8000c84:	69b9      	ldr	r1, [r7, #24]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 fb37 	bl	80012fa <execute_mem_write>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2120      	movs	r1, #32
 8000c94:	4813      	ldr	r0, [pc, #76]	@ (8000ce4 <bootloader_handle_mem_write_cmd+0xfc>)
 8000c96:	f001 fce3 	bl	8002660 <HAL_GPIO_WritePin>
			bootloader_uart_write_data(&write_status,1);
 8000c9a:	f107 030f 	add.w	r3, r7, #15
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 fa63 	bl	800116c <bootloader_uart_write_data>
	else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000ca6:	e010      	b.n	8000cca <bootloader_handle_mem_write_cmd+0xe2>
			printf("BL_DEBUG_MSG: invalid mem write address\n");
 8000ca8:	480f      	ldr	r0, [pc, #60]	@ (8000ce8 <bootloader_handle_mem_write_cmd+0x100>)
 8000caa:	f003 f919 	bl	8003ee0 <puts>
			write_status = ADDR_INVALID;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	73fb      	strb	r3, [r7, #15]
			bootloader_uart_write_data(&write_status,1);
 8000cb2:	f107 030f 	add.w	r3, r7, #15
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 fa57 	bl	800116c <bootloader_uart_write_data>
}
 8000cbe:	e004      	b.n	8000cca <bootloader_handle_mem_write_cmd+0xe2>
		printf("BL_DEBUG_MSG:checksum fail !!\n");
 8000cc0:	480a      	ldr	r0, [pc, #40]	@ (8000cec <bootloader_handle_mem_write_cmd+0x104>)
 8000cc2:	f003 f90d 	bl	8003ee0 <puts>
		bootloader_send_nack();
 8000cc6:	f000 fa0b 	bl	80010e0 <bootloader_send_nack>
}
 8000cca:	bf00      	nop
 8000ccc:	3720      	adds	r7, #32
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	08004d90 	.word	0x08004d90
 8000cd8:	08004ca4 	.word	0x08004ca4
 8000cdc:	08004dc0 	.word	0x08004dc0
 8000ce0:	08004de8 	.word	0x08004de8
 8000ce4:	40020000 	.word	0x40020000
 8000ce8:	08004e10 	.word	0x08004e10
 8000cec:	08004ce8 	.word	0x08004ce8

08000cf0 <bootloader_handle_flash_erase_cmd>:

void bootloader_handle_flash_erase_cmd(uint8_t *bl_rx_buffer)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	uint8_t erase_status = 0x00;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73fb      	strb	r3, [r7, #15]
	printf("BL_DEBUG_MSG:bootloader_handle_flash_erase_cmd\n");
 8000cfc:	482a      	ldr	r0, [pc, #168]	@ (8000da8 <bootloader_handle_flash_erase_cmd+0xb8>)
 8000cfe:	f003 f8ef 	bl	8003ee0 <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	3301      	adds	r3, #1
 8000d08:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3b04      	subs	r3, #4
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	3b04      	subs	r3, #4
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f000 f9f0 	bl	8001104 <bootloader_verify_crc>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d135      	bne.n	8000d96 <bootloader_handle_flash_erase_cmd+0xa6>
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
 8000d2a:	4820      	ldr	r0, [pc, #128]	@ (8000dac <bootloader_handle_flash_erase_cmd+0xbc>)
 8000d2c:	f003 f8d8 	bl	8003ee0 <puts>
		bootloader_send_ack(bl_rx_buffer[0],1);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2101      	movs	r1, #1
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f9b8 	bl	80010ac <bootloader_send_ack>
		printf("BL_DEBUG_MSG:initial_sector : %d  no_ofsectors: %d\n",bl_rx_buffer[2],bl_rx_buffer[3]);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3302      	adds	r3, #2
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3303      	adds	r3, #3
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4818      	ldr	r0, [pc, #96]	@ (8000db0 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000d4e:	f003 f85f 	bl	8003e10 <iprintf>

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,1);
 8000d52:	2201      	movs	r2, #1
 8000d54:	2120      	movs	r1, #32
 8000d56:	4817      	ldr	r0, [pc, #92]	@ (8000db4 <bootloader_handle_flash_erase_cmd+0xc4>)
 8000d58:	f001 fc82 	bl	8002660 <HAL_GPIO_WritePin>
		erase_status = execute_flash_erase(bl_rx_buffer[2] , bl_rx_buffer[3]);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3302      	adds	r3, #2
 8000d60:	781a      	ldrb	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3303      	adds	r3, #3
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4610      	mov	r0, r2
 8000d6c:	f000 fa7e 	bl	800126c <execute_flash_erase>
 8000d70:	4603      	mov	r3, r0
 8000d72:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,0);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2120      	movs	r1, #32
 8000d78:	480e      	ldr	r0, [pc, #56]	@ (8000db4 <bootloader_handle_flash_erase_cmd+0xc4>)
 8000d7a:	f001 fc71 	bl	8002660 <HAL_GPIO_WritePin>

		printf("BL_DEBUG_MSG: flash erase status: %#x\n",erase_status);
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	4619      	mov	r1, r3
 8000d82:	480d      	ldr	r0, [pc, #52]	@ (8000db8 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000d84:	f003 f844 	bl	8003e10 <iprintf>

		bootloader_uart_write_data(&erase_status,1);
 8000d88:	f107 030f 	add.w	r3, r7, #15
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f9ec 	bl	800116c <bootloader_uart_write_data>
	}else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000d94:	e004      	b.n	8000da0 <bootloader_handle_flash_erase_cmd+0xb0>
		printf("BL_DEBUG_MSG:checksum fail !!\n");
 8000d96:	4809      	ldr	r0, [pc, #36]	@ (8000dbc <bootloader_handle_flash_erase_cmd+0xcc>)
 8000d98:	f003 f8a2 	bl	8003ee0 <puts>
		bootloader_send_nack();
 8000d9c:	f000 f9a0 	bl	80010e0 <bootloader_send_nack>
}
 8000da0:	bf00      	nop
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	08004e38 	.word	0x08004e38
 8000dac:	08004ca4 	.word	0x08004ca4
 8000db0:	08004e68 	.word	0x08004e68
 8000db4:	40020000 	.word	0x40020000
 8000db8:	08004d38 	.word	0x08004d38
 8000dbc:	08004ce8 	.word	0x08004ce8

08000dc0 <bootloader_handle_go_cmd>:

void bootloader_handle_go_cmd(uint8_t *bl_rx_buffer)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	uint32_t go_address=0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
	uint8_t addr_valid = ADDR_VALID;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	72fb      	strb	r3, [r7, #11]
	uint8_t addr_invalid = ADDR_INVALID;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	72bb      	strb	r3, [r7, #10]

	printf("BL_DEBUG_MSG:bootloader_handle_go_cmd\n");
 8000dd4:	4825      	ldr	r0, [pc, #148]	@ (8000e6c <bootloader_handle_go_cmd+0xac>)
 8000dd6:	f003 f883 	bl	8003ee0 <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	3301      	adds	r3, #1
 8000de0:	613b      	str	r3, [r7, #16]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	3b04      	subs	r3, #4
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	3b04      	subs	r3, #4
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	4619      	mov	r1, r3
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 f984 	bl	8001104 <bootloader_verify_crc>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d12a      	bne.n	8000e58 <bootloader_handle_go_cmd+0x98>
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
 8000e02:	481b      	ldr	r0, [pc, #108]	@ (8000e70 <bootloader_handle_go_cmd+0xb0>)
 8000e04:	f003 f86c 	bl	8003ee0 <puts>

		bootloader_send_ack(bl_rx_buffer[0],1);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f94c 	bl	80010ac <bootloader_send_ack>

		//extract the go address
		go_address = *((uint32_t *)&bl_rx_buffer[2] );
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000e1a:	617b      	str	r3, [r7, #20]
		printf("BL_DEBUG_MSG:GO addr: %#x\n",go_address);
 8000e1c:	6979      	ldr	r1, [r7, #20]
 8000e1e:	4815      	ldr	r0, [pc, #84]	@ (8000e74 <bootloader_handle_go_cmd+0xb4>)
 8000e20:	f002 fff6 	bl	8003e10 <iprintf>

		if( verify_address(go_address) == ADDR_VALID )
 8000e24:	6978      	ldr	r0, [r7, #20]
 8000e26:	f000 f9e3 	bl	80011f0 <verify_address>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d109      	bne.n	8000e44 <bootloader_handle_go_cmd+0x84>
		{
			bootloader_uart_write_data(&addr_valid,1);
 8000e30:	f107 030b 	add.w	r3, r7, #11
 8000e34:	2101      	movs	r1, #1
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f998 	bl	800116c <bootloader_uart_write_data>
            jump_to_updated_application(go_address);
 8000e3c:	6978      	ldr	r0, [r7, #20]
 8000e3e:	f7ff fdf9 	bl	8000a34 <jump_to_updated_application>
	}else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000e42:	e00e      	b.n	8000e62 <bootloader_handle_go_cmd+0xa2>
			printf("BL_DEBUG_MSG:GO addr invalid ! \n");
 8000e44:	480c      	ldr	r0, [pc, #48]	@ (8000e78 <bootloader_handle_go_cmd+0xb8>)
 8000e46:	f003 f84b 	bl	8003ee0 <puts>
			bootloader_uart_write_data(&addr_invalid,1);
 8000e4a:	f107 030a 	add.w	r3, r7, #10
 8000e4e:	2101      	movs	r1, #1
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 f98b 	bl	800116c <bootloader_uart_write_data>
}
 8000e56:	e004      	b.n	8000e62 <bootloader_handle_go_cmd+0xa2>
		printf("BL_DEBUG_MSG:checksum fail !!\n");
 8000e58:	4808      	ldr	r0, [pc, #32]	@ (8000e7c <bootloader_handle_go_cmd+0xbc>)
 8000e5a:	f003 f841 	bl	8003ee0 <puts>
		bootloader_send_nack();
 8000e5e:	f000 f93f 	bl	80010e0 <bootloader_send_nack>
}
 8000e62:	bf00      	nop
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	08004e9c 	.word	0x08004e9c
 8000e70:	08004ca4 	.word	0x08004ca4
 8000e74:	08004ec4 	.word	0x08004ec4
 8000e78:	08004ee0 	.word	0x08004ee0
 8000e7c:	08004ce8 	.word	0x08004ce8

08000e80 <bootloader_handle_getrdp_cmd>:

void bootloader_handle_getrdp_cmd(uint8_t *bl_rx_buffer)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	uint8_t rdp_level = 0x00;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	73fb      	strb	r3, [r7, #15]
	printf("BL_DEBUG_MSG:bootloader_handle_getrdp_cmd\n");
 8000e8c:	481d      	ldr	r0, [pc, #116]	@ (8000f04 <bootloader_handle_getrdp_cmd+0x84>)
 8000e8e:	f003 f827 	bl	8003ee0 <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	3301      	adds	r3, #1
 8000e98:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3b04      	subs	r3, #4
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	3b04      	subs	r3, #4
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4619      	mov	r1, r3
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 f928 	bl	8001104 <bootloader_verify_crc>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d11a      	bne.n	8000ef0 <bootloader_handle_getrdp_cmd+0x70>
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
 8000eba:	4813      	ldr	r0, [pc, #76]	@ (8000f08 <bootloader_handle_getrdp_cmd+0x88>)
 8000ebc:	f003 f810 	bl	8003ee0 <puts>
		bootloader_send_ack(bl_rx_buffer[0],1);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f8f0 	bl	80010ac <bootloader_send_ack>
		rdp_level = get_flash_rdp_level();
 8000ecc:	f000 f97c 	bl	80011c8 <get_flash_rdp_level>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73fb      	strb	r3, [r7, #15]
		printf("BL_DEBUG_MSG:RDP level: %d %#x\n",rdp_level,rdp_level);
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	461a      	mov	r2, r3
 8000edc:	480b      	ldr	r0, [pc, #44]	@ (8000f0c <bootloader_handle_getrdp_cmd+0x8c>)
 8000ede:	f002 ff97 	bl	8003e10 <iprintf>
		bootloader_uart_write_data(&rdp_level,1);
 8000ee2:	f107 030f 	add.w	r3, r7, #15
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 f93f 	bl	800116c <bootloader_uart_write_data>
	}else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000eee:	e004      	b.n	8000efa <bootloader_handle_getrdp_cmd+0x7a>
		printf("BL_DEBUG_MSG:checksum fail !!\n");
 8000ef0:	4807      	ldr	r0, [pc, #28]	@ (8000f10 <bootloader_handle_getrdp_cmd+0x90>)
 8000ef2:	f002 fff5 	bl	8003ee0 <puts>
		bootloader_send_nack();
 8000ef6:	f000 f8f3 	bl	80010e0 <bootloader_send_nack>
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	08004f00 	.word	0x08004f00
 8000f08:	08004ca4 	.word	0x08004ca4
 8000f0c:	08004f2c 	.word	0x08004f2c
 8000f10:	08004ce8 	.word	0x08004ce8

08000f14 <bootloader_handle_getcid_cmd>:

void bootloader_handle_getcid_cmd(uint8_t *bl_rx_buffer)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	uint16_t bl_cid_num = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	81fb      	strh	r3, [r7, #14]
	printf("BL_DEBUG_MSG:bootloader_handle_getcid_cmd\n");
 8000f20:	481d      	ldr	r0, [pc, #116]	@ (8000f98 <bootloader_handle_getcid_cmd+0x84>)
 8000f22:	f002 ffdd 	bl	8003ee0 <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	3b04      	subs	r3, #4
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3b04      	subs	r3, #4
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4619      	mov	r1, r3
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 f8de 	bl	8001104 <bootloader_verify_crc>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d11a      	bne.n	8000f84 <bootloader_handle_getcid_cmd+0x70>
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
 8000f4e:	4813      	ldr	r0, [pc, #76]	@ (8000f9c <bootloader_handle_getcid_cmd+0x88>)
 8000f50:	f002 ffc6 	bl	8003ee0 <puts>
		bootloader_send_ack(bl_rx_buffer[0],2);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2102      	movs	r1, #2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f8a6 	bl	80010ac <bootloader_send_ack>
		bl_cid_num = get_mcu_chip_id();
 8000f60:	f000 f920 	bl	80011a4 <get_mcu_chip_id>
 8000f64:	4603      	mov	r3, r0
 8000f66:	81fb      	strh	r3, [r7, #14]
		printf("BL_DEBUG_MSG:MCU id : %d %#x !!\n",bl_cid_num, bl_cid_num);
 8000f68:	89fb      	ldrh	r3, [r7, #14]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	89fb      	ldrh	r3, [r7, #14]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	480b      	ldr	r0, [pc, #44]	@ (8000fa0 <bootloader_handle_getcid_cmd+0x8c>)
 8000f72:	f002 ff4d 	bl	8003e10 <iprintf>
		bootloader_uart_write_data((uint8_t *)&bl_cid_num,2);
 8000f76:	f107 030e 	add.w	r3, r7, #14
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f8f5 	bl	800116c <bootloader_uart_write_data>
	}else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000f82:	e004      	b.n	8000f8e <bootloader_handle_getcid_cmd+0x7a>
		printf("BL_DEBUG_MSG:checksum fail !!\n");
 8000f84:	4807      	ldr	r0, [pc, #28]	@ (8000fa4 <bootloader_handle_getcid_cmd+0x90>)
 8000f86:	f002 ffab 	bl	8003ee0 <puts>
		bootloader_send_nack();
 8000f8a:	f000 f8a9 	bl	80010e0 <bootloader_send_nack>
}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	08004f4c 	.word	0x08004f4c
 8000f9c:	08004ca4 	.word	0x08004ca4
 8000fa0:	08004f78 	.word	0x08004f78
 8000fa4:	08004ce8 	.word	0x08004ce8

08000fa8 <bootloader_handle_gethelp_cmd>:

void bootloader_handle_gethelp_cmd(uint8_t *bl_rx_buffer)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	printf("BL_DEBUG_MSG:bootloader_handle_gethelp_cmd\n");
 8000fb0:	4816      	ldr	r0, [pc, #88]	@ (800100c <bootloader_handle_gethelp_cmd+0x64>)
 8000fb2:	f002 ff95 	bl	8003ee0 <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	60fb      	str	r3, [r7, #12]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	3b04      	subs	r3, #4
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60bb      	str	r3, [r7, #8]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	3b04      	subs	r3, #4
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f896 	bl	8001104 <bootloader_verify_crc>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10d      	bne.n	8000ffa <bootloader_handle_gethelp_cmd+0x52>
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
 8000fde:	480c      	ldr	r0, [pc, #48]	@ (8001010 <bootloader_handle_gethelp_cmd+0x68>)
 8000fe0:	f002 ff7e 	bl	8003ee0 <puts>
		bootloader_send_ack(bl_rx_buffer[0],sizeof(supported_commands));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2108      	movs	r1, #8
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f85e 	bl	80010ac <bootloader_send_ack>
		bootloader_uart_write_data(supported_commands,sizeof(supported_commands) );
 8000ff0:	2108      	movs	r1, #8
 8000ff2:	4808      	ldr	r0, [pc, #32]	@ (8001014 <bootloader_handle_gethelp_cmd+0x6c>)
 8000ff4:	f000 f8ba 	bl	800116c <bootloader_uart_write_data>
	}else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000ff8:	e004      	b.n	8001004 <bootloader_handle_gethelp_cmd+0x5c>
		printf("BL_DEBUG_MSG:checksum fail !!\n");
 8000ffa:	4807      	ldr	r0, [pc, #28]	@ (8001018 <bootloader_handle_gethelp_cmd+0x70>)
 8000ffc:	f002 ff70 	bl	8003ee0 <puts>
		bootloader_send_nack();
 8001000:	f000 f86e 	bl	80010e0 <bootloader_send_nack>
}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	08004f9c 	.word	0x08004f9c
 8001010:	08004ca4 	.word	0x08004ca4
 8001014:	20000000 	.word	0x20000000
 8001018:	08004ce8 	.word	0x08004ce8

0800101c <bootloader_handle_getver_cmd>:

void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	uint8_t bl_version;
	printf("bootloader handle get version command\n");
 8001024:	481d      	ldr	r0, [pc, #116]	@ (800109c <bootloader_handle_getver_cmd+0x80>)
 8001026:	f002 ff5b 	bl	8003ee0 <puts>
	uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t *) (bl_rx_buffer + command_packet_len - 4));
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3b04      	subs	r3, #4
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	613b      	str	r3, [r7, #16]
	if (! bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len-4, host_crc))
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3b04      	subs	r3, #4
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4619      	mov	r1, r3
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 f85c 	bl	8001104 <bootloader_verify_crc>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d11a      	bne.n	8001088 <bootloader_handle_getver_cmd+0x6c>
	{
		printf("checksum success !!\n");
 8001052:	4813      	ldr	r0, [pc, #76]	@ (80010a0 <bootloader_handle_getver_cmd+0x84>)
 8001054:	f002 ff44 	bl	8003ee0 <puts>
		bootloader_send_ack(bl_rx_buffer[0], 1);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2101      	movs	r1, #1
 800105e:	4618      	mov	r0, r3
 8001060:	f000 f824 	bl	80010ac <bootloader_send_ack>
		bl_version = get_bootloader_version();
 8001064:	f000 f896 	bl	8001194 <get_bootloader_version>
 8001068:	4603      	mov	r3, r0
 800106a:	73fb      	strb	r3, [r7, #15]
		printf("BL VERSION: %d %#x\n", bl_version, bl_version);
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	4619      	mov	r1, r3
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	461a      	mov	r2, r3
 8001074:	480b      	ldr	r0, [pc, #44]	@ (80010a4 <bootloader_handle_getver_cmd+0x88>)
 8001076:	f002 fecb 	bl	8003e10 <iprintf>
		bootloader_uart_write_data(&bl_version, 1);
 800107a:	f107 030f 	add.w	r3, r7, #15
 800107e:	2101      	movs	r1, #1
 8001080:	4618      	mov	r0, r3
 8001082:	f000 f873 	bl	800116c <bootloader_uart_write_data>
	else
	{
		printf("checksum failed !!\n");
		bootloader_send_nack();
	}
}
 8001086:	e004      	b.n	8001092 <bootloader_handle_getver_cmd+0x76>
		printf("checksum failed !!\n");
 8001088:	4807      	ldr	r0, [pc, #28]	@ (80010a8 <bootloader_handle_getver_cmd+0x8c>)
 800108a:	f002 ff29 	bl	8003ee0 <puts>
		bootloader_send_nack();
 800108e:	f000 f827 	bl	80010e0 <bootloader_send_nack>
}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	08004fc8 	.word	0x08004fc8
 80010a0:	08004ff0 	.word	0x08004ff0
 80010a4:	08005004 	.word	0x08005004
 80010a8:	08005018 	.word	0x08005018

080010ac <bootloader_send_ack>:

void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	460a      	mov	r2, r1
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 80010bc:	23a5      	movs	r3, #165	@ 0xa5
 80010be:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 80010c0:	79bb      	ldrb	r3, [r7, #6]
 80010c2:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&huart3, ack_buf, 2, HAL_MAX_DELAY);
 80010c4:	f107 010c 	add.w	r1, r7, #12
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295
 80010cc:	2202      	movs	r2, #2
 80010ce:	4803      	ldr	r0, [pc, #12]	@ (80010dc <bootloader_send_ack+0x30>)
 80010d0:	f002 f98a 	bl	80033e8 <HAL_UART_Transmit>
}
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200000dc 	.word	0x200000dc

080010e0 <bootloader_send_nack>:

void bootloader_send_nack(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 80010e6:	237f      	movs	r3, #127	@ 0x7f
 80010e8:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3, &nack, 1, HAL_MAX_DELAY);
 80010ea:	1df9      	adds	r1, r7, #7
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	2201      	movs	r2, #1
 80010f2:	4803      	ldr	r0, [pc, #12]	@ (8001100 <bootloader_send_nack+0x20>)
 80010f4:	f002 f978 	bl	80033e8 <HAL_UART_Transmit>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200000dc 	.word	0x200000dc

08001104 <bootloader_verify_crc>:

uint8_t bootloader_verify_crc(uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
	uint32_t uwCRCValue = 0xff;
 8001110:	23ff      	movs	r3, #255	@ 0xff
 8001112:	61fb      	str	r3, [r7, #28]
	__HAL_CRC_DR_RESET(&hcrc);
 8001114:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <bootloader_verify_crc+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	4b13      	ldr	r3, [pc, #76]	@ (8001168 <bootloader_verify_crc+0x64>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 0201 	orr.w	r2, r2, #1
 8001122:	609a      	str	r2, [r3, #8]
	for (uint32_t i = 0; i < len; i++)
 8001124:	2300      	movs	r3, #0
 8001126:	61bb      	str	r3, [r7, #24]
 8001128:	e00f      	b.n	800114a <bootloader_verify_crc+0x46>
	{
		uint32_t i_data = pData[i];
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	4413      	add	r3, r2
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	617b      	str	r3, [r7, #20]
		uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2201      	movs	r2, #1
 800113a:	4619      	mov	r1, r3
 800113c:	480a      	ldr	r0, [pc, #40]	@ (8001168 <bootloader_verify_crc+0x64>)
 800113e:	f000 fd50 	bl	8001be2 <HAL_CRC_Accumulate>
 8001142:	61f8      	str	r0, [r7, #28]
	for (uint32_t i = 0; i < len; i++)
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	3301      	adds	r3, #1
 8001148:	61bb      	str	r3, [r7, #24]
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	429a      	cmp	r2, r3
 8001150:	d3eb      	bcc.n	800112a <bootloader_verify_crc+0x26>
	}
	if(uwCRCValue == crc_host)
 8001152:	69fa      	ldr	r2, [r7, #28]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	429a      	cmp	r2, r3
 8001158:	d101      	bne.n	800115e <bootloader_verify_crc+0x5a>
	{
		return VERIFY_CRC_SUCCESS;
 800115a:	2300      	movs	r3, #0
 800115c:	e000      	b.n	8001160 <bootloader_verify_crc+0x5c>
	}
	return VERIFY_CRC_FAIL;
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000008c 	.word	0x2000008c

0800116c <bootloader_uart_write_data>:

void bootloader_uart_write_data(uint8_t *pBuffer, uint32_t len)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, pBuffer, len, HAL_MAX_DELAY);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	b29a      	uxth	r2, r3
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4803      	ldr	r0, [pc, #12]	@ (8001190 <bootloader_uart_write_data+0x24>)
 8001182:	f002 f931 	bl	80033e8 <HAL_UART_Transmit>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200000dc 	.word	0x200000dc

08001194 <get_bootloader_version>:

uint8_t get_bootloader_version(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
	return (uint8_t)BL_VERSION;
 8001198:	2310      	movs	r3, #16
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <get_mcu_chip_id>:


uint16_t get_mcu_chip_id(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
	uint16_t cid;
	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <get_mcu_chip_id+0x20>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011b4:	80fb      	strh	r3, [r7, #6]
	return  cid;
 80011b6:	88fb      	ldrh	r3, [r7, #6]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e0042000 	.word	0xe0042000

080011c8 <get_flash_rdp_level>:

uint8_t get_flash_rdp_level(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0

	uint8_t rdp_status=0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	71fb      	strb	r3, [r7, #7]
	FLASH_OBProgramInitTypeDef  ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
	rdp_status = (uint8_t)ob_handle.RDPLevel;
#else

	 volatile uint32_t *pOB_addr = (uint32_t*) 0x1FFFC000;
 80011d2:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <get_flash_rdp_level+0x24>)
 80011d4:	603b      	str	r3, [r7, #0]
	 rdp_status =  (uint8_t)(*pOB_addr >> 8) ;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	0a1b      	lsrs	r3, r3, #8
 80011dc:	71fb      	strb	r3, [r7, #7]
#endif

	return rdp_status;
 80011de:	79fb      	ldrb	r3, [r7, #7]

}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	1fffc000 	.word	0x1fffc000

080011f0 <verify_address>:

uint8_t verify_address(uint32_t go_address)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011fe:	d305      	bcc.n	800120c <verify_address+0x1c>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a15      	ldr	r2, [pc, #84]	@ (8001258 <verify_address+0x68>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d801      	bhi.n	800120c <verify_address+0x1c>
	{
		return ADDR_VALID;
 8001208:	2300      	movs	r3, #0
 800120a:	e01e      	b.n	800124a <verify_address+0x5a>
	}
	else if ( go_address >= SRAM2_BASE && go_address <= SRAM2_END)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a12      	ldr	r2, [pc, #72]	@ (8001258 <verify_address+0x68>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d305      	bcc.n	8001220 <verify_address+0x30>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a11      	ldr	r2, [pc, #68]	@ (800125c <verify_address+0x6c>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d801      	bhi.n	8001220 <verify_address+0x30>
	{
		return ADDR_VALID;
 800121c:	2300      	movs	r3, #0
 800121e:	e014      	b.n	800124a <verify_address+0x5a>
	}
	else if ( go_address >= FLASH_BASE && go_address <= FLASH_END)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001226:	d305      	bcc.n	8001234 <verify_address+0x44>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a0d      	ldr	r2, [pc, #52]	@ (8001260 <verify_address+0x70>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d801      	bhi.n	8001234 <verify_address+0x44>
	{
		return ADDR_VALID;
 8001230:	2300      	movs	r3, #0
 8001232:	e00a      	b.n	800124a <verify_address+0x5a>
	}
	else if ( go_address >= BKPSRAM_BASE && go_address <= BKPSRAM_END)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a0b      	ldr	r2, [pc, #44]	@ (8001264 <verify_address+0x74>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d305      	bcc.n	8001248 <verify_address+0x58>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a0a      	ldr	r2, [pc, #40]	@ (8001268 <verify_address+0x78>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d801      	bhi.n	8001248 <verify_address+0x58>
	{
		return ADDR_VALID;
 8001244:	2300      	movs	r3, #0
 8001246:	e000      	b.n	800124a <verify_address+0x5a>
	}
	else
		return ADDR_INVALID;
 8001248:	2301      	movs	r3, #1
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	2001c000 	.word	0x2001c000
 800125c:	20020000 	.word	0x20020000
 8001260:	0807ffff 	.word	0x0807ffff
 8001264:	40024000 	.word	0x40024000
 8001268:	40025000 	.word	0x40025000

0800126c <execute_flash_erase>:

 uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	@ 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	460a      	mov	r2, r1
 8001276:	71fb      	strb	r3, [r7, #7]
 8001278:	4613      	mov	r3, r2
 800127a:	71bb      	strb	r3, [r7, #6]
	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;


	if( number_of_sector > 8 )
 800127c:	79bb      	ldrb	r3, [r7, #6]
 800127e:	2b08      	cmp	r3, #8
 8001280:	d901      	bls.n	8001286 <execute_flash_erase+0x1a>
		return INVALID_SECTOR;
 8001282:	2304      	movs	r3, #4
 8001284:	e035      	b.n	80012f2 <execute_flash_erase+0x86>

	if( (sector_number == 0xff ) || (sector_number <= 7) )
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	2bff      	cmp	r3, #255	@ 0xff
 800128a:	d002      	beq.n	8001292 <execute_flash_erase+0x26>
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	2b07      	cmp	r3, #7
 8001290:	d82e      	bhi.n	80012f0 <execute_flash_erase+0x84>
	{
		if(sector_number == (uint8_t) 0xff)
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2bff      	cmp	r3, #255	@ 0xff
 8001296:	d102      	bne.n	800129e <execute_flash_erase+0x32>
		{
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8001298:	2301      	movs	r3, #1
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	e012      	b.n	80012c4 <execute_flash_erase+0x58>
		}else
		{
			uint8_t remanining_sector = 8 - sector_number;
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	f1c3 0308 	rsb	r3, r3, #8
 80012a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( number_of_sector > remanining_sector)
 80012a8:	79ba      	ldrb	r2, [r7, #6]
 80012aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d902      	bls.n	80012b8 <execute_flash_erase+0x4c>
            {
            	number_of_sector = remanining_sector;
 80012b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012b6:	71bb      	strb	r3, [r7, #6]
            }
			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
			flashErase_handle.Sector = sector_number;
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	61bb      	str	r3, [r7, #24]
			flashErase_handle.NbSectors = number_of_sector;
 80012c0:	79bb      	ldrb	r3, [r7, #6]
 80012c2:	61fb      	str	r3, [r7, #28]
		}
		flashErase_handle.Banks = FLASH_BANK_1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	617b      	str	r3, [r7, #20]
		HAL_FLASH_Unlock();
 80012c8:	f000 fd08 	bl	8001cdc <HAL_FLASH_Unlock>
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80012cc:	2302      	movs	r3, #2
 80012ce:	623b      	str	r3, [r7, #32]
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 80012d0:	f107 020c 	add.w	r2, r7, #12
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	4611      	mov	r1, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 fe9c 	bl	8002018 <HAL_FLASHEx_Erase>
 80012e0:	4603      	mov	r3, r0
 80012e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		HAL_FLASH_Lock();
 80012e6:	f000 fd1b 	bl	8001d20 <HAL_FLASH_Lock>

		return status;
 80012ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80012ee:	e000      	b.n	80012f2 <execute_flash_erase+0x86>
	}
	return INVALID_SECTOR;
 80012f0:	2304      	movs	r3, #4
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3728      	adds	r7, #40	@ 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <execute_mem_write>:

uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 80012fa:	b5b0      	push	{r4, r5, r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	60f8      	str	r0, [r7, #12]
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
    uint8_t status=HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	75fb      	strb	r3, [r7, #23]
    HAL_FLASH_Unlock();
 800130a:	f000 fce7 	bl	8001cdc <HAL_FLASH_Unlock>

    for(uint32_t i = 0 ; i <len ; i++)
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	e014      	b.n	800133e <execute_mem_write+0x44>
    {
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,mem_address+i,pBuffer[i] );
 8001314:	68ba      	ldr	r2, [r7, #8]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	18d1      	adds	r1, r2, r3
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4413      	add	r3, r2
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2200      	movs	r2, #0
 8001326:	461c      	mov	r4, r3
 8001328:	4615      	mov	r5, r2
 800132a:	4622      	mov	r2, r4
 800132c:	462b      	mov	r3, r5
 800132e:	2000      	movs	r0, #0
 8001330:	f000 fc82 	bl	8001c38 <HAL_FLASH_Program>
 8001334:	4603      	mov	r3, r0
 8001336:	75fb      	strb	r3, [r7, #23]
    for(uint32_t i = 0 ; i <len ; i++)
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	3301      	adds	r3, #1
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	429a      	cmp	r2, r3
 8001344:	d3e6      	bcc.n	8001314 <execute_mem_write+0x1a>
    }

    HAL_FLASH_Lock();
 8001346:	f000 fceb 	bl	8001d20 <HAL_FLASH_Lock>
    return status;
 800134a:	7dfb      	ldrb	r3, [r7, #23]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bdb0      	pop	{r4, r5, r7, pc}

08001354 <configure_flash_sector_rw_protection>:

uint8_t configure_flash_sector_rw_protection(uint8_t sector_details, uint8_t protection_mode, uint8_t disable)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
 800135e:	460b      	mov	r3, r1
 8001360:	71bb      	strb	r3, [r7, #6]
 8001362:	4613      	mov	r3, r2
 8001364:	717b      	strb	r3, [r7, #5]
    volatile uint32_t *pOPTCR = (uint32_t*) 0x40023C14;
 8001366:	4b44      	ldr	r3, [pc, #272]	@ (8001478 <configure_flash_sector_rw_protection+0x124>)
 8001368:	60fb      	str	r3, [r7, #12]

	if(disable)
 800136a:	797b      	ldrb	r3, [r7, #5]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d025      	beq.n	80013bc <configure_flash_sector_rw_protection+0x68>
	{
		HAL_FLASH_OB_Unlock();
 8001370:	f000 fce6 	bl	8001d40 <HAL_FLASH_OB_Unlock>
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001374:	bf00      	nop
 8001376:	4b41      	ldr	r3, [pc, #260]	@ (800147c <configure_flash_sector_rw_protection+0x128>)
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f9      	bne.n	8001376 <configure_flash_sector_rw_protection+0x22>
		*pOPTCR &= ~(1 << 31);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	601a      	str	r2, [r3, #0]
		*pOPTCR |= (0xFF << 16);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f443 027f 	orr.w	r2, r3, #16711680	@ 0xff0000
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	601a      	str	r2, [r3, #0]
		*pOPTCR |= ( 1 << 1);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f043 0202 	orr.w	r2, r3, #2
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	601a      	str	r2, [r3, #0]
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80013a6:	bf00      	nop
 80013a8:	4b34      	ldr	r3, [pc, #208]	@ (800147c <configure_flash_sector_rw_protection+0x128>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1f9      	bne.n	80013a8 <configure_flash_sector_rw_protection+0x54>

		HAL_FLASH_OB_Lock();
 80013b4:	f000 fce0 	bl	8001d78 <HAL_FLASH_OB_Lock>

		return 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	e058      	b.n	800146e <configure_flash_sector_rw_protection+0x11a>

	}

	if(protection_mode == (uint8_t) 1)
 80013bc:	79bb      	ldrb	r3, [r7, #6]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d126      	bne.n	8001410 <configure_flash_sector_rw_protection+0xbc>
    {
		HAL_FLASH_OB_Unlock();
 80013c2:	f000 fcbd 	bl	8001d40 <HAL_FLASH_OB_Unlock>
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80013c6:	bf00      	nop
 80013c8:	4b2c      	ldr	r3, [pc, #176]	@ (800147c <configure_flash_sector_rw_protection+0x128>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f9      	bne.n	80013c8 <configure_flash_sector_rw_protection+0x74>
		*pOPTCR &= ~(1 << 31);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	601a      	str	r2, [r3, #0]

		//put write protection on sectors
		*pOPTCR &= ~ (sector_details << 16);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	79fa      	ldrb	r2, [r7, #7]
 80013e6:	0412      	lsls	r2, r2, #16
 80013e8:	43d2      	mvns	r2, r2
 80013ea:	401a      	ands	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	601a      	str	r2, [r3, #0]

		//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
		*pOPTCR |= ( 1 << 1);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f043 0202 	orr.w	r2, r3, #2
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	601a      	str	r2, [r3, #0]

		//wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80013fc:	bf00      	nop
 80013fe:	4b1f      	ldr	r3, [pc, #124]	@ (800147c <configure_flash_sector_rw_protection+0x128>)
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f9      	bne.n	80013fe <configure_flash_sector_rw_protection+0xaa>

		HAL_FLASH_OB_Lock();
 800140a:	f000 fcb5 	bl	8001d78 <HAL_FLASH_OB_Lock>
 800140e:	e02d      	b.n	800146c <configure_flash_sector_rw_protection+0x118>
	}

	else if (protection_mode == (uint8_t) 2)
 8001410:	79bb      	ldrb	r3, [r7, #6]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d12a      	bne.n	800146c <configure_flash_sector_rw_protection+0x118>
    {

		HAL_FLASH_OB_Unlock();
 8001416:	f000 fc93 	bl	8001d40 <HAL_FLASH_OB_Unlock>

		//wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 800141a:	bf00      	nop
 800141c:	4b17      	ldr	r3, [pc, #92]	@ (800147c <configure_flash_sector_rw_protection+0x128>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f9      	bne.n	800141c <configure_flash_sector_rw_protection+0xc8>

		//here wer are setting read and write protection for the sectors
		//set the 31st bit
		//please refer : Flash option control register (FLASH_OPTCR) in RM
		*pOPTCR |= (1 << 31);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	601a      	str	r2, [r3, #0]

		//put read and write protection on sectors
		*pOPTCR &= ~(0xff << 16);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	601a      	str	r2, [r3, #0]
		*pOPTCR |= (sector_details << 16);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	041b      	lsls	r3, r3, #16
 8001448:	431a      	orrs	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	601a      	str	r2, [r3, #0]

		//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
		*pOPTCR |= ( 1 << 1);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f043 0202 	orr.w	r2, r3, #2
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	601a      	str	r2, [r3, #0]

		//wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 800145a:	bf00      	nop
 800145c:	4b07      	ldr	r3, [pc, #28]	@ (800147c <configure_flash_sector_rw_protection+0x128>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1f9      	bne.n	800145c <configure_flash_sector_rw_protection+0x108>

		HAL_FLASH_OB_Lock();
 8001468:	f000 fc86 	bl	8001d78 <HAL_FLASH_OB_Lock>
    }

		return 0;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023c14 	.word	0x40023c14
 800147c:	40023c00 	.word	0x40023c00

08001480 <read_OB_rw_protection_status>:

uint16_t read_OB_rw_protection_status(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef OBInit;
	HAL_FLASH_OB_Unlock();
 8001486:	f000 fc5b 	bl	8001d40 <HAL_FLASH_OB_Unlock>
	HAL_FLASHEx_OBGetConfig(&OBInit);
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	4618      	mov	r0, r3
 800148e:	f000 fe31 	bl	80020f4 <HAL_FLASHEx_OBGetConfig>
	HAL_FLASH_Lock();
 8001492:	f000 fc45 	bl	8001d20 <HAL_FLASH_Lock>
	return (uint16_t)OBInit.WRPSector;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	b29b      	uxth	r3, r3

}
 800149a:	4618      	mov	r0, r3
 800149c:	3720      	adds	r7, #32
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <HAL_MspInit+0x4c>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b2:	4a0f      	ldr	r2, [pc, #60]	@ (80014f0 <HAL_MspInit+0x4c>)
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ba:	4b0d      	ldr	r3, [pc, #52]	@ (80014f0 <HAL_MspInit+0x4c>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <HAL_MspInit+0x4c>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ce:	4a08      	ldr	r2, [pc, #32]	@ (80014f0 <HAL_MspInit+0x4c>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_MspInit+0x4c>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800

080014f4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0b      	ldr	r2, [pc, #44]	@ (8001530 <HAL_CRC_MspInit+0x3c>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d10d      	bne.n	8001522 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <HAL_CRC_MspInit+0x40>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a09      	ldr	r2, [pc, #36]	@ (8001534 <HAL_CRC_MspInit+0x40>)
 8001510:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <HAL_CRC_MspInit+0x40>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40023000 	.word	0x40023000
 8001534:	40023800 	.word	0x40023800

08001538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08c      	sub	sp, #48	@ 0x30
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a41      	ldr	r2, [pc, #260]	@ (800165c <HAL_UART_MspInit+0x124>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d12c      	bne.n	80015b4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
 800155e:	4b40      	ldr	r3, [pc, #256]	@ (8001660 <HAL_UART_MspInit+0x128>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	4a3f      	ldr	r2, [pc, #252]	@ (8001660 <HAL_UART_MspInit+0x128>)
 8001564:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001568:	6413      	str	r3, [r2, #64]	@ 0x40
 800156a:	4b3d      	ldr	r3, [pc, #244]	@ (8001660 <HAL_UART_MspInit+0x128>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001572:	61bb      	str	r3, [r7, #24]
 8001574:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	4b39      	ldr	r3, [pc, #228]	@ (8001660 <HAL_UART_MspInit+0x128>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	4a38      	ldr	r2, [pc, #224]	@ (8001660 <HAL_UART_MspInit+0x128>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6313      	str	r3, [r2, #48]	@ 0x30
 8001586:	4b36      	ldr	r3, [pc, #216]	@ (8001660 <HAL_UART_MspInit+0x128>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001592:	230c      	movs	r3, #12
 8001594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015a2:	2307      	movs	r3, #7
 80015a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	482d      	ldr	r0, [pc, #180]	@ (8001664 <HAL_UART_MspInit+0x12c>)
 80015ae:	f000 fec3 	bl	8002338 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015b2:	e04f      	b.n	8001654 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a2b      	ldr	r2, [pc, #172]	@ (8001668 <HAL_UART_MspInit+0x130>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d14a      	bne.n	8001654 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	4b27      	ldr	r3, [pc, #156]	@ (8001660 <HAL_UART_MspInit+0x128>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	4a26      	ldr	r2, [pc, #152]	@ (8001660 <HAL_UART_MspInit+0x128>)
 80015c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ce:	4b24      	ldr	r3, [pc, #144]	@ (8001660 <HAL_UART_MspInit+0x128>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b20      	ldr	r3, [pc, #128]	@ (8001660 <HAL_UART_MspInit+0x128>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001660 <HAL_UART_MspInit+0x128>)
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001660 <HAL_UART_MspInit+0x128>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <HAL_UART_MspInit+0x128>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	4a18      	ldr	r2, [pc, #96]	@ (8001660 <HAL_UART_MspInit+0x128>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	6313      	str	r3, [r2, #48]	@ 0x30
 8001606:	4b16      	ldr	r3, [pc, #88]	@ (8001660 <HAL_UART_MspInit+0x128>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001612:	2320      	movs	r3, #32
 8001614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001622:	2307      	movs	r3, #7
 8001624:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001626:	f107 031c 	add.w	r3, r7, #28
 800162a:	4619      	mov	r1, r3
 800162c:	480f      	ldr	r0, [pc, #60]	@ (800166c <HAL_UART_MspInit+0x134>)
 800162e:	f000 fe83 	bl	8002338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001632:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001640:	2303      	movs	r3, #3
 8001642:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001644:	2307      	movs	r3, #7
 8001646:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4619      	mov	r1, r3
 800164e:	4808      	ldr	r0, [pc, #32]	@ (8001670 <HAL_UART_MspInit+0x138>)
 8001650:	f000 fe72 	bl	8002338 <HAL_GPIO_Init>
}
 8001654:	bf00      	nop
 8001656:	3730      	adds	r7, #48	@ 0x30
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40004400 	.word	0x40004400
 8001660:	40023800 	.word	0x40023800
 8001664:	40020000 	.word	0x40020000
 8001668:	40004800 	.word	0x40004800
 800166c:	40020800 	.word	0x40020800
 8001670:	40020400 	.word	0x40020400

08001674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <NMI_Handler+0x4>

0800167c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <HardFault_Handler+0x4>

08001684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <MemManage_Handler+0x4>

0800168c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <BusFault_Handler+0x4>

08001694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <UsageFault_Handler+0x4>

0800169c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ca:	f000 f969 	bl	80019a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	e00a      	b.n	80016fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016e4:	f3af 8000 	nop.w
 80016e8:	4601      	mov	r1, r0
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	60ba      	str	r2, [r7, #8]
 80016f0:	b2ca      	uxtb	r2, r1
 80016f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	429a      	cmp	r2, r3
 8001700:	dbf0      	blt.n	80016e4 <_read+0x12>
  }

  return len;
 8001702:	687b      	ldr	r3, [r7, #4]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	e009      	b.n	8001732 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	60ba      	str	r2, [r7, #8]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe ff68 	bl	80005fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	3301      	adds	r3, #1
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	429a      	cmp	r2, r3
 8001738:	dbf1      	blt.n	800171e <_write+0x12>
  }
  return len;
 800173a:	687b      	ldr	r3, [r7, #4]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <_close>:

int _close(int file)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800174c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800176c:	605a      	str	r2, [r3, #4]
  return 0;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <_isatty>:

int _isatty(int file)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001784:	2301      	movs	r3, #1
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001792:	b480      	push	{r7}
 8001794:	b085      	sub	sp, #20
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b4:	4a14      	ldr	r2, [pc, #80]	@ (8001808 <_sbrk+0x5c>)
 80017b6:	4b15      	ldr	r3, [pc, #84]	@ (800180c <_sbrk+0x60>)
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c0:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c8:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <_sbrk+0x64>)
 80017ca:	4a12      	ldr	r2, [pc, #72]	@ (8001814 <_sbrk+0x68>)
 80017cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ce:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d207      	bcs.n	80017ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017dc:	f002 fcae 	bl	800413c <__errno>
 80017e0:	4603      	mov	r3, r0
 80017e2:	220c      	movs	r2, #12
 80017e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	e009      	b.n	8001800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ec:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f2:	4b07      	ldr	r3, [pc, #28]	@ (8001810 <_sbrk+0x64>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	4a05      	ldr	r2, [pc, #20]	@ (8001810 <_sbrk+0x64>)
 80017fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fe:	68fb      	ldr	r3, [r7, #12]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20020000 	.word	0x20020000
 800180c:	00000400 	.word	0x00000400
 8001810:	200001ec 	.word	0x200001ec
 8001814:	20000360 	.word	0x20000360

08001818 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800181c:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <SystemInit+0x20>)
 800181e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001822:	4a05      	ldr	r2, [pc, #20]	@ (8001838 <SystemInit+0x20>)
 8001824:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001828:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800183c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001874 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001840:	f7ff ffea 	bl	8001818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001844:	480c      	ldr	r0, [pc, #48]	@ (8001878 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001846:	490d      	ldr	r1, [pc, #52]	@ (800187c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001848:	4a0d      	ldr	r2, [pc, #52]	@ (8001880 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800184c:	e002      	b.n	8001854 <LoopCopyDataInit>

0800184e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001852:	3304      	adds	r3, #4

08001854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001858:	d3f9      	bcc.n	800184e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185a:	4a0a      	ldr	r2, [pc, #40]	@ (8001884 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800185c:	4c0a      	ldr	r4, [pc, #40]	@ (8001888 <LoopFillZerobss+0x22>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001860:	e001      	b.n	8001866 <LoopFillZerobss>

08001862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001864:	3204      	adds	r2, #4

08001866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001868:	d3fb      	bcc.n	8001862 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800186a:	f002 fc6d 	bl	8004148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800186e:	f7fe fed7 	bl	8000620 <main>
  bx  lr    
 8001872:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001874:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800187c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001880:	08005088 	.word	0x08005088
  ldr r2, =_sbss
 8001884:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001888:	20000360 	.word	0x20000360

0800188c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC_IRQHandler>
	...

08001890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001894:	4b0e      	ldr	r3, [pc, #56]	@ (80018d0 <HAL_Init+0x40>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0d      	ldr	r2, [pc, #52]	@ (80018d0 <HAL_Init+0x40>)
 800189a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800189e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a0:	4b0b      	ldr	r3, [pc, #44]	@ (80018d0 <HAL_Init+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0a      	ldr	r2, [pc, #40]	@ (80018d0 <HAL_Init+0x40>)
 80018a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ac:	4b08      	ldr	r3, [pc, #32]	@ (80018d0 <HAL_Init+0x40>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a07      	ldr	r2, [pc, #28]	@ (80018d0 <HAL_Init+0x40>)
 80018b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b8:	2003      	movs	r0, #3
 80018ba:	f000 f943 	bl	8001b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018be:	200f      	movs	r0, #15
 80018c0:	f000 f83e 	bl	8001940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c4:	f7ff fdee 	bl	80014a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023c00 	.word	0x40023c00

080018d4 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80018d8:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <HAL_DeInit+0x4c>)
 80018da:	4a12      	ldr	r2, [pc, #72]	@ (8001924 <HAL_DeInit+0x50>)
 80018dc:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80018de:	4b10      	ldr	r3, [pc, #64]	@ (8001920 <HAL_DeInit+0x4c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80018e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <HAL_DeInit+0x4c>)
 80018e6:	4a10      	ldr	r2, [pc, #64]	@ (8001928 <HAL_DeInit+0x54>)
 80018e8:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80018ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001920 <HAL_DeInit+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80018f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <HAL_DeInit+0x4c>)
 80018f2:	4a0e      	ldr	r2, [pc, #56]	@ (800192c <HAL_DeInit+0x58>)
 80018f4:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80018f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <HAL_DeInit+0x4c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80018fc:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <HAL_DeInit+0x4c>)
 80018fe:	2281      	movs	r2, #129	@ 0x81
 8001900:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001902:	4b07      	ldr	r3, [pc, #28]	@ (8001920 <HAL_DeInit+0x4c>)
 8001904:	2200      	movs	r2, #0
 8001906:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001908:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <HAL_DeInit+0x4c>)
 800190a:	2203      	movs	r2, #3
 800190c:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 800190e:	4b04      	ldr	r3, [pc, #16]	@ (8001920 <HAL_DeInit+0x4c>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001914:	f000 f80c 	bl	8001930 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	3fffc9ff 	.word	0x3fffc9ff
 8001928:	00c77933 	.word	0x00c77933
 800192c:	206010ff 	.word	0x206010ff

08001930 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001948:	4b12      	ldr	r3, [pc, #72]	@ (8001994 <HAL_InitTick+0x54>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b12      	ldr	r3, [pc, #72]	@ (8001998 <HAL_InitTick+0x58>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4619      	mov	r1, r3
 8001952:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001956:	fbb3 f3f1 	udiv	r3, r3, r1
 800195a:	fbb2 f3f3 	udiv	r3, r2, r3
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f917 	bl	8001b92 <HAL_SYSTICK_Config>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e00e      	b.n	800198c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b0f      	cmp	r3, #15
 8001972:	d80a      	bhi.n	800198a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001974:	2200      	movs	r2, #0
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f000 f8ed 	bl	8001b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001980:	4a06      	ldr	r2, [pc, #24]	@ (800199c <HAL_InitTick+0x5c>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	e000      	b.n	800198c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000008 	.word	0x20000008
 8001998:	20000010 	.word	0x20000010
 800199c:	2000000c 	.word	0x2000000c

080019a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a4:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <HAL_IncTick+0x20>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <HAL_IncTick+0x24>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	4a04      	ldr	r2, [pc, #16]	@ (80019c4 <HAL_IncTick+0x24>)
 80019b2:	6013      	str	r3, [r2, #0]
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000010 	.word	0x20000010
 80019c4:	200001f0 	.word	0x200001f0

080019c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return uwTick;
 80019cc:	4b03      	ldr	r3, [pc, #12]	@ (80019dc <HAL_GetTick+0x14>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	200001f0 	.word	0x200001f0

080019e0 <__NVIC_SetPriorityGrouping>:
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a12:	4a04      	ldr	r2, [pc, #16]	@ (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	60d3      	str	r3, [r2, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_GetPriorityGrouping>:
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	@ (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_SetPriority>:
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db0a      	blt.n	8001a6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	490c      	ldr	r1, [pc, #48]	@ (8001a90 <__NVIC_SetPriority+0x4c>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	0112      	lsls	r2, r2, #4
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	440b      	add	r3, r1
 8001a68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001a6c:	e00a      	b.n	8001a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4908      	ldr	r1, [pc, #32]	@ (8001a94 <__NVIC_SetPriority+0x50>)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	3b04      	subs	r3, #4
 8001a7c:	0112      	lsls	r2, r2, #4
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	440b      	add	r3, r1
 8001a82:	761a      	strb	r2, [r3, #24]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000e100 	.word	0xe000e100
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <NVIC_EncodePriority>:
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	@ 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f1c3 0307 	rsb	r3, r3, #7
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	bf28      	it	cs
 8001ab6:	2304      	movcs	r3, #4
 8001ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3304      	adds	r3, #4
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d902      	bls.n	8001ac8 <NVIC_EncodePriority+0x30>
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3b03      	subs	r3, #3
 8001ac6:	e000      	b.n	8001aca <NVIC_EncodePriority+0x32>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	401a      	ands	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43d9      	mvns	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	4313      	orrs	r3, r2
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3724      	adds	r7, #36	@ 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b10:	d301      	bcc.n	8001b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00f      	b.n	8001b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b16:	4a0a      	ldr	r2, [pc, #40]	@ (8001b40 <SysTick_Config+0x40>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1e:	210f      	movs	r1, #15
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f7ff ff8e 	bl	8001a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b28:	4b05      	ldr	r3, [pc, #20]	@ (8001b40 <SysTick_Config+0x40>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2e:	4b04      	ldr	r3, [pc, #16]	@ (8001b40 <SysTick_Config+0x40>)
 8001b30:	2207      	movs	r2, #7
 8001b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	e000e010 	.word	0xe000e010

08001b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ff47 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b6c:	f7ff ff5c 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	6978      	ldr	r0, [r7, #20]
 8001b78:	f7ff ff8e 	bl	8001a98 <NVIC_EncodePriority>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff5d 	bl	8001a44 <__NVIC_SetPriority>
}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffb0 	bl	8001b00 <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e00e      	b.n	8001bda <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	795b      	ldrb	r3, [r3, #5]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d105      	bne.n	8001bd2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff fc91 	bl	80014f4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b087      	sub	sp, #28
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	e00a      	b.n	8001c14 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	441a      	add	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	3301      	adds	r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d3f0      	bcc.n	8001bfe <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2201      	movs	r2, #1
 8001c28:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001c2a:	693b      	ldr	r3, [r7, #16]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	371c      	adds	r7, #28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001c46:	4b23      	ldr	r3, [pc, #140]	@ (8001cd4 <HAL_FLASH_Program+0x9c>)
 8001c48:	7e1b      	ldrb	r3, [r3, #24]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_FLASH_Program+0x1a>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e03b      	b.n	8001cca <HAL_FLASH_Program+0x92>
 8001c52:	4b20      	ldr	r3, [pc, #128]	@ (8001cd4 <HAL_FLASH_Program+0x9c>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c58:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001c5c:	f000 f89c 	bl	8001d98 <FLASH_WaitForLastOperation>
 8001c60:	4603      	mov	r3, r0
 8001c62:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001c64:	7dfb      	ldrb	r3, [r7, #23]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d12b      	bne.n	8001cc2 <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d105      	bne.n	8001c7c <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001c70:	783b      	ldrb	r3, [r7, #0]
 8001c72:	4619      	mov	r1, r3
 8001c74:	68b8      	ldr	r0, [r7, #8]
 8001c76:	f000 f947 	bl	8001f08 <FLASH_Program_Byte>
 8001c7a:	e016      	b.n	8001caa <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d105      	bne.n	8001c8e <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001c82:	883b      	ldrh	r3, [r7, #0]
 8001c84:	4619      	mov	r1, r3
 8001c86:	68b8      	ldr	r0, [r7, #8]
 8001c88:	f000 f91a 	bl	8001ec0 <FLASH_Program_HalfWord>
 8001c8c:	e00d      	b.n	8001caa <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d105      	bne.n	8001ca0 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	4619      	mov	r1, r3
 8001c98:	68b8      	ldr	r0, [r7, #8]
 8001c9a:	f000 f8ef 	bl	8001e7c <FLASH_Program_Word>
 8001c9e:	e004      	b.n	8001caa <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ca4:	68b8      	ldr	r0, [r7, #8]
 8001ca6:	f000 f8b7 	bl	8001e18 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001caa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001cae:	f000 f873 	bl	8001d98 <FLASH_WaitForLastOperation>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001cb6:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <HAL_FLASH_Program+0xa0>)
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	4a07      	ldr	r2, [pc, #28]	@ (8001cd8 <HAL_FLASH_Program+0xa0>)
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001cc2:	4b04      	ldr	r3, [pc, #16]	@ (8001cd4 <HAL_FLASH_Program+0x9c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	761a      	strb	r2, [r3, #24]

  return status;
 8001cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200001f4 	.word	0x200001f4
 8001cd8:	40023c00 	.word	0x40023c00

08001cdc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d14 <HAL_FLASH_Unlock+0x38>)
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	da0b      	bge.n	8001d06 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001cee:	4b09      	ldr	r3, [pc, #36]	@ (8001d14 <HAL_FLASH_Unlock+0x38>)
 8001cf0:	4a09      	ldr	r2, [pc, #36]	@ (8001d18 <HAL_FLASH_Unlock+0x3c>)
 8001cf2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001cf4:	4b07      	ldr	r3, [pc, #28]	@ (8001d14 <HAL_FLASH_Unlock+0x38>)
 8001cf6:	4a09      	ldr	r2, [pc, #36]	@ (8001d1c <HAL_FLASH_Unlock+0x40>)
 8001cf8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001cfa:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <HAL_FLASH_Unlock+0x38>)
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	da01      	bge.n	8001d06 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001d06:	79fb      	ldrb	r3, [r7, #7]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	40023c00 	.word	0x40023c00
 8001d18:	45670123 	.word	0x45670123
 8001d1c:	cdef89ab 	.word	0xcdef89ab

08001d20 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001d24:	4b05      	ldr	r3, [pc, #20]	@ (8001d3c <HAL_FLASH_Lock+0x1c>)
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	4a04      	ldr	r2, [pc, #16]	@ (8001d3c <HAL_FLASH_Lock+0x1c>)
 8001d2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001d2e:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	40023c00 	.word	0x40023c00

08001d40 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001d44:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <HAL_FLASH_OB_Unlock+0x2c>)
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d007      	beq.n	8001d60 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <HAL_FLASH_OB_Unlock+0x2c>)
 8001d52:	4a07      	ldr	r2, [pc, #28]	@ (8001d70 <HAL_FLASH_OB_Unlock+0x30>)
 8001d54:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001d56:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <HAL_FLASH_OB_Unlock+0x2c>)
 8001d58:	4a06      	ldr	r2, [pc, #24]	@ (8001d74 <HAL_FLASH_OB_Unlock+0x34>)
 8001d5a:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e000      	b.n	8001d62 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	40023c00 	.word	0x40023c00
 8001d70:	08192a3b 	.word	0x08192a3b
 8001d74:	4c5d6e7f 	.word	0x4c5d6e7f

08001d78 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001d7c:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <HAL_FLASH_OB_Lock+0x1c>)
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	4a04      	ldr	r2, [pc, #16]	@ (8001d94 <HAL_FLASH_OB_Lock+0x1c>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	40023c00 	.word	0x40023c00

08001d98 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001da4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <FLASH_WaitForLastOperation+0x78>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001daa:	f7ff fe0d 	bl	80019c8 <HAL_GetTick>
 8001dae:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001db0:	e010      	b.n	8001dd4 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db8:	d00c      	beq.n	8001dd4 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d007      	beq.n	8001dd0 <FLASH_WaitForLastOperation+0x38>
 8001dc0:	f7ff fe02 	bl	80019c8 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d201      	bcs.n	8001dd4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e019      	b.n	8001e08 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e14 <FLASH_WaitForLastOperation+0x7c>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1e8      	bne.n	8001db2 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001de0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e14 <FLASH_WaitForLastOperation+0x7c>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001dec:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <FLASH_WaitForLastOperation+0x7c>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001df2:	4b08      	ldr	r3, [pc, #32]	@ (8001e14 <FLASH_WaitForLastOperation+0x7c>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001dfe:	f000 f8a5 	bl	8001f4c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0

}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	200001f4 	.word	0x200001f4
 8001e14:	40023c00 	.word	0x40023c00

08001e18 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e24:	4b14      	ldr	r3, [pc, #80]	@ (8001e78 <FLASH_Program_DoubleWord+0x60>)
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	4a13      	ldr	r2, [pc, #76]	@ (8001e78 <FLASH_Program_DoubleWord+0x60>)
 8001e2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001e30:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <FLASH_Program_DoubleWord+0x60>)
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	4a10      	ldr	r2, [pc, #64]	@ (8001e78 <FLASH_Program_DoubleWord+0x60>)
 8001e36:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001e3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e78 <FLASH_Program_DoubleWord+0x60>)
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	4a0d      	ldr	r2, [pc, #52]	@ (8001e78 <FLASH_Program_DoubleWord+0x60>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001e4e:	f3bf 8f6f 	isb	sy
}
 8001e52:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8001e54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	000a      	movs	r2, r1
 8001e62:	2300      	movs	r3, #0
 8001e64:	68f9      	ldr	r1, [r7, #12]
 8001e66:	3104      	adds	r1, #4
 8001e68:	4613      	mov	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	40023c00 	.word	0x40023c00

08001e7c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e86:	4b0d      	ldr	r3, [pc, #52]	@ (8001ebc <FLASH_Program_Word+0x40>)
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001ebc <FLASH_Program_Word+0x40>)
 8001e8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e90:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001e92:	4b0a      	ldr	r3, [pc, #40]	@ (8001ebc <FLASH_Program_Word+0x40>)
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	4a09      	ldr	r2, [pc, #36]	@ (8001ebc <FLASH_Program_Word+0x40>)
 8001e98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e9c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e9e:	4b07      	ldr	r3, [pc, #28]	@ (8001ebc <FLASH_Program_Word+0x40>)
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	4a06      	ldr	r2, [pc, #24]	@ (8001ebc <FLASH_Program_Word+0x40>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	601a      	str	r2, [r3, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	40023c00 	.word	0x40023c00

08001ec0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8001f04 <FLASH_Program_HalfWord+0x44>)
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	4a0c      	ldr	r2, [pc, #48]	@ (8001f04 <FLASH_Program_HalfWord+0x44>)
 8001ed2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ed6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <FLASH_Program_HalfWord+0x44>)
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	4a09      	ldr	r2, [pc, #36]	@ (8001f04 <FLASH_Program_HalfWord+0x44>)
 8001ede:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ee2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ee4:	4b07      	ldr	r3, [pc, #28]	@ (8001f04 <FLASH_Program_HalfWord+0x44>)
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	4a06      	ldr	r2, [pc, #24]	@ (8001f04 <FLASH_Program_HalfWord+0x44>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	887a      	ldrh	r2, [r7, #2]
 8001ef4:	801a      	strh	r2, [r3, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40023c00 	.word	0x40023c00

08001f08 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f14:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <FLASH_Program_Byte+0x40>)
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	4a0b      	ldr	r2, [pc, #44]	@ (8001f48 <FLASH_Program_Byte+0x40>)
 8001f1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001f20:	4b09      	ldr	r3, [pc, #36]	@ (8001f48 <FLASH_Program_Byte+0x40>)
 8001f22:	4a09      	ldr	r2, [pc, #36]	@ (8001f48 <FLASH_Program_Byte+0x40>)
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f28:	4b07      	ldr	r3, [pc, #28]	@ (8001f48 <FLASH_Program_Byte+0x40>)
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	4a06      	ldr	r2, [pc, #24]	@ (8001f48 <FLASH_Program_Byte+0x40>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	78fa      	ldrb	r2, [r7, #3]
 8001f38:	701a      	strb	r2, [r3, #0]
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40023c00 	.word	0x40023c00

08001f4c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001f50:	4b2f      	ldr	r3, [pc, #188]	@ (8002010 <FLASH_SetErrorCode+0xc4>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002014 <FLASH_SetErrorCode+0xc8>)
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	f043 0310 	orr.w	r3, r3, #16
 8001f64:	4a2b      	ldr	r2, [pc, #172]	@ (8002014 <FLASH_SetErrorCode+0xc8>)
 8001f66:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001f68:	4b29      	ldr	r3, [pc, #164]	@ (8002010 <FLASH_SetErrorCode+0xc4>)
 8001f6a:	2210      	movs	r2, #16
 8001f6c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001f6e:	4b28      	ldr	r3, [pc, #160]	@ (8002010 <FLASH_SetErrorCode+0xc4>)
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d008      	beq.n	8001f8c <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001f7a:	4b26      	ldr	r3, [pc, #152]	@ (8002014 <FLASH_SetErrorCode+0xc8>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f043 0308 	orr.w	r3, r3, #8
 8001f82:	4a24      	ldr	r2, [pc, #144]	@ (8002014 <FLASH_SetErrorCode+0xc8>)
 8001f84:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001f86:	4b22      	ldr	r3, [pc, #136]	@ (8002010 <FLASH_SetErrorCode+0xc4>)
 8001f88:	2220      	movs	r2, #32
 8001f8a:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001f8c:	4b20      	ldr	r3, [pc, #128]	@ (8002010 <FLASH_SetErrorCode+0xc4>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d008      	beq.n	8001faa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001f98:	4b1e      	ldr	r3, [pc, #120]	@ (8002014 <FLASH_SetErrorCode+0xc8>)
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	f043 0304 	orr.w	r3, r3, #4
 8001fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8002014 <FLASH_SetErrorCode+0xc8>)
 8001fa2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8002010 <FLASH_SetErrorCode+0xc4>)
 8001fa6:	2240      	movs	r2, #64	@ 0x40
 8001fa8:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001faa:	4b19      	ldr	r3, [pc, #100]	@ (8002010 <FLASH_SetErrorCode+0xc4>)
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d008      	beq.n	8001fc8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001fb6:	4b17      	ldr	r3, [pc, #92]	@ (8002014 <FLASH_SetErrorCode+0xc8>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f043 0302 	orr.w	r3, r3, #2
 8001fbe:	4a15      	ldr	r2, [pc, #84]	@ (8002014 <FLASH_SetErrorCode+0xc8>)
 8001fc0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001fc2:	4b13      	ldr	r3, [pc, #76]	@ (8002010 <FLASH_SetErrorCode+0xc4>)
 8001fc4:	2280      	movs	r2, #128	@ 0x80
 8001fc6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001fc8:	4b11      	ldr	r3, [pc, #68]	@ (8002010 <FLASH_SetErrorCode+0xc4>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d009      	beq.n	8001fe8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002014 <FLASH_SetErrorCode+0xc8>)
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8002014 <FLASH_SetErrorCode+0xc8>)
 8001fde:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <FLASH_SetErrorCode+0xc4>)
 8001fe2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fe6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001fe8:	4b09      	ldr	r3, [pc, #36]	@ (8002010 <FLASH_SetErrorCode+0xc4>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d008      	beq.n	8002006 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001ff4:	4b07      	ldr	r3, [pc, #28]	@ (8002014 <FLASH_SetErrorCode+0xc8>)
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	f043 0320 	orr.w	r3, r3, #32
 8001ffc:	4a05      	ldr	r2, [pc, #20]	@ (8002014 <FLASH_SetErrorCode+0xc8>)
 8001ffe:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002000:	4b03      	ldr	r3, [pc, #12]	@ (8002010 <FLASH_SetErrorCode+0xc4>)
 8002002:	2202      	movs	r2, #2
 8002004:	60da      	str	r2, [r3, #12]
  }
}
 8002006:	bf00      	nop
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	40023c00 	.word	0x40023c00
 8002014:	200001f4 	.word	0x200001f4

08002018 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002026:	4b31      	ldr	r3, [pc, #196]	@ (80020ec <HAL_FLASHEx_Erase+0xd4>)
 8002028:	7e1b      	ldrb	r3, [r3, #24]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_FLASHEx_Erase+0x1a>
 800202e:	2302      	movs	r3, #2
 8002030:	e058      	b.n	80020e4 <HAL_FLASHEx_Erase+0xcc>
 8002032:	4b2e      	ldr	r3, [pc, #184]	@ (80020ec <HAL_FLASHEx_Erase+0xd4>)
 8002034:	2201      	movs	r2, #1
 8002036:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002038:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800203c:	f7ff feac 	bl	8001d98 <FLASH_WaitForLastOperation>
 8002040:	4603      	mov	r3, r0
 8002042:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d148      	bne.n	80020dc <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	f04f 32ff 	mov.w	r2, #4294967295
 8002050:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d115      	bne.n	8002086 <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4619      	mov	r1, r3
 8002066:	4610      	mov	r0, r2
 8002068:	f000 f868 	bl	800213c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800206c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002070:	f7ff fe92 	bl	8001d98 <FLASH_WaitForLastOperation>
 8002074:	4603      	mov	r3, r0
 8002076:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002078:	4b1d      	ldr	r3, [pc, #116]	@ (80020f0 <HAL_FLASHEx_Erase+0xd8>)
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	4a1c      	ldr	r2, [pc, #112]	@ (80020f0 <HAL_FLASHEx_Erase+0xd8>)
 800207e:	f023 0304 	bic.w	r3, r3, #4
 8002082:	6113      	str	r3, [r2, #16]
 8002084:	e028      	b.n	80020d8 <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	e01c      	b.n	80020c8 <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	b2db      	uxtb	r3, r3
 8002094:	4619      	mov	r1, r3
 8002096:	68b8      	ldr	r0, [r7, #8]
 8002098:	f000 f874 	bl	8002184 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800209c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80020a0:	f7ff fe7a 	bl	8001d98 <FLASH_WaitForLastOperation>
 80020a4:	4603      	mov	r3, r0
 80020a6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80020a8:	4b11      	ldr	r3, [pc, #68]	@ (80020f0 <HAL_FLASHEx_Erase+0xd8>)
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	4a10      	ldr	r2, [pc, #64]	@ (80020f0 <HAL_FLASHEx_Erase+0xd8>)
 80020ae:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80020b2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	601a      	str	r2, [r3, #0]
          break;
 80020c0:	e00a      	b.n	80020d8 <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	3301      	adds	r3, #1
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	4413      	add	r3, r2
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d3da      	bcc.n	800208e <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80020d8:	f000 f8e8 	bl	80022ac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80020dc:	4b03      	ldr	r3, [pc, #12]	@ (80020ec <HAL_FLASHEx_Erase+0xd4>)
 80020de:	2200      	movs	r2, #0
 80020e0:	761a      	strb	r2, [r3, #24]

  return status;
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	200001f4 	.word	0x200001f4
 80020f0:	40023c00 	.word	0x40023c00

080020f4 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	220f      	movs	r2, #15
 8002100:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8002102:	f000 f897 	bl	8002234 <FLASH_OB_GetWRP>
 8002106:	4603      	mov	r3, r0
 8002108:	461a      	mov	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800210e:	f000 f89d 	bl	800224c <FLASH_OB_GetRDP>
 8002112:	4603      	mov	r3, r0
 8002114:	461a      	mov	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800211a:	f000 f87b 	bl	8002214 <FLASH_OB_GetUser>
 800211e:	4603      	mov	r3, r0
 8002120:	461a      	mov	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8002126:	f000 f8b1 	bl	800228c <FLASH_OB_GetBOR>
 800212a:	4603      	mov	r3, r0
 800212c:	461a      	mov	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	615a      	str	r2, [r3, #20]
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002148:	4b0d      	ldr	r3, [pc, #52]	@ (8002180 <FLASH_MassErase+0x44>)
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	4a0c      	ldr	r2, [pc, #48]	@ (8002180 <FLASH_MassErase+0x44>)
 800214e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002152:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002154:	4b0a      	ldr	r3, [pc, #40]	@ (8002180 <FLASH_MassErase+0x44>)
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	4a09      	ldr	r2, [pc, #36]	@ (8002180 <FLASH_MassErase+0x44>)
 800215a:	f043 0304 	orr.w	r3, r3, #4
 800215e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002160:	4b07      	ldr	r3, [pc, #28]	@ (8002180 <FLASH_MassErase+0x44>)
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	4313      	orrs	r3, r2
 800216a:	4a05      	ldr	r2, [pc, #20]	@ (8002180 <FLASH_MassErase+0x44>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002170:	6113      	str	r3, [r2, #16]
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40023c00 	.word	0x40023c00

08002184 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d102      	bne.n	80021a0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	e010      	b.n	80021c2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d103      	bne.n	80021ae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80021a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	e009      	b.n	80021c2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d103      	bne.n	80021bc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80021b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	e002      	b.n	80021c2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80021bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80021c0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80021c2:	4b13      	ldr	r3, [pc, #76]	@ (8002210 <FLASH_Erase_Sector+0x8c>)
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	4a12      	ldr	r2, [pc, #72]	@ (8002210 <FLASH_Erase_Sector+0x8c>)
 80021c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80021ce:	4b10      	ldr	r3, [pc, #64]	@ (8002210 <FLASH_Erase_Sector+0x8c>)
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	490f      	ldr	r1, [pc, #60]	@ (8002210 <FLASH_Erase_Sector+0x8c>)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80021da:	4b0d      	ldr	r3, [pc, #52]	@ (8002210 <FLASH_Erase_Sector+0x8c>)
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	4a0c      	ldr	r2, [pc, #48]	@ (8002210 <FLASH_Erase_Sector+0x8c>)
 80021e0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80021e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80021e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002210 <FLASH_Erase_Sector+0x8c>)
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4313      	orrs	r3, r2
 80021f0:	4a07      	ldr	r2, [pc, #28]	@ (8002210 <FLASH_Erase_Sector+0x8c>)
 80021f2:	f043 0302 	orr.w	r3, r3, #2
 80021f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80021f8:	4b05      	ldr	r3, [pc, #20]	@ (8002210 <FLASH_Erase_Sector+0x8c>)
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	4a04      	ldr	r2, [pc, #16]	@ (8002210 <FLASH_Erase_Sector+0x8c>)
 80021fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002202:	6113      	str	r3, [r2, #16]
}
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	40023c00 	.word	0x40023c00

08002214 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8002218:	4b05      	ldr	r3, [pc, #20]	@ (8002230 <FLASH_OB_GetUser+0x1c>)
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	b2db      	uxtb	r3, r3
 800221e:	f023 031f 	bic.w	r3, r3, #31
 8002222:	b2db      	uxtb	r3, r3
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40023c00 	.word	0x40023c00

08002234 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8002238:	4b03      	ldr	r3, [pc, #12]	@ (8002248 <FLASH_OB_GetWRP+0x14>)
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	b29b      	uxth	r3, r3
}
 800223e:	4618      	mov	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	40023c16 	.word	0x40023c16

0800224c <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8002252:	23aa      	movs	r3, #170	@ 0xaa
 8002254:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 8002256:	4b0c      	ldr	r3, [pc, #48]	@ (8002288 <FLASH_OB_GetRDP+0x3c>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2bcc      	cmp	r3, #204	@ 0xcc
 800225e:	d102      	bne.n	8002266 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8002260:	23cc      	movs	r3, #204	@ 0xcc
 8002262:	71fb      	strb	r3, [r7, #7]
 8002264:	e009      	b.n	800227a <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 8002266:	4b08      	ldr	r3, [pc, #32]	@ (8002288 <FLASH_OB_GetRDP+0x3c>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2baa      	cmp	r3, #170	@ 0xaa
 800226e:	d102      	bne.n	8002276 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8002270:	23aa      	movs	r3, #170	@ 0xaa
 8002272:	71fb      	strb	r3, [r7, #7]
 8002274:	e001      	b.n	800227a <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 8002276:	2355      	movs	r3, #85	@ 0x55
 8002278:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 800227a:	79fb      	ldrb	r3, [r7, #7]
}
 800227c:	4618      	mov	r0, r3
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40023c15 	.word	0x40023c15

0800228c <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8002290:	4b05      	ldr	r3, [pc, #20]	@ (80022a8 <FLASH_OB_GetBOR+0x1c>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	b2db      	uxtb	r3, r3
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40023c14 	.word	0x40023c14

080022ac <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80022b0:	4b20      	ldr	r3, [pc, #128]	@ (8002334 <FLASH_FlushCaches+0x88>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d017      	beq.n	80022ec <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80022bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002334 <FLASH_FlushCaches+0x88>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002334 <FLASH_FlushCaches+0x88>)
 80022c2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80022c6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80022c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002334 <FLASH_FlushCaches+0x88>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a19      	ldr	r2, [pc, #100]	@ (8002334 <FLASH_FlushCaches+0x88>)
 80022ce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b17      	ldr	r3, [pc, #92]	@ (8002334 <FLASH_FlushCaches+0x88>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a16      	ldr	r2, [pc, #88]	@ (8002334 <FLASH_FlushCaches+0x88>)
 80022da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80022de:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022e0:	4b14      	ldr	r3, [pc, #80]	@ (8002334 <FLASH_FlushCaches+0x88>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a13      	ldr	r2, [pc, #76]	@ (8002334 <FLASH_FlushCaches+0x88>)
 80022e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022ea:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80022ec:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <FLASH_FlushCaches+0x88>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d017      	beq.n	8002328 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80022f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002334 <FLASH_FlushCaches+0x88>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002334 <FLASH_FlushCaches+0x88>)
 80022fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002302:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002304:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <FLASH_FlushCaches+0x88>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a0a      	ldr	r2, [pc, #40]	@ (8002334 <FLASH_FlushCaches+0x88>)
 800230a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	4b08      	ldr	r3, [pc, #32]	@ (8002334 <FLASH_FlushCaches+0x88>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a07      	ldr	r2, [pc, #28]	@ (8002334 <FLASH_FlushCaches+0x88>)
 8002316:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800231a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800231c:	4b05      	ldr	r3, [pc, #20]	@ (8002334 <FLASH_FlushCaches+0x88>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a04      	ldr	r2, [pc, #16]	@ (8002334 <FLASH_FlushCaches+0x88>)
 8002322:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002326:	6013      	str	r3, [r2, #0]
  }
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40023c00 	.word	0x40023c00

08002338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	@ 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800234a:	2300      	movs	r3, #0
 800234c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	e165      	b.n	8002620 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002354:	2201      	movs	r2, #1
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	429a      	cmp	r2, r3
 800236e:	f040 8154 	bne.w	800261a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b01      	cmp	r3, #1
 800237c:	d005      	beq.n	800238a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002386:	2b02      	cmp	r3, #2
 8002388:	d130      	bne.n	80023ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	2203      	movs	r2, #3
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023c0:	2201      	movs	r2, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f003 0201 	and.w	r2, r3, #1
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d017      	beq.n	8002428 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	2203      	movs	r2, #3
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d123      	bne.n	800247c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	08da      	lsrs	r2, r3, #3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3208      	adds	r2, #8
 800243c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	220f      	movs	r2, #15
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	08da      	lsrs	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3208      	adds	r2, #8
 8002476:	69b9      	ldr	r1, [r7, #24]
 8002478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	2203      	movs	r2, #3
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0203 	and.w	r2, r3, #3
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80ae 	beq.w	800261a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002638 <HAL_GPIO_Init+0x300>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c6:	4a5c      	ldr	r2, [pc, #368]	@ (8002638 <HAL_GPIO_Init+0x300>)
 80024c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ce:	4b5a      	ldr	r3, [pc, #360]	@ (8002638 <HAL_GPIO_Init+0x300>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024da:	4a58      	ldr	r2, [pc, #352]	@ (800263c <HAL_GPIO_Init+0x304>)
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	089b      	lsrs	r3, r3, #2
 80024e0:	3302      	adds	r3, #2
 80024e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	220f      	movs	r2, #15
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a4f      	ldr	r2, [pc, #316]	@ (8002640 <HAL_GPIO_Init+0x308>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d025      	beq.n	8002552 <HAL_GPIO_Init+0x21a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a4e      	ldr	r2, [pc, #312]	@ (8002644 <HAL_GPIO_Init+0x30c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d01f      	beq.n	800254e <HAL_GPIO_Init+0x216>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a4d      	ldr	r2, [pc, #308]	@ (8002648 <HAL_GPIO_Init+0x310>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d019      	beq.n	800254a <HAL_GPIO_Init+0x212>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a4c      	ldr	r2, [pc, #304]	@ (800264c <HAL_GPIO_Init+0x314>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d013      	beq.n	8002546 <HAL_GPIO_Init+0x20e>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a4b      	ldr	r2, [pc, #300]	@ (8002650 <HAL_GPIO_Init+0x318>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00d      	beq.n	8002542 <HAL_GPIO_Init+0x20a>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a4a      	ldr	r2, [pc, #296]	@ (8002654 <HAL_GPIO_Init+0x31c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d007      	beq.n	800253e <HAL_GPIO_Init+0x206>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a49      	ldr	r2, [pc, #292]	@ (8002658 <HAL_GPIO_Init+0x320>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d101      	bne.n	800253a <HAL_GPIO_Init+0x202>
 8002536:	2306      	movs	r3, #6
 8002538:	e00c      	b.n	8002554 <HAL_GPIO_Init+0x21c>
 800253a:	2307      	movs	r3, #7
 800253c:	e00a      	b.n	8002554 <HAL_GPIO_Init+0x21c>
 800253e:	2305      	movs	r3, #5
 8002540:	e008      	b.n	8002554 <HAL_GPIO_Init+0x21c>
 8002542:	2304      	movs	r3, #4
 8002544:	e006      	b.n	8002554 <HAL_GPIO_Init+0x21c>
 8002546:	2303      	movs	r3, #3
 8002548:	e004      	b.n	8002554 <HAL_GPIO_Init+0x21c>
 800254a:	2302      	movs	r3, #2
 800254c:	e002      	b.n	8002554 <HAL_GPIO_Init+0x21c>
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <HAL_GPIO_Init+0x21c>
 8002552:	2300      	movs	r3, #0
 8002554:	69fa      	ldr	r2, [r7, #28]
 8002556:	f002 0203 	and.w	r2, r2, #3
 800255a:	0092      	lsls	r2, r2, #2
 800255c:	4093      	lsls	r3, r2
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002564:	4935      	ldr	r1, [pc, #212]	@ (800263c <HAL_GPIO_Init+0x304>)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	089b      	lsrs	r3, r3, #2
 800256a:	3302      	adds	r3, #2
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002572:	4b3a      	ldr	r3, [pc, #232]	@ (800265c <HAL_GPIO_Init+0x324>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002596:	4a31      	ldr	r2, [pc, #196]	@ (800265c <HAL_GPIO_Init+0x324>)
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800259c:	4b2f      	ldr	r3, [pc, #188]	@ (800265c <HAL_GPIO_Init+0x324>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025c0:	4a26      	ldr	r2, [pc, #152]	@ (800265c <HAL_GPIO_Init+0x324>)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025c6:	4b25      	ldr	r3, [pc, #148]	@ (800265c <HAL_GPIO_Init+0x324>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ea:	4a1c      	ldr	r2, [pc, #112]	@ (800265c <HAL_GPIO_Init+0x324>)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025f0:	4b1a      	ldr	r3, [pc, #104]	@ (800265c <HAL_GPIO_Init+0x324>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002614:	4a11      	ldr	r2, [pc, #68]	@ (800265c <HAL_GPIO_Init+0x324>)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3301      	adds	r3, #1
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	2b0f      	cmp	r3, #15
 8002624:	f67f ae96 	bls.w	8002354 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	3724      	adds	r7, #36	@ 0x24
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800
 800263c:	40013800 	.word	0x40013800
 8002640:	40020000 	.word	0x40020000
 8002644:	40020400 	.word	0x40020400
 8002648:	40020800 	.word	0x40020800
 800264c:	40020c00 	.word	0x40020c00
 8002650:	40021000 	.word	0x40021000
 8002654:	40021400 	.word	0x40021400
 8002658:	40021800 	.word	0x40021800
 800265c:	40013c00 	.word	0x40013c00

08002660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	807b      	strh	r3, [r7, #2]
 800266c:	4613      	mov	r3, r2
 800266e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002670:	787b      	ldrb	r3, [r7, #1]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002676:	887a      	ldrh	r2, [r7, #2]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800267c:	e003      	b.n	8002686 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800267e:	887b      	ldrh	r3, [r7, #2]
 8002680:	041a      	lsls	r2, r3, #16
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	619a      	str	r2, [r3, #24]
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0cc      	b.n	8002842 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026a8:	4b68      	ldr	r3, [pc, #416]	@ (800284c <HAL_RCC_ClockConfig+0x1b8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d90c      	bls.n	80026d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b6:	4b65      	ldr	r3, [pc, #404]	@ (800284c <HAL_RCC_ClockConfig+0x1b8>)
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026be:	4b63      	ldr	r3, [pc, #396]	@ (800284c <HAL_RCC_ClockConfig+0x1b8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0b8      	b.n	8002842 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d020      	beq.n	800271e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e8:	4b59      	ldr	r3, [pc, #356]	@ (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	4a58      	ldr	r2, [pc, #352]	@ (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002700:	4b53      	ldr	r3, [pc, #332]	@ (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	4a52      	ldr	r2, [pc, #328]	@ (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800270a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800270c:	4b50      	ldr	r3, [pc, #320]	@ (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	494d      	ldr	r1, [pc, #308]	@ (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	4313      	orrs	r3, r2
 800271c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d044      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d107      	bne.n	8002742 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002732:	4b47      	ldr	r3, [pc, #284]	@ (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d119      	bne.n	8002772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e07f      	b.n	8002842 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d003      	beq.n	8002752 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800274e:	2b03      	cmp	r3, #3
 8002750:	d107      	bne.n	8002762 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002752:	4b3f      	ldr	r3, [pc, #252]	@ (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d109      	bne.n	8002772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e06f      	b.n	8002842 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002762:	4b3b      	ldr	r3, [pc, #236]	@ (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e067      	b.n	8002842 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002772:	4b37      	ldr	r3, [pc, #220]	@ (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f023 0203 	bic.w	r2, r3, #3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4934      	ldr	r1, [pc, #208]	@ (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	4313      	orrs	r3, r2
 8002782:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002784:	f7ff f920 	bl	80019c8 <HAL_GetTick>
 8002788:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278a:	e00a      	b.n	80027a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800278c:	f7ff f91c 	bl	80019c8 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279a:	4293      	cmp	r3, r2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e04f      	b.n	8002842 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 020c 	and.w	r2, r3, #12
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d1eb      	bne.n	800278c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027b4:	4b25      	ldr	r3, [pc, #148]	@ (800284c <HAL_RCC_ClockConfig+0x1b8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 030f 	and.w	r3, r3, #15
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d20c      	bcs.n	80027dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c2:	4b22      	ldr	r3, [pc, #136]	@ (800284c <HAL_RCC_ClockConfig+0x1b8>)
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ca:	4b20      	ldr	r3, [pc, #128]	@ (800284c <HAL_RCC_ClockConfig+0x1b8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e032      	b.n	8002842 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e8:	4b19      	ldr	r3, [pc, #100]	@ (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4916      	ldr	r1, [pc, #88]	@ (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d009      	beq.n	800281a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002806:	4b12      	ldr	r3, [pc, #72]	@ (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	490e      	ldr	r1, [pc, #56]	@ (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002816:	4313      	orrs	r3, r2
 8002818:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800281a:	f000 f855 	bl	80028c8 <HAL_RCC_GetSysClockFreq>
 800281e:	4602      	mov	r2, r0
 8002820:	4b0b      	ldr	r3, [pc, #44]	@ (8002850 <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	091b      	lsrs	r3, r3, #4
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	490a      	ldr	r1, [pc, #40]	@ (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 800282c:	5ccb      	ldrb	r3, [r1, r3]
 800282e:	fa22 f303 	lsr.w	r3, r2, r3
 8002832:	4a09      	ldr	r2, [pc, #36]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 8002834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002836:	4b09      	ldr	r3, [pc, #36]	@ (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff f880 	bl	8001940 <HAL_InitTick>

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40023c00 	.word	0x40023c00
 8002850:	40023800 	.word	0x40023800
 8002854:	0800502c 	.word	0x0800502c
 8002858:	20000008 	.word	0x20000008
 800285c:	2000000c 	.word	0x2000000c

08002860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002864:	4b03      	ldr	r3, [pc, #12]	@ (8002874 <HAL_RCC_GetHCLKFreq+0x14>)
 8002866:	681b      	ldr	r3, [r3, #0]
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	20000008 	.word	0x20000008

08002878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800287c:	f7ff fff0 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b05      	ldr	r3, [pc, #20]	@ (8002898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	0a9b      	lsrs	r3, r3, #10
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	4903      	ldr	r1, [pc, #12]	@ (800289c <HAL_RCC_GetPCLK1Freq+0x24>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002894:	4618      	mov	r0, r3
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40023800 	.word	0x40023800
 800289c:	0800503c 	.word	0x0800503c

080028a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028a4:	f7ff ffdc 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	0b5b      	lsrs	r3, r3, #13
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	4903      	ldr	r1, [pc, #12]	@ (80028c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b6:	5ccb      	ldrb	r3, [r1, r3]
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028bc:	4618      	mov	r0, r3
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40023800 	.word	0x40023800
 80028c4:	0800503c 	.word	0x0800503c

080028c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028cc:	b0a6      	sub	sp, #152	@ 0x98
 80028ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028ee:	4bc8      	ldr	r3, [pc, #800]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x348>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 030c 	and.w	r3, r3, #12
 80028f6:	2b0c      	cmp	r3, #12
 80028f8:	f200 817e 	bhi.w	8002bf8 <HAL_RCC_GetSysClockFreq+0x330>
 80028fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002904 <HAL_RCC_GetSysClockFreq+0x3c>)
 80028fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002902:	bf00      	nop
 8002904:	08002939 	.word	0x08002939
 8002908:	08002bf9 	.word	0x08002bf9
 800290c:	08002bf9 	.word	0x08002bf9
 8002910:	08002bf9 	.word	0x08002bf9
 8002914:	08002941 	.word	0x08002941
 8002918:	08002bf9 	.word	0x08002bf9
 800291c:	08002bf9 	.word	0x08002bf9
 8002920:	08002bf9 	.word	0x08002bf9
 8002924:	08002949 	.word	0x08002949
 8002928:	08002bf9 	.word	0x08002bf9
 800292c:	08002bf9 	.word	0x08002bf9
 8002930:	08002bf9 	.word	0x08002bf9
 8002934:	08002ab3 	.word	0x08002ab3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002938:	4bb6      	ldr	r3, [pc, #728]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0x34c>)
 800293a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800293e:	e15f      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002940:	4bb5      	ldr	r3, [pc, #724]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x350>)
 8002942:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002946:	e15b      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002948:	4bb1      	ldr	r3, [pc, #708]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x348>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002950:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002954:	4bae      	ldr	r3, [pc, #696]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x348>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d031      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002960:	4bab      	ldr	r3, [pc, #684]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x348>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	099b      	lsrs	r3, r3, #6
 8002966:	2200      	movs	r2, #0
 8002968:	66bb      	str	r3, [r7, #104]	@ 0x68
 800296a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800296c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800296e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002972:	663b      	str	r3, [r7, #96]	@ 0x60
 8002974:	2300      	movs	r3, #0
 8002976:	667b      	str	r3, [r7, #100]	@ 0x64
 8002978:	4ba7      	ldr	r3, [pc, #668]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x350>)
 800297a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800297e:	462a      	mov	r2, r5
 8002980:	fb03 f202 	mul.w	r2, r3, r2
 8002984:	2300      	movs	r3, #0
 8002986:	4621      	mov	r1, r4
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	4aa2      	ldr	r2, [pc, #648]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x350>)
 8002990:	4621      	mov	r1, r4
 8002992:	fba1 1202 	umull	r1, r2, r1, r2
 8002996:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002998:	460a      	mov	r2, r1
 800299a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800299c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800299e:	4413      	add	r3, r2
 80029a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80029a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029a6:	2200      	movs	r2, #0
 80029a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80029aa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80029ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029b0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80029b4:	f7fd fc7c 	bl	80002b0 <__aeabi_uldivmod>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4613      	mov	r3, r2
 80029be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80029c2:	e064      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c4:	4b92      	ldr	r3, [pc, #584]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x348>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	099b      	lsrs	r3, r3, #6
 80029ca:	2200      	movs	r2, #0
 80029cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80029ce:	657a      	str	r2, [r7, #84]	@ 0x54
 80029d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029d8:	2300      	movs	r3, #0
 80029da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029dc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80029e0:	4622      	mov	r2, r4
 80029e2:	462b      	mov	r3, r5
 80029e4:	f04f 0000 	mov.w	r0, #0
 80029e8:	f04f 0100 	mov.w	r1, #0
 80029ec:	0159      	lsls	r1, r3, #5
 80029ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029f2:	0150      	lsls	r0, r2, #5
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4621      	mov	r1, r4
 80029fa:	1a51      	subs	r1, r2, r1
 80029fc:	6139      	str	r1, [r7, #16]
 80029fe:	4629      	mov	r1, r5
 8002a00:	eb63 0301 	sbc.w	r3, r3, r1
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a12:	4659      	mov	r1, fp
 8002a14:	018b      	lsls	r3, r1, #6
 8002a16:	4651      	mov	r1, sl
 8002a18:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a1c:	4651      	mov	r1, sl
 8002a1e:	018a      	lsls	r2, r1, #6
 8002a20:	4651      	mov	r1, sl
 8002a22:	ebb2 0801 	subs.w	r8, r2, r1
 8002a26:	4659      	mov	r1, fp
 8002a28:	eb63 0901 	sbc.w	r9, r3, r1
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a40:	4690      	mov	r8, r2
 8002a42:	4699      	mov	r9, r3
 8002a44:	4623      	mov	r3, r4
 8002a46:	eb18 0303 	adds.w	r3, r8, r3
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	462b      	mov	r3, r5
 8002a4e:	eb49 0303 	adc.w	r3, r9, r3
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a60:	4629      	mov	r1, r5
 8002a62:	028b      	lsls	r3, r1, #10
 8002a64:	4621      	mov	r1, r4
 8002a66:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	028a      	lsls	r2, r1, #10
 8002a6e:	4610      	mov	r0, r2
 8002a70:	4619      	mov	r1, r3
 8002a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a76:	2200      	movs	r2, #0
 8002a78:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a7a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002a7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a80:	f7fd fc16 	bl	80002b0 <__aeabi_uldivmod>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4613      	mov	r3, r2
 8002a8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a8e:	4b60      	ldr	r3, [pc, #384]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	0c1b      	lsrs	r3, r3, #16
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	3301      	adds	r3, #1
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002aa0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002aa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002ab0:	e0a6      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ab2:	4b57      	ldr	r3, [pc, #348]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002aba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002abe:	4b54      	ldr	r3, [pc, #336]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d02a      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aca:	4b51      	ldr	r3, [pc, #324]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x348>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	099b      	lsrs	r3, r3, #6
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ad4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002adc:	2100      	movs	r1, #0
 8002ade:	4b4e      	ldr	r3, [pc, #312]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x350>)
 8002ae0:	fb03 f201 	mul.w	r2, r3, r1
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	fb00 f303 	mul.w	r3, r0, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	4a4a      	ldr	r2, [pc, #296]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x350>)
 8002aee:	fba0 1202 	umull	r1, r2, r0, r2
 8002af2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002af4:	460a      	mov	r2, r1
 8002af6:	673a      	str	r2, [r7, #112]	@ 0x70
 8002af8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002afa:	4413      	add	r3, r2
 8002afc:	677b      	str	r3, [r7, #116]	@ 0x74
 8002afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b02:	2200      	movs	r2, #0
 8002b04:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b06:	637a      	str	r2, [r7, #52]	@ 0x34
 8002b08:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002b0c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002b10:	f7fd fbce 	bl	80002b0 <__aeabi_uldivmod>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4613      	mov	r3, r2
 8002b1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b1e:	e05b      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b20:	4b3b      	ldr	r3, [pc, #236]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	099b      	lsrs	r3, r3, #6
 8002b26:	2200      	movs	r2, #0
 8002b28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b32:	623b      	str	r3, [r7, #32]
 8002b34:	2300      	movs	r3, #0
 8002b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b3c:	4642      	mov	r2, r8
 8002b3e:	464b      	mov	r3, r9
 8002b40:	f04f 0000 	mov.w	r0, #0
 8002b44:	f04f 0100 	mov.w	r1, #0
 8002b48:	0159      	lsls	r1, r3, #5
 8002b4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b4e:	0150      	lsls	r0, r2, #5
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4641      	mov	r1, r8
 8002b56:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b5a:	4649      	mov	r1, r9
 8002b5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b74:	ebb2 040a 	subs.w	r4, r2, sl
 8002b78:	eb63 050b 	sbc.w	r5, r3, fp
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	00eb      	lsls	r3, r5, #3
 8002b86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b8a:	00e2      	lsls	r2, r4, #3
 8002b8c:	4614      	mov	r4, r2
 8002b8e:	461d      	mov	r5, r3
 8002b90:	4643      	mov	r3, r8
 8002b92:	18e3      	adds	r3, r4, r3
 8002b94:	603b      	str	r3, [r7, #0]
 8002b96:	464b      	mov	r3, r9
 8002b98:	eb45 0303 	adc.w	r3, r5, r3
 8002b9c:	607b      	str	r3, [r7, #4]
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002baa:	4629      	mov	r1, r5
 8002bac:	028b      	lsls	r3, r1, #10
 8002bae:	4621      	mov	r1, r4
 8002bb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	028a      	lsls	r2, r1, #10
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	61bb      	str	r3, [r7, #24]
 8002bc4:	61fa      	str	r2, [r7, #28]
 8002bc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bca:	f7fd fb71 	bl	80002b0 <__aeabi_uldivmod>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	0f1b      	lsrs	r3, r3, #28
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002be6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002bea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002bf6:	e003      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bf8:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002bfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002bfe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3798      	adds	r7, #152	@ 0x98
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023800 	.word	0x40023800
 8002c14:	00f42400 	.word	0x00f42400
 8002c18:	017d7840 	.word	0x017d7840

08002c1c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002c22:	f7fe fed1 	bl	80019c8 <HAL_GetTick>
 8002c26:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002c28:	4b72      	ldr	r3, [pc, #456]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a71      	ldr	r2, [pc, #452]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c36:	f7fe fec7 	bl	80019c8 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e0d0      	b.n	8002dea <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002c48:	4b6a      	ldr	r3, [pc, #424]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002c54:	4b67      	ldr	r3, [pc, #412]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a66      	ldr	r2, [pc, #408]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c5e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002c60:	f7fe feb2 	bl	80019c8 <HAL_GetTick>
 8002c64:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002c66:	4b63      	ldr	r3, [pc, #396]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002c6c:	e00a      	b.n	8002c84 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c6e:	f7fe feab 	bl	80019c8 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e0b2      	b.n	8002dea <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002c84:	4b5b      	ldr	r3, [pc, #364]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 030c 	and.w	r3, r3, #12
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1ee      	bne.n	8002c6e <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002c90:	f7fe fe9a 	bl	80019c8 <HAL_GetTick>
 8002c94:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8002c96:	4b57      	ldr	r3, [pc, #348]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a56      	ldr	r2, [pc, #344]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002c9c:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8002ca0:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca4:	f7fe fe90 	bl	80019c8 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	@ 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e099      	b.n	8002dea <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002cb6:	4b4f      	ldr	r3, [pc, #316]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002cc2:	f7fe fe81 	bl	80019c8 <HAL_GetTick>
 8002cc6:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002cc8:	4b4a      	ldr	r3, [pc, #296]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a49      	ldr	r2, [pc, #292]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002cce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cd2:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd6:	f7fe fe77 	bl	80019c8 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e080      	b.n	8002dea <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002ce8:	4b42      	ldr	r3, [pc, #264]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f0      	bne.n	8002cd6 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002cf4:	f7fe fe68 	bl	80019c8 <HAL_GetTick>
 8002cf8:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002cfa:	4b3e      	ldr	r3, [pc, #248]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a3d      	ldr	r2, [pc, #244]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002d00:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002d04:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d08:	f7fe fe5e 	bl	80019c8 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e067      	b.n	8002dea <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002d1a:	4b36      	ldr	r3, [pc, #216]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002d26:	f7fe fe4f 	bl	80019c8 <HAL_GetTick>
 8002d2a:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8002d2c:	4b31      	ldr	r3, [pc, #196]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a30      	ldr	r2, [pc, #192]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002d32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d36:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d3a:	f7fe fe45 	bl	80019c8 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e04e      	b.n	8002dea <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002d4c:	4b29      	ldr	r3, [pc, #164]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f0      	bne.n	8002d3a <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 8002d58:	4b26      	ldr	r3, [pc, #152]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002d5a:	4a27      	ldr	r2, [pc, #156]	@ (8002df8 <HAL_RCC_DeInit+0x1dc>)
 8002d5c:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002d5e:	4b25      	ldr	r3, [pc, #148]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002d60:	4a25      	ldr	r2, [pc, #148]	@ (8002df8 <HAL_RCC_DeInit+0x1dc>)
 8002d62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 8002d66:	4b23      	ldr	r3, [pc, #140]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002d68:	4a24      	ldr	r2, [pc, #144]	@ (8002dfc <HAL_RCC_DeInit+0x1e0>)
 8002d6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002d6e:	4b21      	ldr	r3, [pc, #132]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	4a20      	ldr	r2, [pc, #128]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002d74:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8002d78:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	4a1d      	ldr	r2, [pc, #116]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002d80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d84:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8002d86:	4b1b      	ldr	r3, [pc, #108]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	4a1a      	ldr	r2, [pc, #104]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002d8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d90:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 8002d92:	4b18      	ldr	r3, [pc, #96]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	4a17      	ldr	r2, [pc, #92]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002d98:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 8002d9c:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002d9e:	4b15      	ldr	r3, [pc, #84]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	4a14      	ldr	r2, [pc, #80]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002da4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002da8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8002daa:	4b12      	ldr	r3, [pc, #72]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	4a11      	ldr	r2, [pc, #68]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002db0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002db4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002db6:	4b0f      	ldr	r3, [pc, #60]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dba:	4a0e      	ldr	r2, [pc, #56]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dc6:	4a0b      	ldr	r2, [pc, #44]	@ (8002df4 <HAL_RCC_DeInit+0x1d8>)
 8002dc8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dcc:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002dce:	4b0c      	ldr	r3, [pc, #48]	@ (8002e00 <HAL_RCC_DeInit+0x1e4>)
 8002dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8002e04 <HAL_RCC_DeInit+0x1e8>)
 8002dd2:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002e08 <HAL_RCC_DeInit+0x1ec>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe fdb1 	bl	8001940 <HAL_InitTick>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8002de8:	2300      	movs	r3, #0
  }
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800
 8002df8:	24003010 	.word	0x24003010
 8002dfc:	04003010 	.word	0x04003010
 8002e00:	20000008 	.word	0x20000008
 8002e04:	00f42400 	.word	0x00f42400
 8002e08:	2000000c 	.word	0x2000000c

08002e0c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e28d      	b.n	800333a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 8083 	beq.w	8002f32 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e2c:	4b94      	ldr	r3, [pc, #592]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 030c 	and.w	r3, r3, #12
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d019      	beq.n	8002e6c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e38:	4b91      	ldr	r3, [pc, #580]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d106      	bne.n	8002e52 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e44:	4b8e      	ldr	r3, [pc, #568]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e50:	d00c      	beq.n	8002e6c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e52:	4b8b      	ldr	r3, [pc, #556]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e5a:	2b0c      	cmp	r3, #12
 8002e5c:	d112      	bne.n	8002e84 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e5e:	4b88      	ldr	r3, [pc, #544]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e6a:	d10b      	bne.n	8002e84 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6c:	4b84      	ldr	r3, [pc, #528]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d05b      	beq.n	8002f30 <HAL_RCC_OscConfig+0x124>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d157      	bne.n	8002f30 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e25a      	b.n	800333a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e8c:	d106      	bne.n	8002e9c <HAL_RCC_OscConfig+0x90>
 8002e8e:	4b7c      	ldr	r3, [pc, #496]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a7b      	ldr	r2, [pc, #492]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	e01d      	b.n	8002ed8 <HAL_RCC_OscConfig+0xcc>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0xb4>
 8002ea6:	4b76      	ldr	r3, [pc, #472]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a75      	ldr	r2, [pc, #468]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002eac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	4b73      	ldr	r3, [pc, #460]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a72      	ldr	r2, [pc, #456]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	e00b      	b.n	8002ed8 <HAL_RCC_OscConfig+0xcc>
 8002ec0:	4b6f      	ldr	r3, [pc, #444]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a6e      	ldr	r2, [pc, #440]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002ec6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	4b6c      	ldr	r3, [pc, #432]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a6b      	ldr	r2, [pc, #428]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002ed2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d013      	beq.n	8002f08 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7fe fd72 	bl	80019c8 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee8:	f7fe fd6e 	bl	80019c8 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	@ 0x64
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e21f      	b.n	800333a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efa:	4b61      	ldr	r3, [pc, #388]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0xdc>
 8002f06:	e014      	b.n	8002f32 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f08:	f7fe fd5e 	bl	80019c8 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f10:	f7fe fd5a 	bl	80019c8 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b64      	cmp	r3, #100	@ 0x64
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e20b      	b.n	800333a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f22:	4b57      	ldr	r3, [pc, #348]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x104>
 8002f2e:	e000      	b.n	8002f32 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d06f      	beq.n	800301e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f3e:	4b50      	ldr	r3, [pc, #320]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d017      	beq.n	8002f7a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f4a:	4b4d      	ldr	r3, [pc, #308]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d105      	bne.n	8002f62 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f56:	4b4a      	ldr	r3, [pc, #296]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00b      	beq.n	8002f7a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f62:	4b47      	ldr	r3, [pc, #284]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f6a:	2b0c      	cmp	r3, #12
 8002f6c:	d11c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f6e:	4b44      	ldr	r3, [pc, #272]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d116      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7a:	4b41      	ldr	r3, [pc, #260]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <HAL_RCC_OscConfig+0x186>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d001      	beq.n	8002f92 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e1d3      	b.n	800333a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f92:	4b3b      	ldr	r3, [pc, #236]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	4937      	ldr	r1, [pc, #220]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa6:	e03a      	b.n	800301e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d020      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fb0:	4b34      	ldr	r3, [pc, #208]	@ (8003084 <HAL_RCC_OscConfig+0x278>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb6:	f7fe fd07 	bl	80019c8 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fbe:	f7fe fd03 	bl	80019c8 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e1b4      	b.n	800333a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd0:	4b2b      	ldr	r3, [pc, #172]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fdc:	4b28      	ldr	r3, [pc, #160]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4925      	ldr	r1, [pc, #148]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	600b      	str	r3, [r1, #0]
 8002ff0:	e015      	b.n	800301e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ff2:	4b24      	ldr	r3, [pc, #144]	@ (8003084 <HAL_RCC_OscConfig+0x278>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fce6 	bl	80019c8 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003000:	f7fe fce2 	bl	80019c8 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e193      	b.n	800333a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003012:	4b1b      	ldr	r3, [pc, #108]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d036      	beq.n	8003098 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d016      	beq.n	8003060 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003032:	4b15      	ldr	r3, [pc, #84]	@ (8003088 <HAL_RCC_OscConfig+0x27c>)
 8003034:	2201      	movs	r2, #1
 8003036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003038:	f7fe fcc6 	bl	80019c8 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003040:	f7fe fcc2 	bl	80019c8 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e173      	b.n	800333a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003052:	4b0b      	ldr	r3, [pc, #44]	@ (8003080 <HAL_RCC_OscConfig+0x274>)
 8003054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0x234>
 800305e:	e01b      	b.n	8003098 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003060:	4b09      	ldr	r3, [pc, #36]	@ (8003088 <HAL_RCC_OscConfig+0x27c>)
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003066:	f7fe fcaf 	bl	80019c8 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800306c:	e00e      	b.n	800308c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800306e:	f7fe fcab 	bl	80019c8 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d907      	bls.n	800308c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e15c      	b.n	800333a <HAL_RCC_OscConfig+0x52e>
 8003080:	40023800 	.word	0x40023800
 8003084:	42470000 	.word	0x42470000
 8003088:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800308c:	4b8a      	ldr	r3, [pc, #552]	@ (80032b8 <HAL_RCC_OscConfig+0x4ac>)
 800308e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1ea      	bne.n	800306e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 8097 	beq.w	80031d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030a6:	2300      	movs	r3, #0
 80030a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030aa:	4b83      	ldr	r3, [pc, #524]	@ (80032b8 <HAL_RCC_OscConfig+0x4ac>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10f      	bne.n	80030d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	4b7f      	ldr	r3, [pc, #508]	@ (80032b8 <HAL_RCC_OscConfig+0x4ac>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030be:	4a7e      	ldr	r2, [pc, #504]	@ (80032b8 <HAL_RCC_OscConfig+0x4ac>)
 80030c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030c6:	4b7c      	ldr	r3, [pc, #496]	@ (80032b8 <HAL_RCC_OscConfig+0x4ac>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d2:	2301      	movs	r3, #1
 80030d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d6:	4b79      	ldr	r3, [pc, #484]	@ (80032bc <HAL_RCC_OscConfig+0x4b0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d118      	bne.n	8003114 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030e2:	4b76      	ldr	r3, [pc, #472]	@ (80032bc <HAL_RCC_OscConfig+0x4b0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a75      	ldr	r2, [pc, #468]	@ (80032bc <HAL_RCC_OscConfig+0x4b0>)
 80030e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ee:	f7fe fc6b 	bl	80019c8 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f6:	f7fe fc67 	bl	80019c8 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e118      	b.n	800333a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003108:	4b6c      	ldr	r3, [pc, #432]	@ (80032bc <HAL_RCC_OscConfig+0x4b0>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d106      	bne.n	800312a <HAL_RCC_OscConfig+0x31e>
 800311c:	4b66      	ldr	r3, [pc, #408]	@ (80032b8 <HAL_RCC_OscConfig+0x4ac>)
 800311e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003120:	4a65      	ldr	r2, [pc, #404]	@ (80032b8 <HAL_RCC_OscConfig+0x4ac>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	6713      	str	r3, [r2, #112]	@ 0x70
 8003128:	e01c      	b.n	8003164 <HAL_RCC_OscConfig+0x358>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b05      	cmp	r3, #5
 8003130:	d10c      	bne.n	800314c <HAL_RCC_OscConfig+0x340>
 8003132:	4b61      	ldr	r3, [pc, #388]	@ (80032b8 <HAL_RCC_OscConfig+0x4ac>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003136:	4a60      	ldr	r2, [pc, #384]	@ (80032b8 <HAL_RCC_OscConfig+0x4ac>)
 8003138:	f043 0304 	orr.w	r3, r3, #4
 800313c:	6713      	str	r3, [r2, #112]	@ 0x70
 800313e:	4b5e      	ldr	r3, [pc, #376]	@ (80032b8 <HAL_RCC_OscConfig+0x4ac>)
 8003140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003142:	4a5d      	ldr	r2, [pc, #372]	@ (80032b8 <HAL_RCC_OscConfig+0x4ac>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	6713      	str	r3, [r2, #112]	@ 0x70
 800314a:	e00b      	b.n	8003164 <HAL_RCC_OscConfig+0x358>
 800314c:	4b5a      	ldr	r3, [pc, #360]	@ (80032b8 <HAL_RCC_OscConfig+0x4ac>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003150:	4a59      	ldr	r2, [pc, #356]	@ (80032b8 <HAL_RCC_OscConfig+0x4ac>)
 8003152:	f023 0301 	bic.w	r3, r3, #1
 8003156:	6713      	str	r3, [r2, #112]	@ 0x70
 8003158:	4b57      	ldr	r3, [pc, #348]	@ (80032b8 <HAL_RCC_OscConfig+0x4ac>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315c:	4a56      	ldr	r2, [pc, #344]	@ (80032b8 <HAL_RCC_OscConfig+0x4ac>)
 800315e:	f023 0304 	bic.w	r3, r3, #4
 8003162:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d015      	beq.n	8003198 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316c:	f7fe fc2c 	bl	80019c8 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003172:	e00a      	b.n	800318a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003174:	f7fe fc28 	bl	80019c8 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e0d7      	b.n	800333a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318a:	4b4b      	ldr	r3, [pc, #300]	@ (80032b8 <HAL_RCC_OscConfig+0x4ac>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0ee      	beq.n	8003174 <HAL_RCC_OscConfig+0x368>
 8003196:	e014      	b.n	80031c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003198:	f7fe fc16 	bl	80019c8 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800319e:	e00a      	b.n	80031b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a0:	f7fe fc12 	bl	80019c8 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e0c1      	b.n	800333a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b6:	4b40      	ldr	r3, [pc, #256]	@ (80032b8 <HAL_RCC_OscConfig+0x4ac>)
 80031b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1ee      	bne.n	80031a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031c2:	7dfb      	ldrb	r3, [r7, #23]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d105      	bne.n	80031d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c8:	4b3b      	ldr	r3, [pc, #236]	@ (80032b8 <HAL_RCC_OscConfig+0x4ac>)
 80031ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031cc:	4a3a      	ldr	r2, [pc, #232]	@ (80032b8 <HAL_RCC_OscConfig+0x4ac>)
 80031ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 80ad 	beq.w	8003338 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031de:	4b36      	ldr	r3, [pc, #216]	@ (80032b8 <HAL_RCC_OscConfig+0x4ac>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d060      	beq.n	80032ac <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d145      	bne.n	800327e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f2:	4b33      	ldr	r3, [pc, #204]	@ (80032c0 <HAL_RCC_OscConfig+0x4b4>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7fe fbe6 	bl	80019c8 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003200:	f7fe fbe2 	bl	80019c8 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e093      	b.n	800333a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003212:	4b29      	ldr	r3, [pc, #164]	@ (80032b8 <HAL_RCC_OscConfig+0x4ac>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69da      	ldr	r2, [r3, #28]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322c:	019b      	lsls	r3, r3, #6
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003234:	085b      	lsrs	r3, r3, #1
 8003236:	3b01      	subs	r3, #1
 8003238:	041b      	lsls	r3, r3, #16
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003240:	061b      	lsls	r3, r3, #24
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003248:	071b      	lsls	r3, r3, #28
 800324a:	491b      	ldr	r1, [pc, #108]	@ (80032b8 <HAL_RCC_OscConfig+0x4ac>)
 800324c:	4313      	orrs	r3, r2
 800324e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003250:	4b1b      	ldr	r3, [pc, #108]	@ (80032c0 <HAL_RCC_OscConfig+0x4b4>)
 8003252:	2201      	movs	r2, #1
 8003254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003256:	f7fe fbb7 	bl	80019c8 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325e:	f7fe fbb3 	bl	80019c8 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e064      	b.n	800333a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003270:	4b11      	ldr	r3, [pc, #68]	@ (80032b8 <HAL_RCC_OscConfig+0x4ac>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x452>
 800327c:	e05c      	b.n	8003338 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327e:	4b10      	ldr	r3, [pc, #64]	@ (80032c0 <HAL_RCC_OscConfig+0x4b4>)
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003284:	f7fe fba0 	bl	80019c8 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328c:	f7fe fb9c 	bl	80019c8 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e04d      	b.n	800333a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329e:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <HAL_RCC_OscConfig+0x4ac>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <HAL_RCC_OscConfig+0x480>
 80032aa:	e045      	b.n	8003338 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d107      	bne.n	80032c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e040      	b.n	800333a <HAL_RCC_OscConfig+0x52e>
 80032b8:	40023800 	.word	0x40023800
 80032bc:	40007000 	.word	0x40007000
 80032c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003344 <HAL_RCC_OscConfig+0x538>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d030      	beq.n	8003334 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032dc:	429a      	cmp	r2, r3
 80032de:	d129      	bne.n	8003334 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d122      	bne.n	8003334 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032f4:	4013      	ands	r3, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d119      	bne.n	8003334 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330a:	085b      	lsrs	r3, r3, #1
 800330c:	3b01      	subs	r3, #1
 800330e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d10f      	bne.n	8003334 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d107      	bne.n	8003334 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003330:	429a      	cmp	r2, r3
 8003332:	d001      	beq.n	8003338 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40023800 	.word	0x40023800

08003348 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e042      	b.n	80033e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d106      	bne.n	8003374 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7fe f8e2 	bl	8001538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2224      	movs	r2, #36	@ 0x24
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800338a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fa09 	bl	80037a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695a      	ldr	r2, [r3, #20]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08a      	sub	sp, #40	@ 0x28
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	4613      	mov	r3, r2
 80033f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b20      	cmp	r3, #32
 8003406:	d175      	bne.n	80034f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <HAL_UART_Transmit+0x2c>
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e06e      	b.n	80034f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2221      	movs	r2, #33	@ 0x21
 8003422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003426:	f7fe facf 	bl	80019c8 <HAL_GetTick>
 800342a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	88fa      	ldrh	r2, [r7, #6]
 8003430:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	88fa      	ldrh	r2, [r7, #6]
 8003436:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003440:	d108      	bne.n	8003454 <HAL_UART_Transmit+0x6c>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d104      	bne.n	8003454 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	61bb      	str	r3, [r7, #24]
 8003452:	e003      	b.n	800345c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003458:	2300      	movs	r3, #0
 800345a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800345c:	e02e      	b.n	80034bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2200      	movs	r2, #0
 8003466:	2180      	movs	r1, #128	@ 0x80
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 f8df 	bl	800362c <UART_WaitOnFlagUntilTimeout>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e03a      	b.n	80034f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10b      	bne.n	800349e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003494:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	3302      	adds	r3, #2
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	e007      	b.n	80034ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	3301      	adds	r3, #1
 80034ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1cb      	bne.n	800345e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2200      	movs	r2, #0
 80034ce:	2140      	movs	r1, #64	@ 0x40
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f8ab 	bl	800362c <UART_WaitOnFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e006      	b.n	80034f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	e000      	b.n	80034f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034f4:	2302      	movs	r3, #2
  }
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3720      	adds	r7, #32
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b08a      	sub	sp, #40	@ 0x28
 8003502:	af02      	add	r7, sp, #8
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	603b      	str	r3, [r7, #0]
 800350a:	4613      	mov	r3, r2
 800350c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b20      	cmp	r3, #32
 800351c:	f040 8081 	bne.w	8003622 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_UART_Receive+0x2e>
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e079      	b.n	8003624 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2222      	movs	r2, #34	@ 0x22
 800353a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003544:	f7fe fa40 	bl	80019c8 <HAL_GetTick>
 8003548:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	88fa      	ldrh	r2, [r7, #6]
 800354e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	88fa      	ldrh	r2, [r7, #6]
 8003554:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800355e:	d108      	bne.n	8003572 <HAL_UART_Receive+0x74>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d104      	bne.n	8003572 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003568:	2300      	movs	r3, #0
 800356a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	61bb      	str	r3, [r7, #24]
 8003570:	e003      	b.n	800357a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003576:	2300      	movs	r3, #0
 8003578:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800357a:	e047      	b.n	800360c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2200      	movs	r2, #0
 8003584:	2120      	movs	r1, #32
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f850 	bl	800362c <UART_WaitOnFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d005      	beq.n	800359e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e042      	b.n	8003624 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10c      	bne.n	80035be <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	3302      	adds	r3, #2
 80035ba:	61bb      	str	r3, [r7, #24]
 80035bc:	e01f      	b.n	80035fe <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035c6:	d007      	beq.n	80035d8 <HAL_UART_Receive+0xda>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10a      	bne.n	80035e6 <HAL_UART_Receive+0xe8>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d106      	bne.n	80035e6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	701a      	strb	r2, [r3, #0]
 80035e4:	e008      	b.n	80035f8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	3301      	adds	r3, #1
 80035fc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1b2      	bne.n	800357c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2220      	movs	r2, #32
 800361a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	e000      	b.n	8003624 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003622:	2302      	movs	r3, #2
  }
}
 8003624:	4618      	mov	r0, r3
 8003626:	3720      	adds	r7, #32
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	4613      	mov	r3, r2
 800363a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800363c:	e03b      	b.n	80036b6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003644:	d037      	beq.n	80036b6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003646:	f7fe f9bf 	bl	80019c8 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	6a3a      	ldr	r2, [r7, #32]
 8003652:	429a      	cmp	r2, r3
 8003654:	d302      	bcc.n	800365c <UART_WaitOnFlagUntilTimeout+0x30>
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e03a      	b.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b00      	cmp	r3, #0
 800366c:	d023      	beq.n	80036b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b80      	cmp	r3, #128	@ 0x80
 8003672:	d020      	beq.n	80036b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b40      	cmp	r3, #64	@ 0x40
 8003678:	d01d      	beq.n	80036b6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b08      	cmp	r3, #8
 8003686:	d116      	bne.n	80036b6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f81d 	bl	80036de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2208      	movs	r2, #8
 80036a8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e00f      	b.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4013      	ands	r3, r2
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	bf0c      	ite	eq
 80036c6:	2301      	moveq	r3, #1
 80036c8:	2300      	movne	r3, #0
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d0b4      	beq.n	800363e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036de:	b480      	push	{r7}
 80036e0:	b095      	sub	sp, #84	@ 0x54
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	330c      	adds	r3, #12
 80036ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f0:	e853 3f00 	ldrex	r3, [r3]
 80036f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	330c      	adds	r3, #12
 8003704:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003706:	643a      	str	r2, [r7, #64]	@ 0x40
 8003708:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800370c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800370e:	e841 2300 	strex	r3, r2, [r1]
 8003712:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1e5      	bne.n	80036e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	3314      	adds	r3, #20
 8003720:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	e853 3f00 	ldrex	r3, [r3]
 8003728:	61fb      	str	r3, [r7, #28]
   return(result);
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f023 0301 	bic.w	r3, r3, #1
 8003730:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	3314      	adds	r3, #20
 8003738:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800373a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800373c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003740:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003742:	e841 2300 	strex	r3, r2, [r1]
 8003746:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1e5      	bne.n	800371a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003752:	2b01      	cmp	r3, #1
 8003754:	d119      	bne.n	800378a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	330c      	adds	r3, #12
 800375c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	e853 3f00 	ldrex	r3, [r3]
 8003764:	60bb      	str	r3, [r7, #8]
   return(result);
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f023 0310 	bic.w	r3, r3, #16
 800376c:	647b      	str	r3, [r7, #68]	@ 0x44
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	330c      	adds	r3, #12
 8003774:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003776:	61ba      	str	r2, [r7, #24]
 8003778:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377a:	6979      	ldr	r1, [r7, #20]
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	e841 2300 	strex	r3, r2, [r1]
 8003782:	613b      	str	r3, [r7, #16]
   return(result);
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1e5      	bne.n	8003756 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003798:	bf00      	nop
 800379a:	3754      	adds	r7, #84	@ 0x54
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a8:	b0c0      	sub	sp, #256	@ 0x100
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c0:	68d9      	ldr	r1, [r3, #12]
 80037c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	ea40 0301 	orr.w	r3, r0, r1
 80037cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	431a      	orrs	r2, r3
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80037fc:	f021 010c 	bic.w	r1, r1, #12
 8003800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800380a:	430b      	orrs	r3, r1
 800380c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800380e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800381a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381e:	6999      	ldr	r1, [r3, #24]
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	ea40 0301 	orr.w	r3, r0, r1
 800382a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4b8f      	ldr	r3, [pc, #572]	@ (8003a70 <UART_SetConfig+0x2cc>)
 8003834:	429a      	cmp	r2, r3
 8003836:	d005      	beq.n	8003844 <UART_SetConfig+0xa0>
 8003838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	4b8d      	ldr	r3, [pc, #564]	@ (8003a74 <UART_SetConfig+0x2d0>)
 8003840:	429a      	cmp	r2, r3
 8003842:	d104      	bne.n	800384e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003844:	f7ff f82c 	bl	80028a0 <HAL_RCC_GetPCLK2Freq>
 8003848:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800384c:	e003      	b.n	8003856 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800384e:	f7ff f813 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 8003852:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003860:	f040 810c 	bne.w	8003a7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003868:	2200      	movs	r2, #0
 800386a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800386e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003872:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003876:	4622      	mov	r2, r4
 8003878:	462b      	mov	r3, r5
 800387a:	1891      	adds	r1, r2, r2
 800387c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800387e:	415b      	adcs	r3, r3
 8003880:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003882:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003886:	4621      	mov	r1, r4
 8003888:	eb12 0801 	adds.w	r8, r2, r1
 800388c:	4629      	mov	r1, r5
 800388e:	eb43 0901 	adc.w	r9, r3, r1
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800389e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038a6:	4690      	mov	r8, r2
 80038a8:	4699      	mov	r9, r3
 80038aa:	4623      	mov	r3, r4
 80038ac:	eb18 0303 	adds.w	r3, r8, r3
 80038b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038b4:	462b      	mov	r3, r5
 80038b6:	eb49 0303 	adc.w	r3, r9, r3
 80038ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80038ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038d2:	460b      	mov	r3, r1
 80038d4:	18db      	adds	r3, r3, r3
 80038d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80038d8:	4613      	mov	r3, r2
 80038da:	eb42 0303 	adc.w	r3, r2, r3
 80038de:	657b      	str	r3, [r7, #84]	@ 0x54
 80038e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80038e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80038e8:	f7fc fce2 	bl	80002b0 <__aeabi_uldivmod>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4b61      	ldr	r3, [pc, #388]	@ (8003a78 <UART_SetConfig+0x2d4>)
 80038f2:	fba3 2302 	umull	r2, r3, r3, r2
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	011c      	lsls	r4, r3, #4
 80038fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038fe:	2200      	movs	r2, #0
 8003900:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003904:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003908:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800390c:	4642      	mov	r2, r8
 800390e:	464b      	mov	r3, r9
 8003910:	1891      	adds	r1, r2, r2
 8003912:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003914:	415b      	adcs	r3, r3
 8003916:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003918:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800391c:	4641      	mov	r1, r8
 800391e:	eb12 0a01 	adds.w	sl, r2, r1
 8003922:	4649      	mov	r1, r9
 8003924:	eb43 0b01 	adc.w	fp, r3, r1
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003934:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003938:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800393c:	4692      	mov	sl, r2
 800393e:	469b      	mov	fp, r3
 8003940:	4643      	mov	r3, r8
 8003942:	eb1a 0303 	adds.w	r3, sl, r3
 8003946:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800394a:	464b      	mov	r3, r9
 800394c:	eb4b 0303 	adc.w	r3, fp, r3
 8003950:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003960:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003964:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003968:	460b      	mov	r3, r1
 800396a:	18db      	adds	r3, r3, r3
 800396c:	643b      	str	r3, [r7, #64]	@ 0x40
 800396e:	4613      	mov	r3, r2
 8003970:	eb42 0303 	adc.w	r3, r2, r3
 8003974:	647b      	str	r3, [r7, #68]	@ 0x44
 8003976:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800397a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800397e:	f7fc fc97 	bl	80002b0 <__aeabi_uldivmod>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4611      	mov	r1, r2
 8003988:	4b3b      	ldr	r3, [pc, #236]	@ (8003a78 <UART_SetConfig+0x2d4>)
 800398a:	fba3 2301 	umull	r2, r3, r3, r1
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	2264      	movs	r2, #100	@ 0x64
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	1acb      	subs	r3, r1, r3
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800399e:	4b36      	ldr	r3, [pc, #216]	@ (8003a78 <UART_SetConfig+0x2d4>)
 80039a0:	fba3 2302 	umull	r2, r3, r3, r2
 80039a4:	095b      	lsrs	r3, r3, #5
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80039ac:	441c      	add	r4, r3
 80039ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039b2:	2200      	movs	r2, #0
 80039b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80039bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80039c0:	4642      	mov	r2, r8
 80039c2:	464b      	mov	r3, r9
 80039c4:	1891      	adds	r1, r2, r2
 80039c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039c8:	415b      	adcs	r3, r3
 80039ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80039d0:	4641      	mov	r1, r8
 80039d2:	1851      	adds	r1, r2, r1
 80039d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80039d6:	4649      	mov	r1, r9
 80039d8:	414b      	adcs	r3, r1
 80039da:	637b      	str	r3, [r7, #52]	@ 0x34
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80039e8:	4659      	mov	r1, fp
 80039ea:	00cb      	lsls	r3, r1, #3
 80039ec:	4651      	mov	r1, sl
 80039ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039f2:	4651      	mov	r1, sl
 80039f4:	00ca      	lsls	r2, r1, #3
 80039f6:	4610      	mov	r0, r2
 80039f8:	4619      	mov	r1, r3
 80039fa:	4603      	mov	r3, r0
 80039fc:	4642      	mov	r2, r8
 80039fe:	189b      	adds	r3, r3, r2
 8003a00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a04:	464b      	mov	r3, r9
 8003a06:	460a      	mov	r2, r1
 8003a08:	eb42 0303 	adc.w	r3, r2, r3
 8003a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a1c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a24:	460b      	mov	r3, r1
 8003a26:	18db      	adds	r3, r3, r3
 8003a28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	eb42 0303 	adc.w	r3, r2, r3
 8003a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a3a:	f7fc fc39 	bl	80002b0 <__aeabi_uldivmod>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4b0d      	ldr	r3, [pc, #52]	@ (8003a78 <UART_SetConfig+0x2d4>)
 8003a44:	fba3 1302 	umull	r1, r3, r3, r2
 8003a48:	095b      	lsrs	r3, r3, #5
 8003a4a:	2164      	movs	r1, #100	@ 0x64
 8003a4c:	fb01 f303 	mul.w	r3, r1, r3
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	3332      	adds	r3, #50	@ 0x32
 8003a56:	4a08      	ldr	r2, [pc, #32]	@ (8003a78 <UART_SetConfig+0x2d4>)
 8003a58:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5c:	095b      	lsrs	r3, r3, #5
 8003a5e:	f003 0207 	and.w	r2, r3, #7
 8003a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4422      	add	r2, r4
 8003a6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a6c:	e106      	b.n	8003c7c <UART_SetConfig+0x4d8>
 8003a6e:	bf00      	nop
 8003a70:	40011000 	.word	0x40011000
 8003a74:	40011400 	.word	0x40011400
 8003a78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a80:	2200      	movs	r2, #0
 8003a82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a8e:	4642      	mov	r2, r8
 8003a90:	464b      	mov	r3, r9
 8003a92:	1891      	adds	r1, r2, r2
 8003a94:	6239      	str	r1, [r7, #32]
 8003a96:	415b      	adcs	r3, r3
 8003a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a9e:	4641      	mov	r1, r8
 8003aa0:	1854      	adds	r4, r2, r1
 8003aa2:	4649      	mov	r1, r9
 8003aa4:	eb43 0501 	adc.w	r5, r3, r1
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	00eb      	lsls	r3, r5, #3
 8003ab2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ab6:	00e2      	lsls	r2, r4, #3
 8003ab8:	4614      	mov	r4, r2
 8003aba:	461d      	mov	r5, r3
 8003abc:	4643      	mov	r3, r8
 8003abe:	18e3      	adds	r3, r4, r3
 8003ac0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ac4:	464b      	mov	r3, r9
 8003ac6:	eb45 0303 	adc.w	r3, r5, r3
 8003aca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ada:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003aea:	4629      	mov	r1, r5
 8003aec:	008b      	lsls	r3, r1, #2
 8003aee:	4621      	mov	r1, r4
 8003af0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003af4:	4621      	mov	r1, r4
 8003af6:	008a      	lsls	r2, r1, #2
 8003af8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003afc:	f7fc fbd8 	bl	80002b0 <__aeabi_uldivmod>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4b60      	ldr	r3, [pc, #384]	@ (8003c88 <UART_SetConfig+0x4e4>)
 8003b06:	fba3 2302 	umull	r2, r3, r3, r2
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	011c      	lsls	r4, r3, #4
 8003b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b20:	4642      	mov	r2, r8
 8003b22:	464b      	mov	r3, r9
 8003b24:	1891      	adds	r1, r2, r2
 8003b26:	61b9      	str	r1, [r7, #24]
 8003b28:	415b      	adcs	r3, r3
 8003b2a:	61fb      	str	r3, [r7, #28]
 8003b2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b30:	4641      	mov	r1, r8
 8003b32:	1851      	adds	r1, r2, r1
 8003b34:	6139      	str	r1, [r7, #16]
 8003b36:	4649      	mov	r1, r9
 8003b38:	414b      	adcs	r3, r1
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b48:	4659      	mov	r1, fp
 8003b4a:	00cb      	lsls	r3, r1, #3
 8003b4c:	4651      	mov	r1, sl
 8003b4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b52:	4651      	mov	r1, sl
 8003b54:	00ca      	lsls	r2, r1, #3
 8003b56:	4610      	mov	r0, r2
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	4642      	mov	r2, r8
 8003b5e:	189b      	adds	r3, r3, r2
 8003b60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b64:	464b      	mov	r3, r9
 8003b66:	460a      	mov	r2, r1
 8003b68:	eb42 0303 	adc.w	r3, r2, r3
 8003b6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b88:	4649      	mov	r1, r9
 8003b8a:	008b      	lsls	r3, r1, #2
 8003b8c:	4641      	mov	r1, r8
 8003b8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b92:	4641      	mov	r1, r8
 8003b94:	008a      	lsls	r2, r1, #2
 8003b96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b9a:	f7fc fb89 	bl	80002b0 <__aeabi_uldivmod>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	4b38      	ldr	r3, [pc, #224]	@ (8003c88 <UART_SetConfig+0x4e4>)
 8003ba6:	fba3 2301 	umull	r2, r3, r3, r1
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	2264      	movs	r2, #100	@ 0x64
 8003bae:	fb02 f303 	mul.w	r3, r2, r3
 8003bb2:	1acb      	subs	r3, r1, r3
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	3332      	adds	r3, #50	@ 0x32
 8003bb8:	4a33      	ldr	r2, [pc, #204]	@ (8003c88 <UART_SetConfig+0x4e4>)
 8003bba:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbe:	095b      	lsrs	r3, r3, #5
 8003bc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bc4:	441c      	add	r4, r3
 8003bc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bca:	2200      	movs	r2, #0
 8003bcc:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bce:	677a      	str	r2, [r7, #116]	@ 0x74
 8003bd0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003bd4:	4642      	mov	r2, r8
 8003bd6:	464b      	mov	r3, r9
 8003bd8:	1891      	adds	r1, r2, r2
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	415b      	adcs	r3, r3
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003be4:	4641      	mov	r1, r8
 8003be6:	1851      	adds	r1, r2, r1
 8003be8:	6039      	str	r1, [r7, #0]
 8003bea:	4649      	mov	r1, r9
 8003bec:	414b      	adcs	r3, r1
 8003bee:	607b      	str	r3, [r7, #4]
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bfc:	4659      	mov	r1, fp
 8003bfe:	00cb      	lsls	r3, r1, #3
 8003c00:	4651      	mov	r1, sl
 8003c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c06:	4651      	mov	r1, sl
 8003c08:	00ca      	lsls	r2, r1, #3
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4603      	mov	r3, r0
 8003c10:	4642      	mov	r2, r8
 8003c12:	189b      	adds	r3, r3, r2
 8003c14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c16:	464b      	mov	r3, r9
 8003c18:	460a      	mov	r2, r1
 8003c1a:	eb42 0303 	adc.w	r3, r2, r3
 8003c1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c2a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c38:	4649      	mov	r1, r9
 8003c3a:	008b      	lsls	r3, r1, #2
 8003c3c:	4641      	mov	r1, r8
 8003c3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c42:	4641      	mov	r1, r8
 8003c44:	008a      	lsls	r2, r1, #2
 8003c46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c4a:	f7fc fb31 	bl	80002b0 <__aeabi_uldivmod>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	4b0d      	ldr	r3, [pc, #52]	@ (8003c88 <UART_SetConfig+0x4e4>)
 8003c54:	fba3 1302 	umull	r1, r3, r3, r2
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	2164      	movs	r1, #100	@ 0x64
 8003c5c:	fb01 f303 	mul.w	r3, r1, r3
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	3332      	adds	r3, #50	@ 0x32
 8003c66:	4a08      	ldr	r2, [pc, #32]	@ (8003c88 <UART_SetConfig+0x4e4>)
 8003c68:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	f003 020f 	and.w	r2, r3, #15
 8003c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4422      	add	r2, r4
 8003c7a:	609a      	str	r2, [r3, #8]
}
 8003c7c:	bf00      	nop
 8003c7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c82:	46bd      	mov	sp, r7
 8003c84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c88:	51eb851f 	.word	0x51eb851f

08003c8c <std>:
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	b510      	push	{r4, lr}
 8003c90:	4604      	mov	r4, r0
 8003c92:	e9c0 3300 	strd	r3, r3, [r0]
 8003c96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c9a:	6083      	str	r3, [r0, #8]
 8003c9c:	8181      	strh	r1, [r0, #12]
 8003c9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ca0:	81c2      	strh	r2, [r0, #14]
 8003ca2:	6183      	str	r3, [r0, #24]
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	2208      	movs	r2, #8
 8003ca8:	305c      	adds	r0, #92	@ 0x5c
 8003caa:	f000 f9f9 	bl	80040a0 <memset>
 8003cae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce4 <std+0x58>)
 8003cb0:	6263      	str	r3, [r4, #36]	@ 0x24
 8003cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce8 <std+0x5c>)
 8003cb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cec <std+0x60>)
 8003cb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003cba:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf0 <std+0x64>)
 8003cbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8003cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf4 <std+0x68>)
 8003cc0:	6224      	str	r4, [r4, #32]
 8003cc2:	429c      	cmp	r4, r3
 8003cc4:	d006      	beq.n	8003cd4 <std+0x48>
 8003cc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003cca:	4294      	cmp	r4, r2
 8003ccc:	d002      	beq.n	8003cd4 <std+0x48>
 8003cce:	33d0      	adds	r3, #208	@ 0xd0
 8003cd0:	429c      	cmp	r4, r3
 8003cd2:	d105      	bne.n	8003ce0 <std+0x54>
 8003cd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cdc:	f000 ba58 	b.w	8004190 <__retarget_lock_init_recursive>
 8003ce0:	bd10      	pop	{r4, pc}
 8003ce2:	bf00      	nop
 8003ce4:	08003ef1 	.word	0x08003ef1
 8003ce8:	08003f13 	.word	0x08003f13
 8003cec:	08003f4b 	.word	0x08003f4b
 8003cf0:	08003f6f 	.word	0x08003f6f
 8003cf4:	20000214 	.word	0x20000214

08003cf8 <stdio_exit_handler>:
 8003cf8:	4a02      	ldr	r2, [pc, #8]	@ (8003d04 <stdio_exit_handler+0xc>)
 8003cfa:	4903      	ldr	r1, [pc, #12]	@ (8003d08 <stdio_exit_handler+0x10>)
 8003cfc:	4803      	ldr	r0, [pc, #12]	@ (8003d0c <stdio_exit_handler+0x14>)
 8003cfe:	f000 b869 	b.w	8003dd4 <_fwalk_sglue>
 8003d02:	bf00      	nop
 8003d04:	20000014 	.word	0x20000014
 8003d08:	08004a31 	.word	0x08004a31
 8003d0c:	20000024 	.word	0x20000024

08003d10 <cleanup_stdio>:
 8003d10:	6841      	ldr	r1, [r0, #4]
 8003d12:	4b0c      	ldr	r3, [pc, #48]	@ (8003d44 <cleanup_stdio+0x34>)
 8003d14:	4299      	cmp	r1, r3
 8003d16:	b510      	push	{r4, lr}
 8003d18:	4604      	mov	r4, r0
 8003d1a:	d001      	beq.n	8003d20 <cleanup_stdio+0x10>
 8003d1c:	f000 fe88 	bl	8004a30 <_fflush_r>
 8003d20:	68a1      	ldr	r1, [r4, #8]
 8003d22:	4b09      	ldr	r3, [pc, #36]	@ (8003d48 <cleanup_stdio+0x38>)
 8003d24:	4299      	cmp	r1, r3
 8003d26:	d002      	beq.n	8003d2e <cleanup_stdio+0x1e>
 8003d28:	4620      	mov	r0, r4
 8003d2a:	f000 fe81 	bl	8004a30 <_fflush_r>
 8003d2e:	68e1      	ldr	r1, [r4, #12]
 8003d30:	4b06      	ldr	r3, [pc, #24]	@ (8003d4c <cleanup_stdio+0x3c>)
 8003d32:	4299      	cmp	r1, r3
 8003d34:	d004      	beq.n	8003d40 <cleanup_stdio+0x30>
 8003d36:	4620      	mov	r0, r4
 8003d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d3c:	f000 be78 	b.w	8004a30 <_fflush_r>
 8003d40:	bd10      	pop	{r4, pc}
 8003d42:	bf00      	nop
 8003d44:	20000214 	.word	0x20000214
 8003d48:	2000027c 	.word	0x2000027c
 8003d4c:	200002e4 	.word	0x200002e4

08003d50 <global_stdio_init.part.0>:
 8003d50:	b510      	push	{r4, lr}
 8003d52:	4b0b      	ldr	r3, [pc, #44]	@ (8003d80 <global_stdio_init.part.0+0x30>)
 8003d54:	4c0b      	ldr	r4, [pc, #44]	@ (8003d84 <global_stdio_init.part.0+0x34>)
 8003d56:	4a0c      	ldr	r2, [pc, #48]	@ (8003d88 <global_stdio_init.part.0+0x38>)
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	2104      	movs	r1, #4
 8003d60:	f7ff ff94 	bl	8003c8c <std>
 8003d64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003d68:	2201      	movs	r2, #1
 8003d6a:	2109      	movs	r1, #9
 8003d6c:	f7ff ff8e 	bl	8003c8c <std>
 8003d70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003d74:	2202      	movs	r2, #2
 8003d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d7a:	2112      	movs	r1, #18
 8003d7c:	f7ff bf86 	b.w	8003c8c <std>
 8003d80:	2000034c 	.word	0x2000034c
 8003d84:	20000214 	.word	0x20000214
 8003d88:	08003cf9 	.word	0x08003cf9

08003d8c <__sfp_lock_acquire>:
 8003d8c:	4801      	ldr	r0, [pc, #4]	@ (8003d94 <__sfp_lock_acquire+0x8>)
 8003d8e:	f000 ba00 	b.w	8004192 <__retarget_lock_acquire_recursive>
 8003d92:	bf00      	nop
 8003d94:	20000355 	.word	0x20000355

08003d98 <__sfp_lock_release>:
 8003d98:	4801      	ldr	r0, [pc, #4]	@ (8003da0 <__sfp_lock_release+0x8>)
 8003d9a:	f000 b9fb 	b.w	8004194 <__retarget_lock_release_recursive>
 8003d9e:	bf00      	nop
 8003da0:	20000355 	.word	0x20000355

08003da4 <__sinit>:
 8003da4:	b510      	push	{r4, lr}
 8003da6:	4604      	mov	r4, r0
 8003da8:	f7ff fff0 	bl	8003d8c <__sfp_lock_acquire>
 8003dac:	6a23      	ldr	r3, [r4, #32]
 8003dae:	b11b      	cbz	r3, 8003db8 <__sinit+0x14>
 8003db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003db4:	f7ff bff0 	b.w	8003d98 <__sfp_lock_release>
 8003db8:	4b04      	ldr	r3, [pc, #16]	@ (8003dcc <__sinit+0x28>)
 8003dba:	6223      	str	r3, [r4, #32]
 8003dbc:	4b04      	ldr	r3, [pc, #16]	@ (8003dd0 <__sinit+0x2c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1f5      	bne.n	8003db0 <__sinit+0xc>
 8003dc4:	f7ff ffc4 	bl	8003d50 <global_stdio_init.part.0>
 8003dc8:	e7f2      	b.n	8003db0 <__sinit+0xc>
 8003dca:	bf00      	nop
 8003dcc:	08003d11 	.word	0x08003d11
 8003dd0:	2000034c 	.word	0x2000034c

08003dd4 <_fwalk_sglue>:
 8003dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dd8:	4607      	mov	r7, r0
 8003dda:	4688      	mov	r8, r1
 8003ddc:	4614      	mov	r4, r2
 8003dde:	2600      	movs	r6, #0
 8003de0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003de4:	f1b9 0901 	subs.w	r9, r9, #1
 8003de8:	d505      	bpl.n	8003df6 <_fwalk_sglue+0x22>
 8003dea:	6824      	ldr	r4, [r4, #0]
 8003dec:	2c00      	cmp	r4, #0
 8003dee:	d1f7      	bne.n	8003de0 <_fwalk_sglue+0xc>
 8003df0:	4630      	mov	r0, r6
 8003df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003df6:	89ab      	ldrh	r3, [r5, #12]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d907      	bls.n	8003e0c <_fwalk_sglue+0x38>
 8003dfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e00:	3301      	adds	r3, #1
 8003e02:	d003      	beq.n	8003e0c <_fwalk_sglue+0x38>
 8003e04:	4629      	mov	r1, r5
 8003e06:	4638      	mov	r0, r7
 8003e08:	47c0      	blx	r8
 8003e0a:	4306      	orrs	r6, r0
 8003e0c:	3568      	adds	r5, #104	@ 0x68
 8003e0e:	e7e9      	b.n	8003de4 <_fwalk_sglue+0x10>

08003e10 <iprintf>:
 8003e10:	b40f      	push	{r0, r1, r2, r3}
 8003e12:	b507      	push	{r0, r1, r2, lr}
 8003e14:	4906      	ldr	r1, [pc, #24]	@ (8003e30 <iprintf+0x20>)
 8003e16:	ab04      	add	r3, sp, #16
 8003e18:	6808      	ldr	r0, [r1, #0]
 8003e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e1e:	6881      	ldr	r1, [r0, #8]
 8003e20:	9301      	str	r3, [sp, #4]
 8003e22:	f000 fadb 	bl	80043dc <_vfiprintf_r>
 8003e26:	b003      	add	sp, #12
 8003e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e2c:	b004      	add	sp, #16
 8003e2e:	4770      	bx	lr
 8003e30:	20000020 	.word	0x20000020

08003e34 <_puts_r>:
 8003e34:	6a03      	ldr	r3, [r0, #32]
 8003e36:	b570      	push	{r4, r5, r6, lr}
 8003e38:	6884      	ldr	r4, [r0, #8]
 8003e3a:	4605      	mov	r5, r0
 8003e3c:	460e      	mov	r6, r1
 8003e3e:	b90b      	cbnz	r3, 8003e44 <_puts_r+0x10>
 8003e40:	f7ff ffb0 	bl	8003da4 <__sinit>
 8003e44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e46:	07db      	lsls	r3, r3, #31
 8003e48:	d405      	bmi.n	8003e56 <_puts_r+0x22>
 8003e4a:	89a3      	ldrh	r3, [r4, #12]
 8003e4c:	0598      	lsls	r0, r3, #22
 8003e4e:	d402      	bmi.n	8003e56 <_puts_r+0x22>
 8003e50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e52:	f000 f99e 	bl	8004192 <__retarget_lock_acquire_recursive>
 8003e56:	89a3      	ldrh	r3, [r4, #12]
 8003e58:	0719      	lsls	r1, r3, #28
 8003e5a:	d502      	bpl.n	8003e62 <_puts_r+0x2e>
 8003e5c:	6923      	ldr	r3, [r4, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d135      	bne.n	8003ece <_puts_r+0x9a>
 8003e62:	4621      	mov	r1, r4
 8003e64:	4628      	mov	r0, r5
 8003e66:	f000 f8c5 	bl	8003ff4 <__swsetup_r>
 8003e6a:	b380      	cbz	r0, 8003ece <_puts_r+0x9a>
 8003e6c:	f04f 35ff 	mov.w	r5, #4294967295
 8003e70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e72:	07da      	lsls	r2, r3, #31
 8003e74:	d405      	bmi.n	8003e82 <_puts_r+0x4e>
 8003e76:	89a3      	ldrh	r3, [r4, #12]
 8003e78:	059b      	lsls	r3, r3, #22
 8003e7a:	d402      	bmi.n	8003e82 <_puts_r+0x4e>
 8003e7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e7e:	f000 f989 	bl	8004194 <__retarget_lock_release_recursive>
 8003e82:	4628      	mov	r0, r5
 8003e84:	bd70      	pop	{r4, r5, r6, pc}
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	da04      	bge.n	8003e94 <_puts_r+0x60>
 8003e8a:	69a2      	ldr	r2, [r4, #24]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	dc17      	bgt.n	8003ec0 <_puts_r+0x8c>
 8003e90:	290a      	cmp	r1, #10
 8003e92:	d015      	beq.n	8003ec0 <_puts_r+0x8c>
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	6022      	str	r2, [r4, #0]
 8003e9a:	7019      	strb	r1, [r3, #0]
 8003e9c:	68a3      	ldr	r3, [r4, #8]
 8003e9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	60a3      	str	r3, [r4, #8]
 8003ea6:	2900      	cmp	r1, #0
 8003ea8:	d1ed      	bne.n	8003e86 <_puts_r+0x52>
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	da11      	bge.n	8003ed2 <_puts_r+0x9e>
 8003eae:	4622      	mov	r2, r4
 8003eb0:	210a      	movs	r1, #10
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	f000 f85f 	bl	8003f76 <__swbuf_r>
 8003eb8:	3001      	adds	r0, #1
 8003eba:	d0d7      	beq.n	8003e6c <_puts_r+0x38>
 8003ebc:	250a      	movs	r5, #10
 8003ebe:	e7d7      	b.n	8003e70 <_puts_r+0x3c>
 8003ec0:	4622      	mov	r2, r4
 8003ec2:	4628      	mov	r0, r5
 8003ec4:	f000 f857 	bl	8003f76 <__swbuf_r>
 8003ec8:	3001      	adds	r0, #1
 8003eca:	d1e7      	bne.n	8003e9c <_puts_r+0x68>
 8003ecc:	e7ce      	b.n	8003e6c <_puts_r+0x38>
 8003ece:	3e01      	subs	r6, #1
 8003ed0:	e7e4      	b.n	8003e9c <_puts_r+0x68>
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	6022      	str	r2, [r4, #0]
 8003ed8:	220a      	movs	r2, #10
 8003eda:	701a      	strb	r2, [r3, #0]
 8003edc:	e7ee      	b.n	8003ebc <_puts_r+0x88>
	...

08003ee0 <puts>:
 8003ee0:	4b02      	ldr	r3, [pc, #8]	@ (8003eec <puts+0xc>)
 8003ee2:	4601      	mov	r1, r0
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	f7ff bfa5 	b.w	8003e34 <_puts_r>
 8003eea:	bf00      	nop
 8003eec:	20000020 	.word	0x20000020

08003ef0 <__sread>:
 8003ef0:	b510      	push	{r4, lr}
 8003ef2:	460c      	mov	r4, r1
 8003ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ef8:	f000 f8fc 	bl	80040f4 <_read_r>
 8003efc:	2800      	cmp	r0, #0
 8003efe:	bfab      	itete	ge
 8003f00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f02:	89a3      	ldrhlt	r3, [r4, #12]
 8003f04:	181b      	addge	r3, r3, r0
 8003f06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f0a:	bfac      	ite	ge
 8003f0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003f0e:	81a3      	strhlt	r3, [r4, #12]
 8003f10:	bd10      	pop	{r4, pc}

08003f12 <__swrite>:
 8003f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f16:	461f      	mov	r7, r3
 8003f18:	898b      	ldrh	r3, [r1, #12]
 8003f1a:	05db      	lsls	r3, r3, #23
 8003f1c:	4605      	mov	r5, r0
 8003f1e:	460c      	mov	r4, r1
 8003f20:	4616      	mov	r6, r2
 8003f22:	d505      	bpl.n	8003f30 <__swrite+0x1e>
 8003f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f28:	2302      	movs	r3, #2
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f000 f8d0 	bl	80040d0 <_lseek_r>
 8003f30:	89a3      	ldrh	r3, [r4, #12]
 8003f32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f3a:	81a3      	strh	r3, [r4, #12]
 8003f3c:	4632      	mov	r2, r6
 8003f3e:	463b      	mov	r3, r7
 8003f40:	4628      	mov	r0, r5
 8003f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f46:	f000 b8e7 	b.w	8004118 <_write_r>

08003f4a <__sseek>:
 8003f4a:	b510      	push	{r4, lr}
 8003f4c:	460c      	mov	r4, r1
 8003f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f52:	f000 f8bd 	bl	80040d0 <_lseek_r>
 8003f56:	1c43      	adds	r3, r0, #1
 8003f58:	89a3      	ldrh	r3, [r4, #12]
 8003f5a:	bf15      	itete	ne
 8003f5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003f5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003f62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003f66:	81a3      	strheq	r3, [r4, #12]
 8003f68:	bf18      	it	ne
 8003f6a:	81a3      	strhne	r3, [r4, #12]
 8003f6c:	bd10      	pop	{r4, pc}

08003f6e <__sclose>:
 8003f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f72:	f000 b89d 	b.w	80040b0 <_close_r>

08003f76 <__swbuf_r>:
 8003f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f78:	460e      	mov	r6, r1
 8003f7a:	4614      	mov	r4, r2
 8003f7c:	4605      	mov	r5, r0
 8003f7e:	b118      	cbz	r0, 8003f88 <__swbuf_r+0x12>
 8003f80:	6a03      	ldr	r3, [r0, #32]
 8003f82:	b90b      	cbnz	r3, 8003f88 <__swbuf_r+0x12>
 8003f84:	f7ff ff0e 	bl	8003da4 <__sinit>
 8003f88:	69a3      	ldr	r3, [r4, #24]
 8003f8a:	60a3      	str	r3, [r4, #8]
 8003f8c:	89a3      	ldrh	r3, [r4, #12]
 8003f8e:	071a      	lsls	r2, r3, #28
 8003f90:	d501      	bpl.n	8003f96 <__swbuf_r+0x20>
 8003f92:	6923      	ldr	r3, [r4, #16]
 8003f94:	b943      	cbnz	r3, 8003fa8 <__swbuf_r+0x32>
 8003f96:	4621      	mov	r1, r4
 8003f98:	4628      	mov	r0, r5
 8003f9a:	f000 f82b 	bl	8003ff4 <__swsetup_r>
 8003f9e:	b118      	cbz	r0, 8003fa8 <__swbuf_r+0x32>
 8003fa0:	f04f 37ff 	mov.w	r7, #4294967295
 8003fa4:	4638      	mov	r0, r7
 8003fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	6922      	ldr	r2, [r4, #16]
 8003fac:	1a98      	subs	r0, r3, r2
 8003fae:	6963      	ldr	r3, [r4, #20]
 8003fb0:	b2f6      	uxtb	r6, r6
 8003fb2:	4283      	cmp	r3, r0
 8003fb4:	4637      	mov	r7, r6
 8003fb6:	dc05      	bgt.n	8003fc4 <__swbuf_r+0x4e>
 8003fb8:	4621      	mov	r1, r4
 8003fba:	4628      	mov	r0, r5
 8003fbc:	f000 fd38 	bl	8004a30 <_fflush_r>
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	d1ed      	bne.n	8003fa0 <__swbuf_r+0x2a>
 8003fc4:	68a3      	ldr	r3, [r4, #8]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	60a3      	str	r3, [r4, #8]
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	6022      	str	r2, [r4, #0]
 8003fd0:	701e      	strb	r6, [r3, #0]
 8003fd2:	6962      	ldr	r2, [r4, #20]
 8003fd4:	1c43      	adds	r3, r0, #1
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d004      	beq.n	8003fe4 <__swbuf_r+0x6e>
 8003fda:	89a3      	ldrh	r3, [r4, #12]
 8003fdc:	07db      	lsls	r3, r3, #31
 8003fde:	d5e1      	bpl.n	8003fa4 <__swbuf_r+0x2e>
 8003fe0:	2e0a      	cmp	r6, #10
 8003fe2:	d1df      	bne.n	8003fa4 <__swbuf_r+0x2e>
 8003fe4:	4621      	mov	r1, r4
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	f000 fd22 	bl	8004a30 <_fflush_r>
 8003fec:	2800      	cmp	r0, #0
 8003fee:	d0d9      	beq.n	8003fa4 <__swbuf_r+0x2e>
 8003ff0:	e7d6      	b.n	8003fa0 <__swbuf_r+0x2a>
	...

08003ff4 <__swsetup_r>:
 8003ff4:	b538      	push	{r3, r4, r5, lr}
 8003ff6:	4b29      	ldr	r3, [pc, #164]	@ (800409c <__swsetup_r+0xa8>)
 8003ff8:	4605      	mov	r5, r0
 8003ffa:	6818      	ldr	r0, [r3, #0]
 8003ffc:	460c      	mov	r4, r1
 8003ffe:	b118      	cbz	r0, 8004008 <__swsetup_r+0x14>
 8004000:	6a03      	ldr	r3, [r0, #32]
 8004002:	b90b      	cbnz	r3, 8004008 <__swsetup_r+0x14>
 8004004:	f7ff fece 	bl	8003da4 <__sinit>
 8004008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800400c:	0719      	lsls	r1, r3, #28
 800400e:	d422      	bmi.n	8004056 <__swsetup_r+0x62>
 8004010:	06da      	lsls	r2, r3, #27
 8004012:	d407      	bmi.n	8004024 <__swsetup_r+0x30>
 8004014:	2209      	movs	r2, #9
 8004016:	602a      	str	r2, [r5, #0]
 8004018:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800401c:	81a3      	strh	r3, [r4, #12]
 800401e:	f04f 30ff 	mov.w	r0, #4294967295
 8004022:	e033      	b.n	800408c <__swsetup_r+0x98>
 8004024:	0758      	lsls	r0, r3, #29
 8004026:	d512      	bpl.n	800404e <__swsetup_r+0x5a>
 8004028:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800402a:	b141      	cbz	r1, 800403e <__swsetup_r+0x4a>
 800402c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004030:	4299      	cmp	r1, r3
 8004032:	d002      	beq.n	800403a <__swsetup_r+0x46>
 8004034:	4628      	mov	r0, r5
 8004036:	f000 f8af 	bl	8004198 <_free_r>
 800403a:	2300      	movs	r3, #0
 800403c:	6363      	str	r3, [r4, #52]	@ 0x34
 800403e:	89a3      	ldrh	r3, [r4, #12]
 8004040:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004044:	81a3      	strh	r3, [r4, #12]
 8004046:	2300      	movs	r3, #0
 8004048:	6063      	str	r3, [r4, #4]
 800404a:	6923      	ldr	r3, [r4, #16]
 800404c:	6023      	str	r3, [r4, #0]
 800404e:	89a3      	ldrh	r3, [r4, #12]
 8004050:	f043 0308 	orr.w	r3, r3, #8
 8004054:	81a3      	strh	r3, [r4, #12]
 8004056:	6923      	ldr	r3, [r4, #16]
 8004058:	b94b      	cbnz	r3, 800406e <__swsetup_r+0x7a>
 800405a:	89a3      	ldrh	r3, [r4, #12]
 800405c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004060:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004064:	d003      	beq.n	800406e <__swsetup_r+0x7a>
 8004066:	4621      	mov	r1, r4
 8004068:	4628      	mov	r0, r5
 800406a:	f000 fd2f 	bl	8004acc <__smakebuf_r>
 800406e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004072:	f013 0201 	ands.w	r2, r3, #1
 8004076:	d00a      	beq.n	800408e <__swsetup_r+0x9a>
 8004078:	2200      	movs	r2, #0
 800407a:	60a2      	str	r2, [r4, #8]
 800407c:	6962      	ldr	r2, [r4, #20]
 800407e:	4252      	negs	r2, r2
 8004080:	61a2      	str	r2, [r4, #24]
 8004082:	6922      	ldr	r2, [r4, #16]
 8004084:	b942      	cbnz	r2, 8004098 <__swsetup_r+0xa4>
 8004086:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800408a:	d1c5      	bne.n	8004018 <__swsetup_r+0x24>
 800408c:	bd38      	pop	{r3, r4, r5, pc}
 800408e:	0799      	lsls	r1, r3, #30
 8004090:	bf58      	it	pl
 8004092:	6962      	ldrpl	r2, [r4, #20]
 8004094:	60a2      	str	r2, [r4, #8]
 8004096:	e7f4      	b.n	8004082 <__swsetup_r+0x8e>
 8004098:	2000      	movs	r0, #0
 800409a:	e7f7      	b.n	800408c <__swsetup_r+0x98>
 800409c:	20000020 	.word	0x20000020

080040a0 <memset>:
 80040a0:	4402      	add	r2, r0
 80040a2:	4603      	mov	r3, r0
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d100      	bne.n	80040aa <memset+0xa>
 80040a8:	4770      	bx	lr
 80040aa:	f803 1b01 	strb.w	r1, [r3], #1
 80040ae:	e7f9      	b.n	80040a4 <memset+0x4>

080040b0 <_close_r>:
 80040b0:	b538      	push	{r3, r4, r5, lr}
 80040b2:	4d06      	ldr	r5, [pc, #24]	@ (80040cc <_close_r+0x1c>)
 80040b4:	2300      	movs	r3, #0
 80040b6:	4604      	mov	r4, r0
 80040b8:	4608      	mov	r0, r1
 80040ba:	602b      	str	r3, [r5, #0]
 80040bc:	f7fd fb42 	bl	8001744 <_close>
 80040c0:	1c43      	adds	r3, r0, #1
 80040c2:	d102      	bne.n	80040ca <_close_r+0x1a>
 80040c4:	682b      	ldr	r3, [r5, #0]
 80040c6:	b103      	cbz	r3, 80040ca <_close_r+0x1a>
 80040c8:	6023      	str	r3, [r4, #0]
 80040ca:	bd38      	pop	{r3, r4, r5, pc}
 80040cc:	20000350 	.word	0x20000350

080040d0 <_lseek_r>:
 80040d0:	b538      	push	{r3, r4, r5, lr}
 80040d2:	4d07      	ldr	r5, [pc, #28]	@ (80040f0 <_lseek_r+0x20>)
 80040d4:	4604      	mov	r4, r0
 80040d6:	4608      	mov	r0, r1
 80040d8:	4611      	mov	r1, r2
 80040da:	2200      	movs	r2, #0
 80040dc:	602a      	str	r2, [r5, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	f7fd fb57 	bl	8001792 <_lseek>
 80040e4:	1c43      	adds	r3, r0, #1
 80040e6:	d102      	bne.n	80040ee <_lseek_r+0x1e>
 80040e8:	682b      	ldr	r3, [r5, #0]
 80040ea:	b103      	cbz	r3, 80040ee <_lseek_r+0x1e>
 80040ec:	6023      	str	r3, [r4, #0]
 80040ee:	bd38      	pop	{r3, r4, r5, pc}
 80040f0:	20000350 	.word	0x20000350

080040f4 <_read_r>:
 80040f4:	b538      	push	{r3, r4, r5, lr}
 80040f6:	4d07      	ldr	r5, [pc, #28]	@ (8004114 <_read_r+0x20>)
 80040f8:	4604      	mov	r4, r0
 80040fa:	4608      	mov	r0, r1
 80040fc:	4611      	mov	r1, r2
 80040fe:	2200      	movs	r2, #0
 8004100:	602a      	str	r2, [r5, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	f7fd fae5 	bl	80016d2 <_read>
 8004108:	1c43      	adds	r3, r0, #1
 800410a:	d102      	bne.n	8004112 <_read_r+0x1e>
 800410c:	682b      	ldr	r3, [r5, #0]
 800410e:	b103      	cbz	r3, 8004112 <_read_r+0x1e>
 8004110:	6023      	str	r3, [r4, #0]
 8004112:	bd38      	pop	{r3, r4, r5, pc}
 8004114:	20000350 	.word	0x20000350

08004118 <_write_r>:
 8004118:	b538      	push	{r3, r4, r5, lr}
 800411a:	4d07      	ldr	r5, [pc, #28]	@ (8004138 <_write_r+0x20>)
 800411c:	4604      	mov	r4, r0
 800411e:	4608      	mov	r0, r1
 8004120:	4611      	mov	r1, r2
 8004122:	2200      	movs	r2, #0
 8004124:	602a      	str	r2, [r5, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	f7fd faf0 	bl	800170c <_write>
 800412c:	1c43      	adds	r3, r0, #1
 800412e:	d102      	bne.n	8004136 <_write_r+0x1e>
 8004130:	682b      	ldr	r3, [r5, #0]
 8004132:	b103      	cbz	r3, 8004136 <_write_r+0x1e>
 8004134:	6023      	str	r3, [r4, #0]
 8004136:	bd38      	pop	{r3, r4, r5, pc}
 8004138:	20000350 	.word	0x20000350

0800413c <__errno>:
 800413c:	4b01      	ldr	r3, [pc, #4]	@ (8004144 <__errno+0x8>)
 800413e:	6818      	ldr	r0, [r3, #0]
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000020 	.word	0x20000020

08004148 <__libc_init_array>:
 8004148:	b570      	push	{r4, r5, r6, lr}
 800414a:	4d0d      	ldr	r5, [pc, #52]	@ (8004180 <__libc_init_array+0x38>)
 800414c:	4c0d      	ldr	r4, [pc, #52]	@ (8004184 <__libc_init_array+0x3c>)
 800414e:	1b64      	subs	r4, r4, r5
 8004150:	10a4      	asrs	r4, r4, #2
 8004152:	2600      	movs	r6, #0
 8004154:	42a6      	cmp	r6, r4
 8004156:	d109      	bne.n	800416c <__libc_init_array+0x24>
 8004158:	4d0b      	ldr	r5, [pc, #44]	@ (8004188 <__libc_init_array+0x40>)
 800415a:	4c0c      	ldr	r4, [pc, #48]	@ (800418c <__libc_init_array+0x44>)
 800415c:	f000 fd24 	bl	8004ba8 <_init>
 8004160:	1b64      	subs	r4, r4, r5
 8004162:	10a4      	asrs	r4, r4, #2
 8004164:	2600      	movs	r6, #0
 8004166:	42a6      	cmp	r6, r4
 8004168:	d105      	bne.n	8004176 <__libc_init_array+0x2e>
 800416a:	bd70      	pop	{r4, r5, r6, pc}
 800416c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004170:	4798      	blx	r3
 8004172:	3601      	adds	r6, #1
 8004174:	e7ee      	b.n	8004154 <__libc_init_array+0xc>
 8004176:	f855 3b04 	ldr.w	r3, [r5], #4
 800417a:	4798      	blx	r3
 800417c:	3601      	adds	r6, #1
 800417e:	e7f2      	b.n	8004166 <__libc_init_array+0x1e>
 8004180:	08005080 	.word	0x08005080
 8004184:	08005080 	.word	0x08005080
 8004188:	08005080 	.word	0x08005080
 800418c:	08005084 	.word	0x08005084

08004190 <__retarget_lock_init_recursive>:
 8004190:	4770      	bx	lr

08004192 <__retarget_lock_acquire_recursive>:
 8004192:	4770      	bx	lr

08004194 <__retarget_lock_release_recursive>:
 8004194:	4770      	bx	lr
	...

08004198 <_free_r>:
 8004198:	b538      	push	{r3, r4, r5, lr}
 800419a:	4605      	mov	r5, r0
 800419c:	2900      	cmp	r1, #0
 800419e:	d041      	beq.n	8004224 <_free_r+0x8c>
 80041a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041a4:	1f0c      	subs	r4, r1, #4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	bfb8      	it	lt
 80041aa:	18e4      	addlt	r4, r4, r3
 80041ac:	f000 f8e0 	bl	8004370 <__malloc_lock>
 80041b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004228 <_free_r+0x90>)
 80041b2:	6813      	ldr	r3, [r2, #0]
 80041b4:	b933      	cbnz	r3, 80041c4 <_free_r+0x2c>
 80041b6:	6063      	str	r3, [r4, #4]
 80041b8:	6014      	str	r4, [r2, #0]
 80041ba:	4628      	mov	r0, r5
 80041bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041c0:	f000 b8dc 	b.w	800437c <__malloc_unlock>
 80041c4:	42a3      	cmp	r3, r4
 80041c6:	d908      	bls.n	80041da <_free_r+0x42>
 80041c8:	6820      	ldr	r0, [r4, #0]
 80041ca:	1821      	adds	r1, r4, r0
 80041cc:	428b      	cmp	r3, r1
 80041ce:	bf01      	itttt	eq
 80041d0:	6819      	ldreq	r1, [r3, #0]
 80041d2:	685b      	ldreq	r3, [r3, #4]
 80041d4:	1809      	addeq	r1, r1, r0
 80041d6:	6021      	streq	r1, [r4, #0]
 80041d8:	e7ed      	b.n	80041b6 <_free_r+0x1e>
 80041da:	461a      	mov	r2, r3
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	b10b      	cbz	r3, 80041e4 <_free_r+0x4c>
 80041e0:	42a3      	cmp	r3, r4
 80041e2:	d9fa      	bls.n	80041da <_free_r+0x42>
 80041e4:	6811      	ldr	r1, [r2, #0]
 80041e6:	1850      	adds	r0, r2, r1
 80041e8:	42a0      	cmp	r0, r4
 80041ea:	d10b      	bne.n	8004204 <_free_r+0x6c>
 80041ec:	6820      	ldr	r0, [r4, #0]
 80041ee:	4401      	add	r1, r0
 80041f0:	1850      	adds	r0, r2, r1
 80041f2:	4283      	cmp	r3, r0
 80041f4:	6011      	str	r1, [r2, #0]
 80041f6:	d1e0      	bne.n	80041ba <_free_r+0x22>
 80041f8:	6818      	ldr	r0, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	6053      	str	r3, [r2, #4]
 80041fe:	4408      	add	r0, r1
 8004200:	6010      	str	r0, [r2, #0]
 8004202:	e7da      	b.n	80041ba <_free_r+0x22>
 8004204:	d902      	bls.n	800420c <_free_r+0x74>
 8004206:	230c      	movs	r3, #12
 8004208:	602b      	str	r3, [r5, #0]
 800420a:	e7d6      	b.n	80041ba <_free_r+0x22>
 800420c:	6820      	ldr	r0, [r4, #0]
 800420e:	1821      	adds	r1, r4, r0
 8004210:	428b      	cmp	r3, r1
 8004212:	bf04      	itt	eq
 8004214:	6819      	ldreq	r1, [r3, #0]
 8004216:	685b      	ldreq	r3, [r3, #4]
 8004218:	6063      	str	r3, [r4, #4]
 800421a:	bf04      	itt	eq
 800421c:	1809      	addeq	r1, r1, r0
 800421e:	6021      	streq	r1, [r4, #0]
 8004220:	6054      	str	r4, [r2, #4]
 8004222:	e7ca      	b.n	80041ba <_free_r+0x22>
 8004224:	bd38      	pop	{r3, r4, r5, pc}
 8004226:	bf00      	nop
 8004228:	2000035c 	.word	0x2000035c

0800422c <sbrk_aligned>:
 800422c:	b570      	push	{r4, r5, r6, lr}
 800422e:	4e0f      	ldr	r6, [pc, #60]	@ (800426c <sbrk_aligned+0x40>)
 8004230:	460c      	mov	r4, r1
 8004232:	6831      	ldr	r1, [r6, #0]
 8004234:	4605      	mov	r5, r0
 8004236:	b911      	cbnz	r1, 800423e <sbrk_aligned+0x12>
 8004238:	f000 fca6 	bl	8004b88 <_sbrk_r>
 800423c:	6030      	str	r0, [r6, #0]
 800423e:	4621      	mov	r1, r4
 8004240:	4628      	mov	r0, r5
 8004242:	f000 fca1 	bl	8004b88 <_sbrk_r>
 8004246:	1c43      	adds	r3, r0, #1
 8004248:	d103      	bne.n	8004252 <sbrk_aligned+0x26>
 800424a:	f04f 34ff 	mov.w	r4, #4294967295
 800424e:	4620      	mov	r0, r4
 8004250:	bd70      	pop	{r4, r5, r6, pc}
 8004252:	1cc4      	adds	r4, r0, #3
 8004254:	f024 0403 	bic.w	r4, r4, #3
 8004258:	42a0      	cmp	r0, r4
 800425a:	d0f8      	beq.n	800424e <sbrk_aligned+0x22>
 800425c:	1a21      	subs	r1, r4, r0
 800425e:	4628      	mov	r0, r5
 8004260:	f000 fc92 	bl	8004b88 <_sbrk_r>
 8004264:	3001      	adds	r0, #1
 8004266:	d1f2      	bne.n	800424e <sbrk_aligned+0x22>
 8004268:	e7ef      	b.n	800424a <sbrk_aligned+0x1e>
 800426a:	bf00      	nop
 800426c:	20000358 	.word	0x20000358

08004270 <_malloc_r>:
 8004270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004274:	1ccd      	adds	r5, r1, #3
 8004276:	f025 0503 	bic.w	r5, r5, #3
 800427a:	3508      	adds	r5, #8
 800427c:	2d0c      	cmp	r5, #12
 800427e:	bf38      	it	cc
 8004280:	250c      	movcc	r5, #12
 8004282:	2d00      	cmp	r5, #0
 8004284:	4606      	mov	r6, r0
 8004286:	db01      	blt.n	800428c <_malloc_r+0x1c>
 8004288:	42a9      	cmp	r1, r5
 800428a:	d904      	bls.n	8004296 <_malloc_r+0x26>
 800428c:	230c      	movs	r3, #12
 800428e:	6033      	str	r3, [r6, #0]
 8004290:	2000      	movs	r0, #0
 8004292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004296:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800436c <_malloc_r+0xfc>
 800429a:	f000 f869 	bl	8004370 <__malloc_lock>
 800429e:	f8d8 3000 	ldr.w	r3, [r8]
 80042a2:	461c      	mov	r4, r3
 80042a4:	bb44      	cbnz	r4, 80042f8 <_malloc_r+0x88>
 80042a6:	4629      	mov	r1, r5
 80042a8:	4630      	mov	r0, r6
 80042aa:	f7ff ffbf 	bl	800422c <sbrk_aligned>
 80042ae:	1c43      	adds	r3, r0, #1
 80042b0:	4604      	mov	r4, r0
 80042b2:	d158      	bne.n	8004366 <_malloc_r+0xf6>
 80042b4:	f8d8 4000 	ldr.w	r4, [r8]
 80042b8:	4627      	mov	r7, r4
 80042ba:	2f00      	cmp	r7, #0
 80042bc:	d143      	bne.n	8004346 <_malloc_r+0xd6>
 80042be:	2c00      	cmp	r4, #0
 80042c0:	d04b      	beq.n	800435a <_malloc_r+0xea>
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	4639      	mov	r1, r7
 80042c6:	4630      	mov	r0, r6
 80042c8:	eb04 0903 	add.w	r9, r4, r3
 80042cc:	f000 fc5c 	bl	8004b88 <_sbrk_r>
 80042d0:	4581      	cmp	r9, r0
 80042d2:	d142      	bne.n	800435a <_malloc_r+0xea>
 80042d4:	6821      	ldr	r1, [r4, #0]
 80042d6:	1a6d      	subs	r5, r5, r1
 80042d8:	4629      	mov	r1, r5
 80042da:	4630      	mov	r0, r6
 80042dc:	f7ff ffa6 	bl	800422c <sbrk_aligned>
 80042e0:	3001      	adds	r0, #1
 80042e2:	d03a      	beq.n	800435a <_malloc_r+0xea>
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	442b      	add	r3, r5
 80042e8:	6023      	str	r3, [r4, #0]
 80042ea:	f8d8 3000 	ldr.w	r3, [r8]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	bb62      	cbnz	r2, 800434c <_malloc_r+0xdc>
 80042f2:	f8c8 7000 	str.w	r7, [r8]
 80042f6:	e00f      	b.n	8004318 <_malloc_r+0xa8>
 80042f8:	6822      	ldr	r2, [r4, #0]
 80042fa:	1b52      	subs	r2, r2, r5
 80042fc:	d420      	bmi.n	8004340 <_malloc_r+0xd0>
 80042fe:	2a0b      	cmp	r2, #11
 8004300:	d917      	bls.n	8004332 <_malloc_r+0xc2>
 8004302:	1961      	adds	r1, r4, r5
 8004304:	42a3      	cmp	r3, r4
 8004306:	6025      	str	r5, [r4, #0]
 8004308:	bf18      	it	ne
 800430a:	6059      	strne	r1, [r3, #4]
 800430c:	6863      	ldr	r3, [r4, #4]
 800430e:	bf08      	it	eq
 8004310:	f8c8 1000 	streq.w	r1, [r8]
 8004314:	5162      	str	r2, [r4, r5]
 8004316:	604b      	str	r3, [r1, #4]
 8004318:	4630      	mov	r0, r6
 800431a:	f000 f82f 	bl	800437c <__malloc_unlock>
 800431e:	f104 000b 	add.w	r0, r4, #11
 8004322:	1d23      	adds	r3, r4, #4
 8004324:	f020 0007 	bic.w	r0, r0, #7
 8004328:	1ac2      	subs	r2, r0, r3
 800432a:	bf1c      	itt	ne
 800432c:	1a1b      	subne	r3, r3, r0
 800432e:	50a3      	strne	r3, [r4, r2]
 8004330:	e7af      	b.n	8004292 <_malloc_r+0x22>
 8004332:	6862      	ldr	r2, [r4, #4]
 8004334:	42a3      	cmp	r3, r4
 8004336:	bf0c      	ite	eq
 8004338:	f8c8 2000 	streq.w	r2, [r8]
 800433c:	605a      	strne	r2, [r3, #4]
 800433e:	e7eb      	b.n	8004318 <_malloc_r+0xa8>
 8004340:	4623      	mov	r3, r4
 8004342:	6864      	ldr	r4, [r4, #4]
 8004344:	e7ae      	b.n	80042a4 <_malloc_r+0x34>
 8004346:	463c      	mov	r4, r7
 8004348:	687f      	ldr	r7, [r7, #4]
 800434a:	e7b6      	b.n	80042ba <_malloc_r+0x4a>
 800434c:	461a      	mov	r2, r3
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	42a3      	cmp	r3, r4
 8004352:	d1fb      	bne.n	800434c <_malloc_r+0xdc>
 8004354:	2300      	movs	r3, #0
 8004356:	6053      	str	r3, [r2, #4]
 8004358:	e7de      	b.n	8004318 <_malloc_r+0xa8>
 800435a:	230c      	movs	r3, #12
 800435c:	6033      	str	r3, [r6, #0]
 800435e:	4630      	mov	r0, r6
 8004360:	f000 f80c 	bl	800437c <__malloc_unlock>
 8004364:	e794      	b.n	8004290 <_malloc_r+0x20>
 8004366:	6005      	str	r5, [r0, #0]
 8004368:	e7d6      	b.n	8004318 <_malloc_r+0xa8>
 800436a:	bf00      	nop
 800436c:	2000035c 	.word	0x2000035c

08004370 <__malloc_lock>:
 8004370:	4801      	ldr	r0, [pc, #4]	@ (8004378 <__malloc_lock+0x8>)
 8004372:	f7ff bf0e 	b.w	8004192 <__retarget_lock_acquire_recursive>
 8004376:	bf00      	nop
 8004378:	20000354 	.word	0x20000354

0800437c <__malloc_unlock>:
 800437c:	4801      	ldr	r0, [pc, #4]	@ (8004384 <__malloc_unlock+0x8>)
 800437e:	f7ff bf09 	b.w	8004194 <__retarget_lock_release_recursive>
 8004382:	bf00      	nop
 8004384:	20000354 	.word	0x20000354

08004388 <__sfputc_r>:
 8004388:	6893      	ldr	r3, [r2, #8]
 800438a:	3b01      	subs	r3, #1
 800438c:	2b00      	cmp	r3, #0
 800438e:	b410      	push	{r4}
 8004390:	6093      	str	r3, [r2, #8]
 8004392:	da08      	bge.n	80043a6 <__sfputc_r+0x1e>
 8004394:	6994      	ldr	r4, [r2, #24]
 8004396:	42a3      	cmp	r3, r4
 8004398:	db01      	blt.n	800439e <__sfputc_r+0x16>
 800439a:	290a      	cmp	r1, #10
 800439c:	d103      	bne.n	80043a6 <__sfputc_r+0x1e>
 800439e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043a2:	f7ff bde8 	b.w	8003f76 <__swbuf_r>
 80043a6:	6813      	ldr	r3, [r2, #0]
 80043a8:	1c58      	adds	r0, r3, #1
 80043aa:	6010      	str	r0, [r2, #0]
 80043ac:	7019      	strb	r1, [r3, #0]
 80043ae:	4608      	mov	r0, r1
 80043b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <__sfputs_r>:
 80043b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b8:	4606      	mov	r6, r0
 80043ba:	460f      	mov	r7, r1
 80043bc:	4614      	mov	r4, r2
 80043be:	18d5      	adds	r5, r2, r3
 80043c0:	42ac      	cmp	r4, r5
 80043c2:	d101      	bne.n	80043c8 <__sfputs_r+0x12>
 80043c4:	2000      	movs	r0, #0
 80043c6:	e007      	b.n	80043d8 <__sfputs_r+0x22>
 80043c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043cc:	463a      	mov	r2, r7
 80043ce:	4630      	mov	r0, r6
 80043d0:	f7ff ffda 	bl	8004388 <__sfputc_r>
 80043d4:	1c43      	adds	r3, r0, #1
 80043d6:	d1f3      	bne.n	80043c0 <__sfputs_r+0xa>
 80043d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043dc <_vfiprintf_r>:
 80043dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e0:	460d      	mov	r5, r1
 80043e2:	b09d      	sub	sp, #116	@ 0x74
 80043e4:	4614      	mov	r4, r2
 80043e6:	4698      	mov	r8, r3
 80043e8:	4606      	mov	r6, r0
 80043ea:	b118      	cbz	r0, 80043f4 <_vfiprintf_r+0x18>
 80043ec:	6a03      	ldr	r3, [r0, #32]
 80043ee:	b90b      	cbnz	r3, 80043f4 <_vfiprintf_r+0x18>
 80043f0:	f7ff fcd8 	bl	8003da4 <__sinit>
 80043f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043f6:	07d9      	lsls	r1, r3, #31
 80043f8:	d405      	bmi.n	8004406 <_vfiprintf_r+0x2a>
 80043fa:	89ab      	ldrh	r3, [r5, #12]
 80043fc:	059a      	lsls	r2, r3, #22
 80043fe:	d402      	bmi.n	8004406 <_vfiprintf_r+0x2a>
 8004400:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004402:	f7ff fec6 	bl	8004192 <__retarget_lock_acquire_recursive>
 8004406:	89ab      	ldrh	r3, [r5, #12]
 8004408:	071b      	lsls	r3, r3, #28
 800440a:	d501      	bpl.n	8004410 <_vfiprintf_r+0x34>
 800440c:	692b      	ldr	r3, [r5, #16]
 800440e:	b99b      	cbnz	r3, 8004438 <_vfiprintf_r+0x5c>
 8004410:	4629      	mov	r1, r5
 8004412:	4630      	mov	r0, r6
 8004414:	f7ff fdee 	bl	8003ff4 <__swsetup_r>
 8004418:	b170      	cbz	r0, 8004438 <_vfiprintf_r+0x5c>
 800441a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800441c:	07dc      	lsls	r4, r3, #31
 800441e:	d504      	bpl.n	800442a <_vfiprintf_r+0x4e>
 8004420:	f04f 30ff 	mov.w	r0, #4294967295
 8004424:	b01d      	add	sp, #116	@ 0x74
 8004426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800442a:	89ab      	ldrh	r3, [r5, #12]
 800442c:	0598      	lsls	r0, r3, #22
 800442e:	d4f7      	bmi.n	8004420 <_vfiprintf_r+0x44>
 8004430:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004432:	f7ff feaf 	bl	8004194 <__retarget_lock_release_recursive>
 8004436:	e7f3      	b.n	8004420 <_vfiprintf_r+0x44>
 8004438:	2300      	movs	r3, #0
 800443a:	9309      	str	r3, [sp, #36]	@ 0x24
 800443c:	2320      	movs	r3, #32
 800443e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004442:	f8cd 800c 	str.w	r8, [sp, #12]
 8004446:	2330      	movs	r3, #48	@ 0x30
 8004448:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80045f8 <_vfiprintf_r+0x21c>
 800444c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004450:	f04f 0901 	mov.w	r9, #1
 8004454:	4623      	mov	r3, r4
 8004456:	469a      	mov	sl, r3
 8004458:	f813 2b01 	ldrb.w	r2, [r3], #1
 800445c:	b10a      	cbz	r2, 8004462 <_vfiprintf_r+0x86>
 800445e:	2a25      	cmp	r2, #37	@ 0x25
 8004460:	d1f9      	bne.n	8004456 <_vfiprintf_r+0x7a>
 8004462:	ebba 0b04 	subs.w	fp, sl, r4
 8004466:	d00b      	beq.n	8004480 <_vfiprintf_r+0xa4>
 8004468:	465b      	mov	r3, fp
 800446a:	4622      	mov	r2, r4
 800446c:	4629      	mov	r1, r5
 800446e:	4630      	mov	r0, r6
 8004470:	f7ff ffa1 	bl	80043b6 <__sfputs_r>
 8004474:	3001      	adds	r0, #1
 8004476:	f000 80a7 	beq.w	80045c8 <_vfiprintf_r+0x1ec>
 800447a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800447c:	445a      	add	r2, fp
 800447e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004480:	f89a 3000 	ldrb.w	r3, [sl]
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 809f 	beq.w	80045c8 <_vfiprintf_r+0x1ec>
 800448a:	2300      	movs	r3, #0
 800448c:	f04f 32ff 	mov.w	r2, #4294967295
 8004490:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004494:	f10a 0a01 	add.w	sl, sl, #1
 8004498:	9304      	str	r3, [sp, #16]
 800449a:	9307      	str	r3, [sp, #28]
 800449c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80044a2:	4654      	mov	r4, sl
 80044a4:	2205      	movs	r2, #5
 80044a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044aa:	4853      	ldr	r0, [pc, #332]	@ (80045f8 <_vfiprintf_r+0x21c>)
 80044ac:	f7fb feb0 	bl	8000210 <memchr>
 80044b0:	9a04      	ldr	r2, [sp, #16]
 80044b2:	b9d8      	cbnz	r0, 80044ec <_vfiprintf_r+0x110>
 80044b4:	06d1      	lsls	r1, r2, #27
 80044b6:	bf44      	itt	mi
 80044b8:	2320      	movmi	r3, #32
 80044ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044be:	0713      	lsls	r3, r2, #28
 80044c0:	bf44      	itt	mi
 80044c2:	232b      	movmi	r3, #43	@ 0x2b
 80044c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044c8:	f89a 3000 	ldrb.w	r3, [sl]
 80044cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80044ce:	d015      	beq.n	80044fc <_vfiprintf_r+0x120>
 80044d0:	9a07      	ldr	r2, [sp, #28]
 80044d2:	4654      	mov	r4, sl
 80044d4:	2000      	movs	r0, #0
 80044d6:	f04f 0c0a 	mov.w	ip, #10
 80044da:	4621      	mov	r1, r4
 80044dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044e0:	3b30      	subs	r3, #48	@ 0x30
 80044e2:	2b09      	cmp	r3, #9
 80044e4:	d94b      	bls.n	800457e <_vfiprintf_r+0x1a2>
 80044e6:	b1b0      	cbz	r0, 8004516 <_vfiprintf_r+0x13a>
 80044e8:	9207      	str	r2, [sp, #28]
 80044ea:	e014      	b.n	8004516 <_vfiprintf_r+0x13a>
 80044ec:	eba0 0308 	sub.w	r3, r0, r8
 80044f0:	fa09 f303 	lsl.w	r3, r9, r3
 80044f4:	4313      	orrs	r3, r2
 80044f6:	9304      	str	r3, [sp, #16]
 80044f8:	46a2      	mov	sl, r4
 80044fa:	e7d2      	b.n	80044a2 <_vfiprintf_r+0xc6>
 80044fc:	9b03      	ldr	r3, [sp, #12]
 80044fe:	1d19      	adds	r1, r3, #4
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	9103      	str	r1, [sp, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	bfbb      	ittet	lt
 8004508:	425b      	neglt	r3, r3
 800450a:	f042 0202 	orrlt.w	r2, r2, #2
 800450e:	9307      	strge	r3, [sp, #28]
 8004510:	9307      	strlt	r3, [sp, #28]
 8004512:	bfb8      	it	lt
 8004514:	9204      	strlt	r2, [sp, #16]
 8004516:	7823      	ldrb	r3, [r4, #0]
 8004518:	2b2e      	cmp	r3, #46	@ 0x2e
 800451a:	d10a      	bne.n	8004532 <_vfiprintf_r+0x156>
 800451c:	7863      	ldrb	r3, [r4, #1]
 800451e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004520:	d132      	bne.n	8004588 <_vfiprintf_r+0x1ac>
 8004522:	9b03      	ldr	r3, [sp, #12]
 8004524:	1d1a      	adds	r2, r3, #4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	9203      	str	r2, [sp, #12]
 800452a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800452e:	3402      	adds	r4, #2
 8004530:	9305      	str	r3, [sp, #20]
 8004532:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004608 <_vfiprintf_r+0x22c>
 8004536:	7821      	ldrb	r1, [r4, #0]
 8004538:	2203      	movs	r2, #3
 800453a:	4650      	mov	r0, sl
 800453c:	f7fb fe68 	bl	8000210 <memchr>
 8004540:	b138      	cbz	r0, 8004552 <_vfiprintf_r+0x176>
 8004542:	9b04      	ldr	r3, [sp, #16]
 8004544:	eba0 000a 	sub.w	r0, r0, sl
 8004548:	2240      	movs	r2, #64	@ 0x40
 800454a:	4082      	lsls	r2, r0
 800454c:	4313      	orrs	r3, r2
 800454e:	3401      	adds	r4, #1
 8004550:	9304      	str	r3, [sp, #16]
 8004552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004556:	4829      	ldr	r0, [pc, #164]	@ (80045fc <_vfiprintf_r+0x220>)
 8004558:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800455c:	2206      	movs	r2, #6
 800455e:	f7fb fe57 	bl	8000210 <memchr>
 8004562:	2800      	cmp	r0, #0
 8004564:	d03f      	beq.n	80045e6 <_vfiprintf_r+0x20a>
 8004566:	4b26      	ldr	r3, [pc, #152]	@ (8004600 <_vfiprintf_r+0x224>)
 8004568:	bb1b      	cbnz	r3, 80045b2 <_vfiprintf_r+0x1d6>
 800456a:	9b03      	ldr	r3, [sp, #12]
 800456c:	3307      	adds	r3, #7
 800456e:	f023 0307 	bic.w	r3, r3, #7
 8004572:	3308      	adds	r3, #8
 8004574:	9303      	str	r3, [sp, #12]
 8004576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004578:	443b      	add	r3, r7
 800457a:	9309      	str	r3, [sp, #36]	@ 0x24
 800457c:	e76a      	b.n	8004454 <_vfiprintf_r+0x78>
 800457e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004582:	460c      	mov	r4, r1
 8004584:	2001      	movs	r0, #1
 8004586:	e7a8      	b.n	80044da <_vfiprintf_r+0xfe>
 8004588:	2300      	movs	r3, #0
 800458a:	3401      	adds	r4, #1
 800458c:	9305      	str	r3, [sp, #20]
 800458e:	4619      	mov	r1, r3
 8004590:	f04f 0c0a 	mov.w	ip, #10
 8004594:	4620      	mov	r0, r4
 8004596:	f810 2b01 	ldrb.w	r2, [r0], #1
 800459a:	3a30      	subs	r2, #48	@ 0x30
 800459c:	2a09      	cmp	r2, #9
 800459e:	d903      	bls.n	80045a8 <_vfiprintf_r+0x1cc>
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0c6      	beq.n	8004532 <_vfiprintf_r+0x156>
 80045a4:	9105      	str	r1, [sp, #20]
 80045a6:	e7c4      	b.n	8004532 <_vfiprintf_r+0x156>
 80045a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80045ac:	4604      	mov	r4, r0
 80045ae:	2301      	movs	r3, #1
 80045b0:	e7f0      	b.n	8004594 <_vfiprintf_r+0x1b8>
 80045b2:	ab03      	add	r3, sp, #12
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	462a      	mov	r2, r5
 80045b8:	4b12      	ldr	r3, [pc, #72]	@ (8004604 <_vfiprintf_r+0x228>)
 80045ba:	a904      	add	r1, sp, #16
 80045bc:	4630      	mov	r0, r6
 80045be:	f3af 8000 	nop.w
 80045c2:	4607      	mov	r7, r0
 80045c4:	1c78      	adds	r0, r7, #1
 80045c6:	d1d6      	bne.n	8004576 <_vfiprintf_r+0x19a>
 80045c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80045ca:	07d9      	lsls	r1, r3, #31
 80045cc:	d405      	bmi.n	80045da <_vfiprintf_r+0x1fe>
 80045ce:	89ab      	ldrh	r3, [r5, #12]
 80045d0:	059a      	lsls	r2, r3, #22
 80045d2:	d402      	bmi.n	80045da <_vfiprintf_r+0x1fe>
 80045d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045d6:	f7ff fddd 	bl	8004194 <__retarget_lock_release_recursive>
 80045da:	89ab      	ldrh	r3, [r5, #12]
 80045dc:	065b      	lsls	r3, r3, #25
 80045de:	f53f af1f 	bmi.w	8004420 <_vfiprintf_r+0x44>
 80045e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045e4:	e71e      	b.n	8004424 <_vfiprintf_r+0x48>
 80045e6:	ab03      	add	r3, sp, #12
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	462a      	mov	r2, r5
 80045ec:	4b05      	ldr	r3, [pc, #20]	@ (8004604 <_vfiprintf_r+0x228>)
 80045ee:	a904      	add	r1, sp, #16
 80045f0:	4630      	mov	r0, r6
 80045f2:	f000 f879 	bl	80046e8 <_printf_i>
 80045f6:	e7e4      	b.n	80045c2 <_vfiprintf_r+0x1e6>
 80045f8:	08005044 	.word	0x08005044
 80045fc:	0800504e 	.word	0x0800504e
 8004600:	00000000 	.word	0x00000000
 8004604:	080043b7 	.word	0x080043b7
 8004608:	0800504a 	.word	0x0800504a

0800460c <_printf_common>:
 800460c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004610:	4616      	mov	r6, r2
 8004612:	4698      	mov	r8, r3
 8004614:	688a      	ldr	r2, [r1, #8]
 8004616:	690b      	ldr	r3, [r1, #16]
 8004618:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800461c:	4293      	cmp	r3, r2
 800461e:	bfb8      	it	lt
 8004620:	4613      	movlt	r3, r2
 8004622:	6033      	str	r3, [r6, #0]
 8004624:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004628:	4607      	mov	r7, r0
 800462a:	460c      	mov	r4, r1
 800462c:	b10a      	cbz	r2, 8004632 <_printf_common+0x26>
 800462e:	3301      	adds	r3, #1
 8004630:	6033      	str	r3, [r6, #0]
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	0699      	lsls	r1, r3, #26
 8004636:	bf42      	ittt	mi
 8004638:	6833      	ldrmi	r3, [r6, #0]
 800463a:	3302      	addmi	r3, #2
 800463c:	6033      	strmi	r3, [r6, #0]
 800463e:	6825      	ldr	r5, [r4, #0]
 8004640:	f015 0506 	ands.w	r5, r5, #6
 8004644:	d106      	bne.n	8004654 <_printf_common+0x48>
 8004646:	f104 0a19 	add.w	sl, r4, #25
 800464a:	68e3      	ldr	r3, [r4, #12]
 800464c:	6832      	ldr	r2, [r6, #0]
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	42ab      	cmp	r3, r5
 8004652:	dc26      	bgt.n	80046a2 <_printf_common+0x96>
 8004654:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004658:	6822      	ldr	r2, [r4, #0]
 800465a:	3b00      	subs	r3, #0
 800465c:	bf18      	it	ne
 800465e:	2301      	movne	r3, #1
 8004660:	0692      	lsls	r2, r2, #26
 8004662:	d42b      	bmi.n	80046bc <_printf_common+0xb0>
 8004664:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004668:	4641      	mov	r1, r8
 800466a:	4638      	mov	r0, r7
 800466c:	47c8      	blx	r9
 800466e:	3001      	adds	r0, #1
 8004670:	d01e      	beq.n	80046b0 <_printf_common+0xa4>
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	6922      	ldr	r2, [r4, #16]
 8004676:	f003 0306 	and.w	r3, r3, #6
 800467a:	2b04      	cmp	r3, #4
 800467c:	bf02      	ittt	eq
 800467e:	68e5      	ldreq	r5, [r4, #12]
 8004680:	6833      	ldreq	r3, [r6, #0]
 8004682:	1aed      	subeq	r5, r5, r3
 8004684:	68a3      	ldr	r3, [r4, #8]
 8004686:	bf0c      	ite	eq
 8004688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800468c:	2500      	movne	r5, #0
 800468e:	4293      	cmp	r3, r2
 8004690:	bfc4      	itt	gt
 8004692:	1a9b      	subgt	r3, r3, r2
 8004694:	18ed      	addgt	r5, r5, r3
 8004696:	2600      	movs	r6, #0
 8004698:	341a      	adds	r4, #26
 800469a:	42b5      	cmp	r5, r6
 800469c:	d11a      	bne.n	80046d4 <_printf_common+0xc8>
 800469e:	2000      	movs	r0, #0
 80046a0:	e008      	b.n	80046b4 <_printf_common+0xa8>
 80046a2:	2301      	movs	r3, #1
 80046a4:	4652      	mov	r2, sl
 80046a6:	4641      	mov	r1, r8
 80046a8:	4638      	mov	r0, r7
 80046aa:	47c8      	blx	r9
 80046ac:	3001      	adds	r0, #1
 80046ae:	d103      	bne.n	80046b8 <_printf_common+0xac>
 80046b0:	f04f 30ff 	mov.w	r0, #4294967295
 80046b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b8:	3501      	adds	r5, #1
 80046ba:	e7c6      	b.n	800464a <_printf_common+0x3e>
 80046bc:	18e1      	adds	r1, r4, r3
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	2030      	movs	r0, #48	@ 0x30
 80046c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046c6:	4422      	add	r2, r4
 80046c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046d0:	3302      	adds	r3, #2
 80046d2:	e7c7      	b.n	8004664 <_printf_common+0x58>
 80046d4:	2301      	movs	r3, #1
 80046d6:	4622      	mov	r2, r4
 80046d8:	4641      	mov	r1, r8
 80046da:	4638      	mov	r0, r7
 80046dc:	47c8      	blx	r9
 80046de:	3001      	adds	r0, #1
 80046e0:	d0e6      	beq.n	80046b0 <_printf_common+0xa4>
 80046e2:	3601      	adds	r6, #1
 80046e4:	e7d9      	b.n	800469a <_printf_common+0x8e>
	...

080046e8 <_printf_i>:
 80046e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046ec:	7e0f      	ldrb	r7, [r1, #24]
 80046ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046f0:	2f78      	cmp	r7, #120	@ 0x78
 80046f2:	4691      	mov	r9, r2
 80046f4:	4680      	mov	r8, r0
 80046f6:	460c      	mov	r4, r1
 80046f8:	469a      	mov	sl, r3
 80046fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046fe:	d807      	bhi.n	8004710 <_printf_i+0x28>
 8004700:	2f62      	cmp	r7, #98	@ 0x62
 8004702:	d80a      	bhi.n	800471a <_printf_i+0x32>
 8004704:	2f00      	cmp	r7, #0
 8004706:	f000 80d2 	beq.w	80048ae <_printf_i+0x1c6>
 800470a:	2f58      	cmp	r7, #88	@ 0x58
 800470c:	f000 80b9 	beq.w	8004882 <_printf_i+0x19a>
 8004710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004714:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004718:	e03a      	b.n	8004790 <_printf_i+0xa8>
 800471a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800471e:	2b15      	cmp	r3, #21
 8004720:	d8f6      	bhi.n	8004710 <_printf_i+0x28>
 8004722:	a101      	add	r1, pc, #4	@ (adr r1, 8004728 <_printf_i+0x40>)
 8004724:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004728:	08004781 	.word	0x08004781
 800472c:	08004795 	.word	0x08004795
 8004730:	08004711 	.word	0x08004711
 8004734:	08004711 	.word	0x08004711
 8004738:	08004711 	.word	0x08004711
 800473c:	08004711 	.word	0x08004711
 8004740:	08004795 	.word	0x08004795
 8004744:	08004711 	.word	0x08004711
 8004748:	08004711 	.word	0x08004711
 800474c:	08004711 	.word	0x08004711
 8004750:	08004711 	.word	0x08004711
 8004754:	08004895 	.word	0x08004895
 8004758:	080047bf 	.word	0x080047bf
 800475c:	0800484f 	.word	0x0800484f
 8004760:	08004711 	.word	0x08004711
 8004764:	08004711 	.word	0x08004711
 8004768:	080048b7 	.word	0x080048b7
 800476c:	08004711 	.word	0x08004711
 8004770:	080047bf 	.word	0x080047bf
 8004774:	08004711 	.word	0x08004711
 8004778:	08004711 	.word	0x08004711
 800477c:	08004857 	.word	0x08004857
 8004780:	6833      	ldr	r3, [r6, #0]
 8004782:	1d1a      	adds	r2, r3, #4
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6032      	str	r2, [r6, #0]
 8004788:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800478c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004790:	2301      	movs	r3, #1
 8004792:	e09d      	b.n	80048d0 <_printf_i+0x1e8>
 8004794:	6833      	ldr	r3, [r6, #0]
 8004796:	6820      	ldr	r0, [r4, #0]
 8004798:	1d19      	adds	r1, r3, #4
 800479a:	6031      	str	r1, [r6, #0]
 800479c:	0606      	lsls	r6, r0, #24
 800479e:	d501      	bpl.n	80047a4 <_printf_i+0xbc>
 80047a0:	681d      	ldr	r5, [r3, #0]
 80047a2:	e003      	b.n	80047ac <_printf_i+0xc4>
 80047a4:	0645      	lsls	r5, r0, #25
 80047a6:	d5fb      	bpl.n	80047a0 <_printf_i+0xb8>
 80047a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047ac:	2d00      	cmp	r5, #0
 80047ae:	da03      	bge.n	80047b8 <_printf_i+0xd0>
 80047b0:	232d      	movs	r3, #45	@ 0x2d
 80047b2:	426d      	negs	r5, r5
 80047b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047b8:	4859      	ldr	r0, [pc, #356]	@ (8004920 <_printf_i+0x238>)
 80047ba:	230a      	movs	r3, #10
 80047bc:	e011      	b.n	80047e2 <_printf_i+0xfa>
 80047be:	6821      	ldr	r1, [r4, #0]
 80047c0:	6833      	ldr	r3, [r6, #0]
 80047c2:	0608      	lsls	r0, r1, #24
 80047c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80047c8:	d402      	bmi.n	80047d0 <_printf_i+0xe8>
 80047ca:	0649      	lsls	r1, r1, #25
 80047cc:	bf48      	it	mi
 80047ce:	b2ad      	uxthmi	r5, r5
 80047d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80047d2:	4853      	ldr	r0, [pc, #332]	@ (8004920 <_printf_i+0x238>)
 80047d4:	6033      	str	r3, [r6, #0]
 80047d6:	bf14      	ite	ne
 80047d8:	230a      	movne	r3, #10
 80047da:	2308      	moveq	r3, #8
 80047dc:	2100      	movs	r1, #0
 80047de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047e2:	6866      	ldr	r6, [r4, #4]
 80047e4:	60a6      	str	r6, [r4, #8]
 80047e6:	2e00      	cmp	r6, #0
 80047e8:	bfa2      	ittt	ge
 80047ea:	6821      	ldrge	r1, [r4, #0]
 80047ec:	f021 0104 	bicge.w	r1, r1, #4
 80047f0:	6021      	strge	r1, [r4, #0]
 80047f2:	b90d      	cbnz	r5, 80047f8 <_printf_i+0x110>
 80047f4:	2e00      	cmp	r6, #0
 80047f6:	d04b      	beq.n	8004890 <_printf_i+0x1a8>
 80047f8:	4616      	mov	r6, r2
 80047fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80047fe:	fb03 5711 	mls	r7, r3, r1, r5
 8004802:	5dc7      	ldrb	r7, [r0, r7]
 8004804:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004808:	462f      	mov	r7, r5
 800480a:	42bb      	cmp	r3, r7
 800480c:	460d      	mov	r5, r1
 800480e:	d9f4      	bls.n	80047fa <_printf_i+0x112>
 8004810:	2b08      	cmp	r3, #8
 8004812:	d10b      	bne.n	800482c <_printf_i+0x144>
 8004814:	6823      	ldr	r3, [r4, #0]
 8004816:	07df      	lsls	r7, r3, #31
 8004818:	d508      	bpl.n	800482c <_printf_i+0x144>
 800481a:	6923      	ldr	r3, [r4, #16]
 800481c:	6861      	ldr	r1, [r4, #4]
 800481e:	4299      	cmp	r1, r3
 8004820:	bfde      	ittt	le
 8004822:	2330      	movle	r3, #48	@ 0x30
 8004824:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004828:	f106 36ff 	addle.w	r6, r6, #4294967295
 800482c:	1b92      	subs	r2, r2, r6
 800482e:	6122      	str	r2, [r4, #16]
 8004830:	f8cd a000 	str.w	sl, [sp]
 8004834:	464b      	mov	r3, r9
 8004836:	aa03      	add	r2, sp, #12
 8004838:	4621      	mov	r1, r4
 800483a:	4640      	mov	r0, r8
 800483c:	f7ff fee6 	bl	800460c <_printf_common>
 8004840:	3001      	adds	r0, #1
 8004842:	d14a      	bne.n	80048da <_printf_i+0x1f2>
 8004844:	f04f 30ff 	mov.w	r0, #4294967295
 8004848:	b004      	add	sp, #16
 800484a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	f043 0320 	orr.w	r3, r3, #32
 8004854:	6023      	str	r3, [r4, #0]
 8004856:	4833      	ldr	r0, [pc, #204]	@ (8004924 <_printf_i+0x23c>)
 8004858:	2778      	movs	r7, #120	@ 0x78
 800485a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800485e:	6823      	ldr	r3, [r4, #0]
 8004860:	6831      	ldr	r1, [r6, #0]
 8004862:	061f      	lsls	r7, r3, #24
 8004864:	f851 5b04 	ldr.w	r5, [r1], #4
 8004868:	d402      	bmi.n	8004870 <_printf_i+0x188>
 800486a:	065f      	lsls	r7, r3, #25
 800486c:	bf48      	it	mi
 800486e:	b2ad      	uxthmi	r5, r5
 8004870:	6031      	str	r1, [r6, #0]
 8004872:	07d9      	lsls	r1, r3, #31
 8004874:	bf44      	itt	mi
 8004876:	f043 0320 	orrmi.w	r3, r3, #32
 800487a:	6023      	strmi	r3, [r4, #0]
 800487c:	b11d      	cbz	r5, 8004886 <_printf_i+0x19e>
 800487e:	2310      	movs	r3, #16
 8004880:	e7ac      	b.n	80047dc <_printf_i+0xf4>
 8004882:	4827      	ldr	r0, [pc, #156]	@ (8004920 <_printf_i+0x238>)
 8004884:	e7e9      	b.n	800485a <_printf_i+0x172>
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	f023 0320 	bic.w	r3, r3, #32
 800488c:	6023      	str	r3, [r4, #0]
 800488e:	e7f6      	b.n	800487e <_printf_i+0x196>
 8004890:	4616      	mov	r6, r2
 8004892:	e7bd      	b.n	8004810 <_printf_i+0x128>
 8004894:	6833      	ldr	r3, [r6, #0]
 8004896:	6825      	ldr	r5, [r4, #0]
 8004898:	6961      	ldr	r1, [r4, #20]
 800489a:	1d18      	adds	r0, r3, #4
 800489c:	6030      	str	r0, [r6, #0]
 800489e:	062e      	lsls	r6, r5, #24
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	d501      	bpl.n	80048a8 <_printf_i+0x1c0>
 80048a4:	6019      	str	r1, [r3, #0]
 80048a6:	e002      	b.n	80048ae <_printf_i+0x1c6>
 80048a8:	0668      	lsls	r0, r5, #25
 80048aa:	d5fb      	bpl.n	80048a4 <_printf_i+0x1bc>
 80048ac:	8019      	strh	r1, [r3, #0]
 80048ae:	2300      	movs	r3, #0
 80048b0:	6123      	str	r3, [r4, #16]
 80048b2:	4616      	mov	r6, r2
 80048b4:	e7bc      	b.n	8004830 <_printf_i+0x148>
 80048b6:	6833      	ldr	r3, [r6, #0]
 80048b8:	1d1a      	adds	r2, r3, #4
 80048ba:	6032      	str	r2, [r6, #0]
 80048bc:	681e      	ldr	r6, [r3, #0]
 80048be:	6862      	ldr	r2, [r4, #4]
 80048c0:	2100      	movs	r1, #0
 80048c2:	4630      	mov	r0, r6
 80048c4:	f7fb fca4 	bl	8000210 <memchr>
 80048c8:	b108      	cbz	r0, 80048ce <_printf_i+0x1e6>
 80048ca:	1b80      	subs	r0, r0, r6
 80048cc:	6060      	str	r0, [r4, #4]
 80048ce:	6863      	ldr	r3, [r4, #4]
 80048d0:	6123      	str	r3, [r4, #16]
 80048d2:	2300      	movs	r3, #0
 80048d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048d8:	e7aa      	b.n	8004830 <_printf_i+0x148>
 80048da:	6923      	ldr	r3, [r4, #16]
 80048dc:	4632      	mov	r2, r6
 80048de:	4649      	mov	r1, r9
 80048e0:	4640      	mov	r0, r8
 80048e2:	47d0      	blx	sl
 80048e4:	3001      	adds	r0, #1
 80048e6:	d0ad      	beq.n	8004844 <_printf_i+0x15c>
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	079b      	lsls	r3, r3, #30
 80048ec:	d413      	bmi.n	8004916 <_printf_i+0x22e>
 80048ee:	68e0      	ldr	r0, [r4, #12]
 80048f0:	9b03      	ldr	r3, [sp, #12]
 80048f2:	4298      	cmp	r0, r3
 80048f4:	bfb8      	it	lt
 80048f6:	4618      	movlt	r0, r3
 80048f8:	e7a6      	b.n	8004848 <_printf_i+0x160>
 80048fa:	2301      	movs	r3, #1
 80048fc:	4632      	mov	r2, r6
 80048fe:	4649      	mov	r1, r9
 8004900:	4640      	mov	r0, r8
 8004902:	47d0      	blx	sl
 8004904:	3001      	adds	r0, #1
 8004906:	d09d      	beq.n	8004844 <_printf_i+0x15c>
 8004908:	3501      	adds	r5, #1
 800490a:	68e3      	ldr	r3, [r4, #12]
 800490c:	9903      	ldr	r1, [sp, #12]
 800490e:	1a5b      	subs	r3, r3, r1
 8004910:	42ab      	cmp	r3, r5
 8004912:	dcf2      	bgt.n	80048fa <_printf_i+0x212>
 8004914:	e7eb      	b.n	80048ee <_printf_i+0x206>
 8004916:	2500      	movs	r5, #0
 8004918:	f104 0619 	add.w	r6, r4, #25
 800491c:	e7f5      	b.n	800490a <_printf_i+0x222>
 800491e:	bf00      	nop
 8004920:	08005055 	.word	0x08005055
 8004924:	08005066 	.word	0x08005066

08004928 <__sflush_r>:
 8004928:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800492c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004930:	0716      	lsls	r6, r2, #28
 8004932:	4605      	mov	r5, r0
 8004934:	460c      	mov	r4, r1
 8004936:	d454      	bmi.n	80049e2 <__sflush_r+0xba>
 8004938:	684b      	ldr	r3, [r1, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	dc02      	bgt.n	8004944 <__sflush_r+0x1c>
 800493e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004940:	2b00      	cmp	r3, #0
 8004942:	dd48      	ble.n	80049d6 <__sflush_r+0xae>
 8004944:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004946:	2e00      	cmp	r6, #0
 8004948:	d045      	beq.n	80049d6 <__sflush_r+0xae>
 800494a:	2300      	movs	r3, #0
 800494c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004950:	682f      	ldr	r7, [r5, #0]
 8004952:	6a21      	ldr	r1, [r4, #32]
 8004954:	602b      	str	r3, [r5, #0]
 8004956:	d030      	beq.n	80049ba <__sflush_r+0x92>
 8004958:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800495a:	89a3      	ldrh	r3, [r4, #12]
 800495c:	0759      	lsls	r1, r3, #29
 800495e:	d505      	bpl.n	800496c <__sflush_r+0x44>
 8004960:	6863      	ldr	r3, [r4, #4]
 8004962:	1ad2      	subs	r2, r2, r3
 8004964:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004966:	b10b      	cbz	r3, 800496c <__sflush_r+0x44>
 8004968:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800496a:	1ad2      	subs	r2, r2, r3
 800496c:	2300      	movs	r3, #0
 800496e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004970:	6a21      	ldr	r1, [r4, #32]
 8004972:	4628      	mov	r0, r5
 8004974:	47b0      	blx	r6
 8004976:	1c43      	adds	r3, r0, #1
 8004978:	89a3      	ldrh	r3, [r4, #12]
 800497a:	d106      	bne.n	800498a <__sflush_r+0x62>
 800497c:	6829      	ldr	r1, [r5, #0]
 800497e:	291d      	cmp	r1, #29
 8004980:	d82b      	bhi.n	80049da <__sflush_r+0xb2>
 8004982:	4a2a      	ldr	r2, [pc, #168]	@ (8004a2c <__sflush_r+0x104>)
 8004984:	410a      	asrs	r2, r1
 8004986:	07d6      	lsls	r6, r2, #31
 8004988:	d427      	bmi.n	80049da <__sflush_r+0xb2>
 800498a:	2200      	movs	r2, #0
 800498c:	6062      	str	r2, [r4, #4]
 800498e:	04d9      	lsls	r1, r3, #19
 8004990:	6922      	ldr	r2, [r4, #16]
 8004992:	6022      	str	r2, [r4, #0]
 8004994:	d504      	bpl.n	80049a0 <__sflush_r+0x78>
 8004996:	1c42      	adds	r2, r0, #1
 8004998:	d101      	bne.n	800499e <__sflush_r+0x76>
 800499a:	682b      	ldr	r3, [r5, #0]
 800499c:	b903      	cbnz	r3, 80049a0 <__sflush_r+0x78>
 800499e:	6560      	str	r0, [r4, #84]	@ 0x54
 80049a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049a2:	602f      	str	r7, [r5, #0]
 80049a4:	b1b9      	cbz	r1, 80049d6 <__sflush_r+0xae>
 80049a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049aa:	4299      	cmp	r1, r3
 80049ac:	d002      	beq.n	80049b4 <__sflush_r+0x8c>
 80049ae:	4628      	mov	r0, r5
 80049b0:	f7ff fbf2 	bl	8004198 <_free_r>
 80049b4:	2300      	movs	r3, #0
 80049b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80049b8:	e00d      	b.n	80049d6 <__sflush_r+0xae>
 80049ba:	2301      	movs	r3, #1
 80049bc:	4628      	mov	r0, r5
 80049be:	47b0      	blx	r6
 80049c0:	4602      	mov	r2, r0
 80049c2:	1c50      	adds	r0, r2, #1
 80049c4:	d1c9      	bne.n	800495a <__sflush_r+0x32>
 80049c6:	682b      	ldr	r3, [r5, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0c6      	beq.n	800495a <__sflush_r+0x32>
 80049cc:	2b1d      	cmp	r3, #29
 80049ce:	d001      	beq.n	80049d4 <__sflush_r+0xac>
 80049d0:	2b16      	cmp	r3, #22
 80049d2:	d11e      	bne.n	8004a12 <__sflush_r+0xea>
 80049d4:	602f      	str	r7, [r5, #0]
 80049d6:	2000      	movs	r0, #0
 80049d8:	e022      	b.n	8004a20 <__sflush_r+0xf8>
 80049da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049de:	b21b      	sxth	r3, r3
 80049e0:	e01b      	b.n	8004a1a <__sflush_r+0xf2>
 80049e2:	690f      	ldr	r7, [r1, #16]
 80049e4:	2f00      	cmp	r7, #0
 80049e6:	d0f6      	beq.n	80049d6 <__sflush_r+0xae>
 80049e8:	0793      	lsls	r3, r2, #30
 80049ea:	680e      	ldr	r6, [r1, #0]
 80049ec:	bf08      	it	eq
 80049ee:	694b      	ldreq	r3, [r1, #20]
 80049f0:	600f      	str	r7, [r1, #0]
 80049f2:	bf18      	it	ne
 80049f4:	2300      	movne	r3, #0
 80049f6:	eba6 0807 	sub.w	r8, r6, r7
 80049fa:	608b      	str	r3, [r1, #8]
 80049fc:	f1b8 0f00 	cmp.w	r8, #0
 8004a00:	dde9      	ble.n	80049d6 <__sflush_r+0xae>
 8004a02:	6a21      	ldr	r1, [r4, #32]
 8004a04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004a06:	4643      	mov	r3, r8
 8004a08:	463a      	mov	r2, r7
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	47b0      	blx	r6
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	dc08      	bgt.n	8004a24 <__sflush_r+0xfc>
 8004a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a1a:	81a3      	strh	r3, [r4, #12]
 8004a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a24:	4407      	add	r7, r0
 8004a26:	eba8 0800 	sub.w	r8, r8, r0
 8004a2a:	e7e7      	b.n	80049fc <__sflush_r+0xd4>
 8004a2c:	dfbffffe 	.word	0xdfbffffe

08004a30 <_fflush_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	690b      	ldr	r3, [r1, #16]
 8004a34:	4605      	mov	r5, r0
 8004a36:	460c      	mov	r4, r1
 8004a38:	b913      	cbnz	r3, 8004a40 <_fflush_r+0x10>
 8004a3a:	2500      	movs	r5, #0
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	bd38      	pop	{r3, r4, r5, pc}
 8004a40:	b118      	cbz	r0, 8004a4a <_fflush_r+0x1a>
 8004a42:	6a03      	ldr	r3, [r0, #32]
 8004a44:	b90b      	cbnz	r3, 8004a4a <_fflush_r+0x1a>
 8004a46:	f7ff f9ad 	bl	8003da4 <__sinit>
 8004a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f3      	beq.n	8004a3a <_fflush_r+0xa>
 8004a52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a54:	07d0      	lsls	r0, r2, #31
 8004a56:	d404      	bmi.n	8004a62 <_fflush_r+0x32>
 8004a58:	0599      	lsls	r1, r3, #22
 8004a5a:	d402      	bmi.n	8004a62 <_fflush_r+0x32>
 8004a5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a5e:	f7ff fb98 	bl	8004192 <__retarget_lock_acquire_recursive>
 8004a62:	4628      	mov	r0, r5
 8004a64:	4621      	mov	r1, r4
 8004a66:	f7ff ff5f 	bl	8004928 <__sflush_r>
 8004a6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a6c:	07da      	lsls	r2, r3, #31
 8004a6e:	4605      	mov	r5, r0
 8004a70:	d4e4      	bmi.n	8004a3c <_fflush_r+0xc>
 8004a72:	89a3      	ldrh	r3, [r4, #12]
 8004a74:	059b      	lsls	r3, r3, #22
 8004a76:	d4e1      	bmi.n	8004a3c <_fflush_r+0xc>
 8004a78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a7a:	f7ff fb8b 	bl	8004194 <__retarget_lock_release_recursive>
 8004a7e:	e7dd      	b.n	8004a3c <_fflush_r+0xc>

08004a80 <__swhatbuf_r>:
 8004a80:	b570      	push	{r4, r5, r6, lr}
 8004a82:	460c      	mov	r4, r1
 8004a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a88:	2900      	cmp	r1, #0
 8004a8a:	b096      	sub	sp, #88	@ 0x58
 8004a8c:	4615      	mov	r5, r2
 8004a8e:	461e      	mov	r6, r3
 8004a90:	da0d      	bge.n	8004aae <__swhatbuf_r+0x2e>
 8004a92:	89a3      	ldrh	r3, [r4, #12]
 8004a94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004a98:	f04f 0100 	mov.w	r1, #0
 8004a9c:	bf14      	ite	ne
 8004a9e:	2340      	movne	r3, #64	@ 0x40
 8004aa0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	6031      	str	r1, [r6, #0]
 8004aa8:	602b      	str	r3, [r5, #0]
 8004aaa:	b016      	add	sp, #88	@ 0x58
 8004aac:	bd70      	pop	{r4, r5, r6, pc}
 8004aae:	466a      	mov	r2, sp
 8004ab0:	f000 f848 	bl	8004b44 <_fstat_r>
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	dbec      	blt.n	8004a92 <__swhatbuf_r+0x12>
 8004ab8:	9901      	ldr	r1, [sp, #4]
 8004aba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004abe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004ac2:	4259      	negs	r1, r3
 8004ac4:	4159      	adcs	r1, r3
 8004ac6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004aca:	e7eb      	b.n	8004aa4 <__swhatbuf_r+0x24>

08004acc <__smakebuf_r>:
 8004acc:	898b      	ldrh	r3, [r1, #12]
 8004ace:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ad0:	079d      	lsls	r5, r3, #30
 8004ad2:	4606      	mov	r6, r0
 8004ad4:	460c      	mov	r4, r1
 8004ad6:	d507      	bpl.n	8004ae8 <__smakebuf_r+0x1c>
 8004ad8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	6123      	str	r3, [r4, #16]
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	6163      	str	r3, [r4, #20]
 8004ae4:	b003      	add	sp, #12
 8004ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ae8:	ab01      	add	r3, sp, #4
 8004aea:	466a      	mov	r2, sp
 8004aec:	f7ff ffc8 	bl	8004a80 <__swhatbuf_r>
 8004af0:	9f00      	ldr	r7, [sp, #0]
 8004af2:	4605      	mov	r5, r0
 8004af4:	4639      	mov	r1, r7
 8004af6:	4630      	mov	r0, r6
 8004af8:	f7ff fbba 	bl	8004270 <_malloc_r>
 8004afc:	b948      	cbnz	r0, 8004b12 <__smakebuf_r+0x46>
 8004afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b02:	059a      	lsls	r2, r3, #22
 8004b04:	d4ee      	bmi.n	8004ae4 <__smakebuf_r+0x18>
 8004b06:	f023 0303 	bic.w	r3, r3, #3
 8004b0a:	f043 0302 	orr.w	r3, r3, #2
 8004b0e:	81a3      	strh	r3, [r4, #12]
 8004b10:	e7e2      	b.n	8004ad8 <__smakebuf_r+0xc>
 8004b12:	89a3      	ldrh	r3, [r4, #12]
 8004b14:	6020      	str	r0, [r4, #0]
 8004b16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b1a:	81a3      	strh	r3, [r4, #12]
 8004b1c:	9b01      	ldr	r3, [sp, #4]
 8004b1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004b22:	b15b      	cbz	r3, 8004b3c <__smakebuf_r+0x70>
 8004b24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b28:	4630      	mov	r0, r6
 8004b2a:	f000 f81d 	bl	8004b68 <_isatty_r>
 8004b2e:	b128      	cbz	r0, 8004b3c <__smakebuf_r+0x70>
 8004b30:	89a3      	ldrh	r3, [r4, #12]
 8004b32:	f023 0303 	bic.w	r3, r3, #3
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	81a3      	strh	r3, [r4, #12]
 8004b3c:	89a3      	ldrh	r3, [r4, #12]
 8004b3e:	431d      	orrs	r5, r3
 8004b40:	81a5      	strh	r5, [r4, #12]
 8004b42:	e7cf      	b.n	8004ae4 <__smakebuf_r+0x18>

08004b44 <_fstat_r>:
 8004b44:	b538      	push	{r3, r4, r5, lr}
 8004b46:	4d07      	ldr	r5, [pc, #28]	@ (8004b64 <_fstat_r+0x20>)
 8004b48:	2300      	movs	r3, #0
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	4608      	mov	r0, r1
 8004b4e:	4611      	mov	r1, r2
 8004b50:	602b      	str	r3, [r5, #0]
 8004b52:	f7fc fe03 	bl	800175c <_fstat>
 8004b56:	1c43      	adds	r3, r0, #1
 8004b58:	d102      	bne.n	8004b60 <_fstat_r+0x1c>
 8004b5a:	682b      	ldr	r3, [r5, #0]
 8004b5c:	b103      	cbz	r3, 8004b60 <_fstat_r+0x1c>
 8004b5e:	6023      	str	r3, [r4, #0]
 8004b60:	bd38      	pop	{r3, r4, r5, pc}
 8004b62:	bf00      	nop
 8004b64:	20000350 	.word	0x20000350

08004b68 <_isatty_r>:
 8004b68:	b538      	push	{r3, r4, r5, lr}
 8004b6a:	4d06      	ldr	r5, [pc, #24]	@ (8004b84 <_isatty_r+0x1c>)
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	4604      	mov	r4, r0
 8004b70:	4608      	mov	r0, r1
 8004b72:	602b      	str	r3, [r5, #0]
 8004b74:	f7fc fe02 	bl	800177c <_isatty>
 8004b78:	1c43      	adds	r3, r0, #1
 8004b7a:	d102      	bne.n	8004b82 <_isatty_r+0x1a>
 8004b7c:	682b      	ldr	r3, [r5, #0]
 8004b7e:	b103      	cbz	r3, 8004b82 <_isatty_r+0x1a>
 8004b80:	6023      	str	r3, [r4, #0]
 8004b82:	bd38      	pop	{r3, r4, r5, pc}
 8004b84:	20000350 	.word	0x20000350

08004b88 <_sbrk_r>:
 8004b88:	b538      	push	{r3, r4, r5, lr}
 8004b8a:	4d06      	ldr	r5, [pc, #24]	@ (8004ba4 <_sbrk_r+0x1c>)
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	4604      	mov	r4, r0
 8004b90:	4608      	mov	r0, r1
 8004b92:	602b      	str	r3, [r5, #0]
 8004b94:	f7fc fe0a 	bl	80017ac <_sbrk>
 8004b98:	1c43      	adds	r3, r0, #1
 8004b9a:	d102      	bne.n	8004ba2 <_sbrk_r+0x1a>
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	b103      	cbz	r3, 8004ba2 <_sbrk_r+0x1a>
 8004ba0:	6023      	str	r3, [r4, #0]
 8004ba2:	bd38      	pop	{r3, r4, r5, pc}
 8004ba4:	20000350 	.word	0x20000350

08004ba8 <_init>:
 8004ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004baa:	bf00      	nop
 8004bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bae:	bc08      	pop	{r3}
 8004bb0:	469e      	mov	lr, r3
 8004bb2:	4770      	bx	lr

08004bb4 <_fini>:
 8004bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb6:	bf00      	nop
 8004bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bba:	bc08      	pop	{r3}
 8004bbc:	469e      	mov	lr, r3
 8004bbe:	4770      	bx	lr
