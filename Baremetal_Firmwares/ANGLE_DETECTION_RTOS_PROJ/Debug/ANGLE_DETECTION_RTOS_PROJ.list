
ANGLE_DETECTION_RTOS_PROJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbf4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  0800ddc8  0800ddc8  0000edc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e580  0800e580  000101f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e580  0800e580  0000f580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e588  0800e588  000101f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e588  0800e588  0000f588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e58c  0800e58c  0000f58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800e590  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001312c  200001f8  0800e788  000101f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013324  0800e788  00010324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ae0  00000000  00000000  00010228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000386d  00000000  00000000  00027d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  0002b578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b5  00000000  00000000  0002cc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025982  00000000  00000000  0002ddd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c022  00000000  00000000  00053757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df663  00000000  00000000  0006f779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014eddc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076fc  00000000  00000000  0014ee20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  0015651c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ddac 	.word	0x0800ddac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800ddac 	.word	0x0800ddac

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <CalculateAccAngle>:
#include "CalculateAngle.h"

Struct_Angle Angle;

void CalculateAccAngle(Struct_Angle* Angle, Struct_MPU6050* MPU6050)
{
 8000f78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
	Angle->acc_roll  = atan(-MPU6050->acc_x / sqrt(pow(MPU6050->acc_y,2) + pow(MPU6050->acc_z,2))) * RADIAN_TO_DEGREE;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f8a:	eef1 7a67 	vneg.f32	s15, s15
 8000f8e:	ee17 3a90 	vmov	r3, s15
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff faf8 	bl	8000588 <__aeabi_f2d>
 8000f98:	4604      	mov	r4, r0
 8000f9a:	460d      	mov	r5, r1
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff faf1 	bl	8000588 <__aeabi_f2d>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	ed9f 1b57 	vldr	d1, [pc, #348]	@ 8001108 <CalculateAccAngle+0x190>
 8000fae:	ec43 2b10 	vmov	d0, r2, r3
 8000fb2:	f00a fd03 	bl	800b9bc <pow>
 8000fb6:	ec59 8b10 	vmov	r8, r9, d0
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fae2 	bl	8000588 <__aeabi_f2d>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 8001108 <CalculateAccAngle+0x190>
 8000fcc:	ec43 2b10 	vmov	d0, r2, r3
 8000fd0:	f00a fcf4 	bl	800b9bc <pow>
 8000fd4:	ec53 2b10 	vmov	r2, r3, d0
 8000fd8:	4640      	mov	r0, r8
 8000fda:	4649      	mov	r1, r9
 8000fdc:	f7ff f976 	bl	80002cc <__adddf3>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	ec43 2b17 	vmov	d7, r2, r3
 8000fe8:	eeb0 0a47 	vmov.f32	s0, s14
 8000fec:	eef0 0a67 	vmov.f32	s1, s15
 8000ff0:	f00a fd54 	bl	800ba9c <sqrt>
 8000ff4:	ec53 2b10 	vmov	r2, r3, d0
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	4629      	mov	r1, r5
 8000ffc:	f7ff fc46 	bl	800088c <__aeabi_ddiv>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	ec43 2b17 	vmov	d7, r2, r3
 8001008:	eeb0 0a47 	vmov.f32	s0, s14
 800100c:	eef0 0a67 	vmov.f32	s1, s15
 8001010:	f00a fd72 	bl	800baf8 <atan>
 8001014:	ec51 0b10 	vmov	r0, r1, d0
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	4b3e      	ldr	r3, [pc, #248]	@ (8001118 <CalculateAccAngle+0x1a0>)
 800101e:	f7ff fb0b 	bl	8000638 <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	a339      	add	r3, pc, #228	@ (adr r3, 8001110 <CalculateAccAngle+0x198>)
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	f7ff fc2c 	bl	800088c <__aeabi_ddiv>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f7ff fdd4 	bl	8000be8 <__aeabi_d2f>
 8001040:	4602      	mov	r2, r0
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	601a      	str	r2, [r3, #0]
	Angle->acc_pitch = atan(MPU6050->acc_y / sqrt(pow(MPU6050->acc_x,2) + pow(MPU6050->acc_z,2))) * RADIAN_TO_DEGREE;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fa9c 	bl	8000588 <__aeabi_f2d>
 8001050:	4604      	mov	r4, r0
 8001052:	460d      	mov	r5, r1
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fa95 	bl	8000588 <__aeabi_f2d>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	ed9f 1b29 	vldr	d1, [pc, #164]	@ 8001108 <CalculateAccAngle+0x190>
 8001066:	ec43 2b10 	vmov	d0, r2, r3
 800106a:	f00a fca7 	bl	800b9bc <pow>
 800106e:	ec59 8b10 	vmov	r8, r9, d0
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fa86 	bl	8000588 <__aeabi_f2d>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8001108 <CalculateAccAngle+0x190>
 8001084:	ec43 2b10 	vmov	d0, r2, r3
 8001088:	f00a fc98 	bl	800b9bc <pow>
 800108c:	ec53 2b10 	vmov	r2, r3, d0
 8001090:	4640      	mov	r0, r8
 8001092:	4649      	mov	r1, r9
 8001094:	f7ff f91a 	bl	80002cc <__adddf3>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	ec43 2b17 	vmov	d7, r2, r3
 80010a0:	eeb0 0a47 	vmov.f32	s0, s14
 80010a4:	eef0 0a67 	vmov.f32	s1, s15
 80010a8:	f00a fcf8 	bl	800ba9c <sqrt>
 80010ac:	ec53 2b10 	vmov	r2, r3, d0
 80010b0:	4620      	mov	r0, r4
 80010b2:	4629      	mov	r1, r5
 80010b4:	f7ff fbea 	bl	800088c <__aeabi_ddiv>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	ec43 2b17 	vmov	d7, r2, r3
 80010c0:	eeb0 0a47 	vmov.f32	s0, s14
 80010c4:	eef0 0a67 	vmov.f32	s1, s15
 80010c8:	f00a fd16 	bl	800baf8 <atan>
 80010cc:	ec51 0b10 	vmov	r0, r1, d0
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <CalculateAccAngle+0x1a0>)
 80010d6:	f7ff faaf 	bl	8000638 <__aeabi_dmul>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4610      	mov	r0, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	a30b      	add	r3, pc, #44	@ (adr r3, 8001110 <CalculateAccAngle+0x198>)
 80010e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e8:	f7ff fbd0 	bl	800088c <__aeabi_ddiv>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4610      	mov	r0, r2
 80010f2:	4619      	mov	r1, r3
 80010f4:	f7ff fd78 	bl	8000be8 <__aeabi_d2f>
 80010f8:	4602      	mov	r2, r0
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	605a      	str	r2, [r3, #4]
	//	Angle->acc_yaw = atan(sqrt(pow(MPU6050->acc_x, 2) + pow(MPU6050->acc_y, 2)) / MPU6050->acc_z) * RADIAN_TO_DEGREE;
	//Can't use Angle->acc_yaw there is no reliability. It's based on my personal experimental view.
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001108:	00000000 	.word	0x00000000
 800110c:	40000000 	.word	0x40000000
 8001110:	00000000 	.word	0x00000000
 8001114:	400921fb 	.word	0x400921fb
 8001118:	40668000 	.word	0x40668000

0800111c <CalculateGyroAngle>:

static float dt = 1/200.f; //Sample rate is 200Hz
void CalculateGyroAngle(Struct_Angle* Angle, Struct_MPU6050* MPU6050)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
	Angle->gyro_roll  += MPU6050->gyro_y * dt;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	ed93 7a03 	vldr	s14, [r3, #12]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8001132:	4b18      	ldr	r3, [pc, #96]	@ (8001194 <CalculateGyroAngle+0x78>)
 8001134:	edd3 7a00 	vldr	s15, [r3]
 8001138:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800113c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	edc3 7a03 	vstr	s15, [r3, #12]
	Angle->gyro_pitch += MPU6050->gyro_x * dt;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	ed93 7a04 	vldr	s14, [r3, #16]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	edd3 6a08 	vldr	s13, [r3, #32]
 8001152:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <CalculateGyroAngle+0x78>)
 8001154:	edd3 7a00 	vldr	s15, [r3]
 8001158:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800115c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	edc3 7a04 	vstr	s15, [r3, #16]
	Angle->gyro_yaw   += MPU6050->gyro_z * dt;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	ed93 7a05 	vldr	s14, [r3, #20]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001172:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <CalculateGyroAngle+0x78>)
 8001174:	edd3 7a00 	vldr	s15, [r3]
 8001178:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800117c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000000 	.word	0x20000000

08001198 <CalculateCompliFilter>:

void CalculateCompliFilter(Struct_Angle* Angle, Struct_MPU6050* MPU6050)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
	CalculateAccAngle(Angle, MPU6050); //Prepare Acc Angle before using Complimentary Filter.
 80011a2:	6839      	ldr	r1, [r7, #0]
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff fee7 	bl	8000f78 <CalculateAccAngle>

	static float alpha = 0.96f;
	Angle->ComFilt_roll  = alpha*(MPU6050->gyro_y * dt + Angle->ComFilt_roll) + (1-alpha) * Angle->acc_roll;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80011b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001260 <CalculateCompliFilter+0xc8>)
 80011b2:	edd3 7a00 	vldr	s15, [r3]
 80011b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	edd3 7a06 	vldr	s15, [r3, #24]
 80011c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011c4:	4b27      	ldr	r3, [pc, #156]	@ (8001264 <CalculateCompliFilter+0xcc>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ce:	4b25      	ldr	r3, [pc, #148]	@ (8001264 <CalculateCompliFilter+0xcc>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80011d8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	edc3 7a06 	vstr	s15, [r3, #24]
	Angle->ComFilt_pitch = alpha*(MPU6050->gyro_x * dt + Angle->ComFilt_pitch) + (1-alpha) * Angle->acc_pitch;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	ed93 7a08 	vldr	s14, [r3, #32]
 80011f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <CalculateCompliFilter+0xc8>)
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	edd3 7a07 	vldr	s15, [r3, #28]
 8001206:	ee37 7a27 	vadd.f32	s14, s14, s15
 800120a:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <CalculateCompliFilter+0xcc>)
 800120c:	edd3 7a00 	vldr	s15, [r3]
 8001210:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001214:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <CalculateCompliFilter+0xcc>)
 8001216:	edd3 7a00 	vldr	s15, [r3]
 800121a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800121e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	edd3 7a01 	vldr	s15, [r3, #4]
 8001228:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800122c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	edc3 7a07 	vstr	s15, [r3, #28]
	Angle->ComFilt_yaw   = Angle->ComFilt_yaw + MPU6050->gyro_z * dt;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	ed93 7a08 	vldr	s14, [r3, #32]
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001242:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <CalculateCompliFilter+0xc8>)
 8001244:	edd3 7a00 	vldr	s15, [r3]
 8001248:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800124c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000000 	.word	0x20000000
 8001264:	20000004 	.word	0x20000004

08001268 <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize() {
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
    devAddr = HMC5883L_DEFAULT_ADDRESS;
 800126c:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <HMC5883L_initialize+0x28>)
 800126e:	221e      	movs	r2, #30
 8001270:	701a      	strb	r2, [r3, #0]
    // write CONFIG_A register
    I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_A,
 8001272:	4b07      	ldr	r3, [pc, #28]	@ (8001290 <HMC5883L_initialize+0x28>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2270      	movs	r2, #112	@ 0x70
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f8ec 	bl	8001458 <I2Cdev_writeByte>
        (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
        (HMC5883L_RATE_15     << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
        (HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1)));

    // write CONFIG_B register
    HMC5883L_setGain(HMC5883L_GAIN_1090);
 8001280:	2001      	movs	r0, #1
 8001282:	f000 f82f 	bl	80012e4 <HMC5883L_setGain>

    // write MODE register
    HMC5883L_setMode(HMC5883L_MODE_SINGLE);
 8001286:	2001      	movs	r0, #1
 8001288:	f000 f840 	bl	800130c <HMC5883L_setMode>
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000238 	.word	0x20000238

08001294 <HMC5883L_testConnection>:

/** Verify the I2C connection.
 * Make sure the device is connected and responds as expected.
 * @return True if connection is valid, false otherwise
 */
bool HMC5883L_testConnection() {
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af02      	add	r7, sp, #8
    if (I2Cdev_readBytes(devAddr, HMC5883L_RA_ID_A, 3, buffer, 0) == 3) {
 800129a:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <HMC5883L_testConnection+0x48>)
 800129c:	7818      	ldrb	r0, [r3, #0]
 800129e:	2300      	movs	r3, #0
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <HMC5883L_testConnection+0x4c>)
 80012a4:	2203      	movs	r2, #3
 80012a6:	210a      	movs	r1, #10
 80012a8:	f000 f89e 	bl	80013e8 <I2Cdev_readBytes>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d10f      	bne.n	80012d2 <HMC5883L_testConnection+0x3e>
        return (buffer[0] == 'H' && buffer[1] == '4' && buffer[2] == '3');
 80012b2:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <HMC5883L_testConnection+0x4c>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b48      	cmp	r3, #72	@ 0x48
 80012b8:	d109      	bne.n	80012ce <HMC5883L_testConnection+0x3a>
 80012ba:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <HMC5883L_testConnection+0x4c>)
 80012bc:	785b      	ldrb	r3, [r3, #1]
 80012be:	2b34      	cmp	r3, #52	@ 0x34
 80012c0:	d105      	bne.n	80012ce <HMC5883L_testConnection+0x3a>
 80012c2:	4b07      	ldr	r3, [pc, #28]	@ (80012e0 <HMC5883L_testConnection+0x4c>)
 80012c4:	789b      	ldrb	r3, [r3, #2]
 80012c6:	2b33      	cmp	r3, #51	@ 0x33
 80012c8:	d101      	bne.n	80012ce <HMC5883L_testConnection+0x3a>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e002      	b.n	80012d4 <HMC5883L_testConnection+0x40>
 80012ce:	2300      	movs	r3, #0
 80012d0:	e000      	b.n	80012d4 <HMC5883L_testConnection+0x40>
    }
    return false;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000238 	.word	0x20000238
 80012e0:	2000023c 	.word	0x2000023c

080012e4 <HMC5883L_setGain>:
 * @see getGain()
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */
void HMC5883L_setGain(uint8_t gain) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 4-0 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_B, gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1));
 80012ee:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <HMC5883L_setGain+0x24>)
 80012f0:	7818      	ldrb	r0, [r3, #0]
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	015b      	lsls	r3, r3, #5
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	461a      	mov	r2, r3
 80012fa:	2101      	movs	r1, #1
 80012fc:	f000 f8ac 	bl	8001458 <I2Cdev_writeByte>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000238 	.word	0x20000238

0800130c <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 7-2 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
 8001316:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <HMC5883L_setMode+0x28>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	79fa      	ldrb	r2, [r7, #7]
 800131c:	2102      	movs	r1, #2
 800131e:	4618      	mov	r0, r3
 8001320:	f000 f89a 	bl	8001458 <I2Cdev_writeByte>
    mode = newMode; // track to tell if we have to clear bit 7 after a read
 8001324:	4a04      	ldr	r2, [pc, #16]	@ (8001338 <HMC5883L_setMode+0x2c>)
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	7013      	strb	r3, [r2, #0]
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000238 	.word	0x20000238
 8001338:	20000242 	.word	0x20000242

0800133c <HMC5883L_getHeading>:
 * @param x 16-bit signed integer container for X-axis heading
 * @param y 16-bit signed integer container for Y-axis heading
 * @param z 16-bit signed integer container for Z-axis heading
 * @see HMC5883L_RA_DATAX_H
 */
void HMC5883L_getHeading(int16_t *x, int16_t *y, int16_t *z) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af02      	add	r7, sp, #8
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
    I2Cdev_readBytes(devAddr, HMC5883L_RA_DATAX_H, 6, buffer, 0);
 8001348:	4b1c      	ldr	r3, [pc, #112]	@ (80013bc <HMC5883L_getHeading+0x80>)
 800134a:	7818      	ldrb	r0, [r3, #0]
 800134c:	2300      	movs	r3, #0
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	4b1b      	ldr	r3, [pc, #108]	@ (80013c0 <HMC5883L_getHeading+0x84>)
 8001352:	2206      	movs	r2, #6
 8001354:	2103      	movs	r1, #3
 8001356:	f000 f847 	bl	80013e8 <I2Cdev_readBytes>
    if (mode == HMC5883L_MODE_SINGLE) I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, HMC5883L_MODE_SINGLE << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
 800135a:	4b1a      	ldr	r3, [pc, #104]	@ (80013c4 <HMC5883L_getHeading+0x88>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d106      	bne.n	8001370 <HMC5883L_getHeading+0x34>
 8001362:	4b16      	ldr	r3, [pc, #88]	@ (80013bc <HMC5883L_getHeading+0x80>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2201      	movs	r2, #1
 8001368:	2102      	movs	r1, #2
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f874 	bl	8001458 <I2Cdev_writeByte>
    *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 8001370:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <HMC5883L_getHeading+0x84>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	021b      	lsls	r3, r3, #8
 8001376:	b21a      	sxth	r2, r3
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <HMC5883L_getHeading+0x84>)
 800137a:	785b      	ldrb	r3, [r3, #1]
 800137c:	b21b      	sxth	r3, r3
 800137e:	4313      	orrs	r3, r2
 8001380:	b21a      	sxth	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[4]) << 8) | buffer[5];
 8001386:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <HMC5883L_getHeading+0x84>)
 8001388:	791b      	ldrb	r3, [r3, #4]
 800138a:	021b      	lsls	r3, r3, #8
 800138c:	b21a      	sxth	r2, r3
 800138e:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <HMC5883L_getHeading+0x84>)
 8001390:	795b      	ldrb	r3, [r3, #5]
 8001392:	b21b      	sxth	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b21a      	sxth	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[2]) << 8) | buffer[3];
 800139c:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <HMC5883L_getHeading+0x84>)
 800139e:	789b      	ldrb	r3, [r3, #2]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <HMC5883L_getHeading+0x84>)
 80013a6:	78db      	ldrb	r3, [r3, #3]
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	801a      	strh	r2, [r3, #0]
}
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000238 	.word	0x20000238
 80013c0:	2000023c 	.word	0x2000023c
 80013c4:	20000242 	.word	0x20000242

080013c8 <I2Cdev_init>:
uint16_t I2Cdev_readTimeout = I2CDEV_DEFAULT_READ_TIMEOUT;

/** Sets device handle to use for communications
 * You can call this function and set any other device at any moment
 */
void I2Cdev_init(I2C_HandleTypeDef * hi2c){
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	I2Cdev_hi2c = hi2c;
 80013d0:	4a04      	ldr	r2, [pc, #16]	@ (80013e4 <I2Cdev_init+0x1c>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6013      	str	r3, [r2, #0]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000244 	.word	0x20000244

080013e8 <I2Cdev_readBytes>:
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
uint8_t I2Cdev_readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af02      	add	r7, sp, #8
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	4603      	mov	r3, r0
 80013f2:	71fb      	strb	r3, [r7, #7]
 80013f4:	460b      	mov	r3, r1
 80013f6:	71bb      	strb	r3, [r7, #6]
 80013f8:	4613      	mov	r3, r2
 80013fa:	717b      	strb	r3, [r7, #5]
    uint16_t tout = timeout > 0 ? timeout : I2CDEV_DEFAULT_READ_TIMEOUT;
 80013fc:	8b3b      	ldrh	r3, [r7, #24]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <I2Cdev_readBytes+0x1e>
 8001402:	8b3b      	ldrh	r3, [r7, #24]
 8001404:	e001      	b.n	800140a <I2Cdev_readBytes+0x22>
 8001406:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800140a:	81fb      	strh	r3, [r7, #14]

    HAL_I2C_Master_Transmit(I2Cdev_hi2c, devAddr << 1, &regAddr, 1, tout);
 800140c:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <I2Cdev_readBytes+0x6c>)
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	b29b      	uxth	r3, r3
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	b299      	uxth	r1, r3
 8001418:	89fb      	ldrh	r3, [r7, #14]
 800141a:	1dba      	adds	r2, r7, #6
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2301      	movs	r3, #1
 8001420:	f001 fdc4 	bl	8002fac <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(I2Cdev_hi2c, devAddr << 1, data, length, tout) == HAL_OK) return length;
 8001424:	4b0b      	ldr	r3, [pc, #44]	@ (8001454 <I2Cdev_readBytes+0x6c>)
 8001426:	6818      	ldr	r0, [r3, #0]
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	b29b      	uxth	r3, r3
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	b299      	uxth	r1, r3
 8001430:	797b      	ldrb	r3, [r7, #5]
 8001432:	b29a      	uxth	r2, r3
 8001434:	89fb      	ldrh	r3, [r7, #14]
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	4613      	mov	r3, r2
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	f001 feb4 	bl	80031a8 <HAL_I2C_Master_Receive>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <I2Cdev_readBytes+0x62>
 8001446:	797b      	ldrb	r3, [r7, #5]
 8001448:	e000      	b.n	800144c <I2Cdev_readBytes+0x64>
    return -1;
 800144a:	23ff      	movs	r3, #255	@ 0xff
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000244 	.word	0x20000244

08001458 <I2Cdev_writeByte>:
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
 8001462:	460b      	mov	r3, r1
 8001464:	71bb      	strb	r3, [r7, #6]
 8001466:	4613      	mov	r3, r2
 8001468:	717b      	strb	r3, [r7, #5]
    return I2Cdev_writeBytes(devAddr, regAddr, 1, &data);
 800146a:	1d7b      	adds	r3, r7, #5
 800146c:	79b9      	ldrb	r1, [r7, #6]
 800146e:	79f8      	ldrb	r0, [r7, #7]
 8001470:	2201      	movs	r2, #1
 8001472:	f000 f805 	bl	8001480 <I2Cdev_writeBytes>
 8001476:	4603      	mov	r3, r0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <I2Cdev_writeBytes>:
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* pData)
{
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b089      	sub	sp, #36	@ 0x24
 8001484:	af04      	add	r7, sp, #16
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	4603      	mov	r3, r0
 800148a:	71fb      	strb	r3, [r7, #7]
 800148c:	460b      	mov	r3, r1
 800148e:	71bb      	strb	r3, [r7, #6]
 8001490:	4613      	mov	r3, r2
 8001492:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(I2Cdev_hi2c, devAddr << 1, regAddr, I2C_MEMADD_SIZE_8BIT, pData, length, 1000);
 8001494:	4b0f      	ldr	r3, [pc, #60]	@ (80014d4 <I2Cdev_writeBytes+0x54>)
 8001496:	6818      	ldr	r0, [r3, #0]
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	b29b      	uxth	r3, r3
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	b299      	uxth	r1, r3
 80014a0:	79bb      	ldrb	r3, [r7, #6]
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	797b      	ldrb	r3, [r7, #5]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80014ac:	9402      	str	r4, [sp, #8]
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2301      	movs	r3, #1
 80014b6:	f002 f8a9 	bl	800360c <HAL_I2C_Mem_Write>
 80014ba:	4603      	mov	r3, r0
 80014bc:	73fb      	strb	r3, [r7, #15]
    return status == HAL_OK;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	bf0c      	ite	eq
 80014c4:	2301      	moveq	r3, #1
 80014c6:	2300      	movne	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd90      	pop	{r4, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000244 	.word	0x20000244

080014d8 <MPU6050_Writebyte>:

static float LSB_Sensitivity_ACC;
static float LSB_Sensitivity_GYRO;

void MPU6050_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af04      	add	r7, sp, #16
 80014de:	4603      	mov	r3, r0
 80014e0:	460a      	mov	r2, r1
 80014e2:	71fb      	strb	r3, [r7, #7]
 80014e4:	4613      	mov	r3, r2
 80014e6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, &val, 1, 1);
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	2301      	movs	r3, #1
 80014ee:	9302      	str	r3, [sp, #8]
 80014f0:	2301      	movs	r3, #1
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	1dbb      	adds	r3, r7, #6
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2301      	movs	r3, #1
 80014fa:	21d0      	movs	r1, #208	@ 0xd0
 80014fc:	4803      	ldr	r0, [pc, #12]	@ (800150c <MPU6050_Writebyte+0x34>)
 80014fe:	f002 f885 	bl	800360c <HAL_I2C_Mem_Write>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2000027c 	.word	0x2000027c

08001510 <MPU6050_Readbyte>:
{
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
}

void MPU6050_Readbyte(uint8_t reg_addr, uint8_t* data)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af04      	add	r7, sp, #16
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, 1, 1);
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	b29a      	uxth	r2, r3
 8001520:	2301      	movs	r3, #1
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	2301      	movs	r3, #1
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	2301      	movs	r3, #1
 800152e:	21d0      	movs	r1, #208	@ 0xd0
 8001530:	4803      	ldr	r0, [pc, #12]	@ (8001540 <MPU6050_Readbyte+0x30>)
 8001532:	f002 f965 	bl	8003800 <HAL_I2C_Mem_Read>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2000027c 	.word	0x2000027c

08001544 <MPU6050_Readbytes>:

void MPU6050_Readbytes(uint8_t reg_addr, uint8_t len, uint8_t* data)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af04      	add	r7, sp, #16
 800154a:	4603      	mov	r3, r0
 800154c:	603a      	str	r2, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
 8001550:	460b      	mov	r3, r1
 8001552:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	b29a      	uxth	r2, r3
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	b29b      	uxth	r3, r3
 800155c:	2101      	movs	r1, #1
 800155e:	9102      	str	r1, [sp, #8]
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2301      	movs	r3, #1
 8001568:	21d0      	movs	r1, #208	@ 0xd0
 800156a:	4803      	ldr	r0, [pc, #12]	@ (8001578 <MPU6050_Readbytes+0x34>)
 800156c:	f002 f948 	bl	8003800 <HAL_I2C_Mem_Read>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	2000027c 	.word	0x2000027c

0800157c <MPU6050_Initialization>:

void MPU6050_Initialization(void)
{
 800157c:	b5b0      	push	{r4, r5, r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af02      	add	r7, sp, #8
	HAL_Delay(50);
 8001582:	2032      	movs	r0, #50	@ 0x32
 8001584:	f001 f934 	bl	80027f0 <HAL_Delay>
	uint8_t who_am_i = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	707b      	strb	r3, [r7, #1]
	printf("Checking MPU6050...\n");
 800158c:	484d      	ldr	r0, [pc, #308]	@ (80016c4 <MPU6050_Initialization+0x148>)
 800158e:	f008 f8db 	bl	8009748 <puts>

	MPU6050_Readbyte(MPU6050_WHO_AM_I, &who_am_i);
 8001592:	1c7b      	adds	r3, r7, #1
 8001594:	4619      	mov	r1, r3
 8001596:	2075      	movs	r0, #117	@ 0x75
 8001598:	f7ff ffba 	bl	8001510 <MPU6050_Readbyte>
	if(who_am_i == 0x68)
 800159c:	787b      	ldrb	r3, [r7, #1]
 800159e:	2b68      	cmp	r3, #104	@ 0x68
 80015a0:	d105      	bne.n	80015ae <MPU6050_Initialization+0x32>
	{
		printf("MPU6050 who_am_i = 0x%02x...OK\n", who_am_i);
 80015a2:	787b      	ldrb	r3, [r7, #1]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4848      	ldr	r0, [pc, #288]	@ (80016c8 <MPU6050_Initialization+0x14c>)
 80015a8:	f008 f866 	bl	8009678 <iprintf>
 80015ac:	e00f      	b.n	80015ce <MPU6050_Initialization+0x52>
	}
	else
	{
		printf("ERROR!\n");
 80015ae:	4847      	ldr	r0, [pc, #284]	@ (80016cc <MPU6050_Initialization+0x150>)
 80015b0:	f008 f8ca 	bl	8009748 <puts>
		printf("MPU6050 who_am_i : 0x%02x should be 0x68\n", who_am_i);
 80015b4:	787b      	ldrb	r3, [r7, #1]
 80015b6:	4619      	mov	r1, r3
 80015b8:	4845      	ldr	r0, [pc, #276]	@ (80016d0 <MPU6050_Initialization+0x154>)
 80015ba:	f008 f85d 	bl	8009678 <iprintf>
		while(1)
		{
			printf("who am i error. Can not recognize mpu6050\n");
 80015be:	4845      	ldr	r0, [pc, #276]	@ (80016d4 <MPU6050_Initialization+0x158>)
 80015c0:	f008 f8c2 	bl	8009748 <puts>
			HAL_Delay(100);
 80015c4:	2064      	movs	r0, #100	@ 0x64
 80015c6:	f001 f913 	bl	80027f0 <HAL_Delay>
			printf("who am i error. Can not recognize mpu6050\n");
 80015ca:	bf00      	nop
 80015cc:	e7f7      	b.n	80015be <MPU6050_Initialization+0x42>
		}
	}

	//Reset the whole module before initialization
	MPU6050_Writebyte(MPU6050_PWR_MGMT_1, 0x1<<7);
 80015ce:	2180      	movs	r1, #128	@ 0x80
 80015d0:	206b      	movs	r0, #107	@ 0x6b
 80015d2:	f7ff ff81 	bl	80014d8 <MPU6050_Writebyte>
	HAL_Delay(100);
 80015d6:	2064      	movs	r0, #100	@ 0x64
 80015d8:	f001 f90a 	bl	80027f0 <HAL_Delay>

	//Power Management setting
	/* Default is sleep mode
	 * necessary to wake up MPU6050*/
	MPU6050_Writebyte(MPU6050_PWR_MGMT_1, 0x00);
 80015dc:	2100      	movs	r1, #0
 80015de:	206b      	movs	r0, #107	@ 0x6b
 80015e0:	f7ff ff7a 	bl	80014d8 <MPU6050_Writebyte>
	HAL_Delay(50);
 80015e4:	2032      	movs	r0, #50	@ 0x32
 80015e6:	f001 f903 	bl	80027f0 <HAL_Delay>

	//Sample rate divider
	/*Sample Rate = Gyroscope Output Rate / (1 + SMPRT_DIV) */
	//	MPU6050_Writebyte(MPU6050_SMPRT_DIV, 0x00); // ACC output rate is 1kHz, GYRO output rate is 8kHz
	MPU6050_Writebyte(MPU6050_SMPRT_DIV, 39); // Sample Rate = 200Hz
 80015ea:	2127      	movs	r1, #39	@ 0x27
 80015ec:	2019      	movs	r0, #25
 80015ee:	f7ff ff73 	bl	80014d8 <MPU6050_Writebyte>
	HAL_Delay(50);
 80015f2:	2032      	movs	r0, #50	@ 0x32
 80015f4:	f001 f8fc 	bl	80027f0 <HAL_Delay>

	//FSYNC and DLPF setting
	/*DLPF is set to 0*/
	MPU6050_Writebyte(MPU6050_CONFIG, 0x00);
 80015f8:	2100      	movs	r1, #0
 80015fa:	201a      	movs	r0, #26
 80015fc:	f7ff ff6c 	bl	80014d8 <MPU6050_Writebyte>
	HAL_Delay(50);
 8001600:	2032      	movs	r0, #50	@ 0x32
 8001602:	f001 f8f5 	bl	80027f0 <HAL_Delay>
	/*FS_SEL  Full Scale Range
	  0    	+-250 degree/s
	  1		+-500 degree/s
	  2		+-1000 degree/s
	  3		+-2000 degree/s	*/
	uint8_t FS_SCALE_GYRO = 0x0;
 8001606:	2300      	movs	r3, #0
 8001608:	71fb      	strb	r3, [r7, #7]
	MPU6050_Writebyte(MPU6050_GYRO_CONFIG, FS_SCALE_GYRO<<3);
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	4619      	mov	r1, r3
 8001612:	201b      	movs	r0, #27
 8001614:	f7ff ff60 	bl	80014d8 <MPU6050_Writebyte>
	HAL_Delay(50);
 8001618:	2032      	movs	r0, #50	@ 0x32
 800161a:	f001 f8e9 	bl	80027f0 <HAL_Delay>
	/*FS_SEL  Full Scale Range
	  0    	+-2g
	  1		+-4g
	  2		+-8g
	  3		+-16g	*/
	uint8_t FS_SCALE_ACC = 0x0;
 800161e:	2300      	movs	r3, #0
 8001620:	71bb      	strb	r3, [r7, #6]
	MPU6050_Writebyte(MPU6050_ACCEL_CONFIG, FS_SCALE_ACC<<3);
 8001622:	79bb      	ldrb	r3, [r7, #6]
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	b2db      	uxtb	r3, r3
 8001628:	4619      	mov	r1, r3
 800162a:	201c      	movs	r0, #28
 800162c:	f7ff ff54 	bl	80014d8 <MPU6050_Writebyte>
	HAL_Delay(50);
 8001630:	2032      	movs	r0, #50	@ 0x32
 8001632:	f001 f8dd 	bl	80027f0 <HAL_Delay>

	MPU6050_Get_LSB_Sensitivity(FS_SCALE_GYRO, FS_SCALE_ACC);
 8001636:	79ba      	ldrb	r2, [r7, #6]
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	4611      	mov	r1, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f000 f8a1 	bl	8001784 <MPU6050_Get_LSB_Sensitivity>
	printf("LSB_Sensitivity_GYRO: %f, LSB_Sensitivity_ACC: %f\n",LSB_Sensitivity_GYRO, LSB_Sensitivity_ACC);
 8001642:	4b25      	ldr	r3, [pc, #148]	@ (80016d8 <MPU6050_Initialization+0x15c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe ff9e 	bl	8000588 <__aeabi_f2d>
 800164c:	4604      	mov	r4, r0
 800164e:	460d      	mov	r5, r1
 8001650:	4b22      	ldr	r3, [pc, #136]	@ (80016dc <MPU6050_Initialization+0x160>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff97 	bl	8000588 <__aeabi_f2d>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	e9cd 2300 	strd	r2, r3, [sp]
 8001662:	4622      	mov	r2, r4
 8001664:	462b      	mov	r3, r5
 8001666:	481e      	ldr	r0, [pc, #120]	@ (80016e0 <MPU6050_Initialization+0x164>)
 8001668:	f008 f806 	bl	8009678 <iprintf>

	//Interrupt PIN setting
	uint8_t INT_LEVEL = 0x0; //0 - active high, 1 - active low
 800166c:	2300      	movs	r3, #0
 800166e:	717b      	strb	r3, [r7, #5]
	uint8_t LATCH_INT_EN = 0x0; //0 - INT 50us pulse, 1 - interrupt clear required
 8001670:	2300      	movs	r3, #0
 8001672:	713b      	strb	r3, [r7, #4]
	uint8_t INT_RD_CLEAR = 0x1; //0 - INT flag cleared by reading INT_STATUS, 1 - INT flag cleared by any read operation
 8001674:	2301      	movs	r3, #1
 8001676:	70fb      	strb	r3, [r7, #3]
	MPU6050_Writebyte(MPU6050_INT_PIN_CFG, (INT_LEVEL<<7)|(LATCH_INT_EN<<5)|(INT_RD_CLEAR<<4)); //
 8001678:	797b      	ldrb	r3, [r7, #5]
 800167a:	01db      	lsls	r3, r3, #7
 800167c:	b25a      	sxtb	r2, r3
 800167e:	793b      	ldrb	r3, [r7, #4]
 8001680:	015b      	lsls	r3, r3, #5
 8001682:	b25b      	sxtb	r3, r3
 8001684:	4313      	orrs	r3, r2
 8001686:	b25a      	sxtb	r2, r3
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	b25b      	sxtb	r3, r3
 800168e:	4313      	orrs	r3, r2
 8001690:	b25b      	sxtb	r3, r3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	4619      	mov	r1, r3
 8001696:	2037      	movs	r0, #55	@ 0x37
 8001698:	f7ff ff1e 	bl	80014d8 <MPU6050_Writebyte>
	HAL_Delay(50);
 800169c:	2032      	movs	r0, #50	@ 0x32
 800169e:	f001 f8a7 	bl	80027f0 <HAL_Delay>

	//Interrupt enable setting
	uint8_t DATA_RDY_EN = 0x1; // 1 - enable, 0 - disable
 80016a2:	2301      	movs	r3, #1
 80016a4:	70bb      	strb	r3, [r7, #2]
	MPU6050_Writebyte(MPU6050_INT_ENABLE, DATA_RDY_EN);
 80016a6:	78bb      	ldrb	r3, [r7, #2]
 80016a8:	4619      	mov	r1, r3
 80016aa:	2038      	movs	r0, #56	@ 0x38
 80016ac:	f7ff ff14 	bl	80014d8 <MPU6050_Writebyte>
	HAL_Delay(50);
 80016b0:	2032      	movs	r0, #50	@ 0x32
 80016b2:	f001 f89d 	bl	80027f0 <HAL_Delay>

	printf("MPU6050 setting is finished\n");
 80016b6:	480b      	ldr	r0, [pc, #44]	@ (80016e4 <MPU6050_Initialization+0x168>)
 80016b8:	f008 f846 	bl	8009748 <puts>
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bdb0      	pop	{r4, r5, r7, pc}
 80016c4:	0800ddc8 	.word	0x0800ddc8
 80016c8:	0800dddc 	.word	0x0800dddc
 80016cc:	0800ddfc 	.word	0x0800ddfc
 80016d0:	0800de04 	.word	0x0800de04
 80016d4:	0800de30 	.word	0x0800de30
 80016d8:	20000278 	.word	0x20000278
 80016dc:	20000274 	.word	0x20000274
 80016e0:	0800de5c 	.word	0x0800de5c
 80016e4:	0800de90 	.word	0x0800de90

080016e8 <MPU6050_Get6AxisRawData>:
/*Get Raw Data from sensor*/
void MPU6050_Get6AxisRawData(Struct_MPU6050* mpu6050)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	MPU6050_Readbytes(MPU6050_ACCEL_XOUT_H, 14, data);
 80016f0:	f107 0308 	add.w	r3, r7, #8
 80016f4:	461a      	mov	r2, r3
 80016f6:	210e      	movs	r1, #14
 80016f8:	203b      	movs	r0, #59	@ 0x3b
 80016fa:	f7ff ff23 	bl	8001544 <MPU6050_Readbytes>

	mpu6050->acc_x_raw = (data[0] << 8) | data[1];
 80016fe:	7a3b      	ldrb	r3, [r7, #8]
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	b21a      	sxth	r2, r3
 8001704:	7a7b      	ldrb	r3, [r7, #9]
 8001706:	b21b      	sxth	r3, r3
 8001708:	4313      	orrs	r3, r2
 800170a:	b21a      	sxth	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	801a      	strh	r2, [r3, #0]
	mpu6050->acc_y_raw = (data[2] << 8) | data[3];
 8001710:	7abb      	ldrb	r3, [r7, #10]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	b21a      	sxth	r2, r3
 8001716:	7afb      	ldrb	r3, [r7, #11]
 8001718:	b21b      	sxth	r3, r3
 800171a:	4313      	orrs	r3, r2
 800171c:	b21a      	sxth	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	805a      	strh	r2, [r3, #2]
	mpu6050->acc_z_raw = (data[4] << 8) | data[5];
 8001722:	7b3b      	ldrb	r3, [r7, #12]
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	b21a      	sxth	r2, r3
 8001728:	7b7b      	ldrb	r3, [r7, #13]
 800172a:	b21b      	sxth	r3, r3
 800172c:	4313      	orrs	r3, r2
 800172e:	b21a      	sxth	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	809a      	strh	r2, [r3, #4]

	mpu6050->temperature_raw = (data[6] << 8) | data[7];
 8001734:	7bbb      	ldrb	r3, [r7, #14]
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	b21a      	sxth	r2, r3
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	b21b      	sxth	r3, r3
 800173e:	4313      	orrs	r3, r2
 8001740:	b21a      	sxth	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	80da      	strh	r2, [r3, #6]

	mpu6050->gyro_x_raw = ((data[8] << 8) | data[9]);
 8001746:	7c3b      	ldrb	r3, [r7, #16]
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	b21a      	sxth	r2, r3
 800174c:	7c7b      	ldrb	r3, [r7, #17]
 800174e:	b21b      	sxth	r3, r3
 8001750:	4313      	orrs	r3, r2
 8001752:	b21a      	sxth	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	811a      	strh	r2, [r3, #8]
	mpu6050->gyro_y_raw = ((data[10] << 8) | data[11]);
 8001758:	7cbb      	ldrb	r3, [r7, #18]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	b21a      	sxth	r2, r3
 800175e:	7cfb      	ldrb	r3, [r7, #19]
 8001760:	b21b      	sxth	r3, r3
 8001762:	4313      	orrs	r3, r2
 8001764:	b21a      	sxth	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	815a      	strh	r2, [r3, #10]
	mpu6050->gyro_z_raw = ((data[12] << 8) | data[13]);
 800176a:	7d3b      	ldrb	r3, [r7, #20]
 800176c:	021b      	lsls	r3, r3, #8
 800176e:	b21a      	sxth	r2, r3
 8001770:	7d7b      	ldrb	r3, [r7, #21]
 8001772:	b21b      	sxth	r3, r3
 8001774:	4313      	orrs	r3, r2
 8001776:	b21a      	sxth	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	819a      	strh	r2, [r3, #12]
}
 800177c:	bf00      	nop
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <MPU6050_Get_LSB_Sensitivity>:

void MPU6050_Get_LSB_Sensitivity(uint8_t FS_SCALE_GYRO, uint8_t FS_SCALE_ACC)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	460a      	mov	r2, r1
 800178e:	71fb      	strb	r3, [r7, #7]
 8001790:	4613      	mov	r3, r2
 8001792:	71bb      	strb	r3, [r7, #6]
	switch(FS_SCALE_GYRO)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	2b03      	cmp	r3, #3
 8001798:	d81a      	bhi.n	80017d0 <MPU6050_Get_LSB_Sensitivity+0x4c>
 800179a:	a201      	add	r2, pc, #4	@ (adr r2, 80017a0 <MPU6050_Get_LSB_Sensitivity+0x1c>)
 800179c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a0:	080017b1 	.word	0x080017b1
 80017a4:	080017b9 	.word	0x080017b9
 80017a8:	080017c1 	.word	0x080017c1
 80017ac:	080017c9 	.word	0x080017c9
	{
	case 0:
		LSB_Sensitivity_GYRO = 131.f;
 80017b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001820 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 80017b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001824 <MPU6050_Get_LSB_Sensitivity+0xa0>)
 80017b4:	601a      	str	r2, [r3, #0]
		break;
 80017b6:	e00b      	b.n	80017d0 <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 1:
		LSB_Sensitivity_GYRO = 65.5f;
 80017b8:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 80017ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001828 <MPU6050_Get_LSB_Sensitivity+0xa4>)
 80017bc:	601a      	str	r2, [r3, #0]
		break;
 80017be:	e007      	b.n	80017d0 <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 2:
		LSB_Sensitivity_GYRO = 32.8f;
 80017c0:	4b17      	ldr	r3, [pc, #92]	@ (8001820 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 80017c2:	4a1a      	ldr	r2, [pc, #104]	@ (800182c <MPU6050_Get_LSB_Sensitivity+0xa8>)
 80017c4:	601a      	str	r2, [r3, #0]
		break;
 80017c6:	e003      	b.n	80017d0 <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 3:
		LSB_Sensitivity_GYRO = 16.4f;
 80017c8:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 80017ca:	4a19      	ldr	r2, [pc, #100]	@ (8001830 <MPU6050_Get_LSB_Sensitivity+0xac>)
 80017cc:	601a      	str	r2, [r3, #0]
		break;
 80017ce:	bf00      	nop
	}
	switch(FS_SCALE_ACC)
 80017d0:	79bb      	ldrb	r3, [r7, #6]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d81e      	bhi.n	8001814 <MPU6050_Get_LSB_Sensitivity+0x90>
 80017d6:	a201      	add	r2, pc, #4	@ (adr r2, 80017dc <MPU6050_Get_LSB_Sensitivity+0x58>)
 80017d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	080017f7 	.word	0x080017f7
 80017e4:	08001801 	.word	0x08001801
 80017e8:	0800180b 	.word	0x0800180b
	{
	case 0:
		LSB_Sensitivity_ACC = 16384.f;
 80017ec:	4b11      	ldr	r3, [pc, #68]	@ (8001834 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 80017ee:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 80017f2:	601a      	str	r2, [r3, #0]
		break;
 80017f4:	e00e      	b.n	8001814 <MPU6050_Get_LSB_Sensitivity+0x90>
	case 1:
		LSB_Sensitivity_ACC = 8192.f;
 80017f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001834 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 80017f8:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 80017fc:	601a      	str	r2, [r3, #0]
		break;
 80017fe:	e009      	b.n	8001814 <MPU6050_Get_LSB_Sensitivity+0x90>
	case 2:
		LSB_Sensitivity_ACC = 4096.f;
 8001800:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8001802:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8001806:	601a      	str	r2, [r3, #0]
		break;
 8001808:	e004      	b.n	8001814 <MPU6050_Get_LSB_Sensitivity+0x90>
	case 3:
		LSB_Sensitivity_ACC = 2048.f;
 800180a:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 800180c:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8001810:	601a      	str	r2, [r3, #0]
		break;
 8001812:	bf00      	nop
	}
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	20000278 	.word	0x20000278
 8001824:	43030000 	.word	0x43030000
 8001828:	42830000 	.word	0x42830000
 800182c:	42033333 	.word	0x42033333
 8001830:	41833333 	.word	0x41833333
 8001834:	20000274 	.word	0x20000274

08001838 <MPU6050_DataConvert>:

/*Convert Unit. acc_raw -> g, gyro_raw -> degree per second*/
void MPU6050_DataConvert(Struct_MPU6050* mpu6050)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	//printf("LSB_Sensitivity_GYRO: %f, LSB_Sensitivity_ACC: %f\n",LSB_Sensitivity_GYRO,LSB_Sensitivity_ACC);
	mpu6050->acc_x = mpu6050->acc_x_raw / LSB_Sensitivity_ACC;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001846:	ee07 3a90 	vmov	s15, r3
 800184a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800184e:	4b3c      	ldr	r3, [pc, #240]	@ (8001940 <MPU6050_DataConvert+0x108>)
 8001850:	ed93 7a00 	vldr	s14, [r3]
 8001854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	edc3 7a04 	vstr	s15, [r3, #16]
	mpu6050->acc_y = mpu6050->acc_y_raw / LSB_Sensitivity_ACC;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001864:	ee07 3a90 	vmov	s15, r3
 8001868:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800186c:	4b34      	ldr	r3, [pc, #208]	@ (8001940 <MPU6050_DataConvert+0x108>)
 800186e:	ed93 7a00 	vldr	s14, [r3]
 8001872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	edc3 7a05 	vstr	s15, [r3, #20]
	mpu6050->acc_z = mpu6050->acc_z_raw / LSB_Sensitivity_ACC;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001882:	ee07 3a90 	vmov	s15, r3
 8001886:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800188a:	4b2d      	ldr	r3, [pc, #180]	@ (8001940 <MPU6050_DataConvert+0x108>)
 800188c:	ed93 7a00 	vldr	s14, [r3]
 8001890:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	edc3 7a06 	vstr	s15, [r3, #24]

	mpu6050->temperature = (float)(mpu6050->temperature_raw)/340+36.53;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018a0:	ee07 3a90 	vmov	s15, r3
 80018a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001944 <MPU6050_DataConvert+0x10c>
 80018ac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018b0:	ee16 0a90 	vmov	r0, s13
 80018b4:	f7fe fe68 	bl	8000588 <__aeabi_f2d>
 80018b8:	a31f      	add	r3, pc, #124	@ (adr r3, 8001938 <MPU6050_DataConvert+0x100>)
 80018ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018be:	f7fe fd05 	bl	80002cc <__adddf3>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	f7ff f98d 	bl	8000be8 <__aeabi_d2f>
 80018ce:	4602      	mov	r2, r0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	61da      	str	r2, [r3, #28]

	mpu6050->gyro_x = mpu6050->gyro_x_raw / LSB_Sensitivity_GYRO;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018da:	ee07 3a90 	vmov	s15, r3
 80018de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018e2:	4b19      	ldr	r3, [pc, #100]	@ (8001948 <MPU6050_DataConvert+0x110>)
 80018e4:	ed93 7a00 	vldr	s14, [r3]
 80018e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	edc3 7a08 	vstr	s15, [r3, #32]
	mpu6050->gyro_y = mpu6050->gyro_y_raw / LSB_Sensitivity_GYRO;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80018f8:	ee07 3a90 	vmov	s15, r3
 80018fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001900:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <MPU6050_DataConvert+0x110>)
 8001902:	ed93 7a00 	vldr	s14, [r3]
 8001906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	mpu6050->gyro_z = mpu6050->gyro_z_raw / LSB_Sensitivity_GYRO;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001916:	ee07 3a90 	vmov	s15, r3
 800191a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800191e:	4b0a      	ldr	r3, [pc, #40]	@ (8001948 <MPU6050_DataConvert+0x110>)
 8001920:	ed93 7a00 	vldr	s14, [r3]
 8001924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	0a3d70a4 	.word	0x0a3d70a4
 800193c:	404243d7 	.word	0x404243d7
 8001940:	20000274 	.word	0x20000274
 8001944:	43aa0000 	.word	0x43aa0000
 8001948:	20000278 	.word	0x20000278

0800194c <MPU6050_ProcessData>:
	 */
	return HAL_GPIO_ReadPin(MPU6050_INT_PORT, MPU6050_INT_PIN);
}

void MPU6050_ProcessData(Struct_MPU6050* mpu6050)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	MPU6050_Get6AxisRawData(mpu6050);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff fec7 	bl	80016e8 <MPU6050_Get6AxisRawData>
	MPU6050_DataConvert(mpu6050);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ff6c 	bl	8001838 <MPU6050_DataConvert>
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b09e      	sub	sp, #120	@ 0x78
 800196c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800196e:	f000 fefd 	bl	800276c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001972:	f000 f8a9 	bl	8001ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001976:	f000 f9c3 	bl	8001d00 <MX_GPIO_Init>
  MX_I2C1_Init();
 800197a:	f000 f911 	bl	8001ba0 <MX_I2C1_Init>
  MX_I2C2_Init();
 800197e:	f000 f93d 	bl	8001bfc <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001982:	f000 f993 	bl	8001cac <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001986:	f000 f967 	bl	8001c58 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  I2Cdev_init(&hi2c2);
 800198a:	4842      	ldr	r0, [pc, #264]	@ (8001a94 <main+0x12c>)
 800198c:	f7ff fd1c 	bl	80013c8 <I2Cdev_init>
  HMC5883L_initialize();
 8001990:	f7ff fc6a 	bl	8001268 <HMC5883L_initialize>
  MPU6050_Initialization();
 8001994:	f7ff fdf2 	bl	800157c <MPU6050_Initialization>

  if (HMC5883L_testConnection())
 8001998:	f7ff fc7c 	bl	8001294 <HMC5883L_testConnection>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d011      	beq.n	80019c6 <main+0x5e>
  {
	  char buffer[100];
	  sprintf(buffer, "HMC5883L Connected\r\n");
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	493c      	ldr	r1, [pc, #240]	@ (8001a98 <main+0x130>)
 80019a6:	4618      	mov	r0, r3
 80019a8:	f007 fed6 	bl	8009758 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fc7e 	bl	80002b0 <strlen>
 80019b4:	4603      	mov	r3, r0
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	1d39      	adds	r1, r7, #4
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	4837      	ldr	r0, [pc, #220]	@ (8001a9c <main+0x134>)
 80019c0:	f003 ff5a 	bl	8005878 <HAL_UART_Transmit>
 80019c4:	e010      	b.n	80019e8 <main+0x80>
  }
  else
  {
	  char buffer[100];
	  sprintf(buffer, "HMC5883L Connection Failed\r\n");
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	4935      	ldr	r1, [pc, #212]	@ (8001aa0 <main+0x138>)
 80019ca:	4618      	mov	r0, r3
 80019cc:	f007 fec4 	bl	8009758 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fc6c 	bl	80002b0 <strlen>
 80019d8:	4603      	mov	r3, r0
 80019da:	b29a      	uxth	r2, r3
 80019dc:	1d39      	adds	r1, r7, #4
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
 80019e2:	482e      	ldr	r0, [pc, #184]	@ (8001a9c <main+0x134>)
 80019e4:	f003 ff48 	bl	8005878 <HAL_UART_Transmit>
  }

  xUartMutex = xSemaphoreCreateMutex();
 80019e8:	2001      	movs	r0, #1
 80019ea:	f004 fcbe 	bl	800636a <xQueueCreateMutex>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4a2c      	ldr	r2, [pc, #176]	@ (8001aa4 <main+0x13c>)
 80019f2:	6013      	str	r3, [r2, #0]

  if(xUartMutex != NULL)
 80019f4:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa4 <main+0x13c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d045      	beq.n	8001a88 <main+0x120>
  {
	status = xTaskCreate(mpu6050_task, "gyro-accel", 2048, NULL, 1, &mpu6050_handler);
 80019fc:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa8 <main+0x140>)
 80019fe:	9301      	str	r3, [sp, #4]
 8001a00:	2301      	movs	r3, #1
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	2300      	movs	r3, #0
 8001a06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a0a:	4928      	ldr	r1, [pc, #160]	@ (8001aac <main+0x144>)
 8001a0c:	4828      	ldr	r0, [pc, #160]	@ (8001ab0 <main+0x148>)
 8001a0e:	f005 f9ed 	bl	8006dec <xTaskCreate>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4a27      	ldr	r2, [pc, #156]	@ (8001ab4 <main+0x14c>)
 8001a16:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 8001a18:	4b26      	ldr	r3, [pc, #152]	@ (8001ab4 <main+0x14c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d00b      	beq.n	8001a38 <main+0xd0>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a24:	f383 8811 	msr	BASEPRI, r3
 8001a28:	f3bf 8f6f 	isb	sy
 8001a2c:	f3bf 8f4f 	dsb	sy
 8001a30:	66fb      	str	r3, [r7, #108]	@ 0x6c
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001a32:	bf00      	nop
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <main+0xcc>

	status = xTaskCreate(hmc5883l_task, "magnetometer", 2048, NULL, 1, &hmc5883l_handler);
 8001a38:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <main+0x150>)
 8001a3a:	9301      	str	r3, [sp, #4]
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2300      	movs	r3, #0
 8001a42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a46:	491d      	ldr	r1, [pc, #116]	@ (8001abc <main+0x154>)
 8001a48:	481d      	ldr	r0, [pc, #116]	@ (8001ac0 <main+0x158>)
 8001a4a:	f005 f9cf 	bl	8006dec <xTaskCreate>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4a18      	ldr	r2, [pc, #96]	@ (8001ab4 <main+0x14c>)
 8001a52:	6013      	str	r3, [r2, #0]
	configASSERT(status == pdPASS);
 8001a54:	4b17      	ldr	r3, [pc, #92]	@ (8001ab4 <main+0x14c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d00b      	beq.n	8001a74 <main+0x10c>
        __asm volatile
 8001a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a60:	f383 8811 	msr	BASEPRI, r3
 8001a64:	f3bf 8f6f 	isb	sy
 8001a68:	f3bf 8f4f 	dsb	sy
 8001a6c:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
 8001a6e:	bf00      	nop
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <main+0x108>

	xSemaphoreGive(xUartMutex);
 8001a74:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <main+0x13c>)
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	f004 fc8d 	bl	800639c <xQueueGenericSend>

	vTaskStartScheduler();
 8001a82:	f005 fb2f 	bl	80070e4 <vTaskStartScheduler>
 8001a86:	e003      	b.n	8001a90 <main+0x128>
  }
  else
  {
	  printf("binary semaphore creation failed\n\r");
 8001a88:	480e      	ldr	r0, [pc, #56]	@ (8001ac4 <main+0x15c>)
 8001a8a:	f007 fdf5 	bl	8009678 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a8e:	bf00      	nop
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <main+0x128>
 8001a94:	200002d0 	.word	0x200002d0
 8001a98:	0800deac 	.word	0x0800deac
 8001a9c:	2000036c 	.word	0x2000036c
 8001aa0:	0800dec4 	.word	0x0800dec4
 8001aa4:	200003c0 	.word	0x200003c0
 8001aa8:	200003b4 	.word	0x200003b4
 8001aac:	0800dee4 	.word	0x0800dee4
 8001ab0:	08001db1 	.word	0x08001db1
 8001ab4:	200003bc 	.word	0x200003bc
 8001ab8:	200003b8 	.word	0x200003b8
 8001abc:	0800def0 	.word	0x0800def0
 8001ac0:	08001e81 	.word	0x08001e81
 8001ac4:	0800df00 	.word	0x0800df00

08001ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b094      	sub	sp, #80	@ 0x50
 8001acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ace:	f107 031c 	add.w	r3, r7, #28
 8001ad2:	2234      	movs	r2, #52	@ 0x34
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f007 ff36 	bl	8009948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001adc:	f107 0308 	add.w	r3, r7, #8
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aec:	2300      	movs	r3, #0
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	4b29      	ldr	r3, [pc, #164]	@ (8001b98 <SystemClock_Config+0xd0>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af4:	4a28      	ldr	r2, [pc, #160]	@ (8001b98 <SystemClock_Config+0xd0>)
 8001af6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001afa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001afc:	4b26      	ldr	r3, [pc, #152]	@ (8001b98 <SystemClock_Config+0xd0>)
 8001afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b08:	2300      	movs	r3, #0
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	4b23      	ldr	r3, [pc, #140]	@ (8001b9c <SystemClock_Config+0xd4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001b14:	4a21      	ldr	r2, [pc, #132]	@ (8001b9c <SystemClock_Config+0xd4>)
 8001b16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b9c <SystemClock_Config+0xd4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b30:	2310      	movs	r3, #16
 8001b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b34:	2302      	movs	r3, #2
 8001b36:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b3c:	2308      	movs	r3, #8
 8001b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001b40:	2360      	movs	r3, #96	@ 0x60
 8001b42:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b44:	2302      	movs	r3, #2
 8001b46:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b50:	f107 031c 	add.w	r3, r7, #28
 8001b54:	4618      	mov	r0, r3
 8001b56:	f003 f905 	bl	8004d64 <HAL_RCC_OscConfig>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001b60:	f000 fb58 	bl	8002214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b64:	230f      	movs	r3, #15
 8001b66:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001b6c:	2380      	movs	r3, #128	@ 0x80
 8001b6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b7a:	f107 0308 	add.w	r3, r7, #8
 8001b7e:	2101      	movs	r1, #1
 8001b80:	4618      	mov	r0, r3
 8001b82:	f002 fd73 	bl	800466c <HAL_RCC_ClockConfig>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001b8c:	f000 fb42 	bl	8002214 <Error_Handler>
  }
}
 8001b90:	bf00      	nop
 8001b92:	3750      	adds	r7, #80	@ 0x50
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40007000 	.word	0x40007000

08001ba0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ba4:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <MX_I2C1_Init+0x50>)
 8001ba6:	4a13      	ldr	r2, [pc, #76]	@ (8001bf4 <MX_I2C1_Init+0x54>)
 8001ba8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001baa:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <MX_I2C1_Init+0x50>)
 8001bac:	4a12      	ldr	r2, [pc, #72]	@ (8001bf8 <MX_I2C1_Init+0x58>)
 8001bae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf0 <MX_I2C1_Init+0x50>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <MX_I2C1_Init+0x50>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <MX_I2C1_Init+0x50>)
 8001bbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <MX_I2C1_Init+0x50>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bca:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <MX_I2C1_Init+0x50>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bd0:	4b07      	ldr	r3, [pc, #28]	@ (8001bf0 <MX_I2C1_Init+0x50>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bd6:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <MX_I2C1_Init+0x50>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bdc:	4804      	ldr	r0, [pc, #16]	@ (8001bf0 <MX_I2C1_Init+0x50>)
 8001bde:	f001 f8a1 	bl	8002d24 <HAL_I2C_Init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001be8:	f000 fb14 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	2000027c 	.word	0x2000027c
 8001bf4:	40005400 	.word	0x40005400
 8001bf8:	000186a0 	.word	0x000186a0

08001bfc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c00:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <MX_I2C2_Init+0x50>)
 8001c02:	4a13      	ldr	r2, [pc, #76]	@ (8001c50 <MX_I2C2_Init+0x54>)
 8001c04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001c06:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <MX_I2C2_Init+0x50>)
 8001c08:	4a12      	ldr	r2, [pc, #72]	@ (8001c54 <MX_I2C2_Init+0x58>)
 8001c0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c4c <MX_I2C2_Init+0x50>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c12:	4b0e      	ldr	r3, [pc, #56]	@ (8001c4c <MX_I2C2_Init+0x50>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	@ (8001c4c <MX_I2C2_Init+0x50>)
 8001c1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c1e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c20:	4b0a      	ldr	r3, [pc, #40]	@ (8001c4c <MX_I2C2_Init+0x50>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c26:	4b09      	ldr	r3, [pc, #36]	@ (8001c4c <MX_I2C2_Init+0x50>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c2c:	4b07      	ldr	r3, [pc, #28]	@ (8001c4c <MX_I2C2_Init+0x50>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c32:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <MX_I2C2_Init+0x50>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c38:	4804      	ldr	r0, [pc, #16]	@ (8001c4c <MX_I2C2_Init+0x50>)
 8001c3a:	f001 f873 	bl	8002d24 <HAL_I2C_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c44:	f000 fae6 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	200002d0 	.word	0x200002d0
 8001c50:	40005800 	.word	0x40005800
 8001c54:	00061a80 	.word	0x00061a80

08001c58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <MX_USART1_UART_Init+0x4c>)
 8001c5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ca8 <MX_USART1_UART_Init+0x50>)
 8001c60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c62:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <MX_USART1_UART_Init+0x4c>)
 8001c64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <MX_USART1_UART_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <MX_USART1_UART_Init+0x4c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <MX_USART1_UART_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <MX_USART1_UART_Init+0x4c>)
 8001c7e:	220c      	movs	r2, #12
 8001c80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c82:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <MX_USART1_UART_Init+0x4c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c88:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <MX_USART1_UART_Init+0x4c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c8e:	4805      	ldr	r0, [pc, #20]	@ (8001ca4 <MX_USART1_UART_Init+0x4c>)
 8001c90:	f003 fda2 	bl	80057d8 <HAL_UART_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c9a:	f000 fabb 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000324 	.word	0x20000324
 8001ca8:	40011000 	.word	0x40011000

08001cac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001cb2:	4a12      	ldr	r2, [pc, #72]	@ (8001cfc <MX_USART2_UART_Init+0x50>)
 8001cb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cb6:	4b10      	ldr	r3, [pc, #64]	@ (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001cb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cca:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cd0:	4b09      	ldr	r3, [pc, #36]	@ (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd6:	4b08      	ldr	r3, [pc, #32]	@ (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ce2:	4805      	ldr	r0, [pc, #20]	@ (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001ce4:	f003 fd78 	bl	80057d8 <HAL_UART_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cee:	f000 fa91 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	2000036c 	.word	0x2000036c
 8001cfc:	40004400 	.word	0x40004400

08001d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	@ 0x28
 8001d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	60da      	str	r2, [r3, #12]
 8001d14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	4b23      	ldr	r3, [pc, #140]	@ (8001da8 <MX_GPIO_Init+0xa8>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	4a22      	ldr	r2, [pc, #136]	@ (8001da8 <MX_GPIO_Init+0xa8>)
 8001d20:	f043 0304 	orr.w	r3, r3, #4
 8001d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d26:	4b20      	ldr	r3, [pc, #128]	@ (8001da8 <MX_GPIO_Init+0xa8>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	4b1c      	ldr	r3, [pc, #112]	@ (8001da8 <MX_GPIO_Init+0xa8>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8001da8 <MX_GPIO_Init+0xa8>)
 8001d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d42:	4b19      	ldr	r3, [pc, #100]	@ (8001da8 <MX_GPIO_Init+0xa8>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	4b15      	ldr	r3, [pc, #84]	@ (8001da8 <MX_GPIO_Init+0xa8>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	4a14      	ldr	r2, [pc, #80]	@ (8001da8 <MX_GPIO_Init+0xa8>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5e:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <MX_GPIO_Init+0xa8>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001da8 <MX_GPIO_Init+0xa8>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	4a0d      	ldr	r2, [pc, #52]	@ (8001da8 <MX_GPIO_Init+0xa8>)
 8001d74:	f043 0302 	orr.w	r3, r3, #2
 8001d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001da8 <MX_GPIO_Init+0xa8>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d86:	2320      	movs	r3, #32
 8001d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	4619      	mov	r1, r3
 8001d98:	4804      	ldr	r0, [pc, #16]	@ (8001dac <MX_GPIO_Init+0xac>)
 8001d9a:	f000 fe2f 	bl	80029fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d9e:	bf00      	nop
 8001da0:	3728      	adds	r7, #40	@ 0x28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40020400 	.word	0x40020400

08001db0 <mpu6050_task>:

/* USER CODE BEGIN 4 */
static void mpu6050_task(void* parameters)
{
 8001db0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001db4:	b0b8      	sub	sp, #224	@ 0xe0
 8001db6:	af04      	add	r7, sp, #16
 8001db8:	6078      	str	r0, [r7, #4]
	char buffer[200];
	while(1)
	{
		MPU6050_ProcessData(&MPU6050);
 8001dba:	482b      	ldr	r0, [pc, #172]	@ (8001e68 <mpu6050_task+0xb8>)
 8001dbc:	f7ff fdc6 	bl	800194c <MPU6050_ProcessData>
		CalculateAccAngle(&Angle, &MPU6050);
 8001dc0:	4929      	ldr	r1, [pc, #164]	@ (8001e68 <mpu6050_task+0xb8>)
 8001dc2:	482a      	ldr	r0, [pc, #168]	@ (8001e6c <mpu6050_task+0xbc>)
 8001dc4:	f7ff f8d8 	bl	8000f78 <CalculateAccAngle>
		CalculateGyroAngle(&Angle, &MPU6050);
 8001dc8:	4927      	ldr	r1, [pc, #156]	@ (8001e68 <mpu6050_task+0xb8>)
 8001dca:	4828      	ldr	r0, [pc, #160]	@ (8001e6c <mpu6050_task+0xbc>)
 8001dcc:	f7ff f9a6 	bl	800111c <CalculateGyroAngle>
		CalculateCompliFilter(&Angle, &MPU6050);
 8001dd0:	4925      	ldr	r1, [pc, #148]	@ (8001e68 <mpu6050_task+0xb8>)
 8001dd2:	4826      	ldr	r0, [pc, #152]	@ (8001e6c <mpu6050_task+0xbc>)
 8001dd4:	f7ff f9e0 	bl	8001198 <CalculateCompliFilter>
		xSemaphoreTake( xUartMutex, portMAX_DELAY);
 8001dd8:	4b25      	ldr	r3, [pc, #148]	@ (8001e70 <mpu6050_task+0xc0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8001de0:	4618      	mov	r0, r3
 8001de2:	f004 fd6d 	bl	80068c0 <xQueueSemaphoreTake>
		sprintf(buffer, "Pitch: %0.2f\t Roll: %0.2f\t Yaw: %0.2f\r\n", Angle.ComFilt_roll,Angle.ComFilt_pitch,Angle.ComFilt_yaw);
 8001de6:	4b21      	ldr	r3, [pc, #132]	@ (8001e6c <mpu6050_task+0xbc>)
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fbcc 	bl	8000588 <__aeabi_f2d>
 8001df0:	4680      	mov	r8, r0
 8001df2:	4689      	mov	r9, r1
 8001df4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e6c <mpu6050_task+0xbc>)
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe fbc5 	bl	8000588 <__aeabi_f2d>
 8001dfe:	4604      	mov	r4, r0
 8001e00:	460d      	mov	r5, r1
 8001e02:	4b1a      	ldr	r3, [pc, #104]	@ (8001e6c <mpu6050_task+0xbc>)
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fbbe 	bl	8000588 <__aeabi_f2d>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	f107 0008 	add.w	r0, r7, #8
 8001e14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e18:	e9cd 4500 	strd	r4, r5, [sp]
 8001e1c:	4642      	mov	r2, r8
 8001e1e:	464b      	mov	r3, r9
 8001e20:	4914      	ldr	r1, [pc, #80]	@ (8001e74 <mpu6050_task+0xc4>)
 8001e22:	f007 fc99 	bl	8009758 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001e26:	f107 0308 	add.w	r3, r7, #8
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fa40 	bl	80002b0 <strlen>
 8001e30:	4603      	mov	r3, r0
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	f107 0108 	add.w	r1, r7, #8
 8001e38:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3c:	480e      	ldr	r0, [pc, #56]	@ (8001e78 <mpu6050_task+0xc8>)
 8001e3e:	f003 fd1b 	bl	8005878 <HAL_UART_Transmit>
		printf("%s", buffer);
 8001e42:	f107 0308 	add.w	r3, r7, #8
 8001e46:	4619      	mov	r1, r3
 8001e48:	480c      	ldr	r0, [pc, #48]	@ (8001e7c <mpu6050_task+0xcc>)
 8001e4a:	f007 fc15 	bl	8009678 <iprintf>
		xSemaphoreGive(xUartMutex);
 8001e4e:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <mpu6050_task+0xc0>)
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	2300      	movs	r3, #0
 8001e54:	2200      	movs	r2, #0
 8001e56:	2100      	movs	r1, #0
 8001e58:	f004 faa0 	bl	800639c <xQueueGenericSend>
		vTaskDelay(10);
 8001e5c:	200a      	movs	r0, #10
 8001e5e:	f005 f90b 	bl	8007078 <vTaskDelay>
		MPU6050_ProcessData(&MPU6050);
 8001e62:	bf00      	nop
 8001e64:	e7a9      	b.n	8001dba <mpu6050_task+0xa>
 8001e66:	bf00      	nop
 8001e68:	20000248 	.word	0x20000248
 8001e6c:	20000214 	.word	0x20000214
 8001e70:	200003c0 	.word	0x200003c0
 8001e74:	0800df24 	.word	0x0800df24
 8001e78:	20000324 	.word	0x20000324
 8001e7c:	0800df4c 	.word	0x0800df4c

08001e80 <hmc5883l_task>:
	}
}

static void hmc5883l_task(void* parameters)
{
 8001e80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e84:	b0a0      	sub	sp, #128	@ 0x80
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
	char buffer[100];
	while(1)
	{
		HMC5883L_getHeading(&mx, &my, &mz);
 8001e8a:	4ac3      	ldr	r2, [pc, #780]	@ (8002198 <hmc5883l_task+0x318>)
 8001e8c:	49c3      	ldr	r1, [pc, #780]	@ (800219c <hmc5883l_task+0x31c>)
 8001e8e:	48c4      	ldr	r0, [pc, #784]	@ (80021a0 <hmc5883l_task+0x320>)
 8001e90:	f7ff fa54 	bl	800133c <HMC5883L_getHeading>
		float fx = (float)mx;
 8001e94:	4bc2      	ldr	r3, [pc, #776]	@ (80021a0 <hmc5883l_task+0x320>)
 8001e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea2:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
		float fy = (float)my;
 8001ea6:	4bbd      	ldr	r3, [pc, #756]	@ (800219c <hmc5883l_task+0x31c>)
 8001ea8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eac:	ee07 3a90 	vmov	s15, r3
 8001eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb4:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
		float fz = (float)mz;
 8001eb8:	4bb7      	ldr	r3, [pc, #732]	@ (8002198 <hmc5883l_task+0x318>)
 8001eba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec6:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
		float pitchRad = pitch * M_PI / 180.0;
 8001eca:	4bb6      	ldr	r3, [pc, #728]	@ (80021a4 <hmc5883l_task+0x324>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe fb5a 	bl	8000588 <__aeabi_f2d>
 8001ed4:	a3ae      	add	r3, pc, #696	@ (adr r3, 8002190 <hmc5883l_task+0x310>)
 8001ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eda:	f7fe fbad 	bl	8000638 <__aeabi_dmul>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	4baf      	ldr	r3, [pc, #700]	@ (80021a8 <hmc5883l_task+0x328>)
 8001eec:	f7fe fcce 	bl	800088c <__aeabi_ddiv>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f7fe fe76 	bl	8000be8 <__aeabi_d2f>
 8001efc:	4603      	mov	r3, r0
 8001efe:	673b      	str	r3, [r7, #112]	@ 0x70
		float rollRad  = roll  * M_PI / 180.0;
 8001f00:	4baa      	ldr	r3, [pc, #680]	@ (80021ac <hmc5883l_task+0x32c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe fb3f 	bl	8000588 <__aeabi_f2d>
 8001f0a:	a3a1      	add	r3, pc, #644	@ (adr r3, 8002190 <hmc5883l_task+0x310>)
 8001f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f10:	f7fe fb92 	bl	8000638 <__aeabi_dmul>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	4ba1      	ldr	r3, [pc, #644]	@ (80021a8 <hmc5883l_task+0x328>)
 8001f22:	f7fe fcb3 	bl	800088c <__aeabi_ddiv>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f7fe fe5b 	bl	8000be8 <__aeabi_d2f>
 8001f32:	4603      	mov	r3, r0
 8001f34:	66fb      	str	r3, [r7, #108]	@ 0x6c

		mx_comp = fx * cos(pitchRad) + fz * sin(pitchRad);
 8001f36:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001f38:	f7fe fb26 	bl	8000588 <__aeabi_f2d>
 8001f3c:	4604      	mov	r4, r0
 8001f3e:	460d      	mov	r5, r1
 8001f40:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001f42:	f7fe fb21 	bl	8000588 <__aeabi_f2d>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	ec43 2b10 	vmov	d0, r2, r3
 8001f4e:	f009 ff6b 	bl	800be28 <cos>
 8001f52:	ec53 2b10 	vmov	r2, r3, d0
 8001f56:	4620      	mov	r0, r4
 8001f58:	4629      	mov	r1, r5
 8001f5a:	f7fe fb6d 	bl	8000638 <__aeabi_dmul>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4690      	mov	r8, r2
 8001f64:	4699      	mov	r9, r3
 8001f66:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001f68:	f7fe fb0e 	bl	8000588 <__aeabi_f2d>
 8001f6c:	4604      	mov	r4, r0
 8001f6e:	460d      	mov	r5, r1
 8001f70:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001f72:	f7fe fb09 	bl	8000588 <__aeabi_f2d>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	ec43 2b10 	vmov	d0, r2, r3
 8001f7e:	f009 ffaf 	bl	800bee0 <sin>
 8001f82:	ec53 2b10 	vmov	r2, r3, d0
 8001f86:	4620      	mov	r0, r4
 8001f88:	4629      	mov	r1, r5
 8001f8a:	f7fe fb55 	bl	8000638 <__aeabi_dmul>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4640      	mov	r0, r8
 8001f94:	4649      	mov	r1, r9
 8001f96:	f7fe f999 	bl	80002cc <__adddf3>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f7fe fe21 	bl	8000be8 <__aeabi_d2f>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4a81      	ldr	r2, [pc, #516]	@ (80021b0 <hmc5883l_task+0x330>)
 8001faa:	6013      	str	r3, [r2, #0]
		my_comp = fx * sin(rollRad) * sin(pitchRad) + fy * cos(rollRad) - fz * sin(rollRad) * cos(pitchRad);
 8001fac:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001fae:	f7fe faeb 	bl	8000588 <__aeabi_f2d>
 8001fb2:	4604      	mov	r4, r0
 8001fb4:	460d      	mov	r5, r1
 8001fb6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001fb8:	f7fe fae6 	bl	8000588 <__aeabi_f2d>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	ec43 2b10 	vmov	d0, r2, r3
 8001fc4:	f009 ff8c 	bl	800bee0 <sin>
 8001fc8:	ec53 2b10 	vmov	r2, r3, d0
 8001fcc:	4620      	mov	r0, r4
 8001fce:	4629      	mov	r1, r5
 8001fd0:	f7fe fb32 	bl	8000638 <__aeabi_dmul>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4614      	mov	r4, r2
 8001fda:	461d      	mov	r5, r3
 8001fdc:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001fde:	f7fe fad3 	bl	8000588 <__aeabi_f2d>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	ec43 2b10 	vmov	d0, r2, r3
 8001fea:	f009 ff79 	bl	800bee0 <sin>
 8001fee:	ec53 2b10 	vmov	r2, r3, d0
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	4629      	mov	r1, r5
 8001ff6:	f7fe fb1f 	bl	8000638 <__aeabi_dmul>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4690      	mov	r8, r2
 8002000:	4699      	mov	r9, r3
 8002002:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002004:	f7fe fac0 	bl	8000588 <__aeabi_f2d>
 8002008:	4604      	mov	r4, r0
 800200a:	460d      	mov	r5, r1
 800200c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800200e:	f7fe fabb 	bl	8000588 <__aeabi_f2d>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	ec43 2b10 	vmov	d0, r2, r3
 800201a:	f009 ff05 	bl	800be28 <cos>
 800201e:	ec53 2b10 	vmov	r2, r3, d0
 8002022:	4620      	mov	r0, r4
 8002024:	4629      	mov	r1, r5
 8002026:	f7fe fb07 	bl	8000638 <__aeabi_dmul>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4640      	mov	r0, r8
 8002030:	4649      	mov	r1, r9
 8002032:	f7fe f94b 	bl	80002cc <__adddf3>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4690      	mov	r8, r2
 800203c:	4699      	mov	r9, r3
 800203e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002040:	f7fe faa2 	bl	8000588 <__aeabi_f2d>
 8002044:	4604      	mov	r4, r0
 8002046:	460d      	mov	r5, r1
 8002048:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800204a:	f7fe fa9d 	bl	8000588 <__aeabi_f2d>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	ec43 2b10 	vmov	d0, r2, r3
 8002056:	f009 ff43 	bl	800bee0 <sin>
 800205a:	ec53 2b10 	vmov	r2, r3, d0
 800205e:	4620      	mov	r0, r4
 8002060:	4629      	mov	r1, r5
 8002062:	f7fe fae9 	bl	8000638 <__aeabi_dmul>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4614      	mov	r4, r2
 800206c:	461d      	mov	r5, r3
 800206e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002070:	f7fe fa8a 	bl	8000588 <__aeabi_f2d>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	ec43 2b10 	vmov	d0, r2, r3
 800207c:	f009 fed4 	bl	800be28 <cos>
 8002080:	ec53 2b10 	vmov	r2, r3, d0
 8002084:	4620      	mov	r0, r4
 8002086:	4629      	mov	r1, r5
 8002088:	f7fe fad6 	bl	8000638 <__aeabi_dmul>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4640      	mov	r0, r8
 8002092:	4649      	mov	r1, r9
 8002094:	f7fe f918 	bl	80002c8 <__aeabi_dsub>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	f7fe fda2 	bl	8000be8 <__aeabi_d2f>
 80020a4:	4603      	mov	r3, r0
 80020a6:	4a43      	ldr	r2, [pc, #268]	@ (80021b4 <hmc5883l_task+0x334>)
 80020a8:	6013      	str	r3, [r2, #0]

		yaw = atan2(my_comp, mx_comp) * 180.0 / M_PI;
 80020aa:	4b42      	ldr	r3, [pc, #264]	@ (80021b4 <hmc5883l_task+0x334>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fa6a 	bl	8000588 <__aeabi_f2d>
 80020b4:	4604      	mov	r4, r0
 80020b6:	460d      	mov	r5, r1
 80020b8:	4b3d      	ldr	r3, [pc, #244]	@ (80021b0 <hmc5883l_task+0x330>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fa63 	bl	8000588 <__aeabi_f2d>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	ec43 2b11 	vmov	d1, r2, r3
 80020ca:	ec45 4b10 	vmov	d0, r4, r5
 80020ce:	f009 fc73 	bl	800b9b8 <atan2>
 80020d2:	ec51 0b10 	vmov	r0, r1, d0
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	4b33      	ldr	r3, [pc, #204]	@ (80021a8 <hmc5883l_task+0x328>)
 80020dc:	f7fe faac 	bl	8000638 <__aeabi_dmul>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	a329      	add	r3, pc, #164	@ (adr r3, 8002190 <hmc5883l_task+0x310>)
 80020ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ee:	f7fe fbcd 	bl	800088c <__aeabi_ddiv>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	f7fe fd75 	bl	8000be8 <__aeabi_d2f>
 80020fe:	4603      	mov	r3, r0
 8002100:	4a2d      	ldr	r2, [pc, #180]	@ (80021b8 <hmc5883l_task+0x338>)
 8002102:	6013      	str	r3, [r2, #0]

		if (yaw < 0)
 8002104:	4b2c      	ldr	r3, [pc, #176]	@ (80021b8 <hmc5883l_task+0x338>)
 8002106:	edd3 7a00 	vldr	s15, [r3]
 800210a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800210e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002112:	d509      	bpl.n	8002128 <hmc5883l_task+0x2a8>
			yaw += 360;
 8002114:	4b28      	ldr	r3, [pc, #160]	@ (80021b8 <hmc5883l_task+0x338>)
 8002116:	edd3 7a00 	vldr	s15, [r3]
 800211a:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80021bc <hmc5883l_task+0x33c>
 800211e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002122:	4b25      	ldr	r3, [pc, #148]	@ (80021b8 <hmc5883l_task+0x338>)
 8002124:	edc3 7a00 	vstr	s15, [r3]
		xSemaphoreTake( xUartMutex, portMAX_DELAY);
 8002128:	4b25      	ldr	r3, [pc, #148]	@ (80021c0 <hmc5883l_task+0x340>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f04f 31ff 	mov.w	r1, #4294967295
 8002130:	4618      	mov	r0, r3
 8002132:	f004 fbc5 	bl	80068c0 <xQueueSemaphoreTake>
		sprintf(buffer, "HMC5883L Yaw: %.2f°\r\n", yaw);
 8002136:	4b20      	ldr	r3, [pc, #128]	@ (80021b8 <hmc5883l_task+0x338>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fa24 	bl	8000588 <__aeabi_f2d>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	f107 0008 	add.w	r0, r7, #8
 8002148:	491e      	ldr	r1, [pc, #120]	@ (80021c4 <hmc5883l_task+0x344>)
 800214a:	f007 fb05 	bl	8009758 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800214e:	f107 0308 	add.w	r3, r7, #8
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe f8ac 	bl	80002b0 <strlen>
 8002158:	4603      	mov	r3, r0
 800215a:	b29a      	uxth	r2, r3
 800215c:	f107 0108 	add.w	r1, r7, #8
 8002160:	f04f 33ff 	mov.w	r3, #4294967295
 8002164:	4818      	ldr	r0, [pc, #96]	@ (80021c8 <hmc5883l_task+0x348>)
 8002166:	f003 fb87 	bl	8005878 <HAL_UART_Transmit>
		printf("%s\n", buffer);
 800216a:	f107 0308 	add.w	r3, r7, #8
 800216e:	4618      	mov	r0, r3
 8002170:	f007 faea 	bl	8009748 <puts>
		xSemaphoreGive(xUartMutex);
 8002174:	4b12      	ldr	r3, [pc, #72]	@ (80021c0 <hmc5883l_task+0x340>)
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	2300      	movs	r3, #0
 800217a:	2200      	movs	r2, #0
 800217c:	2100      	movs	r1, #0
 800217e:	f004 f90d 	bl	800639c <xQueueGenericSend>
		vTaskDelay(10);
 8002182:	200a      	movs	r0, #10
 8002184:	f004 ff78 	bl	8007078 <vTaskDelay>
	{
 8002188:	e67f      	b.n	8001e8a <hmc5883l_task+0xa>
 800218a:	bf00      	nop
 800218c:	f3af 8000 	nop.w
 8002190:	54442d18 	.word	0x54442d18
 8002194:	400921fb 	.word	0x400921fb
 8002198:	200003c8 	.word	0x200003c8
 800219c:	200003c6 	.word	0x200003c6
 80021a0:	200003c4 	.word	0x200003c4
 80021a4:	200003cc 	.word	0x200003cc
 80021a8:	40668000 	.word	0x40668000
 80021ac:	200003d0 	.word	0x200003d0
 80021b0:	200003d4 	.word	0x200003d4
 80021b4:	200003d8 	.word	0x200003d8
 80021b8:	200003dc 	.word	0x200003dc
 80021bc:	43b40000 	.word	0x43b40000
 80021c0:	200003c0 	.word	0x200003c0
 80021c4:	0800df50 	.word	0x0800df50
 80021c8:	20000324 	.word	0x20000324

080021cc <__io_putchar>:
	}
}

#define PRINTF   int __io_putchar(int ch)
PRINTF
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80021d4:	1d39      	adds	r1, r7, #4
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295
 80021da:	2201      	movs	r2, #1
 80021dc:	4803      	ldr	r0, [pc, #12]	@ (80021ec <__io_putchar+0x20>)
 80021de:	f003 fb4b 	bl	8005878 <HAL_UART_Transmit>
	return ch;
 80021e2:	687b      	ldr	r3, [r7, #4]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	2000036c 	.word	0x2000036c

080021f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a04      	ldr	r2, [pc, #16]	@ (8002210 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d101      	bne.n	8002206 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002202:	f000 fad5 	bl	80027b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40010000 	.word	0x40010000

08002214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002218:	b672      	cpsid	i
}
 800221a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <Error_Handler+0x8>

08002220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]
 800222a:	4b10      	ldr	r3, [pc, #64]	@ (800226c <HAL_MspInit+0x4c>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222e:	4a0f      	ldr	r2, [pc, #60]	@ (800226c <HAL_MspInit+0x4c>)
 8002230:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002234:	6453      	str	r3, [r2, #68]	@ 0x44
 8002236:	4b0d      	ldr	r3, [pc, #52]	@ (800226c <HAL_MspInit+0x4c>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800223e:	607b      	str	r3, [r7, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	603b      	str	r3, [r7, #0]
 8002246:	4b09      	ldr	r3, [pc, #36]	@ (800226c <HAL_MspInit+0x4c>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	4a08      	ldr	r2, [pc, #32]	@ (800226c <HAL_MspInit+0x4c>)
 800224c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002250:	6413      	str	r3, [r2, #64]	@ 0x40
 8002252:	4b06      	ldr	r3, [pc, #24]	@ (800226c <HAL_MspInit+0x4c>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800

08002270 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08c      	sub	sp, #48	@ 0x30
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 031c 	add.w	r3, r7, #28
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a42      	ldr	r2, [pc, #264]	@ (8002398 <HAL_I2C_MspInit+0x128>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d12c      	bne.n	80022ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]
 8002296:	4b41      	ldr	r3, [pc, #260]	@ (800239c <HAL_I2C_MspInit+0x12c>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	4a40      	ldr	r2, [pc, #256]	@ (800239c <HAL_I2C_MspInit+0x12c>)
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a2:	4b3e      	ldr	r3, [pc, #248]	@ (800239c <HAL_I2C_MspInit+0x12c>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	61bb      	str	r3, [r7, #24]
 80022ac:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022ae:	23c0      	movs	r3, #192	@ 0xc0
 80022b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022b2:	2312      	movs	r3, #18
 80022b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ba:	2303      	movs	r3, #3
 80022bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022be:	2304      	movs	r3, #4
 80022c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c2:	f107 031c 	add.w	r3, r7, #28
 80022c6:	4619      	mov	r1, r3
 80022c8:	4835      	ldr	r0, [pc, #212]	@ (80023a0 <HAL_I2C_MspInit+0x130>)
 80022ca:	f000 fb97 	bl	80029fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	4b32      	ldr	r3, [pc, #200]	@ (800239c <HAL_I2C_MspInit+0x12c>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	4a31      	ldr	r2, [pc, #196]	@ (800239c <HAL_I2C_MspInit+0x12c>)
 80022d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022de:	4b2f      	ldr	r3, [pc, #188]	@ (800239c <HAL_I2C_MspInit+0x12c>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80022ea:	e050      	b.n	800238e <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a2c      	ldr	r2, [pc, #176]	@ (80023a4 <HAL_I2C_MspInit+0x134>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d14b      	bne.n	800238e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	4b28      	ldr	r3, [pc, #160]	@ (800239c <HAL_I2C_MspInit+0x12c>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fe:	4a27      	ldr	r2, [pc, #156]	@ (800239c <HAL_I2C_MspInit+0x12c>)
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	6313      	str	r3, [r2, #48]	@ 0x30
 8002306:	4b25      	ldr	r3, [pc, #148]	@ (800239c <HAL_I2C_MspInit+0x12c>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	4b21      	ldr	r3, [pc, #132]	@ (800239c <HAL_I2C_MspInit+0x12c>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231a:	4a20      	ldr	r2, [pc, #128]	@ (800239c <HAL_I2C_MspInit+0x12c>)
 800231c:	f043 0304 	orr.w	r3, r3, #4
 8002320:	6313      	str	r3, [r2, #48]	@ 0x30
 8002322:	4b1e      	ldr	r3, [pc, #120]	@ (800239c <HAL_I2C_MspInit+0x12c>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800232e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002334:	2312      	movs	r3, #18
 8002336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233c:	2303      	movs	r3, #3
 800233e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002340:	2304      	movs	r3, #4
 8002342:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002344:	f107 031c 	add.w	r3, r7, #28
 8002348:	4619      	mov	r1, r3
 800234a:	4815      	ldr	r0, [pc, #84]	@ (80023a0 <HAL_I2C_MspInit+0x130>)
 800234c:	f000 fb56 	bl	80029fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002350:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002356:	2312      	movs	r3, #18
 8002358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235e:	2303      	movs	r3, #3
 8002360:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002362:	2304      	movs	r3, #4
 8002364:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002366:	f107 031c 	add.w	r3, r7, #28
 800236a:	4619      	mov	r1, r3
 800236c:	480e      	ldr	r0, [pc, #56]	@ (80023a8 <HAL_I2C_MspInit+0x138>)
 800236e:	f000 fb45 	bl	80029fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	4b09      	ldr	r3, [pc, #36]	@ (800239c <HAL_I2C_MspInit+0x12c>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237a:	4a08      	ldr	r2, [pc, #32]	@ (800239c <HAL_I2C_MspInit+0x12c>)
 800237c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002380:	6413      	str	r3, [r2, #64]	@ 0x40
 8002382:	4b06      	ldr	r3, [pc, #24]	@ (800239c <HAL_I2C_MspInit+0x12c>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68bb      	ldr	r3, [r7, #8]
}
 800238e:	bf00      	nop
 8002390:	3730      	adds	r7, #48	@ 0x30
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40005400 	.word	0x40005400
 800239c:	40023800 	.word	0x40023800
 80023a0:	40020400 	.word	0x40020400
 80023a4:	40005800 	.word	0x40005800
 80023a8:	40020800 	.word	0x40020800

080023ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08c      	sub	sp, #48	@ 0x30
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 031c 	add.w	r3, r7, #28
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a32      	ldr	r2, [pc, #200]	@ (8002494 <HAL_UART_MspInit+0xe8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d12d      	bne.n	800242a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	4b31      	ldr	r3, [pc, #196]	@ (8002498 <HAL_UART_MspInit+0xec>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	4a30      	ldr	r2, [pc, #192]	@ (8002498 <HAL_UART_MspInit+0xec>)
 80023d8:	f043 0310 	orr.w	r3, r3, #16
 80023dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023de:	4b2e      	ldr	r3, [pc, #184]	@ (8002498 <HAL_UART_MspInit+0xec>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	61bb      	str	r3, [r7, #24]
 80023e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002498 <HAL_UART_MspInit+0xec>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	4a29      	ldr	r2, [pc, #164]	@ (8002498 <HAL_UART_MspInit+0xec>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023fa:	4b27      	ldr	r3, [pc, #156]	@ (8002498 <HAL_UART_MspInit+0xec>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002406:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800240a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240c:	2302      	movs	r3, #2
 800240e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002414:	2303      	movs	r3, #3
 8002416:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002418:	2307      	movs	r3, #7
 800241a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241c:	f107 031c 	add.w	r3, r7, #28
 8002420:	4619      	mov	r1, r3
 8002422:	481e      	ldr	r0, [pc, #120]	@ (800249c <HAL_UART_MspInit+0xf0>)
 8002424:	f000 faea 	bl	80029fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002428:	e030      	b.n	800248c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1c      	ldr	r2, [pc, #112]	@ (80024a0 <HAL_UART_MspInit+0xf4>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d12b      	bne.n	800248c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002434:	2300      	movs	r3, #0
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	4b17      	ldr	r3, [pc, #92]	@ (8002498 <HAL_UART_MspInit+0xec>)
 800243a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243c:	4a16      	ldr	r2, [pc, #88]	@ (8002498 <HAL_UART_MspInit+0xec>)
 800243e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002442:	6413      	str	r3, [r2, #64]	@ 0x40
 8002444:	4b14      	ldr	r3, [pc, #80]	@ (8002498 <HAL_UART_MspInit+0xec>)
 8002446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	4b10      	ldr	r3, [pc, #64]	@ (8002498 <HAL_UART_MspInit+0xec>)
 8002456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002458:	4a0f      	ldr	r2, [pc, #60]	@ (8002498 <HAL_UART_MspInit+0xec>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002460:	4b0d      	ldr	r3, [pc, #52]	@ (8002498 <HAL_UART_MspInit+0xec>)
 8002462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800246c:	230c      	movs	r3, #12
 800246e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002478:	2303      	movs	r3, #3
 800247a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800247c:	2307      	movs	r3, #7
 800247e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002480:	f107 031c 	add.w	r3, r7, #28
 8002484:	4619      	mov	r1, r3
 8002486:	4805      	ldr	r0, [pc, #20]	@ (800249c <HAL_UART_MspInit+0xf0>)
 8002488:	f000 fab8 	bl	80029fc <HAL_GPIO_Init>
}
 800248c:	bf00      	nop
 800248e:	3730      	adds	r7, #48	@ 0x30
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40011000 	.word	0x40011000
 8002498:	40023800 	.word	0x40023800
 800249c:	40020000 	.word	0x40020000
 80024a0:	40004400 	.word	0x40004400

080024a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08c      	sub	sp, #48	@ 0x30
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80024b4:	2300      	movs	r3, #0
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002574 <HAL_InitTick+0xd0>)
 80024ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002574 <HAL_InitTick+0xd0>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80024c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002574 <HAL_InitTick+0xd0>)
 80024c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024d0:	f107 020c 	add.w	r2, r7, #12
 80024d4:	f107 0310 	add.w	r3, r7, #16
 80024d8:	4611      	mov	r1, r2
 80024da:	4618      	mov	r0, r3
 80024dc:	f002 f9e0 	bl	80048a0 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80024e0:	f002 f9ca 	bl	8004878 <HAL_RCC_GetPCLK2Freq>
 80024e4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e8:	4a23      	ldr	r2, [pc, #140]	@ (8002578 <HAL_InitTick+0xd4>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	0c9b      	lsrs	r3, r3, #18
 80024f0:	3b01      	subs	r3, #1
 80024f2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80024f4:	4b21      	ldr	r3, [pc, #132]	@ (800257c <HAL_InitTick+0xd8>)
 80024f6:	4a22      	ldr	r2, [pc, #136]	@ (8002580 <HAL_InitTick+0xdc>)
 80024f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80024fa:	4b20      	ldr	r3, [pc, #128]	@ (800257c <HAL_InitTick+0xd8>)
 80024fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002500:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002502:	4a1e      	ldr	r2, [pc, #120]	@ (800257c <HAL_InitTick+0xd8>)
 8002504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002506:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002508:	4b1c      	ldr	r3, [pc, #112]	@ (800257c <HAL_InitTick+0xd8>)
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250e:	4b1b      	ldr	r3, [pc, #108]	@ (800257c <HAL_InitTick+0xd8>)
 8002510:	2200      	movs	r2, #0
 8002512:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002514:	4b19      	ldr	r3, [pc, #100]	@ (800257c <HAL_InitTick+0xd8>)
 8002516:	2200      	movs	r2, #0
 8002518:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800251a:	4818      	ldr	r0, [pc, #96]	@ (800257c <HAL_InitTick+0xd8>)
 800251c:	f002 fec0 	bl	80052a0 <HAL_TIM_Base_Init>
 8002520:	4603      	mov	r3, r0
 8002522:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002526:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800252a:	2b00      	cmp	r3, #0
 800252c:	d11b      	bne.n	8002566 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800252e:	4813      	ldr	r0, [pc, #76]	@ (800257c <HAL_InitTick+0xd8>)
 8002530:	f002 ff10 	bl	8005354 <HAL_TIM_Base_Start_IT>
 8002534:	4603      	mov	r3, r0
 8002536:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800253a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800253e:	2b00      	cmp	r3, #0
 8002540:	d111      	bne.n	8002566 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002542:	2019      	movs	r0, #25
 8002544:	f000 fa4c 	bl	80029e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b0f      	cmp	r3, #15
 800254c:	d808      	bhi.n	8002560 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800254e:	2200      	movs	r2, #0
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	2019      	movs	r0, #25
 8002554:	f000 fa28 	bl	80029a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002558:	4a0a      	ldr	r2, [pc, #40]	@ (8002584 <HAL_InitTick+0xe0>)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	e002      	b.n	8002566 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002566:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800256a:	4618      	mov	r0, r3
 800256c:	3730      	adds	r7, #48	@ 0x30
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800
 8002578:	431bde83 	.word	0x431bde83
 800257c:	200003e0 	.word	0x200003e0
 8002580:	40010000 	.word	0x40010000
 8002584:	2000000c 	.word	0x2000000c

08002588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800258c:	bf00      	nop
 800258e:	e7fd      	b.n	800258c <NMI_Handler+0x4>

08002590 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002594:	bf00      	nop
 8002596:	e7fd      	b.n	8002594 <HardFault_Handler+0x4>

08002598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800259c:	bf00      	nop
 800259e:	e7fd      	b.n	800259c <MemManage_Handler+0x4>

080025a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025a4:	bf00      	nop
 80025a6:	e7fd      	b.n	80025a4 <BusFault_Handler+0x4>

080025a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025ac:	bf00      	nop
 80025ae:	e7fd      	b.n	80025ac <UsageFault_Handler+0x4>

080025b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025c4:	4802      	ldr	r0, [pc, #8]	@ (80025d0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80025c6:	f002 ff35 	bl	8005434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200003e0 	.word	0x200003e0

080025d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return 1;
 80025d8:	2301      	movs	r3, #1
}
 80025da:	4618      	mov	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <_kill>:

int _kill(int pid, int sig)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025ee:	f007 f9fd 	bl	80099ec <__errno>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2216      	movs	r2, #22
 80025f6:	601a      	str	r2, [r3, #0]
  return -1;
 80025f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <_exit>:

void _exit (int status)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800260c:	f04f 31ff 	mov.w	r1, #4294967295
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff ffe7 	bl	80025e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002616:	bf00      	nop
 8002618:	e7fd      	b.n	8002616 <_exit+0x12>

0800261a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b086      	sub	sp, #24
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	e00a      	b.n	8002642 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800262c:	f3af 8000 	nop.w
 8002630:	4601      	mov	r1, r0
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	60ba      	str	r2, [r7, #8]
 8002638:	b2ca      	uxtb	r2, r1
 800263a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	3301      	adds	r3, #1
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	429a      	cmp	r2, r3
 8002648:	dbf0      	blt.n	800262c <_read+0x12>
  }

  return len;
 800264a:	687b      	ldr	r3, [r7, #4]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	e009      	b.n	800267a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	60ba      	str	r2, [r7, #8]
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fdac 	bl	80021cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	3301      	adds	r3, #1
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	429a      	cmp	r2, r3
 8002680:	dbf1      	blt.n	8002666 <_write+0x12>
  }
  return len;
 8002682:	687b      	ldr	r3, [r7, #4]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <_close>:

int _close(int file)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002694:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026b4:	605a      	str	r2, [r3, #4]
  return 0;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <_isatty>:

int _isatty(int file)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026cc:	2301      	movs	r3, #1
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026da:	b480      	push	{r7}
 80026dc:	b085      	sub	sp, #20
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026f8:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <SystemInit+0x20>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026fe:	4a05      	ldr	r2, [pc, #20]	@ (8002714 <SystemInit+0x20>)
 8002700:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002704:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002718:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002750 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800271c:	f7ff ffea 	bl	80026f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002720:	480c      	ldr	r0, [pc, #48]	@ (8002754 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002722:	490d      	ldr	r1, [pc, #52]	@ (8002758 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002724:	4a0d      	ldr	r2, [pc, #52]	@ (800275c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002728:	e002      	b.n	8002730 <LoopCopyDataInit>

0800272a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800272c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800272e:	3304      	adds	r3, #4

08002730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002734:	d3f9      	bcc.n	800272a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002736:	4a0a      	ldr	r2, [pc, #40]	@ (8002760 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002738:	4c0a      	ldr	r4, [pc, #40]	@ (8002764 <LoopFillZerobss+0x22>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800273c:	e001      	b.n	8002742 <LoopFillZerobss>

0800273e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800273e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002740:	3204      	adds	r2, #4

08002742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002744:	d3fb      	bcc.n	800273e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002746:	f007 f957 	bl	80099f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800274a:	f7ff f90d 	bl	8001968 <main>
  bx  lr    
 800274e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002750:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002758:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 800275c:	0800e590 	.word	0x0800e590
  ldr r2, =_sbss
 8002760:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002764:	20013324 	.word	0x20013324

08002768 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002768:	e7fe      	b.n	8002768 <ADC_IRQHandler>
	...

0800276c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002770:	4b0e      	ldr	r3, [pc, #56]	@ (80027ac <HAL_Init+0x40>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0d      	ldr	r2, [pc, #52]	@ (80027ac <HAL_Init+0x40>)
 8002776:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800277a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800277c:	4b0b      	ldr	r3, [pc, #44]	@ (80027ac <HAL_Init+0x40>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0a      	ldr	r2, [pc, #40]	@ (80027ac <HAL_Init+0x40>)
 8002782:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002786:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002788:	4b08      	ldr	r3, [pc, #32]	@ (80027ac <HAL_Init+0x40>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a07      	ldr	r2, [pc, #28]	@ (80027ac <HAL_Init+0x40>)
 800278e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002792:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002794:	2003      	movs	r0, #3
 8002796:	f000 f8fc 	bl	8002992 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800279a:	200f      	movs	r0, #15
 800279c:	f7ff fe82 	bl	80024a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027a0:	f7ff fd3e 	bl	8002220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40023c00 	.word	0x40023c00

080027b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027b4:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <HAL_IncTick+0x20>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <HAL_IncTick+0x24>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4413      	add	r3, r2
 80027c0:	4a04      	ldr	r2, [pc, #16]	@ (80027d4 <HAL_IncTick+0x24>)
 80027c2:	6013      	str	r3, [r2, #0]
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	20000010 	.word	0x20000010
 80027d4:	20000428 	.word	0x20000428

080027d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return uwTick;
 80027dc:	4b03      	ldr	r3, [pc, #12]	@ (80027ec <HAL_GetTick+0x14>)
 80027de:	681b      	ldr	r3, [r3, #0]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	20000428 	.word	0x20000428

080027f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027f8:	f7ff ffee 	bl	80027d8 <HAL_GetTick>
 80027fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002808:	d005      	beq.n	8002816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800280a:	4b0a      	ldr	r3, [pc, #40]	@ (8002834 <HAL_Delay+0x44>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	461a      	mov	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4413      	add	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002816:	bf00      	nop
 8002818:	f7ff ffde 	bl	80027d8 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	429a      	cmp	r2, r3
 8002826:	d8f7      	bhi.n	8002818 <HAL_Delay+0x28>
  {
  }
}
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20000010 	.word	0x20000010

08002838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002848:	4b0c      	ldr	r3, [pc, #48]	@ (800287c <__NVIC_SetPriorityGrouping+0x44>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002854:	4013      	ands	r3, r2
 8002856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002860:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800286a:	4a04      	ldr	r2, [pc, #16]	@ (800287c <__NVIC_SetPriorityGrouping+0x44>)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	60d3      	str	r3, [r2, #12]
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002884:	4b04      	ldr	r3, [pc, #16]	@ (8002898 <__NVIC_GetPriorityGrouping+0x18>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	0a1b      	lsrs	r3, r3, #8
 800288a:	f003 0307 	and.w	r3, r3, #7
}
 800288e:	4618      	mov	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	db0b      	blt.n	80028c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	f003 021f 	and.w	r2, r3, #31
 80028b4:	4907      	ldr	r1, [pc, #28]	@ (80028d4 <__NVIC_EnableIRQ+0x38>)
 80028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	2001      	movs	r0, #1
 80028be:	fa00 f202 	lsl.w	r2, r0, r2
 80028c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	e000e100 	.word	0xe000e100

080028d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	6039      	str	r1, [r7, #0]
 80028e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	db0a      	blt.n	8002902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	490c      	ldr	r1, [pc, #48]	@ (8002924 <__NVIC_SetPriority+0x4c>)
 80028f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f6:	0112      	lsls	r2, r2, #4
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	440b      	add	r3, r1
 80028fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002900:	e00a      	b.n	8002918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	b2da      	uxtb	r2, r3
 8002906:	4908      	ldr	r1, [pc, #32]	@ (8002928 <__NVIC_SetPriority+0x50>)
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	3b04      	subs	r3, #4
 8002910:	0112      	lsls	r2, r2, #4
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	440b      	add	r3, r1
 8002916:	761a      	strb	r2, [r3, #24]
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	e000e100 	.word	0xe000e100
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800292c:	b480      	push	{r7}
 800292e:	b089      	sub	sp, #36	@ 0x24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f1c3 0307 	rsb	r3, r3, #7
 8002946:	2b04      	cmp	r3, #4
 8002948:	bf28      	it	cs
 800294a:	2304      	movcs	r3, #4
 800294c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	3304      	adds	r3, #4
 8002952:	2b06      	cmp	r3, #6
 8002954:	d902      	bls.n	800295c <NVIC_EncodePriority+0x30>
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3b03      	subs	r3, #3
 800295a:	e000      	b.n	800295e <NVIC_EncodePriority+0x32>
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002960:	f04f 32ff 	mov.w	r2, #4294967295
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43da      	mvns	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	401a      	ands	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002974:	f04f 31ff 	mov.w	r1, #4294967295
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	fa01 f303 	lsl.w	r3, r1, r3
 800297e:	43d9      	mvns	r1, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002984:	4313      	orrs	r3, r2
         );
}
 8002986:	4618      	mov	r0, r3
 8002988:	3724      	adds	r7, #36	@ 0x24
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff ff4c 	bl	8002838 <__NVIC_SetPriorityGrouping>
}
 80029a0:	bf00      	nop
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029ba:	f7ff ff61 	bl	8002880 <__NVIC_GetPriorityGrouping>
 80029be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	6978      	ldr	r0, [r7, #20]
 80029c6:	f7ff ffb1 	bl	800292c <NVIC_EncodePriority>
 80029ca:	4602      	mov	r2, r0
 80029cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d0:	4611      	mov	r1, r2
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff ff80 	bl	80028d8 <__NVIC_SetPriority>
}
 80029d8:	bf00      	nop
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff ff54 	bl	800289c <__NVIC_EnableIRQ>
}
 80029f4:	bf00      	nop
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b089      	sub	sp, #36	@ 0x24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
 8002a16:	e165      	b.n	8002ce4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a18:	2201      	movs	r2, #1
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	f040 8154 	bne.w	8002cde <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d005      	beq.n	8002a4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d130      	bne.n	8002ab0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	2203      	movs	r2, #3
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a84:	2201      	movs	r2, #1
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f003 0201 	and.w	r2, r3, #1
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d017      	beq.n	8002aec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d123      	bne.n	8002b40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	08da      	lsrs	r2, r3, #3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3208      	adds	r2, #8
 8002b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	220f      	movs	r2, #15
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	08da      	lsrs	r2, r3, #3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3208      	adds	r2, #8
 8002b3a:	69b9      	ldr	r1, [r7, #24]
 8002b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0203 	and.w	r2, r3, #3
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80ae 	beq.w	8002cde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	4b5d      	ldr	r3, [pc, #372]	@ (8002cfc <HAL_GPIO_Init+0x300>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8a:	4a5c      	ldr	r2, [pc, #368]	@ (8002cfc <HAL_GPIO_Init+0x300>)
 8002b8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b92:	4b5a      	ldr	r3, [pc, #360]	@ (8002cfc <HAL_GPIO_Init+0x300>)
 8002b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b9e:	4a58      	ldr	r2, [pc, #352]	@ (8002d00 <HAL_GPIO_Init+0x304>)
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	089b      	lsrs	r3, r3, #2
 8002ba4:	3302      	adds	r3, #2
 8002ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	220f      	movs	r2, #15
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a4f      	ldr	r2, [pc, #316]	@ (8002d04 <HAL_GPIO_Init+0x308>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d025      	beq.n	8002c16 <HAL_GPIO_Init+0x21a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a4e      	ldr	r2, [pc, #312]	@ (8002d08 <HAL_GPIO_Init+0x30c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01f      	beq.n	8002c12 <HAL_GPIO_Init+0x216>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a4d      	ldr	r2, [pc, #308]	@ (8002d0c <HAL_GPIO_Init+0x310>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d019      	beq.n	8002c0e <HAL_GPIO_Init+0x212>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a4c      	ldr	r2, [pc, #304]	@ (8002d10 <HAL_GPIO_Init+0x314>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d013      	beq.n	8002c0a <HAL_GPIO_Init+0x20e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a4b      	ldr	r2, [pc, #300]	@ (8002d14 <HAL_GPIO_Init+0x318>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00d      	beq.n	8002c06 <HAL_GPIO_Init+0x20a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a4a      	ldr	r2, [pc, #296]	@ (8002d18 <HAL_GPIO_Init+0x31c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d007      	beq.n	8002c02 <HAL_GPIO_Init+0x206>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a49      	ldr	r2, [pc, #292]	@ (8002d1c <HAL_GPIO_Init+0x320>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d101      	bne.n	8002bfe <HAL_GPIO_Init+0x202>
 8002bfa:	2306      	movs	r3, #6
 8002bfc:	e00c      	b.n	8002c18 <HAL_GPIO_Init+0x21c>
 8002bfe:	2307      	movs	r3, #7
 8002c00:	e00a      	b.n	8002c18 <HAL_GPIO_Init+0x21c>
 8002c02:	2305      	movs	r3, #5
 8002c04:	e008      	b.n	8002c18 <HAL_GPIO_Init+0x21c>
 8002c06:	2304      	movs	r3, #4
 8002c08:	e006      	b.n	8002c18 <HAL_GPIO_Init+0x21c>
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e004      	b.n	8002c18 <HAL_GPIO_Init+0x21c>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e002      	b.n	8002c18 <HAL_GPIO_Init+0x21c>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <HAL_GPIO_Init+0x21c>
 8002c16:	2300      	movs	r3, #0
 8002c18:	69fa      	ldr	r2, [r7, #28]
 8002c1a:	f002 0203 	and.w	r2, r2, #3
 8002c1e:	0092      	lsls	r2, r2, #2
 8002c20:	4093      	lsls	r3, r2
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c28:	4935      	ldr	r1, [pc, #212]	@ (8002d00 <HAL_GPIO_Init+0x304>)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	089b      	lsrs	r3, r3, #2
 8002c2e:	3302      	adds	r3, #2
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c36:	4b3a      	ldr	r3, [pc, #232]	@ (8002d20 <HAL_GPIO_Init+0x324>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4013      	ands	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c5a:	4a31      	ldr	r2, [pc, #196]	@ (8002d20 <HAL_GPIO_Init+0x324>)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c60:	4b2f      	ldr	r3, [pc, #188]	@ (8002d20 <HAL_GPIO_Init+0x324>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c84:	4a26      	ldr	r2, [pc, #152]	@ (8002d20 <HAL_GPIO_Init+0x324>)
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c8a:	4b25      	ldr	r3, [pc, #148]	@ (8002d20 <HAL_GPIO_Init+0x324>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cae:	4a1c      	ldr	r2, [pc, #112]	@ (8002d20 <HAL_GPIO_Init+0x324>)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d20 <HAL_GPIO_Init+0x324>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cd8:	4a11      	ldr	r2, [pc, #68]	@ (8002d20 <HAL_GPIO_Init+0x324>)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	61fb      	str	r3, [r7, #28]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	2b0f      	cmp	r3, #15
 8002ce8:	f67f ae96 	bls.w	8002a18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cec:	bf00      	nop
 8002cee:	bf00      	nop
 8002cf0:	3724      	adds	r7, #36	@ 0x24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40013800 	.word	0x40013800
 8002d04:	40020000 	.word	0x40020000
 8002d08:	40020400 	.word	0x40020400
 8002d0c:	40020800 	.word	0x40020800
 8002d10:	40020c00 	.word	0x40020c00
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40021400 	.word	0x40021400
 8002d1c:	40021800 	.word	0x40021800
 8002d20:	40013c00 	.word	0x40013c00

08002d24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e12b      	b.n	8002f8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff fa90 	bl	8002270 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2224      	movs	r2, #36	@ 0x24
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0201 	bic.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d88:	f001 fd62 	bl	8004850 <HAL_RCC_GetPCLK1Freq>
 8002d8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	4a81      	ldr	r2, [pc, #516]	@ (8002f98 <HAL_I2C_Init+0x274>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d807      	bhi.n	8002da8 <HAL_I2C_Init+0x84>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4a80      	ldr	r2, [pc, #512]	@ (8002f9c <HAL_I2C_Init+0x278>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	bf94      	ite	ls
 8002da0:	2301      	movls	r3, #1
 8002da2:	2300      	movhi	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	e006      	b.n	8002db6 <HAL_I2C_Init+0x92>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4a7d      	ldr	r2, [pc, #500]	@ (8002fa0 <HAL_I2C_Init+0x27c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	bf94      	ite	ls
 8002db0:	2301      	movls	r3, #1
 8002db2:	2300      	movhi	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e0e7      	b.n	8002f8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	4a78      	ldr	r2, [pc, #480]	@ (8002fa4 <HAL_I2C_Init+0x280>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	0c9b      	lsrs	r3, r3, #18
 8002dc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4a6a      	ldr	r2, [pc, #424]	@ (8002f98 <HAL_I2C_Init+0x274>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d802      	bhi.n	8002df8 <HAL_I2C_Init+0xd4>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	3301      	adds	r3, #1
 8002df6:	e009      	b.n	8002e0c <HAL_I2C_Init+0xe8>
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002dfe:	fb02 f303 	mul.w	r3, r2, r3
 8002e02:	4a69      	ldr	r2, [pc, #420]	@ (8002fa8 <HAL_I2C_Init+0x284>)
 8002e04:	fba2 2303 	umull	r2, r3, r2, r3
 8002e08:	099b      	lsrs	r3, r3, #6
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e1e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	495c      	ldr	r1, [pc, #368]	@ (8002f98 <HAL_I2C_Init+0x274>)
 8002e28:	428b      	cmp	r3, r1
 8002e2a:	d819      	bhi.n	8002e60 <HAL_I2C_Init+0x13c>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1e59      	subs	r1, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e3a:	1c59      	adds	r1, r3, #1
 8002e3c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e40:	400b      	ands	r3, r1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_I2C_Init+0x138>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1e59      	subs	r1, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e54:	3301      	adds	r3, #1
 8002e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5a:	e051      	b.n	8002f00 <HAL_I2C_Init+0x1dc>
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	e04f      	b.n	8002f00 <HAL_I2C_Init+0x1dc>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d111      	bne.n	8002e8c <HAL_I2C_Init+0x168>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1e58      	subs	r0, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6859      	ldr	r1, [r3, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	440b      	add	r3, r1
 8002e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf0c      	ite	eq
 8002e84:	2301      	moveq	r3, #1
 8002e86:	2300      	movne	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	e012      	b.n	8002eb2 <HAL_I2C_Init+0x18e>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	1e58      	subs	r0, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6859      	ldr	r1, [r3, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	0099      	lsls	r1, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_I2C_Init+0x196>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e022      	b.n	8002f00 <HAL_I2C_Init+0x1dc>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10e      	bne.n	8002ee0 <HAL_I2C_Init+0x1bc>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1e58      	subs	r0, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6859      	ldr	r1, [r3, #4]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	440b      	add	r3, r1
 8002ed0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ede:	e00f      	b.n	8002f00 <HAL_I2C_Init+0x1dc>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1e58      	subs	r0, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	0099      	lsls	r1, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	6809      	ldr	r1, [r1, #0]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69da      	ldr	r2, [r3, #28]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6911      	ldr	r1, [r2, #16]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	68d2      	ldr	r2, [r2, #12]
 8002f3a:	4311      	orrs	r1, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	430b      	orrs	r3, r1
 8002f42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	000186a0 	.word	0x000186a0
 8002f9c:	001e847f 	.word	0x001e847f
 8002fa0:	003d08ff 	.word	0x003d08ff
 8002fa4:	431bde83 	.word	0x431bde83
 8002fa8:	10624dd3 	.word	0x10624dd3

08002fac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	460b      	mov	r3, r1
 8002fba:	817b      	strh	r3, [r7, #10]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fc0:	f7ff fc0a 	bl	80027d8 <HAL_GetTick>
 8002fc4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	f040 80e0 	bne.w	8003194 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	2319      	movs	r3, #25
 8002fda:	2201      	movs	r2, #1
 8002fdc:	4970      	ldr	r1, [pc, #448]	@ (80031a0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f001 f90e 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002fea:	2302      	movs	r3, #2
 8002fec:	e0d3      	b.n	8003196 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_I2C_Master_Transmit+0x50>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e0cc      	b.n	8003196 <HAL_I2C_Master_Transmit+0x1ea>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b01      	cmp	r3, #1
 8003010:	d007      	beq.n	8003022 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0201 	orr.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003030:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2221      	movs	r2, #33	@ 0x21
 8003036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2210      	movs	r2, #16
 800303e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	893a      	ldrh	r2, [r7, #8]
 8003052:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4a50      	ldr	r2, [pc, #320]	@ (80031a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003062:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003064:	8979      	ldrh	r1, [r7, #10]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	6a3a      	ldr	r2, [r7, #32]
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 fdfa 	bl	8003c64 <I2C_MasterRequestWrite>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e08d      	b.n	8003196 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003090:	e066      	b.n	8003160 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	6a39      	ldr	r1, [r7, #32]
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f001 f9cc 	bl	8004434 <I2C_WaitOnTXEFlagUntilTimeout>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00d      	beq.n	80030be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d107      	bne.n	80030ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e06b      	b.n	8003196 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c2:	781a      	ldrb	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d11b      	bne.n	8003134 <HAL_I2C_Master_Transmit+0x188>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003100:	2b00      	cmp	r3, #0
 8003102:	d017      	beq.n	8003134 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003108:	781a      	ldrb	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311e:	b29b      	uxth	r3, r3
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	6a39      	ldr	r1, [r7, #32]
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f001 f9c3 	bl	80044c4 <I2C_WaitOnBTFFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00d      	beq.n	8003160 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003148:	2b04      	cmp	r3, #4
 800314a:	d107      	bne.n	800315c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800315a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e01a      	b.n	8003196 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003164:	2b00      	cmp	r3, #0
 8003166:	d194      	bne.n	8003092 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003176:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	e000      	b.n	8003196 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003194:	2302      	movs	r3, #2
  }
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	00100002 	.word	0x00100002
 80031a4:	ffff0000 	.word	0xffff0000

080031a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08c      	sub	sp, #48	@ 0x30
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	461a      	mov	r2, r3
 80031b4:	460b      	mov	r3, r1
 80031b6:	817b      	strh	r3, [r7, #10]
 80031b8:	4613      	mov	r3, r2
 80031ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031bc:	f7ff fb0c 	bl	80027d8 <HAL_GetTick>
 80031c0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b20      	cmp	r3, #32
 80031cc:	f040 8217 	bne.w	80035fe <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	2319      	movs	r3, #25
 80031d6:	2201      	movs	r2, #1
 80031d8:	497c      	ldr	r1, [pc, #496]	@ (80033cc <HAL_I2C_Master_Receive+0x224>)
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f001 f810 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80031e6:	2302      	movs	r3, #2
 80031e8:	e20a      	b.n	8003600 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_I2C_Master_Receive+0x50>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e203      	b.n	8003600 <HAL_I2C_Master_Receive+0x458>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b01      	cmp	r3, #1
 800320c:	d007      	beq.n	800321e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0201 	orr.w	r2, r2, #1
 800321c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800322c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2222      	movs	r2, #34	@ 0x22
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2210      	movs	r2, #16
 800323a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	893a      	ldrh	r2, [r7, #8]
 800324e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4a5c      	ldr	r2, [pc, #368]	@ (80033d0 <HAL_I2C_Master_Receive+0x228>)
 800325e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003260:	8979      	ldrh	r1, [r7, #10]
 8003262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 fd7e 	bl	8003d68 <I2C_MasterRequestRead>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e1c4      	b.n	8003600 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800327a:	2b00      	cmp	r3, #0
 800327c:	d113      	bne.n	80032a6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800327e:	2300      	movs	r3, #0
 8003280:	623b      	str	r3, [r7, #32]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	623b      	str	r3, [r7, #32]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	623b      	str	r3, [r7, #32]
 8003292:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	e198      	b.n	80035d8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d11b      	bne.n	80032e6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	e178      	b.n	80035d8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d11b      	bne.n	8003326 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800330c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800330e:	2300      	movs	r3, #0
 8003310:	61bb      	str	r3, [r7, #24]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	61bb      	str	r3, [r7, #24]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	61bb      	str	r3, [r7, #24]
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	e158      	b.n	80035d8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003334:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800334c:	e144      	b.n	80035d8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003352:	2b03      	cmp	r3, #3
 8003354:	f200 80f1 	bhi.w	800353a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335c:	2b01      	cmp	r3, #1
 800335e:	d123      	bne.n	80033a8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003362:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f001 f8f5 	bl	8004554 <I2C_WaitOnRXNEFlagUntilTimeout>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e145      	b.n	8003600 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691a      	ldr	r2, [r3, #16]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339c:	b29b      	uxth	r3, r3
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033a6:	e117      	b.n	80035d8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d14e      	bne.n	800344e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b6:	2200      	movs	r2, #0
 80033b8:	4906      	ldr	r1, [pc, #24]	@ (80033d4 <HAL_I2C_Master_Receive+0x22c>)
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 ff20 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d008      	beq.n	80033d8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e11a      	b.n	8003600 <HAL_I2C_Master_Receive+0x458>
 80033ca:	bf00      	nop
 80033cc:	00100002 	.word	0x00100002
 80033d0:	ffff0000 	.word	0xffff0000
 80033d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	691a      	ldr	r2, [r3, #16]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800344c:	e0c4      	b.n	80035d8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800344e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003454:	2200      	movs	r2, #0
 8003456:	496c      	ldr	r1, [pc, #432]	@ (8003608 <HAL_I2C_Master_Receive+0x460>)
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 fed1 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0cb      	b.n	8003600 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003476:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b0:	2200      	movs	r2, #0
 80034b2:	4955      	ldr	r1, [pc, #340]	@ (8003608 <HAL_I2C_Master_Receive+0x460>)
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 fea3 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e09d      	b.n	8003600 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003538:	e04e      	b.n	80035d8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800353a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800353c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f001 f808 	bl	8004554 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e058      	b.n	8003600 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800356a:	3b01      	subs	r3, #1
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003576:	b29b      	uxth	r3, r3
 8003578:	3b01      	subs	r3, #1
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	2b04      	cmp	r3, #4
 800358c:	d124      	bne.n	80035d8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003592:	2b03      	cmp	r3, #3
 8003594:	d107      	bne.n	80035a6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035a4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f47f aeb6 	bne.w	800334e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	e000      	b.n	8003600 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80035fe:	2302      	movs	r3, #2
  }
}
 8003600:	4618      	mov	r0, r3
 8003602:	3728      	adds	r7, #40	@ 0x28
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	00010004 	.word	0x00010004

0800360c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b088      	sub	sp, #32
 8003610:	af02      	add	r7, sp, #8
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	4608      	mov	r0, r1
 8003616:	4611      	mov	r1, r2
 8003618:	461a      	mov	r2, r3
 800361a:	4603      	mov	r3, r0
 800361c:	817b      	strh	r3, [r7, #10]
 800361e:	460b      	mov	r3, r1
 8003620:	813b      	strh	r3, [r7, #8]
 8003622:	4613      	mov	r3, r2
 8003624:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003626:	f7ff f8d7 	bl	80027d8 <HAL_GetTick>
 800362a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b20      	cmp	r3, #32
 8003636:	f040 80d9 	bne.w	80037ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	2319      	movs	r3, #25
 8003640:	2201      	movs	r2, #1
 8003642:	496d      	ldr	r1, [pc, #436]	@ (80037f8 <HAL_I2C_Mem_Write+0x1ec>)
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fddb 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003650:	2302      	movs	r3, #2
 8003652:	e0cc      	b.n	80037ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_I2C_Mem_Write+0x56>
 800365e:	2302      	movs	r3, #2
 8003660:	e0c5      	b.n	80037ee <HAL_I2C_Mem_Write+0x1e2>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b01      	cmp	r3, #1
 8003676:	d007      	beq.n	8003688 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0201 	orr.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003696:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2221      	movs	r2, #33	@ 0x21
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2240      	movs	r2, #64	@ 0x40
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a3a      	ldr	r2, [r7, #32]
 80036b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80036b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4a4d      	ldr	r2, [pc, #308]	@ (80037fc <HAL_I2C_Mem_Write+0x1f0>)
 80036c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036ca:	88f8      	ldrh	r0, [r7, #6]
 80036cc:	893a      	ldrh	r2, [r7, #8]
 80036ce:	8979      	ldrh	r1, [r7, #10]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	4603      	mov	r3, r0
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fc12 	bl	8003f04 <I2C_RequestMemoryWrite>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d052      	beq.n	800378c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e081      	b.n	80037ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 fea0 	bl	8004434 <I2C_WaitOnTXEFlagUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00d      	beq.n	8003716 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d107      	bne.n	8003712 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003710:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e06b      	b.n	80037ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371a:	781a      	ldrb	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373c:	b29b      	uxth	r3, r3
 800373e:	3b01      	subs	r3, #1
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b04      	cmp	r3, #4
 8003752:	d11b      	bne.n	800378c <HAL_I2C_Mem_Write+0x180>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003758:	2b00      	cmp	r3, #0
 800375a:	d017      	beq.n	800378c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003760:	781a      	ldrb	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003782:	b29b      	uxth	r3, r3
 8003784:	3b01      	subs	r3, #1
 8003786:	b29a      	uxth	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1aa      	bne.n	80036ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 fe93 	bl	80044c4 <I2C_WaitOnBTFFlagUntilTimeout>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00d      	beq.n	80037c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d107      	bne.n	80037bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e016      	b.n	80037ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	e000      	b.n	80037ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80037ec:	2302      	movs	r3, #2
  }
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	00100002 	.word	0x00100002
 80037fc:	ffff0000 	.word	0xffff0000

08003800 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08c      	sub	sp, #48	@ 0x30
 8003804:	af02      	add	r7, sp, #8
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	4608      	mov	r0, r1
 800380a:	4611      	mov	r1, r2
 800380c:	461a      	mov	r2, r3
 800380e:	4603      	mov	r3, r0
 8003810:	817b      	strh	r3, [r7, #10]
 8003812:	460b      	mov	r3, r1
 8003814:	813b      	strh	r3, [r7, #8]
 8003816:	4613      	mov	r3, r2
 8003818:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800381a:	f7fe ffdd 	bl	80027d8 <HAL_GetTick>
 800381e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b20      	cmp	r3, #32
 800382a:	f040 8214 	bne.w	8003c56 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800382e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	2319      	movs	r3, #25
 8003834:	2201      	movs	r2, #1
 8003836:	497b      	ldr	r1, [pc, #492]	@ (8003a24 <HAL_I2C_Mem_Read+0x224>)
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 fce1 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003844:	2302      	movs	r3, #2
 8003846:	e207      	b.n	8003c58 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_I2C_Mem_Read+0x56>
 8003852:	2302      	movs	r3, #2
 8003854:	e200      	b.n	8003c58 <HAL_I2C_Mem_Read+0x458>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b01      	cmp	r3, #1
 800386a:	d007      	beq.n	800387c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800388a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2222      	movs	r2, #34	@ 0x22
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2240      	movs	r2, #64	@ 0x40
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80038ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003a28 <HAL_I2C_Mem_Read+0x228>)
 80038bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038be:	88f8      	ldrh	r0, [r7, #6]
 80038c0:	893a      	ldrh	r2, [r7, #8]
 80038c2:	8979      	ldrh	r1, [r7, #10]
 80038c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c6:	9301      	str	r3, [sp, #4]
 80038c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	4603      	mov	r3, r0
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 fbae 	bl	8004030 <I2C_RequestMemoryRead>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e1bc      	b.n	8003c58 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d113      	bne.n	800390e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e6:	2300      	movs	r3, #0
 80038e8:	623b      	str	r3, [r7, #32]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	623b      	str	r3, [r7, #32]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	623b      	str	r3, [r7, #32]
 80038fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	e190      	b.n	8003c30 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003912:	2b01      	cmp	r3, #1
 8003914:	d11b      	bne.n	800394e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003924:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	61fb      	str	r3, [r7, #28]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	61fb      	str	r3, [r7, #28]
 800393a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	e170      	b.n	8003c30 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003952:	2b02      	cmp	r3, #2
 8003954:	d11b      	bne.n	800398e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003964:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003974:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003976:	2300      	movs	r3, #0
 8003978:	61bb      	str	r3, [r7, #24]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	61bb      	str	r3, [r7, #24]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	61bb      	str	r3, [r7, #24]
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	e150      	b.n	8003c30 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80039a4:	e144      	b.n	8003c30 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	f200 80f1 	bhi.w	8003b92 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d123      	bne.n	8003a00 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 fdc9 	bl	8004554 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e145      	b.n	8003c58 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691a      	ldr	r2, [r3, #16]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	3b01      	subs	r3, #1
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039fe:	e117      	b.n	8003c30 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d14e      	bne.n	8003aa6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a0e:	2200      	movs	r2, #0
 8003a10:	4906      	ldr	r1, [pc, #24]	@ (8003a2c <HAL_I2C_Mem_Read+0x22c>)
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 fbf4 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d008      	beq.n	8003a30 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e11a      	b.n	8003c58 <HAL_I2C_Mem_Read+0x458>
 8003a22:	bf00      	nop
 8003a24:	00100002 	.word	0x00100002
 8003a28:	ffff0000 	.word	0xffff0000
 8003a2c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	691a      	ldr	r2, [r3, #16]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003aa4:	e0c4      	b.n	8003c30 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aac:	2200      	movs	r2, #0
 8003aae:	496c      	ldr	r1, [pc, #432]	@ (8003c60 <HAL_I2C_Mem_Read+0x460>)
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 fba5 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0cb      	b.n	8003c58 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ace:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	691a      	ldr	r2, [r3, #16]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b08:	2200      	movs	r2, #0
 8003b0a:	4955      	ldr	r1, [pc, #340]	@ (8003c60 <HAL_I2C_Mem_Read+0x460>)
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 fb77 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e09d      	b.n	8003c58 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691a      	ldr	r2, [r3, #16]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b90:	e04e      	b.n	8003c30 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b94:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 fcdc 	bl	8004554 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e058      	b.n	8003c58 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d124      	bne.n	8003c30 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d107      	bne.n	8003bfe <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bfc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c08:	b2d2      	uxtb	r2, r2
 8003c0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f47f aeb6 	bne.w	80039a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	e000      	b.n	8003c58 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003c56:	2302      	movs	r3, #2
  }
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3728      	adds	r7, #40	@ 0x28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	00010004 	.word	0x00010004

08003c64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af02      	add	r7, sp, #8
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	607a      	str	r2, [r7, #4]
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	460b      	mov	r3, r1
 8003c72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d006      	beq.n	8003c8e <I2C_MasterRequestWrite+0x2a>
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d003      	beq.n	8003c8e <I2C_MasterRequestWrite+0x2a>
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c8c:	d108      	bne.n	8003ca0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	e00b      	b.n	8003cb8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca4:	2b12      	cmp	r3, #18
 8003ca6:	d107      	bne.n	8003cb8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 fa9b 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00d      	beq.n	8003cec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cde:	d103      	bne.n	8003ce8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ce6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e035      	b.n	8003d58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cf4:	d108      	bne.n	8003d08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cf6:	897b      	ldrh	r3, [r7, #10]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d04:	611a      	str	r2, [r3, #16]
 8003d06:	e01b      	b.n	8003d40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d08:	897b      	ldrh	r3, [r7, #10]
 8003d0a:	11db      	asrs	r3, r3, #7
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f003 0306 	and.w	r3, r3, #6
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	f063 030f 	orn	r3, r3, #15
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	490e      	ldr	r1, [pc, #56]	@ (8003d60 <I2C_MasterRequestWrite+0xfc>)
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 fae4 	bl	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e010      	b.n	8003d58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d36:	897b      	ldrh	r3, [r7, #10]
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	4907      	ldr	r1, [pc, #28]	@ (8003d64 <I2C_MasterRequestWrite+0x100>)
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 fad4 	bl	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	00010008 	.word	0x00010008
 8003d64:	00010002 	.word	0x00010002

08003d68 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	607a      	str	r2, [r7, #4]
 8003d72:	603b      	str	r3, [r7, #0]
 8003d74:	460b      	mov	r3, r1
 8003d76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d8c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d006      	beq.n	8003da2 <I2C_MasterRequestRead+0x3a>
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d003      	beq.n	8003da2 <I2C_MasterRequestRead+0x3a>
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003da0:	d108      	bne.n	8003db4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	e00b      	b.n	8003dcc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db8:	2b11      	cmp	r3, #17
 8003dba:	d107      	bne.n	8003dcc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 fa11 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00d      	beq.n	8003e00 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003df2:	d103      	bne.n	8003dfc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dfa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e079      	b.n	8003ef4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e08:	d108      	bne.n	8003e1c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e0a:	897b      	ldrh	r3, [r7, #10]
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	611a      	str	r2, [r3, #16]
 8003e1a:	e05f      	b.n	8003edc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e1c:	897b      	ldrh	r3, [r7, #10]
 8003e1e:	11db      	asrs	r3, r3, #7
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	f003 0306 	and.w	r3, r3, #6
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	f063 030f 	orn	r3, r3, #15
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	4930      	ldr	r1, [pc, #192]	@ (8003efc <I2C_MasterRequestRead+0x194>)
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 fa5a 	bl	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e054      	b.n	8003ef4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e4a:	897b      	ldrh	r3, [r7, #10]
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	4929      	ldr	r1, [pc, #164]	@ (8003f00 <I2C_MasterRequestRead+0x198>)
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 fa4a 	bl	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e044      	b.n	8003ef4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	613b      	str	r3, [r7, #16]
 8003e7e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e8e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f9af 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00d      	beq.n	8003ec4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eb6:	d103      	bne.n	8003ec0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ebe:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e017      	b.n	8003ef4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ec4:	897b      	ldrh	r3, [r7, #10]
 8003ec6:	11db      	asrs	r3, r3, #7
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	f003 0306 	and.w	r3, r3, #6
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	f063 030e 	orn	r3, r3, #14
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	4907      	ldr	r1, [pc, #28]	@ (8003f00 <I2C_MasterRequestRead+0x198>)
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 fa06 	bl	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	00010008 	.word	0x00010008
 8003f00:	00010002 	.word	0x00010002

08003f04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b088      	sub	sp, #32
 8003f08:	af02      	add	r7, sp, #8
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	4608      	mov	r0, r1
 8003f0e:	4611      	mov	r1, r2
 8003f10:	461a      	mov	r2, r3
 8003f12:	4603      	mov	r3, r0
 8003f14:	817b      	strh	r3, [r7, #10]
 8003f16:	460b      	mov	r3, r1
 8003f18:	813b      	strh	r3, [r7, #8]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 f960 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00d      	beq.n	8003f62 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f54:	d103      	bne.n	8003f5e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e05f      	b.n	8004022 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f62:	897b      	ldrh	r3, [r7, #10]
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f74:	6a3a      	ldr	r2, [r7, #32]
 8003f76:	492d      	ldr	r1, [pc, #180]	@ (800402c <I2C_RequestMemoryWrite+0x128>)
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 f9bb 	bl	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e04c      	b.n	8004022 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa0:	6a39      	ldr	r1, [r7, #32]
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 fa46 	bl	8004434 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00d      	beq.n	8003fca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d107      	bne.n	8003fc6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e02b      	b.n	8004022 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fca:	88fb      	ldrh	r3, [r7, #6]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d105      	bne.n	8003fdc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fd0:	893b      	ldrh	r3, [r7, #8]
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	611a      	str	r2, [r3, #16]
 8003fda:	e021      	b.n	8004020 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fdc:	893b      	ldrh	r3, [r7, #8]
 8003fde:	0a1b      	lsrs	r3, r3, #8
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fec:	6a39      	ldr	r1, [r7, #32]
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 fa20 	bl	8004434 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00d      	beq.n	8004016 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d107      	bne.n	8004012 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004010:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e005      	b.n	8004022 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004016:	893b      	ldrh	r3, [r7, #8]
 8004018:	b2da      	uxtb	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	00010002 	.word	0x00010002

08004030 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af02      	add	r7, sp, #8
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	4608      	mov	r0, r1
 800403a:	4611      	mov	r1, r2
 800403c:	461a      	mov	r2, r3
 800403e:	4603      	mov	r3, r0
 8004040:	817b      	strh	r3, [r7, #10]
 8004042:	460b      	mov	r3, r1
 8004044:	813b      	strh	r3, [r7, #8]
 8004046:	4613      	mov	r3, r2
 8004048:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004058:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004068:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800406a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	2200      	movs	r2, #0
 8004072:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f8c2 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00d      	beq.n	800409e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800408c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004090:	d103      	bne.n	800409a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004098:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e0aa      	b.n	80041f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800409e:	897b      	ldrh	r3, [r7, #10]
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	461a      	mov	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b0:	6a3a      	ldr	r2, [r7, #32]
 80040b2:	4952      	ldr	r1, [pc, #328]	@ (80041fc <I2C_RequestMemoryRead+0x1cc>)
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 f91d 	bl	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e097      	b.n	80041f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c4:	2300      	movs	r3, #0
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040dc:	6a39      	ldr	r1, [r7, #32]
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 f9a8 	bl	8004434 <I2C_WaitOnTXEFlagUntilTimeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00d      	beq.n	8004106 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d107      	bne.n	8004102 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004100:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e076      	b.n	80041f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d105      	bne.n	8004118 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800410c:	893b      	ldrh	r3, [r7, #8]
 800410e:	b2da      	uxtb	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	611a      	str	r2, [r3, #16]
 8004116:	e021      	b.n	800415c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004118:	893b      	ldrh	r3, [r7, #8]
 800411a:	0a1b      	lsrs	r3, r3, #8
 800411c:	b29b      	uxth	r3, r3
 800411e:	b2da      	uxtb	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004128:	6a39      	ldr	r1, [r7, #32]
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 f982 	bl	8004434 <I2C_WaitOnTXEFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00d      	beq.n	8004152 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413a:	2b04      	cmp	r3, #4
 800413c:	d107      	bne.n	800414e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800414c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e050      	b.n	80041f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004152:	893b      	ldrh	r3, [r7, #8]
 8004154:	b2da      	uxtb	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800415c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800415e:	6a39      	ldr	r1, [r7, #32]
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f967 	bl	8004434 <I2C_WaitOnTXEFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00d      	beq.n	8004188 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004170:	2b04      	cmp	r3, #4
 8004172:	d107      	bne.n	8004184 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004182:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e035      	b.n	80041f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004196:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	2200      	movs	r2, #0
 80041a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f82b 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00d      	beq.n	80041cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041be:	d103      	bne.n	80041c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e013      	b.n	80041f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041cc:	897b      	ldrh	r3, [r7, #10]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041de:	6a3a      	ldr	r2, [r7, #32]
 80041e0:	4906      	ldr	r1, [pc, #24]	@ (80041fc <I2C_RequestMemoryRead+0x1cc>)
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 f886 	bl	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	00010002 	.word	0x00010002

08004200 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004210:	e048      	b.n	80042a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004218:	d044      	beq.n	80042a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800421a:	f7fe fadd 	bl	80027d8 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d302      	bcc.n	8004230 <I2C_WaitOnFlagUntilTimeout+0x30>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d139      	bne.n	80042a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	0c1b      	lsrs	r3, r3, #16
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b01      	cmp	r3, #1
 8004238:	d10d      	bne.n	8004256 <I2C_WaitOnFlagUntilTimeout+0x56>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	43da      	mvns	r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	4013      	ands	r3, r2
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	bf0c      	ite	eq
 800424c:	2301      	moveq	r3, #1
 800424e:	2300      	movne	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	461a      	mov	r2, r3
 8004254:	e00c      	b.n	8004270 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	43da      	mvns	r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	4013      	ands	r3, r2
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	bf0c      	ite	eq
 8004268:	2301      	moveq	r3, #1
 800426a:	2300      	movne	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	461a      	mov	r2, r3
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	429a      	cmp	r2, r3
 8004274:	d116      	bne.n	80042a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004290:	f043 0220 	orr.w	r2, r3, #32
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e023      	b.n	80042ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	0c1b      	lsrs	r3, r3, #16
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d10d      	bne.n	80042ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	43da      	mvns	r2, r3
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4013      	ands	r3, r2
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	bf0c      	ite	eq
 80042c0:	2301      	moveq	r3, #1
 80042c2:	2300      	movne	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	461a      	mov	r2, r3
 80042c8:	e00c      	b.n	80042e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	43da      	mvns	r2, r3
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	4013      	ands	r3, r2
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	bf0c      	ite	eq
 80042dc:	2301      	moveq	r3, #1
 80042de:	2300      	movne	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	461a      	mov	r2, r3
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d093      	beq.n	8004212 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004302:	e071      	b.n	80043e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800430e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004312:	d123      	bne.n	800435c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004322:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800432c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004348:	f043 0204 	orr.w	r2, r3, #4
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e067      	b.n	800442c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004362:	d041      	beq.n	80043e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004364:	f7fe fa38 	bl	80027d8 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	429a      	cmp	r2, r3
 8004372:	d302      	bcc.n	800437a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d136      	bne.n	80043e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	0c1b      	lsrs	r3, r3, #16
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	d10c      	bne.n	800439e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	43da      	mvns	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4013      	ands	r3, r2
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	bf14      	ite	ne
 8004396:	2301      	movne	r3, #1
 8004398:	2300      	moveq	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	e00b      	b.n	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	43da      	mvns	r2, r3
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	4013      	ands	r3, r2
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf14      	ite	ne
 80043b0:	2301      	movne	r3, #1
 80043b2:	2300      	moveq	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d016      	beq.n	80043e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d4:	f043 0220 	orr.w	r2, r3, #32
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e021      	b.n	800442c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	0c1b      	lsrs	r3, r3, #16
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d10c      	bne.n	800440c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	43da      	mvns	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	4013      	ands	r3, r2
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	bf14      	ite	ne
 8004404:	2301      	movne	r3, #1
 8004406:	2300      	moveq	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	e00b      	b.n	8004424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	43da      	mvns	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4013      	ands	r3, r2
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	bf14      	ite	ne
 800441e:	2301      	movne	r3, #1
 8004420:	2300      	moveq	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	f47f af6d 	bne.w	8004304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004440:	e034      	b.n	80044ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f8e3 	bl	800460e <I2C_IsAcknowledgeFailed>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e034      	b.n	80044bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004458:	d028      	beq.n	80044ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445a:	f7fe f9bd 	bl	80027d8 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	429a      	cmp	r2, r3
 8004468:	d302      	bcc.n	8004470 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d11d      	bne.n	80044ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800447a:	2b80      	cmp	r3, #128	@ 0x80
 800447c:	d016      	beq.n	80044ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004498:	f043 0220 	orr.w	r2, r3, #32
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e007      	b.n	80044bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b6:	2b80      	cmp	r3, #128	@ 0x80
 80044b8:	d1c3      	bne.n	8004442 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044d0:	e034      	b.n	800453c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 f89b 	bl	800460e <I2C_IsAcknowledgeFailed>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e034      	b.n	800454c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e8:	d028      	beq.n	800453c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ea:	f7fe f975 	bl	80027d8 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d302      	bcc.n	8004500 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d11d      	bne.n	800453c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f003 0304 	and.w	r3, r3, #4
 800450a:	2b04      	cmp	r3, #4
 800450c:	d016      	beq.n	800453c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004528:	f043 0220 	orr.w	r2, r3, #32
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e007      	b.n	800454c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b04      	cmp	r3, #4
 8004548:	d1c3      	bne.n	80044d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004560:	e049      	b.n	80045f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b10      	cmp	r3, #16
 800456e:	d119      	bne.n	80045a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f06f 0210 	mvn.w	r2, #16
 8004578:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e030      	b.n	8004606 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a4:	f7fe f918 	bl	80027d8 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d302      	bcc.n	80045ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d11d      	bne.n	80045f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c4:	2b40      	cmp	r3, #64	@ 0x40
 80045c6:	d016      	beq.n	80045f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	f043 0220 	orr.w	r2, r3, #32
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e007      	b.n	8004606 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004600:	2b40      	cmp	r3, #64	@ 0x40
 8004602:	d1ae      	bne.n	8004562 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004620:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004624:	d11b      	bne.n	800465e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800462e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464a:	f043 0204 	orr.w	r2, r3, #4
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e0cc      	b.n	800481a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004680:	4b68      	ldr	r3, [pc, #416]	@ (8004824 <HAL_RCC_ClockConfig+0x1b8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d90c      	bls.n	80046a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468e:	4b65      	ldr	r3, [pc, #404]	@ (8004824 <HAL_RCC_ClockConfig+0x1b8>)
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004696:	4b63      	ldr	r3, [pc, #396]	@ (8004824 <HAL_RCC_ClockConfig+0x1b8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d001      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e0b8      	b.n	800481a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d020      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d005      	beq.n	80046cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046c0:	4b59      	ldr	r3, [pc, #356]	@ (8004828 <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	4a58      	ldr	r2, [pc, #352]	@ (8004828 <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0308 	and.w	r3, r3, #8
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046d8:	4b53      	ldr	r3, [pc, #332]	@ (8004828 <HAL_RCC_ClockConfig+0x1bc>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	4a52      	ldr	r2, [pc, #328]	@ (8004828 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046e4:	4b50      	ldr	r3, [pc, #320]	@ (8004828 <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	494d      	ldr	r1, [pc, #308]	@ (8004828 <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d044      	beq.n	800478c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d107      	bne.n	800471a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800470a:	4b47      	ldr	r3, [pc, #284]	@ (8004828 <HAL_RCC_ClockConfig+0x1bc>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d119      	bne.n	800474a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e07f      	b.n	800481a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b02      	cmp	r3, #2
 8004720:	d003      	beq.n	800472a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004726:	2b03      	cmp	r3, #3
 8004728:	d107      	bne.n	800473a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800472a:	4b3f      	ldr	r3, [pc, #252]	@ (8004828 <HAL_RCC_ClockConfig+0x1bc>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d109      	bne.n	800474a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e06f      	b.n	800481a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800473a:	4b3b      	ldr	r3, [pc, #236]	@ (8004828 <HAL_RCC_ClockConfig+0x1bc>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e067      	b.n	800481a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800474a:	4b37      	ldr	r3, [pc, #220]	@ (8004828 <HAL_RCC_ClockConfig+0x1bc>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f023 0203 	bic.w	r2, r3, #3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	4934      	ldr	r1, [pc, #208]	@ (8004828 <HAL_RCC_ClockConfig+0x1bc>)
 8004758:	4313      	orrs	r3, r2
 800475a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800475c:	f7fe f83c 	bl	80027d8 <HAL_GetTick>
 8004760:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004762:	e00a      	b.n	800477a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004764:	f7fe f838 	bl	80027d8 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004772:	4293      	cmp	r3, r2
 8004774:	d901      	bls.n	800477a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e04f      	b.n	800481a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477a:	4b2b      	ldr	r3, [pc, #172]	@ (8004828 <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 020c 	and.w	r2, r3, #12
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	429a      	cmp	r2, r3
 800478a:	d1eb      	bne.n	8004764 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800478c:	4b25      	ldr	r3, [pc, #148]	@ (8004824 <HAL_RCC_ClockConfig+0x1b8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 030f 	and.w	r3, r3, #15
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d20c      	bcs.n	80047b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479a:	4b22      	ldr	r3, [pc, #136]	@ (8004824 <HAL_RCC_ClockConfig+0x1b8>)
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a2:	4b20      	ldr	r3, [pc, #128]	@ (8004824 <HAL_RCC_ClockConfig+0x1b8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d001      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e032      	b.n	800481a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d008      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047c0:	4b19      	ldr	r3, [pc, #100]	@ (8004828 <HAL_RCC_ClockConfig+0x1bc>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	4916      	ldr	r1, [pc, #88]	@ (8004828 <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d009      	beq.n	80047f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047de:	4b12      	ldr	r3, [pc, #72]	@ (8004828 <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	490e      	ldr	r1, [pc, #56]	@ (8004828 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047f2:	f000 f887 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 80047f6:	4602      	mov	r2, r0
 80047f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004828 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	091b      	lsrs	r3, r3, #4
 80047fe:	f003 030f 	and.w	r3, r3, #15
 8004802:	490a      	ldr	r1, [pc, #40]	@ (800482c <HAL_RCC_ClockConfig+0x1c0>)
 8004804:	5ccb      	ldrb	r3, [r1, r3]
 8004806:	fa22 f303 	lsr.w	r3, r2, r3
 800480a:	4a09      	ldr	r2, [pc, #36]	@ (8004830 <HAL_RCC_ClockConfig+0x1c4>)
 800480c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800480e:	4b09      	ldr	r3, [pc, #36]	@ (8004834 <HAL_RCC_ClockConfig+0x1c8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f7fd fe46 	bl	80024a4 <HAL_InitTick>

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40023c00 	.word	0x40023c00
 8004828:	40023800 	.word	0x40023800
 800482c:	0800df80 	.word	0x0800df80
 8004830:	20000008 	.word	0x20000008
 8004834:	2000000c 	.word	0x2000000c

08004838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800483c:	4b03      	ldr	r3, [pc, #12]	@ (800484c <HAL_RCC_GetHCLKFreq+0x14>)
 800483e:	681b      	ldr	r3, [r3, #0]
}
 8004840:	4618      	mov	r0, r3
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	20000008 	.word	0x20000008

08004850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004854:	f7ff fff0 	bl	8004838 <HAL_RCC_GetHCLKFreq>
 8004858:	4602      	mov	r2, r0
 800485a:	4b05      	ldr	r3, [pc, #20]	@ (8004870 <HAL_RCC_GetPCLK1Freq+0x20>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	0a9b      	lsrs	r3, r3, #10
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	4903      	ldr	r1, [pc, #12]	@ (8004874 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004866:	5ccb      	ldrb	r3, [r1, r3]
 8004868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800486c:	4618      	mov	r0, r3
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40023800 	.word	0x40023800
 8004874:	0800df90 	.word	0x0800df90

08004878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800487c:	f7ff ffdc 	bl	8004838 <HAL_RCC_GetHCLKFreq>
 8004880:	4602      	mov	r2, r0
 8004882:	4b05      	ldr	r3, [pc, #20]	@ (8004898 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	0b5b      	lsrs	r3, r3, #13
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	4903      	ldr	r1, [pc, #12]	@ (800489c <HAL_RCC_GetPCLK2Freq+0x24>)
 800488e:	5ccb      	ldrb	r3, [r1, r3]
 8004890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004894:	4618      	mov	r0, r3
 8004896:	bd80      	pop	{r7, pc}
 8004898:	40023800 	.word	0x40023800
 800489c:	0800df90 	.word	0x0800df90

080048a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	220f      	movs	r2, #15
 80048ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048b0:	4b12      	ldr	r3, [pc, #72]	@ (80048fc <HAL_RCC_GetClockConfig+0x5c>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 0203 	and.w	r2, r3, #3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80048bc:	4b0f      	ldr	r3, [pc, #60]	@ (80048fc <HAL_RCC_GetClockConfig+0x5c>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048c8:	4b0c      	ldr	r3, [pc, #48]	@ (80048fc <HAL_RCC_GetClockConfig+0x5c>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80048d4:	4b09      	ldr	r3, [pc, #36]	@ (80048fc <HAL_RCC_GetClockConfig+0x5c>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	08db      	lsrs	r3, r3, #3
 80048da:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048e2:	4b07      	ldr	r3, [pc, #28]	@ (8004900 <HAL_RCC_GetClockConfig+0x60>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 020f 	and.w	r2, r3, #15
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	601a      	str	r2, [r3, #0]
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40023800 	.word	0x40023800
 8004900:	40023c00 	.word	0x40023c00

08004904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004908:	b0ae      	sub	sp, #184	@ 0xb8
 800490a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800492a:	4bcb      	ldr	r3, [pc, #812]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x354>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 030c 	and.w	r3, r3, #12
 8004932:	2b0c      	cmp	r3, #12
 8004934:	f200 8206 	bhi.w	8004d44 <HAL_RCC_GetSysClockFreq+0x440>
 8004938:	a201      	add	r2, pc, #4	@ (adr r2, 8004940 <HAL_RCC_GetSysClockFreq+0x3c>)
 800493a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493e:	bf00      	nop
 8004940:	08004975 	.word	0x08004975
 8004944:	08004d45 	.word	0x08004d45
 8004948:	08004d45 	.word	0x08004d45
 800494c:	08004d45 	.word	0x08004d45
 8004950:	0800497d 	.word	0x0800497d
 8004954:	08004d45 	.word	0x08004d45
 8004958:	08004d45 	.word	0x08004d45
 800495c:	08004d45 	.word	0x08004d45
 8004960:	08004985 	.word	0x08004985
 8004964:	08004d45 	.word	0x08004d45
 8004968:	08004d45 	.word	0x08004d45
 800496c:	08004d45 	.word	0x08004d45
 8004970:	08004b75 	.word	0x08004b75
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004974:	4bb9      	ldr	r3, [pc, #740]	@ (8004c5c <HAL_RCC_GetSysClockFreq+0x358>)
 8004976:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800497a:	e1e7      	b.n	8004d4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800497c:	4bb8      	ldr	r3, [pc, #736]	@ (8004c60 <HAL_RCC_GetSysClockFreq+0x35c>)
 800497e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004982:	e1e3      	b.n	8004d4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004984:	4bb4      	ldr	r3, [pc, #720]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x354>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800498c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004990:	4bb1      	ldr	r3, [pc, #708]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x354>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d071      	beq.n	8004a80 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800499c:	4bae      	ldr	r3, [pc, #696]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x354>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	099b      	lsrs	r3, r3, #6
 80049a2:	2200      	movs	r2, #0
 80049a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80049a8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80049ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80049b8:	2300      	movs	r3, #0
 80049ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80049be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80049c2:	4622      	mov	r2, r4
 80049c4:	462b      	mov	r3, r5
 80049c6:	f04f 0000 	mov.w	r0, #0
 80049ca:	f04f 0100 	mov.w	r1, #0
 80049ce:	0159      	lsls	r1, r3, #5
 80049d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049d4:	0150      	lsls	r0, r2, #5
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4621      	mov	r1, r4
 80049dc:	1a51      	subs	r1, r2, r1
 80049de:	6439      	str	r1, [r7, #64]	@ 0x40
 80049e0:	4629      	mov	r1, r5
 80049e2:	eb63 0301 	sbc.w	r3, r3, r1
 80049e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80049f4:	4649      	mov	r1, r9
 80049f6:	018b      	lsls	r3, r1, #6
 80049f8:	4641      	mov	r1, r8
 80049fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049fe:	4641      	mov	r1, r8
 8004a00:	018a      	lsls	r2, r1, #6
 8004a02:	4641      	mov	r1, r8
 8004a04:	1a51      	subs	r1, r2, r1
 8004a06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a08:	4649      	mov	r1, r9
 8004a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004a1c:	4649      	mov	r1, r9
 8004a1e:	00cb      	lsls	r3, r1, #3
 8004a20:	4641      	mov	r1, r8
 8004a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a26:	4641      	mov	r1, r8
 8004a28:	00ca      	lsls	r2, r1, #3
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4603      	mov	r3, r0
 8004a30:	4622      	mov	r2, r4
 8004a32:	189b      	adds	r3, r3, r2
 8004a34:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a36:	462b      	mov	r3, r5
 8004a38:	460a      	mov	r2, r1
 8004a3a:	eb42 0303 	adc.w	r3, r2, r3
 8004a3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	f04f 0300 	mov.w	r3, #0
 8004a48:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a4c:	4629      	mov	r1, r5
 8004a4e:	024b      	lsls	r3, r1, #9
 8004a50:	4621      	mov	r1, r4
 8004a52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a56:	4621      	mov	r1, r4
 8004a58:	024a      	lsls	r2, r1, #9
 8004a5a:	4610      	mov	r0, r2
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004a6c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004a70:	f7fc f90a 	bl	8000c88 <__aeabi_uldivmod>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4613      	mov	r3, r2
 8004a7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a7e:	e067      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a80:	4b75      	ldr	r3, [pc, #468]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	099b      	lsrs	r3, r3, #6
 8004a86:	2200      	movs	r2, #0
 8004a88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a8c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004a90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a9e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004aa2:	4622      	mov	r2, r4
 8004aa4:	462b      	mov	r3, r5
 8004aa6:	f04f 0000 	mov.w	r0, #0
 8004aaa:	f04f 0100 	mov.w	r1, #0
 8004aae:	0159      	lsls	r1, r3, #5
 8004ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ab4:	0150      	lsls	r0, r2, #5
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4621      	mov	r1, r4
 8004abc:	1a51      	subs	r1, r2, r1
 8004abe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004ad4:	4649      	mov	r1, r9
 8004ad6:	018b      	lsls	r3, r1, #6
 8004ad8:	4641      	mov	r1, r8
 8004ada:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ade:	4641      	mov	r1, r8
 8004ae0:	018a      	lsls	r2, r1, #6
 8004ae2:	4641      	mov	r1, r8
 8004ae4:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ae8:	4649      	mov	r1, r9
 8004aea:	eb63 0b01 	sbc.w	fp, r3, r1
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004afa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004afe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b02:	4692      	mov	sl, r2
 8004b04:	469b      	mov	fp, r3
 8004b06:	4623      	mov	r3, r4
 8004b08:	eb1a 0303 	adds.w	r3, sl, r3
 8004b0c:	623b      	str	r3, [r7, #32]
 8004b0e:	462b      	mov	r3, r5
 8004b10:	eb4b 0303 	adc.w	r3, fp, r3
 8004b14:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004b22:	4629      	mov	r1, r5
 8004b24:	028b      	lsls	r3, r1, #10
 8004b26:	4621      	mov	r1, r4
 8004b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	028a      	lsls	r2, r1, #10
 8004b30:	4610      	mov	r0, r2
 8004b32:	4619      	mov	r1, r3
 8004b34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b38:	2200      	movs	r2, #0
 8004b3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b3c:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b3e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004b42:	f7fc f8a1 	bl	8000c88 <__aeabi_uldivmod>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b50:	4b41      	ldr	r3, [pc, #260]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	0c1b      	lsrs	r3, r3, #16
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004b62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004b72:	e0eb      	b.n	8004d4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b74:	4b38      	ldr	r3, [pc, #224]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b80:	4b35      	ldr	r3, [pc, #212]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d06b      	beq.n	8004c64 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b8c:	4b32      	ldr	r3, [pc, #200]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	099b      	lsrs	r3, r3, #6
 8004b92:	2200      	movs	r2, #0
 8004b94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ba4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004ba8:	4622      	mov	r2, r4
 8004baa:	462b      	mov	r3, r5
 8004bac:	f04f 0000 	mov.w	r0, #0
 8004bb0:	f04f 0100 	mov.w	r1, #0
 8004bb4:	0159      	lsls	r1, r3, #5
 8004bb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bba:	0150      	lsls	r0, r2, #5
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4621      	mov	r1, r4
 8004bc2:	1a51      	subs	r1, r2, r1
 8004bc4:	61b9      	str	r1, [r7, #24]
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	eb63 0301 	sbc.w	r3, r3, r1
 8004bcc:	61fb      	str	r3, [r7, #28]
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	f04f 0300 	mov.w	r3, #0
 8004bd6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004bda:	4659      	mov	r1, fp
 8004bdc:	018b      	lsls	r3, r1, #6
 8004bde:	4651      	mov	r1, sl
 8004be0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004be4:	4651      	mov	r1, sl
 8004be6:	018a      	lsls	r2, r1, #6
 8004be8:	4651      	mov	r1, sl
 8004bea:	ebb2 0801 	subs.w	r8, r2, r1
 8004bee:	4659      	mov	r1, fp
 8004bf0:	eb63 0901 	sbc.w	r9, r3, r1
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c08:	4690      	mov	r8, r2
 8004c0a:	4699      	mov	r9, r3
 8004c0c:	4623      	mov	r3, r4
 8004c0e:	eb18 0303 	adds.w	r3, r8, r3
 8004c12:	613b      	str	r3, [r7, #16]
 8004c14:	462b      	mov	r3, r5
 8004c16:	eb49 0303 	adc.w	r3, r9, r3
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004c28:	4629      	mov	r1, r5
 8004c2a:	024b      	lsls	r3, r1, #9
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c32:	4621      	mov	r1, r4
 8004c34:	024a      	lsls	r2, r1, #9
 8004c36:	4610      	mov	r0, r2
 8004c38:	4619      	mov	r1, r3
 8004c3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c3e:	2200      	movs	r2, #0
 8004c40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c42:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004c44:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c48:	f7fc f81e 	bl	8000c88 <__aeabi_uldivmod>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4613      	mov	r3, r2
 8004c52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c56:	e065      	b.n	8004d24 <HAL_RCC_GetSysClockFreq+0x420>
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	00f42400 	.word	0x00f42400
 8004c60:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c64:	4b3d      	ldr	r3, [pc, #244]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x458>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	099b      	lsrs	r3, r3, #6
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	4611      	mov	r1, r2
 8004c70:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c74:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c76:	2300      	movs	r3, #0
 8004c78:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c7a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004c7e:	4642      	mov	r2, r8
 8004c80:	464b      	mov	r3, r9
 8004c82:	f04f 0000 	mov.w	r0, #0
 8004c86:	f04f 0100 	mov.w	r1, #0
 8004c8a:	0159      	lsls	r1, r3, #5
 8004c8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c90:	0150      	lsls	r0, r2, #5
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4641      	mov	r1, r8
 8004c98:	1a51      	subs	r1, r2, r1
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	4649      	mov	r1, r9
 8004c9e:	eb63 0301 	sbc.w	r3, r3, r1
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004cb0:	4659      	mov	r1, fp
 8004cb2:	018b      	lsls	r3, r1, #6
 8004cb4:	4651      	mov	r1, sl
 8004cb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cba:	4651      	mov	r1, sl
 8004cbc:	018a      	lsls	r2, r1, #6
 8004cbe:	4651      	mov	r1, sl
 8004cc0:	1a54      	subs	r4, r2, r1
 8004cc2:	4659      	mov	r1, fp
 8004cc4:	eb63 0501 	sbc.w	r5, r3, r1
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	00eb      	lsls	r3, r5, #3
 8004cd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cd6:	00e2      	lsls	r2, r4, #3
 8004cd8:	4614      	mov	r4, r2
 8004cda:	461d      	mov	r5, r3
 8004cdc:	4643      	mov	r3, r8
 8004cde:	18e3      	adds	r3, r4, r3
 8004ce0:	603b      	str	r3, [r7, #0]
 8004ce2:	464b      	mov	r3, r9
 8004ce4:	eb45 0303 	adc.w	r3, r5, r3
 8004ce8:	607b      	str	r3, [r7, #4]
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	f04f 0300 	mov.w	r3, #0
 8004cf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	028b      	lsls	r3, r1, #10
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d00:	4621      	mov	r1, r4
 8004d02:	028a      	lsls	r2, r1, #10
 8004d04:	4610      	mov	r0, r2
 8004d06:	4619      	mov	r1, r3
 8004d08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d10:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004d12:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d16:	f7fb ffb7 	bl	8000c88 <__aeabi_uldivmod>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4613      	mov	r3, r2
 8004d20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004d24:	4b0d      	ldr	r3, [pc, #52]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x458>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	0f1b      	lsrs	r3, r3, #28
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004d32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004d42:	e003      	b.n	8004d4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d44:	4b06      	ldr	r3, [pc, #24]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004d46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004d4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	37b8      	adds	r7, #184	@ 0xb8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	00f42400 	.word	0x00f42400

08004d64 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e28d      	b.n	8005292 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 8083 	beq.w	8004e8a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004d84:	4b94      	ldr	r3, [pc, #592]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 030c 	and.w	r3, r3, #12
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	d019      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004d90:	4b91      	ldr	r3, [pc, #580]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 030c 	and.w	r3, r3, #12
        || \
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d106      	bne.n	8004daa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004d9c:	4b8e      	ldr	r3, [pc, #568]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004da4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004da8:	d00c      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004daa:	4b8b      	ldr	r3, [pc, #556]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004db2:	2b0c      	cmp	r3, #12
 8004db4:	d112      	bne.n	8004ddc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004db6:	4b88      	ldr	r3, [pc, #544]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dc2:	d10b      	bne.n	8004ddc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc4:	4b84      	ldr	r3, [pc, #528]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d05b      	beq.n	8004e88 <HAL_RCC_OscConfig+0x124>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d157      	bne.n	8004e88 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e25a      	b.n	8005292 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004de4:	d106      	bne.n	8004df4 <HAL_RCC_OscConfig+0x90>
 8004de6:	4b7c      	ldr	r3, [pc, #496]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a7b      	ldr	r2, [pc, #492]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	e01d      	b.n	8004e30 <HAL_RCC_OscConfig+0xcc>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004dfc:	d10c      	bne.n	8004e18 <HAL_RCC_OscConfig+0xb4>
 8004dfe:	4b76      	ldr	r3, [pc, #472]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a75      	ldr	r2, [pc, #468]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004e04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e08:	6013      	str	r3, [r2, #0]
 8004e0a:	4b73      	ldr	r3, [pc, #460]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a72      	ldr	r2, [pc, #456]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	e00b      	b.n	8004e30 <HAL_RCC_OscConfig+0xcc>
 8004e18:	4b6f      	ldr	r3, [pc, #444]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a6e      	ldr	r2, [pc, #440]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004e1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e22:	6013      	str	r3, [r2, #0]
 8004e24:	4b6c      	ldr	r3, [pc, #432]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a6b      	ldr	r2, [pc, #428]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004e2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d013      	beq.n	8004e60 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e38:	f7fd fcce 	bl	80027d8 <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e3e:	e008      	b.n	8004e52 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e40:	f7fd fcca 	bl	80027d8 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b64      	cmp	r3, #100	@ 0x64
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e21f      	b.n	8005292 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e52:	4b61      	ldr	r3, [pc, #388]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0f0      	beq.n	8004e40 <HAL_RCC_OscConfig+0xdc>
 8004e5e:	e014      	b.n	8004e8a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e60:	f7fd fcba 	bl	80027d8 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e68:	f7fd fcb6 	bl	80027d8 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b64      	cmp	r3, #100	@ 0x64
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e20b      	b.n	8005292 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e7a:	4b57      	ldr	r3, [pc, #348]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f0      	bne.n	8004e68 <HAL_RCC_OscConfig+0x104>
 8004e86:	e000      	b.n	8004e8a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d06f      	beq.n	8004f76 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004e96:	4b50      	ldr	r3, [pc, #320]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 030c 	and.w	r3, r3, #12
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d017      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004ea2:	4b4d      	ldr	r3, [pc, #308]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 030c 	and.w	r3, r3, #12
        || \
 8004eaa:	2b08      	cmp	r3, #8
 8004eac:	d105      	bne.n	8004eba <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004eae:	4b4a      	ldr	r3, [pc, #296]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00b      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eba:	4b47      	ldr	r3, [pc, #284]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004ec2:	2b0c      	cmp	r3, #12
 8004ec4:	d11c      	bne.n	8004f00 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ec6:	4b44      	ldr	r3, [pc, #272]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d116      	bne.n	8004f00 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ed2:	4b41      	ldr	r3, [pc, #260]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d005      	beq.n	8004eea <HAL_RCC_OscConfig+0x186>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d001      	beq.n	8004eea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e1d3      	b.n	8005292 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eea:	4b3b      	ldr	r3, [pc, #236]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	4937      	ldr	r1, [pc, #220]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004efe:	e03a      	b.n	8004f76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d020      	beq.n	8004f4a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f08:	4b34      	ldr	r3, [pc, #208]	@ (8004fdc <HAL_RCC_OscConfig+0x278>)
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0e:	f7fd fc63 	bl	80027d8 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f16:	f7fd fc5f 	bl	80027d8 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e1b4      	b.n	8005292 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f28:	4b2b      	ldr	r3, [pc, #172]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0f0      	beq.n	8004f16 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f34:	4b28      	ldr	r3, [pc, #160]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	4925      	ldr	r1, [pc, #148]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	600b      	str	r3, [r1, #0]
 8004f48:	e015      	b.n	8004f76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f4a:	4b24      	ldr	r3, [pc, #144]	@ (8004fdc <HAL_RCC_OscConfig+0x278>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f50:	f7fd fc42 	bl	80027d8 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f58:	f7fd fc3e 	bl	80027d8 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e193      	b.n	8005292 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f0      	bne.n	8004f58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d036      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d016      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f8a:	4b15      	ldr	r3, [pc, #84]	@ (8004fe0 <HAL_RCC_OscConfig+0x27c>)
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f90:	f7fd fc22 	bl	80027d8 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f98:	f7fd fc1e 	bl	80027d8 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e173      	b.n	8005292 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004faa:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd8 <HAL_RCC_OscConfig+0x274>)
 8004fac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0f0      	beq.n	8004f98 <HAL_RCC_OscConfig+0x234>
 8004fb6:	e01b      	b.n	8004ff0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fb8:	4b09      	ldr	r3, [pc, #36]	@ (8004fe0 <HAL_RCC_OscConfig+0x27c>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fbe:	f7fd fc0b 	bl	80027d8 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc4:	e00e      	b.n	8004fe4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fc6:	f7fd fc07 	bl	80027d8 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d907      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e15c      	b.n	8005292 <HAL_RCC_OscConfig+0x52e>
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	42470000 	.word	0x42470000
 8004fe0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fe4:	4b8a      	ldr	r3, [pc, #552]	@ (8005210 <HAL_RCC_OscConfig+0x4ac>)
 8004fe6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1ea      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 8097 	beq.w	800512c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ffe:	2300      	movs	r3, #0
 8005000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005002:	4b83      	ldr	r3, [pc, #524]	@ (8005210 <HAL_RCC_OscConfig+0x4ac>)
 8005004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10f      	bne.n	800502e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800500e:	2300      	movs	r3, #0
 8005010:	60bb      	str	r3, [r7, #8]
 8005012:	4b7f      	ldr	r3, [pc, #508]	@ (8005210 <HAL_RCC_OscConfig+0x4ac>)
 8005014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005016:	4a7e      	ldr	r2, [pc, #504]	@ (8005210 <HAL_RCC_OscConfig+0x4ac>)
 8005018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800501c:	6413      	str	r3, [r2, #64]	@ 0x40
 800501e:	4b7c      	ldr	r3, [pc, #496]	@ (8005210 <HAL_RCC_OscConfig+0x4ac>)
 8005020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005026:	60bb      	str	r3, [r7, #8]
 8005028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800502a:	2301      	movs	r3, #1
 800502c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800502e:	4b79      	ldr	r3, [pc, #484]	@ (8005214 <HAL_RCC_OscConfig+0x4b0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005036:	2b00      	cmp	r3, #0
 8005038:	d118      	bne.n	800506c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800503a:	4b76      	ldr	r3, [pc, #472]	@ (8005214 <HAL_RCC_OscConfig+0x4b0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a75      	ldr	r2, [pc, #468]	@ (8005214 <HAL_RCC_OscConfig+0x4b0>)
 8005040:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005046:	f7fd fbc7 	bl	80027d8 <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800504c:	e008      	b.n	8005060 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800504e:	f7fd fbc3 	bl	80027d8 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e118      	b.n	8005292 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005060:	4b6c      	ldr	r3, [pc, #432]	@ (8005214 <HAL_RCC_OscConfig+0x4b0>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0f0      	beq.n	800504e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d106      	bne.n	8005082 <HAL_RCC_OscConfig+0x31e>
 8005074:	4b66      	ldr	r3, [pc, #408]	@ (8005210 <HAL_RCC_OscConfig+0x4ac>)
 8005076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005078:	4a65      	ldr	r2, [pc, #404]	@ (8005210 <HAL_RCC_OscConfig+0x4ac>)
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005080:	e01c      	b.n	80050bc <HAL_RCC_OscConfig+0x358>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	2b05      	cmp	r3, #5
 8005088:	d10c      	bne.n	80050a4 <HAL_RCC_OscConfig+0x340>
 800508a:	4b61      	ldr	r3, [pc, #388]	@ (8005210 <HAL_RCC_OscConfig+0x4ac>)
 800508c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508e:	4a60      	ldr	r2, [pc, #384]	@ (8005210 <HAL_RCC_OscConfig+0x4ac>)
 8005090:	f043 0304 	orr.w	r3, r3, #4
 8005094:	6713      	str	r3, [r2, #112]	@ 0x70
 8005096:	4b5e      	ldr	r3, [pc, #376]	@ (8005210 <HAL_RCC_OscConfig+0x4ac>)
 8005098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509a:	4a5d      	ldr	r2, [pc, #372]	@ (8005210 <HAL_RCC_OscConfig+0x4ac>)
 800509c:	f043 0301 	orr.w	r3, r3, #1
 80050a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80050a2:	e00b      	b.n	80050bc <HAL_RCC_OscConfig+0x358>
 80050a4:	4b5a      	ldr	r3, [pc, #360]	@ (8005210 <HAL_RCC_OscConfig+0x4ac>)
 80050a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a8:	4a59      	ldr	r2, [pc, #356]	@ (8005210 <HAL_RCC_OscConfig+0x4ac>)
 80050aa:	f023 0301 	bic.w	r3, r3, #1
 80050ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80050b0:	4b57      	ldr	r3, [pc, #348]	@ (8005210 <HAL_RCC_OscConfig+0x4ac>)
 80050b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b4:	4a56      	ldr	r2, [pc, #344]	@ (8005210 <HAL_RCC_OscConfig+0x4ac>)
 80050b6:	f023 0304 	bic.w	r3, r3, #4
 80050ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d015      	beq.n	80050f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c4:	f7fd fb88 	bl	80027d8 <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ca:	e00a      	b.n	80050e2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050cc:	f7fd fb84 	bl	80027d8 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050da:	4293      	cmp	r3, r2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e0d7      	b.n	8005292 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e2:	4b4b      	ldr	r3, [pc, #300]	@ (8005210 <HAL_RCC_OscConfig+0x4ac>)
 80050e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0ee      	beq.n	80050cc <HAL_RCC_OscConfig+0x368>
 80050ee:	e014      	b.n	800511a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f0:	f7fd fb72 	bl	80027d8 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050f6:	e00a      	b.n	800510e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f8:	f7fd fb6e 	bl	80027d8 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005106:	4293      	cmp	r3, r2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e0c1      	b.n	8005292 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800510e:	4b40      	ldr	r3, [pc, #256]	@ (8005210 <HAL_RCC_OscConfig+0x4ac>)
 8005110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1ee      	bne.n	80050f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800511a:	7dfb      	ldrb	r3, [r7, #23]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d105      	bne.n	800512c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005120:	4b3b      	ldr	r3, [pc, #236]	@ (8005210 <HAL_RCC_OscConfig+0x4ac>)
 8005122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005124:	4a3a      	ldr	r2, [pc, #232]	@ (8005210 <HAL_RCC_OscConfig+0x4ac>)
 8005126:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800512a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 80ad 	beq.w	8005290 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005136:	4b36      	ldr	r3, [pc, #216]	@ (8005210 <HAL_RCC_OscConfig+0x4ac>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 030c 	and.w	r3, r3, #12
 800513e:	2b08      	cmp	r3, #8
 8005140:	d060      	beq.n	8005204 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d145      	bne.n	80051d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800514a:	4b33      	ldr	r3, [pc, #204]	@ (8005218 <HAL_RCC_OscConfig+0x4b4>)
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005150:	f7fd fb42 	bl	80027d8 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005158:	f7fd fb3e 	bl	80027d8 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e093      	b.n	8005292 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800516a:	4b29      	ldr	r3, [pc, #164]	@ (8005210 <HAL_RCC_OscConfig+0x4ac>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f0      	bne.n	8005158 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69da      	ldr	r2, [r3, #28]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005184:	019b      	lsls	r3, r3, #6
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800518c:	085b      	lsrs	r3, r3, #1
 800518e:	3b01      	subs	r3, #1
 8005190:	041b      	lsls	r3, r3, #16
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005198:	061b      	lsls	r3, r3, #24
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a0:	071b      	lsls	r3, r3, #28
 80051a2:	491b      	ldr	r1, [pc, #108]	@ (8005210 <HAL_RCC_OscConfig+0x4ac>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005218 <HAL_RCC_OscConfig+0x4b4>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ae:	f7fd fb13 	bl	80027d8 <HAL_GetTick>
 80051b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b6:	f7fd fb0f 	bl	80027d8 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e064      	b.n	8005292 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051c8:	4b11      	ldr	r3, [pc, #68]	@ (8005210 <HAL_RCC_OscConfig+0x4ac>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0f0      	beq.n	80051b6 <HAL_RCC_OscConfig+0x452>
 80051d4:	e05c      	b.n	8005290 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d6:	4b10      	ldr	r3, [pc, #64]	@ (8005218 <HAL_RCC_OscConfig+0x4b4>)
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051dc:	f7fd fafc 	bl	80027d8 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e4:	f7fd faf8 	bl	80027d8 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e04d      	b.n	8005292 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051f6:	4b06      	ldr	r3, [pc, #24]	@ (8005210 <HAL_RCC_OscConfig+0x4ac>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f0      	bne.n	80051e4 <HAL_RCC_OscConfig+0x480>
 8005202:	e045      	b.n	8005290 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d107      	bne.n	800521c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e040      	b.n	8005292 <HAL_RCC_OscConfig+0x52e>
 8005210:	40023800 	.word	0x40023800
 8005214:	40007000 	.word	0x40007000
 8005218:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800521c:	4b1f      	ldr	r3, [pc, #124]	@ (800529c <HAL_RCC_OscConfig+0x538>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d030      	beq.n	800528c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005234:	429a      	cmp	r2, r3
 8005236:	d129      	bne.n	800528c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005242:	429a      	cmp	r2, r3
 8005244:	d122      	bne.n	800528c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800524c:	4013      	ands	r3, r2
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005252:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005254:	4293      	cmp	r3, r2
 8005256:	d119      	bne.n	800528c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005262:	085b      	lsrs	r3, r3, #1
 8005264:	3b01      	subs	r3, #1
 8005266:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005268:	429a      	cmp	r2, r3
 800526a:	d10f      	bne.n	800528c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005276:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005278:	429a      	cmp	r2, r3
 800527a:	d107      	bne.n	800528c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005286:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005288:	429a      	cmp	r2, r3
 800528a:	d001      	beq.n	8005290 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e000      	b.n	8005292 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	40023800 	.word	0x40023800

080052a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e041      	b.n	8005336 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d106      	bne.n	80052cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f839 	bl	800533e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3304      	adds	r3, #4
 80052dc:	4619      	mov	r1, r3
 80052de:	4610      	mov	r0, r2
 80052e0:	f000 f9c0 	bl	8005664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
	...

08005354 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	d001      	beq.n	800536c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e04e      	b.n	800540a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0201 	orr.w	r2, r2, #1
 8005382:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a23      	ldr	r2, [pc, #140]	@ (8005418 <HAL_TIM_Base_Start_IT+0xc4>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d022      	beq.n	80053d4 <HAL_TIM_Base_Start_IT+0x80>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005396:	d01d      	beq.n	80053d4 <HAL_TIM_Base_Start_IT+0x80>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a1f      	ldr	r2, [pc, #124]	@ (800541c <HAL_TIM_Base_Start_IT+0xc8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d018      	beq.n	80053d4 <HAL_TIM_Base_Start_IT+0x80>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005420 <HAL_TIM_Base_Start_IT+0xcc>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d013      	beq.n	80053d4 <HAL_TIM_Base_Start_IT+0x80>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005424 <HAL_TIM_Base_Start_IT+0xd0>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00e      	beq.n	80053d4 <HAL_TIM_Base_Start_IT+0x80>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005428 <HAL_TIM_Base_Start_IT+0xd4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d009      	beq.n	80053d4 <HAL_TIM_Base_Start_IT+0x80>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a19      	ldr	r2, [pc, #100]	@ (800542c <HAL_TIM_Base_Start_IT+0xd8>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d004      	beq.n	80053d4 <HAL_TIM_Base_Start_IT+0x80>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a18      	ldr	r2, [pc, #96]	@ (8005430 <HAL_TIM_Base_Start_IT+0xdc>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d111      	bne.n	80053f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 0307 	and.w	r3, r3, #7
 80053de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2b06      	cmp	r3, #6
 80053e4:	d010      	beq.n	8005408 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f042 0201 	orr.w	r2, r2, #1
 80053f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f6:	e007      	b.n	8005408 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0201 	orr.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40010000 	.word	0x40010000
 800541c:	40000400 	.word	0x40000400
 8005420:	40000800 	.word	0x40000800
 8005424:	40000c00 	.word	0x40000c00
 8005428:	40010400 	.word	0x40010400
 800542c:	40014000 	.word	0x40014000
 8005430:	40001800 	.word	0x40001800

08005434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d020      	beq.n	8005498 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01b      	beq.n	8005498 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f06f 0202 	mvn.w	r2, #2
 8005468:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f8d2 	bl	8005628 <HAL_TIM_IC_CaptureCallback>
 8005484:	e005      	b.n	8005492 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f8c4 	bl	8005614 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f8d5 	bl	800563c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d020      	beq.n	80054e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01b      	beq.n	80054e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f06f 0204 	mvn.w	r2, #4
 80054b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2202      	movs	r2, #2
 80054ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f8ac 	bl	8005628 <HAL_TIM_IC_CaptureCallback>
 80054d0:	e005      	b.n	80054de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f89e 	bl	8005614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f8af 	bl	800563c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d020      	beq.n	8005530 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d01b      	beq.n	8005530 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0208 	mvn.w	r2, #8
 8005500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2204      	movs	r2, #4
 8005506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f886 	bl	8005628 <HAL_TIM_IC_CaptureCallback>
 800551c:	e005      	b.n	800552a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f878 	bl	8005614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f889 	bl	800563c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f003 0310 	and.w	r3, r3, #16
 8005536:	2b00      	cmp	r3, #0
 8005538:	d020      	beq.n	800557c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b00      	cmp	r3, #0
 8005542:	d01b      	beq.n	800557c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0210 	mvn.w	r2, #16
 800554c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2208      	movs	r2, #8
 8005552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f860 	bl	8005628 <HAL_TIM_IC_CaptureCallback>
 8005568:	e005      	b.n	8005576 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f852 	bl	8005614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f863 	bl	800563c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00c      	beq.n	80055a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b00      	cmp	r3, #0
 800558e:	d007      	beq.n	80055a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0201 	mvn.w	r2, #1
 8005598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7fc fe28 	bl	80021f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00c      	beq.n	80055c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d007      	beq.n	80055c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80055bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f900 	bl	80057c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00c      	beq.n	80055e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d007      	beq.n	80055e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f834 	bl	8005650 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00c      	beq.n	800560c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f003 0320 	and.w	r3, r3, #32
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d007      	beq.n	800560c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0220 	mvn.w	r2, #32
 8005604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f8d2 	bl	80057b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800560c:	bf00      	nop
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a43      	ldr	r2, [pc, #268]	@ (8005784 <TIM_Base_SetConfig+0x120>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d013      	beq.n	80056a4 <TIM_Base_SetConfig+0x40>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005682:	d00f      	beq.n	80056a4 <TIM_Base_SetConfig+0x40>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a40      	ldr	r2, [pc, #256]	@ (8005788 <TIM_Base_SetConfig+0x124>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d00b      	beq.n	80056a4 <TIM_Base_SetConfig+0x40>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a3f      	ldr	r2, [pc, #252]	@ (800578c <TIM_Base_SetConfig+0x128>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d007      	beq.n	80056a4 <TIM_Base_SetConfig+0x40>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a3e      	ldr	r2, [pc, #248]	@ (8005790 <TIM_Base_SetConfig+0x12c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <TIM_Base_SetConfig+0x40>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a3d      	ldr	r2, [pc, #244]	@ (8005794 <TIM_Base_SetConfig+0x130>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d108      	bne.n	80056b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a32      	ldr	r2, [pc, #200]	@ (8005784 <TIM_Base_SetConfig+0x120>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d02b      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056c4:	d027      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a2f      	ldr	r2, [pc, #188]	@ (8005788 <TIM_Base_SetConfig+0x124>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d023      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a2e      	ldr	r2, [pc, #184]	@ (800578c <TIM_Base_SetConfig+0x128>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d01f      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a2d      	ldr	r2, [pc, #180]	@ (8005790 <TIM_Base_SetConfig+0x12c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d01b      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a2c      	ldr	r2, [pc, #176]	@ (8005794 <TIM_Base_SetConfig+0x130>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d017      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a2b      	ldr	r2, [pc, #172]	@ (8005798 <TIM_Base_SetConfig+0x134>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d013      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a2a      	ldr	r2, [pc, #168]	@ (800579c <TIM_Base_SetConfig+0x138>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00f      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a29      	ldr	r2, [pc, #164]	@ (80057a0 <TIM_Base_SetConfig+0x13c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00b      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a28      	ldr	r2, [pc, #160]	@ (80057a4 <TIM_Base_SetConfig+0x140>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d007      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a27      	ldr	r2, [pc, #156]	@ (80057a8 <TIM_Base_SetConfig+0x144>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d003      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a26      	ldr	r2, [pc, #152]	@ (80057ac <TIM_Base_SetConfig+0x148>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d108      	bne.n	8005728 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800571c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	4313      	orrs	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a0e      	ldr	r2, [pc, #56]	@ (8005784 <TIM_Base_SetConfig+0x120>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d003      	beq.n	8005756 <TIM_Base_SetConfig+0xf2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a10      	ldr	r2, [pc, #64]	@ (8005794 <TIM_Base_SetConfig+0x130>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d103      	bne.n	800575e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	691a      	ldr	r2, [r3, #16]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f043 0204 	orr.w	r2, r3, #4
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	601a      	str	r2, [r3, #0]
}
 8005776:	bf00      	nop
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	40010000 	.word	0x40010000
 8005788:	40000400 	.word	0x40000400
 800578c:	40000800 	.word	0x40000800
 8005790:	40000c00 	.word	0x40000c00
 8005794:	40010400 	.word	0x40010400
 8005798:	40014000 	.word	0x40014000
 800579c:	40014400 	.word	0x40014400
 80057a0:	40014800 	.word	0x40014800
 80057a4:	40001800 	.word	0x40001800
 80057a8:	40001c00 	.word	0x40001c00
 80057ac:	40002000 	.word	0x40002000

080057b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e042      	b.n	8005870 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d106      	bne.n	8005804 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7fc fdd4 	bl	80023ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2224      	movs	r2, #36	@ 0x24
 8005808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800581a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f973 	bl	8005b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	691a      	ldr	r2, [r3, #16]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005830:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	695a      	ldr	r2, [r3, #20]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005840:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68da      	ldr	r2, [r3, #12]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005850:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2220      	movs	r2, #32
 8005864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b08a      	sub	sp, #40	@ 0x28
 800587c:	af02      	add	r7, sp, #8
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	603b      	str	r3, [r7, #0]
 8005884:	4613      	mov	r3, r2
 8005886:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005888:	2300      	movs	r3, #0
 800588a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b20      	cmp	r3, #32
 8005896:	d175      	bne.n	8005984 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <HAL_UART_Transmit+0x2c>
 800589e:	88fb      	ldrh	r3, [r7, #6]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e06e      	b.n	8005986 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2221      	movs	r2, #33	@ 0x21
 80058b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058b6:	f7fc ff8f 	bl	80027d8 <HAL_GetTick>
 80058ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	88fa      	ldrh	r2, [r7, #6]
 80058c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	88fa      	ldrh	r2, [r7, #6]
 80058c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058d0:	d108      	bne.n	80058e4 <HAL_UART_Transmit+0x6c>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d104      	bne.n	80058e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80058da:	2300      	movs	r3, #0
 80058dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	61bb      	str	r3, [r7, #24]
 80058e2:	e003      	b.n	80058ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058e8:	2300      	movs	r3, #0
 80058ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058ec:	e02e      	b.n	800594c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2200      	movs	r2, #0
 80058f6:	2180      	movs	r1, #128	@ 0x80
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 f848 	bl	800598e <UART_WaitOnFlagUntilTimeout>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2220      	movs	r2, #32
 8005908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e03a      	b.n	8005986 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10b      	bne.n	800592e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005924:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	3302      	adds	r3, #2
 800592a:	61bb      	str	r3, [r7, #24]
 800592c:	e007      	b.n	800593e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	781a      	ldrb	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	3301      	adds	r3, #1
 800593c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005942:	b29b      	uxth	r3, r3
 8005944:	3b01      	subs	r3, #1
 8005946:	b29a      	uxth	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005950:	b29b      	uxth	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1cb      	bne.n	80058ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	2200      	movs	r2, #0
 800595e:	2140      	movs	r1, #64	@ 0x40
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 f814 	bl	800598e <UART_WaitOnFlagUntilTimeout>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d005      	beq.n	8005978 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e006      	b.n	8005986 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2220      	movs	r2, #32
 800597c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005980:	2300      	movs	r3, #0
 8005982:	e000      	b.n	8005986 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005984:	2302      	movs	r3, #2
  }
}
 8005986:	4618      	mov	r0, r3
 8005988:	3720      	adds	r7, #32
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b086      	sub	sp, #24
 8005992:	af00      	add	r7, sp, #0
 8005994:	60f8      	str	r0, [r7, #12]
 8005996:	60b9      	str	r1, [r7, #8]
 8005998:	603b      	str	r3, [r7, #0]
 800599a:	4613      	mov	r3, r2
 800599c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800599e:	e03b      	b.n	8005a18 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a6:	d037      	beq.n	8005a18 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059a8:	f7fc ff16 	bl	80027d8 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	6a3a      	ldr	r2, [r7, #32]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d302      	bcc.n	80059be <UART_WaitOnFlagUntilTimeout+0x30>
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e03a      	b.n	8005a38 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d023      	beq.n	8005a18 <UART_WaitOnFlagUntilTimeout+0x8a>
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2b80      	cmp	r3, #128	@ 0x80
 80059d4:	d020      	beq.n	8005a18 <UART_WaitOnFlagUntilTimeout+0x8a>
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2b40      	cmp	r3, #64	@ 0x40
 80059da:	d01d      	beq.n	8005a18 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b08      	cmp	r3, #8
 80059e8:	d116      	bne.n	8005a18 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80059ea:	2300      	movs	r3, #0
 80059ec:	617b      	str	r3, [r7, #20]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	617b      	str	r3, [r7, #20]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	617b      	str	r3, [r7, #20]
 80059fe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 f81d 	bl	8005a40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2208      	movs	r2, #8
 8005a0a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e00f      	b.n	8005a38 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	4013      	ands	r3, r2
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	bf0c      	ite	eq
 8005a28:	2301      	moveq	r3, #1
 8005a2a:	2300      	movne	r3, #0
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	461a      	mov	r2, r3
 8005a30:	79fb      	ldrb	r3, [r7, #7]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d0b4      	beq.n	80059a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b095      	sub	sp, #84	@ 0x54
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	330c      	adds	r3, #12
 8005a4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a52:	e853 3f00 	ldrex	r3, [r3]
 8005a56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	330c      	adds	r3, #12
 8005a66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a68:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a70:	e841 2300 	strex	r3, r2, [r1]
 8005a74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1e5      	bne.n	8005a48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3314      	adds	r3, #20
 8005a82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	e853 3f00 	ldrex	r3, [r3]
 8005a8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	f023 0301 	bic.w	r3, r3, #1
 8005a92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3314      	adds	r3, #20
 8005a9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005aa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005aa4:	e841 2300 	strex	r3, r2, [r1]
 8005aa8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1e5      	bne.n	8005a7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d119      	bne.n	8005aec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	330c      	adds	r3, #12
 8005abe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	e853 3f00 	ldrex	r3, [r3]
 8005ac6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f023 0310 	bic.w	r3, r3, #16
 8005ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	330c      	adds	r3, #12
 8005ad6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ad8:	61ba      	str	r2, [r7, #24]
 8005ada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005adc:	6979      	ldr	r1, [r7, #20]
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	e841 2300 	strex	r3, r2, [r1]
 8005ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1e5      	bne.n	8005ab8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2220      	movs	r2, #32
 8005af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005afa:	bf00      	nop
 8005afc:	3754      	adds	r7, #84	@ 0x54
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
	...

08005b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b0c:	b0c0      	sub	sp, #256	@ 0x100
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b24:	68d9      	ldr	r1, [r3, #12]
 8005b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	ea40 0301 	orr.w	r3, r0, r1
 8005b30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	431a      	orrs	r2, r3
 8005b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005b60:	f021 010c 	bic.w	r1, r1, #12
 8005b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b6e:	430b      	orrs	r3, r1
 8005b70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b82:	6999      	ldr	r1, [r3, #24]
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	ea40 0301 	orr.w	r3, r0, r1
 8005b8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	4b8f      	ldr	r3, [pc, #572]	@ (8005dd4 <UART_SetConfig+0x2cc>)
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d005      	beq.n	8005ba8 <UART_SetConfig+0xa0>
 8005b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	4b8d      	ldr	r3, [pc, #564]	@ (8005dd8 <UART_SetConfig+0x2d0>)
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d104      	bne.n	8005bb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ba8:	f7fe fe66 	bl	8004878 <HAL_RCC_GetPCLK2Freq>
 8005bac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005bb0:	e003      	b.n	8005bba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bb2:	f7fe fe4d 	bl	8004850 <HAL_RCC_GetPCLK1Freq>
 8005bb6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bc4:	f040 810c 	bne.w	8005de0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005bd2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005bd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005bda:	4622      	mov	r2, r4
 8005bdc:	462b      	mov	r3, r5
 8005bde:	1891      	adds	r1, r2, r2
 8005be0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005be2:	415b      	adcs	r3, r3
 8005be4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005be6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005bea:	4621      	mov	r1, r4
 8005bec:	eb12 0801 	adds.w	r8, r2, r1
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	eb43 0901 	adc.w	r9, r3, r1
 8005bf6:	f04f 0200 	mov.w	r2, #0
 8005bfa:	f04f 0300 	mov.w	r3, #0
 8005bfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c0a:	4690      	mov	r8, r2
 8005c0c:	4699      	mov	r9, r3
 8005c0e:	4623      	mov	r3, r4
 8005c10:	eb18 0303 	adds.w	r3, r8, r3
 8005c14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c18:	462b      	mov	r3, r5
 8005c1a:	eb49 0303 	adc.w	r3, r9, r3
 8005c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c2e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005c32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c36:	460b      	mov	r3, r1
 8005c38:	18db      	adds	r3, r3, r3
 8005c3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	eb42 0303 	adc.w	r3, r2, r3
 8005c42:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005c4c:	f7fb f81c 	bl	8000c88 <__aeabi_uldivmod>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4b61      	ldr	r3, [pc, #388]	@ (8005ddc <UART_SetConfig+0x2d4>)
 8005c56:	fba3 2302 	umull	r2, r3, r3, r2
 8005c5a:	095b      	lsrs	r3, r3, #5
 8005c5c:	011c      	lsls	r4, r3, #4
 8005c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c62:	2200      	movs	r2, #0
 8005c64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c68:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005c6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005c70:	4642      	mov	r2, r8
 8005c72:	464b      	mov	r3, r9
 8005c74:	1891      	adds	r1, r2, r2
 8005c76:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005c78:	415b      	adcs	r3, r3
 8005c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c80:	4641      	mov	r1, r8
 8005c82:	eb12 0a01 	adds.w	sl, r2, r1
 8005c86:	4649      	mov	r1, r9
 8005c88:	eb43 0b01 	adc.w	fp, r3, r1
 8005c8c:	f04f 0200 	mov.w	r2, #0
 8005c90:	f04f 0300 	mov.w	r3, #0
 8005c94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ca0:	4692      	mov	sl, r2
 8005ca2:	469b      	mov	fp, r3
 8005ca4:	4643      	mov	r3, r8
 8005ca6:	eb1a 0303 	adds.w	r3, sl, r3
 8005caa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005cae:	464b      	mov	r3, r9
 8005cb0:	eb4b 0303 	adc.w	r3, fp, r3
 8005cb4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005cc4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005cc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	18db      	adds	r3, r3, r3
 8005cd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	eb42 0303 	adc.w	r3, r2, r3
 8005cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005cde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005ce2:	f7fa ffd1 	bl	8000c88 <__aeabi_uldivmod>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	4611      	mov	r1, r2
 8005cec:	4b3b      	ldr	r3, [pc, #236]	@ (8005ddc <UART_SetConfig+0x2d4>)
 8005cee:	fba3 2301 	umull	r2, r3, r3, r1
 8005cf2:	095b      	lsrs	r3, r3, #5
 8005cf4:	2264      	movs	r2, #100	@ 0x64
 8005cf6:	fb02 f303 	mul.w	r3, r2, r3
 8005cfa:	1acb      	subs	r3, r1, r3
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005d02:	4b36      	ldr	r3, [pc, #216]	@ (8005ddc <UART_SetConfig+0x2d4>)
 8005d04:	fba3 2302 	umull	r2, r3, r3, r2
 8005d08:	095b      	lsrs	r3, r3, #5
 8005d0a:	005b      	lsls	r3, r3, #1
 8005d0c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005d10:	441c      	add	r4, r3
 8005d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d16:	2200      	movs	r2, #0
 8005d18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d1c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005d20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005d24:	4642      	mov	r2, r8
 8005d26:	464b      	mov	r3, r9
 8005d28:	1891      	adds	r1, r2, r2
 8005d2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d2c:	415b      	adcs	r3, r3
 8005d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005d34:	4641      	mov	r1, r8
 8005d36:	1851      	adds	r1, r2, r1
 8005d38:	6339      	str	r1, [r7, #48]	@ 0x30
 8005d3a:	4649      	mov	r1, r9
 8005d3c:	414b      	adcs	r3, r1
 8005d3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d40:	f04f 0200 	mov.w	r2, #0
 8005d44:	f04f 0300 	mov.w	r3, #0
 8005d48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005d4c:	4659      	mov	r1, fp
 8005d4e:	00cb      	lsls	r3, r1, #3
 8005d50:	4651      	mov	r1, sl
 8005d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d56:	4651      	mov	r1, sl
 8005d58:	00ca      	lsls	r2, r1, #3
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4603      	mov	r3, r0
 8005d60:	4642      	mov	r2, r8
 8005d62:	189b      	adds	r3, r3, r2
 8005d64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d68:	464b      	mov	r3, r9
 8005d6a:	460a      	mov	r2, r1
 8005d6c:	eb42 0303 	adc.w	r3, r2, r3
 8005d70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005d84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d88:	460b      	mov	r3, r1
 8005d8a:	18db      	adds	r3, r3, r3
 8005d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d8e:	4613      	mov	r3, r2
 8005d90:	eb42 0303 	adc.w	r3, r2, r3
 8005d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d9e:	f7fa ff73 	bl	8000c88 <__aeabi_uldivmod>
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	4b0d      	ldr	r3, [pc, #52]	@ (8005ddc <UART_SetConfig+0x2d4>)
 8005da8:	fba3 1302 	umull	r1, r3, r3, r2
 8005dac:	095b      	lsrs	r3, r3, #5
 8005dae:	2164      	movs	r1, #100	@ 0x64
 8005db0:	fb01 f303 	mul.w	r3, r1, r3
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	3332      	adds	r3, #50	@ 0x32
 8005dba:	4a08      	ldr	r2, [pc, #32]	@ (8005ddc <UART_SetConfig+0x2d4>)
 8005dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc0:	095b      	lsrs	r3, r3, #5
 8005dc2:	f003 0207 	and.w	r2, r3, #7
 8005dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4422      	add	r2, r4
 8005dce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005dd0:	e106      	b.n	8005fe0 <UART_SetConfig+0x4d8>
 8005dd2:	bf00      	nop
 8005dd4:	40011000 	.word	0x40011000
 8005dd8:	40011400 	.word	0x40011400
 8005ddc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005de4:	2200      	movs	r2, #0
 8005de6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005dea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005dee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005df2:	4642      	mov	r2, r8
 8005df4:	464b      	mov	r3, r9
 8005df6:	1891      	adds	r1, r2, r2
 8005df8:	6239      	str	r1, [r7, #32]
 8005dfa:	415b      	adcs	r3, r3
 8005dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e02:	4641      	mov	r1, r8
 8005e04:	1854      	adds	r4, r2, r1
 8005e06:	4649      	mov	r1, r9
 8005e08:	eb43 0501 	adc.w	r5, r3, r1
 8005e0c:	f04f 0200 	mov.w	r2, #0
 8005e10:	f04f 0300 	mov.w	r3, #0
 8005e14:	00eb      	lsls	r3, r5, #3
 8005e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e1a:	00e2      	lsls	r2, r4, #3
 8005e1c:	4614      	mov	r4, r2
 8005e1e:	461d      	mov	r5, r3
 8005e20:	4643      	mov	r3, r8
 8005e22:	18e3      	adds	r3, r4, r3
 8005e24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e28:	464b      	mov	r3, r9
 8005e2a:	eb45 0303 	adc.w	r3, r5, r3
 8005e2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e42:	f04f 0200 	mov.w	r2, #0
 8005e46:	f04f 0300 	mov.w	r3, #0
 8005e4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e4e:	4629      	mov	r1, r5
 8005e50:	008b      	lsls	r3, r1, #2
 8005e52:	4621      	mov	r1, r4
 8005e54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e58:	4621      	mov	r1, r4
 8005e5a:	008a      	lsls	r2, r1, #2
 8005e5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005e60:	f7fa ff12 	bl	8000c88 <__aeabi_uldivmod>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4b60      	ldr	r3, [pc, #384]	@ (8005fec <UART_SetConfig+0x4e4>)
 8005e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e6e:	095b      	lsrs	r3, r3, #5
 8005e70:	011c      	lsls	r4, r3, #4
 8005e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e76:	2200      	movs	r2, #0
 8005e78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005e84:	4642      	mov	r2, r8
 8005e86:	464b      	mov	r3, r9
 8005e88:	1891      	adds	r1, r2, r2
 8005e8a:	61b9      	str	r1, [r7, #24]
 8005e8c:	415b      	adcs	r3, r3
 8005e8e:	61fb      	str	r3, [r7, #28]
 8005e90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e94:	4641      	mov	r1, r8
 8005e96:	1851      	adds	r1, r2, r1
 8005e98:	6139      	str	r1, [r7, #16]
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	414b      	adcs	r3, r1
 8005e9e:	617b      	str	r3, [r7, #20]
 8005ea0:	f04f 0200 	mov.w	r2, #0
 8005ea4:	f04f 0300 	mov.w	r3, #0
 8005ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005eac:	4659      	mov	r1, fp
 8005eae:	00cb      	lsls	r3, r1, #3
 8005eb0:	4651      	mov	r1, sl
 8005eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eb6:	4651      	mov	r1, sl
 8005eb8:	00ca      	lsls	r2, r1, #3
 8005eba:	4610      	mov	r0, r2
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	4642      	mov	r2, r8
 8005ec2:	189b      	adds	r3, r3, r2
 8005ec4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ec8:	464b      	mov	r3, r9
 8005eca:	460a      	mov	r2, r1
 8005ecc:	eb42 0303 	adc.w	r3, r2, r3
 8005ed0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ede:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ee0:	f04f 0200 	mov.w	r2, #0
 8005ee4:	f04f 0300 	mov.w	r3, #0
 8005ee8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005eec:	4649      	mov	r1, r9
 8005eee:	008b      	lsls	r3, r1, #2
 8005ef0:	4641      	mov	r1, r8
 8005ef2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ef6:	4641      	mov	r1, r8
 8005ef8:	008a      	lsls	r2, r1, #2
 8005efa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005efe:	f7fa fec3 	bl	8000c88 <__aeabi_uldivmod>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	4611      	mov	r1, r2
 8005f08:	4b38      	ldr	r3, [pc, #224]	@ (8005fec <UART_SetConfig+0x4e4>)
 8005f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8005f0e:	095b      	lsrs	r3, r3, #5
 8005f10:	2264      	movs	r2, #100	@ 0x64
 8005f12:	fb02 f303 	mul.w	r3, r2, r3
 8005f16:	1acb      	subs	r3, r1, r3
 8005f18:	011b      	lsls	r3, r3, #4
 8005f1a:	3332      	adds	r3, #50	@ 0x32
 8005f1c:	4a33      	ldr	r2, [pc, #204]	@ (8005fec <UART_SetConfig+0x4e4>)
 8005f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f22:	095b      	lsrs	r3, r3, #5
 8005f24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f28:	441c      	add	r4, r3
 8005f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f2e:	2200      	movs	r2, #0
 8005f30:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f32:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005f38:	4642      	mov	r2, r8
 8005f3a:	464b      	mov	r3, r9
 8005f3c:	1891      	adds	r1, r2, r2
 8005f3e:	60b9      	str	r1, [r7, #8]
 8005f40:	415b      	adcs	r3, r3
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f48:	4641      	mov	r1, r8
 8005f4a:	1851      	adds	r1, r2, r1
 8005f4c:	6039      	str	r1, [r7, #0]
 8005f4e:	4649      	mov	r1, r9
 8005f50:	414b      	adcs	r3, r1
 8005f52:	607b      	str	r3, [r7, #4]
 8005f54:	f04f 0200 	mov.w	r2, #0
 8005f58:	f04f 0300 	mov.w	r3, #0
 8005f5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f60:	4659      	mov	r1, fp
 8005f62:	00cb      	lsls	r3, r1, #3
 8005f64:	4651      	mov	r1, sl
 8005f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f6a:	4651      	mov	r1, sl
 8005f6c:	00ca      	lsls	r2, r1, #3
 8005f6e:	4610      	mov	r0, r2
 8005f70:	4619      	mov	r1, r3
 8005f72:	4603      	mov	r3, r0
 8005f74:	4642      	mov	r2, r8
 8005f76:	189b      	adds	r3, r3, r2
 8005f78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f7a:	464b      	mov	r3, r9
 8005f7c:	460a      	mov	r2, r1
 8005f7e:	eb42 0303 	adc.w	r3, r2, r3
 8005f82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f8e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	f04f 0300 	mov.w	r3, #0
 8005f98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f9c:	4649      	mov	r1, r9
 8005f9e:	008b      	lsls	r3, r1, #2
 8005fa0:	4641      	mov	r1, r8
 8005fa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fa6:	4641      	mov	r1, r8
 8005fa8:	008a      	lsls	r2, r1, #2
 8005faa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005fae:	f7fa fe6b 	bl	8000c88 <__aeabi_uldivmod>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005fec <UART_SetConfig+0x4e4>)
 8005fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005fbc:	095b      	lsrs	r3, r3, #5
 8005fbe:	2164      	movs	r1, #100	@ 0x64
 8005fc0:	fb01 f303 	mul.w	r3, r1, r3
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	011b      	lsls	r3, r3, #4
 8005fc8:	3332      	adds	r3, #50	@ 0x32
 8005fca:	4a08      	ldr	r2, [pc, #32]	@ (8005fec <UART_SetConfig+0x4e4>)
 8005fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd0:	095b      	lsrs	r3, r3, #5
 8005fd2:	f003 020f 	and.w	r2, r3, #15
 8005fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4422      	add	r2, r4
 8005fde:	609a      	str	r2, [r3, #8]
}
 8005fe0:	bf00      	nop
 8005fe2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fec:	51eb851f 	.word	0x51eb851f

08005ff0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f103 0208 	add.w	r2, r3, #8
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f04f 32ff 	mov.w	r2, #4294967295
 8006008:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f103 0208 	add.w	r2, r3, #8
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f103 0208 	add.w	r2, r3, #8
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800603e:	bf00      	nop
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800604a:	b480      	push	{r7}
 800604c:	b085      	sub	sp, #20
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	601a      	str	r2, [r3, #0]
}
 8006086:	bf00      	nop
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8006092:	b480      	push	{r7}
 8006094:	b085      	sub	sp, #20
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a8:	d103      	bne.n	80060b2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	e00c      	b.n	80060cc <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	3308      	adds	r3, #8
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	e002      	b.n	80060c0 <vListInsert+0x2e>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	60fb      	str	r3, [r7, #12]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d2f6      	bcs.n	80060ba <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	601a      	str	r2, [r3, #0]
}
 80060f8:	bf00      	nop
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6892      	ldr	r2, [r2, #8]
 800611a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6852      	ldr	r2, [r2, #4]
 8006124:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	429a      	cmp	r2, r3
 800612e:	d103      	bne.n	8006138 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	1e5a      	subs	r2, r3, #1
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10b      	bne.n	8006184 <xQueueGenericReset+0x2c>
        __asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	60bb      	str	r3, [r7, #8]
    }
 800617e:	bf00      	nop
 8006180:	bf00      	nop
 8006182:	e7fd      	b.n	8006180 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8006184:	f002 fa32 	bl	80085ec <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006190:	68f9      	ldr	r1, [r7, #12]
 8006192:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006194:	fb01 f303 	mul.w	r3, r1, r3
 8006198:	441a      	add	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b4:	3b01      	subs	r3, #1
 80061b6:	68f9      	ldr	r1, [r7, #12]
 80061b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80061ba:	fb01 f303 	mul.w	r3, r1, r3
 80061be:	441a      	add	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	22ff      	movs	r2, #255	@ 0xff
 80061c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	22ff      	movs	r2, #255	@ 0xff
 80061d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d114      	bne.n	8006204 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d01a      	beq.n	8006218 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	3310      	adds	r3, #16
 80061e6:	4618      	mov	r0, r3
 80061e8:	f001 f9f2 	bl	80075d0 <xTaskRemoveFromEventList>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d012      	beq.n	8006218 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80061f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006228 <xQueueGenericReset+0xd0>)
 80061f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	e009      	b.n	8006218 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3310      	adds	r3, #16
 8006208:	4618      	mov	r0, r3
 800620a:	f7ff fef1 	bl	8005ff0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3324      	adds	r3, #36	@ 0x24
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff feec 	bl	8005ff0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8006218:	f002 fa1a 	bl	8008650 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800621c:	2301      	movs	r3, #1
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	e000ed04 	.word	0xe000ed04

0800622c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800622c:	b580      	push	{r7, lr}
 800622e:	b08c      	sub	sp, #48	@ 0x30
 8006230:	af02      	add	r7, sp, #8
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	4613      	mov	r3, r2
 8006238:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10b      	bne.n	8006258 <xQueueGenericCreate+0x2c>
        __asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	61bb      	str	r3, [r7, #24]
    }
 8006252:	bf00      	nop
 8006254:	bf00      	nop
 8006256:	e7fd      	b.n	8006254 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	fb02 f303 	mul.w	r3, r2, r3
 8006260:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d006      	beq.n	8006276 <xQueueGenericCreate+0x4a>
 8006268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	429a      	cmp	r2, r3
 8006274:	d101      	bne.n	800627a <xQueueGenericCreate+0x4e>
 8006276:	2301      	movs	r3, #1
 8006278:	e000      	b.n	800627c <xQueueGenericCreate+0x50>
 800627a:	2300      	movs	r3, #0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10b      	bne.n	8006298 <xQueueGenericCreate+0x6c>
        __asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	617b      	str	r3, [r7, #20]
    }
 8006292:	bf00      	nop
 8006294:	bf00      	nop
 8006296:	e7fd      	b.n	8006294 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8006298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800629e:	d90b      	bls.n	80062b8 <xQueueGenericCreate+0x8c>
        __asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	613b      	str	r3, [r7, #16]
    }
 80062b2:	bf00      	nop
 80062b4:	bf00      	nop
 80062b6:	e7fd      	b.n	80062b4 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80062b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ba:	3350      	adds	r3, #80	@ 0x50
 80062bc:	4618      	mov	r0, r3
 80062be:	f002 fabf 	bl	8008840 <pvPortMalloc>
 80062c2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80062c4:	6a3b      	ldr	r3, [r7, #32]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00d      	beq.n	80062e6 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	3350      	adds	r3, #80	@ 0x50
 80062d2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062d4:	79fa      	ldrb	r2, [r7, #7]
 80062d6:	6a3b      	ldr	r3, [r7, #32]
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	4613      	mov	r3, r2
 80062dc:	69fa      	ldr	r2, [r7, #28]
 80062de:	68b9      	ldr	r1, [r7, #8]
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 f805 	bl	80062f0 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80062e6:	6a3b      	ldr	r3, [r7, #32]
    }
 80062e8:	4618      	mov	r0, r3
 80062ea:	3728      	adds	r7, #40	@ 0x28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d103      	bne.n	800630c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	601a      	str	r2, [r3, #0]
 800630a:	e002      	b.n	8006312 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800631e:	2101      	movs	r1, #1
 8006320:	69b8      	ldr	r0, [r7, #24]
 8006322:	f7ff ff19 	bl	8006158 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	78fa      	ldrb	r2, [r7, #3]
 800632a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800632e:	bf00      	nop
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8006336:	b580      	push	{r7, lr}
 8006338:	b082      	sub	sp, #8
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00e      	beq.n	8006362 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006356:	2300      	movs	r3, #0
 8006358:	2200      	movs	r2, #0
 800635a:	2100      	movs	r1, #0
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f81d 	bl	800639c <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8006362:	bf00      	nop
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800636a:	b580      	push	{r7, lr}
 800636c:	b086      	sub	sp, #24
 800636e:	af00      	add	r7, sp, #0
 8006370:	4603      	mov	r3, r0
 8006372:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006374:	2301      	movs	r3, #1
 8006376:	617b      	str	r3, [r7, #20]
 8006378:	2300      	movs	r3, #0
 800637a:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800637c:	79fb      	ldrb	r3, [r7, #7]
 800637e:	461a      	mov	r2, r3
 8006380:	6939      	ldr	r1, [r7, #16]
 8006382:	6978      	ldr	r0, [r7, #20]
 8006384:	f7ff ff52 	bl	800622c <xQueueGenericCreate>
 8006388:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f7ff ffd3 	bl	8006336 <prvInitialiseMutex>

        return xNewQueue;
 8006390:	68fb      	ldr	r3, [r7, #12]
    }
 8006392:	4618      	mov	r0, r3
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
	...

0800639c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b08e      	sub	sp, #56	@ 0x38
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
 80063a8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80063aa:	2300      	movs	r3, #0
 80063ac:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80063b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10b      	bne.n	80063d0 <xQueueGenericSend+0x34>
        __asm volatile
 80063b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80063ca:	bf00      	nop
 80063cc:	bf00      	nop
 80063ce:	e7fd      	b.n	80063cc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d103      	bne.n	80063de <xQueueGenericSend+0x42>
 80063d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <xQueueGenericSend+0x46>
 80063de:	2301      	movs	r3, #1
 80063e0:	e000      	b.n	80063e4 <xQueueGenericSend+0x48>
 80063e2:	2300      	movs	r3, #0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10b      	bne.n	8006400 <xQueueGenericSend+0x64>
        __asm volatile
 80063e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ec:	f383 8811 	msr	BASEPRI, r3
 80063f0:	f3bf 8f6f 	isb	sy
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80063fa:	bf00      	nop
 80063fc:	bf00      	nop
 80063fe:	e7fd      	b.n	80063fc <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	2b02      	cmp	r3, #2
 8006404:	d103      	bne.n	800640e <xQueueGenericSend+0x72>
 8006406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800640a:	2b01      	cmp	r3, #1
 800640c:	d101      	bne.n	8006412 <xQueueGenericSend+0x76>
 800640e:	2301      	movs	r3, #1
 8006410:	e000      	b.n	8006414 <xQueueGenericSend+0x78>
 8006412:	2300      	movs	r3, #0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10b      	bne.n	8006430 <xQueueGenericSend+0x94>
        __asm volatile
 8006418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800641c:	f383 8811 	msr	BASEPRI, r3
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	623b      	str	r3, [r7, #32]
    }
 800642a:	bf00      	nop
 800642c:	bf00      	nop
 800642e:	e7fd      	b.n	800642c <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006430:	f001 fa6e 	bl	8007910 <xTaskGetSchedulerState>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d102      	bne.n	8006440 <xQueueGenericSend+0xa4>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <xQueueGenericSend+0xa8>
 8006440:	2301      	movs	r3, #1
 8006442:	e000      	b.n	8006446 <xQueueGenericSend+0xaa>
 8006444:	2300      	movs	r3, #0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10b      	bne.n	8006462 <xQueueGenericSend+0xc6>
        __asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	61fb      	str	r3, [r7, #28]
    }
 800645c:	bf00      	nop
 800645e:	bf00      	nop
 8006460:	e7fd      	b.n	800645e <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006462:	f002 f8c3 	bl	80085ec <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006468:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800646a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800646e:	429a      	cmp	r2, r3
 8006470:	d302      	bcc.n	8006478 <xQueueGenericSend+0xdc>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2b02      	cmp	r3, #2
 8006476:	d129      	bne.n	80064cc <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	68b9      	ldr	r1, [r7, #8]
 800647c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800647e:	f000 fb47 	bl	8006b10 <prvCopyDataToQueue>
 8006482:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006488:	2b00      	cmp	r3, #0
 800648a:	d010      	beq.n	80064ae <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800648c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648e:	3324      	adds	r3, #36	@ 0x24
 8006490:	4618      	mov	r0, r3
 8006492:	f001 f89d 	bl	80075d0 <xTaskRemoveFromEventList>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d013      	beq.n	80064c4 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800649c:	4b3f      	ldr	r3, [pc, #252]	@ (800659c <xQueueGenericSend+0x200>)
 800649e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	e00a      	b.n	80064c4 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80064ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d007      	beq.n	80064c4 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80064b4:	4b39      	ldr	r3, [pc, #228]	@ (800659c <xQueueGenericSend+0x200>)
 80064b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80064c4:	f002 f8c4 	bl	8008650 <vPortExitCritical>
                return pdPASS;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e063      	b.n	8006594 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d103      	bne.n	80064da <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80064d2:	f002 f8bd 	bl	8008650 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80064d6:	2300      	movs	r3, #0
 80064d8:	e05c      	b.n	8006594 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80064da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d106      	bne.n	80064ee <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80064e0:	f107 0314 	add.w	r3, r7, #20
 80064e4:	4618      	mov	r0, r3
 80064e6:	f001 f8d7 	bl	8007698 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80064ea:	2301      	movs	r3, #1
 80064ec:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80064ee:	f002 f8af 	bl	8008650 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80064f2:	f000 fe49 	bl	8007188 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80064f6:	f002 f879 	bl	80085ec <vPortEnterCritical>
 80064fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006500:	b25b      	sxtb	r3, r3
 8006502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006506:	d103      	bne.n	8006510 <xQueueGenericSend+0x174>
 8006508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006512:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006516:	b25b      	sxtb	r3, r3
 8006518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651c:	d103      	bne.n	8006526 <xQueueGenericSend+0x18a>
 800651e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006526:	f002 f893 	bl	8008650 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800652a:	1d3a      	adds	r2, r7, #4
 800652c:	f107 0314 	add.w	r3, r7, #20
 8006530:	4611      	mov	r1, r2
 8006532:	4618      	mov	r0, r3
 8006534:	f001 f8c6 	bl	80076c4 <xTaskCheckForTimeOut>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d124      	bne.n	8006588 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800653e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006540:	f000 fbde 	bl	8006d00 <prvIsQueueFull>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d018      	beq.n	800657c <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800654a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654c:	3310      	adds	r3, #16
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	4611      	mov	r1, r2
 8006552:	4618      	mov	r0, r3
 8006554:	f000 ffea 	bl	800752c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8006558:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800655a:	f000 fb69 	bl	8006c30 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800655e:	f000 fe21 	bl	80071a4 <xTaskResumeAll>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	f47f af7c 	bne.w	8006462 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 800656a:	4b0c      	ldr	r3, [pc, #48]	@ (800659c <xQueueGenericSend+0x200>)
 800656c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	e772      	b.n	8006462 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800657c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800657e:	f000 fb57 	bl	8006c30 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006582:	f000 fe0f 	bl	80071a4 <xTaskResumeAll>
 8006586:	e76c      	b.n	8006462 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8006588:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800658a:	f000 fb51 	bl	8006c30 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800658e:	f000 fe09 	bl	80071a4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8006592:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8006594:	4618      	mov	r0, r3
 8006596:	3738      	adds	r7, #56	@ 0x38
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	e000ed04 	.word	0xe000ed04

080065a0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b090      	sub	sp, #64	@ 0x40
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
 80065ac:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 80065b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10b      	bne.n	80065d0 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 80065b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80065ca:	bf00      	nop
 80065cc:	bf00      	nop
 80065ce:	e7fd      	b.n	80065cc <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d103      	bne.n	80065de <xQueueGenericSendFromISR+0x3e>
 80065d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <xQueueGenericSendFromISR+0x42>
 80065de:	2301      	movs	r3, #1
 80065e0:	e000      	b.n	80065e4 <xQueueGenericSendFromISR+0x44>
 80065e2:	2300      	movs	r3, #0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10b      	bne.n	8006600 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 80065e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80065fa:	bf00      	nop
 80065fc:	bf00      	nop
 80065fe:	e7fd      	b.n	80065fc <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	2b02      	cmp	r3, #2
 8006604:	d103      	bne.n	800660e <xQueueGenericSendFromISR+0x6e>
 8006606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800660a:	2b01      	cmp	r3, #1
 800660c:	d101      	bne.n	8006612 <xQueueGenericSendFromISR+0x72>
 800660e:	2301      	movs	r3, #1
 8006610:	e000      	b.n	8006614 <xQueueGenericSendFromISR+0x74>
 8006612:	2300      	movs	r3, #0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10b      	bne.n	8006630 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8006618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661c:	f383 8811 	msr	BASEPRI, r3
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	623b      	str	r3, [r7, #32]
    }
 800662a:	bf00      	nop
 800662c:	bf00      	nop
 800662e:	e7fd      	b.n	800662c <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006630:	f002 f8c4 	bl	80087bc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8006634:	f3ef 8211 	mrs	r2, BASEPRI
 8006638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	61fa      	str	r2, [r7, #28]
 800664a:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800664c:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800664e:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006652:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006658:	429a      	cmp	r2, r3
 800665a:	d302      	bcc.n	8006662 <xQueueGenericSendFromISR+0xc2>
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	2b02      	cmp	r3, #2
 8006660:	d13f      	bne.n	80066e2 <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8006662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006664:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006668:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800666c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800666e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006670:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	68b9      	ldr	r1, [r7, #8]
 8006676:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006678:	f000 fa4a 	bl	8006b10 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800667c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006684:	d112      	bne.n	80066ac <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800668a:	2b00      	cmp	r3, #0
 800668c:	d026      	beq.n	80066dc <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800668e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006690:	3324      	adds	r3, #36	@ 0x24
 8006692:	4618      	mov	r0, r3
 8006694:	f000 ff9c 	bl	80075d0 <xTaskRemoveFromEventList>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d01e      	beq.n	80066dc <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d01b      	beq.n	80066dc <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	601a      	str	r2, [r3, #0]
 80066aa:	e017      	b.n	80066dc <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80066ac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80066b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80066b2:	d10b      	bne.n	80066cc <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 80066b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b8:	f383 8811 	msr	BASEPRI, r3
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	617b      	str	r3, [r7, #20]
    }
 80066c6:	bf00      	nop
 80066c8:	bf00      	nop
 80066ca:	e7fd      	b.n	80066c8 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80066cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80066d0:	3301      	adds	r3, #1
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	b25a      	sxtb	r2, r3
 80066d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80066dc:	2301      	movs	r3, #1
 80066de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 80066e0:	e001      	b.n	80066e6 <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80066e2:	2300      	movs	r3, #0
 80066e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066e8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80066f0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80066f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3740      	adds	r7, #64	@ 0x40
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08c      	sub	sp, #48	@ 0x30
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006708:	2300      	movs	r3, #0
 800670a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10b      	bne.n	800672e <xQueueReceive+0x32>
        __asm volatile
 8006716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	623b      	str	r3, [r7, #32]
    }
 8006728:	bf00      	nop
 800672a:	bf00      	nop
 800672c:	e7fd      	b.n	800672a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d103      	bne.n	800673c <xQueueReceive+0x40>
 8006734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <xQueueReceive+0x44>
 800673c:	2301      	movs	r3, #1
 800673e:	e000      	b.n	8006742 <xQueueReceive+0x46>
 8006740:	2300      	movs	r3, #0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10b      	bne.n	800675e <xQueueReceive+0x62>
        __asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	61fb      	str	r3, [r7, #28]
    }
 8006758:	bf00      	nop
 800675a:	bf00      	nop
 800675c:	e7fd      	b.n	800675a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800675e:	f001 f8d7 	bl	8007910 <xTaskGetSchedulerState>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d102      	bne.n	800676e <xQueueReceive+0x72>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <xQueueReceive+0x76>
 800676e:	2301      	movs	r3, #1
 8006770:	e000      	b.n	8006774 <xQueueReceive+0x78>
 8006772:	2300      	movs	r3, #0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10b      	bne.n	8006790 <xQueueReceive+0x94>
        __asm volatile
 8006778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	61bb      	str	r3, [r7, #24]
    }
 800678a:	bf00      	nop
 800678c:	bf00      	nop
 800678e:	e7fd      	b.n	800678c <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006790:	f001 ff2c 	bl	80085ec <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006798:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800679a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679c:	2b00      	cmp	r3, #0
 800679e:	d01f      	beq.n	80067e0 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067a0:	68b9      	ldr	r1, [r7, #8]
 80067a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067a4:	f000 fa1e 	bl	8006be4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80067a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067aa:	1e5a      	subs	r2, r3, #1
 80067ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ae:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00f      	beq.n	80067d8 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ba:	3310      	adds	r3, #16
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 ff07 	bl	80075d0 <xTaskRemoveFromEventList>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d007      	beq.n	80067d8 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80067c8:	4b3c      	ldr	r3, [pc, #240]	@ (80068bc <xQueueReceive+0x1c0>)
 80067ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80067d8:	f001 ff3a 	bl	8008650 <vPortExitCritical>
                return pdPASS;
 80067dc:	2301      	movs	r3, #1
 80067de:	e069      	b.n	80068b4 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d103      	bne.n	80067ee <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80067e6:	f001 ff33 	bl	8008650 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80067ea:	2300      	movs	r3, #0
 80067ec:	e062      	b.n	80068b4 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80067ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d106      	bne.n	8006802 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80067f4:	f107 0310 	add.w	r3, r7, #16
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 ff4d 	bl	8007698 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80067fe:	2301      	movs	r3, #1
 8006800:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006802:	f001 ff25 	bl	8008650 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006806:	f000 fcbf 	bl	8007188 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800680a:	f001 feef 	bl	80085ec <vPortEnterCritical>
 800680e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006810:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006814:	b25b      	sxtb	r3, r3
 8006816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681a:	d103      	bne.n	8006824 <xQueueReceive+0x128>
 800681c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681e:	2200      	movs	r2, #0
 8006820:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006826:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800682a:	b25b      	sxtb	r3, r3
 800682c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006830:	d103      	bne.n	800683a <xQueueReceive+0x13e>
 8006832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800683a:	f001 ff09 	bl	8008650 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800683e:	1d3a      	adds	r2, r7, #4
 8006840:	f107 0310 	add.w	r3, r7, #16
 8006844:	4611      	mov	r1, r2
 8006846:	4618      	mov	r0, r3
 8006848:	f000 ff3c 	bl	80076c4 <xTaskCheckForTimeOut>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d123      	bne.n	800689a <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006854:	f000 fa3e 	bl	8006cd4 <prvIsQueueEmpty>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d017      	beq.n	800688e <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800685e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006860:	3324      	adds	r3, #36	@ 0x24
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	4611      	mov	r1, r2
 8006866:	4618      	mov	r0, r3
 8006868:	f000 fe60 	bl	800752c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800686c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800686e:	f000 f9df 	bl	8006c30 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006872:	f000 fc97 	bl	80071a4 <xTaskResumeAll>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d189      	bne.n	8006790 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 800687c:	4b0f      	ldr	r3, [pc, #60]	@ (80068bc <xQueueReceive+0x1c0>)
 800687e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	e780      	b.n	8006790 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800688e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006890:	f000 f9ce 	bl	8006c30 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006894:	f000 fc86 	bl	80071a4 <xTaskResumeAll>
 8006898:	e77a      	b.n	8006790 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800689a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800689c:	f000 f9c8 	bl	8006c30 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80068a0:	f000 fc80 	bl	80071a4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068a6:	f000 fa15 	bl	8006cd4 <prvIsQueueEmpty>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f43f af6f 	beq.w	8006790 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80068b2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3730      	adds	r7, #48	@ 0x30
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	e000ed04 	.word	0xe000ed04

080068c0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08e      	sub	sp, #56	@ 0x38
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80068ca:	2300      	movs	r3, #0
 80068cc:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80068d2:	2300      	movs	r3, #0
 80068d4:	633b      	str	r3, [r7, #48]	@ 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80068d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10b      	bne.n	80068f4 <xQueueSemaphoreTake+0x34>
        __asm volatile
 80068dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e0:	f383 8811 	msr	BASEPRI, r3
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	623b      	str	r3, [r7, #32]
    }
 80068ee:	bf00      	nop
 80068f0:	bf00      	nop
 80068f2:	e7fd      	b.n	80068f0 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80068f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00b      	beq.n	8006914 <xQueueSemaphoreTake+0x54>
        __asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	61fb      	str	r3, [r7, #28]
    }
 800690e:	bf00      	nop
 8006910:	bf00      	nop
 8006912:	e7fd      	b.n	8006910 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006914:	f000 fffc 	bl	8007910 <xTaskGetSchedulerState>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d102      	bne.n	8006924 <xQueueSemaphoreTake+0x64>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <xQueueSemaphoreTake+0x68>
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <xQueueSemaphoreTake+0x6a>
 8006928:	2300      	movs	r3, #0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10b      	bne.n	8006946 <xQueueSemaphoreTake+0x86>
        __asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	61bb      	str	r3, [r7, #24]
    }
 8006940:	bf00      	nop
 8006942:	bf00      	nop
 8006944:	e7fd      	b.n	8006942 <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006946:	f001 fe51 	bl	80085ec <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800694a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800694c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800694e:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006952:	2b00      	cmp	r3, #0
 8006954:	d024      	beq.n	80069a0 <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006958:	1e5a      	subs	r2, r3, #1
 800695a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800695c:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800695e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d104      	bne.n	8006970 <xQueueSemaphoreTake+0xb0>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006966:	f001 f973 	bl	8007c50 <pvTaskIncrementMutexHeldCount>
 800696a:	4602      	mov	r2, r0
 800696c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800696e:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00f      	beq.n	8006998 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800697a:	3310      	adds	r3, #16
 800697c:	4618      	mov	r0, r3
 800697e:	f000 fe27 	bl	80075d0 <xTaskRemoveFromEventList>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d007      	beq.n	8006998 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006988:	4b54      	ldr	r3, [pc, #336]	@ (8006adc <xQueueSemaphoreTake+0x21c>)
 800698a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006998:	f001 fe5a 	bl	8008650 <vPortExitCritical>
                return pdPASS;
 800699c:	2301      	movs	r3, #1
 800699e:	e098      	b.n	8006ad2 <xQueueSemaphoreTake+0x212>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d112      	bne.n	80069cc <xQueueSemaphoreTake+0x10c>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 80069a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00b      	beq.n	80069c4 <xQueueSemaphoreTake+0x104>
        __asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	617b      	str	r3, [r7, #20]
    }
 80069be:	bf00      	nop
 80069c0:	bf00      	nop
 80069c2:	e7fd      	b.n	80069c0 <xQueueSemaphoreTake+0x100>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80069c4:	f001 fe44 	bl	8008650 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80069c8:	2300      	movs	r3, #0
 80069ca:	e082      	b.n	8006ad2 <xQueueSemaphoreTake+0x212>
                }
                else if( xEntryTimeSet == pdFALSE )
 80069cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d106      	bne.n	80069e0 <xQueueSemaphoreTake+0x120>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80069d2:	f107 030c 	add.w	r3, r7, #12
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 fe5e 	bl	8007698 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80069dc:	2301      	movs	r3, #1
 80069de:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80069e0:	f001 fe36 	bl	8008650 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80069e4:	f000 fbd0 	bl	8007188 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80069e8:	f001 fe00 	bl	80085ec <vPortEnterCritical>
 80069ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069f2:	b25b      	sxtb	r3, r3
 80069f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f8:	d103      	bne.n	8006a02 <xQueueSemaphoreTake+0x142>
 80069fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a08:	b25b      	sxtb	r3, r3
 8006a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0e:	d103      	bne.n	8006a18 <xQueueSemaphoreTake+0x158>
 8006a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a18:	f001 fe1a 	bl	8008650 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a1c:	463a      	mov	r2, r7
 8006a1e:	f107 030c 	add.w	r3, r7, #12
 8006a22:	4611      	mov	r1, r2
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 fe4d 	bl	80076c4 <xTaskCheckForTimeOut>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d132      	bne.n	8006a96 <xQueueSemaphoreTake+0x1d6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a32:	f000 f94f 	bl	8006cd4 <prvIsQueueEmpty>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d026      	beq.n	8006a8a <xQueueSemaphoreTake+0x1ca>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d109      	bne.n	8006a58 <xQueueSemaphoreTake+0x198>
                        {
                            taskENTER_CRITICAL();
 8006a44:	f001 fdd2 	bl	80085ec <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 ff7d 	bl	800794c <xTaskPriorityInherit>
 8006a52:	6338      	str	r0, [r7, #48]	@ 0x30
                            }
                            taskEXIT_CRITICAL();
 8006a54:	f001 fdfc 	bl	8008650 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a5a:	3324      	adds	r3, #36	@ 0x24
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	4611      	mov	r1, r2
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 fd63 	bl	800752c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006a66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a68:	f000 f8e2 	bl	8006c30 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006a6c:	f000 fb9a 	bl	80071a4 <xTaskResumeAll>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f47f af67 	bne.w	8006946 <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 8006a78:	4b18      	ldr	r3, [pc, #96]	@ (8006adc <xQueueSemaphoreTake+0x21c>)
 8006a7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	e75d      	b.n	8006946 <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8006a8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a8c:	f000 f8d0 	bl	8006c30 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006a90:	f000 fb88 	bl	80071a4 <xTaskResumeAll>
 8006a94:	e757      	b.n	8006946 <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8006a96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a98:	f000 f8ca 	bl	8006c30 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006a9c:	f000 fb82 	bl	80071a4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006aa0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006aa2:	f000 f917 	bl	8006cd4 <prvIsQueueEmpty>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f43f af4c 	beq.w	8006946 <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8006aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00d      	beq.n	8006ad0 <xQueueSemaphoreTake+0x210>
                        {
                            taskENTER_CRITICAL();
 8006ab4:	f001 fd9a 	bl	80085ec <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006ab8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006aba:	f000 f811 	bl	8006ae0 <prvGetDisinheritPriorityAfterTimeout>
 8006abe:	6278      	str	r0, [r7, #36]	@ 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f001 f832 	bl	8007b30 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8006acc:	f001 fdc0 	bl	8008650 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006ad0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3738      	adds	r7, #56	@ 0x38
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	e000ed04 	.word	0xe000ed04

08006ae0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d006      	beq.n	8006afe <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f1c3 0305 	rsb	r3, r3, #5
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	e001      	b.n	8006b02 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006afe:	2300      	movs	r3, #0
 8006b00:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8006b02:	68fb      	ldr	r3, [r7, #12]
    }
 8006b04:	4618      	mov	r0, r3
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b24:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10d      	bne.n	8006b4a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d14d      	bne.n	8006bd2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 ff7c 	bl	8007a38 <xTaskPriorityDisinherit>
 8006b40:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	609a      	str	r2, [r3, #8]
 8006b48:	e043      	b.n	8006bd2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d119      	bne.n	8006b84 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6858      	ldr	r0, [r3, #4]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b58:	461a      	mov	r2, r3
 8006b5a:	68b9      	ldr	r1, [r7, #8]
 8006b5c:	f002 ff73 	bl	8009a46 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b68:	441a      	add	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	685a      	ldr	r2, [r3, #4]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d32b      	bcc.n	8006bd2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	605a      	str	r2, [r3, #4]
 8006b82:	e026      	b.n	8006bd2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	68d8      	ldr	r0, [r3, #12]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	68b9      	ldr	r1, [r7, #8]
 8006b90:	f002 ff59 	bl	8009a46 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	68da      	ldr	r2, [r3, #12]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b9c:	425b      	negs	r3, r3
 8006b9e:	441a      	add	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	68da      	ldr	r2, [r3, #12]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d207      	bcs.n	8006bc0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	689a      	ldr	r2, [r3, #8]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb8:	425b      	negs	r3, r3
 8006bba:	441a      	add	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d105      	bne.n	8006bd2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d002      	beq.n	8006bd2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	1c5a      	adds	r2, r3, #1
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8006bda:	697b      	ldr	r3, [r7, #20]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3718      	adds	r7, #24
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d018      	beq.n	8006c28 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bfe:	441a      	add	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68da      	ldr	r2, [r3, #12]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d303      	bcc.n	8006c18 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68d9      	ldr	r1, [r3, #12]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c20:	461a      	mov	r2, r3
 8006c22:	6838      	ldr	r0, [r7, #0]
 8006c24:	f002 ff0f 	bl	8009a46 <memcpy>
    }
}
 8006c28:	bf00      	nop
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8006c38:	f001 fcd8 	bl	80085ec <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c42:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c44:	e011      	b.n	8006c6a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d012      	beq.n	8006c74 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	3324      	adds	r3, #36	@ 0x24
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 fcbc 	bl	80075d0 <xTaskRemoveFromEventList>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8006c5e:	f000 fd99 	bl	8007794 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	3b01      	subs	r3, #1
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	dce9      	bgt.n	8006c46 <prvUnlockQueue+0x16>
 8006c72:	e000      	b.n	8006c76 <prvUnlockQueue+0x46>
                        break;
 8006c74:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	22ff      	movs	r2, #255	@ 0xff
 8006c7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8006c7e:	f001 fce7 	bl	8008650 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006c82:	f001 fcb3 	bl	80085ec <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c8c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c8e:	e011      	b.n	8006cb4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d012      	beq.n	8006cbe <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	3310      	adds	r3, #16
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 fc97 	bl	80075d0 <xTaskRemoveFromEventList>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d001      	beq.n	8006cac <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006ca8:	f000 fd74 	bl	8007794 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006cac:	7bbb      	ldrb	r3, [r7, #14]
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	dce9      	bgt.n	8006c90 <prvUnlockQueue+0x60>
 8006cbc:	e000      	b.n	8006cc0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8006cbe:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	22ff      	movs	r2, #255	@ 0xff
 8006cc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8006cc8:	f001 fcc2 	bl	8008650 <vPortExitCritical>
}
 8006ccc:	bf00      	nop
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006cdc:	f001 fc86 	bl	80085ec <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d102      	bne.n	8006cee <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	60fb      	str	r3, [r7, #12]
 8006cec:	e001      	b.n	8006cf2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006cf2:	f001 fcad 	bl	8008650 <vPortExitCritical>

    return xReturn;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006d08:	f001 fc70 	bl	80085ec <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d102      	bne.n	8006d1e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	60fb      	str	r3, [r7, #12]
 8006d1c:	e001      	b.n	8006d22 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006d22:	f001 fc95 	bl	8008650 <vPortExitCritical>

    return xReturn;
 8006d26:	68fb      	ldr	r3, [r7, #12]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	e014      	b.n	8006d6a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d40:	4a0f      	ldr	r2, [pc, #60]	@ (8006d80 <vQueueAddToRegistry+0x50>)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10b      	bne.n	8006d64 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d4c:	490c      	ldr	r1, [pc, #48]	@ (8006d80 <vQueueAddToRegistry+0x50>)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	683a      	ldr	r2, [r7, #0]
 8006d52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8006d56:	4a0a      	ldr	r2, [pc, #40]	@ (8006d80 <vQueueAddToRegistry+0x50>)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	00db      	lsls	r3, r3, #3
 8006d5c:	4413      	add	r3, r2
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8006d62:	e006      	b.n	8006d72 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	3301      	adds	r3, #1
 8006d68:	60fb      	str	r3, [r7, #12]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2b07      	cmp	r3, #7
 8006d6e:	d9e7      	bls.n	8006d40 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8006d70:	bf00      	nop
 8006d72:	bf00      	nop
 8006d74:	3714      	adds	r7, #20
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	2000042c 	.word	0x2000042c

08006d84 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006d94:	f001 fc2a 	bl	80085ec <vPortEnterCritical>
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d9e:	b25b      	sxtb	r3, r3
 8006da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da4:	d103      	bne.n	8006dae <vQueueWaitForMessageRestricted+0x2a>
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006db4:	b25b      	sxtb	r3, r3
 8006db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dba:	d103      	bne.n	8006dc4 <vQueueWaitForMessageRestricted+0x40>
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006dc4:	f001 fc44 	bl	8008650 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d106      	bne.n	8006dde <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	3324      	adds	r3, #36	@ 0x24
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	68b9      	ldr	r1, [r7, #8]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 fbcd 	bl	8007578 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006dde:	6978      	ldr	r0, [r7, #20]
 8006de0:	f7ff ff26 	bl	8006c30 <prvUnlockQueue>
    }
 8006de4:	bf00      	nop
 8006de6:	3718      	adds	r7, #24
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b08c      	sub	sp, #48	@ 0x30
 8006df0:	af04      	add	r7, sp, #16
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	603b      	str	r3, [r7, #0]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006dfc:	88fb      	ldrh	r3, [r7, #6]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4618      	mov	r0, r3
 8006e02:	f001 fd1d 	bl	8008840 <pvPortMalloc>
 8006e06:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00e      	beq.n	8006e2c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006e0e:	2058      	movs	r0, #88	@ 0x58
 8006e10:	f001 fd16 	bl	8008840 <pvPortMalloc>
 8006e14:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e22:	e005      	b.n	8006e30 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8006e24:	6978      	ldr	r0, [r7, #20]
 8006e26:	f001 fded 	bl	8008a04 <vPortFree>
 8006e2a:	e001      	b.n	8006e30 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d013      	beq.n	8006e5e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006e36:	88fa      	ldrh	r2, [r7, #6]
 8006e38:	2300      	movs	r3, #0
 8006e3a:	9303      	str	r3, [sp, #12]
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	9302      	str	r3, [sp, #8]
 8006e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e42:	9301      	str	r3, [sp, #4]
 8006e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	68b9      	ldr	r1, [r7, #8]
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f000 f80e 	bl	8006e6e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006e52:	69f8      	ldr	r0, [r7, #28]
 8006e54:	f000 f8a2 	bl	8006f9c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	61bb      	str	r3, [r7, #24]
 8006e5c:	e002      	b.n	8006e64 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e62:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8006e64:	69bb      	ldr	r3, [r7, #24]
    }
 8006e66:	4618      	mov	r0, r3
 8006e68:	3720      	adds	r7, #32
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b088      	sub	sp, #32
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	60f8      	str	r0, [r7, #12]
 8006e76:	60b9      	str	r1, [r7, #8]
 8006e78:	607a      	str	r2, [r7, #4]
 8006e7a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	461a      	mov	r2, r3
 8006e86:	21a5      	movs	r1, #165	@ 0xa5
 8006e88:	f002 fd5e 	bl	8009948 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e96:	3b01      	subs	r3, #1
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4413      	add	r3, r2
 8006e9c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	f023 0307 	bic.w	r3, r3, #7
 8006ea4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	f003 0307 	and.w	r3, r3, #7
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00b      	beq.n	8006ec8 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8006eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	617b      	str	r3, [r7, #20]
    }
 8006ec2:	bf00      	nop
 8006ec4:	bf00      	nop
 8006ec6:	e7fd      	b.n	8006ec4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d01f      	beq.n	8006f0e <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ece:	2300      	movs	r3, #0
 8006ed0:	61fb      	str	r3, [r7, #28]
 8006ed2:	e012      	b.n	8006efa <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	4413      	add	r3, r2
 8006eda:	7819      	ldrb	r1, [r3, #0]
 8006edc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	3334      	adds	r3, #52	@ 0x34
 8006ee4:	460a      	mov	r2, r1
 8006ee6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	4413      	add	r3, r2
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d006      	beq.n	8006f02 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	61fb      	str	r3, [r7, #28]
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	2b09      	cmp	r3, #9
 8006efe:	d9e9      	bls.n	8006ed4 <prvInitialiseNewTask+0x66>
 8006f00:	e000      	b.n	8006f04 <prvInitialiseNewTask+0x96>
            {
                break;
 8006f02:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006f0c:	e003      	b.n	8006f16 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f18:	2b04      	cmp	r3, #4
 8006f1a:	d901      	bls.n	8006f20 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006f1c:	2304      	movs	r3, #4
 8006f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f24:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8006f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f2a:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2e:	2200      	movs	r2, #0
 8006f30:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f34:	3304      	adds	r3, #4
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7ff f87a 	bl	8006030 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3e:	3318      	adds	r3, #24
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7ff f875 	bl	8006030 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f4a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4e:	f1c3 0205 	rsb	r2, r3, #5
 8006f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f54:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f5a:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5e:	3350      	adds	r3, #80	@ 0x50
 8006f60:	2204      	movs	r2, #4
 8006f62:	2100      	movs	r1, #0
 8006f64:	4618      	mov	r0, r3
 8006f66:	f002 fcef 	bl	8009948 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6c:	3354      	adds	r3, #84	@ 0x54
 8006f6e:	2201      	movs	r2, #1
 8006f70:	2100      	movs	r1, #0
 8006f72:	4618      	mov	r0, r3
 8006f74:	f002 fce8 	bl	8009948 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f78:	683a      	ldr	r2, [r7, #0]
 8006f7a:	68f9      	ldr	r1, [r7, #12]
 8006f7c:	69b8      	ldr	r0, [r7, #24]
 8006f7e:	f001 f9ff 	bl	8008380 <pxPortInitialiseStack>
 8006f82:	4602      	mov	r2, r0
 8006f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f86:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d002      	beq.n	8006f94 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f92:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006f94:	bf00      	nop
 8006f96:	3720      	adds	r7, #32
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006fa4:	f001 fb22 	bl	80085ec <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006fa8:	4b2c      	ldr	r3, [pc, #176]	@ (800705c <prvAddNewTaskToReadyList+0xc0>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3301      	adds	r3, #1
 8006fae:	4a2b      	ldr	r2, [pc, #172]	@ (800705c <prvAddNewTaskToReadyList+0xc0>)
 8006fb0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8006fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8007060 <prvAddNewTaskToReadyList+0xc4>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d109      	bne.n	8006fce <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8006fba:	4a29      	ldr	r2, [pc, #164]	@ (8007060 <prvAddNewTaskToReadyList+0xc4>)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006fc0:	4b26      	ldr	r3, [pc, #152]	@ (800705c <prvAddNewTaskToReadyList+0xc0>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d110      	bne.n	8006fea <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006fc8:	f000 fc08 	bl	80077dc <prvInitialiseTaskLists>
 8006fcc:	e00d      	b.n	8006fea <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8006fce:	4b25      	ldr	r3, [pc, #148]	@ (8007064 <prvAddNewTaskToReadyList+0xc8>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d109      	bne.n	8006fea <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006fd6:	4b22      	ldr	r3, [pc, #136]	@ (8007060 <prvAddNewTaskToReadyList+0xc4>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d802      	bhi.n	8006fea <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006fe4:	4a1e      	ldr	r2, [pc, #120]	@ (8007060 <prvAddNewTaskToReadyList+0xc4>)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006fea:	4b1f      	ldr	r3, [pc, #124]	@ (8007068 <prvAddNewTaskToReadyList+0xcc>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8007068 <prvAddNewTaskToReadyList+0xcc>)
 8006ff2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8007068 <prvAddNewTaskToReadyList+0xcc>)
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007000:	2201      	movs	r2, #1
 8007002:	409a      	lsls	r2, r3
 8007004:	4b19      	ldr	r3, [pc, #100]	@ (800706c <prvAddNewTaskToReadyList+0xd0>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4313      	orrs	r3, r2
 800700a:	4a18      	ldr	r2, [pc, #96]	@ (800706c <prvAddNewTaskToReadyList+0xd0>)
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007012:	4613      	mov	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4a15      	ldr	r2, [pc, #84]	@ (8007070 <prvAddNewTaskToReadyList+0xd4>)
 800701c:	441a      	add	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	3304      	adds	r3, #4
 8007022:	4619      	mov	r1, r3
 8007024:	4610      	mov	r0, r2
 8007026:	f7ff f810 	bl	800604a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800702a:	f001 fb11 	bl	8008650 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800702e:	4b0d      	ldr	r3, [pc, #52]	@ (8007064 <prvAddNewTaskToReadyList+0xc8>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00e      	beq.n	8007054 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007036:	4b0a      	ldr	r3, [pc, #40]	@ (8007060 <prvAddNewTaskToReadyList+0xc4>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007040:	429a      	cmp	r2, r3
 8007042:	d207      	bcs.n	8007054 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8007044:	4b0b      	ldr	r3, [pc, #44]	@ (8007074 <prvAddNewTaskToReadyList+0xd8>)
 8007046:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800704a:	601a      	str	r2, [r3, #0]
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007054:	bf00      	nop
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	20000544 	.word	0x20000544
 8007060:	2000046c 	.word	0x2000046c
 8007064:	20000550 	.word	0x20000550
 8007068:	20000560 	.word	0x20000560
 800706c:	2000054c 	.word	0x2000054c
 8007070:	20000470 	.word	0x20000470
 8007074:	e000ed04 	.word	0xe000ed04

08007078 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8007080:	2300      	movs	r3, #0
 8007082:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d018      	beq.n	80070bc <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800708a:	4b14      	ldr	r3, [pc, #80]	@ (80070dc <vTaskDelay+0x64>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00b      	beq.n	80070aa <vTaskDelay+0x32>
        __asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	60bb      	str	r3, [r7, #8]
    }
 80070a4:	bf00      	nop
 80070a6:	bf00      	nop
 80070a8:	e7fd      	b.n	80070a6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80070aa:	f000 f86d 	bl	8007188 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80070ae:	2100      	movs	r1, #0
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fde1 	bl	8007c78 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80070b6:	f000 f875 	bl	80071a4 <xTaskResumeAll>
 80070ba:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d107      	bne.n	80070d2 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 80070c2:	4b07      	ldr	r3, [pc, #28]	@ (80070e0 <vTaskDelay+0x68>)
 80070c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80070d2:	bf00      	nop
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	2000056c 	.word	0x2000056c
 80070e0:	e000ed04 	.word	0xe000ed04

080070e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80070ea:	4b20      	ldr	r3, [pc, #128]	@ (800716c <vTaskStartScheduler+0x88>)
 80070ec:	9301      	str	r3, [sp, #4]
 80070ee:	2300      	movs	r3, #0
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	2300      	movs	r3, #0
 80070f4:	2282      	movs	r2, #130	@ 0x82
 80070f6:	491e      	ldr	r1, [pc, #120]	@ (8007170 <vTaskStartScheduler+0x8c>)
 80070f8:	481e      	ldr	r0, [pc, #120]	@ (8007174 <vTaskStartScheduler+0x90>)
 80070fa:	f7ff fe77 	bl	8006dec <xTaskCreate>
 80070fe:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d102      	bne.n	800710c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8007106:	f000 fe1d 	bl	8007d44 <xTimerCreateTimerTask>
 800710a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d116      	bne.n	8007140 <vTaskStartScheduler+0x5c>
        __asm volatile
 8007112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	60bb      	str	r3, [r7, #8]
    }
 8007124:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8007126:	4b14      	ldr	r3, [pc, #80]	@ (8007178 <vTaskStartScheduler+0x94>)
 8007128:	f04f 32ff 	mov.w	r2, #4294967295
 800712c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800712e:	4b13      	ldr	r3, [pc, #76]	@ (800717c <vTaskStartScheduler+0x98>)
 8007130:	2201      	movs	r2, #1
 8007132:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007134:	4b12      	ldr	r3, [pc, #72]	@ (8007180 <vTaskStartScheduler+0x9c>)
 8007136:	2200      	movs	r2, #0
 8007138:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800713a:	f001 f9b3 	bl	80084a4 <xPortStartScheduler>
 800713e:	e00f      	b.n	8007160 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007146:	d10b      	bne.n	8007160 <vTaskStartScheduler+0x7c>
        __asm volatile
 8007148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800714c:	f383 8811 	msr	BASEPRI, r3
 8007150:	f3bf 8f6f 	isb	sy
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	607b      	str	r3, [r7, #4]
    }
 800715a:	bf00      	nop
 800715c:	bf00      	nop
 800715e:	e7fd      	b.n	800715c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8007160:	4b08      	ldr	r3, [pc, #32]	@ (8007184 <vTaskStartScheduler+0xa0>)
 8007162:	681b      	ldr	r3, [r3, #0]
}
 8007164:	bf00      	nop
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	20000568 	.word	0x20000568
 8007170:	0800df68 	.word	0x0800df68
 8007174:	080077ad 	.word	0x080077ad
 8007178:	20000564 	.word	0x20000564
 800717c:	20000550 	.word	0x20000550
 8007180:	20000548 	.word	0x20000548
 8007184:	20000014 	.word	0x20000014

08007188 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007188:	b480      	push	{r7}
 800718a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800718c:	4b04      	ldr	r3, [pc, #16]	@ (80071a0 <vTaskSuspendAll+0x18>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	3301      	adds	r3, #1
 8007192:	4a03      	ldr	r2, [pc, #12]	@ (80071a0 <vTaskSuspendAll+0x18>)
 8007194:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8007196:	bf00      	nop
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	2000056c 	.word	0x2000056c

080071a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80071aa:	2300      	movs	r3, #0
 80071ac:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80071ae:	2300      	movs	r3, #0
 80071b0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80071b2:	4b42      	ldr	r3, [pc, #264]	@ (80072bc <xTaskResumeAll+0x118>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10b      	bne.n	80071d2 <xTaskResumeAll+0x2e>
        __asm volatile
 80071ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	603b      	str	r3, [r7, #0]
    }
 80071cc:	bf00      	nop
 80071ce:	bf00      	nop
 80071d0:	e7fd      	b.n	80071ce <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80071d2:	f001 fa0b 	bl	80085ec <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80071d6:	4b39      	ldr	r3, [pc, #228]	@ (80072bc <xTaskResumeAll+0x118>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3b01      	subs	r3, #1
 80071dc:	4a37      	ldr	r2, [pc, #220]	@ (80072bc <xTaskResumeAll+0x118>)
 80071de:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071e0:	4b36      	ldr	r3, [pc, #216]	@ (80072bc <xTaskResumeAll+0x118>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d161      	bne.n	80072ac <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80071e8:	4b35      	ldr	r3, [pc, #212]	@ (80072c0 <xTaskResumeAll+0x11c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d05d      	beq.n	80072ac <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071f0:	e02e      	b.n	8007250 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071f2:	4b34      	ldr	r3, [pc, #208]	@ (80072c4 <xTaskResumeAll+0x120>)
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3318      	adds	r3, #24
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fe ff80 	bl	8006104 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	3304      	adds	r3, #4
 8007208:	4618      	mov	r0, r3
 800720a:	f7fe ff7b 	bl	8006104 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007212:	2201      	movs	r2, #1
 8007214:	409a      	lsls	r2, r3
 8007216:	4b2c      	ldr	r3, [pc, #176]	@ (80072c8 <xTaskResumeAll+0x124>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4313      	orrs	r3, r2
 800721c:	4a2a      	ldr	r2, [pc, #168]	@ (80072c8 <xTaskResumeAll+0x124>)
 800721e:	6013      	str	r3, [r2, #0]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007224:	4613      	mov	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4a27      	ldr	r2, [pc, #156]	@ (80072cc <xTaskResumeAll+0x128>)
 800722e:	441a      	add	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	3304      	adds	r3, #4
 8007234:	4619      	mov	r1, r3
 8007236:	4610      	mov	r0, r2
 8007238:	f7fe ff07 	bl	800604a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007240:	4b23      	ldr	r3, [pc, #140]	@ (80072d0 <xTaskResumeAll+0x12c>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007246:	429a      	cmp	r2, r3
 8007248:	d302      	bcc.n	8007250 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 800724a:	4b22      	ldr	r3, [pc, #136]	@ (80072d4 <xTaskResumeAll+0x130>)
 800724c:	2201      	movs	r2, #1
 800724e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007250:	4b1c      	ldr	r3, [pc, #112]	@ (80072c4 <xTaskResumeAll+0x120>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1cc      	bne.n	80071f2 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800725e:	f000 fb3b 	bl	80078d8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007262:	4b1d      	ldr	r3, [pc, #116]	@ (80072d8 <xTaskResumeAll+0x134>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d010      	beq.n	8007290 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800726e:	f000 f847 	bl	8007300 <xTaskIncrementTick>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8007278:	4b16      	ldr	r3, [pc, #88]	@ (80072d4 <xTaskResumeAll+0x130>)
 800727a:	2201      	movs	r2, #1
 800727c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	3b01      	subs	r3, #1
 8007282:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1f1      	bne.n	800726e <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 800728a:	4b13      	ldr	r3, [pc, #76]	@ (80072d8 <xTaskResumeAll+0x134>)
 800728c:	2200      	movs	r2, #0
 800728e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8007290:	4b10      	ldr	r3, [pc, #64]	@ (80072d4 <xTaskResumeAll+0x130>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d009      	beq.n	80072ac <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8007298:	2301      	movs	r3, #1
 800729a:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800729c:	4b0f      	ldr	r3, [pc, #60]	@ (80072dc <xTaskResumeAll+0x138>)
 800729e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80072ac:	f001 f9d0 	bl	8008650 <vPortExitCritical>

    return xAlreadyYielded;
 80072b0:	68bb      	ldr	r3, [r7, #8]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	2000056c 	.word	0x2000056c
 80072c0:	20000544 	.word	0x20000544
 80072c4:	20000504 	.word	0x20000504
 80072c8:	2000054c 	.word	0x2000054c
 80072cc:	20000470 	.word	0x20000470
 80072d0:	2000046c 	.word	0x2000046c
 80072d4:	20000558 	.word	0x20000558
 80072d8:	20000554 	.word	0x20000554
 80072dc:	e000ed04 	.word	0xe000ed04

080072e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80072e6:	4b05      	ldr	r3, [pc, #20]	@ (80072fc <xTaskGetTickCount+0x1c>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80072ec:	687b      	ldr	r3, [r7, #4]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	20000548 	.word	0x20000548

08007300 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8007306:	2300      	movs	r3, #0
 8007308:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800730a:	4b4f      	ldr	r3, [pc, #316]	@ (8007448 <xTaskIncrementTick+0x148>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	f040 808f 	bne.w	8007432 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007314:	4b4d      	ldr	r3, [pc, #308]	@ (800744c <xTaskIncrementTick+0x14c>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3301      	adds	r3, #1
 800731a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800731c:	4a4b      	ldr	r2, [pc, #300]	@ (800744c <xTaskIncrementTick+0x14c>)
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d121      	bne.n	800736c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8007328:	4b49      	ldr	r3, [pc, #292]	@ (8007450 <xTaskIncrementTick+0x150>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00b      	beq.n	800734a <xTaskIncrementTick+0x4a>
        __asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	603b      	str	r3, [r7, #0]
    }
 8007344:	bf00      	nop
 8007346:	bf00      	nop
 8007348:	e7fd      	b.n	8007346 <xTaskIncrementTick+0x46>
 800734a:	4b41      	ldr	r3, [pc, #260]	@ (8007450 <xTaskIncrementTick+0x150>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	60fb      	str	r3, [r7, #12]
 8007350:	4b40      	ldr	r3, [pc, #256]	@ (8007454 <xTaskIncrementTick+0x154>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a3e      	ldr	r2, [pc, #248]	@ (8007450 <xTaskIncrementTick+0x150>)
 8007356:	6013      	str	r3, [r2, #0]
 8007358:	4a3e      	ldr	r2, [pc, #248]	@ (8007454 <xTaskIncrementTick+0x154>)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6013      	str	r3, [r2, #0]
 800735e:	4b3e      	ldr	r3, [pc, #248]	@ (8007458 <xTaskIncrementTick+0x158>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3301      	adds	r3, #1
 8007364:	4a3c      	ldr	r2, [pc, #240]	@ (8007458 <xTaskIncrementTick+0x158>)
 8007366:	6013      	str	r3, [r2, #0]
 8007368:	f000 fab6 	bl	80078d8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800736c:	4b3b      	ldr	r3, [pc, #236]	@ (800745c <xTaskIncrementTick+0x15c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	429a      	cmp	r2, r3
 8007374:	d348      	bcc.n	8007408 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007376:	4b36      	ldr	r3, [pc, #216]	@ (8007450 <xTaskIncrementTick+0x150>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d104      	bne.n	800738a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007380:	4b36      	ldr	r3, [pc, #216]	@ (800745c <xTaskIncrementTick+0x15c>)
 8007382:	f04f 32ff 	mov.w	r2, #4294967295
 8007386:	601a      	str	r2, [r3, #0]
                    break;
 8007388:	e03e      	b.n	8007408 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800738a:	4b31      	ldr	r3, [pc, #196]	@ (8007450 <xTaskIncrementTick+0x150>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d203      	bcs.n	80073aa <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80073a2:	4a2e      	ldr	r2, [pc, #184]	@ (800745c <xTaskIncrementTick+0x15c>)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80073a8:	e02e      	b.n	8007408 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	3304      	adds	r3, #4
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7fe fea8 	bl	8006104 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d004      	beq.n	80073c6 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	3318      	adds	r3, #24
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fe fe9f 	bl	8006104 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ca:	2201      	movs	r2, #1
 80073cc:	409a      	lsls	r2, r3
 80073ce:	4b24      	ldr	r3, [pc, #144]	@ (8007460 <xTaskIncrementTick+0x160>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	4a22      	ldr	r2, [pc, #136]	@ (8007460 <xTaskIncrementTick+0x160>)
 80073d6:	6013      	str	r3, [r2, #0]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073dc:	4613      	mov	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4a1f      	ldr	r2, [pc, #124]	@ (8007464 <xTaskIncrementTick+0x164>)
 80073e6:	441a      	add	r2, r3
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	3304      	adds	r3, #4
 80073ec:	4619      	mov	r1, r3
 80073ee:	4610      	mov	r0, r2
 80073f0:	f7fe fe2b 	bl	800604a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007468 <xTaskIncrementTick+0x168>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fe:	429a      	cmp	r2, r3
 8007400:	d3b9      	bcc.n	8007376 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8007402:	2301      	movs	r3, #1
 8007404:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007406:	e7b6      	b.n	8007376 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007408:	4b17      	ldr	r3, [pc, #92]	@ (8007468 <xTaskIncrementTick+0x168>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800740e:	4915      	ldr	r1, [pc, #84]	@ (8007464 <xTaskIncrementTick+0x164>)
 8007410:	4613      	mov	r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	4413      	add	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	440b      	add	r3, r1
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d901      	bls.n	8007424 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8007420:	2301      	movs	r3, #1
 8007422:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8007424:	4b11      	ldr	r3, [pc, #68]	@ (800746c <xTaskIncrementTick+0x16c>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d007      	beq.n	800743c <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 800742c:	2301      	movs	r3, #1
 800742e:	617b      	str	r3, [r7, #20]
 8007430:	e004      	b.n	800743c <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007432:	4b0f      	ldr	r3, [pc, #60]	@ (8007470 <xTaskIncrementTick+0x170>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3301      	adds	r3, #1
 8007438:	4a0d      	ldr	r2, [pc, #52]	@ (8007470 <xTaskIncrementTick+0x170>)
 800743a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800743c:	697b      	ldr	r3, [r7, #20]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	2000056c 	.word	0x2000056c
 800744c:	20000548 	.word	0x20000548
 8007450:	200004fc 	.word	0x200004fc
 8007454:	20000500 	.word	0x20000500
 8007458:	2000055c 	.word	0x2000055c
 800745c:	20000564 	.word	0x20000564
 8007460:	2000054c 	.word	0x2000054c
 8007464:	20000470 	.word	0x20000470
 8007468:	2000046c 	.word	0x2000046c
 800746c:	20000558 	.word	0x20000558
 8007470:	20000554 	.word	0x20000554

08007474 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800747a:	4b27      	ldr	r3, [pc, #156]	@ (8007518 <vTaskSwitchContext+0xa4>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d003      	beq.n	800748a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8007482:	4b26      	ldr	r3, [pc, #152]	@ (800751c <vTaskSwitchContext+0xa8>)
 8007484:	2201      	movs	r2, #1
 8007486:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8007488:	e040      	b.n	800750c <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800748a:	4b24      	ldr	r3, [pc, #144]	@ (800751c <vTaskSwitchContext+0xa8>)
 800748c:	2200      	movs	r2, #0
 800748e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007490:	4b23      	ldr	r3, [pc, #140]	@ (8007520 <vTaskSwitchContext+0xac>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	fab3 f383 	clz	r3, r3
 800749c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800749e:	7afb      	ldrb	r3, [r7, #11]
 80074a0:	f1c3 031f 	rsb	r3, r3, #31
 80074a4:	617b      	str	r3, [r7, #20]
 80074a6:	491f      	ldr	r1, [pc, #124]	@ (8007524 <vTaskSwitchContext+0xb0>)
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	4613      	mov	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4413      	add	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	440b      	add	r3, r1
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10b      	bne.n	80074d2 <vTaskSwitchContext+0x5e>
        __asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	607b      	str	r3, [r7, #4]
    }
 80074cc:	bf00      	nop
 80074ce:	bf00      	nop
 80074d0:	e7fd      	b.n	80074ce <vTaskSwitchContext+0x5a>
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	4613      	mov	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4a11      	ldr	r2, [pc, #68]	@ (8007524 <vTaskSwitchContext+0xb0>)
 80074de:	4413      	add	r3, r2
 80074e0:	613b      	str	r3, [r7, #16]
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	605a      	str	r2, [r3, #4]
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	3308      	adds	r3, #8
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d104      	bne.n	8007502 <vTaskSwitchContext+0x8e>
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	605a      	str	r2, [r3, #4]
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	4a07      	ldr	r2, [pc, #28]	@ (8007528 <vTaskSwitchContext+0xb4>)
 800750a:	6013      	str	r3, [r2, #0]
}
 800750c:	bf00      	nop
 800750e:	371c      	adds	r7, #28
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr
 8007518:	2000056c 	.word	0x2000056c
 800751c:	20000558 	.word	0x20000558
 8007520:	2000054c 	.word	0x2000054c
 8007524:	20000470 	.word	0x20000470
 8007528:	2000046c 	.word	0x2000046c

0800752c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10b      	bne.n	8007554 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	60fb      	str	r3, [r7, #12]
    }
 800754e:	bf00      	nop
 8007550:	bf00      	nop
 8007552:	e7fd      	b.n	8007550 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007554:	4b07      	ldr	r3, [pc, #28]	@ (8007574 <vTaskPlaceOnEventList+0x48>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	3318      	adds	r3, #24
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7fe fd98 	bl	8006092 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007562:	2101      	movs	r1, #1
 8007564:	6838      	ldr	r0, [r7, #0]
 8007566:	f000 fb87 	bl	8007c78 <prvAddCurrentTaskToDelayedList>
}
 800756a:	bf00      	nop
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	2000046c 	.word	0x2000046c

08007578 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10b      	bne.n	80075a2 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800758a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800758e:	f383 8811 	msr	BASEPRI, r3
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	617b      	str	r3, [r7, #20]
    }
 800759c:	bf00      	nop
 800759e:	bf00      	nop
 80075a0:	e7fd      	b.n	800759e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075a2:	4b0a      	ldr	r3, [pc, #40]	@ (80075cc <vTaskPlaceOnEventListRestricted+0x54>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	3318      	adds	r3, #24
 80075a8:	4619      	mov	r1, r3
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f7fe fd4d 	bl	800604a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d002      	beq.n	80075bc <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 80075b6:	f04f 33ff 	mov.w	r3, #4294967295
 80075ba:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	68b8      	ldr	r0, [r7, #8]
 80075c0:	f000 fb5a 	bl	8007c78 <prvAddCurrentTaskToDelayedList>
    }
 80075c4:	bf00      	nop
 80075c6:	3718      	adds	r7, #24
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	2000046c 	.word	0x2000046c

080075d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10b      	bne.n	80075fe <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80075e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ea:	f383 8811 	msr	BASEPRI, r3
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	60fb      	str	r3, [r7, #12]
    }
 80075f8:	bf00      	nop
 80075fa:	bf00      	nop
 80075fc:	e7fd      	b.n	80075fa <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	3318      	adds	r3, #24
 8007602:	4618      	mov	r0, r3
 8007604:	f7fe fd7e 	bl	8006104 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007608:	4b1d      	ldr	r3, [pc, #116]	@ (8007680 <xTaskRemoveFromEventList+0xb0>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d11c      	bne.n	800764a <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	3304      	adds	r3, #4
 8007614:	4618      	mov	r0, r3
 8007616:	f7fe fd75 	bl	8006104 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800761e:	2201      	movs	r2, #1
 8007620:	409a      	lsls	r2, r3
 8007622:	4b18      	ldr	r3, [pc, #96]	@ (8007684 <xTaskRemoveFromEventList+0xb4>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4313      	orrs	r3, r2
 8007628:	4a16      	ldr	r2, [pc, #88]	@ (8007684 <xTaskRemoveFromEventList+0xb4>)
 800762a:	6013      	str	r3, [r2, #0]
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007630:	4613      	mov	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4413      	add	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4a13      	ldr	r2, [pc, #76]	@ (8007688 <xTaskRemoveFromEventList+0xb8>)
 800763a:	441a      	add	r2, r3
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	3304      	adds	r3, #4
 8007640:	4619      	mov	r1, r3
 8007642:	4610      	mov	r0, r2
 8007644:	f7fe fd01 	bl	800604a <vListInsertEnd>
 8007648:	e005      	b.n	8007656 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	3318      	adds	r3, #24
 800764e:	4619      	mov	r1, r3
 8007650:	480e      	ldr	r0, [pc, #56]	@ (800768c <xTaskRemoveFromEventList+0xbc>)
 8007652:	f7fe fcfa 	bl	800604a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800765a:	4b0d      	ldr	r3, [pc, #52]	@ (8007690 <xTaskRemoveFromEventList+0xc0>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007660:	429a      	cmp	r2, r3
 8007662:	d905      	bls.n	8007670 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8007664:	2301      	movs	r3, #1
 8007666:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8007668:	4b0a      	ldr	r3, [pc, #40]	@ (8007694 <xTaskRemoveFromEventList+0xc4>)
 800766a:	2201      	movs	r2, #1
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	e001      	b.n	8007674 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 8007670:	2300      	movs	r3, #0
 8007672:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8007674:	697b      	ldr	r3, [r7, #20]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	2000056c 	.word	0x2000056c
 8007684:	2000054c 	.word	0x2000054c
 8007688:	20000470 	.word	0x20000470
 800768c:	20000504 	.word	0x20000504
 8007690:	2000046c 	.word	0x2000046c
 8007694:	20000558 	.word	0x20000558

08007698 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80076a0:	4b06      	ldr	r3, [pc, #24]	@ (80076bc <vTaskInternalSetTimeOutState+0x24>)
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80076a8:	4b05      	ldr	r3, [pc, #20]	@ (80076c0 <vTaskInternalSetTimeOutState+0x28>)
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	605a      	str	r2, [r3, #4]
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	2000055c 	.word	0x2000055c
 80076c0:	20000548 	.word	0x20000548

080076c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b088      	sub	sp, #32
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10b      	bne.n	80076ec <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80076d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d8:	f383 8811 	msr	BASEPRI, r3
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	613b      	str	r3, [r7, #16]
    }
 80076e6:	bf00      	nop
 80076e8:	bf00      	nop
 80076ea:	e7fd      	b.n	80076e8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10b      	bne.n	800770a <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	60fb      	str	r3, [r7, #12]
    }
 8007704:	bf00      	nop
 8007706:	bf00      	nop
 8007708:	e7fd      	b.n	8007706 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800770a:	f000 ff6f 	bl	80085ec <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800770e:	4b1f      	ldr	r3, [pc, #124]	@ (800778c <xTaskCheckForTimeOut+0xc8>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	69ba      	ldr	r2, [r7, #24]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007726:	d102      	bne.n	800772e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8007728:	2300      	movs	r3, #0
 800772a:	61fb      	str	r3, [r7, #28]
 800772c:	e026      	b.n	800777c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	4b17      	ldr	r3, [pc, #92]	@ (8007790 <xTaskCheckForTimeOut+0xcc>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	429a      	cmp	r2, r3
 8007738:	d00a      	beq.n	8007750 <xTaskCheckForTimeOut+0x8c>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	69ba      	ldr	r2, [r7, #24]
 8007740:	429a      	cmp	r2, r3
 8007742:	d305      	bcc.n	8007750 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8007744:	2301      	movs	r3, #1
 8007746:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	2200      	movs	r2, #0
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	e015      	b.n	800777c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	429a      	cmp	r2, r3
 8007758:	d20b      	bcs.n	8007772 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	1ad2      	subs	r2, r2, r3
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7ff ff96 	bl	8007698 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800776c:	2300      	movs	r3, #0
 800776e:	61fb      	str	r3, [r7, #28]
 8007770:	e004      	b.n	800777c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2200      	movs	r2, #0
 8007776:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8007778:	2301      	movs	r3, #1
 800777a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800777c:	f000 ff68 	bl	8008650 <vPortExitCritical>

    return xReturn;
 8007780:	69fb      	ldr	r3, [r7, #28]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3720      	adds	r7, #32
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	20000548 	.word	0x20000548
 8007790:	2000055c 	.word	0x2000055c

08007794 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007794:	b480      	push	{r7}
 8007796:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8007798:	4b03      	ldr	r3, [pc, #12]	@ (80077a8 <vTaskMissedYield+0x14>)
 800779a:	2201      	movs	r2, #1
 800779c:	601a      	str	r2, [r3, #0]
}
 800779e:	bf00      	nop
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr
 80077a8:	20000558 	.word	0x20000558

080077ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80077b4:	f000 f852 	bl	800785c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80077b8:	4b06      	ldr	r3, [pc, #24]	@ (80077d4 <prvIdleTask+0x28>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d9f9      	bls.n	80077b4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80077c0:	4b05      	ldr	r3, [pc, #20]	@ (80077d8 <prvIdleTask+0x2c>)
 80077c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077c6:	601a      	str	r2, [r3, #0]
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80077d0:	e7f0      	b.n	80077b4 <prvIdleTask+0x8>
 80077d2:	bf00      	nop
 80077d4:	20000470 	.word	0x20000470
 80077d8:	e000ed04 	.word	0xe000ed04

080077dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077e2:	2300      	movs	r3, #0
 80077e4:	607b      	str	r3, [r7, #4]
 80077e6:	e00c      	b.n	8007802 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	4613      	mov	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4a12      	ldr	r2, [pc, #72]	@ (800783c <prvInitialiseTaskLists+0x60>)
 80077f4:	4413      	add	r3, r2
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fe fbfa 	bl	8005ff0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	3301      	adds	r3, #1
 8007800:	607b      	str	r3, [r7, #4]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b04      	cmp	r3, #4
 8007806:	d9ef      	bls.n	80077e8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8007808:	480d      	ldr	r0, [pc, #52]	@ (8007840 <prvInitialiseTaskLists+0x64>)
 800780a:	f7fe fbf1 	bl	8005ff0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800780e:	480d      	ldr	r0, [pc, #52]	@ (8007844 <prvInitialiseTaskLists+0x68>)
 8007810:	f7fe fbee 	bl	8005ff0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8007814:	480c      	ldr	r0, [pc, #48]	@ (8007848 <prvInitialiseTaskLists+0x6c>)
 8007816:	f7fe fbeb 	bl	8005ff0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800781a:	480c      	ldr	r0, [pc, #48]	@ (800784c <prvInitialiseTaskLists+0x70>)
 800781c:	f7fe fbe8 	bl	8005ff0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8007820:	480b      	ldr	r0, [pc, #44]	@ (8007850 <prvInitialiseTaskLists+0x74>)
 8007822:	f7fe fbe5 	bl	8005ff0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8007826:	4b0b      	ldr	r3, [pc, #44]	@ (8007854 <prvInitialiseTaskLists+0x78>)
 8007828:	4a05      	ldr	r2, [pc, #20]	@ (8007840 <prvInitialiseTaskLists+0x64>)
 800782a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800782c:	4b0a      	ldr	r3, [pc, #40]	@ (8007858 <prvInitialiseTaskLists+0x7c>)
 800782e:	4a05      	ldr	r2, [pc, #20]	@ (8007844 <prvInitialiseTaskLists+0x68>)
 8007830:	601a      	str	r2, [r3, #0]
}
 8007832:	bf00      	nop
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	20000470 	.word	0x20000470
 8007840:	200004d4 	.word	0x200004d4
 8007844:	200004e8 	.word	0x200004e8
 8007848:	20000504 	.word	0x20000504
 800784c:	20000518 	.word	0x20000518
 8007850:	20000530 	.word	0x20000530
 8007854:	200004fc 	.word	0x200004fc
 8007858:	20000500 	.word	0x20000500

0800785c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007862:	e019      	b.n	8007898 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8007864:	f000 fec2 	bl	80085ec <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007868:	4b10      	ldr	r3, [pc, #64]	@ (80078ac <prvCheckTasksWaitingTermination+0x50>)
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	3304      	adds	r3, #4
 8007874:	4618      	mov	r0, r3
 8007876:	f7fe fc45 	bl	8006104 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800787a:	4b0d      	ldr	r3, [pc, #52]	@ (80078b0 <prvCheckTasksWaitingTermination+0x54>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	3b01      	subs	r3, #1
 8007880:	4a0b      	ldr	r2, [pc, #44]	@ (80078b0 <prvCheckTasksWaitingTermination+0x54>)
 8007882:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8007884:	4b0b      	ldr	r3, [pc, #44]	@ (80078b4 <prvCheckTasksWaitingTermination+0x58>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3b01      	subs	r3, #1
 800788a:	4a0a      	ldr	r2, [pc, #40]	@ (80078b4 <prvCheckTasksWaitingTermination+0x58>)
 800788c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800788e:	f000 fedf 	bl	8008650 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f810 	bl	80078b8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007898:	4b06      	ldr	r3, [pc, #24]	@ (80078b4 <prvCheckTasksWaitingTermination+0x58>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1e1      	bne.n	8007864 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80078a0:	bf00      	nop
 80078a2:	bf00      	nop
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	20000518 	.word	0x20000518
 80078b0:	20000544 	.word	0x20000544
 80078b4:	2000052c 	.word	0x2000052c

080078b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c4:	4618      	mov	r0, r3
 80078c6:	f001 f89d 	bl	8008a04 <vPortFree>
                vPortFree( pxTCB );
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f001 f89a 	bl	8008a04 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80078d0:	bf00      	nop
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80078d8:	b480      	push	{r7}
 80078da:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007908 <prvResetNextTaskUnblockTime+0x30>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d104      	bne.n	80078f0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80078e6:	4b09      	ldr	r3, [pc, #36]	@ (800790c <prvResetNextTaskUnblockTime+0x34>)
 80078e8:	f04f 32ff 	mov.w	r2, #4294967295
 80078ec:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80078ee:	e005      	b.n	80078fc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80078f0:	4b05      	ldr	r3, [pc, #20]	@ (8007908 <prvResetNextTaskUnblockTime+0x30>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a04      	ldr	r2, [pc, #16]	@ (800790c <prvResetNextTaskUnblockTime+0x34>)
 80078fa:	6013      	str	r3, [r2, #0]
}
 80078fc:	bf00      	nop
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	200004fc 	.word	0x200004fc
 800790c:	20000564 	.word	0x20000564

08007910 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8007916:	4b0b      	ldr	r3, [pc, #44]	@ (8007944 <xTaskGetSchedulerState+0x34>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d102      	bne.n	8007924 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800791e:	2301      	movs	r3, #1
 8007920:	607b      	str	r3, [r7, #4]
 8007922:	e008      	b.n	8007936 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007924:	4b08      	ldr	r3, [pc, #32]	@ (8007948 <xTaskGetSchedulerState+0x38>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d102      	bne.n	8007932 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800792c:	2302      	movs	r3, #2
 800792e:	607b      	str	r3, [r7, #4]
 8007930:	e001      	b.n	8007936 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8007932:	2300      	movs	r3, #0
 8007934:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8007936:	687b      	ldr	r3, [r7, #4]
    }
 8007938:	4618      	mov	r0, r3
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr
 8007944:	20000550 	.word	0x20000550
 8007948:	2000056c 	.word	0x2000056c

0800794c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8007958:	2300      	movs	r3, #0
 800795a:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d05e      	beq.n	8007a20 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007966:	4b31      	ldr	r3, [pc, #196]	@ (8007a2c <xTaskPriorityInherit+0xe0>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796c:	429a      	cmp	r2, r3
 800796e:	d24e      	bcs.n	8007a0e <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	2b00      	cmp	r3, #0
 8007976:	db06      	blt.n	8007986 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007978:	4b2c      	ldr	r3, [pc, #176]	@ (8007a2c <xTaskPriorityInherit+0xe0>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800797e:	f1c3 0205 	rsb	r2, r3, #5
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	6959      	ldr	r1, [r3, #20]
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800798e:	4613      	mov	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4a26      	ldr	r2, [pc, #152]	@ (8007a30 <xTaskPriorityInherit+0xe4>)
 8007998:	4413      	add	r3, r2
 800799a:	4299      	cmp	r1, r3
 800799c:	d12f      	bne.n	80079fe <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	3304      	adds	r3, #4
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fe fbae 	bl	8006104 <uxListRemove>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10a      	bne.n	80079c4 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b2:	2201      	movs	r2, #1
 80079b4:	fa02 f303 	lsl.w	r3, r2, r3
 80079b8:	43da      	mvns	r2, r3
 80079ba:	4b1e      	ldr	r3, [pc, #120]	@ (8007a34 <xTaskPriorityInherit+0xe8>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4013      	ands	r3, r2
 80079c0:	4a1c      	ldr	r2, [pc, #112]	@ (8007a34 <xTaskPriorityInherit+0xe8>)
 80079c2:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80079c4:	4b19      	ldr	r3, [pc, #100]	@ (8007a2c <xTaskPriorityInherit+0xe0>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d2:	2201      	movs	r2, #1
 80079d4:	409a      	lsls	r2, r3
 80079d6:	4b17      	ldr	r3, [pc, #92]	@ (8007a34 <xTaskPriorityInherit+0xe8>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4313      	orrs	r3, r2
 80079dc:	4a15      	ldr	r2, [pc, #84]	@ (8007a34 <xTaskPriorityInherit+0xe8>)
 80079de:	6013      	str	r3, [r2, #0]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079e4:	4613      	mov	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4413      	add	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4a10      	ldr	r2, [pc, #64]	@ (8007a30 <xTaskPriorityInherit+0xe4>)
 80079ee:	441a      	add	r2, r3
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	3304      	adds	r3, #4
 80079f4:	4619      	mov	r1, r3
 80079f6:	4610      	mov	r0, r2
 80079f8:	f7fe fb27 	bl	800604a <vListInsertEnd>
 80079fc:	e004      	b.n	8007a08 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80079fe:	4b0b      	ldr	r3, [pc, #44]	@ (8007a2c <xTaskPriorityInherit+0xe0>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	60fb      	str	r3, [r7, #12]
 8007a0c:	e008      	b.n	8007a20 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a12:	4b06      	ldr	r3, [pc, #24]	@ (8007a2c <xTaskPriorityInherit+0xe0>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d201      	bcs.n	8007a20 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007a20:	68fb      	ldr	r3, [r7, #12]
    }
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	2000046c 	.word	0x2000046c
 8007a30:	20000470 	.word	0x20000470
 8007a34:	2000054c 	.word	0x2000054c

08007a38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8007a44:	2300      	movs	r3, #0
 8007a46:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d065      	beq.n	8007b1a <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007a4e:	4b35      	ldr	r3, [pc, #212]	@ (8007b24 <xTaskPriorityDisinherit+0xec>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d00b      	beq.n	8007a70 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8007a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5c:	f383 8811 	msr	BASEPRI, r3
 8007a60:	f3bf 8f6f 	isb	sy
 8007a64:	f3bf 8f4f 	dsb	sy
 8007a68:	60fb      	str	r3, [r7, #12]
    }
 8007a6a:	bf00      	nop
 8007a6c:	bf00      	nop
 8007a6e:	e7fd      	b.n	8007a6c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10b      	bne.n	8007a90 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8007a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a7c:	f383 8811 	msr	BASEPRI, r3
 8007a80:	f3bf 8f6f 	isb	sy
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	60bb      	str	r3, [r7, #8]
    }
 8007a8a:	bf00      	nop
 8007a8c:	bf00      	nop
 8007a8e:	e7fd      	b.n	8007a8c <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a94:	1e5a      	subs	r2, r3, #1
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d039      	beq.n	8007b1a <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d135      	bne.n	8007b1a <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7fe fb26 	bl	8006104 <uxListRemove>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10a      	bne.n	8007ad4 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac8:	43da      	mvns	r2, r3
 8007aca:	4b17      	ldr	r3, [pc, #92]	@ (8007b28 <xTaskPriorityDisinherit+0xf0>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4013      	ands	r3, r2
 8007ad0:	4a15      	ldr	r2, [pc, #84]	@ (8007b28 <xTaskPriorityDisinherit+0xf0>)
 8007ad2:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae0:	f1c3 0205 	rsb	r2, r3, #5
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aec:	2201      	movs	r2, #1
 8007aee:	409a      	lsls	r2, r3
 8007af0:	4b0d      	ldr	r3, [pc, #52]	@ (8007b28 <xTaskPriorityDisinherit+0xf0>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	4a0c      	ldr	r2, [pc, #48]	@ (8007b28 <xTaskPriorityDisinherit+0xf0>)
 8007af8:	6013      	str	r3, [r2, #0]
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007afe:	4613      	mov	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4a09      	ldr	r2, [pc, #36]	@ (8007b2c <xTaskPriorityDisinherit+0xf4>)
 8007b08:	441a      	add	r2, r3
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	4619      	mov	r1, r3
 8007b10:	4610      	mov	r0, r2
 8007b12:	f7fe fa9a 	bl	800604a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8007b16:	2301      	movs	r3, #1
 8007b18:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007b1a:	697b      	ldr	r3, [r7, #20]
    }
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3718      	adds	r7, #24
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	2000046c 	.word	0x2000046c
 8007b28:	2000054c 	.word	0x2000054c
 8007b2c:	20000470 	.word	0x20000470

08007b30 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b088      	sub	sp, #32
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d079      	beq.n	8007c3c <vTaskPriorityDisinheritAfterTimeout+0x10c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10b      	bne.n	8007b68 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8007b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	60fb      	str	r3, [r7, #12]
    }
 8007b62:	bf00      	nop
 8007b64:	bf00      	nop
 8007b66:	e7fd      	b.n	8007b64 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b6c:	683a      	ldr	r2, [r7, #0]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d902      	bls.n	8007b78 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	61fb      	str	r3, [r7, #28]
 8007b76:	e002      	b.n	8007b7e <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b7c:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b82:	69fa      	ldr	r2, [r7, #28]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d059      	beq.n	8007c3c <vTaskPriorityDisinheritAfterTimeout+0x10c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d154      	bne.n	8007c3c <vTaskPriorityDisinheritAfterTimeout+0x10c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8007b92:	4b2c      	ldr	r3, [pc, #176]	@ (8007c44 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	69ba      	ldr	r2, [r7, #24]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d10b      	bne.n	8007bb4 <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 8007b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba0:	f383 8811 	msr	BASEPRI, r3
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	f3bf 8f4f 	dsb	sy
 8007bac:	60bb      	str	r3, [r7, #8]
    }
 8007bae:	bf00      	nop
 8007bb0:	bf00      	nop
 8007bb2:	e7fd      	b.n	8007bb0 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb8:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	69fa      	ldr	r2, [r7, #28]
 8007bbe:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	db04      	blt.n	8007bd2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	f1c3 0205 	rsb	r2, r3, #5
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	6959      	ldr	r1, [r3, #20]
 8007bd6:	693a      	ldr	r2, [r7, #16]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4a19      	ldr	r2, [pc, #100]	@ (8007c48 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007be2:	4413      	add	r3, r2
 8007be4:	4299      	cmp	r1, r3
 8007be6:	d129      	bne.n	8007c3c <vTaskPriorityDisinheritAfterTimeout+0x10c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	3304      	adds	r3, #4
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7fe fa89 	bl	8006104 <uxListRemove>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d10a      	bne.n	8007c0e <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007c02:	43da      	mvns	r2, r3
 8007c04:	4b11      	ldr	r3, [pc, #68]	@ (8007c4c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4013      	ands	r3, r2
 8007c0a:	4a10      	ldr	r2, [pc, #64]	@ (8007c4c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007c0c:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c12:	2201      	movs	r2, #1
 8007c14:	409a      	lsls	r2, r3
 8007c16:	4b0d      	ldr	r3, [pc, #52]	@ (8007c4c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8007c4c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007c1e:	6013      	str	r3, [r2, #0]
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c24:	4613      	mov	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4413      	add	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4a06      	ldr	r2, [pc, #24]	@ (8007c48 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007c2e:	441a      	add	r2, r3
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	3304      	adds	r3, #4
 8007c34:	4619      	mov	r1, r3
 8007c36:	4610      	mov	r0, r2
 8007c38:	f7fe fa07 	bl	800604a <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8007c3c:	bf00      	nop
 8007c3e:	3720      	adds	r7, #32
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	2000046c 	.word	0x2000046c
 8007c48:	20000470 	.word	0x20000470
 8007c4c:	2000054c 	.word	0x2000054c

08007c50 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8007c50:	b480      	push	{r7}
 8007c52:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8007c54:	4b07      	ldr	r3, [pc, #28]	@ (8007c74 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d004      	beq.n	8007c66 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8007c5c:	4b05      	ldr	r3, [pc, #20]	@ (8007c74 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c62:	3201      	adds	r2, #1
 8007c64:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 8007c66:	4b03      	ldr	r3, [pc, #12]	@ (8007c74 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c68:	681b      	ldr	r3, [r3, #0]
    }
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr
 8007c74:	2000046c 	.word	0x2000046c

08007c78 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007c82:	4b29      	ldr	r3, [pc, #164]	@ (8007d28 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c88:	4b28      	ldr	r3, [pc, #160]	@ (8007d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3304      	adds	r3, #4
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fe fa38 	bl	8006104 <uxListRemove>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10b      	bne.n	8007cb2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007c9a:	4b24      	ldr	r3, [pc, #144]	@ (8007d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca6:	43da      	mvns	r2, r3
 8007ca8:	4b21      	ldr	r3, [pc, #132]	@ (8007d30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4013      	ands	r3, r2
 8007cae:	4a20      	ldr	r2, [pc, #128]	@ (8007d30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007cb0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb8:	d10a      	bne.n	8007cd0 <prvAddCurrentTaskToDelayedList+0x58>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d007      	beq.n	8007cd0 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8007d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	481a      	ldr	r0, [pc, #104]	@ (8007d34 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007cca:	f7fe f9be 	bl	800604a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007cce:	e026      	b.n	8007d1e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cd8:	4b14      	ldr	r3, [pc, #80]	@ (8007d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d209      	bcs.n	8007cfc <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ce8:	4b13      	ldr	r3, [pc, #76]	@ (8007d38 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	4b0f      	ldr	r3, [pc, #60]	@ (8007d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	f7fe f9cc 	bl	8006092 <vListInsert>
}
 8007cfa:	e010      	b.n	8007d1e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8007d3c <prvAddCurrentTaskToDelayedList+0xc4>)
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	4b0a      	ldr	r3, [pc, #40]	@ (8007d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3304      	adds	r3, #4
 8007d06:	4619      	mov	r1, r3
 8007d08:	4610      	mov	r0, r2
 8007d0a:	f7fe f9c2 	bl	8006092 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8007d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8007d40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d202      	bcs.n	8007d1e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8007d18:	4a09      	ldr	r2, [pc, #36]	@ (8007d40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	6013      	str	r3, [r2, #0]
}
 8007d1e:	bf00      	nop
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20000548 	.word	0x20000548
 8007d2c:	2000046c 	.word	0x2000046c
 8007d30:	2000054c 	.word	0x2000054c
 8007d34:	20000530 	.word	0x20000530
 8007d38:	20000500 	.word	0x20000500
 8007d3c:	200004fc 	.word	0x200004fc
 8007d40:	20000564 	.word	0x20000564

08007d44 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8007d4e:	f000 fae1 	bl	8008314 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007d52:	4b12      	ldr	r3, [pc, #72]	@ (8007d9c <xTimerCreateTimerTask+0x58>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00b      	beq.n	8007d72 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8007d5a:	4b11      	ldr	r3, [pc, #68]	@ (8007da0 <xTimerCreateTimerTask+0x5c>)
 8007d5c:	9301      	str	r3, [sp, #4]
 8007d5e:	2302      	movs	r3, #2
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	2300      	movs	r3, #0
 8007d64:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007d68:	490e      	ldr	r1, [pc, #56]	@ (8007da4 <xTimerCreateTimerTask+0x60>)
 8007d6a:	480f      	ldr	r0, [pc, #60]	@ (8007da8 <xTimerCreateTimerTask+0x64>)
 8007d6c:	f7ff f83e 	bl	8006dec <xTaskCreate>
 8007d70:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10b      	bne.n	8007d90 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8007d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d7c:	f383 8811 	msr	BASEPRI, r3
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	603b      	str	r3, [r7, #0]
    }
 8007d8a:	bf00      	nop
 8007d8c:	bf00      	nop
 8007d8e:	e7fd      	b.n	8007d8c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8007d90:	687b      	ldr	r3, [r7, #4]
    }
 8007d92:	4618      	mov	r0, r3
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	200005a0 	.word	0x200005a0
 8007da0:	200005a4 	.word	0x200005a4
 8007da4:	0800df70 	.word	0x0800df70
 8007da8:	08007ee5 	.word	0x08007ee5

08007dac <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b08a      	sub	sp, #40	@ 0x28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	607a      	str	r2, [r7, #4]
 8007db8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10b      	bne.n	8007ddc <xTimerGenericCommand+0x30>
        __asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	623b      	str	r3, [r7, #32]
    }
 8007dd6:	bf00      	nop
 8007dd8:	bf00      	nop
 8007dda:	e7fd      	b.n	8007dd8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8007ddc:	4b19      	ldr	r3, [pc, #100]	@ (8007e44 <xTimerGenericCommand+0x98>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d02a      	beq.n	8007e3a <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2b05      	cmp	r3, #5
 8007df4:	dc18      	bgt.n	8007e28 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007df6:	f7ff fd8b 	bl	8007910 <xTaskGetSchedulerState>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d109      	bne.n	8007e14 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e00:	4b10      	ldr	r3, [pc, #64]	@ (8007e44 <xTimerGenericCommand+0x98>)
 8007e02:	6818      	ldr	r0, [r3, #0]
 8007e04:	f107 0114 	add.w	r1, r7, #20
 8007e08:	2300      	movs	r3, #0
 8007e0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e0c:	f7fe fac6 	bl	800639c <xQueueGenericSend>
 8007e10:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e12:	e012      	b.n	8007e3a <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e14:	4b0b      	ldr	r3, [pc, #44]	@ (8007e44 <xTimerGenericCommand+0x98>)
 8007e16:	6818      	ldr	r0, [r3, #0]
 8007e18:	f107 0114 	add.w	r1, r7, #20
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f7fe fabc 	bl	800639c <xQueueGenericSend>
 8007e24:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e26:	e008      	b.n	8007e3a <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e28:	4b06      	ldr	r3, [pc, #24]	@ (8007e44 <xTimerGenericCommand+0x98>)
 8007e2a:	6818      	ldr	r0, [r3, #0]
 8007e2c:	f107 0114 	add.w	r1, r7, #20
 8007e30:	2300      	movs	r3, #0
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	f7fe fbb4 	bl	80065a0 <xQueueGenericSendFromISR>
 8007e38:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3728      	adds	r7, #40	@ 0x28
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	200005a0 	.word	0x200005a0

08007e48 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b088      	sub	sp, #32
 8007e4c:	af02      	add	r7, sp, #8
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e52:	4b23      	ldr	r3, [pc, #140]	@ (8007ee0 <prvProcessExpiredTimer+0x98>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	3304      	adds	r3, #4
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7fe f94f 	bl	8006104 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e6c:	f003 0304 	and.w	r3, r3, #4
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d023      	beq.n	8007ebc <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	699a      	ldr	r2, [r3, #24]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	18d1      	adds	r1, r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	683a      	ldr	r2, [r7, #0]
 8007e80:	6978      	ldr	r0, [r7, #20]
 8007e82:	f000 f8d5 	bl	8008030 <prvInsertTimerInActiveList>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d020      	beq.n	8007ece <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	2300      	movs	r3, #0
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	2100      	movs	r1, #0
 8007e96:	6978      	ldr	r0, [r7, #20]
 8007e98:	f7ff ff88 	bl	8007dac <xTimerGenericCommand>
 8007e9c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d114      	bne.n	8007ece <prvProcessExpiredTimer+0x86>
        __asm volatile
 8007ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea8:	f383 8811 	msr	BASEPRI, r3
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	60fb      	str	r3, [r7, #12]
    }
 8007eb6:	bf00      	nop
 8007eb8:	bf00      	nop
 8007eba:	e7fd      	b.n	8007eb8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ec2:	f023 0301 	bic.w	r3, r3, #1
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	6978      	ldr	r0, [r7, #20]
 8007ed4:	4798      	blx	r3
    }
 8007ed6:	bf00      	nop
 8007ed8:	3718      	adds	r7, #24
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	20000598 	.word	0x20000598

08007ee4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007eec:	f107 0308 	add.w	r3, r7, #8
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f000 f859 	bl	8007fa8 <prvGetNextExpireTime>
 8007ef6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	4619      	mov	r1, r3
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f000 f805 	bl	8007f0c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007f02:	f000 f8d7 	bl	80080b4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f06:	bf00      	nop
 8007f08:	e7f0      	b.n	8007eec <prvTimerTask+0x8>
	...

08007f0c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007f16:	f7ff f937 	bl	8007188 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f1a:	f107 0308 	add.w	r3, r7, #8
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 f866 	bl	8007ff0 <prvSampleTimeNow>
 8007f24:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d130      	bne.n	8007f8e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10a      	bne.n	8007f48 <prvProcessTimerOrBlockTask+0x3c>
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d806      	bhi.n	8007f48 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007f3a:	f7ff f933 	bl	80071a4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f3e:	68f9      	ldr	r1, [r7, #12]
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7ff ff81 	bl	8007e48 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007f46:	e024      	b.n	8007f92 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d008      	beq.n	8007f60 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f4e:	4b13      	ldr	r3, [pc, #76]	@ (8007f9c <prvProcessTimerOrBlockTask+0x90>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d101      	bne.n	8007f5c <prvProcessTimerOrBlockTask+0x50>
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e000      	b.n	8007f5e <prvProcessTimerOrBlockTask+0x52>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007f60:	4b0f      	ldr	r3, [pc, #60]	@ (8007fa0 <prvProcessTimerOrBlockTask+0x94>)
 8007f62:	6818      	ldr	r0, [r3, #0]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	f7fe ff09 	bl	8006d84 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007f72:	f7ff f917 	bl	80071a4 <xTaskResumeAll>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10a      	bne.n	8007f92 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007f7c:	4b09      	ldr	r3, [pc, #36]	@ (8007fa4 <prvProcessTimerOrBlockTask+0x98>)
 8007f7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	f3bf 8f6f 	isb	sy
    }
 8007f8c:	e001      	b.n	8007f92 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007f8e:	f7ff f909 	bl	80071a4 <xTaskResumeAll>
    }
 8007f92:	bf00      	nop
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	2000059c 	.word	0x2000059c
 8007fa0:	200005a0 	.word	0x200005a0
 8007fa4:	e000ed04 	.word	0xe000ed04

08007fa8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8007fec <prvGetNextExpireTime+0x44>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <prvGetNextExpireTime+0x16>
 8007fba:	2201      	movs	r2, #1
 8007fbc:	e000      	b.n	8007fc0 <prvGetNextExpireTime+0x18>
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d105      	bne.n	8007fd8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fcc:	4b07      	ldr	r3, [pc, #28]	@ (8007fec <prvGetNextExpireTime+0x44>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	60fb      	str	r3, [r7, #12]
 8007fd6:	e001      	b.n	8007fdc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
    }
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3714      	adds	r7, #20
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	20000598 	.word	0x20000598

08007ff0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007ff8:	f7ff f972 	bl	80072e0 <xTaskGetTickCount>
 8007ffc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800802c <prvSampleTimeNow+0x3c>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	429a      	cmp	r2, r3
 8008006:	d205      	bcs.n	8008014 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8008008:	f000 f91e 	bl	8008248 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	e002      	b.n	800801a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800801a:	4a04      	ldr	r2, [pc, #16]	@ (800802c <prvSampleTimeNow+0x3c>)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8008020:	68fb      	ldr	r3, [r7, #12]
    }
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	200005a8 	.word	0x200005a8

08008030 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
 800803c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800803e:	2300      	movs	r3, #0
 8008040:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	429a      	cmp	r2, r3
 8008054:	d812      	bhi.n	800807c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	1ad2      	subs	r2, r2, r3
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	429a      	cmp	r2, r3
 8008062:	d302      	bcc.n	800806a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8008064:	2301      	movs	r3, #1
 8008066:	617b      	str	r3, [r7, #20]
 8008068:	e01b      	b.n	80080a2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800806a:	4b10      	ldr	r3, [pc, #64]	@ (80080ac <prvInsertTimerInActiveList+0x7c>)
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	3304      	adds	r3, #4
 8008072:	4619      	mov	r1, r3
 8008074:	4610      	mov	r0, r2
 8008076:	f7fe f80c 	bl	8006092 <vListInsert>
 800807a:	e012      	b.n	80080a2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	429a      	cmp	r2, r3
 8008082:	d206      	bcs.n	8008092 <prvInsertTimerInActiveList+0x62>
 8008084:	68ba      	ldr	r2, [r7, #8]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	429a      	cmp	r2, r3
 800808a:	d302      	bcc.n	8008092 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800808c:	2301      	movs	r3, #1
 800808e:	617b      	str	r3, [r7, #20]
 8008090:	e007      	b.n	80080a2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008092:	4b07      	ldr	r3, [pc, #28]	@ (80080b0 <prvInsertTimerInActiveList+0x80>)
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	3304      	adds	r3, #4
 800809a:	4619      	mov	r1, r3
 800809c:	4610      	mov	r0, r2
 800809e:	f7fd fff8 	bl	8006092 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80080a2:	697b      	ldr	r3, [r7, #20]
    }
 80080a4:	4618      	mov	r0, r3
 80080a6:	3718      	adds	r7, #24
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	2000059c 	.word	0x2000059c
 80080b0:	20000598 	.word	0x20000598

080080b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b08c      	sub	sp, #48	@ 0x30
 80080b8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080ba:	e0b2      	b.n	8008222 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f2c0 80af 	blt.w	8008222 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80080c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ca:	695b      	ldr	r3, [r3, #20]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d004      	beq.n	80080da <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d2:	3304      	adds	r3, #4
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7fe f815 	bl	8006104 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080da:	1d3b      	adds	r3, r7, #4
 80080dc:	4618      	mov	r0, r3
 80080de:	f7ff ff87 	bl	8007ff0 <prvSampleTimeNow>
 80080e2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2b09      	cmp	r3, #9
 80080e8:	f200 8098 	bhi.w	800821c <prvProcessReceivedCommands+0x168>
 80080ec:	a201      	add	r2, pc, #4	@ (adr r2, 80080f4 <prvProcessReceivedCommands+0x40>)
 80080ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f2:	bf00      	nop
 80080f4:	0800811d 	.word	0x0800811d
 80080f8:	0800811d 	.word	0x0800811d
 80080fc:	0800811d 	.word	0x0800811d
 8008100:	08008193 	.word	0x08008193
 8008104:	080081a7 	.word	0x080081a7
 8008108:	080081f3 	.word	0x080081f3
 800810c:	0800811d 	.word	0x0800811d
 8008110:	0800811d 	.word	0x0800811d
 8008114:	08008193 	.word	0x08008193
 8008118:	080081a7 	.word	0x080081a7
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800811c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008122:	f043 0301 	orr.w	r3, r3, #1
 8008126:	b2da      	uxtb	r2, r3
 8008128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	18d1      	adds	r1, r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6a3a      	ldr	r2, [r7, #32]
 800813a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800813c:	f7ff ff78 	bl	8008030 <prvInsertTimerInActiveList>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d06c      	beq.n	8008220 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800814c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800814e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008150:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008154:	f003 0304 	and.w	r3, r3, #4
 8008158:	2b00      	cmp	r3, #0
 800815a:	d061      	beq.n	8008220 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	441a      	add	r2, r3
 8008164:	2300      	movs	r3, #0
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	2300      	movs	r3, #0
 800816a:	2100      	movs	r1, #0
 800816c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800816e:	f7ff fe1d 	bl	8007dac <xTimerGenericCommand>
 8008172:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d152      	bne.n	8008220 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 800817a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800817e:	f383 8811 	msr	BASEPRI, r3
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	f3bf 8f4f 	dsb	sy
 800818a:	61bb      	str	r3, [r7, #24]
    }
 800818c:	bf00      	nop
 800818e:	bf00      	nop
 8008190:	e7fd      	b.n	800818e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008194:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008198:	f023 0301 	bic.w	r3, r3, #1
 800819c:	b2da      	uxtb	r2, r3
 800819e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80081a4:	e03d      	b.n	8008222 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081ac:	f043 0301 	orr.w	r3, r3, #1
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081bc:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80081be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10b      	bne.n	80081de <prvProcessReceivedCommands+0x12a>
        __asm volatile
 80081c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ca:	f383 8811 	msr	BASEPRI, r3
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	f3bf 8f4f 	dsb	sy
 80081d6:	617b      	str	r3, [r7, #20]
    }
 80081d8:	bf00      	nop
 80081da:	bf00      	nop
 80081dc:	e7fd      	b.n	80081da <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80081de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e0:	699a      	ldr	r2, [r3, #24]
 80081e2:	6a3b      	ldr	r3, [r7, #32]
 80081e4:	18d1      	adds	r1, r2, r3
 80081e6:	6a3b      	ldr	r3, [r7, #32]
 80081e8:	6a3a      	ldr	r2, [r7, #32]
 80081ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80081ec:	f7ff ff20 	bl	8008030 <prvInsertTimerInActiveList>
                        break;
 80081f0:	e017      	b.n	8008222 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80081f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081f8:	f003 0302 	and.w	r3, r3, #2
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d103      	bne.n	8008208 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8008200:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008202:	f000 fbff 	bl	8008a04 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8008206:	e00c      	b.n	8008222 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800820e:	f023 0301 	bic.w	r3, r3, #1
 8008212:	b2da      	uxtb	r2, r3
 8008214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008216:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800821a:	e002      	b.n	8008222 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800821c:	bf00      	nop
 800821e:	e000      	b.n	8008222 <prvProcessReceivedCommands+0x16e>
                        break;
 8008220:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008222:	4b08      	ldr	r3, [pc, #32]	@ (8008244 <prvProcessReceivedCommands+0x190>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f107 0108 	add.w	r1, r7, #8
 800822a:	2200      	movs	r2, #0
 800822c:	4618      	mov	r0, r3
 800822e:	f7fe fa65 	bl	80066fc <xQueueReceive>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	f47f af41 	bne.w	80080bc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800823a:	bf00      	nop
 800823c:	bf00      	nop
 800823e:	3728      	adds	r7, #40	@ 0x28
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	200005a0 	.word	0x200005a0

08008248 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8008248:	b580      	push	{r7, lr}
 800824a:	b088      	sub	sp, #32
 800824c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800824e:	e049      	b.n	80082e4 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008250:	4b2e      	ldr	r3, [pc, #184]	@ (800830c <prvSwitchTimerLists+0xc4>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800825a:	4b2c      	ldr	r3, [pc, #176]	@ (800830c <prvSwitchTimerLists+0xc4>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	3304      	adds	r3, #4
 8008268:	4618      	mov	r0, r3
 800826a:	f7fd ff4b 	bl	8006104 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800827c:	f003 0304 	and.w	r3, r3, #4
 8008280:	2b00      	cmp	r3, #0
 8008282:	d02f      	beq.n	80082e4 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	4413      	add	r3, r2
 800828c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	429a      	cmp	r2, r3
 8008294:	d90e      	bls.n	80082b4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082a2:	4b1a      	ldr	r3, [pc, #104]	@ (800830c <prvSwitchTimerLists+0xc4>)
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	3304      	adds	r3, #4
 80082aa:	4619      	mov	r1, r3
 80082ac:	4610      	mov	r0, r2
 80082ae:	f7fd fef0 	bl	8006092 <vListInsert>
 80082b2:	e017      	b.n	80082e4 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082b4:	2300      	movs	r3, #0
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	2300      	movs	r3, #0
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	2100      	movs	r1, #0
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f7ff fd74 	bl	8007dac <xTimerGenericCommand>
 80082c4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10b      	bne.n	80082e4 <prvSwitchTimerLists+0x9c>
        __asm volatile
 80082cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d0:	f383 8811 	msr	BASEPRI, r3
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	603b      	str	r3, [r7, #0]
    }
 80082de:	bf00      	nop
 80082e0:	bf00      	nop
 80082e2:	e7fd      	b.n	80082e0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082e4:	4b09      	ldr	r3, [pc, #36]	@ (800830c <prvSwitchTimerLists+0xc4>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1b0      	bne.n	8008250 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80082ee:	4b07      	ldr	r3, [pc, #28]	@ (800830c <prvSwitchTimerLists+0xc4>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80082f4:	4b06      	ldr	r3, [pc, #24]	@ (8008310 <prvSwitchTimerLists+0xc8>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a04      	ldr	r2, [pc, #16]	@ (800830c <prvSwitchTimerLists+0xc4>)
 80082fa:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80082fc:	4a04      	ldr	r2, [pc, #16]	@ (8008310 <prvSwitchTimerLists+0xc8>)
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	6013      	str	r3, [r2, #0]
    }
 8008302:	bf00      	nop
 8008304:	3718      	adds	r7, #24
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	20000598 	.word	0x20000598
 8008310:	2000059c 	.word	0x2000059c

08008314 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8008314:	b580      	push	{r7, lr}
 8008316:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8008318:	f000 f968 	bl	80085ec <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800831c:	4b12      	ldr	r3, [pc, #72]	@ (8008368 <prvCheckForValidListAndQueue+0x54>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d11d      	bne.n	8008360 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8008324:	4811      	ldr	r0, [pc, #68]	@ (800836c <prvCheckForValidListAndQueue+0x58>)
 8008326:	f7fd fe63 	bl	8005ff0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800832a:	4811      	ldr	r0, [pc, #68]	@ (8008370 <prvCheckForValidListAndQueue+0x5c>)
 800832c:	f7fd fe60 	bl	8005ff0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8008330:	4b10      	ldr	r3, [pc, #64]	@ (8008374 <prvCheckForValidListAndQueue+0x60>)
 8008332:	4a0e      	ldr	r2, [pc, #56]	@ (800836c <prvCheckForValidListAndQueue+0x58>)
 8008334:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8008336:	4b10      	ldr	r3, [pc, #64]	@ (8008378 <prvCheckForValidListAndQueue+0x64>)
 8008338:	4a0d      	ldr	r2, [pc, #52]	@ (8008370 <prvCheckForValidListAndQueue+0x5c>)
 800833a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800833c:	2200      	movs	r2, #0
 800833e:	210c      	movs	r1, #12
 8008340:	200a      	movs	r0, #10
 8008342:	f7fd ff73 	bl	800622c <xQueueGenericCreate>
 8008346:	4603      	mov	r3, r0
 8008348:	4a07      	ldr	r2, [pc, #28]	@ (8008368 <prvCheckForValidListAndQueue+0x54>)
 800834a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800834c:	4b06      	ldr	r3, [pc, #24]	@ (8008368 <prvCheckForValidListAndQueue+0x54>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d005      	beq.n	8008360 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008354:	4b04      	ldr	r3, [pc, #16]	@ (8008368 <prvCheckForValidListAndQueue+0x54>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4908      	ldr	r1, [pc, #32]	@ (800837c <prvCheckForValidListAndQueue+0x68>)
 800835a:	4618      	mov	r0, r3
 800835c:	f7fe fce8 	bl	8006d30 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008360:	f000 f976 	bl	8008650 <vPortExitCritical>
    }
 8008364:	bf00      	nop
 8008366:	bd80      	pop	{r7, pc}
 8008368:	200005a0 	.word	0x200005a0
 800836c:	20000570 	.word	0x20000570
 8008370:	20000584 	.word	0x20000584
 8008374:	20000598 	.word	0x20000598
 8008378:	2000059c 	.word	0x2000059c
 800837c:	0800df78 	.word	0x0800df78

08008380 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	3b04      	subs	r3, #4
 8008390:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008398:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	3b04      	subs	r3, #4
 800839e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f023 0201 	bic.w	r2, r3, #1
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	3b04      	subs	r3, #4
 80083ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80083b0:	4a0c      	ldr	r2, [pc, #48]	@ (80083e4 <pxPortInitialiseStack+0x64>)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	3b14      	subs	r3, #20
 80083ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	3b04      	subs	r3, #4
 80083c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f06f 0202 	mvn.w	r2, #2
 80083ce:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	3b20      	subs	r3, #32
 80083d4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80083d6:	68fb      	ldr	r3, [r7, #12]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	080083e9 	.word	0x080083e9

080083e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80083f2:	4b13      	ldr	r3, [pc, #76]	@ (8008440 <prvTaskExitError+0x58>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fa:	d00b      	beq.n	8008414 <prvTaskExitError+0x2c>
        __asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	60fb      	str	r3, [r7, #12]
    }
 800840e:	bf00      	nop
 8008410:	bf00      	nop
 8008412:	e7fd      	b.n	8008410 <prvTaskExitError+0x28>
        __asm volatile
 8008414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008418:	f383 8811 	msr	BASEPRI, r3
 800841c:	f3bf 8f6f 	isb	sy
 8008420:	f3bf 8f4f 	dsb	sy
 8008424:	60bb      	str	r3, [r7, #8]
    }
 8008426:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8008428:	bf00      	nop
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d0fc      	beq.n	800842a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8008430:	bf00      	nop
 8008432:	bf00      	nop
 8008434:	3714      	adds	r7, #20
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	20000018 	.word	0x20000018
	...

08008450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008450:	4b07      	ldr	r3, [pc, #28]	@ (8008470 <pxCurrentTCBConst2>)
 8008452:	6819      	ldr	r1, [r3, #0]
 8008454:	6808      	ldr	r0, [r1, #0]
 8008456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845a:	f380 8809 	msr	PSP, r0
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f04f 0000 	mov.w	r0, #0
 8008466:	f380 8811 	msr	BASEPRI, r0
 800846a:	4770      	bx	lr
 800846c:	f3af 8000 	nop.w

08008470 <pxCurrentTCBConst2>:
 8008470:	2000046c 	.word	0x2000046c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop

08008478 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008478:	4808      	ldr	r0, [pc, #32]	@ (800849c <prvPortStartFirstTask+0x24>)
 800847a:	6800      	ldr	r0, [r0, #0]
 800847c:	6800      	ldr	r0, [r0, #0]
 800847e:	f380 8808 	msr	MSP, r0
 8008482:	f04f 0000 	mov.w	r0, #0
 8008486:	f380 8814 	msr	CONTROL, r0
 800848a:	b662      	cpsie	i
 800848c:	b661      	cpsie	f
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	df00      	svc	0
 8008498:	bf00      	nop
 800849a:	0000      	.short	0x0000
 800849c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80084a0:	bf00      	nop
 80084a2:	bf00      	nop

080084a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80084aa:	4b47      	ldr	r3, [pc, #284]	@ (80085c8 <xPortStartScheduler+0x124>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a47      	ldr	r2, [pc, #284]	@ (80085cc <xPortStartScheduler+0x128>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d10b      	bne.n	80084cc <xPortStartScheduler+0x28>
        __asm volatile
 80084b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	613b      	str	r3, [r7, #16]
    }
 80084c6:	bf00      	nop
 80084c8:	bf00      	nop
 80084ca:	e7fd      	b.n	80084c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80084cc:	4b3e      	ldr	r3, [pc, #248]	@ (80085c8 <xPortStartScheduler+0x124>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a3f      	ldr	r2, [pc, #252]	@ (80085d0 <xPortStartScheduler+0x12c>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d10b      	bne.n	80084ee <xPortStartScheduler+0x4a>
        __asm volatile
 80084d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084da:	f383 8811 	msr	BASEPRI, r3
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	60fb      	str	r3, [r7, #12]
    }
 80084e8:	bf00      	nop
 80084ea:	bf00      	nop
 80084ec:	e7fd      	b.n	80084ea <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80084ee:	4b39      	ldr	r3, [pc, #228]	@ (80085d4 <xPortStartScheduler+0x130>)
 80084f0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	22ff      	movs	r2, #255	@ 0xff
 80084fe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	b2db      	uxtb	r3, r3
 8008506:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008508:	78fb      	ldrb	r3, [r7, #3]
 800850a:	b2db      	uxtb	r3, r3
 800850c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008510:	b2da      	uxtb	r2, r3
 8008512:	4b31      	ldr	r3, [pc, #196]	@ (80085d8 <xPortStartScheduler+0x134>)
 8008514:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008516:	4b31      	ldr	r3, [pc, #196]	@ (80085dc <xPortStartScheduler+0x138>)
 8008518:	2207      	movs	r2, #7
 800851a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800851c:	e009      	b.n	8008532 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800851e:	4b2f      	ldr	r3, [pc, #188]	@ (80085dc <xPortStartScheduler+0x138>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3b01      	subs	r3, #1
 8008524:	4a2d      	ldr	r2, [pc, #180]	@ (80085dc <xPortStartScheduler+0x138>)
 8008526:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008528:	78fb      	ldrb	r3, [r7, #3]
 800852a:	b2db      	uxtb	r3, r3
 800852c:	005b      	lsls	r3, r3, #1
 800852e:	b2db      	uxtb	r3, r3
 8008530:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008532:	78fb      	ldrb	r3, [r7, #3]
 8008534:	b2db      	uxtb	r3, r3
 8008536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800853a:	2b80      	cmp	r3, #128	@ 0x80
 800853c:	d0ef      	beq.n	800851e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800853e:	4b27      	ldr	r3, [pc, #156]	@ (80085dc <xPortStartScheduler+0x138>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f1c3 0307 	rsb	r3, r3, #7
 8008546:	2b04      	cmp	r3, #4
 8008548:	d00b      	beq.n	8008562 <xPortStartScheduler+0xbe>
        __asm volatile
 800854a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800854e:	f383 8811 	msr	BASEPRI, r3
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	60bb      	str	r3, [r7, #8]
    }
 800855c:	bf00      	nop
 800855e:	bf00      	nop
 8008560:	e7fd      	b.n	800855e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008562:	4b1e      	ldr	r3, [pc, #120]	@ (80085dc <xPortStartScheduler+0x138>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	021b      	lsls	r3, r3, #8
 8008568:	4a1c      	ldr	r2, [pc, #112]	@ (80085dc <xPortStartScheduler+0x138>)
 800856a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800856c:	4b1b      	ldr	r3, [pc, #108]	@ (80085dc <xPortStartScheduler+0x138>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008574:	4a19      	ldr	r2, [pc, #100]	@ (80085dc <xPortStartScheduler+0x138>)
 8008576:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	b2da      	uxtb	r2, r3
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8008580:	4b17      	ldr	r3, [pc, #92]	@ (80085e0 <xPortStartScheduler+0x13c>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a16      	ldr	r2, [pc, #88]	@ (80085e0 <xPortStartScheduler+0x13c>)
 8008586:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800858a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800858c:	4b14      	ldr	r3, [pc, #80]	@ (80085e0 <xPortStartScheduler+0x13c>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a13      	ldr	r2, [pc, #76]	@ (80085e0 <xPortStartScheduler+0x13c>)
 8008592:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008596:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008598:	f000 f8e0 	bl	800875c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800859c:	4b11      	ldr	r3, [pc, #68]	@ (80085e4 <xPortStartScheduler+0x140>)
 800859e:	2200      	movs	r2, #0
 80085a0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80085a2:	f000 f8ff 	bl	80087a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80085a6:	4b10      	ldr	r3, [pc, #64]	@ (80085e8 <xPortStartScheduler+0x144>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a0f      	ldr	r2, [pc, #60]	@ (80085e8 <xPortStartScheduler+0x144>)
 80085ac:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80085b0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80085b2:	f7ff ff61 	bl	8008478 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80085b6:	f7fe ff5d 	bl	8007474 <vTaskSwitchContext>
    prvTaskExitError();
 80085ba:	f7ff ff15 	bl	80083e8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3718      	adds	r7, #24
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	e000ed00 	.word	0xe000ed00
 80085cc:	410fc271 	.word	0x410fc271
 80085d0:	410fc270 	.word	0x410fc270
 80085d4:	e000e400 	.word	0xe000e400
 80085d8:	200005ac 	.word	0x200005ac
 80085dc:	200005b0 	.word	0x200005b0
 80085e0:	e000ed20 	.word	0xe000ed20
 80085e4:	20000018 	.word	0x20000018
 80085e8:	e000ef34 	.word	0xe000ef34

080085ec <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
        __asm volatile
 80085f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	607b      	str	r3, [r7, #4]
    }
 8008604:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008606:	4b10      	ldr	r3, [pc, #64]	@ (8008648 <vPortEnterCritical+0x5c>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	3301      	adds	r3, #1
 800860c:	4a0e      	ldr	r2, [pc, #56]	@ (8008648 <vPortEnterCritical+0x5c>)
 800860e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008610:	4b0d      	ldr	r3, [pc, #52]	@ (8008648 <vPortEnterCritical+0x5c>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b01      	cmp	r3, #1
 8008616:	d110      	bne.n	800863a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008618:	4b0c      	ldr	r3, [pc, #48]	@ (800864c <vPortEnterCritical+0x60>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00b      	beq.n	800863a <vPortEnterCritical+0x4e>
        __asm volatile
 8008622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008626:	f383 8811 	msr	BASEPRI, r3
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	603b      	str	r3, [r7, #0]
    }
 8008634:	bf00      	nop
 8008636:	bf00      	nop
 8008638:	e7fd      	b.n	8008636 <vPortEnterCritical+0x4a>
    }
}
 800863a:	bf00      	nop
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	20000018 	.word	0x20000018
 800864c:	e000ed04 	.word	0xe000ed04

08008650 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8008656:	4b12      	ldr	r3, [pc, #72]	@ (80086a0 <vPortExitCritical+0x50>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10b      	bne.n	8008676 <vPortExitCritical+0x26>
        __asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008662:	f383 8811 	msr	BASEPRI, r3
 8008666:	f3bf 8f6f 	isb	sy
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	607b      	str	r3, [r7, #4]
    }
 8008670:	bf00      	nop
 8008672:	bf00      	nop
 8008674:	e7fd      	b.n	8008672 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8008676:	4b0a      	ldr	r3, [pc, #40]	@ (80086a0 <vPortExitCritical+0x50>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	3b01      	subs	r3, #1
 800867c:	4a08      	ldr	r2, [pc, #32]	@ (80086a0 <vPortExitCritical+0x50>)
 800867e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008680:	4b07      	ldr	r3, [pc, #28]	@ (80086a0 <vPortExitCritical+0x50>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d105      	bne.n	8008694 <vPortExitCritical+0x44>
 8008688:	2300      	movs	r3, #0
 800868a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	f383 8811 	msr	BASEPRI, r3
    }
 8008692:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr
 80086a0:	20000018 	.word	0x20000018
	...

080086b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80086b0:	f3ef 8009 	mrs	r0, PSP
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	4b15      	ldr	r3, [pc, #84]	@ (8008710 <pxCurrentTCBConst>)
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	f01e 0f10 	tst.w	lr, #16
 80086c0:	bf08      	it	eq
 80086c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80086c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ca:	6010      	str	r0, [r2, #0]
 80086cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80086d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80086d4:	f380 8811 	msr	BASEPRI, r0
 80086d8:	f3bf 8f4f 	dsb	sy
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f7fe fec8 	bl	8007474 <vTaskSwitchContext>
 80086e4:	f04f 0000 	mov.w	r0, #0
 80086e8:	f380 8811 	msr	BASEPRI, r0
 80086ec:	bc09      	pop	{r0, r3}
 80086ee:	6819      	ldr	r1, [r3, #0]
 80086f0:	6808      	ldr	r0, [r1, #0]
 80086f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f6:	f01e 0f10 	tst.w	lr, #16
 80086fa:	bf08      	it	eq
 80086fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008700:	f380 8809 	msr	PSP, r0
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	f3af 8000 	nop.w

08008710 <pxCurrentTCBConst>:
 8008710:	2000046c 	.word	0x2000046c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008714:	bf00      	nop
 8008716:	bf00      	nop

08008718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
        __asm volatile
 800871e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	607b      	str	r3, [r7, #4]
    }
 8008730:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008732:	f7fe fde5 	bl	8007300 <xTaskIncrementTick>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d003      	beq.n	8008744 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800873c:	4b06      	ldr	r3, [pc, #24]	@ (8008758 <SysTick_Handler+0x40>)
 800873e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008742:	601a      	str	r2, [r3, #0]
 8008744:	2300      	movs	r3, #0
 8008746:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	f383 8811 	msr	BASEPRI, r3
    }
 800874e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8008750:	bf00      	nop
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	e000ed04 	.word	0xe000ed04

0800875c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800875c:	b480      	push	{r7}
 800875e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008760:	4b0b      	ldr	r3, [pc, #44]	@ (8008790 <vPortSetupTimerInterrupt+0x34>)
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008766:	4b0b      	ldr	r3, [pc, #44]	@ (8008794 <vPortSetupTimerInterrupt+0x38>)
 8008768:	2200      	movs	r2, #0
 800876a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800876c:	4b0a      	ldr	r3, [pc, #40]	@ (8008798 <vPortSetupTimerInterrupt+0x3c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a0a      	ldr	r2, [pc, #40]	@ (800879c <vPortSetupTimerInterrupt+0x40>)
 8008772:	fba2 2303 	umull	r2, r3, r2, r3
 8008776:	099b      	lsrs	r3, r3, #6
 8008778:	4a09      	ldr	r2, [pc, #36]	@ (80087a0 <vPortSetupTimerInterrupt+0x44>)
 800877a:	3b01      	subs	r3, #1
 800877c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800877e:	4b04      	ldr	r3, [pc, #16]	@ (8008790 <vPortSetupTimerInterrupt+0x34>)
 8008780:	2207      	movs	r2, #7
 8008782:	601a      	str	r2, [r3, #0]
}
 8008784:	bf00      	nop
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	e000e010 	.word	0xe000e010
 8008794:	e000e018 	.word	0xe000e018
 8008798:	20000008 	.word	0x20000008
 800879c:	10624dd3 	.word	0x10624dd3
 80087a0:	e000e014 	.word	0xe000e014

080087a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80087a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80087b4 <vPortEnableVFP+0x10>
 80087a8:	6801      	ldr	r1, [r0, #0]
 80087aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80087ae:	6001      	str	r1, [r0, #0]
 80087b0:	4770      	bx	lr
 80087b2:	0000      	.short	0x0000
 80087b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80087b8:	bf00      	nop
 80087ba:	bf00      	nop

080087bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80087c2:	f3ef 8305 	mrs	r3, IPSR
 80087c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2b0f      	cmp	r3, #15
 80087cc:	d915      	bls.n	80087fa <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80087ce:	4a18      	ldr	r2, [pc, #96]	@ (8008830 <vPortValidateInterruptPriority+0x74>)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	4413      	add	r3, r2
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80087d8:	4b16      	ldr	r3, [pc, #88]	@ (8008834 <vPortValidateInterruptPriority+0x78>)
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	7afa      	ldrb	r2, [r7, #11]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d20b      	bcs.n	80087fa <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	607b      	str	r3, [r7, #4]
    }
 80087f4:	bf00      	nop
 80087f6:	bf00      	nop
 80087f8:	e7fd      	b.n	80087f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80087fa:	4b0f      	ldr	r3, [pc, #60]	@ (8008838 <vPortValidateInterruptPriority+0x7c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008802:	4b0e      	ldr	r3, [pc, #56]	@ (800883c <vPortValidateInterruptPriority+0x80>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	429a      	cmp	r2, r3
 8008808:	d90b      	bls.n	8008822 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800880a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800880e:	f383 8811 	msr	BASEPRI, r3
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	f3bf 8f4f 	dsb	sy
 800881a:	603b      	str	r3, [r7, #0]
    }
 800881c:	bf00      	nop
 800881e:	bf00      	nop
 8008820:	e7fd      	b.n	800881e <vPortValidateInterruptPriority+0x62>
    }
 8008822:	bf00      	nop
 8008824:	3714      	adds	r7, #20
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	e000e3f0 	.word	0xe000e3f0
 8008834:	200005ac 	.word	0x200005ac
 8008838:	e000ed0c 	.word	0xe000ed0c
 800883c:	200005b0 	.word	0x200005b0

08008840 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b08a      	sub	sp, #40	@ 0x28
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8008848:	2300      	movs	r3, #0
 800884a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800884c:	f7fe fc9c 	bl	8007188 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8008850:	4b66      	ldr	r3, [pc, #408]	@ (80089ec <pvPortMalloc+0x1ac>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d101      	bne.n	800885c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008858:	f000 f938 	bl	8008acc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800885c:	4b64      	ldr	r3, [pc, #400]	@ (80089f0 <pvPortMalloc+0x1b0>)
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4013      	ands	r3, r2
 8008864:	2b00      	cmp	r3, #0
 8008866:	f040 80a9 	bne.w	80089bc <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d02e      	beq.n	80088ce <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8008870:	2208      	movs	r2, #8
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	429a      	cmp	r2, r3
 800887a:	d228      	bcs.n	80088ce <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800887c:	2208      	movs	r2, #8
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4413      	add	r3, r2
 8008882:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f003 0307 	and.w	r3, r3, #7
 800888a:	2b00      	cmp	r3, #0
 800888c:	d022      	beq.n	80088d4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f023 0307 	bic.w	r3, r3, #7
 8008894:	3308      	adds	r3, #8
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	429a      	cmp	r2, r3
 800889a:	d215      	bcs.n	80088c8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f023 0307 	bic.w	r3, r3, #7
 80088a2:	3308      	adds	r3, #8
 80088a4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f003 0307 	and.w	r3, r3, #7
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d011      	beq.n	80088d4 <pvPortMalloc+0x94>
        __asm volatile
 80088b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	617b      	str	r3, [r7, #20]
    }
 80088c2:	bf00      	nop
 80088c4:	bf00      	nop
 80088c6:	e7fd      	b.n	80088c4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80088cc:	e002      	b.n	80088d4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80088ce:	2300      	movs	r3, #0
 80088d0:	607b      	str	r3, [r7, #4]
 80088d2:	e000      	b.n	80088d6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80088d4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d06f      	beq.n	80089bc <pvPortMalloc+0x17c>
 80088dc:	4b45      	ldr	r3, [pc, #276]	@ (80089f4 <pvPortMalloc+0x1b4>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d86a      	bhi.n	80089bc <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80088e6:	4b44      	ldr	r3, [pc, #272]	@ (80089f8 <pvPortMalloc+0x1b8>)
 80088e8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80088ea:	4b43      	ldr	r3, [pc, #268]	@ (80089f8 <pvPortMalloc+0x1b8>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088f0:	e004      	b.n	80088fc <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 80088f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80088f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	429a      	cmp	r2, r3
 8008904:	d903      	bls.n	800890e <pvPortMalloc+0xce>
 8008906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1f1      	bne.n	80088f2 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800890e:	4b37      	ldr	r3, [pc, #220]	@ (80089ec <pvPortMalloc+0x1ac>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008914:	429a      	cmp	r2, r3
 8008916:	d051      	beq.n	80089bc <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008918:	6a3b      	ldr	r3, [r7, #32]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2208      	movs	r2, #8
 800891e:	4413      	add	r3, r2
 8008920:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800892a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892c:	685a      	ldr	r2, [r3, #4]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	1ad2      	subs	r2, r2, r3
 8008932:	2308      	movs	r3, #8
 8008934:	005b      	lsls	r3, r3, #1
 8008936:	429a      	cmp	r2, r3
 8008938:	d920      	bls.n	800897c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800893a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4413      	add	r3, r2
 8008940:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	f003 0307 	and.w	r3, r3, #7
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00b      	beq.n	8008964 <pvPortMalloc+0x124>
        __asm volatile
 800894c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008950:	f383 8811 	msr	BASEPRI, r3
 8008954:	f3bf 8f6f 	isb	sy
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	613b      	str	r3, [r7, #16]
    }
 800895e:	bf00      	nop
 8008960:	bf00      	nop
 8008962:	e7fd      	b.n	8008960 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008966:	685a      	ldr	r2, [r3, #4]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	1ad2      	subs	r2, r2, r3
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008976:	69b8      	ldr	r0, [r7, #24]
 8008978:	f000 f90a 	bl	8008b90 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800897c:	4b1d      	ldr	r3, [pc, #116]	@ (80089f4 <pvPortMalloc+0x1b4>)
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	4a1b      	ldr	r2, [pc, #108]	@ (80089f4 <pvPortMalloc+0x1b4>)
 8008988:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800898a:	4b1a      	ldr	r3, [pc, #104]	@ (80089f4 <pvPortMalloc+0x1b4>)
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	4b1b      	ldr	r3, [pc, #108]	@ (80089fc <pvPortMalloc+0x1bc>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	429a      	cmp	r2, r3
 8008994:	d203      	bcs.n	800899e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008996:	4b17      	ldr	r3, [pc, #92]	@ (80089f4 <pvPortMalloc+0x1b4>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a18      	ldr	r2, [pc, #96]	@ (80089fc <pvPortMalloc+0x1bc>)
 800899c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800899e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	4b13      	ldr	r3, [pc, #76]	@ (80089f0 <pvPortMalloc+0x1b0>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	431a      	orrs	r2, r3
 80089a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089aa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80089ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80089b2:	4b13      	ldr	r3, [pc, #76]	@ (8008a00 <pvPortMalloc+0x1c0>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	3301      	adds	r3, #1
 80089b8:	4a11      	ldr	r2, [pc, #68]	@ (8008a00 <pvPortMalloc+0x1c0>)
 80089ba:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80089bc:	f7fe fbf2 	bl	80071a4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	f003 0307 	and.w	r3, r3, #7
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00b      	beq.n	80089e2 <pvPortMalloc+0x1a2>
        __asm volatile
 80089ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ce:	f383 8811 	msr	BASEPRI, r3
 80089d2:	f3bf 8f6f 	isb	sy
 80089d6:	f3bf 8f4f 	dsb	sy
 80089da:	60fb      	str	r3, [r7, #12]
    }
 80089dc:	bf00      	nop
 80089de:	bf00      	nop
 80089e0:	e7fd      	b.n	80089de <pvPortMalloc+0x19e>
    return pvReturn;
 80089e2:	69fb      	ldr	r3, [r7, #28]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3728      	adds	r7, #40	@ 0x28
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	200131bc 	.word	0x200131bc
 80089f0:	200131d0 	.word	0x200131d0
 80089f4:	200131c0 	.word	0x200131c0
 80089f8:	200131b4 	.word	0x200131b4
 80089fc:	200131c4 	.word	0x200131c4
 8008a00:	200131c8 	.word	0x200131c8

08008a04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d04f      	beq.n	8008ab6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008a16:	2308      	movs	r3, #8
 8008a18:	425b      	negs	r3, r3
 8008a1a:	697a      	ldr	r2, [r7, #20]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	685a      	ldr	r2, [r3, #4]
 8008a28:	4b25      	ldr	r3, [pc, #148]	@ (8008ac0 <vPortFree+0xbc>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10b      	bne.n	8008a4a <vPortFree+0x46>
        __asm volatile
 8008a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a36:	f383 8811 	msr	BASEPRI, r3
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	60fb      	str	r3, [r7, #12]
    }
 8008a44:	bf00      	nop
 8008a46:	bf00      	nop
 8008a48:	e7fd      	b.n	8008a46 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00b      	beq.n	8008a6a <vPortFree+0x66>
        __asm volatile
 8008a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a56:	f383 8811 	msr	BASEPRI, r3
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	60bb      	str	r3, [r7, #8]
    }
 8008a64:	bf00      	nop
 8008a66:	bf00      	nop
 8008a68:	e7fd      	b.n	8008a66 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	685a      	ldr	r2, [r3, #4]
 8008a6e:	4b14      	ldr	r3, [pc, #80]	@ (8008ac0 <vPortFree+0xbc>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4013      	ands	r3, r2
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d01e      	beq.n	8008ab6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d11a      	bne.n	8008ab6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	685a      	ldr	r2, [r3, #4]
 8008a84:	4b0e      	ldr	r3, [pc, #56]	@ (8008ac0 <vPortFree+0xbc>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	43db      	mvns	r3, r3
 8008a8a:	401a      	ands	r2, r3
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8008a90:	f7fe fb7a 	bl	8007188 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	685a      	ldr	r2, [r3, #4]
 8008a98:	4b0a      	ldr	r3, [pc, #40]	@ (8008ac4 <vPortFree+0xc0>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	4a09      	ldr	r2, [pc, #36]	@ (8008ac4 <vPortFree+0xc0>)
 8008aa0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008aa2:	6938      	ldr	r0, [r7, #16]
 8008aa4:	f000 f874 	bl	8008b90 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008aa8:	4b07      	ldr	r3, [pc, #28]	@ (8008ac8 <vPortFree+0xc4>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	3301      	adds	r3, #1
 8008aae:	4a06      	ldr	r2, [pc, #24]	@ (8008ac8 <vPortFree+0xc4>)
 8008ab0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008ab2:	f7fe fb77 	bl	80071a4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008ab6:	bf00      	nop
 8008ab8:	3718      	adds	r7, #24
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	200131d0 	.word	0x200131d0
 8008ac4:	200131c0 	.word	0x200131c0
 8008ac8:	200131cc 	.word	0x200131cc

08008acc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008acc:	b480      	push	{r7}
 8008ace:	b085      	sub	sp, #20
 8008ad0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008ad2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8008ad6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8008ad8:	4b27      	ldr	r3, [pc, #156]	@ (8008b78 <prvHeapInit+0xac>)
 8008ada:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f003 0307 	and.w	r3, r3, #7
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00c      	beq.n	8008b00 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	3307      	adds	r3, #7
 8008aea:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f023 0307 	bic.w	r3, r3, #7
 8008af2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	4a1f      	ldr	r2, [pc, #124]	@ (8008b78 <prvHeapInit+0xac>)
 8008afc:	4413      	add	r3, r2
 8008afe:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b04:	4a1d      	ldr	r2, [pc, #116]	@ (8008b7c <prvHeapInit+0xb0>)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8008b7c <prvHeapInit+0xb0>)
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	68ba      	ldr	r2, [r7, #8]
 8008b14:	4413      	add	r3, r2
 8008b16:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008b18:	2208      	movs	r2, #8
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	1a9b      	subs	r3, r3, r2
 8008b1e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f023 0307 	bic.w	r3, r3, #7
 8008b26:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	4a15      	ldr	r2, [pc, #84]	@ (8008b80 <prvHeapInit+0xb4>)
 8008b2c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008b2e:	4b14      	ldr	r3, [pc, #80]	@ (8008b80 <prvHeapInit+0xb4>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2200      	movs	r2, #0
 8008b34:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008b36:	4b12      	ldr	r3, [pc, #72]	@ (8008b80 <prvHeapInit+0xb4>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	1ad2      	subs	r2, r2, r3
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8008b80 <prvHeapInit+0xb4>)
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	4a0a      	ldr	r2, [pc, #40]	@ (8008b84 <prvHeapInit+0xb8>)
 8008b5a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	4a09      	ldr	r2, [pc, #36]	@ (8008b88 <prvHeapInit+0xbc>)
 8008b62:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b64:	4b09      	ldr	r3, [pc, #36]	@ (8008b8c <prvHeapInit+0xc0>)
 8008b66:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008b6a:	601a      	str	r2, [r3, #0]
}
 8008b6c:	bf00      	nop
 8008b6e:	3714      	adds	r7, #20
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	200005b4 	.word	0x200005b4
 8008b7c:	200131b4 	.word	0x200131b4
 8008b80:	200131bc 	.word	0x200131bc
 8008b84:	200131c4 	.word	0x200131c4
 8008b88:	200131c0 	.word	0x200131c0
 8008b8c:	200131d0 	.word	0x200131d0

08008b90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008b90:	b480      	push	{r7}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b98:	4b28      	ldr	r3, [pc, #160]	@ (8008c3c <prvInsertBlockIntoFreeList+0xac>)
 8008b9a:	60fb      	str	r3, [r7, #12]
 8008b9c:	e002      	b.n	8008ba4 <prvInsertBlockIntoFreeList+0x14>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	60fb      	str	r3, [r7, #12]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d8f7      	bhi.n	8008b9e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	4413      	add	r3, r2
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d108      	bne.n	8008bd2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	685a      	ldr	r2, [r3, #4]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	441a      	add	r2, r3
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	68ba      	ldr	r2, [r7, #8]
 8008bdc:	441a      	add	r2, r3
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d118      	bne.n	8008c18 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	4b15      	ldr	r3, [pc, #84]	@ (8008c40 <prvInsertBlockIntoFreeList+0xb0>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d00d      	beq.n	8008c0e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	441a      	add	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	601a      	str	r2, [r3, #0]
 8008c0c:	e008      	b.n	8008c20 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8008c40 <prvInsertBlockIntoFreeList+0xb0>)
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	601a      	str	r2, [r3, #0]
 8008c16:	e003      	b.n	8008c20 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d002      	beq.n	8008c2e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008c2e:	bf00      	nop
 8008c30:	3714      	adds	r7, #20
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	200131b4 	.word	0x200131b4
 8008c40:	200131bc 	.word	0x200131bc

08008c44 <__cvt>:
 8008c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c48:	ec57 6b10 	vmov	r6, r7, d0
 8008c4c:	2f00      	cmp	r7, #0
 8008c4e:	460c      	mov	r4, r1
 8008c50:	4619      	mov	r1, r3
 8008c52:	463b      	mov	r3, r7
 8008c54:	bfbb      	ittet	lt
 8008c56:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008c5a:	461f      	movlt	r7, r3
 8008c5c:	2300      	movge	r3, #0
 8008c5e:	232d      	movlt	r3, #45	@ 0x2d
 8008c60:	700b      	strb	r3, [r1, #0]
 8008c62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c64:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008c68:	4691      	mov	r9, r2
 8008c6a:	f023 0820 	bic.w	r8, r3, #32
 8008c6e:	bfbc      	itt	lt
 8008c70:	4632      	movlt	r2, r6
 8008c72:	4616      	movlt	r6, r2
 8008c74:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c78:	d005      	beq.n	8008c86 <__cvt+0x42>
 8008c7a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008c7e:	d100      	bne.n	8008c82 <__cvt+0x3e>
 8008c80:	3401      	adds	r4, #1
 8008c82:	2102      	movs	r1, #2
 8008c84:	e000      	b.n	8008c88 <__cvt+0x44>
 8008c86:	2103      	movs	r1, #3
 8008c88:	ab03      	add	r3, sp, #12
 8008c8a:	9301      	str	r3, [sp, #4]
 8008c8c:	ab02      	add	r3, sp, #8
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	ec47 6b10 	vmov	d0, r6, r7
 8008c94:	4653      	mov	r3, sl
 8008c96:	4622      	mov	r2, r4
 8008c98:	f000 ff6e 	bl	8009b78 <_dtoa_r>
 8008c9c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008ca0:	4605      	mov	r5, r0
 8008ca2:	d119      	bne.n	8008cd8 <__cvt+0x94>
 8008ca4:	f019 0f01 	tst.w	r9, #1
 8008ca8:	d00e      	beq.n	8008cc8 <__cvt+0x84>
 8008caa:	eb00 0904 	add.w	r9, r0, r4
 8008cae:	2200      	movs	r2, #0
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	4639      	mov	r1, r7
 8008cb6:	f7f7 ff27 	bl	8000b08 <__aeabi_dcmpeq>
 8008cba:	b108      	cbz	r0, 8008cc0 <__cvt+0x7c>
 8008cbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8008cc0:	2230      	movs	r2, #48	@ 0x30
 8008cc2:	9b03      	ldr	r3, [sp, #12]
 8008cc4:	454b      	cmp	r3, r9
 8008cc6:	d31e      	bcc.n	8008d06 <__cvt+0xc2>
 8008cc8:	9b03      	ldr	r3, [sp, #12]
 8008cca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ccc:	1b5b      	subs	r3, r3, r5
 8008cce:	4628      	mov	r0, r5
 8008cd0:	6013      	str	r3, [r2, #0]
 8008cd2:	b004      	add	sp, #16
 8008cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008cdc:	eb00 0904 	add.w	r9, r0, r4
 8008ce0:	d1e5      	bne.n	8008cae <__cvt+0x6a>
 8008ce2:	7803      	ldrb	r3, [r0, #0]
 8008ce4:	2b30      	cmp	r3, #48	@ 0x30
 8008ce6:	d10a      	bne.n	8008cfe <__cvt+0xba>
 8008ce8:	2200      	movs	r2, #0
 8008cea:	2300      	movs	r3, #0
 8008cec:	4630      	mov	r0, r6
 8008cee:	4639      	mov	r1, r7
 8008cf0:	f7f7 ff0a 	bl	8000b08 <__aeabi_dcmpeq>
 8008cf4:	b918      	cbnz	r0, 8008cfe <__cvt+0xba>
 8008cf6:	f1c4 0401 	rsb	r4, r4, #1
 8008cfa:	f8ca 4000 	str.w	r4, [sl]
 8008cfe:	f8da 3000 	ldr.w	r3, [sl]
 8008d02:	4499      	add	r9, r3
 8008d04:	e7d3      	b.n	8008cae <__cvt+0x6a>
 8008d06:	1c59      	adds	r1, r3, #1
 8008d08:	9103      	str	r1, [sp, #12]
 8008d0a:	701a      	strb	r2, [r3, #0]
 8008d0c:	e7d9      	b.n	8008cc2 <__cvt+0x7e>

08008d0e <__exponent>:
 8008d0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d10:	2900      	cmp	r1, #0
 8008d12:	bfba      	itte	lt
 8008d14:	4249      	neglt	r1, r1
 8008d16:	232d      	movlt	r3, #45	@ 0x2d
 8008d18:	232b      	movge	r3, #43	@ 0x2b
 8008d1a:	2909      	cmp	r1, #9
 8008d1c:	7002      	strb	r2, [r0, #0]
 8008d1e:	7043      	strb	r3, [r0, #1]
 8008d20:	dd29      	ble.n	8008d76 <__exponent+0x68>
 8008d22:	f10d 0307 	add.w	r3, sp, #7
 8008d26:	461d      	mov	r5, r3
 8008d28:	270a      	movs	r7, #10
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008d30:	fb07 1416 	mls	r4, r7, r6, r1
 8008d34:	3430      	adds	r4, #48	@ 0x30
 8008d36:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	2c63      	cmp	r4, #99	@ 0x63
 8008d3e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d42:	4631      	mov	r1, r6
 8008d44:	dcf1      	bgt.n	8008d2a <__exponent+0x1c>
 8008d46:	3130      	adds	r1, #48	@ 0x30
 8008d48:	1e94      	subs	r4, r2, #2
 8008d4a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008d4e:	1c41      	adds	r1, r0, #1
 8008d50:	4623      	mov	r3, r4
 8008d52:	42ab      	cmp	r3, r5
 8008d54:	d30a      	bcc.n	8008d6c <__exponent+0x5e>
 8008d56:	f10d 0309 	add.w	r3, sp, #9
 8008d5a:	1a9b      	subs	r3, r3, r2
 8008d5c:	42ac      	cmp	r4, r5
 8008d5e:	bf88      	it	hi
 8008d60:	2300      	movhi	r3, #0
 8008d62:	3302      	adds	r3, #2
 8008d64:	4403      	add	r3, r0
 8008d66:	1a18      	subs	r0, r3, r0
 8008d68:	b003      	add	sp, #12
 8008d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d6c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008d70:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008d74:	e7ed      	b.n	8008d52 <__exponent+0x44>
 8008d76:	2330      	movs	r3, #48	@ 0x30
 8008d78:	3130      	adds	r1, #48	@ 0x30
 8008d7a:	7083      	strb	r3, [r0, #2]
 8008d7c:	70c1      	strb	r1, [r0, #3]
 8008d7e:	1d03      	adds	r3, r0, #4
 8008d80:	e7f1      	b.n	8008d66 <__exponent+0x58>
	...

08008d84 <_printf_float>:
 8008d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d88:	b08d      	sub	sp, #52	@ 0x34
 8008d8a:	460c      	mov	r4, r1
 8008d8c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008d90:	4616      	mov	r6, r2
 8008d92:	461f      	mov	r7, r3
 8008d94:	4605      	mov	r5, r0
 8008d96:	f000 fddf 	bl	8009958 <_localeconv_r>
 8008d9a:	6803      	ldr	r3, [r0, #0]
 8008d9c:	9304      	str	r3, [sp, #16]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7f7 fa86 	bl	80002b0 <strlen>
 8008da4:	2300      	movs	r3, #0
 8008da6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008da8:	f8d8 3000 	ldr.w	r3, [r8]
 8008dac:	9005      	str	r0, [sp, #20]
 8008dae:	3307      	adds	r3, #7
 8008db0:	f023 0307 	bic.w	r3, r3, #7
 8008db4:	f103 0208 	add.w	r2, r3, #8
 8008db8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008dbc:	f8d4 b000 	ldr.w	fp, [r4]
 8008dc0:	f8c8 2000 	str.w	r2, [r8]
 8008dc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008dc8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008dcc:	9307      	str	r3, [sp, #28]
 8008dce:	f8cd 8018 	str.w	r8, [sp, #24]
 8008dd2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008dd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dda:	4b9c      	ldr	r3, [pc, #624]	@ (800904c <_printf_float+0x2c8>)
 8008ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8008de0:	f7f7 fec4 	bl	8000b6c <__aeabi_dcmpun>
 8008de4:	bb70      	cbnz	r0, 8008e44 <_printf_float+0xc0>
 8008de6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dea:	4b98      	ldr	r3, [pc, #608]	@ (800904c <_printf_float+0x2c8>)
 8008dec:	f04f 32ff 	mov.w	r2, #4294967295
 8008df0:	f7f7 fe9e 	bl	8000b30 <__aeabi_dcmple>
 8008df4:	bb30      	cbnz	r0, 8008e44 <_printf_float+0xc0>
 8008df6:	2200      	movs	r2, #0
 8008df8:	2300      	movs	r3, #0
 8008dfa:	4640      	mov	r0, r8
 8008dfc:	4649      	mov	r1, r9
 8008dfe:	f7f7 fe8d 	bl	8000b1c <__aeabi_dcmplt>
 8008e02:	b110      	cbz	r0, 8008e0a <_printf_float+0x86>
 8008e04:	232d      	movs	r3, #45	@ 0x2d
 8008e06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e0a:	4a91      	ldr	r2, [pc, #580]	@ (8009050 <_printf_float+0x2cc>)
 8008e0c:	4b91      	ldr	r3, [pc, #580]	@ (8009054 <_printf_float+0x2d0>)
 8008e0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008e12:	bf94      	ite	ls
 8008e14:	4690      	movls	r8, r2
 8008e16:	4698      	movhi	r8, r3
 8008e18:	2303      	movs	r3, #3
 8008e1a:	6123      	str	r3, [r4, #16]
 8008e1c:	f02b 0304 	bic.w	r3, fp, #4
 8008e20:	6023      	str	r3, [r4, #0]
 8008e22:	f04f 0900 	mov.w	r9, #0
 8008e26:	9700      	str	r7, [sp, #0]
 8008e28:	4633      	mov	r3, r6
 8008e2a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008e2c:	4621      	mov	r1, r4
 8008e2e:	4628      	mov	r0, r5
 8008e30:	f000 f9d2 	bl	80091d8 <_printf_common>
 8008e34:	3001      	adds	r0, #1
 8008e36:	f040 808d 	bne.w	8008f54 <_printf_float+0x1d0>
 8008e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e3e:	b00d      	add	sp, #52	@ 0x34
 8008e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e44:	4642      	mov	r2, r8
 8008e46:	464b      	mov	r3, r9
 8008e48:	4640      	mov	r0, r8
 8008e4a:	4649      	mov	r1, r9
 8008e4c:	f7f7 fe8e 	bl	8000b6c <__aeabi_dcmpun>
 8008e50:	b140      	cbz	r0, 8008e64 <_printf_float+0xe0>
 8008e52:	464b      	mov	r3, r9
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	bfbc      	itt	lt
 8008e58:	232d      	movlt	r3, #45	@ 0x2d
 8008e5a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008e5e:	4a7e      	ldr	r2, [pc, #504]	@ (8009058 <_printf_float+0x2d4>)
 8008e60:	4b7e      	ldr	r3, [pc, #504]	@ (800905c <_printf_float+0x2d8>)
 8008e62:	e7d4      	b.n	8008e0e <_printf_float+0x8a>
 8008e64:	6863      	ldr	r3, [r4, #4]
 8008e66:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008e6a:	9206      	str	r2, [sp, #24]
 8008e6c:	1c5a      	adds	r2, r3, #1
 8008e6e:	d13b      	bne.n	8008ee8 <_printf_float+0x164>
 8008e70:	2306      	movs	r3, #6
 8008e72:	6063      	str	r3, [r4, #4]
 8008e74:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008e78:	2300      	movs	r3, #0
 8008e7a:	6022      	str	r2, [r4, #0]
 8008e7c:	9303      	str	r3, [sp, #12]
 8008e7e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008e80:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008e84:	ab09      	add	r3, sp, #36	@ 0x24
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	6861      	ldr	r1, [r4, #4]
 8008e8a:	ec49 8b10 	vmov	d0, r8, r9
 8008e8e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008e92:	4628      	mov	r0, r5
 8008e94:	f7ff fed6 	bl	8008c44 <__cvt>
 8008e98:	9b06      	ldr	r3, [sp, #24]
 8008e9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008e9c:	2b47      	cmp	r3, #71	@ 0x47
 8008e9e:	4680      	mov	r8, r0
 8008ea0:	d129      	bne.n	8008ef6 <_printf_float+0x172>
 8008ea2:	1cc8      	adds	r0, r1, #3
 8008ea4:	db02      	blt.n	8008eac <_printf_float+0x128>
 8008ea6:	6863      	ldr	r3, [r4, #4]
 8008ea8:	4299      	cmp	r1, r3
 8008eaa:	dd41      	ble.n	8008f30 <_printf_float+0x1ac>
 8008eac:	f1aa 0a02 	sub.w	sl, sl, #2
 8008eb0:	fa5f fa8a 	uxtb.w	sl, sl
 8008eb4:	3901      	subs	r1, #1
 8008eb6:	4652      	mov	r2, sl
 8008eb8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008ebc:	9109      	str	r1, [sp, #36]	@ 0x24
 8008ebe:	f7ff ff26 	bl	8008d0e <__exponent>
 8008ec2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ec4:	1813      	adds	r3, r2, r0
 8008ec6:	2a01      	cmp	r2, #1
 8008ec8:	4681      	mov	r9, r0
 8008eca:	6123      	str	r3, [r4, #16]
 8008ecc:	dc02      	bgt.n	8008ed4 <_printf_float+0x150>
 8008ece:	6822      	ldr	r2, [r4, #0]
 8008ed0:	07d2      	lsls	r2, r2, #31
 8008ed2:	d501      	bpl.n	8008ed8 <_printf_float+0x154>
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	6123      	str	r3, [r4, #16]
 8008ed8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d0a2      	beq.n	8008e26 <_printf_float+0xa2>
 8008ee0:	232d      	movs	r3, #45	@ 0x2d
 8008ee2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ee6:	e79e      	b.n	8008e26 <_printf_float+0xa2>
 8008ee8:	9a06      	ldr	r2, [sp, #24]
 8008eea:	2a47      	cmp	r2, #71	@ 0x47
 8008eec:	d1c2      	bne.n	8008e74 <_printf_float+0xf0>
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1c0      	bne.n	8008e74 <_printf_float+0xf0>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e7bd      	b.n	8008e72 <_printf_float+0xee>
 8008ef6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008efa:	d9db      	bls.n	8008eb4 <_printf_float+0x130>
 8008efc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008f00:	d118      	bne.n	8008f34 <_printf_float+0x1b0>
 8008f02:	2900      	cmp	r1, #0
 8008f04:	6863      	ldr	r3, [r4, #4]
 8008f06:	dd0b      	ble.n	8008f20 <_printf_float+0x19c>
 8008f08:	6121      	str	r1, [r4, #16]
 8008f0a:	b913      	cbnz	r3, 8008f12 <_printf_float+0x18e>
 8008f0c:	6822      	ldr	r2, [r4, #0]
 8008f0e:	07d0      	lsls	r0, r2, #31
 8008f10:	d502      	bpl.n	8008f18 <_printf_float+0x194>
 8008f12:	3301      	adds	r3, #1
 8008f14:	440b      	add	r3, r1
 8008f16:	6123      	str	r3, [r4, #16]
 8008f18:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008f1a:	f04f 0900 	mov.w	r9, #0
 8008f1e:	e7db      	b.n	8008ed8 <_printf_float+0x154>
 8008f20:	b913      	cbnz	r3, 8008f28 <_printf_float+0x1a4>
 8008f22:	6822      	ldr	r2, [r4, #0]
 8008f24:	07d2      	lsls	r2, r2, #31
 8008f26:	d501      	bpl.n	8008f2c <_printf_float+0x1a8>
 8008f28:	3302      	adds	r3, #2
 8008f2a:	e7f4      	b.n	8008f16 <_printf_float+0x192>
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e7f2      	b.n	8008f16 <_printf_float+0x192>
 8008f30:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008f34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f36:	4299      	cmp	r1, r3
 8008f38:	db05      	blt.n	8008f46 <_printf_float+0x1c2>
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	6121      	str	r1, [r4, #16]
 8008f3e:	07d8      	lsls	r0, r3, #31
 8008f40:	d5ea      	bpl.n	8008f18 <_printf_float+0x194>
 8008f42:	1c4b      	adds	r3, r1, #1
 8008f44:	e7e7      	b.n	8008f16 <_printf_float+0x192>
 8008f46:	2900      	cmp	r1, #0
 8008f48:	bfd4      	ite	le
 8008f4a:	f1c1 0202 	rsble	r2, r1, #2
 8008f4e:	2201      	movgt	r2, #1
 8008f50:	4413      	add	r3, r2
 8008f52:	e7e0      	b.n	8008f16 <_printf_float+0x192>
 8008f54:	6823      	ldr	r3, [r4, #0]
 8008f56:	055a      	lsls	r2, r3, #21
 8008f58:	d407      	bmi.n	8008f6a <_printf_float+0x1e6>
 8008f5a:	6923      	ldr	r3, [r4, #16]
 8008f5c:	4642      	mov	r2, r8
 8008f5e:	4631      	mov	r1, r6
 8008f60:	4628      	mov	r0, r5
 8008f62:	47b8      	blx	r7
 8008f64:	3001      	adds	r0, #1
 8008f66:	d12b      	bne.n	8008fc0 <_printf_float+0x23c>
 8008f68:	e767      	b.n	8008e3a <_printf_float+0xb6>
 8008f6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f6e:	f240 80dd 	bls.w	800912c <_printf_float+0x3a8>
 8008f72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008f76:	2200      	movs	r2, #0
 8008f78:	2300      	movs	r3, #0
 8008f7a:	f7f7 fdc5 	bl	8000b08 <__aeabi_dcmpeq>
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	d033      	beq.n	8008fea <_printf_float+0x266>
 8008f82:	4a37      	ldr	r2, [pc, #220]	@ (8009060 <_printf_float+0x2dc>)
 8008f84:	2301      	movs	r3, #1
 8008f86:	4631      	mov	r1, r6
 8008f88:	4628      	mov	r0, r5
 8008f8a:	47b8      	blx	r7
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	f43f af54 	beq.w	8008e3a <_printf_float+0xb6>
 8008f92:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008f96:	4543      	cmp	r3, r8
 8008f98:	db02      	blt.n	8008fa0 <_printf_float+0x21c>
 8008f9a:	6823      	ldr	r3, [r4, #0]
 8008f9c:	07d8      	lsls	r0, r3, #31
 8008f9e:	d50f      	bpl.n	8008fc0 <_printf_float+0x23c>
 8008fa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fa4:	4631      	mov	r1, r6
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	47b8      	blx	r7
 8008faa:	3001      	adds	r0, #1
 8008fac:	f43f af45 	beq.w	8008e3a <_printf_float+0xb6>
 8008fb0:	f04f 0900 	mov.w	r9, #0
 8008fb4:	f108 38ff 	add.w	r8, r8, #4294967295
 8008fb8:	f104 0a1a 	add.w	sl, r4, #26
 8008fbc:	45c8      	cmp	r8, r9
 8008fbe:	dc09      	bgt.n	8008fd4 <_printf_float+0x250>
 8008fc0:	6823      	ldr	r3, [r4, #0]
 8008fc2:	079b      	lsls	r3, r3, #30
 8008fc4:	f100 8103 	bmi.w	80091ce <_printf_float+0x44a>
 8008fc8:	68e0      	ldr	r0, [r4, #12]
 8008fca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fcc:	4298      	cmp	r0, r3
 8008fce:	bfb8      	it	lt
 8008fd0:	4618      	movlt	r0, r3
 8008fd2:	e734      	b.n	8008e3e <_printf_float+0xba>
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	4652      	mov	r2, sl
 8008fd8:	4631      	mov	r1, r6
 8008fda:	4628      	mov	r0, r5
 8008fdc:	47b8      	blx	r7
 8008fde:	3001      	adds	r0, #1
 8008fe0:	f43f af2b 	beq.w	8008e3a <_printf_float+0xb6>
 8008fe4:	f109 0901 	add.w	r9, r9, #1
 8008fe8:	e7e8      	b.n	8008fbc <_printf_float+0x238>
 8008fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	dc39      	bgt.n	8009064 <_printf_float+0x2e0>
 8008ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8009060 <_printf_float+0x2dc>)
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	4631      	mov	r1, r6
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	47b8      	blx	r7
 8008ffa:	3001      	adds	r0, #1
 8008ffc:	f43f af1d 	beq.w	8008e3a <_printf_float+0xb6>
 8009000:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009004:	ea59 0303 	orrs.w	r3, r9, r3
 8009008:	d102      	bne.n	8009010 <_printf_float+0x28c>
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	07d9      	lsls	r1, r3, #31
 800900e:	d5d7      	bpl.n	8008fc0 <_printf_float+0x23c>
 8009010:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009014:	4631      	mov	r1, r6
 8009016:	4628      	mov	r0, r5
 8009018:	47b8      	blx	r7
 800901a:	3001      	adds	r0, #1
 800901c:	f43f af0d 	beq.w	8008e3a <_printf_float+0xb6>
 8009020:	f04f 0a00 	mov.w	sl, #0
 8009024:	f104 0b1a 	add.w	fp, r4, #26
 8009028:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800902a:	425b      	negs	r3, r3
 800902c:	4553      	cmp	r3, sl
 800902e:	dc01      	bgt.n	8009034 <_printf_float+0x2b0>
 8009030:	464b      	mov	r3, r9
 8009032:	e793      	b.n	8008f5c <_printf_float+0x1d8>
 8009034:	2301      	movs	r3, #1
 8009036:	465a      	mov	r2, fp
 8009038:	4631      	mov	r1, r6
 800903a:	4628      	mov	r0, r5
 800903c:	47b8      	blx	r7
 800903e:	3001      	adds	r0, #1
 8009040:	f43f aefb 	beq.w	8008e3a <_printf_float+0xb6>
 8009044:	f10a 0a01 	add.w	sl, sl, #1
 8009048:	e7ee      	b.n	8009028 <_printf_float+0x2a4>
 800904a:	bf00      	nop
 800904c:	7fefffff 	.word	0x7fefffff
 8009050:	0800df98 	.word	0x0800df98
 8009054:	0800df9c 	.word	0x0800df9c
 8009058:	0800dfa0 	.word	0x0800dfa0
 800905c:	0800dfa4 	.word	0x0800dfa4
 8009060:	0800dfa8 	.word	0x0800dfa8
 8009064:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009066:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800906a:	4553      	cmp	r3, sl
 800906c:	bfa8      	it	ge
 800906e:	4653      	movge	r3, sl
 8009070:	2b00      	cmp	r3, #0
 8009072:	4699      	mov	r9, r3
 8009074:	dc36      	bgt.n	80090e4 <_printf_float+0x360>
 8009076:	f04f 0b00 	mov.w	fp, #0
 800907a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800907e:	f104 021a 	add.w	r2, r4, #26
 8009082:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009084:	9306      	str	r3, [sp, #24]
 8009086:	eba3 0309 	sub.w	r3, r3, r9
 800908a:	455b      	cmp	r3, fp
 800908c:	dc31      	bgt.n	80090f2 <_printf_float+0x36e>
 800908e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009090:	459a      	cmp	sl, r3
 8009092:	dc3a      	bgt.n	800910a <_printf_float+0x386>
 8009094:	6823      	ldr	r3, [r4, #0]
 8009096:	07da      	lsls	r2, r3, #31
 8009098:	d437      	bmi.n	800910a <_printf_float+0x386>
 800909a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800909c:	ebaa 0903 	sub.w	r9, sl, r3
 80090a0:	9b06      	ldr	r3, [sp, #24]
 80090a2:	ebaa 0303 	sub.w	r3, sl, r3
 80090a6:	4599      	cmp	r9, r3
 80090a8:	bfa8      	it	ge
 80090aa:	4699      	movge	r9, r3
 80090ac:	f1b9 0f00 	cmp.w	r9, #0
 80090b0:	dc33      	bgt.n	800911a <_printf_float+0x396>
 80090b2:	f04f 0800 	mov.w	r8, #0
 80090b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090ba:	f104 0b1a 	add.w	fp, r4, #26
 80090be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090c0:	ebaa 0303 	sub.w	r3, sl, r3
 80090c4:	eba3 0309 	sub.w	r3, r3, r9
 80090c8:	4543      	cmp	r3, r8
 80090ca:	f77f af79 	ble.w	8008fc0 <_printf_float+0x23c>
 80090ce:	2301      	movs	r3, #1
 80090d0:	465a      	mov	r2, fp
 80090d2:	4631      	mov	r1, r6
 80090d4:	4628      	mov	r0, r5
 80090d6:	47b8      	blx	r7
 80090d8:	3001      	adds	r0, #1
 80090da:	f43f aeae 	beq.w	8008e3a <_printf_float+0xb6>
 80090de:	f108 0801 	add.w	r8, r8, #1
 80090e2:	e7ec      	b.n	80090be <_printf_float+0x33a>
 80090e4:	4642      	mov	r2, r8
 80090e6:	4631      	mov	r1, r6
 80090e8:	4628      	mov	r0, r5
 80090ea:	47b8      	blx	r7
 80090ec:	3001      	adds	r0, #1
 80090ee:	d1c2      	bne.n	8009076 <_printf_float+0x2f2>
 80090f0:	e6a3      	b.n	8008e3a <_printf_float+0xb6>
 80090f2:	2301      	movs	r3, #1
 80090f4:	4631      	mov	r1, r6
 80090f6:	4628      	mov	r0, r5
 80090f8:	9206      	str	r2, [sp, #24]
 80090fa:	47b8      	blx	r7
 80090fc:	3001      	adds	r0, #1
 80090fe:	f43f ae9c 	beq.w	8008e3a <_printf_float+0xb6>
 8009102:	9a06      	ldr	r2, [sp, #24]
 8009104:	f10b 0b01 	add.w	fp, fp, #1
 8009108:	e7bb      	b.n	8009082 <_printf_float+0x2fe>
 800910a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800910e:	4631      	mov	r1, r6
 8009110:	4628      	mov	r0, r5
 8009112:	47b8      	blx	r7
 8009114:	3001      	adds	r0, #1
 8009116:	d1c0      	bne.n	800909a <_printf_float+0x316>
 8009118:	e68f      	b.n	8008e3a <_printf_float+0xb6>
 800911a:	9a06      	ldr	r2, [sp, #24]
 800911c:	464b      	mov	r3, r9
 800911e:	4442      	add	r2, r8
 8009120:	4631      	mov	r1, r6
 8009122:	4628      	mov	r0, r5
 8009124:	47b8      	blx	r7
 8009126:	3001      	adds	r0, #1
 8009128:	d1c3      	bne.n	80090b2 <_printf_float+0x32e>
 800912a:	e686      	b.n	8008e3a <_printf_float+0xb6>
 800912c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009130:	f1ba 0f01 	cmp.w	sl, #1
 8009134:	dc01      	bgt.n	800913a <_printf_float+0x3b6>
 8009136:	07db      	lsls	r3, r3, #31
 8009138:	d536      	bpl.n	80091a8 <_printf_float+0x424>
 800913a:	2301      	movs	r3, #1
 800913c:	4642      	mov	r2, r8
 800913e:	4631      	mov	r1, r6
 8009140:	4628      	mov	r0, r5
 8009142:	47b8      	blx	r7
 8009144:	3001      	adds	r0, #1
 8009146:	f43f ae78 	beq.w	8008e3a <_printf_float+0xb6>
 800914a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800914e:	4631      	mov	r1, r6
 8009150:	4628      	mov	r0, r5
 8009152:	47b8      	blx	r7
 8009154:	3001      	adds	r0, #1
 8009156:	f43f ae70 	beq.w	8008e3a <_printf_float+0xb6>
 800915a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800915e:	2200      	movs	r2, #0
 8009160:	2300      	movs	r3, #0
 8009162:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009166:	f7f7 fccf 	bl	8000b08 <__aeabi_dcmpeq>
 800916a:	b9c0      	cbnz	r0, 800919e <_printf_float+0x41a>
 800916c:	4653      	mov	r3, sl
 800916e:	f108 0201 	add.w	r2, r8, #1
 8009172:	4631      	mov	r1, r6
 8009174:	4628      	mov	r0, r5
 8009176:	47b8      	blx	r7
 8009178:	3001      	adds	r0, #1
 800917a:	d10c      	bne.n	8009196 <_printf_float+0x412>
 800917c:	e65d      	b.n	8008e3a <_printf_float+0xb6>
 800917e:	2301      	movs	r3, #1
 8009180:	465a      	mov	r2, fp
 8009182:	4631      	mov	r1, r6
 8009184:	4628      	mov	r0, r5
 8009186:	47b8      	blx	r7
 8009188:	3001      	adds	r0, #1
 800918a:	f43f ae56 	beq.w	8008e3a <_printf_float+0xb6>
 800918e:	f108 0801 	add.w	r8, r8, #1
 8009192:	45d0      	cmp	r8, sl
 8009194:	dbf3      	blt.n	800917e <_printf_float+0x3fa>
 8009196:	464b      	mov	r3, r9
 8009198:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800919c:	e6df      	b.n	8008f5e <_printf_float+0x1da>
 800919e:	f04f 0800 	mov.w	r8, #0
 80091a2:	f104 0b1a 	add.w	fp, r4, #26
 80091a6:	e7f4      	b.n	8009192 <_printf_float+0x40e>
 80091a8:	2301      	movs	r3, #1
 80091aa:	4642      	mov	r2, r8
 80091ac:	e7e1      	b.n	8009172 <_printf_float+0x3ee>
 80091ae:	2301      	movs	r3, #1
 80091b0:	464a      	mov	r2, r9
 80091b2:	4631      	mov	r1, r6
 80091b4:	4628      	mov	r0, r5
 80091b6:	47b8      	blx	r7
 80091b8:	3001      	adds	r0, #1
 80091ba:	f43f ae3e 	beq.w	8008e3a <_printf_float+0xb6>
 80091be:	f108 0801 	add.w	r8, r8, #1
 80091c2:	68e3      	ldr	r3, [r4, #12]
 80091c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80091c6:	1a5b      	subs	r3, r3, r1
 80091c8:	4543      	cmp	r3, r8
 80091ca:	dcf0      	bgt.n	80091ae <_printf_float+0x42a>
 80091cc:	e6fc      	b.n	8008fc8 <_printf_float+0x244>
 80091ce:	f04f 0800 	mov.w	r8, #0
 80091d2:	f104 0919 	add.w	r9, r4, #25
 80091d6:	e7f4      	b.n	80091c2 <_printf_float+0x43e>

080091d8 <_printf_common>:
 80091d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091dc:	4616      	mov	r6, r2
 80091de:	4698      	mov	r8, r3
 80091e0:	688a      	ldr	r2, [r1, #8]
 80091e2:	690b      	ldr	r3, [r1, #16]
 80091e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091e8:	4293      	cmp	r3, r2
 80091ea:	bfb8      	it	lt
 80091ec:	4613      	movlt	r3, r2
 80091ee:	6033      	str	r3, [r6, #0]
 80091f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091f4:	4607      	mov	r7, r0
 80091f6:	460c      	mov	r4, r1
 80091f8:	b10a      	cbz	r2, 80091fe <_printf_common+0x26>
 80091fa:	3301      	adds	r3, #1
 80091fc:	6033      	str	r3, [r6, #0]
 80091fe:	6823      	ldr	r3, [r4, #0]
 8009200:	0699      	lsls	r1, r3, #26
 8009202:	bf42      	ittt	mi
 8009204:	6833      	ldrmi	r3, [r6, #0]
 8009206:	3302      	addmi	r3, #2
 8009208:	6033      	strmi	r3, [r6, #0]
 800920a:	6825      	ldr	r5, [r4, #0]
 800920c:	f015 0506 	ands.w	r5, r5, #6
 8009210:	d106      	bne.n	8009220 <_printf_common+0x48>
 8009212:	f104 0a19 	add.w	sl, r4, #25
 8009216:	68e3      	ldr	r3, [r4, #12]
 8009218:	6832      	ldr	r2, [r6, #0]
 800921a:	1a9b      	subs	r3, r3, r2
 800921c:	42ab      	cmp	r3, r5
 800921e:	dc26      	bgt.n	800926e <_printf_common+0x96>
 8009220:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009224:	6822      	ldr	r2, [r4, #0]
 8009226:	3b00      	subs	r3, #0
 8009228:	bf18      	it	ne
 800922a:	2301      	movne	r3, #1
 800922c:	0692      	lsls	r2, r2, #26
 800922e:	d42b      	bmi.n	8009288 <_printf_common+0xb0>
 8009230:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009234:	4641      	mov	r1, r8
 8009236:	4638      	mov	r0, r7
 8009238:	47c8      	blx	r9
 800923a:	3001      	adds	r0, #1
 800923c:	d01e      	beq.n	800927c <_printf_common+0xa4>
 800923e:	6823      	ldr	r3, [r4, #0]
 8009240:	6922      	ldr	r2, [r4, #16]
 8009242:	f003 0306 	and.w	r3, r3, #6
 8009246:	2b04      	cmp	r3, #4
 8009248:	bf02      	ittt	eq
 800924a:	68e5      	ldreq	r5, [r4, #12]
 800924c:	6833      	ldreq	r3, [r6, #0]
 800924e:	1aed      	subeq	r5, r5, r3
 8009250:	68a3      	ldr	r3, [r4, #8]
 8009252:	bf0c      	ite	eq
 8009254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009258:	2500      	movne	r5, #0
 800925a:	4293      	cmp	r3, r2
 800925c:	bfc4      	itt	gt
 800925e:	1a9b      	subgt	r3, r3, r2
 8009260:	18ed      	addgt	r5, r5, r3
 8009262:	2600      	movs	r6, #0
 8009264:	341a      	adds	r4, #26
 8009266:	42b5      	cmp	r5, r6
 8009268:	d11a      	bne.n	80092a0 <_printf_common+0xc8>
 800926a:	2000      	movs	r0, #0
 800926c:	e008      	b.n	8009280 <_printf_common+0xa8>
 800926e:	2301      	movs	r3, #1
 8009270:	4652      	mov	r2, sl
 8009272:	4641      	mov	r1, r8
 8009274:	4638      	mov	r0, r7
 8009276:	47c8      	blx	r9
 8009278:	3001      	adds	r0, #1
 800927a:	d103      	bne.n	8009284 <_printf_common+0xac>
 800927c:	f04f 30ff 	mov.w	r0, #4294967295
 8009280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009284:	3501      	adds	r5, #1
 8009286:	e7c6      	b.n	8009216 <_printf_common+0x3e>
 8009288:	18e1      	adds	r1, r4, r3
 800928a:	1c5a      	adds	r2, r3, #1
 800928c:	2030      	movs	r0, #48	@ 0x30
 800928e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009292:	4422      	add	r2, r4
 8009294:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009298:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800929c:	3302      	adds	r3, #2
 800929e:	e7c7      	b.n	8009230 <_printf_common+0x58>
 80092a0:	2301      	movs	r3, #1
 80092a2:	4622      	mov	r2, r4
 80092a4:	4641      	mov	r1, r8
 80092a6:	4638      	mov	r0, r7
 80092a8:	47c8      	blx	r9
 80092aa:	3001      	adds	r0, #1
 80092ac:	d0e6      	beq.n	800927c <_printf_common+0xa4>
 80092ae:	3601      	adds	r6, #1
 80092b0:	e7d9      	b.n	8009266 <_printf_common+0x8e>
	...

080092b4 <_printf_i>:
 80092b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092b8:	7e0f      	ldrb	r7, [r1, #24]
 80092ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80092bc:	2f78      	cmp	r7, #120	@ 0x78
 80092be:	4691      	mov	r9, r2
 80092c0:	4680      	mov	r8, r0
 80092c2:	460c      	mov	r4, r1
 80092c4:	469a      	mov	sl, r3
 80092c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80092ca:	d807      	bhi.n	80092dc <_printf_i+0x28>
 80092cc:	2f62      	cmp	r7, #98	@ 0x62
 80092ce:	d80a      	bhi.n	80092e6 <_printf_i+0x32>
 80092d0:	2f00      	cmp	r7, #0
 80092d2:	f000 80d2 	beq.w	800947a <_printf_i+0x1c6>
 80092d6:	2f58      	cmp	r7, #88	@ 0x58
 80092d8:	f000 80b9 	beq.w	800944e <_printf_i+0x19a>
 80092dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092e4:	e03a      	b.n	800935c <_printf_i+0xa8>
 80092e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092ea:	2b15      	cmp	r3, #21
 80092ec:	d8f6      	bhi.n	80092dc <_printf_i+0x28>
 80092ee:	a101      	add	r1, pc, #4	@ (adr r1, 80092f4 <_printf_i+0x40>)
 80092f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092f4:	0800934d 	.word	0x0800934d
 80092f8:	08009361 	.word	0x08009361
 80092fc:	080092dd 	.word	0x080092dd
 8009300:	080092dd 	.word	0x080092dd
 8009304:	080092dd 	.word	0x080092dd
 8009308:	080092dd 	.word	0x080092dd
 800930c:	08009361 	.word	0x08009361
 8009310:	080092dd 	.word	0x080092dd
 8009314:	080092dd 	.word	0x080092dd
 8009318:	080092dd 	.word	0x080092dd
 800931c:	080092dd 	.word	0x080092dd
 8009320:	08009461 	.word	0x08009461
 8009324:	0800938b 	.word	0x0800938b
 8009328:	0800941b 	.word	0x0800941b
 800932c:	080092dd 	.word	0x080092dd
 8009330:	080092dd 	.word	0x080092dd
 8009334:	08009483 	.word	0x08009483
 8009338:	080092dd 	.word	0x080092dd
 800933c:	0800938b 	.word	0x0800938b
 8009340:	080092dd 	.word	0x080092dd
 8009344:	080092dd 	.word	0x080092dd
 8009348:	08009423 	.word	0x08009423
 800934c:	6833      	ldr	r3, [r6, #0]
 800934e:	1d1a      	adds	r2, r3, #4
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	6032      	str	r2, [r6, #0]
 8009354:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009358:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800935c:	2301      	movs	r3, #1
 800935e:	e09d      	b.n	800949c <_printf_i+0x1e8>
 8009360:	6833      	ldr	r3, [r6, #0]
 8009362:	6820      	ldr	r0, [r4, #0]
 8009364:	1d19      	adds	r1, r3, #4
 8009366:	6031      	str	r1, [r6, #0]
 8009368:	0606      	lsls	r6, r0, #24
 800936a:	d501      	bpl.n	8009370 <_printf_i+0xbc>
 800936c:	681d      	ldr	r5, [r3, #0]
 800936e:	e003      	b.n	8009378 <_printf_i+0xc4>
 8009370:	0645      	lsls	r5, r0, #25
 8009372:	d5fb      	bpl.n	800936c <_printf_i+0xb8>
 8009374:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009378:	2d00      	cmp	r5, #0
 800937a:	da03      	bge.n	8009384 <_printf_i+0xd0>
 800937c:	232d      	movs	r3, #45	@ 0x2d
 800937e:	426d      	negs	r5, r5
 8009380:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009384:	4859      	ldr	r0, [pc, #356]	@ (80094ec <_printf_i+0x238>)
 8009386:	230a      	movs	r3, #10
 8009388:	e011      	b.n	80093ae <_printf_i+0xfa>
 800938a:	6821      	ldr	r1, [r4, #0]
 800938c:	6833      	ldr	r3, [r6, #0]
 800938e:	0608      	lsls	r0, r1, #24
 8009390:	f853 5b04 	ldr.w	r5, [r3], #4
 8009394:	d402      	bmi.n	800939c <_printf_i+0xe8>
 8009396:	0649      	lsls	r1, r1, #25
 8009398:	bf48      	it	mi
 800939a:	b2ad      	uxthmi	r5, r5
 800939c:	2f6f      	cmp	r7, #111	@ 0x6f
 800939e:	4853      	ldr	r0, [pc, #332]	@ (80094ec <_printf_i+0x238>)
 80093a0:	6033      	str	r3, [r6, #0]
 80093a2:	bf14      	ite	ne
 80093a4:	230a      	movne	r3, #10
 80093a6:	2308      	moveq	r3, #8
 80093a8:	2100      	movs	r1, #0
 80093aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80093ae:	6866      	ldr	r6, [r4, #4]
 80093b0:	60a6      	str	r6, [r4, #8]
 80093b2:	2e00      	cmp	r6, #0
 80093b4:	bfa2      	ittt	ge
 80093b6:	6821      	ldrge	r1, [r4, #0]
 80093b8:	f021 0104 	bicge.w	r1, r1, #4
 80093bc:	6021      	strge	r1, [r4, #0]
 80093be:	b90d      	cbnz	r5, 80093c4 <_printf_i+0x110>
 80093c0:	2e00      	cmp	r6, #0
 80093c2:	d04b      	beq.n	800945c <_printf_i+0x1a8>
 80093c4:	4616      	mov	r6, r2
 80093c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80093ca:	fb03 5711 	mls	r7, r3, r1, r5
 80093ce:	5dc7      	ldrb	r7, [r0, r7]
 80093d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093d4:	462f      	mov	r7, r5
 80093d6:	42bb      	cmp	r3, r7
 80093d8:	460d      	mov	r5, r1
 80093da:	d9f4      	bls.n	80093c6 <_printf_i+0x112>
 80093dc:	2b08      	cmp	r3, #8
 80093de:	d10b      	bne.n	80093f8 <_printf_i+0x144>
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	07df      	lsls	r7, r3, #31
 80093e4:	d508      	bpl.n	80093f8 <_printf_i+0x144>
 80093e6:	6923      	ldr	r3, [r4, #16]
 80093e8:	6861      	ldr	r1, [r4, #4]
 80093ea:	4299      	cmp	r1, r3
 80093ec:	bfde      	ittt	le
 80093ee:	2330      	movle	r3, #48	@ 0x30
 80093f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093f8:	1b92      	subs	r2, r2, r6
 80093fa:	6122      	str	r2, [r4, #16]
 80093fc:	f8cd a000 	str.w	sl, [sp]
 8009400:	464b      	mov	r3, r9
 8009402:	aa03      	add	r2, sp, #12
 8009404:	4621      	mov	r1, r4
 8009406:	4640      	mov	r0, r8
 8009408:	f7ff fee6 	bl	80091d8 <_printf_common>
 800940c:	3001      	adds	r0, #1
 800940e:	d14a      	bne.n	80094a6 <_printf_i+0x1f2>
 8009410:	f04f 30ff 	mov.w	r0, #4294967295
 8009414:	b004      	add	sp, #16
 8009416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800941a:	6823      	ldr	r3, [r4, #0]
 800941c:	f043 0320 	orr.w	r3, r3, #32
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	4833      	ldr	r0, [pc, #204]	@ (80094f0 <_printf_i+0x23c>)
 8009424:	2778      	movs	r7, #120	@ 0x78
 8009426:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800942a:	6823      	ldr	r3, [r4, #0]
 800942c:	6831      	ldr	r1, [r6, #0]
 800942e:	061f      	lsls	r7, r3, #24
 8009430:	f851 5b04 	ldr.w	r5, [r1], #4
 8009434:	d402      	bmi.n	800943c <_printf_i+0x188>
 8009436:	065f      	lsls	r7, r3, #25
 8009438:	bf48      	it	mi
 800943a:	b2ad      	uxthmi	r5, r5
 800943c:	6031      	str	r1, [r6, #0]
 800943e:	07d9      	lsls	r1, r3, #31
 8009440:	bf44      	itt	mi
 8009442:	f043 0320 	orrmi.w	r3, r3, #32
 8009446:	6023      	strmi	r3, [r4, #0]
 8009448:	b11d      	cbz	r5, 8009452 <_printf_i+0x19e>
 800944a:	2310      	movs	r3, #16
 800944c:	e7ac      	b.n	80093a8 <_printf_i+0xf4>
 800944e:	4827      	ldr	r0, [pc, #156]	@ (80094ec <_printf_i+0x238>)
 8009450:	e7e9      	b.n	8009426 <_printf_i+0x172>
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	f023 0320 	bic.w	r3, r3, #32
 8009458:	6023      	str	r3, [r4, #0]
 800945a:	e7f6      	b.n	800944a <_printf_i+0x196>
 800945c:	4616      	mov	r6, r2
 800945e:	e7bd      	b.n	80093dc <_printf_i+0x128>
 8009460:	6833      	ldr	r3, [r6, #0]
 8009462:	6825      	ldr	r5, [r4, #0]
 8009464:	6961      	ldr	r1, [r4, #20]
 8009466:	1d18      	adds	r0, r3, #4
 8009468:	6030      	str	r0, [r6, #0]
 800946a:	062e      	lsls	r6, r5, #24
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	d501      	bpl.n	8009474 <_printf_i+0x1c0>
 8009470:	6019      	str	r1, [r3, #0]
 8009472:	e002      	b.n	800947a <_printf_i+0x1c6>
 8009474:	0668      	lsls	r0, r5, #25
 8009476:	d5fb      	bpl.n	8009470 <_printf_i+0x1bc>
 8009478:	8019      	strh	r1, [r3, #0]
 800947a:	2300      	movs	r3, #0
 800947c:	6123      	str	r3, [r4, #16]
 800947e:	4616      	mov	r6, r2
 8009480:	e7bc      	b.n	80093fc <_printf_i+0x148>
 8009482:	6833      	ldr	r3, [r6, #0]
 8009484:	1d1a      	adds	r2, r3, #4
 8009486:	6032      	str	r2, [r6, #0]
 8009488:	681e      	ldr	r6, [r3, #0]
 800948a:	6862      	ldr	r2, [r4, #4]
 800948c:	2100      	movs	r1, #0
 800948e:	4630      	mov	r0, r6
 8009490:	f7f6 febe 	bl	8000210 <memchr>
 8009494:	b108      	cbz	r0, 800949a <_printf_i+0x1e6>
 8009496:	1b80      	subs	r0, r0, r6
 8009498:	6060      	str	r0, [r4, #4]
 800949a:	6863      	ldr	r3, [r4, #4]
 800949c:	6123      	str	r3, [r4, #16]
 800949e:	2300      	movs	r3, #0
 80094a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094a4:	e7aa      	b.n	80093fc <_printf_i+0x148>
 80094a6:	6923      	ldr	r3, [r4, #16]
 80094a8:	4632      	mov	r2, r6
 80094aa:	4649      	mov	r1, r9
 80094ac:	4640      	mov	r0, r8
 80094ae:	47d0      	blx	sl
 80094b0:	3001      	adds	r0, #1
 80094b2:	d0ad      	beq.n	8009410 <_printf_i+0x15c>
 80094b4:	6823      	ldr	r3, [r4, #0]
 80094b6:	079b      	lsls	r3, r3, #30
 80094b8:	d413      	bmi.n	80094e2 <_printf_i+0x22e>
 80094ba:	68e0      	ldr	r0, [r4, #12]
 80094bc:	9b03      	ldr	r3, [sp, #12]
 80094be:	4298      	cmp	r0, r3
 80094c0:	bfb8      	it	lt
 80094c2:	4618      	movlt	r0, r3
 80094c4:	e7a6      	b.n	8009414 <_printf_i+0x160>
 80094c6:	2301      	movs	r3, #1
 80094c8:	4632      	mov	r2, r6
 80094ca:	4649      	mov	r1, r9
 80094cc:	4640      	mov	r0, r8
 80094ce:	47d0      	blx	sl
 80094d0:	3001      	adds	r0, #1
 80094d2:	d09d      	beq.n	8009410 <_printf_i+0x15c>
 80094d4:	3501      	adds	r5, #1
 80094d6:	68e3      	ldr	r3, [r4, #12]
 80094d8:	9903      	ldr	r1, [sp, #12]
 80094da:	1a5b      	subs	r3, r3, r1
 80094dc:	42ab      	cmp	r3, r5
 80094de:	dcf2      	bgt.n	80094c6 <_printf_i+0x212>
 80094e0:	e7eb      	b.n	80094ba <_printf_i+0x206>
 80094e2:	2500      	movs	r5, #0
 80094e4:	f104 0619 	add.w	r6, r4, #25
 80094e8:	e7f5      	b.n	80094d6 <_printf_i+0x222>
 80094ea:	bf00      	nop
 80094ec:	0800dfaa 	.word	0x0800dfaa
 80094f0:	0800dfbb 	.word	0x0800dfbb

080094f4 <std>:
 80094f4:	2300      	movs	r3, #0
 80094f6:	b510      	push	{r4, lr}
 80094f8:	4604      	mov	r4, r0
 80094fa:	e9c0 3300 	strd	r3, r3, [r0]
 80094fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009502:	6083      	str	r3, [r0, #8]
 8009504:	8181      	strh	r1, [r0, #12]
 8009506:	6643      	str	r3, [r0, #100]	@ 0x64
 8009508:	81c2      	strh	r2, [r0, #14]
 800950a:	6183      	str	r3, [r0, #24]
 800950c:	4619      	mov	r1, r3
 800950e:	2208      	movs	r2, #8
 8009510:	305c      	adds	r0, #92	@ 0x5c
 8009512:	f000 fa19 	bl	8009948 <memset>
 8009516:	4b0d      	ldr	r3, [pc, #52]	@ (800954c <std+0x58>)
 8009518:	6263      	str	r3, [r4, #36]	@ 0x24
 800951a:	4b0d      	ldr	r3, [pc, #52]	@ (8009550 <std+0x5c>)
 800951c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800951e:	4b0d      	ldr	r3, [pc, #52]	@ (8009554 <std+0x60>)
 8009520:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009522:	4b0d      	ldr	r3, [pc, #52]	@ (8009558 <std+0x64>)
 8009524:	6323      	str	r3, [r4, #48]	@ 0x30
 8009526:	4b0d      	ldr	r3, [pc, #52]	@ (800955c <std+0x68>)
 8009528:	6224      	str	r4, [r4, #32]
 800952a:	429c      	cmp	r4, r3
 800952c:	d006      	beq.n	800953c <std+0x48>
 800952e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009532:	4294      	cmp	r4, r2
 8009534:	d002      	beq.n	800953c <std+0x48>
 8009536:	33d0      	adds	r3, #208	@ 0xd0
 8009538:	429c      	cmp	r4, r3
 800953a:	d105      	bne.n	8009548 <std+0x54>
 800953c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009544:	f000 ba7c 	b.w	8009a40 <__retarget_lock_init_recursive>
 8009548:	bd10      	pop	{r4, pc}
 800954a:	bf00      	nop
 800954c:	08009799 	.word	0x08009799
 8009550:	080097bb 	.word	0x080097bb
 8009554:	080097f3 	.word	0x080097f3
 8009558:	08009817 	.word	0x08009817
 800955c:	200131d4 	.word	0x200131d4

08009560 <stdio_exit_handler>:
 8009560:	4a02      	ldr	r2, [pc, #8]	@ (800956c <stdio_exit_handler+0xc>)
 8009562:	4903      	ldr	r1, [pc, #12]	@ (8009570 <stdio_exit_handler+0x10>)
 8009564:	4803      	ldr	r0, [pc, #12]	@ (8009574 <stdio_exit_handler+0x14>)
 8009566:	f000 b869 	b.w	800963c <_fwalk_sglue>
 800956a:	bf00      	nop
 800956c:	2000001c 	.word	0x2000001c
 8009570:	0800b641 	.word	0x0800b641
 8009574:	2000002c 	.word	0x2000002c

08009578 <cleanup_stdio>:
 8009578:	6841      	ldr	r1, [r0, #4]
 800957a:	4b0c      	ldr	r3, [pc, #48]	@ (80095ac <cleanup_stdio+0x34>)
 800957c:	4299      	cmp	r1, r3
 800957e:	b510      	push	{r4, lr}
 8009580:	4604      	mov	r4, r0
 8009582:	d001      	beq.n	8009588 <cleanup_stdio+0x10>
 8009584:	f002 f85c 	bl	800b640 <_fflush_r>
 8009588:	68a1      	ldr	r1, [r4, #8]
 800958a:	4b09      	ldr	r3, [pc, #36]	@ (80095b0 <cleanup_stdio+0x38>)
 800958c:	4299      	cmp	r1, r3
 800958e:	d002      	beq.n	8009596 <cleanup_stdio+0x1e>
 8009590:	4620      	mov	r0, r4
 8009592:	f002 f855 	bl	800b640 <_fflush_r>
 8009596:	68e1      	ldr	r1, [r4, #12]
 8009598:	4b06      	ldr	r3, [pc, #24]	@ (80095b4 <cleanup_stdio+0x3c>)
 800959a:	4299      	cmp	r1, r3
 800959c:	d004      	beq.n	80095a8 <cleanup_stdio+0x30>
 800959e:	4620      	mov	r0, r4
 80095a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095a4:	f002 b84c 	b.w	800b640 <_fflush_r>
 80095a8:	bd10      	pop	{r4, pc}
 80095aa:	bf00      	nop
 80095ac:	200131d4 	.word	0x200131d4
 80095b0:	2001323c 	.word	0x2001323c
 80095b4:	200132a4 	.word	0x200132a4

080095b8 <global_stdio_init.part.0>:
 80095b8:	b510      	push	{r4, lr}
 80095ba:	4b0b      	ldr	r3, [pc, #44]	@ (80095e8 <global_stdio_init.part.0+0x30>)
 80095bc:	4c0b      	ldr	r4, [pc, #44]	@ (80095ec <global_stdio_init.part.0+0x34>)
 80095be:	4a0c      	ldr	r2, [pc, #48]	@ (80095f0 <global_stdio_init.part.0+0x38>)
 80095c0:	601a      	str	r2, [r3, #0]
 80095c2:	4620      	mov	r0, r4
 80095c4:	2200      	movs	r2, #0
 80095c6:	2104      	movs	r1, #4
 80095c8:	f7ff ff94 	bl	80094f4 <std>
 80095cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80095d0:	2201      	movs	r2, #1
 80095d2:	2109      	movs	r1, #9
 80095d4:	f7ff ff8e 	bl	80094f4 <std>
 80095d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80095dc:	2202      	movs	r2, #2
 80095de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095e2:	2112      	movs	r1, #18
 80095e4:	f7ff bf86 	b.w	80094f4 <std>
 80095e8:	2001330c 	.word	0x2001330c
 80095ec:	200131d4 	.word	0x200131d4
 80095f0:	08009561 	.word	0x08009561

080095f4 <__sfp_lock_acquire>:
 80095f4:	4801      	ldr	r0, [pc, #4]	@ (80095fc <__sfp_lock_acquire+0x8>)
 80095f6:	f000 ba24 	b.w	8009a42 <__retarget_lock_acquire_recursive>
 80095fa:	bf00      	nop
 80095fc:	20013315 	.word	0x20013315

08009600 <__sfp_lock_release>:
 8009600:	4801      	ldr	r0, [pc, #4]	@ (8009608 <__sfp_lock_release+0x8>)
 8009602:	f000 ba1f 	b.w	8009a44 <__retarget_lock_release_recursive>
 8009606:	bf00      	nop
 8009608:	20013315 	.word	0x20013315

0800960c <__sinit>:
 800960c:	b510      	push	{r4, lr}
 800960e:	4604      	mov	r4, r0
 8009610:	f7ff fff0 	bl	80095f4 <__sfp_lock_acquire>
 8009614:	6a23      	ldr	r3, [r4, #32]
 8009616:	b11b      	cbz	r3, 8009620 <__sinit+0x14>
 8009618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800961c:	f7ff bff0 	b.w	8009600 <__sfp_lock_release>
 8009620:	4b04      	ldr	r3, [pc, #16]	@ (8009634 <__sinit+0x28>)
 8009622:	6223      	str	r3, [r4, #32]
 8009624:	4b04      	ldr	r3, [pc, #16]	@ (8009638 <__sinit+0x2c>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d1f5      	bne.n	8009618 <__sinit+0xc>
 800962c:	f7ff ffc4 	bl	80095b8 <global_stdio_init.part.0>
 8009630:	e7f2      	b.n	8009618 <__sinit+0xc>
 8009632:	bf00      	nop
 8009634:	08009579 	.word	0x08009579
 8009638:	2001330c 	.word	0x2001330c

0800963c <_fwalk_sglue>:
 800963c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009640:	4607      	mov	r7, r0
 8009642:	4688      	mov	r8, r1
 8009644:	4614      	mov	r4, r2
 8009646:	2600      	movs	r6, #0
 8009648:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800964c:	f1b9 0901 	subs.w	r9, r9, #1
 8009650:	d505      	bpl.n	800965e <_fwalk_sglue+0x22>
 8009652:	6824      	ldr	r4, [r4, #0]
 8009654:	2c00      	cmp	r4, #0
 8009656:	d1f7      	bne.n	8009648 <_fwalk_sglue+0xc>
 8009658:	4630      	mov	r0, r6
 800965a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800965e:	89ab      	ldrh	r3, [r5, #12]
 8009660:	2b01      	cmp	r3, #1
 8009662:	d907      	bls.n	8009674 <_fwalk_sglue+0x38>
 8009664:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009668:	3301      	adds	r3, #1
 800966a:	d003      	beq.n	8009674 <_fwalk_sglue+0x38>
 800966c:	4629      	mov	r1, r5
 800966e:	4638      	mov	r0, r7
 8009670:	47c0      	blx	r8
 8009672:	4306      	orrs	r6, r0
 8009674:	3568      	adds	r5, #104	@ 0x68
 8009676:	e7e9      	b.n	800964c <_fwalk_sglue+0x10>

08009678 <iprintf>:
 8009678:	b40f      	push	{r0, r1, r2, r3}
 800967a:	b507      	push	{r0, r1, r2, lr}
 800967c:	4906      	ldr	r1, [pc, #24]	@ (8009698 <iprintf+0x20>)
 800967e:	ab04      	add	r3, sp, #16
 8009680:	6808      	ldr	r0, [r1, #0]
 8009682:	f853 2b04 	ldr.w	r2, [r3], #4
 8009686:	6881      	ldr	r1, [r0, #8]
 8009688:	9301      	str	r3, [sp, #4]
 800968a:	f001 fe3d 	bl	800b308 <_vfiprintf_r>
 800968e:	b003      	add	sp, #12
 8009690:	f85d eb04 	ldr.w	lr, [sp], #4
 8009694:	b004      	add	sp, #16
 8009696:	4770      	bx	lr
 8009698:	20000028 	.word	0x20000028

0800969c <_puts_r>:
 800969c:	6a03      	ldr	r3, [r0, #32]
 800969e:	b570      	push	{r4, r5, r6, lr}
 80096a0:	6884      	ldr	r4, [r0, #8]
 80096a2:	4605      	mov	r5, r0
 80096a4:	460e      	mov	r6, r1
 80096a6:	b90b      	cbnz	r3, 80096ac <_puts_r+0x10>
 80096a8:	f7ff ffb0 	bl	800960c <__sinit>
 80096ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096ae:	07db      	lsls	r3, r3, #31
 80096b0:	d405      	bmi.n	80096be <_puts_r+0x22>
 80096b2:	89a3      	ldrh	r3, [r4, #12]
 80096b4:	0598      	lsls	r0, r3, #22
 80096b6:	d402      	bmi.n	80096be <_puts_r+0x22>
 80096b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096ba:	f000 f9c2 	bl	8009a42 <__retarget_lock_acquire_recursive>
 80096be:	89a3      	ldrh	r3, [r4, #12]
 80096c0:	0719      	lsls	r1, r3, #28
 80096c2:	d502      	bpl.n	80096ca <_puts_r+0x2e>
 80096c4:	6923      	ldr	r3, [r4, #16]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d135      	bne.n	8009736 <_puts_r+0x9a>
 80096ca:	4621      	mov	r1, r4
 80096cc:	4628      	mov	r0, r5
 80096ce:	f000 f8e5 	bl	800989c <__swsetup_r>
 80096d2:	b380      	cbz	r0, 8009736 <_puts_r+0x9a>
 80096d4:	f04f 35ff 	mov.w	r5, #4294967295
 80096d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096da:	07da      	lsls	r2, r3, #31
 80096dc:	d405      	bmi.n	80096ea <_puts_r+0x4e>
 80096de:	89a3      	ldrh	r3, [r4, #12]
 80096e0:	059b      	lsls	r3, r3, #22
 80096e2:	d402      	bmi.n	80096ea <_puts_r+0x4e>
 80096e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096e6:	f000 f9ad 	bl	8009a44 <__retarget_lock_release_recursive>
 80096ea:	4628      	mov	r0, r5
 80096ec:	bd70      	pop	{r4, r5, r6, pc}
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	da04      	bge.n	80096fc <_puts_r+0x60>
 80096f2:	69a2      	ldr	r2, [r4, #24]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	dc17      	bgt.n	8009728 <_puts_r+0x8c>
 80096f8:	290a      	cmp	r1, #10
 80096fa:	d015      	beq.n	8009728 <_puts_r+0x8c>
 80096fc:	6823      	ldr	r3, [r4, #0]
 80096fe:	1c5a      	adds	r2, r3, #1
 8009700:	6022      	str	r2, [r4, #0]
 8009702:	7019      	strb	r1, [r3, #0]
 8009704:	68a3      	ldr	r3, [r4, #8]
 8009706:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800970a:	3b01      	subs	r3, #1
 800970c:	60a3      	str	r3, [r4, #8]
 800970e:	2900      	cmp	r1, #0
 8009710:	d1ed      	bne.n	80096ee <_puts_r+0x52>
 8009712:	2b00      	cmp	r3, #0
 8009714:	da11      	bge.n	800973a <_puts_r+0x9e>
 8009716:	4622      	mov	r2, r4
 8009718:	210a      	movs	r1, #10
 800971a:	4628      	mov	r0, r5
 800971c:	f000 f87f 	bl	800981e <__swbuf_r>
 8009720:	3001      	adds	r0, #1
 8009722:	d0d7      	beq.n	80096d4 <_puts_r+0x38>
 8009724:	250a      	movs	r5, #10
 8009726:	e7d7      	b.n	80096d8 <_puts_r+0x3c>
 8009728:	4622      	mov	r2, r4
 800972a:	4628      	mov	r0, r5
 800972c:	f000 f877 	bl	800981e <__swbuf_r>
 8009730:	3001      	adds	r0, #1
 8009732:	d1e7      	bne.n	8009704 <_puts_r+0x68>
 8009734:	e7ce      	b.n	80096d4 <_puts_r+0x38>
 8009736:	3e01      	subs	r6, #1
 8009738:	e7e4      	b.n	8009704 <_puts_r+0x68>
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	1c5a      	adds	r2, r3, #1
 800973e:	6022      	str	r2, [r4, #0]
 8009740:	220a      	movs	r2, #10
 8009742:	701a      	strb	r2, [r3, #0]
 8009744:	e7ee      	b.n	8009724 <_puts_r+0x88>
	...

08009748 <puts>:
 8009748:	4b02      	ldr	r3, [pc, #8]	@ (8009754 <puts+0xc>)
 800974a:	4601      	mov	r1, r0
 800974c:	6818      	ldr	r0, [r3, #0]
 800974e:	f7ff bfa5 	b.w	800969c <_puts_r>
 8009752:	bf00      	nop
 8009754:	20000028 	.word	0x20000028

08009758 <siprintf>:
 8009758:	b40e      	push	{r1, r2, r3}
 800975a:	b500      	push	{lr}
 800975c:	b09c      	sub	sp, #112	@ 0x70
 800975e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009760:	9002      	str	r0, [sp, #8]
 8009762:	9006      	str	r0, [sp, #24]
 8009764:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009768:	4809      	ldr	r0, [pc, #36]	@ (8009790 <siprintf+0x38>)
 800976a:	9107      	str	r1, [sp, #28]
 800976c:	9104      	str	r1, [sp, #16]
 800976e:	4909      	ldr	r1, [pc, #36]	@ (8009794 <siprintf+0x3c>)
 8009770:	f853 2b04 	ldr.w	r2, [r3], #4
 8009774:	9105      	str	r1, [sp, #20]
 8009776:	6800      	ldr	r0, [r0, #0]
 8009778:	9301      	str	r3, [sp, #4]
 800977a:	a902      	add	r1, sp, #8
 800977c:	f001 fc9e 	bl	800b0bc <_svfiprintf_r>
 8009780:	9b02      	ldr	r3, [sp, #8]
 8009782:	2200      	movs	r2, #0
 8009784:	701a      	strb	r2, [r3, #0]
 8009786:	b01c      	add	sp, #112	@ 0x70
 8009788:	f85d eb04 	ldr.w	lr, [sp], #4
 800978c:	b003      	add	sp, #12
 800978e:	4770      	bx	lr
 8009790:	20000028 	.word	0x20000028
 8009794:	ffff0208 	.word	0xffff0208

08009798 <__sread>:
 8009798:	b510      	push	{r4, lr}
 800979a:	460c      	mov	r4, r1
 800979c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097a0:	f000 f900 	bl	80099a4 <_read_r>
 80097a4:	2800      	cmp	r0, #0
 80097a6:	bfab      	itete	ge
 80097a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80097aa:	89a3      	ldrhlt	r3, [r4, #12]
 80097ac:	181b      	addge	r3, r3, r0
 80097ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80097b2:	bfac      	ite	ge
 80097b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80097b6:	81a3      	strhlt	r3, [r4, #12]
 80097b8:	bd10      	pop	{r4, pc}

080097ba <__swrite>:
 80097ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097be:	461f      	mov	r7, r3
 80097c0:	898b      	ldrh	r3, [r1, #12]
 80097c2:	05db      	lsls	r3, r3, #23
 80097c4:	4605      	mov	r5, r0
 80097c6:	460c      	mov	r4, r1
 80097c8:	4616      	mov	r6, r2
 80097ca:	d505      	bpl.n	80097d8 <__swrite+0x1e>
 80097cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097d0:	2302      	movs	r3, #2
 80097d2:	2200      	movs	r2, #0
 80097d4:	f000 f8d4 	bl	8009980 <_lseek_r>
 80097d8:	89a3      	ldrh	r3, [r4, #12]
 80097da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80097e2:	81a3      	strh	r3, [r4, #12]
 80097e4:	4632      	mov	r2, r6
 80097e6:	463b      	mov	r3, r7
 80097e8:	4628      	mov	r0, r5
 80097ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097ee:	f000 b8eb 	b.w	80099c8 <_write_r>

080097f2 <__sseek>:
 80097f2:	b510      	push	{r4, lr}
 80097f4:	460c      	mov	r4, r1
 80097f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097fa:	f000 f8c1 	bl	8009980 <_lseek_r>
 80097fe:	1c43      	adds	r3, r0, #1
 8009800:	89a3      	ldrh	r3, [r4, #12]
 8009802:	bf15      	itete	ne
 8009804:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009806:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800980a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800980e:	81a3      	strheq	r3, [r4, #12]
 8009810:	bf18      	it	ne
 8009812:	81a3      	strhne	r3, [r4, #12]
 8009814:	bd10      	pop	{r4, pc}

08009816 <__sclose>:
 8009816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800981a:	f000 b8a1 	b.w	8009960 <_close_r>

0800981e <__swbuf_r>:
 800981e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009820:	460e      	mov	r6, r1
 8009822:	4614      	mov	r4, r2
 8009824:	4605      	mov	r5, r0
 8009826:	b118      	cbz	r0, 8009830 <__swbuf_r+0x12>
 8009828:	6a03      	ldr	r3, [r0, #32]
 800982a:	b90b      	cbnz	r3, 8009830 <__swbuf_r+0x12>
 800982c:	f7ff feee 	bl	800960c <__sinit>
 8009830:	69a3      	ldr	r3, [r4, #24]
 8009832:	60a3      	str	r3, [r4, #8]
 8009834:	89a3      	ldrh	r3, [r4, #12]
 8009836:	071a      	lsls	r2, r3, #28
 8009838:	d501      	bpl.n	800983e <__swbuf_r+0x20>
 800983a:	6923      	ldr	r3, [r4, #16]
 800983c:	b943      	cbnz	r3, 8009850 <__swbuf_r+0x32>
 800983e:	4621      	mov	r1, r4
 8009840:	4628      	mov	r0, r5
 8009842:	f000 f82b 	bl	800989c <__swsetup_r>
 8009846:	b118      	cbz	r0, 8009850 <__swbuf_r+0x32>
 8009848:	f04f 37ff 	mov.w	r7, #4294967295
 800984c:	4638      	mov	r0, r7
 800984e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009850:	6823      	ldr	r3, [r4, #0]
 8009852:	6922      	ldr	r2, [r4, #16]
 8009854:	1a98      	subs	r0, r3, r2
 8009856:	6963      	ldr	r3, [r4, #20]
 8009858:	b2f6      	uxtb	r6, r6
 800985a:	4283      	cmp	r3, r0
 800985c:	4637      	mov	r7, r6
 800985e:	dc05      	bgt.n	800986c <__swbuf_r+0x4e>
 8009860:	4621      	mov	r1, r4
 8009862:	4628      	mov	r0, r5
 8009864:	f001 feec 	bl	800b640 <_fflush_r>
 8009868:	2800      	cmp	r0, #0
 800986a:	d1ed      	bne.n	8009848 <__swbuf_r+0x2a>
 800986c:	68a3      	ldr	r3, [r4, #8]
 800986e:	3b01      	subs	r3, #1
 8009870:	60a3      	str	r3, [r4, #8]
 8009872:	6823      	ldr	r3, [r4, #0]
 8009874:	1c5a      	adds	r2, r3, #1
 8009876:	6022      	str	r2, [r4, #0]
 8009878:	701e      	strb	r6, [r3, #0]
 800987a:	6962      	ldr	r2, [r4, #20]
 800987c:	1c43      	adds	r3, r0, #1
 800987e:	429a      	cmp	r2, r3
 8009880:	d004      	beq.n	800988c <__swbuf_r+0x6e>
 8009882:	89a3      	ldrh	r3, [r4, #12]
 8009884:	07db      	lsls	r3, r3, #31
 8009886:	d5e1      	bpl.n	800984c <__swbuf_r+0x2e>
 8009888:	2e0a      	cmp	r6, #10
 800988a:	d1df      	bne.n	800984c <__swbuf_r+0x2e>
 800988c:	4621      	mov	r1, r4
 800988e:	4628      	mov	r0, r5
 8009890:	f001 fed6 	bl	800b640 <_fflush_r>
 8009894:	2800      	cmp	r0, #0
 8009896:	d0d9      	beq.n	800984c <__swbuf_r+0x2e>
 8009898:	e7d6      	b.n	8009848 <__swbuf_r+0x2a>
	...

0800989c <__swsetup_r>:
 800989c:	b538      	push	{r3, r4, r5, lr}
 800989e:	4b29      	ldr	r3, [pc, #164]	@ (8009944 <__swsetup_r+0xa8>)
 80098a0:	4605      	mov	r5, r0
 80098a2:	6818      	ldr	r0, [r3, #0]
 80098a4:	460c      	mov	r4, r1
 80098a6:	b118      	cbz	r0, 80098b0 <__swsetup_r+0x14>
 80098a8:	6a03      	ldr	r3, [r0, #32]
 80098aa:	b90b      	cbnz	r3, 80098b0 <__swsetup_r+0x14>
 80098ac:	f7ff feae 	bl	800960c <__sinit>
 80098b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098b4:	0719      	lsls	r1, r3, #28
 80098b6:	d422      	bmi.n	80098fe <__swsetup_r+0x62>
 80098b8:	06da      	lsls	r2, r3, #27
 80098ba:	d407      	bmi.n	80098cc <__swsetup_r+0x30>
 80098bc:	2209      	movs	r2, #9
 80098be:	602a      	str	r2, [r5, #0]
 80098c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098c4:	81a3      	strh	r3, [r4, #12]
 80098c6:	f04f 30ff 	mov.w	r0, #4294967295
 80098ca:	e033      	b.n	8009934 <__swsetup_r+0x98>
 80098cc:	0758      	lsls	r0, r3, #29
 80098ce:	d512      	bpl.n	80098f6 <__swsetup_r+0x5a>
 80098d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098d2:	b141      	cbz	r1, 80098e6 <__swsetup_r+0x4a>
 80098d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098d8:	4299      	cmp	r1, r3
 80098da:	d002      	beq.n	80098e2 <__swsetup_r+0x46>
 80098dc:	4628      	mov	r0, r5
 80098de:	f000 ff0f 	bl	800a700 <_free_r>
 80098e2:	2300      	movs	r3, #0
 80098e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80098e6:	89a3      	ldrh	r3, [r4, #12]
 80098e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80098ec:	81a3      	strh	r3, [r4, #12]
 80098ee:	2300      	movs	r3, #0
 80098f0:	6063      	str	r3, [r4, #4]
 80098f2:	6923      	ldr	r3, [r4, #16]
 80098f4:	6023      	str	r3, [r4, #0]
 80098f6:	89a3      	ldrh	r3, [r4, #12]
 80098f8:	f043 0308 	orr.w	r3, r3, #8
 80098fc:	81a3      	strh	r3, [r4, #12]
 80098fe:	6923      	ldr	r3, [r4, #16]
 8009900:	b94b      	cbnz	r3, 8009916 <__swsetup_r+0x7a>
 8009902:	89a3      	ldrh	r3, [r4, #12]
 8009904:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800990c:	d003      	beq.n	8009916 <__swsetup_r+0x7a>
 800990e:	4621      	mov	r1, r4
 8009910:	4628      	mov	r0, r5
 8009912:	f001 fee3 	bl	800b6dc <__smakebuf_r>
 8009916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800991a:	f013 0201 	ands.w	r2, r3, #1
 800991e:	d00a      	beq.n	8009936 <__swsetup_r+0x9a>
 8009920:	2200      	movs	r2, #0
 8009922:	60a2      	str	r2, [r4, #8]
 8009924:	6962      	ldr	r2, [r4, #20]
 8009926:	4252      	negs	r2, r2
 8009928:	61a2      	str	r2, [r4, #24]
 800992a:	6922      	ldr	r2, [r4, #16]
 800992c:	b942      	cbnz	r2, 8009940 <__swsetup_r+0xa4>
 800992e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009932:	d1c5      	bne.n	80098c0 <__swsetup_r+0x24>
 8009934:	bd38      	pop	{r3, r4, r5, pc}
 8009936:	0799      	lsls	r1, r3, #30
 8009938:	bf58      	it	pl
 800993a:	6962      	ldrpl	r2, [r4, #20]
 800993c:	60a2      	str	r2, [r4, #8]
 800993e:	e7f4      	b.n	800992a <__swsetup_r+0x8e>
 8009940:	2000      	movs	r0, #0
 8009942:	e7f7      	b.n	8009934 <__swsetup_r+0x98>
 8009944:	20000028 	.word	0x20000028

08009948 <memset>:
 8009948:	4402      	add	r2, r0
 800994a:	4603      	mov	r3, r0
 800994c:	4293      	cmp	r3, r2
 800994e:	d100      	bne.n	8009952 <memset+0xa>
 8009950:	4770      	bx	lr
 8009952:	f803 1b01 	strb.w	r1, [r3], #1
 8009956:	e7f9      	b.n	800994c <memset+0x4>

08009958 <_localeconv_r>:
 8009958:	4800      	ldr	r0, [pc, #0]	@ (800995c <_localeconv_r+0x4>)
 800995a:	4770      	bx	lr
 800995c:	20000168 	.word	0x20000168

08009960 <_close_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4d06      	ldr	r5, [pc, #24]	@ (800997c <_close_r+0x1c>)
 8009964:	2300      	movs	r3, #0
 8009966:	4604      	mov	r4, r0
 8009968:	4608      	mov	r0, r1
 800996a:	602b      	str	r3, [r5, #0]
 800996c:	f7f8 fe8e 	bl	800268c <_close>
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	d102      	bne.n	800997a <_close_r+0x1a>
 8009974:	682b      	ldr	r3, [r5, #0]
 8009976:	b103      	cbz	r3, 800997a <_close_r+0x1a>
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	20013310 	.word	0x20013310

08009980 <_lseek_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	4d07      	ldr	r5, [pc, #28]	@ (80099a0 <_lseek_r+0x20>)
 8009984:	4604      	mov	r4, r0
 8009986:	4608      	mov	r0, r1
 8009988:	4611      	mov	r1, r2
 800998a:	2200      	movs	r2, #0
 800998c:	602a      	str	r2, [r5, #0]
 800998e:	461a      	mov	r2, r3
 8009990:	f7f8 fea3 	bl	80026da <_lseek>
 8009994:	1c43      	adds	r3, r0, #1
 8009996:	d102      	bne.n	800999e <_lseek_r+0x1e>
 8009998:	682b      	ldr	r3, [r5, #0]
 800999a:	b103      	cbz	r3, 800999e <_lseek_r+0x1e>
 800999c:	6023      	str	r3, [r4, #0]
 800999e:	bd38      	pop	{r3, r4, r5, pc}
 80099a0:	20013310 	.word	0x20013310

080099a4 <_read_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	4d07      	ldr	r5, [pc, #28]	@ (80099c4 <_read_r+0x20>)
 80099a8:	4604      	mov	r4, r0
 80099aa:	4608      	mov	r0, r1
 80099ac:	4611      	mov	r1, r2
 80099ae:	2200      	movs	r2, #0
 80099b0:	602a      	str	r2, [r5, #0]
 80099b2:	461a      	mov	r2, r3
 80099b4:	f7f8 fe31 	bl	800261a <_read>
 80099b8:	1c43      	adds	r3, r0, #1
 80099ba:	d102      	bne.n	80099c2 <_read_r+0x1e>
 80099bc:	682b      	ldr	r3, [r5, #0]
 80099be:	b103      	cbz	r3, 80099c2 <_read_r+0x1e>
 80099c0:	6023      	str	r3, [r4, #0]
 80099c2:	bd38      	pop	{r3, r4, r5, pc}
 80099c4:	20013310 	.word	0x20013310

080099c8 <_write_r>:
 80099c8:	b538      	push	{r3, r4, r5, lr}
 80099ca:	4d07      	ldr	r5, [pc, #28]	@ (80099e8 <_write_r+0x20>)
 80099cc:	4604      	mov	r4, r0
 80099ce:	4608      	mov	r0, r1
 80099d0:	4611      	mov	r1, r2
 80099d2:	2200      	movs	r2, #0
 80099d4:	602a      	str	r2, [r5, #0]
 80099d6:	461a      	mov	r2, r3
 80099d8:	f7f8 fe3c 	bl	8002654 <_write>
 80099dc:	1c43      	adds	r3, r0, #1
 80099de:	d102      	bne.n	80099e6 <_write_r+0x1e>
 80099e0:	682b      	ldr	r3, [r5, #0]
 80099e2:	b103      	cbz	r3, 80099e6 <_write_r+0x1e>
 80099e4:	6023      	str	r3, [r4, #0]
 80099e6:	bd38      	pop	{r3, r4, r5, pc}
 80099e8:	20013310 	.word	0x20013310

080099ec <__errno>:
 80099ec:	4b01      	ldr	r3, [pc, #4]	@ (80099f4 <__errno+0x8>)
 80099ee:	6818      	ldr	r0, [r3, #0]
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	20000028 	.word	0x20000028

080099f8 <__libc_init_array>:
 80099f8:	b570      	push	{r4, r5, r6, lr}
 80099fa:	4d0d      	ldr	r5, [pc, #52]	@ (8009a30 <__libc_init_array+0x38>)
 80099fc:	4c0d      	ldr	r4, [pc, #52]	@ (8009a34 <__libc_init_array+0x3c>)
 80099fe:	1b64      	subs	r4, r4, r5
 8009a00:	10a4      	asrs	r4, r4, #2
 8009a02:	2600      	movs	r6, #0
 8009a04:	42a6      	cmp	r6, r4
 8009a06:	d109      	bne.n	8009a1c <__libc_init_array+0x24>
 8009a08:	4d0b      	ldr	r5, [pc, #44]	@ (8009a38 <__libc_init_array+0x40>)
 8009a0a:	4c0c      	ldr	r4, [pc, #48]	@ (8009a3c <__libc_init_array+0x44>)
 8009a0c:	f004 f9ce 	bl	800ddac <_init>
 8009a10:	1b64      	subs	r4, r4, r5
 8009a12:	10a4      	asrs	r4, r4, #2
 8009a14:	2600      	movs	r6, #0
 8009a16:	42a6      	cmp	r6, r4
 8009a18:	d105      	bne.n	8009a26 <__libc_init_array+0x2e>
 8009a1a:	bd70      	pop	{r4, r5, r6, pc}
 8009a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a20:	4798      	blx	r3
 8009a22:	3601      	adds	r6, #1
 8009a24:	e7ee      	b.n	8009a04 <__libc_init_array+0xc>
 8009a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a2a:	4798      	blx	r3
 8009a2c:	3601      	adds	r6, #1
 8009a2e:	e7f2      	b.n	8009a16 <__libc_init_array+0x1e>
 8009a30:	0800e588 	.word	0x0800e588
 8009a34:	0800e588 	.word	0x0800e588
 8009a38:	0800e588 	.word	0x0800e588
 8009a3c:	0800e58c 	.word	0x0800e58c

08009a40 <__retarget_lock_init_recursive>:
 8009a40:	4770      	bx	lr

08009a42 <__retarget_lock_acquire_recursive>:
 8009a42:	4770      	bx	lr

08009a44 <__retarget_lock_release_recursive>:
 8009a44:	4770      	bx	lr

08009a46 <memcpy>:
 8009a46:	440a      	add	r2, r1
 8009a48:	4291      	cmp	r1, r2
 8009a4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a4e:	d100      	bne.n	8009a52 <memcpy+0xc>
 8009a50:	4770      	bx	lr
 8009a52:	b510      	push	{r4, lr}
 8009a54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a5c:	4291      	cmp	r1, r2
 8009a5e:	d1f9      	bne.n	8009a54 <memcpy+0xe>
 8009a60:	bd10      	pop	{r4, pc}

08009a62 <quorem>:
 8009a62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a66:	6903      	ldr	r3, [r0, #16]
 8009a68:	690c      	ldr	r4, [r1, #16]
 8009a6a:	42a3      	cmp	r3, r4
 8009a6c:	4607      	mov	r7, r0
 8009a6e:	db7e      	blt.n	8009b6e <quorem+0x10c>
 8009a70:	3c01      	subs	r4, #1
 8009a72:	f101 0814 	add.w	r8, r1, #20
 8009a76:	00a3      	lsls	r3, r4, #2
 8009a78:	f100 0514 	add.w	r5, r0, #20
 8009a7c:	9300      	str	r3, [sp, #0]
 8009a7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a82:	9301      	str	r3, [sp, #4]
 8009a84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a94:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a98:	d32e      	bcc.n	8009af8 <quorem+0x96>
 8009a9a:	f04f 0a00 	mov.w	sl, #0
 8009a9e:	46c4      	mov	ip, r8
 8009aa0:	46ae      	mov	lr, r5
 8009aa2:	46d3      	mov	fp, sl
 8009aa4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009aa8:	b298      	uxth	r0, r3
 8009aaa:	fb06 a000 	mla	r0, r6, r0, sl
 8009aae:	0c02      	lsrs	r2, r0, #16
 8009ab0:	0c1b      	lsrs	r3, r3, #16
 8009ab2:	fb06 2303 	mla	r3, r6, r3, r2
 8009ab6:	f8de 2000 	ldr.w	r2, [lr]
 8009aba:	b280      	uxth	r0, r0
 8009abc:	b292      	uxth	r2, r2
 8009abe:	1a12      	subs	r2, r2, r0
 8009ac0:	445a      	add	r2, fp
 8009ac2:	f8de 0000 	ldr.w	r0, [lr]
 8009ac6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009ad0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009ad4:	b292      	uxth	r2, r2
 8009ad6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009ada:	45e1      	cmp	r9, ip
 8009adc:	f84e 2b04 	str.w	r2, [lr], #4
 8009ae0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009ae4:	d2de      	bcs.n	8009aa4 <quorem+0x42>
 8009ae6:	9b00      	ldr	r3, [sp, #0]
 8009ae8:	58eb      	ldr	r3, [r5, r3]
 8009aea:	b92b      	cbnz	r3, 8009af8 <quorem+0x96>
 8009aec:	9b01      	ldr	r3, [sp, #4]
 8009aee:	3b04      	subs	r3, #4
 8009af0:	429d      	cmp	r5, r3
 8009af2:	461a      	mov	r2, r3
 8009af4:	d32f      	bcc.n	8009b56 <quorem+0xf4>
 8009af6:	613c      	str	r4, [r7, #16]
 8009af8:	4638      	mov	r0, r7
 8009afa:	f001 f97b 	bl	800adf4 <__mcmp>
 8009afe:	2800      	cmp	r0, #0
 8009b00:	db25      	blt.n	8009b4e <quorem+0xec>
 8009b02:	4629      	mov	r1, r5
 8009b04:	2000      	movs	r0, #0
 8009b06:	f858 2b04 	ldr.w	r2, [r8], #4
 8009b0a:	f8d1 c000 	ldr.w	ip, [r1]
 8009b0e:	fa1f fe82 	uxth.w	lr, r2
 8009b12:	fa1f f38c 	uxth.w	r3, ip
 8009b16:	eba3 030e 	sub.w	r3, r3, lr
 8009b1a:	4403      	add	r3, r0
 8009b1c:	0c12      	lsrs	r2, r2, #16
 8009b1e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009b22:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b2c:	45c1      	cmp	r9, r8
 8009b2e:	f841 3b04 	str.w	r3, [r1], #4
 8009b32:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009b36:	d2e6      	bcs.n	8009b06 <quorem+0xa4>
 8009b38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b40:	b922      	cbnz	r2, 8009b4c <quorem+0xea>
 8009b42:	3b04      	subs	r3, #4
 8009b44:	429d      	cmp	r5, r3
 8009b46:	461a      	mov	r2, r3
 8009b48:	d30b      	bcc.n	8009b62 <quorem+0x100>
 8009b4a:	613c      	str	r4, [r7, #16]
 8009b4c:	3601      	adds	r6, #1
 8009b4e:	4630      	mov	r0, r6
 8009b50:	b003      	add	sp, #12
 8009b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b56:	6812      	ldr	r2, [r2, #0]
 8009b58:	3b04      	subs	r3, #4
 8009b5a:	2a00      	cmp	r2, #0
 8009b5c:	d1cb      	bne.n	8009af6 <quorem+0x94>
 8009b5e:	3c01      	subs	r4, #1
 8009b60:	e7c6      	b.n	8009af0 <quorem+0x8e>
 8009b62:	6812      	ldr	r2, [r2, #0]
 8009b64:	3b04      	subs	r3, #4
 8009b66:	2a00      	cmp	r2, #0
 8009b68:	d1ef      	bne.n	8009b4a <quorem+0xe8>
 8009b6a:	3c01      	subs	r4, #1
 8009b6c:	e7ea      	b.n	8009b44 <quorem+0xe2>
 8009b6e:	2000      	movs	r0, #0
 8009b70:	e7ee      	b.n	8009b50 <quorem+0xee>
 8009b72:	0000      	movs	r0, r0
 8009b74:	0000      	movs	r0, r0
	...

08009b78 <_dtoa_r>:
 8009b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b7c:	69c7      	ldr	r7, [r0, #28]
 8009b7e:	b099      	sub	sp, #100	@ 0x64
 8009b80:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009b84:	ec55 4b10 	vmov	r4, r5, d0
 8009b88:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009b8a:	9109      	str	r1, [sp, #36]	@ 0x24
 8009b8c:	4683      	mov	fp, r0
 8009b8e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b90:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b92:	b97f      	cbnz	r7, 8009bb4 <_dtoa_r+0x3c>
 8009b94:	2010      	movs	r0, #16
 8009b96:	f000 fdfd 	bl	800a794 <malloc>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009ba0:	b920      	cbnz	r0, 8009bac <_dtoa_r+0x34>
 8009ba2:	4ba7      	ldr	r3, [pc, #668]	@ (8009e40 <_dtoa_r+0x2c8>)
 8009ba4:	21ef      	movs	r1, #239	@ 0xef
 8009ba6:	48a7      	ldr	r0, [pc, #668]	@ (8009e44 <_dtoa_r+0x2cc>)
 8009ba8:	f001 fe20 	bl	800b7ec <__assert_func>
 8009bac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009bb0:	6007      	str	r7, [r0, #0]
 8009bb2:	60c7      	str	r7, [r0, #12]
 8009bb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009bb8:	6819      	ldr	r1, [r3, #0]
 8009bba:	b159      	cbz	r1, 8009bd4 <_dtoa_r+0x5c>
 8009bbc:	685a      	ldr	r2, [r3, #4]
 8009bbe:	604a      	str	r2, [r1, #4]
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	4093      	lsls	r3, r2
 8009bc4:	608b      	str	r3, [r1, #8]
 8009bc6:	4658      	mov	r0, fp
 8009bc8:	f000 feda 	bl	800a980 <_Bfree>
 8009bcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	601a      	str	r2, [r3, #0]
 8009bd4:	1e2b      	subs	r3, r5, #0
 8009bd6:	bfb9      	ittee	lt
 8009bd8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009bdc:	9303      	strlt	r3, [sp, #12]
 8009bde:	2300      	movge	r3, #0
 8009be0:	6033      	strge	r3, [r6, #0]
 8009be2:	9f03      	ldr	r7, [sp, #12]
 8009be4:	4b98      	ldr	r3, [pc, #608]	@ (8009e48 <_dtoa_r+0x2d0>)
 8009be6:	bfbc      	itt	lt
 8009be8:	2201      	movlt	r2, #1
 8009bea:	6032      	strlt	r2, [r6, #0]
 8009bec:	43bb      	bics	r3, r7
 8009bee:	d112      	bne.n	8009c16 <_dtoa_r+0x9e>
 8009bf0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009bf2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009bf6:	6013      	str	r3, [r2, #0]
 8009bf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009bfc:	4323      	orrs	r3, r4
 8009bfe:	f000 854d 	beq.w	800a69c <_dtoa_r+0xb24>
 8009c02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c04:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009e5c <_dtoa_r+0x2e4>
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f000 854f 	beq.w	800a6ac <_dtoa_r+0xb34>
 8009c0e:	f10a 0303 	add.w	r3, sl, #3
 8009c12:	f000 bd49 	b.w	800a6a8 <_dtoa_r+0xb30>
 8009c16:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	ec51 0b17 	vmov	r0, r1, d7
 8009c20:	2300      	movs	r3, #0
 8009c22:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009c26:	f7f6 ff6f 	bl	8000b08 <__aeabi_dcmpeq>
 8009c2a:	4680      	mov	r8, r0
 8009c2c:	b158      	cbz	r0, 8009c46 <_dtoa_r+0xce>
 8009c2e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009c30:	2301      	movs	r3, #1
 8009c32:	6013      	str	r3, [r2, #0]
 8009c34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c36:	b113      	cbz	r3, 8009c3e <_dtoa_r+0xc6>
 8009c38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009c3a:	4b84      	ldr	r3, [pc, #528]	@ (8009e4c <_dtoa_r+0x2d4>)
 8009c3c:	6013      	str	r3, [r2, #0]
 8009c3e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009e60 <_dtoa_r+0x2e8>
 8009c42:	f000 bd33 	b.w	800a6ac <_dtoa_r+0xb34>
 8009c46:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009c4a:	aa16      	add	r2, sp, #88	@ 0x58
 8009c4c:	a917      	add	r1, sp, #92	@ 0x5c
 8009c4e:	4658      	mov	r0, fp
 8009c50:	f001 f980 	bl	800af54 <__d2b>
 8009c54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009c58:	4681      	mov	r9, r0
 8009c5a:	2e00      	cmp	r6, #0
 8009c5c:	d077      	beq.n	8009d4e <_dtoa_r+0x1d6>
 8009c5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c60:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009c64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009c70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009c74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009c78:	4619      	mov	r1, r3
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	4b74      	ldr	r3, [pc, #464]	@ (8009e50 <_dtoa_r+0x2d8>)
 8009c7e:	f7f6 fb23 	bl	80002c8 <__aeabi_dsub>
 8009c82:	a369      	add	r3, pc, #420	@ (adr r3, 8009e28 <_dtoa_r+0x2b0>)
 8009c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c88:	f7f6 fcd6 	bl	8000638 <__aeabi_dmul>
 8009c8c:	a368      	add	r3, pc, #416	@ (adr r3, 8009e30 <_dtoa_r+0x2b8>)
 8009c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c92:	f7f6 fb1b 	bl	80002cc <__adddf3>
 8009c96:	4604      	mov	r4, r0
 8009c98:	4630      	mov	r0, r6
 8009c9a:	460d      	mov	r5, r1
 8009c9c:	f7f6 fc62 	bl	8000564 <__aeabi_i2d>
 8009ca0:	a365      	add	r3, pc, #404	@ (adr r3, 8009e38 <_dtoa_r+0x2c0>)
 8009ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca6:	f7f6 fcc7 	bl	8000638 <__aeabi_dmul>
 8009caa:	4602      	mov	r2, r0
 8009cac:	460b      	mov	r3, r1
 8009cae:	4620      	mov	r0, r4
 8009cb0:	4629      	mov	r1, r5
 8009cb2:	f7f6 fb0b 	bl	80002cc <__adddf3>
 8009cb6:	4604      	mov	r4, r0
 8009cb8:	460d      	mov	r5, r1
 8009cba:	f7f6 ff6d 	bl	8000b98 <__aeabi_d2iz>
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	4607      	mov	r7, r0
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	4629      	mov	r1, r5
 8009cc8:	f7f6 ff28 	bl	8000b1c <__aeabi_dcmplt>
 8009ccc:	b140      	cbz	r0, 8009ce0 <_dtoa_r+0x168>
 8009cce:	4638      	mov	r0, r7
 8009cd0:	f7f6 fc48 	bl	8000564 <__aeabi_i2d>
 8009cd4:	4622      	mov	r2, r4
 8009cd6:	462b      	mov	r3, r5
 8009cd8:	f7f6 ff16 	bl	8000b08 <__aeabi_dcmpeq>
 8009cdc:	b900      	cbnz	r0, 8009ce0 <_dtoa_r+0x168>
 8009cde:	3f01      	subs	r7, #1
 8009ce0:	2f16      	cmp	r7, #22
 8009ce2:	d851      	bhi.n	8009d88 <_dtoa_r+0x210>
 8009ce4:	4b5b      	ldr	r3, [pc, #364]	@ (8009e54 <_dtoa_r+0x2dc>)
 8009ce6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cf2:	f7f6 ff13 	bl	8000b1c <__aeabi_dcmplt>
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	d048      	beq.n	8009d8c <_dtoa_r+0x214>
 8009cfa:	3f01      	subs	r7, #1
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	9312      	str	r3, [sp, #72]	@ 0x48
 8009d00:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009d02:	1b9b      	subs	r3, r3, r6
 8009d04:	1e5a      	subs	r2, r3, #1
 8009d06:	bf44      	itt	mi
 8009d08:	f1c3 0801 	rsbmi	r8, r3, #1
 8009d0c:	2300      	movmi	r3, #0
 8009d0e:	9208      	str	r2, [sp, #32]
 8009d10:	bf54      	ite	pl
 8009d12:	f04f 0800 	movpl.w	r8, #0
 8009d16:	9308      	strmi	r3, [sp, #32]
 8009d18:	2f00      	cmp	r7, #0
 8009d1a:	db39      	blt.n	8009d90 <_dtoa_r+0x218>
 8009d1c:	9b08      	ldr	r3, [sp, #32]
 8009d1e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009d20:	443b      	add	r3, r7
 8009d22:	9308      	str	r3, [sp, #32]
 8009d24:	2300      	movs	r3, #0
 8009d26:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d2a:	2b09      	cmp	r3, #9
 8009d2c:	d864      	bhi.n	8009df8 <_dtoa_r+0x280>
 8009d2e:	2b05      	cmp	r3, #5
 8009d30:	bfc4      	itt	gt
 8009d32:	3b04      	subgt	r3, #4
 8009d34:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d38:	f1a3 0302 	sub.w	r3, r3, #2
 8009d3c:	bfcc      	ite	gt
 8009d3e:	2400      	movgt	r4, #0
 8009d40:	2401      	movle	r4, #1
 8009d42:	2b03      	cmp	r3, #3
 8009d44:	d863      	bhi.n	8009e0e <_dtoa_r+0x296>
 8009d46:	e8df f003 	tbb	[pc, r3]
 8009d4a:	372a      	.short	0x372a
 8009d4c:	5535      	.short	0x5535
 8009d4e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009d52:	441e      	add	r6, r3
 8009d54:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009d58:	2b20      	cmp	r3, #32
 8009d5a:	bfc1      	itttt	gt
 8009d5c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009d60:	409f      	lslgt	r7, r3
 8009d62:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009d66:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009d6a:	bfd6      	itet	le
 8009d6c:	f1c3 0320 	rsble	r3, r3, #32
 8009d70:	ea47 0003 	orrgt.w	r0, r7, r3
 8009d74:	fa04 f003 	lslle.w	r0, r4, r3
 8009d78:	f7f6 fbe4 	bl	8000544 <__aeabi_ui2d>
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009d82:	3e01      	subs	r6, #1
 8009d84:	9214      	str	r2, [sp, #80]	@ 0x50
 8009d86:	e777      	b.n	8009c78 <_dtoa_r+0x100>
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e7b8      	b.n	8009cfe <_dtoa_r+0x186>
 8009d8c:	9012      	str	r0, [sp, #72]	@ 0x48
 8009d8e:	e7b7      	b.n	8009d00 <_dtoa_r+0x188>
 8009d90:	427b      	negs	r3, r7
 8009d92:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d94:	2300      	movs	r3, #0
 8009d96:	eba8 0807 	sub.w	r8, r8, r7
 8009d9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009d9c:	e7c4      	b.n	8009d28 <_dtoa_r+0x1b0>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009da2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	dc35      	bgt.n	8009e14 <_dtoa_r+0x29c>
 8009da8:	2301      	movs	r3, #1
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	9307      	str	r3, [sp, #28]
 8009dae:	461a      	mov	r2, r3
 8009db0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009db2:	e00b      	b.n	8009dcc <_dtoa_r+0x254>
 8009db4:	2301      	movs	r3, #1
 8009db6:	e7f3      	b.n	8009da0 <_dtoa_r+0x228>
 8009db8:	2300      	movs	r3, #0
 8009dba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009dbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dbe:	18fb      	adds	r3, r7, r3
 8009dc0:	9300      	str	r3, [sp, #0]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	9307      	str	r3, [sp, #28]
 8009dc8:	bfb8      	it	lt
 8009dca:	2301      	movlt	r3, #1
 8009dcc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	2204      	movs	r2, #4
 8009dd4:	f102 0514 	add.w	r5, r2, #20
 8009dd8:	429d      	cmp	r5, r3
 8009dda:	d91f      	bls.n	8009e1c <_dtoa_r+0x2a4>
 8009ddc:	6041      	str	r1, [r0, #4]
 8009dde:	4658      	mov	r0, fp
 8009de0:	f000 fd8e 	bl	800a900 <_Balloc>
 8009de4:	4682      	mov	sl, r0
 8009de6:	2800      	cmp	r0, #0
 8009de8:	d13c      	bne.n	8009e64 <_dtoa_r+0x2ec>
 8009dea:	4b1b      	ldr	r3, [pc, #108]	@ (8009e58 <_dtoa_r+0x2e0>)
 8009dec:	4602      	mov	r2, r0
 8009dee:	f240 11af 	movw	r1, #431	@ 0x1af
 8009df2:	e6d8      	b.n	8009ba6 <_dtoa_r+0x2e>
 8009df4:	2301      	movs	r3, #1
 8009df6:	e7e0      	b.n	8009dba <_dtoa_r+0x242>
 8009df8:	2401      	movs	r4, #1
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dfe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009e00:	f04f 33ff 	mov.w	r3, #4294967295
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	9307      	str	r3, [sp, #28]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	2312      	movs	r3, #18
 8009e0c:	e7d0      	b.n	8009db0 <_dtoa_r+0x238>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e12:	e7f5      	b.n	8009e00 <_dtoa_r+0x288>
 8009e14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e16:	9300      	str	r3, [sp, #0]
 8009e18:	9307      	str	r3, [sp, #28]
 8009e1a:	e7d7      	b.n	8009dcc <_dtoa_r+0x254>
 8009e1c:	3101      	adds	r1, #1
 8009e1e:	0052      	lsls	r2, r2, #1
 8009e20:	e7d8      	b.n	8009dd4 <_dtoa_r+0x25c>
 8009e22:	bf00      	nop
 8009e24:	f3af 8000 	nop.w
 8009e28:	636f4361 	.word	0x636f4361
 8009e2c:	3fd287a7 	.word	0x3fd287a7
 8009e30:	8b60c8b3 	.word	0x8b60c8b3
 8009e34:	3fc68a28 	.word	0x3fc68a28
 8009e38:	509f79fb 	.word	0x509f79fb
 8009e3c:	3fd34413 	.word	0x3fd34413
 8009e40:	0800dfd9 	.word	0x0800dfd9
 8009e44:	0800dff0 	.word	0x0800dff0
 8009e48:	7ff00000 	.word	0x7ff00000
 8009e4c:	0800dfa9 	.word	0x0800dfa9
 8009e50:	3ff80000 	.word	0x3ff80000
 8009e54:	0800e0e8 	.word	0x0800e0e8
 8009e58:	0800e048 	.word	0x0800e048
 8009e5c:	0800dfd5 	.word	0x0800dfd5
 8009e60:	0800dfa8 	.word	0x0800dfa8
 8009e64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009e68:	6018      	str	r0, [r3, #0]
 8009e6a:	9b07      	ldr	r3, [sp, #28]
 8009e6c:	2b0e      	cmp	r3, #14
 8009e6e:	f200 80a4 	bhi.w	8009fba <_dtoa_r+0x442>
 8009e72:	2c00      	cmp	r4, #0
 8009e74:	f000 80a1 	beq.w	8009fba <_dtoa_r+0x442>
 8009e78:	2f00      	cmp	r7, #0
 8009e7a:	dd33      	ble.n	8009ee4 <_dtoa_r+0x36c>
 8009e7c:	4bad      	ldr	r3, [pc, #692]	@ (800a134 <_dtoa_r+0x5bc>)
 8009e7e:	f007 020f 	and.w	r2, r7, #15
 8009e82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e86:	ed93 7b00 	vldr	d7, [r3]
 8009e8a:	05f8      	lsls	r0, r7, #23
 8009e8c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009e90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009e94:	d516      	bpl.n	8009ec4 <_dtoa_r+0x34c>
 8009e96:	4ba8      	ldr	r3, [pc, #672]	@ (800a138 <_dtoa_r+0x5c0>)
 8009e98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ea0:	f7f6 fcf4 	bl	800088c <__aeabi_ddiv>
 8009ea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ea8:	f004 040f 	and.w	r4, r4, #15
 8009eac:	2603      	movs	r6, #3
 8009eae:	4da2      	ldr	r5, [pc, #648]	@ (800a138 <_dtoa_r+0x5c0>)
 8009eb0:	b954      	cbnz	r4, 8009ec8 <_dtoa_r+0x350>
 8009eb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009eb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eba:	f7f6 fce7 	bl	800088c <__aeabi_ddiv>
 8009ebe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ec2:	e028      	b.n	8009f16 <_dtoa_r+0x39e>
 8009ec4:	2602      	movs	r6, #2
 8009ec6:	e7f2      	b.n	8009eae <_dtoa_r+0x336>
 8009ec8:	07e1      	lsls	r1, r4, #31
 8009eca:	d508      	bpl.n	8009ede <_dtoa_r+0x366>
 8009ecc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ed0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009ed4:	f7f6 fbb0 	bl	8000638 <__aeabi_dmul>
 8009ed8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009edc:	3601      	adds	r6, #1
 8009ede:	1064      	asrs	r4, r4, #1
 8009ee0:	3508      	adds	r5, #8
 8009ee2:	e7e5      	b.n	8009eb0 <_dtoa_r+0x338>
 8009ee4:	f000 80d2 	beq.w	800a08c <_dtoa_r+0x514>
 8009ee8:	427c      	negs	r4, r7
 8009eea:	4b92      	ldr	r3, [pc, #584]	@ (800a134 <_dtoa_r+0x5bc>)
 8009eec:	4d92      	ldr	r5, [pc, #584]	@ (800a138 <_dtoa_r+0x5c0>)
 8009eee:	f004 020f 	and.w	r2, r4, #15
 8009ef2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009efe:	f7f6 fb9b 	bl	8000638 <__aeabi_dmul>
 8009f02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f06:	1124      	asrs	r4, r4, #4
 8009f08:	2300      	movs	r3, #0
 8009f0a:	2602      	movs	r6, #2
 8009f0c:	2c00      	cmp	r4, #0
 8009f0e:	f040 80b2 	bne.w	800a076 <_dtoa_r+0x4fe>
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d1d3      	bne.n	8009ebe <_dtoa_r+0x346>
 8009f16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009f18:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f000 80b7 	beq.w	800a090 <_dtoa_r+0x518>
 8009f22:	4b86      	ldr	r3, [pc, #536]	@ (800a13c <_dtoa_r+0x5c4>)
 8009f24:	2200      	movs	r2, #0
 8009f26:	4620      	mov	r0, r4
 8009f28:	4629      	mov	r1, r5
 8009f2a:	f7f6 fdf7 	bl	8000b1c <__aeabi_dcmplt>
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	f000 80ae 	beq.w	800a090 <_dtoa_r+0x518>
 8009f34:	9b07      	ldr	r3, [sp, #28]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	f000 80aa 	beq.w	800a090 <_dtoa_r+0x518>
 8009f3c:	9b00      	ldr	r3, [sp, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	dd37      	ble.n	8009fb2 <_dtoa_r+0x43a>
 8009f42:	1e7b      	subs	r3, r7, #1
 8009f44:	9304      	str	r3, [sp, #16]
 8009f46:	4620      	mov	r0, r4
 8009f48:	4b7d      	ldr	r3, [pc, #500]	@ (800a140 <_dtoa_r+0x5c8>)
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	f7f6 fb73 	bl	8000638 <__aeabi_dmul>
 8009f52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f56:	9c00      	ldr	r4, [sp, #0]
 8009f58:	3601      	adds	r6, #1
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	f7f6 fb02 	bl	8000564 <__aeabi_i2d>
 8009f60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f64:	f7f6 fb68 	bl	8000638 <__aeabi_dmul>
 8009f68:	4b76      	ldr	r3, [pc, #472]	@ (800a144 <_dtoa_r+0x5cc>)
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f7f6 f9ae 	bl	80002cc <__adddf3>
 8009f70:	4605      	mov	r5, r0
 8009f72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009f76:	2c00      	cmp	r4, #0
 8009f78:	f040 808d 	bne.w	800a096 <_dtoa_r+0x51e>
 8009f7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f80:	4b71      	ldr	r3, [pc, #452]	@ (800a148 <_dtoa_r+0x5d0>)
 8009f82:	2200      	movs	r2, #0
 8009f84:	f7f6 f9a0 	bl	80002c8 <__aeabi_dsub>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f90:	462a      	mov	r2, r5
 8009f92:	4633      	mov	r3, r6
 8009f94:	f7f6 fde0 	bl	8000b58 <__aeabi_dcmpgt>
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	f040 828b 	bne.w	800a4b4 <_dtoa_r+0x93c>
 8009f9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fa2:	462a      	mov	r2, r5
 8009fa4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009fa8:	f7f6 fdb8 	bl	8000b1c <__aeabi_dcmplt>
 8009fac:	2800      	cmp	r0, #0
 8009fae:	f040 8128 	bne.w	800a202 <_dtoa_r+0x68a>
 8009fb2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009fb6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009fba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	f2c0 815a 	blt.w	800a276 <_dtoa_r+0x6fe>
 8009fc2:	2f0e      	cmp	r7, #14
 8009fc4:	f300 8157 	bgt.w	800a276 <_dtoa_r+0x6fe>
 8009fc8:	4b5a      	ldr	r3, [pc, #360]	@ (800a134 <_dtoa_r+0x5bc>)
 8009fca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009fce:	ed93 7b00 	vldr	d7, [r3]
 8009fd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	ed8d 7b00 	vstr	d7, [sp]
 8009fda:	da03      	bge.n	8009fe4 <_dtoa_r+0x46c>
 8009fdc:	9b07      	ldr	r3, [sp, #28]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f340 8101 	ble.w	800a1e6 <_dtoa_r+0x66e>
 8009fe4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009fe8:	4656      	mov	r6, sl
 8009fea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fee:	4620      	mov	r0, r4
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	f7f6 fc4b 	bl	800088c <__aeabi_ddiv>
 8009ff6:	f7f6 fdcf 	bl	8000b98 <__aeabi_d2iz>
 8009ffa:	4680      	mov	r8, r0
 8009ffc:	f7f6 fab2 	bl	8000564 <__aeabi_i2d>
 800a000:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a004:	f7f6 fb18 	bl	8000638 <__aeabi_dmul>
 800a008:	4602      	mov	r2, r0
 800a00a:	460b      	mov	r3, r1
 800a00c:	4620      	mov	r0, r4
 800a00e:	4629      	mov	r1, r5
 800a010:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a014:	f7f6 f958 	bl	80002c8 <__aeabi_dsub>
 800a018:	f806 4b01 	strb.w	r4, [r6], #1
 800a01c:	9d07      	ldr	r5, [sp, #28]
 800a01e:	eba6 040a 	sub.w	r4, r6, sl
 800a022:	42a5      	cmp	r5, r4
 800a024:	4602      	mov	r2, r0
 800a026:	460b      	mov	r3, r1
 800a028:	f040 8117 	bne.w	800a25a <_dtoa_r+0x6e2>
 800a02c:	f7f6 f94e 	bl	80002cc <__adddf3>
 800a030:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a034:	4604      	mov	r4, r0
 800a036:	460d      	mov	r5, r1
 800a038:	f7f6 fd8e 	bl	8000b58 <__aeabi_dcmpgt>
 800a03c:	2800      	cmp	r0, #0
 800a03e:	f040 80f9 	bne.w	800a234 <_dtoa_r+0x6bc>
 800a042:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a046:	4620      	mov	r0, r4
 800a048:	4629      	mov	r1, r5
 800a04a:	f7f6 fd5d 	bl	8000b08 <__aeabi_dcmpeq>
 800a04e:	b118      	cbz	r0, 800a058 <_dtoa_r+0x4e0>
 800a050:	f018 0f01 	tst.w	r8, #1
 800a054:	f040 80ee 	bne.w	800a234 <_dtoa_r+0x6bc>
 800a058:	4649      	mov	r1, r9
 800a05a:	4658      	mov	r0, fp
 800a05c:	f000 fc90 	bl	800a980 <_Bfree>
 800a060:	2300      	movs	r3, #0
 800a062:	7033      	strb	r3, [r6, #0]
 800a064:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a066:	3701      	adds	r7, #1
 800a068:	601f      	str	r7, [r3, #0]
 800a06a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	f000 831d 	beq.w	800a6ac <_dtoa_r+0xb34>
 800a072:	601e      	str	r6, [r3, #0]
 800a074:	e31a      	b.n	800a6ac <_dtoa_r+0xb34>
 800a076:	07e2      	lsls	r2, r4, #31
 800a078:	d505      	bpl.n	800a086 <_dtoa_r+0x50e>
 800a07a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a07e:	f7f6 fadb 	bl	8000638 <__aeabi_dmul>
 800a082:	3601      	adds	r6, #1
 800a084:	2301      	movs	r3, #1
 800a086:	1064      	asrs	r4, r4, #1
 800a088:	3508      	adds	r5, #8
 800a08a:	e73f      	b.n	8009f0c <_dtoa_r+0x394>
 800a08c:	2602      	movs	r6, #2
 800a08e:	e742      	b.n	8009f16 <_dtoa_r+0x39e>
 800a090:	9c07      	ldr	r4, [sp, #28]
 800a092:	9704      	str	r7, [sp, #16]
 800a094:	e761      	b.n	8009f5a <_dtoa_r+0x3e2>
 800a096:	4b27      	ldr	r3, [pc, #156]	@ (800a134 <_dtoa_r+0x5bc>)
 800a098:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a09a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a09e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a0a2:	4454      	add	r4, sl
 800a0a4:	2900      	cmp	r1, #0
 800a0a6:	d053      	beq.n	800a150 <_dtoa_r+0x5d8>
 800a0a8:	4928      	ldr	r1, [pc, #160]	@ (800a14c <_dtoa_r+0x5d4>)
 800a0aa:	2000      	movs	r0, #0
 800a0ac:	f7f6 fbee 	bl	800088c <__aeabi_ddiv>
 800a0b0:	4633      	mov	r3, r6
 800a0b2:	462a      	mov	r2, r5
 800a0b4:	f7f6 f908 	bl	80002c8 <__aeabi_dsub>
 800a0b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a0bc:	4656      	mov	r6, sl
 800a0be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0c2:	f7f6 fd69 	bl	8000b98 <__aeabi_d2iz>
 800a0c6:	4605      	mov	r5, r0
 800a0c8:	f7f6 fa4c 	bl	8000564 <__aeabi_i2d>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0d4:	f7f6 f8f8 	bl	80002c8 <__aeabi_dsub>
 800a0d8:	3530      	adds	r5, #48	@ 0x30
 800a0da:	4602      	mov	r2, r0
 800a0dc:	460b      	mov	r3, r1
 800a0de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a0e2:	f806 5b01 	strb.w	r5, [r6], #1
 800a0e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a0ea:	f7f6 fd17 	bl	8000b1c <__aeabi_dcmplt>
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d171      	bne.n	800a1d6 <_dtoa_r+0x65e>
 800a0f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0f6:	4911      	ldr	r1, [pc, #68]	@ (800a13c <_dtoa_r+0x5c4>)
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	f7f6 f8e5 	bl	80002c8 <__aeabi_dsub>
 800a0fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a102:	f7f6 fd0b 	bl	8000b1c <__aeabi_dcmplt>
 800a106:	2800      	cmp	r0, #0
 800a108:	f040 8095 	bne.w	800a236 <_dtoa_r+0x6be>
 800a10c:	42a6      	cmp	r6, r4
 800a10e:	f43f af50 	beq.w	8009fb2 <_dtoa_r+0x43a>
 800a112:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a116:	4b0a      	ldr	r3, [pc, #40]	@ (800a140 <_dtoa_r+0x5c8>)
 800a118:	2200      	movs	r2, #0
 800a11a:	f7f6 fa8d 	bl	8000638 <__aeabi_dmul>
 800a11e:	4b08      	ldr	r3, [pc, #32]	@ (800a140 <_dtoa_r+0x5c8>)
 800a120:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a124:	2200      	movs	r2, #0
 800a126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a12a:	f7f6 fa85 	bl	8000638 <__aeabi_dmul>
 800a12e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a132:	e7c4      	b.n	800a0be <_dtoa_r+0x546>
 800a134:	0800e0e8 	.word	0x0800e0e8
 800a138:	0800e0c0 	.word	0x0800e0c0
 800a13c:	3ff00000 	.word	0x3ff00000
 800a140:	40240000 	.word	0x40240000
 800a144:	401c0000 	.word	0x401c0000
 800a148:	40140000 	.word	0x40140000
 800a14c:	3fe00000 	.word	0x3fe00000
 800a150:	4631      	mov	r1, r6
 800a152:	4628      	mov	r0, r5
 800a154:	f7f6 fa70 	bl	8000638 <__aeabi_dmul>
 800a158:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a15c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a15e:	4656      	mov	r6, sl
 800a160:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a164:	f7f6 fd18 	bl	8000b98 <__aeabi_d2iz>
 800a168:	4605      	mov	r5, r0
 800a16a:	f7f6 f9fb 	bl	8000564 <__aeabi_i2d>
 800a16e:	4602      	mov	r2, r0
 800a170:	460b      	mov	r3, r1
 800a172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a176:	f7f6 f8a7 	bl	80002c8 <__aeabi_dsub>
 800a17a:	3530      	adds	r5, #48	@ 0x30
 800a17c:	f806 5b01 	strb.w	r5, [r6], #1
 800a180:	4602      	mov	r2, r0
 800a182:	460b      	mov	r3, r1
 800a184:	42a6      	cmp	r6, r4
 800a186:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a18a:	f04f 0200 	mov.w	r2, #0
 800a18e:	d124      	bne.n	800a1da <_dtoa_r+0x662>
 800a190:	4bac      	ldr	r3, [pc, #688]	@ (800a444 <_dtoa_r+0x8cc>)
 800a192:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a196:	f7f6 f899 	bl	80002cc <__adddf3>
 800a19a:	4602      	mov	r2, r0
 800a19c:	460b      	mov	r3, r1
 800a19e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1a2:	f7f6 fcd9 	bl	8000b58 <__aeabi_dcmpgt>
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	d145      	bne.n	800a236 <_dtoa_r+0x6be>
 800a1aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a1ae:	49a5      	ldr	r1, [pc, #660]	@ (800a444 <_dtoa_r+0x8cc>)
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	f7f6 f889 	bl	80002c8 <__aeabi_dsub>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1be:	f7f6 fcad 	bl	8000b1c <__aeabi_dcmplt>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	f43f aef5 	beq.w	8009fb2 <_dtoa_r+0x43a>
 800a1c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a1ca:	1e73      	subs	r3, r6, #1
 800a1cc:	9315      	str	r3, [sp, #84]	@ 0x54
 800a1ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a1d2:	2b30      	cmp	r3, #48	@ 0x30
 800a1d4:	d0f8      	beq.n	800a1c8 <_dtoa_r+0x650>
 800a1d6:	9f04      	ldr	r7, [sp, #16]
 800a1d8:	e73e      	b.n	800a058 <_dtoa_r+0x4e0>
 800a1da:	4b9b      	ldr	r3, [pc, #620]	@ (800a448 <_dtoa_r+0x8d0>)
 800a1dc:	f7f6 fa2c 	bl	8000638 <__aeabi_dmul>
 800a1e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1e4:	e7bc      	b.n	800a160 <_dtoa_r+0x5e8>
 800a1e6:	d10c      	bne.n	800a202 <_dtoa_r+0x68a>
 800a1e8:	4b98      	ldr	r3, [pc, #608]	@ (800a44c <_dtoa_r+0x8d4>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1f0:	f7f6 fa22 	bl	8000638 <__aeabi_dmul>
 800a1f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1f8:	f7f6 fca4 	bl	8000b44 <__aeabi_dcmpge>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	f000 8157 	beq.w	800a4b0 <_dtoa_r+0x938>
 800a202:	2400      	movs	r4, #0
 800a204:	4625      	mov	r5, r4
 800a206:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a208:	43db      	mvns	r3, r3
 800a20a:	9304      	str	r3, [sp, #16]
 800a20c:	4656      	mov	r6, sl
 800a20e:	2700      	movs	r7, #0
 800a210:	4621      	mov	r1, r4
 800a212:	4658      	mov	r0, fp
 800a214:	f000 fbb4 	bl	800a980 <_Bfree>
 800a218:	2d00      	cmp	r5, #0
 800a21a:	d0dc      	beq.n	800a1d6 <_dtoa_r+0x65e>
 800a21c:	b12f      	cbz	r7, 800a22a <_dtoa_r+0x6b2>
 800a21e:	42af      	cmp	r7, r5
 800a220:	d003      	beq.n	800a22a <_dtoa_r+0x6b2>
 800a222:	4639      	mov	r1, r7
 800a224:	4658      	mov	r0, fp
 800a226:	f000 fbab 	bl	800a980 <_Bfree>
 800a22a:	4629      	mov	r1, r5
 800a22c:	4658      	mov	r0, fp
 800a22e:	f000 fba7 	bl	800a980 <_Bfree>
 800a232:	e7d0      	b.n	800a1d6 <_dtoa_r+0x65e>
 800a234:	9704      	str	r7, [sp, #16]
 800a236:	4633      	mov	r3, r6
 800a238:	461e      	mov	r6, r3
 800a23a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a23e:	2a39      	cmp	r2, #57	@ 0x39
 800a240:	d107      	bne.n	800a252 <_dtoa_r+0x6da>
 800a242:	459a      	cmp	sl, r3
 800a244:	d1f8      	bne.n	800a238 <_dtoa_r+0x6c0>
 800a246:	9a04      	ldr	r2, [sp, #16]
 800a248:	3201      	adds	r2, #1
 800a24a:	9204      	str	r2, [sp, #16]
 800a24c:	2230      	movs	r2, #48	@ 0x30
 800a24e:	f88a 2000 	strb.w	r2, [sl]
 800a252:	781a      	ldrb	r2, [r3, #0]
 800a254:	3201      	adds	r2, #1
 800a256:	701a      	strb	r2, [r3, #0]
 800a258:	e7bd      	b.n	800a1d6 <_dtoa_r+0x65e>
 800a25a:	4b7b      	ldr	r3, [pc, #492]	@ (800a448 <_dtoa_r+0x8d0>)
 800a25c:	2200      	movs	r2, #0
 800a25e:	f7f6 f9eb 	bl	8000638 <__aeabi_dmul>
 800a262:	2200      	movs	r2, #0
 800a264:	2300      	movs	r3, #0
 800a266:	4604      	mov	r4, r0
 800a268:	460d      	mov	r5, r1
 800a26a:	f7f6 fc4d 	bl	8000b08 <__aeabi_dcmpeq>
 800a26e:	2800      	cmp	r0, #0
 800a270:	f43f aebb 	beq.w	8009fea <_dtoa_r+0x472>
 800a274:	e6f0      	b.n	800a058 <_dtoa_r+0x4e0>
 800a276:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a278:	2a00      	cmp	r2, #0
 800a27a:	f000 80db 	beq.w	800a434 <_dtoa_r+0x8bc>
 800a27e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a280:	2a01      	cmp	r2, #1
 800a282:	f300 80bf 	bgt.w	800a404 <_dtoa_r+0x88c>
 800a286:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a288:	2a00      	cmp	r2, #0
 800a28a:	f000 80b7 	beq.w	800a3fc <_dtoa_r+0x884>
 800a28e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a292:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a294:	4646      	mov	r6, r8
 800a296:	9a08      	ldr	r2, [sp, #32]
 800a298:	2101      	movs	r1, #1
 800a29a:	441a      	add	r2, r3
 800a29c:	4658      	mov	r0, fp
 800a29e:	4498      	add	r8, r3
 800a2a0:	9208      	str	r2, [sp, #32]
 800a2a2:	f000 fc21 	bl	800aae8 <__i2b>
 800a2a6:	4605      	mov	r5, r0
 800a2a8:	b15e      	cbz	r6, 800a2c2 <_dtoa_r+0x74a>
 800a2aa:	9b08      	ldr	r3, [sp, #32]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	dd08      	ble.n	800a2c2 <_dtoa_r+0x74a>
 800a2b0:	42b3      	cmp	r3, r6
 800a2b2:	9a08      	ldr	r2, [sp, #32]
 800a2b4:	bfa8      	it	ge
 800a2b6:	4633      	movge	r3, r6
 800a2b8:	eba8 0803 	sub.w	r8, r8, r3
 800a2bc:	1af6      	subs	r6, r6, r3
 800a2be:	1ad3      	subs	r3, r2, r3
 800a2c0:	9308      	str	r3, [sp, #32]
 800a2c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2c4:	b1f3      	cbz	r3, 800a304 <_dtoa_r+0x78c>
 800a2c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f000 80b7 	beq.w	800a43c <_dtoa_r+0x8c4>
 800a2ce:	b18c      	cbz	r4, 800a2f4 <_dtoa_r+0x77c>
 800a2d0:	4629      	mov	r1, r5
 800a2d2:	4622      	mov	r2, r4
 800a2d4:	4658      	mov	r0, fp
 800a2d6:	f000 fcc7 	bl	800ac68 <__pow5mult>
 800a2da:	464a      	mov	r2, r9
 800a2dc:	4601      	mov	r1, r0
 800a2de:	4605      	mov	r5, r0
 800a2e0:	4658      	mov	r0, fp
 800a2e2:	f000 fc17 	bl	800ab14 <__multiply>
 800a2e6:	4649      	mov	r1, r9
 800a2e8:	9004      	str	r0, [sp, #16]
 800a2ea:	4658      	mov	r0, fp
 800a2ec:	f000 fb48 	bl	800a980 <_Bfree>
 800a2f0:	9b04      	ldr	r3, [sp, #16]
 800a2f2:	4699      	mov	r9, r3
 800a2f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2f6:	1b1a      	subs	r2, r3, r4
 800a2f8:	d004      	beq.n	800a304 <_dtoa_r+0x78c>
 800a2fa:	4649      	mov	r1, r9
 800a2fc:	4658      	mov	r0, fp
 800a2fe:	f000 fcb3 	bl	800ac68 <__pow5mult>
 800a302:	4681      	mov	r9, r0
 800a304:	2101      	movs	r1, #1
 800a306:	4658      	mov	r0, fp
 800a308:	f000 fbee 	bl	800aae8 <__i2b>
 800a30c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a30e:	4604      	mov	r4, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	f000 81cf 	beq.w	800a6b4 <_dtoa_r+0xb3c>
 800a316:	461a      	mov	r2, r3
 800a318:	4601      	mov	r1, r0
 800a31a:	4658      	mov	r0, fp
 800a31c:	f000 fca4 	bl	800ac68 <__pow5mult>
 800a320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a322:	2b01      	cmp	r3, #1
 800a324:	4604      	mov	r4, r0
 800a326:	f300 8095 	bgt.w	800a454 <_dtoa_r+0x8dc>
 800a32a:	9b02      	ldr	r3, [sp, #8]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	f040 8087 	bne.w	800a440 <_dtoa_r+0x8c8>
 800a332:	9b03      	ldr	r3, [sp, #12]
 800a334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f040 8089 	bne.w	800a450 <_dtoa_r+0x8d8>
 800a33e:	9b03      	ldr	r3, [sp, #12]
 800a340:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a344:	0d1b      	lsrs	r3, r3, #20
 800a346:	051b      	lsls	r3, r3, #20
 800a348:	b12b      	cbz	r3, 800a356 <_dtoa_r+0x7de>
 800a34a:	9b08      	ldr	r3, [sp, #32]
 800a34c:	3301      	adds	r3, #1
 800a34e:	9308      	str	r3, [sp, #32]
 800a350:	f108 0801 	add.w	r8, r8, #1
 800a354:	2301      	movs	r3, #1
 800a356:	930a      	str	r3, [sp, #40]	@ 0x28
 800a358:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	f000 81b0 	beq.w	800a6c0 <_dtoa_r+0xb48>
 800a360:	6923      	ldr	r3, [r4, #16]
 800a362:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a366:	6918      	ldr	r0, [r3, #16]
 800a368:	f000 fb72 	bl	800aa50 <__hi0bits>
 800a36c:	f1c0 0020 	rsb	r0, r0, #32
 800a370:	9b08      	ldr	r3, [sp, #32]
 800a372:	4418      	add	r0, r3
 800a374:	f010 001f 	ands.w	r0, r0, #31
 800a378:	d077      	beq.n	800a46a <_dtoa_r+0x8f2>
 800a37a:	f1c0 0320 	rsb	r3, r0, #32
 800a37e:	2b04      	cmp	r3, #4
 800a380:	dd6b      	ble.n	800a45a <_dtoa_r+0x8e2>
 800a382:	9b08      	ldr	r3, [sp, #32]
 800a384:	f1c0 001c 	rsb	r0, r0, #28
 800a388:	4403      	add	r3, r0
 800a38a:	4480      	add	r8, r0
 800a38c:	4406      	add	r6, r0
 800a38e:	9308      	str	r3, [sp, #32]
 800a390:	f1b8 0f00 	cmp.w	r8, #0
 800a394:	dd05      	ble.n	800a3a2 <_dtoa_r+0x82a>
 800a396:	4649      	mov	r1, r9
 800a398:	4642      	mov	r2, r8
 800a39a:	4658      	mov	r0, fp
 800a39c:	f000 fcbe 	bl	800ad1c <__lshift>
 800a3a0:	4681      	mov	r9, r0
 800a3a2:	9b08      	ldr	r3, [sp, #32]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	dd05      	ble.n	800a3b4 <_dtoa_r+0x83c>
 800a3a8:	4621      	mov	r1, r4
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	4658      	mov	r0, fp
 800a3ae:	f000 fcb5 	bl	800ad1c <__lshift>
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d059      	beq.n	800a46e <_dtoa_r+0x8f6>
 800a3ba:	4621      	mov	r1, r4
 800a3bc:	4648      	mov	r0, r9
 800a3be:	f000 fd19 	bl	800adf4 <__mcmp>
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	da53      	bge.n	800a46e <_dtoa_r+0x8f6>
 800a3c6:	1e7b      	subs	r3, r7, #1
 800a3c8:	9304      	str	r3, [sp, #16]
 800a3ca:	4649      	mov	r1, r9
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	220a      	movs	r2, #10
 800a3d0:	4658      	mov	r0, fp
 800a3d2:	f000 faf7 	bl	800a9c4 <__multadd>
 800a3d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3d8:	4681      	mov	r9, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f000 8172 	beq.w	800a6c4 <_dtoa_r+0xb4c>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	4629      	mov	r1, r5
 800a3e4:	220a      	movs	r2, #10
 800a3e6:	4658      	mov	r0, fp
 800a3e8:	f000 faec 	bl	800a9c4 <__multadd>
 800a3ec:	9b00      	ldr	r3, [sp, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	4605      	mov	r5, r0
 800a3f2:	dc67      	bgt.n	800a4c4 <_dtoa_r+0x94c>
 800a3f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3f6:	2b02      	cmp	r3, #2
 800a3f8:	dc41      	bgt.n	800a47e <_dtoa_r+0x906>
 800a3fa:	e063      	b.n	800a4c4 <_dtoa_r+0x94c>
 800a3fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a3fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a402:	e746      	b.n	800a292 <_dtoa_r+0x71a>
 800a404:	9b07      	ldr	r3, [sp, #28]
 800a406:	1e5c      	subs	r4, r3, #1
 800a408:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a40a:	42a3      	cmp	r3, r4
 800a40c:	bfbf      	itttt	lt
 800a40e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a410:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a412:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a414:	1ae3      	sublt	r3, r4, r3
 800a416:	bfb4      	ite	lt
 800a418:	18d2      	addlt	r2, r2, r3
 800a41a:	1b1c      	subge	r4, r3, r4
 800a41c:	9b07      	ldr	r3, [sp, #28]
 800a41e:	bfbc      	itt	lt
 800a420:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a422:	2400      	movlt	r4, #0
 800a424:	2b00      	cmp	r3, #0
 800a426:	bfb5      	itete	lt
 800a428:	eba8 0603 	sublt.w	r6, r8, r3
 800a42c:	9b07      	ldrge	r3, [sp, #28]
 800a42e:	2300      	movlt	r3, #0
 800a430:	4646      	movge	r6, r8
 800a432:	e730      	b.n	800a296 <_dtoa_r+0x71e>
 800a434:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a436:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a438:	4646      	mov	r6, r8
 800a43a:	e735      	b.n	800a2a8 <_dtoa_r+0x730>
 800a43c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a43e:	e75c      	b.n	800a2fa <_dtoa_r+0x782>
 800a440:	2300      	movs	r3, #0
 800a442:	e788      	b.n	800a356 <_dtoa_r+0x7de>
 800a444:	3fe00000 	.word	0x3fe00000
 800a448:	40240000 	.word	0x40240000
 800a44c:	40140000 	.word	0x40140000
 800a450:	9b02      	ldr	r3, [sp, #8]
 800a452:	e780      	b.n	800a356 <_dtoa_r+0x7de>
 800a454:	2300      	movs	r3, #0
 800a456:	930a      	str	r3, [sp, #40]	@ 0x28
 800a458:	e782      	b.n	800a360 <_dtoa_r+0x7e8>
 800a45a:	d099      	beq.n	800a390 <_dtoa_r+0x818>
 800a45c:	9a08      	ldr	r2, [sp, #32]
 800a45e:	331c      	adds	r3, #28
 800a460:	441a      	add	r2, r3
 800a462:	4498      	add	r8, r3
 800a464:	441e      	add	r6, r3
 800a466:	9208      	str	r2, [sp, #32]
 800a468:	e792      	b.n	800a390 <_dtoa_r+0x818>
 800a46a:	4603      	mov	r3, r0
 800a46c:	e7f6      	b.n	800a45c <_dtoa_r+0x8e4>
 800a46e:	9b07      	ldr	r3, [sp, #28]
 800a470:	9704      	str	r7, [sp, #16]
 800a472:	2b00      	cmp	r3, #0
 800a474:	dc20      	bgt.n	800a4b8 <_dtoa_r+0x940>
 800a476:	9300      	str	r3, [sp, #0]
 800a478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a47a:	2b02      	cmp	r3, #2
 800a47c:	dd1e      	ble.n	800a4bc <_dtoa_r+0x944>
 800a47e:	9b00      	ldr	r3, [sp, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	f47f aec0 	bne.w	800a206 <_dtoa_r+0x68e>
 800a486:	4621      	mov	r1, r4
 800a488:	2205      	movs	r2, #5
 800a48a:	4658      	mov	r0, fp
 800a48c:	f000 fa9a 	bl	800a9c4 <__multadd>
 800a490:	4601      	mov	r1, r0
 800a492:	4604      	mov	r4, r0
 800a494:	4648      	mov	r0, r9
 800a496:	f000 fcad 	bl	800adf4 <__mcmp>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	f77f aeb3 	ble.w	800a206 <_dtoa_r+0x68e>
 800a4a0:	4656      	mov	r6, sl
 800a4a2:	2331      	movs	r3, #49	@ 0x31
 800a4a4:	f806 3b01 	strb.w	r3, [r6], #1
 800a4a8:	9b04      	ldr	r3, [sp, #16]
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	9304      	str	r3, [sp, #16]
 800a4ae:	e6ae      	b.n	800a20e <_dtoa_r+0x696>
 800a4b0:	9c07      	ldr	r4, [sp, #28]
 800a4b2:	9704      	str	r7, [sp, #16]
 800a4b4:	4625      	mov	r5, r4
 800a4b6:	e7f3      	b.n	800a4a0 <_dtoa_r+0x928>
 800a4b8:	9b07      	ldr	r3, [sp, #28]
 800a4ba:	9300      	str	r3, [sp, #0]
 800a4bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	f000 8104 	beq.w	800a6cc <_dtoa_r+0xb54>
 800a4c4:	2e00      	cmp	r6, #0
 800a4c6:	dd05      	ble.n	800a4d4 <_dtoa_r+0x95c>
 800a4c8:	4629      	mov	r1, r5
 800a4ca:	4632      	mov	r2, r6
 800a4cc:	4658      	mov	r0, fp
 800a4ce:	f000 fc25 	bl	800ad1c <__lshift>
 800a4d2:	4605      	mov	r5, r0
 800a4d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d05a      	beq.n	800a590 <_dtoa_r+0xa18>
 800a4da:	6869      	ldr	r1, [r5, #4]
 800a4dc:	4658      	mov	r0, fp
 800a4de:	f000 fa0f 	bl	800a900 <_Balloc>
 800a4e2:	4606      	mov	r6, r0
 800a4e4:	b928      	cbnz	r0, 800a4f2 <_dtoa_r+0x97a>
 800a4e6:	4b84      	ldr	r3, [pc, #528]	@ (800a6f8 <_dtoa_r+0xb80>)
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a4ee:	f7ff bb5a 	b.w	8009ba6 <_dtoa_r+0x2e>
 800a4f2:	692a      	ldr	r2, [r5, #16]
 800a4f4:	3202      	adds	r2, #2
 800a4f6:	0092      	lsls	r2, r2, #2
 800a4f8:	f105 010c 	add.w	r1, r5, #12
 800a4fc:	300c      	adds	r0, #12
 800a4fe:	f7ff faa2 	bl	8009a46 <memcpy>
 800a502:	2201      	movs	r2, #1
 800a504:	4631      	mov	r1, r6
 800a506:	4658      	mov	r0, fp
 800a508:	f000 fc08 	bl	800ad1c <__lshift>
 800a50c:	f10a 0301 	add.w	r3, sl, #1
 800a510:	9307      	str	r3, [sp, #28]
 800a512:	9b00      	ldr	r3, [sp, #0]
 800a514:	4453      	add	r3, sl
 800a516:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a518:	9b02      	ldr	r3, [sp, #8]
 800a51a:	f003 0301 	and.w	r3, r3, #1
 800a51e:	462f      	mov	r7, r5
 800a520:	930a      	str	r3, [sp, #40]	@ 0x28
 800a522:	4605      	mov	r5, r0
 800a524:	9b07      	ldr	r3, [sp, #28]
 800a526:	4621      	mov	r1, r4
 800a528:	3b01      	subs	r3, #1
 800a52a:	4648      	mov	r0, r9
 800a52c:	9300      	str	r3, [sp, #0]
 800a52e:	f7ff fa98 	bl	8009a62 <quorem>
 800a532:	4639      	mov	r1, r7
 800a534:	9002      	str	r0, [sp, #8]
 800a536:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a53a:	4648      	mov	r0, r9
 800a53c:	f000 fc5a 	bl	800adf4 <__mcmp>
 800a540:	462a      	mov	r2, r5
 800a542:	9008      	str	r0, [sp, #32]
 800a544:	4621      	mov	r1, r4
 800a546:	4658      	mov	r0, fp
 800a548:	f000 fc70 	bl	800ae2c <__mdiff>
 800a54c:	68c2      	ldr	r2, [r0, #12]
 800a54e:	4606      	mov	r6, r0
 800a550:	bb02      	cbnz	r2, 800a594 <_dtoa_r+0xa1c>
 800a552:	4601      	mov	r1, r0
 800a554:	4648      	mov	r0, r9
 800a556:	f000 fc4d 	bl	800adf4 <__mcmp>
 800a55a:	4602      	mov	r2, r0
 800a55c:	4631      	mov	r1, r6
 800a55e:	4658      	mov	r0, fp
 800a560:	920e      	str	r2, [sp, #56]	@ 0x38
 800a562:	f000 fa0d 	bl	800a980 <_Bfree>
 800a566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a568:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a56a:	9e07      	ldr	r6, [sp, #28]
 800a56c:	ea43 0102 	orr.w	r1, r3, r2
 800a570:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a572:	4319      	orrs	r1, r3
 800a574:	d110      	bne.n	800a598 <_dtoa_r+0xa20>
 800a576:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a57a:	d029      	beq.n	800a5d0 <_dtoa_r+0xa58>
 800a57c:	9b08      	ldr	r3, [sp, #32]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	dd02      	ble.n	800a588 <_dtoa_r+0xa10>
 800a582:	9b02      	ldr	r3, [sp, #8]
 800a584:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a588:	9b00      	ldr	r3, [sp, #0]
 800a58a:	f883 8000 	strb.w	r8, [r3]
 800a58e:	e63f      	b.n	800a210 <_dtoa_r+0x698>
 800a590:	4628      	mov	r0, r5
 800a592:	e7bb      	b.n	800a50c <_dtoa_r+0x994>
 800a594:	2201      	movs	r2, #1
 800a596:	e7e1      	b.n	800a55c <_dtoa_r+0x9e4>
 800a598:	9b08      	ldr	r3, [sp, #32]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	db04      	blt.n	800a5a8 <_dtoa_r+0xa30>
 800a59e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a5a0:	430b      	orrs	r3, r1
 800a5a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a5a4:	430b      	orrs	r3, r1
 800a5a6:	d120      	bne.n	800a5ea <_dtoa_r+0xa72>
 800a5a8:	2a00      	cmp	r2, #0
 800a5aa:	dded      	ble.n	800a588 <_dtoa_r+0xa10>
 800a5ac:	4649      	mov	r1, r9
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	4658      	mov	r0, fp
 800a5b2:	f000 fbb3 	bl	800ad1c <__lshift>
 800a5b6:	4621      	mov	r1, r4
 800a5b8:	4681      	mov	r9, r0
 800a5ba:	f000 fc1b 	bl	800adf4 <__mcmp>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	dc03      	bgt.n	800a5ca <_dtoa_r+0xa52>
 800a5c2:	d1e1      	bne.n	800a588 <_dtoa_r+0xa10>
 800a5c4:	f018 0f01 	tst.w	r8, #1
 800a5c8:	d0de      	beq.n	800a588 <_dtoa_r+0xa10>
 800a5ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a5ce:	d1d8      	bne.n	800a582 <_dtoa_r+0xa0a>
 800a5d0:	9a00      	ldr	r2, [sp, #0]
 800a5d2:	2339      	movs	r3, #57	@ 0x39
 800a5d4:	7013      	strb	r3, [r2, #0]
 800a5d6:	4633      	mov	r3, r6
 800a5d8:	461e      	mov	r6, r3
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a5e0:	2a39      	cmp	r2, #57	@ 0x39
 800a5e2:	d052      	beq.n	800a68a <_dtoa_r+0xb12>
 800a5e4:	3201      	adds	r2, #1
 800a5e6:	701a      	strb	r2, [r3, #0]
 800a5e8:	e612      	b.n	800a210 <_dtoa_r+0x698>
 800a5ea:	2a00      	cmp	r2, #0
 800a5ec:	dd07      	ble.n	800a5fe <_dtoa_r+0xa86>
 800a5ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a5f2:	d0ed      	beq.n	800a5d0 <_dtoa_r+0xa58>
 800a5f4:	9a00      	ldr	r2, [sp, #0]
 800a5f6:	f108 0301 	add.w	r3, r8, #1
 800a5fa:	7013      	strb	r3, [r2, #0]
 800a5fc:	e608      	b.n	800a210 <_dtoa_r+0x698>
 800a5fe:	9b07      	ldr	r3, [sp, #28]
 800a600:	9a07      	ldr	r2, [sp, #28]
 800a602:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a606:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a608:	4293      	cmp	r3, r2
 800a60a:	d028      	beq.n	800a65e <_dtoa_r+0xae6>
 800a60c:	4649      	mov	r1, r9
 800a60e:	2300      	movs	r3, #0
 800a610:	220a      	movs	r2, #10
 800a612:	4658      	mov	r0, fp
 800a614:	f000 f9d6 	bl	800a9c4 <__multadd>
 800a618:	42af      	cmp	r7, r5
 800a61a:	4681      	mov	r9, r0
 800a61c:	f04f 0300 	mov.w	r3, #0
 800a620:	f04f 020a 	mov.w	r2, #10
 800a624:	4639      	mov	r1, r7
 800a626:	4658      	mov	r0, fp
 800a628:	d107      	bne.n	800a63a <_dtoa_r+0xac2>
 800a62a:	f000 f9cb 	bl	800a9c4 <__multadd>
 800a62e:	4607      	mov	r7, r0
 800a630:	4605      	mov	r5, r0
 800a632:	9b07      	ldr	r3, [sp, #28]
 800a634:	3301      	adds	r3, #1
 800a636:	9307      	str	r3, [sp, #28]
 800a638:	e774      	b.n	800a524 <_dtoa_r+0x9ac>
 800a63a:	f000 f9c3 	bl	800a9c4 <__multadd>
 800a63e:	4629      	mov	r1, r5
 800a640:	4607      	mov	r7, r0
 800a642:	2300      	movs	r3, #0
 800a644:	220a      	movs	r2, #10
 800a646:	4658      	mov	r0, fp
 800a648:	f000 f9bc 	bl	800a9c4 <__multadd>
 800a64c:	4605      	mov	r5, r0
 800a64e:	e7f0      	b.n	800a632 <_dtoa_r+0xaba>
 800a650:	9b00      	ldr	r3, [sp, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	bfcc      	ite	gt
 800a656:	461e      	movgt	r6, r3
 800a658:	2601      	movle	r6, #1
 800a65a:	4456      	add	r6, sl
 800a65c:	2700      	movs	r7, #0
 800a65e:	4649      	mov	r1, r9
 800a660:	2201      	movs	r2, #1
 800a662:	4658      	mov	r0, fp
 800a664:	f000 fb5a 	bl	800ad1c <__lshift>
 800a668:	4621      	mov	r1, r4
 800a66a:	4681      	mov	r9, r0
 800a66c:	f000 fbc2 	bl	800adf4 <__mcmp>
 800a670:	2800      	cmp	r0, #0
 800a672:	dcb0      	bgt.n	800a5d6 <_dtoa_r+0xa5e>
 800a674:	d102      	bne.n	800a67c <_dtoa_r+0xb04>
 800a676:	f018 0f01 	tst.w	r8, #1
 800a67a:	d1ac      	bne.n	800a5d6 <_dtoa_r+0xa5e>
 800a67c:	4633      	mov	r3, r6
 800a67e:	461e      	mov	r6, r3
 800a680:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a684:	2a30      	cmp	r2, #48	@ 0x30
 800a686:	d0fa      	beq.n	800a67e <_dtoa_r+0xb06>
 800a688:	e5c2      	b.n	800a210 <_dtoa_r+0x698>
 800a68a:	459a      	cmp	sl, r3
 800a68c:	d1a4      	bne.n	800a5d8 <_dtoa_r+0xa60>
 800a68e:	9b04      	ldr	r3, [sp, #16]
 800a690:	3301      	adds	r3, #1
 800a692:	9304      	str	r3, [sp, #16]
 800a694:	2331      	movs	r3, #49	@ 0x31
 800a696:	f88a 3000 	strb.w	r3, [sl]
 800a69a:	e5b9      	b.n	800a210 <_dtoa_r+0x698>
 800a69c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a69e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a6fc <_dtoa_r+0xb84>
 800a6a2:	b11b      	cbz	r3, 800a6ac <_dtoa_r+0xb34>
 800a6a4:	f10a 0308 	add.w	r3, sl, #8
 800a6a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a6aa:	6013      	str	r3, [r2, #0]
 800a6ac:	4650      	mov	r0, sl
 800a6ae:	b019      	add	sp, #100	@ 0x64
 800a6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	f77f ae37 	ble.w	800a32a <_dtoa_r+0x7b2>
 800a6bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6be:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6c0:	2001      	movs	r0, #1
 800a6c2:	e655      	b.n	800a370 <_dtoa_r+0x7f8>
 800a6c4:	9b00      	ldr	r3, [sp, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	f77f aed6 	ble.w	800a478 <_dtoa_r+0x900>
 800a6cc:	4656      	mov	r6, sl
 800a6ce:	4621      	mov	r1, r4
 800a6d0:	4648      	mov	r0, r9
 800a6d2:	f7ff f9c6 	bl	8009a62 <quorem>
 800a6d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a6da:	f806 8b01 	strb.w	r8, [r6], #1
 800a6de:	9b00      	ldr	r3, [sp, #0]
 800a6e0:	eba6 020a 	sub.w	r2, r6, sl
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	ddb3      	ble.n	800a650 <_dtoa_r+0xad8>
 800a6e8:	4649      	mov	r1, r9
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	220a      	movs	r2, #10
 800a6ee:	4658      	mov	r0, fp
 800a6f0:	f000 f968 	bl	800a9c4 <__multadd>
 800a6f4:	4681      	mov	r9, r0
 800a6f6:	e7ea      	b.n	800a6ce <_dtoa_r+0xb56>
 800a6f8:	0800e048 	.word	0x0800e048
 800a6fc:	0800dfcc 	.word	0x0800dfcc

0800a700 <_free_r>:
 800a700:	b538      	push	{r3, r4, r5, lr}
 800a702:	4605      	mov	r5, r0
 800a704:	2900      	cmp	r1, #0
 800a706:	d041      	beq.n	800a78c <_free_r+0x8c>
 800a708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a70c:	1f0c      	subs	r4, r1, #4
 800a70e:	2b00      	cmp	r3, #0
 800a710:	bfb8      	it	lt
 800a712:	18e4      	addlt	r4, r4, r3
 800a714:	f000 f8e8 	bl	800a8e8 <__malloc_lock>
 800a718:	4a1d      	ldr	r2, [pc, #116]	@ (800a790 <_free_r+0x90>)
 800a71a:	6813      	ldr	r3, [r2, #0]
 800a71c:	b933      	cbnz	r3, 800a72c <_free_r+0x2c>
 800a71e:	6063      	str	r3, [r4, #4]
 800a720:	6014      	str	r4, [r2, #0]
 800a722:	4628      	mov	r0, r5
 800a724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a728:	f000 b8e4 	b.w	800a8f4 <__malloc_unlock>
 800a72c:	42a3      	cmp	r3, r4
 800a72e:	d908      	bls.n	800a742 <_free_r+0x42>
 800a730:	6820      	ldr	r0, [r4, #0]
 800a732:	1821      	adds	r1, r4, r0
 800a734:	428b      	cmp	r3, r1
 800a736:	bf01      	itttt	eq
 800a738:	6819      	ldreq	r1, [r3, #0]
 800a73a:	685b      	ldreq	r3, [r3, #4]
 800a73c:	1809      	addeq	r1, r1, r0
 800a73e:	6021      	streq	r1, [r4, #0]
 800a740:	e7ed      	b.n	800a71e <_free_r+0x1e>
 800a742:	461a      	mov	r2, r3
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	b10b      	cbz	r3, 800a74c <_free_r+0x4c>
 800a748:	42a3      	cmp	r3, r4
 800a74a:	d9fa      	bls.n	800a742 <_free_r+0x42>
 800a74c:	6811      	ldr	r1, [r2, #0]
 800a74e:	1850      	adds	r0, r2, r1
 800a750:	42a0      	cmp	r0, r4
 800a752:	d10b      	bne.n	800a76c <_free_r+0x6c>
 800a754:	6820      	ldr	r0, [r4, #0]
 800a756:	4401      	add	r1, r0
 800a758:	1850      	adds	r0, r2, r1
 800a75a:	4283      	cmp	r3, r0
 800a75c:	6011      	str	r1, [r2, #0]
 800a75e:	d1e0      	bne.n	800a722 <_free_r+0x22>
 800a760:	6818      	ldr	r0, [r3, #0]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	6053      	str	r3, [r2, #4]
 800a766:	4408      	add	r0, r1
 800a768:	6010      	str	r0, [r2, #0]
 800a76a:	e7da      	b.n	800a722 <_free_r+0x22>
 800a76c:	d902      	bls.n	800a774 <_free_r+0x74>
 800a76e:	230c      	movs	r3, #12
 800a770:	602b      	str	r3, [r5, #0]
 800a772:	e7d6      	b.n	800a722 <_free_r+0x22>
 800a774:	6820      	ldr	r0, [r4, #0]
 800a776:	1821      	adds	r1, r4, r0
 800a778:	428b      	cmp	r3, r1
 800a77a:	bf04      	itt	eq
 800a77c:	6819      	ldreq	r1, [r3, #0]
 800a77e:	685b      	ldreq	r3, [r3, #4]
 800a780:	6063      	str	r3, [r4, #4]
 800a782:	bf04      	itt	eq
 800a784:	1809      	addeq	r1, r1, r0
 800a786:	6021      	streq	r1, [r4, #0]
 800a788:	6054      	str	r4, [r2, #4]
 800a78a:	e7ca      	b.n	800a722 <_free_r+0x22>
 800a78c:	bd38      	pop	{r3, r4, r5, pc}
 800a78e:	bf00      	nop
 800a790:	2001331c 	.word	0x2001331c

0800a794 <malloc>:
 800a794:	4b02      	ldr	r3, [pc, #8]	@ (800a7a0 <malloc+0xc>)
 800a796:	4601      	mov	r1, r0
 800a798:	6818      	ldr	r0, [r3, #0]
 800a79a:	f000 b825 	b.w	800a7e8 <_malloc_r>
 800a79e:	bf00      	nop
 800a7a0:	20000028 	.word	0x20000028

0800a7a4 <sbrk_aligned>:
 800a7a4:	b570      	push	{r4, r5, r6, lr}
 800a7a6:	4e0f      	ldr	r6, [pc, #60]	@ (800a7e4 <sbrk_aligned+0x40>)
 800a7a8:	460c      	mov	r4, r1
 800a7aa:	6831      	ldr	r1, [r6, #0]
 800a7ac:	4605      	mov	r5, r0
 800a7ae:	b911      	cbnz	r1, 800a7b6 <sbrk_aligned+0x12>
 800a7b0:	f001 f80c 	bl	800b7cc <_sbrk_r>
 800a7b4:	6030      	str	r0, [r6, #0]
 800a7b6:	4621      	mov	r1, r4
 800a7b8:	4628      	mov	r0, r5
 800a7ba:	f001 f807 	bl	800b7cc <_sbrk_r>
 800a7be:	1c43      	adds	r3, r0, #1
 800a7c0:	d103      	bne.n	800a7ca <sbrk_aligned+0x26>
 800a7c2:	f04f 34ff 	mov.w	r4, #4294967295
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	bd70      	pop	{r4, r5, r6, pc}
 800a7ca:	1cc4      	adds	r4, r0, #3
 800a7cc:	f024 0403 	bic.w	r4, r4, #3
 800a7d0:	42a0      	cmp	r0, r4
 800a7d2:	d0f8      	beq.n	800a7c6 <sbrk_aligned+0x22>
 800a7d4:	1a21      	subs	r1, r4, r0
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	f000 fff8 	bl	800b7cc <_sbrk_r>
 800a7dc:	3001      	adds	r0, #1
 800a7de:	d1f2      	bne.n	800a7c6 <sbrk_aligned+0x22>
 800a7e0:	e7ef      	b.n	800a7c2 <sbrk_aligned+0x1e>
 800a7e2:	bf00      	nop
 800a7e4:	20013318 	.word	0x20013318

0800a7e8 <_malloc_r>:
 800a7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7ec:	1ccd      	adds	r5, r1, #3
 800a7ee:	f025 0503 	bic.w	r5, r5, #3
 800a7f2:	3508      	adds	r5, #8
 800a7f4:	2d0c      	cmp	r5, #12
 800a7f6:	bf38      	it	cc
 800a7f8:	250c      	movcc	r5, #12
 800a7fa:	2d00      	cmp	r5, #0
 800a7fc:	4606      	mov	r6, r0
 800a7fe:	db01      	blt.n	800a804 <_malloc_r+0x1c>
 800a800:	42a9      	cmp	r1, r5
 800a802:	d904      	bls.n	800a80e <_malloc_r+0x26>
 800a804:	230c      	movs	r3, #12
 800a806:	6033      	str	r3, [r6, #0]
 800a808:	2000      	movs	r0, #0
 800a80a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a80e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8e4 <_malloc_r+0xfc>
 800a812:	f000 f869 	bl	800a8e8 <__malloc_lock>
 800a816:	f8d8 3000 	ldr.w	r3, [r8]
 800a81a:	461c      	mov	r4, r3
 800a81c:	bb44      	cbnz	r4, 800a870 <_malloc_r+0x88>
 800a81e:	4629      	mov	r1, r5
 800a820:	4630      	mov	r0, r6
 800a822:	f7ff ffbf 	bl	800a7a4 <sbrk_aligned>
 800a826:	1c43      	adds	r3, r0, #1
 800a828:	4604      	mov	r4, r0
 800a82a:	d158      	bne.n	800a8de <_malloc_r+0xf6>
 800a82c:	f8d8 4000 	ldr.w	r4, [r8]
 800a830:	4627      	mov	r7, r4
 800a832:	2f00      	cmp	r7, #0
 800a834:	d143      	bne.n	800a8be <_malloc_r+0xd6>
 800a836:	2c00      	cmp	r4, #0
 800a838:	d04b      	beq.n	800a8d2 <_malloc_r+0xea>
 800a83a:	6823      	ldr	r3, [r4, #0]
 800a83c:	4639      	mov	r1, r7
 800a83e:	4630      	mov	r0, r6
 800a840:	eb04 0903 	add.w	r9, r4, r3
 800a844:	f000 ffc2 	bl	800b7cc <_sbrk_r>
 800a848:	4581      	cmp	r9, r0
 800a84a:	d142      	bne.n	800a8d2 <_malloc_r+0xea>
 800a84c:	6821      	ldr	r1, [r4, #0]
 800a84e:	1a6d      	subs	r5, r5, r1
 800a850:	4629      	mov	r1, r5
 800a852:	4630      	mov	r0, r6
 800a854:	f7ff ffa6 	bl	800a7a4 <sbrk_aligned>
 800a858:	3001      	adds	r0, #1
 800a85a:	d03a      	beq.n	800a8d2 <_malloc_r+0xea>
 800a85c:	6823      	ldr	r3, [r4, #0]
 800a85e:	442b      	add	r3, r5
 800a860:	6023      	str	r3, [r4, #0]
 800a862:	f8d8 3000 	ldr.w	r3, [r8]
 800a866:	685a      	ldr	r2, [r3, #4]
 800a868:	bb62      	cbnz	r2, 800a8c4 <_malloc_r+0xdc>
 800a86a:	f8c8 7000 	str.w	r7, [r8]
 800a86e:	e00f      	b.n	800a890 <_malloc_r+0xa8>
 800a870:	6822      	ldr	r2, [r4, #0]
 800a872:	1b52      	subs	r2, r2, r5
 800a874:	d420      	bmi.n	800a8b8 <_malloc_r+0xd0>
 800a876:	2a0b      	cmp	r2, #11
 800a878:	d917      	bls.n	800a8aa <_malloc_r+0xc2>
 800a87a:	1961      	adds	r1, r4, r5
 800a87c:	42a3      	cmp	r3, r4
 800a87e:	6025      	str	r5, [r4, #0]
 800a880:	bf18      	it	ne
 800a882:	6059      	strne	r1, [r3, #4]
 800a884:	6863      	ldr	r3, [r4, #4]
 800a886:	bf08      	it	eq
 800a888:	f8c8 1000 	streq.w	r1, [r8]
 800a88c:	5162      	str	r2, [r4, r5]
 800a88e:	604b      	str	r3, [r1, #4]
 800a890:	4630      	mov	r0, r6
 800a892:	f000 f82f 	bl	800a8f4 <__malloc_unlock>
 800a896:	f104 000b 	add.w	r0, r4, #11
 800a89a:	1d23      	adds	r3, r4, #4
 800a89c:	f020 0007 	bic.w	r0, r0, #7
 800a8a0:	1ac2      	subs	r2, r0, r3
 800a8a2:	bf1c      	itt	ne
 800a8a4:	1a1b      	subne	r3, r3, r0
 800a8a6:	50a3      	strne	r3, [r4, r2]
 800a8a8:	e7af      	b.n	800a80a <_malloc_r+0x22>
 800a8aa:	6862      	ldr	r2, [r4, #4]
 800a8ac:	42a3      	cmp	r3, r4
 800a8ae:	bf0c      	ite	eq
 800a8b0:	f8c8 2000 	streq.w	r2, [r8]
 800a8b4:	605a      	strne	r2, [r3, #4]
 800a8b6:	e7eb      	b.n	800a890 <_malloc_r+0xa8>
 800a8b8:	4623      	mov	r3, r4
 800a8ba:	6864      	ldr	r4, [r4, #4]
 800a8bc:	e7ae      	b.n	800a81c <_malloc_r+0x34>
 800a8be:	463c      	mov	r4, r7
 800a8c0:	687f      	ldr	r7, [r7, #4]
 800a8c2:	e7b6      	b.n	800a832 <_malloc_r+0x4a>
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	42a3      	cmp	r3, r4
 800a8ca:	d1fb      	bne.n	800a8c4 <_malloc_r+0xdc>
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	6053      	str	r3, [r2, #4]
 800a8d0:	e7de      	b.n	800a890 <_malloc_r+0xa8>
 800a8d2:	230c      	movs	r3, #12
 800a8d4:	6033      	str	r3, [r6, #0]
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	f000 f80c 	bl	800a8f4 <__malloc_unlock>
 800a8dc:	e794      	b.n	800a808 <_malloc_r+0x20>
 800a8de:	6005      	str	r5, [r0, #0]
 800a8e0:	e7d6      	b.n	800a890 <_malloc_r+0xa8>
 800a8e2:	bf00      	nop
 800a8e4:	2001331c 	.word	0x2001331c

0800a8e8 <__malloc_lock>:
 800a8e8:	4801      	ldr	r0, [pc, #4]	@ (800a8f0 <__malloc_lock+0x8>)
 800a8ea:	f7ff b8aa 	b.w	8009a42 <__retarget_lock_acquire_recursive>
 800a8ee:	bf00      	nop
 800a8f0:	20013314 	.word	0x20013314

0800a8f4 <__malloc_unlock>:
 800a8f4:	4801      	ldr	r0, [pc, #4]	@ (800a8fc <__malloc_unlock+0x8>)
 800a8f6:	f7ff b8a5 	b.w	8009a44 <__retarget_lock_release_recursive>
 800a8fa:	bf00      	nop
 800a8fc:	20013314 	.word	0x20013314

0800a900 <_Balloc>:
 800a900:	b570      	push	{r4, r5, r6, lr}
 800a902:	69c6      	ldr	r6, [r0, #28]
 800a904:	4604      	mov	r4, r0
 800a906:	460d      	mov	r5, r1
 800a908:	b976      	cbnz	r6, 800a928 <_Balloc+0x28>
 800a90a:	2010      	movs	r0, #16
 800a90c:	f7ff ff42 	bl	800a794 <malloc>
 800a910:	4602      	mov	r2, r0
 800a912:	61e0      	str	r0, [r4, #28]
 800a914:	b920      	cbnz	r0, 800a920 <_Balloc+0x20>
 800a916:	4b18      	ldr	r3, [pc, #96]	@ (800a978 <_Balloc+0x78>)
 800a918:	4818      	ldr	r0, [pc, #96]	@ (800a97c <_Balloc+0x7c>)
 800a91a:	216b      	movs	r1, #107	@ 0x6b
 800a91c:	f000 ff66 	bl	800b7ec <__assert_func>
 800a920:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a924:	6006      	str	r6, [r0, #0]
 800a926:	60c6      	str	r6, [r0, #12]
 800a928:	69e6      	ldr	r6, [r4, #28]
 800a92a:	68f3      	ldr	r3, [r6, #12]
 800a92c:	b183      	cbz	r3, 800a950 <_Balloc+0x50>
 800a92e:	69e3      	ldr	r3, [r4, #28]
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a936:	b9b8      	cbnz	r0, 800a968 <_Balloc+0x68>
 800a938:	2101      	movs	r1, #1
 800a93a:	fa01 f605 	lsl.w	r6, r1, r5
 800a93e:	1d72      	adds	r2, r6, #5
 800a940:	0092      	lsls	r2, r2, #2
 800a942:	4620      	mov	r0, r4
 800a944:	f000 ff70 	bl	800b828 <_calloc_r>
 800a948:	b160      	cbz	r0, 800a964 <_Balloc+0x64>
 800a94a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a94e:	e00e      	b.n	800a96e <_Balloc+0x6e>
 800a950:	2221      	movs	r2, #33	@ 0x21
 800a952:	2104      	movs	r1, #4
 800a954:	4620      	mov	r0, r4
 800a956:	f000 ff67 	bl	800b828 <_calloc_r>
 800a95a:	69e3      	ldr	r3, [r4, #28]
 800a95c:	60f0      	str	r0, [r6, #12]
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1e4      	bne.n	800a92e <_Balloc+0x2e>
 800a964:	2000      	movs	r0, #0
 800a966:	bd70      	pop	{r4, r5, r6, pc}
 800a968:	6802      	ldr	r2, [r0, #0]
 800a96a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a96e:	2300      	movs	r3, #0
 800a970:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a974:	e7f7      	b.n	800a966 <_Balloc+0x66>
 800a976:	bf00      	nop
 800a978:	0800dfd9 	.word	0x0800dfd9
 800a97c:	0800e059 	.word	0x0800e059

0800a980 <_Bfree>:
 800a980:	b570      	push	{r4, r5, r6, lr}
 800a982:	69c6      	ldr	r6, [r0, #28]
 800a984:	4605      	mov	r5, r0
 800a986:	460c      	mov	r4, r1
 800a988:	b976      	cbnz	r6, 800a9a8 <_Bfree+0x28>
 800a98a:	2010      	movs	r0, #16
 800a98c:	f7ff ff02 	bl	800a794 <malloc>
 800a990:	4602      	mov	r2, r0
 800a992:	61e8      	str	r0, [r5, #28]
 800a994:	b920      	cbnz	r0, 800a9a0 <_Bfree+0x20>
 800a996:	4b09      	ldr	r3, [pc, #36]	@ (800a9bc <_Bfree+0x3c>)
 800a998:	4809      	ldr	r0, [pc, #36]	@ (800a9c0 <_Bfree+0x40>)
 800a99a:	218f      	movs	r1, #143	@ 0x8f
 800a99c:	f000 ff26 	bl	800b7ec <__assert_func>
 800a9a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9a4:	6006      	str	r6, [r0, #0]
 800a9a6:	60c6      	str	r6, [r0, #12]
 800a9a8:	b13c      	cbz	r4, 800a9ba <_Bfree+0x3a>
 800a9aa:	69eb      	ldr	r3, [r5, #28]
 800a9ac:	6862      	ldr	r2, [r4, #4]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a9b4:	6021      	str	r1, [r4, #0]
 800a9b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a9ba:	bd70      	pop	{r4, r5, r6, pc}
 800a9bc:	0800dfd9 	.word	0x0800dfd9
 800a9c0:	0800e059 	.word	0x0800e059

0800a9c4 <__multadd>:
 800a9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c8:	690d      	ldr	r5, [r1, #16]
 800a9ca:	4607      	mov	r7, r0
 800a9cc:	460c      	mov	r4, r1
 800a9ce:	461e      	mov	r6, r3
 800a9d0:	f101 0c14 	add.w	ip, r1, #20
 800a9d4:	2000      	movs	r0, #0
 800a9d6:	f8dc 3000 	ldr.w	r3, [ip]
 800a9da:	b299      	uxth	r1, r3
 800a9dc:	fb02 6101 	mla	r1, r2, r1, r6
 800a9e0:	0c1e      	lsrs	r6, r3, #16
 800a9e2:	0c0b      	lsrs	r3, r1, #16
 800a9e4:	fb02 3306 	mla	r3, r2, r6, r3
 800a9e8:	b289      	uxth	r1, r1
 800a9ea:	3001      	adds	r0, #1
 800a9ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a9f0:	4285      	cmp	r5, r0
 800a9f2:	f84c 1b04 	str.w	r1, [ip], #4
 800a9f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a9fa:	dcec      	bgt.n	800a9d6 <__multadd+0x12>
 800a9fc:	b30e      	cbz	r6, 800aa42 <__multadd+0x7e>
 800a9fe:	68a3      	ldr	r3, [r4, #8]
 800aa00:	42ab      	cmp	r3, r5
 800aa02:	dc19      	bgt.n	800aa38 <__multadd+0x74>
 800aa04:	6861      	ldr	r1, [r4, #4]
 800aa06:	4638      	mov	r0, r7
 800aa08:	3101      	adds	r1, #1
 800aa0a:	f7ff ff79 	bl	800a900 <_Balloc>
 800aa0e:	4680      	mov	r8, r0
 800aa10:	b928      	cbnz	r0, 800aa1e <__multadd+0x5a>
 800aa12:	4602      	mov	r2, r0
 800aa14:	4b0c      	ldr	r3, [pc, #48]	@ (800aa48 <__multadd+0x84>)
 800aa16:	480d      	ldr	r0, [pc, #52]	@ (800aa4c <__multadd+0x88>)
 800aa18:	21ba      	movs	r1, #186	@ 0xba
 800aa1a:	f000 fee7 	bl	800b7ec <__assert_func>
 800aa1e:	6922      	ldr	r2, [r4, #16]
 800aa20:	3202      	adds	r2, #2
 800aa22:	f104 010c 	add.w	r1, r4, #12
 800aa26:	0092      	lsls	r2, r2, #2
 800aa28:	300c      	adds	r0, #12
 800aa2a:	f7ff f80c 	bl	8009a46 <memcpy>
 800aa2e:	4621      	mov	r1, r4
 800aa30:	4638      	mov	r0, r7
 800aa32:	f7ff ffa5 	bl	800a980 <_Bfree>
 800aa36:	4644      	mov	r4, r8
 800aa38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa3c:	3501      	adds	r5, #1
 800aa3e:	615e      	str	r6, [r3, #20]
 800aa40:	6125      	str	r5, [r4, #16]
 800aa42:	4620      	mov	r0, r4
 800aa44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa48:	0800e048 	.word	0x0800e048
 800aa4c:	0800e059 	.word	0x0800e059

0800aa50 <__hi0bits>:
 800aa50:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aa54:	4603      	mov	r3, r0
 800aa56:	bf36      	itet	cc
 800aa58:	0403      	lslcc	r3, r0, #16
 800aa5a:	2000      	movcs	r0, #0
 800aa5c:	2010      	movcc	r0, #16
 800aa5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aa62:	bf3c      	itt	cc
 800aa64:	021b      	lslcc	r3, r3, #8
 800aa66:	3008      	addcc	r0, #8
 800aa68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa6c:	bf3c      	itt	cc
 800aa6e:	011b      	lslcc	r3, r3, #4
 800aa70:	3004      	addcc	r0, #4
 800aa72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa76:	bf3c      	itt	cc
 800aa78:	009b      	lslcc	r3, r3, #2
 800aa7a:	3002      	addcc	r0, #2
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	db05      	blt.n	800aa8c <__hi0bits+0x3c>
 800aa80:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aa84:	f100 0001 	add.w	r0, r0, #1
 800aa88:	bf08      	it	eq
 800aa8a:	2020      	moveq	r0, #32
 800aa8c:	4770      	bx	lr

0800aa8e <__lo0bits>:
 800aa8e:	6803      	ldr	r3, [r0, #0]
 800aa90:	4602      	mov	r2, r0
 800aa92:	f013 0007 	ands.w	r0, r3, #7
 800aa96:	d00b      	beq.n	800aab0 <__lo0bits+0x22>
 800aa98:	07d9      	lsls	r1, r3, #31
 800aa9a:	d421      	bmi.n	800aae0 <__lo0bits+0x52>
 800aa9c:	0798      	lsls	r0, r3, #30
 800aa9e:	bf49      	itett	mi
 800aaa0:	085b      	lsrmi	r3, r3, #1
 800aaa2:	089b      	lsrpl	r3, r3, #2
 800aaa4:	2001      	movmi	r0, #1
 800aaa6:	6013      	strmi	r3, [r2, #0]
 800aaa8:	bf5c      	itt	pl
 800aaaa:	6013      	strpl	r3, [r2, #0]
 800aaac:	2002      	movpl	r0, #2
 800aaae:	4770      	bx	lr
 800aab0:	b299      	uxth	r1, r3
 800aab2:	b909      	cbnz	r1, 800aab8 <__lo0bits+0x2a>
 800aab4:	0c1b      	lsrs	r3, r3, #16
 800aab6:	2010      	movs	r0, #16
 800aab8:	b2d9      	uxtb	r1, r3
 800aaba:	b909      	cbnz	r1, 800aac0 <__lo0bits+0x32>
 800aabc:	3008      	adds	r0, #8
 800aabe:	0a1b      	lsrs	r3, r3, #8
 800aac0:	0719      	lsls	r1, r3, #28
 800aac2:	bf04      	itt	eq
 800aac4:	091b      	lsreq	r3, r3, #4
 800aac6:	3004      	addeq	r0, #4
 800aac8:	0799      	lsls	r1, r3, #30
 800aaca:	bf04      	itt	eq
 800aacc:	089b      	lsreq	r3, r3, #2
 800aace:	3002      	addeq	r0, #2
 800aad0:	07d9      	lsls	r1, r3, #31
 800aad2:	d403      	bmi.n	800aadc <__lo0bits+0x4e>
 800aad4:	085b      	lsrs	r3, r3, #1
 800aad6:	f100 0001 	add.w	r0, r0, #1
 800aada:	d003      	beq.n	800aae4 <__lo0bits+0x56>
 800aadc:	6013      	str	r3, [r2, #0]
 800aade:	4770      	bx	lr
 800aae0:	2000      	movs	r0, #0
 800aae2:	4770      	bx	lr
 800aae4:	2020      	movs	r0, #32
 800aae6:	4770      	bx	lr

0800aae8 <__i2b>:
 800aae8:	b510      	push	{r4, lr}
 800aaea:	460c      	mov	r4, r1
 800aaec:	2101      	movs	r1, #1
 800aaee:	f7ff ff07 	bl	800a900 <_Balloc>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	b928      	cbnz	r0, 800ab02 <__i2b+0x1a>
 800aaf6:	4b05      	ldr	r3, [pc, #20]	@ (800ab0c <__i2b+0x24>)
 800aaf8:	4805      	ldr	r0, [pc, #20]	@ (800ab10 <__i2b+0x28>)
 800aafa:	f240 1145 	movw	r1, #325	@ 0x145
 800aafe:	f000 fe75 	bl	800b7ec <__assert_func>
 800ab02:	2301      	movs	r3, #1
 800ab04:	6144      	str	r4, [r0, #20]
 800ab06:	6103      	str	r3, [r0, #16]
 800ab08:	bd10      	pop	{r4, pc}
 800ab0a:	bf00      	nop
 800ab0c:	0800e048 	.word	0x0800e048
 800ab10:	0800e059 	.word	0x0800e059

0800ab14 <__multiply>:
 800ab14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab18:	4614      	mov	r4, r2
 800ab1a:	690a      	ldr	r2, [r1, #16]
 800ab1c:	6923      	ldr	r3, [r4, #16]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	bfa8      	it	ge
 800ab22:	4623      	movge	r3, r4
 800ab24:	460f      	mov	r7, r1
 800ab26:	bfa4      	itt	ge
 800ab28:	460c      	movge	r4, r1
 800ab2a:	461f      	movge	r7, r3
 800ab2c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ab30:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ab34:	68a3      	ldr	r3, [r4, #8]
 800ab36:	6861      	ldr	r1, [r4, #4]
 800ab38:	eb0a 0609 	add.w	r6, sl, r9
 800ab3c:	42b3      	cmp	r3, r6
 800ab3e:	b085      	sub	sp, #20
 800ab40:	bfb8      	it	lt
 800ab42:	3101      	addlt	r1, #1
 800ab44:	f7ff fedc 	bl	800a900 <_Balloc>
 800ab48:	b930      	cbnz	r0, 800ab58 <__multiply+0x44>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	4b44      	ldr	r3, [pc, #272]	@ (800ac60 <__multiply+0x14c>)
 800ab4e:	4845      	ldr	r0, [pc, #276]	@ (800ac64 <__multiply+0x150>)
 800ab50:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ab54:	f000 fe4a 	bl	800b7ec <__assert_func>
 800ab58:	f100 0514 	add.w	r5, r0, #20
 800ab5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ab60:	462b      	mov	r3, r5
 800ab62:	2200      	movs	r2, #0
 800ab64:	4543      	cmp	r3, r8
 800ab66:	d321      	bcc.n	800abac <__multiply+0x98>
 800ab68:	f107 0114 	add.w	r1, r7, #20
 800ab6c:	f104 0214 	add.w	r2, r4, #20
 800ab70:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ab74:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ab78:	9302      	str	r3, [sp, #8]
 800ab7a:	1b13      	subs	r3, r2, r4
 800ab7c:	3b15      	subs	r3, #21
 800ab7e:	f023 0303 	bic.w	r3, r3, #3
 800ab82:	3304      	adds	r3, #4
 800ab84:	f104 0715 	add.w	r7, r4, #21
 800ab88:	42ba      	cmp	r2, r7
 800ab8a:	bf38      	it	cc
 800ab8c:	2304      	movcc	r3, #4
 800ab8e:	9301      	str	r3, [sp, #4]
 800ab90:	9b02      	ldr	r3, [sp, #8]
 800ab92:	9103      	str	r1, [sp, #12]
 800ab94:	428b      	cmp	r3, r1
 800ab96:	d80c      	bhi.n	800abb2 <__multiply+0x9e>
 800ab98:	2e00      	cmp	r6, #0
 800ab9a:	dd03      	ble.n	800aba4 <__multiply+0x90>
 800ab9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d05b      	beq.n	800ac5c <__multiply+0x148>
 800aba4:	6106      	str	r6, [r0, #16]
 800aba6:	b005      	add	sp, #20
 800aba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abac:	f843 2b04 	str.w	r2, [r3], #4
 800abb0:	e7d8      	b.n	800ab64 <__multiply+0x50>
 800abb2:	f8b1 a000 	ldrh.w	sl, [r1]
 800abb6:	f1ba 0f00 	cmp.w	sl, #0
 800abba:	d024      	beq.n	800ac06 <__multiply+0xf2>
 800abbc:	f104 0e14 	add.w	lr, r4, #20
 800abc0:	46a9      	mov	r9, r5
 800abc2:	f04f 0c00 	mov.w	ip, #0
 800abc6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800abca:	f8d9 3000 	ldr.w	r3, [r9]
 800abce:	fa1f fb87 	uxth.w	fp, r7
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	fb0a 330b 	mla	r3, sl, fp, r3
 800abd8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800abdc:	f8d9 7000 	ldr.w	r7, [r9]
 800abe0:	4463      	add	r3, ip
 800abe2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800abe6:	fb0a c70b 	mla	r7, sl, fp, ip
 800abea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800abee:	b29b      	uxth	r3, r3
 800abf0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800abf4:	4572      	cmp	r2, lr
 800abf6:	f849 3b04 	str.w	r3, [r9], #4
 800abfa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800abfe:	d8e2      	bhi.n	800abc6 <__multiply+0xb2>
 800ac00:	9b01      	ldr	r3, [sp, #4]
 800ac02:	f845 c003 	str.w	ip, [r5, r3]
 800ac06:	9b03      	ldr	r3, [sp, #12]
 800ac08:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ac0c:	3104      	adds	r1, #4
 800ac0e:	f1b9 0f00 	cmp.w	r9, #0
 800ac12:	d021      	beq.n	800ac58 <__multiply+0x144>
 800ac14:	682b      	ldr	r3, [r5, #0]
 800ac16:	f104 0c14 	add.w	ip, r4, #20
 800ac1a:	46ae      	mov	lr, r5
 800ac1c:	f04f 0a00 	mov.w	sl, #0
 800ac20:	f8bc b000 	ldrh.w	fp, [ip]
 800ac24:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ac28:	fb09 770b 	mla	r7, r9, fp, r7
 800ac2c:	4457      	add	r7, sl
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ac34:	f84e 3b04 	str.w	r3, [lr], #4
 800ac38:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ac3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac40:	f8be 3000 	ldrh.w	r3, [lr]
 800ac44:	fb09 330a 	mla	r3, r9, sl, r3
 800ac48:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ac4c:	4562      	cmp	r2, ip
 800ac4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac52:	d8e5      	bhi.n	800ac20 <__multiply+0x10c>
 800ac54:	9f01      	ldr	r7, [sp, #4]
 800ac56:	51eb      	str	r3, [r5, r7]
 800ac58:	3504      	adds	r5, #4
 800ac5a:	e799      	b.n	800ab90 <__multiply+0x7c>
 800ac5c:	3e01      	subs	r6, #1
 800ac5e:	e79b      	b.n	800ab98 <__multiply+0x84>
 800ac60:	0800e048 	.word	0x0800e048
 800ac64:	0800e059 	.word	0x0800e059

0800ac68 <__pow5mult>:
 800ac68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac6c:	4615      	mov	r5, r2
 800ac6e:	f012 0203 	ands.w	r2, r2, #3
 800ac72:	4607      	mov	r7, r0
 800ac74:	460e      	mov	r6, r1
 800ac76:	d007      	beq.n	800ac88 <__pow5mult+0x20>
 800ac78:	4c25      	ldr	r4, [pc, #148]	@ (800ad10 <__pow5mult+0xa8>)
 800ac7a:	3a01      	subs	r2, #1
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac82:	f7ff fe9f 	bl	800a9c4 <__multadd>
 800ac86:	4606      	mov	r6, r0
 800ac88:	10ad      	asrs	r5, r5, #2
 800ac8a:	d03d      	beq.n	800ad08 <__pow5mult+0xa0>
 800ac8c:	69fc      	ldr	r4, [r7, #28]
 800ac8e:	b97c      	cbnz	r4, 800acb0 <__pow5mult+0x48>
 800ac90:	2010      	movs	r0, #16
 800ac92:	f7ff fd7f 	bl	800a794 <malloc>
 800ac96:	4602      	mov	r2, r0
 800ac98:	61f8      	str	r0, [r7, #28]
 800ac9a:	b928      	cbnz	r0, 800aca8 <__pow5mult+0x40>
 800ac9c:	4b1d      	ldr	r3, [pc, #116]	@ (800ad14 <__pow5mult+0xac>)
 800ac9e:	481e      	ldr	r0, [pc, #120]	@ (800ad18 <__pow5mult+0xb0>)
 800aca0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aca4:	f000 fda2 	bl	800b7ec <__assert_func>
 800aca8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800acac:	6004      	str	r4, [r0, #0]
 800acae:	60c4      	str	r4, [r0, #12]
 800acb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800acb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800acb8:	b94c      	cbnz	r4, 800acce <__pow5mult+0x66>
 800acba:	f240 2171 	movw	r1, #625	@ 0x271
 800acbe:	4638      	mov	r0, r7
 800acc0:	f7ff ff12 	bl	800aae8 <__i2b>
 800acc4:	2300      	movs	r3, #0
 800acc6:	f8c8 0008 	str.w	r0, [r8, #8]
 800acca:	4604      	mov	r4, r0
 800accc:	6003      	str	r3, [r0, #0]
 800acce:	f04f 0900 	mov.w	r9, #0
 800acd2:	07eb      	lsls	r3, r5, #31
 800acd4:	d50a      	bpl.n	800acec <__pow5mult+0x84>
 800acd6:	4631      	mov	r1, r6
 800acd8:	4622      	mov	r2, r4
 800acda:	4638      	mov	r0, r7
 800acdc:	f7ff ff1a 	bl	800ab14 <__multiply>
 800ace0:	4631      	mov	r1, r6
 800ace2:	4680      	mov	r8, r0
 800ace4:	4638      	mov	r0, r7
 800ace6:	f7ff fe4b 	bl	800a980 <_Bfree>
 800acea:	4646      	mov	r6, r8
 800acec:	106d      	asrs	r5, r5, #1
 800acee:	d00b      	beq.n	800ad08 <__pow5mult+0xa0>
 800acf0:	6820      	ldr	r0, [r4, #0]
 800acf2:	b938      	cbnz	r0, 800ad04 <__pow5mult+0x9c>
 800acf4:	4622      	mov	r2, r4
 800acf6:	4621      	mov	r1, r4
 800acf8:	4638      	mov	r0, r7
 800acfa:	f7ff ff0b 	bl	800ab14 <__multiply>
 800acfe:	6020      	str	r0, [r4, #0]
 800ad00:	f8c0 9000 	str.w	r9, [r0]
 800ad04:	4604      	mov	r4, r0
 800ad06:	e7e4      	b.n	800acd2 <__pow5mult+0x6a>
 800ad08:	4630      	mov	r0, r6
 800ad0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad0e:	bf00      	nop
 800ad10:	0800e0b4 	.word	0x0800e0b4
 800ad14:	0800dfd9 	.word	0x0800dfd9
 800ad18:	0800e059 	.word	0x0800e059

0800ad1c <__lshift>:
 800ad1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad20:	460c      	mov	r4, r1
 800ad22:	6849      	ldr	r1, [r1, #4]
 800ad24:	6923      	ldr	r3, [r4, #16]
 800ad26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad2a:	68a3      	ldr	r3, [r4, #8]
 800ad2c:	4607      	mov	r7, r0
 800ad2e:	4691      	mov	r9, r2
 800ad30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad34:	f108 0601 	add.w	r6, r8, #1
 800ad38:	42b3      	cmp	r3, r6
 800ad3a:	db0b      	blt.n	800ad54 <__lshift+0x38>
 800ad3c:	4638      	mov	r0, r7
 800ad3e:	f7ff fddf 	bl	800a900 <_Balloc>
 800ad42:	4605      	mov	r5, r0
 800ad44:	b948      	cbnz	r0, 800ad5a <__lshift+0x3e>
 800ad46:	4602      	mov	r2, r0
 800ad48:	4b28      	ldr	r3, [pc, #160]	@ (800adec <__lshift+0xd0>)
 800ad4a:	4829      	ldr	r0, [pc, #164]	@ (800adf0 <__lshift+0xd4>)
 800ad4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ad50:	f000 fd4c 	bl	800b7ec <__assert_func>
 800ad54:	3101      	adds	r1, #1
 800ad56:	005b      	lsls	r3, r3, #1
 800ad58:	e7ee      	b.n	800ad38 <__lshift+0x1c>
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	f100 0114 	add.w	r1, r0, #20
 800ad60:	f100 0210 	add.w	r2, r0, #16
 800ad64:	4618      	mov	r0, r3
 800ad66:	4553      	cmp	r3, sl
 800ad68:	db33      	blt.n	800add2 <__lshift+0xb6>
 800ad6a:	6920      	ldr	r0, [r4, #16]
 800ad6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad70:	f104 0314 	add.w	r3, r4, #20
 800ad74:	f019 091f 	ands.w	r9, r9, #31
 800ad78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ad80:	d02b      	beq.n	800adda <__lshift+0xbe>
 800ad82:	f1c9 0e20 	rsb	lr, r9, #32
 800ad86:	468a      	mov	sl, r1
 800ad88:	2200      	movs	r2, #0
 800ad8a:	6818      	ldr	r0, [r3, #0]
 800ad8c:	fa00 f009 	lsl.w	r0, r0, r9
 800ad90:	4310      	orrs	r0, r2
 800ad92:	f84a 0b04 	str.w	r0, [sl], #4
 800ad96:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad9a:	459c      	cmp	ip, r3
 800ad9c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ada0:	d8f3      	bhi.n	800ad8a <__lshift+0x6e>
 800ada2:	ebac 0304 	sub.w	r3, ip, r4
 800ada6:	3b15      	subs	r3, #21
 800ada8:	f023 0303 	bic.w	r3, r3, #3
 800adac:	3304      	adds	r3, #4
 800adae:	f104 0015 	add.w	r0, r4, #21
 800adb2:	4584      	cmp	ip, r0
 800adb4:	bf38      	it	cc
 800adb6:	2304      	movcc	r3, #4
 800adb8:	50ca      	str	r2, [r1, r3]
 800adba:	b10a      	cbz	r2, 800adc0 <__lshift+0xa4>
 800adbc:	f108 0602 	add.w	r6, r8, #2
 800adc0:	3e01      	subs	r6, #1
 800adc2:	4638      	mov	r0, r7
 800adc4:	612e      	str	r6, [r5, #16]
 800adc6:	4621      	mov	r1, r4
 800adc8:	f7ff fdda 	bl	800a980 <_Bfree>
 800adcc:	4628      	mov	r0, r5
 800adce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800add2:	f842 0f04 	str.w	r0, [r2, #4]!
 800add6:	3301      	adds	r3, #1
 800add8:	e7c5      	b.n	800ad66 <__lshift+0x4a>
 800adda:	3904      	subs	r1, #4
 800addc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ade0:	f841 2f04 	str.w	r2, [r1, #4]!
 800ade4:	459c      	cmp	ip, r3
 800ade6:	d8f9      	bhi.n	800addc <__lshift+0xc0>
 800ade8:	e7ea      	b.n	800adc0 <__lshift+0xa4>
 800adea:	bf00      	nop
 800adec:	0800e048 	.word	0x0800e048
 800adf0:	0800e059 	.word	0x0800e059

0800adf4 <__mcmp>:
 800adf4:	690a      	ldr	r2, [r1, #16]
 800adf6:	4603      	mov	r3, r0
 800adf8:	6900      	ldr	r0, [r0, #16]
 800adfa:	1a80      	subs	r0, r0, r2
 800adfc:	b530      	push	{r4, r5, lr}
 800adfe:	d10e      	bne.n	800ae1e <__mcmp+0x2a>
 800ae00:	3314      	adds	r3, #20
 800ae02:	3114      	adds	r1, #20
 800ae04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ae08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ae0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ae10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ae14:	4295      	cmp	r5, r2
 800ae16:	d003      	beq.n	800ae20 <__mcmp+0x2c>
 800ae18:	d205      	bcs.n	800ae26 <__mcmp+0x32>
 800ae1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae1e:	bd30      	pop	{r4, r5, pc}
 800ae20:	42a3      	cmp	r3, r4
 800ae22:	d3f3      	bcc.n	800ae0c <__mcmp+0x18>
 800ae24:	e7fb      	b.n	800ae1e <__mcmp+0x2a>
 800ae26:	2001      	movs	r0, #1
 800ae28:	e7f9      	b.n	800ae1e <__mcmp+0x2a>
	...

0800ae2c <__mdiff>:
 800ae2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae30:	4689      	mov	r9, r1
 800ae32:	4606      	mov	r6, r0
 800ae34:	4611      	mov	r1, r2
 800ae36:	4648      	mov	r0, r9
 800ae38:	4614      	mov	r4, r2
 800ae3a:	f7ff ffdb 	bl	800adf4 <__mcmp>
 800ae3e:	1e05      	subs	r5, r0, #0
 800ae40:	d112      	bne.n	800ae68 <__mdiff+0x3c>
 800ae42:	4629      	mov	r1, r5
 800ae44:	4630      	mov	r0, r6
 800ae46:	f7ff fd5b 	bl	800a900 <_Balloc>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	b928      	cbnz	r0, 800ae5a <__mdiff+0x2e>
 800ae4e:	4b3f      	ldr	r3, [pc, #252]	@ (800af4c <__mdiff+0x120>)
 800ae50:	f240 2137 	movw	r1, #567	@ 0x237
 800ae54:	483e      	ldr	r0, [pc, #248]	@ (800af50 <__mdiff+0x124>)
 800ae56:	f000 fcc9 	bl	800b7ec <__assert_func>
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ae60:	4610      	mov	r0, r2
 800ae62:	b003      	add	sp, #12
 800ae64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae68:	bfbc      	itt	lt
 800ae6a:	464b      	movlt	r3, r9
 800ae6c:	46a1      	movlt	r9, r4
 800ae6e:	4630      	mov	r0, r6
 800ae70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ae74:	bfba      	itte	lt
 800ae76:	461c      	movlt	r4, r3
 800ae78:	2501      	movlt	r5, #1
 800ae7a:	2500      	movge	r5, #0
 800ae7c:	f7ff fd40 	bl	800a900 <_Balloc>
 800ae80:	4602      	mov	r2, r0
 800ae82:	b918      	cbnz	r0, 800ae8c <__mdiff+0x60>
 800ae84:	4b31      	ldr	r3, [pc, #196]	@ (800af4c <__mdiff+0x120>)
 800ae86:	f240 2145 	movw	r1, #581	@ 0x245
 800ae8a:	e7e3      	b.n	800ae54 <__mdiff+0x28>
 800ae8c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ae90:	6926      	ldr	r6, [r4, #16]
 800ae92:	60c5      	str	r5, [r0, #12]
 800ae94:	f109 0310 	add.w	r3, r9, #16
 800ae98:	f109 0514 	add.w	r5, r9, #20
 800ae9c:	f104 0e14 	add.w	lr, r4, #20
 800aea0:	f100 0b14 	add.w	fp, r0, #20
 800aea4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aea8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aeac:	9301      	str	r3, [sp, #4]
 800aeae:	46d9      	mov	r9, fp
 800aeb0:	f04f 0c00 	mov.w	ip, #0
 800aeb4:	9b01      	ldr	r3, [sp, #4]
 800aeb6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aeba:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aebe:	9301      	str	r3, [sp, #4]
 800aec0:	fa1f f38a 	uxth.w	r3, sl
 800aec4:	4619      	mov	r1, r3
 800aec6:	b283      	uxth	r3, r0
 800aec8:	1acb      	subs	r3, r1, r3
 800aeca:	0c00      	lsrs	r0, r0, #16
 800aecc:	4463      	add	r3, ip
 800aece:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aed2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aedc:	4576      	cmp	r6, lr
 800aede:	f849 3b04 	str.w	r3, [r9], #4
 800aee2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aee6:	d8e5      	bhi.n	800aeb4 <__mdiff+0x88>
 800aee8:	1b33      	subs	r3, r6, r4
 800aeea:	3b15      	subs	r3, #21
 800aeec:	f023 0303 	bic.w	r3, r3, #3
 800aef0:	3415      	adds	r4, #21
 800aef2:	3304      	adds	r3, #4
 800aef4:	42a6      	cmp	r6, r4
 800aef6:	bf38      	it	cc
 800aef8:	2304      	movcc	r3, #4
 800aefa:	441d      	add	r5, r3
 800aefc:	445b      	add	r3, fp
 800aefe:	461e      	mov	r6, r3
 800af00:	462c      	mov	r4, r5
 800af02:	4544      	cmp	r4, r8
 800af04:	d30e      	bcc.n	800af24 <__mdiff+0xf8>
 800af06:	f108 0103 	add.w	r1, r8, #3
 800af0a:	1b49      	subs	r1, r1, r5
 800af0c:	f021 0103 	bic.w	r1, r1, #3
 800af10:	3d03      	subs	r5, #3
 800af12:	45a8      	cmp	r8, r5
 800af14:	bf38      	it	cc
 800af16:	2100      	movcc	r1, #0
 800af18:	440b      	add	r3, r1
 800af1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af1e:	b191      	cbz	r1, 800af46 <__mdiff+0x11a>
 800af20:	6117      	str	r7, [r2, #16]
 800af22:	e79d      	b.n	800ae60 <__mdiff+0x34>
 800af24:	f854 1b04 	ldr.w	r1, [r4], #4
 800af28:	46e6      	mov	lr, ip
 800af2a:	0c08      	lsrs	r0, r1, #16
 800af2c:	fa1c fc81 	uxtah	ip, ip, r1
 800af30:	4471      	add	r1, lr
 800af32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800af36:	b289      	uxth	r1, r1
 800af38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800af3c:	f846 1b04 	str.w	r1, [r6], #4
 800af40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af44:	e7dd      	b.n	800af02 <__mdiff+0xd6>
 800af46:	3f01      	subs	r7, #1
 800af48:	e7e7      	b.n	800af1a <__mdiff+0xee>
 800af4a:	bf00      	nop
 800af4c:	0800e048 	.word	0x0800e048
 800af50:	0800e059 	.word	0x0800e059

0800af54 <__d2b>:
 800af54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af58:	460f      	mov	r7, r1
 800af5a:	2101      	movs	r1, #1
 800af5c:	ec59 8b10 	vmov	r8, r9, d0
 800af60:	4616      	mov	r6, r2
 800af62:	f7ff fccd 	bl	800a900 <_Balloc>
 800af66:	4604      	mov	r4, r0
 800af68:	b930      	cbnz	r0, 800af78 <__d2b+0x24>
 800af6a:	4602      	mov	r2, r0
 800af6c:	4b23      	ldr	r3, [pc, #140]	@ (800affc <__d2b+0xa8>)
 800af6e:	4824      	ldr	r0, [pc, #144]	@ (800b000 <__d2b+0xac>)
 800af70:	f240 310f 	movw	r1, #783	@ 0x30f
 800af74:	f000 fc3a 	bl	800b7ec <__assert_func>
 800af78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800af7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af80:	b10d      	cbz	r5, 800af86 <__d2b+0x32>
 800af82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800af86:	9301      	str	r3, [sp, #4]
 800af88:	f1b8 0300 	subs.w	r3, r8, #0
 800af8c:	d023      	beq.n	800afd6 <__d2b+0x82>
 800af8e:	4668      	mov	r0, sp
 800af90:	9300      	str	r3, [sp, #0]
 800af92:	f7ff fd7c 	bl	800aa8e <__lo0bits>
 800af96:	e9dd 1200 	ldrd	r1, r2, [sp]
 800af9a:	b1d0      	cbz	r0, 800afd2 <__d2b+0x7e>
 800af9c:	f1c0 0320 	rsb	r3, r0, #32
 800afa0:	fa02 f303 	lsl.w	r3, r2, r3
 800afa4:	430b      	orrs	r3, r1
 800afa6:	40c2      	lsrs	r2, r0
 800afa8:	6163      	str	r3, [r4, #20]
 800afaa:	9201      	str	r2, [sp, #4]
 800afac:	9b01      	ldr	r3, [sp, #4]
 800afae:	61a3      	str	r3, [r4, #24]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	bf0c      	ite	eq
 800afb4:	2201      	moveq	r2, #1
 800afb6:	2202      	movne	r2, #2
 800afb8:	6122      	str	r2, [r4, #16]
 800afba:	b1a5      	cbz	r5, 800afe6 <__d2b+0x92>
 800afbc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800afc0:	4405      	add	r5, r0
 800afc2:	603d      	str	r5, [r7, #0]
 800afc4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800afc8:	6030      	str	r0, [r6, #0]
 800afca:	4620      	mov	r0, r4
 800afcc:	b003      	add	sp, #12
 800afce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afd2:	6161      	str	r1, [r4, #20]
 800afd4:	e7ea      	b.n	800afac <__d2b+0x58>
 800afd6:	a801      	add	r0, sp, #4
 800afd8:	f7ff fd59 	bl	800aa8e <__lo0bits>
 800afdc:	9b01      	ldr	r3, [sp, #4]
 800afde:	6163      	str	r3, [r4, #20]
 800afe0:	3020      	adds	r0, #32
 800afe2:	2201      	movs	r2, #1
 800afe4:	e7e8      	b.n	800afb8 <__d2b+0x64>
 800afe6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800afea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800afee:	6038      	str	r0, [r7, #0]
 800aff0:	6918      	ldr	r0, [r3, #16]
 800aff2:	f7ff fd2d 	bl	800aa50 <__hi0bits>
 800aff6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800affa:	e7e5      	b.n	800afc8 <__d2b+0x74>
 800affc:	0800e048 	.word	0x0800e048
 800b000:	0800e059 	.word	0x0800e059

0800b004 <__ssputs_r>:
 800b004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b008:	688e      	ldr	r6, [r1, #8]
 800b00a:	461f      	mov	r7, r3
 800b00c:	42be      	cmp	r6, r7
 800b00e:	680b      	ldr	r3, [r1, #0]
 800b010:	4682      	mov	sl, r0
 800b012:	460c      	mov	r4, r1
 800b014:	4690      	mov	r8, r2
 800b016:	d82d      	bhi.n	800b074 <__ssputs_r+0x70>
 800b018:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b01c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b020:	d026      	beq.n	800b070 <__ssputs_r+0x6c>
 800b022:	6965      	ldr	r5, [r4, #20]
 800b024:	6909      	ldr	r1, [r1, #16]
 800b026:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b02a:	eba3 0901 	sub.w	r9, r3, r1
 800b02e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b032:	1c7b      	adds	r3, r7, #1
 800b034:	444b      	add	r3, r9
 800b036:	106d      	asrs	r5, r5, #1
 800b038:	429d      	cmp	r5, r3
 800b03a:	bf38      	it	cc
 800b03c:	461d      	movcc	r5, r3
 800b03e:	0553      	lsls	r3, r2, #21
 800b040:	d527      	bpl.n	800b092 <__ssputs_r+0x8e>
 800b042:	4629      	mov	r1, r5
 800b044:	f7ff fbd0 	bl	800a7e8 <_malloc_r>
 800b048:	4606      	mov	r6, r0
 800b04a:	b360      	cbz	r0, 800b0a6 <__ssputs_r+0xa2>
 800b04c:	6921      	ldr	r1, [r4, #16]
 800b04e:	464a      	mov	r2, r9
 800b050:	f7fe fcf9 	bl	8009a46 <memcpy>
 800b054:	89a3      	ldrh	r3, [r4, #12]
 800b056:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b05a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b05e:	81a3      	strh	r3, [r4, #12]
 800b060:	6126      	str	r6, [r4, #16]
 800b062:	6165      	str	r5, [r4, #20]
 800b064:	444e      	add	r6, r9
 800b066:	eba5 0509 	sub.w	r5, r5, r9
 800b06a:	6026      	str	r6, [r4, #0]
 800b06c:	60a5      	str	r5, [r4, #8]
 800b06e:	463e      	mov	r6, r7
 800b070:	42be      	cmp	r6, r7
 800b072:	d900      	bls.n	800b076 <__ssputs_r+0x72>
 800b074:	463e      	mov	r6, r7
 800b076:	6820      	ldr	r0, [r4, #0]
 800b078:	4632      	mov	r2, r6
 800b07a:	4641      	mov	r1, r8
 800b07c:	f000 fb6a 	bl	800b754 <memmove>
 800b080:	68a3      	ldr	r3, [r4, #8]
 800b082:	1b9b      	subs	r3, r3, r6
 800b084:	60a3      	str	r3, [r4, #8]
 800b086:	6823      	ldr	r3, [r4, #0]
 800b088:	4433      	add	r3, r6
 800b08a:	6023      	str	r3, [r4, #0]
 800b08c:	2000      	movs	r0, #0
 800b08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b092:	462a      	mov	r2, r5
 800b094:	f000 fbee 	bl	800b874 <_realloc_r>
 800b098:	4606      	mov	r6, r0
 800b09a:	2800      	cmp	r0, #0
 800b09c:	d1e0      	bne.n	800b060 <__ssputs_r+0x5c>
 800b09e:	6921      	ldr	r1, [r4, #16]
 800b0a0:	4650      	mov	r0, sl
 800b0a2:	f7ff fb2d 	bl	800a700 <_free_r>
 800b0a6:	230c      	movs	r3, #12
 800b0a8:	f8ca 3000 	str.w	r3, [sl]
 800b0ac:	89a3      	ldrh	r3, [r4, #12]
 800b0ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0b2:	81a3      	strh	r3, [r4, #12]
 800b0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b8:	e7e9      	b.n	800b08e <__ssputs_r+0x8a>
	...

0800b0bc <_svfiprintf_r>:
 800b0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c0:	4698      	mov	r8, r3
 800b0c2:	898b      	ldrh	r3, [r1, #12]
 800b0c4:	061b      	lsls	r3, r3, #24
 800b0c6:	b09d      	sub	sp, #116	@ 0x74
 800b0c8:	4607      	mov	r7, r0
 800b0ca:	460d      	mov	r5, r1
 800b0cc:	4614      	mov	r4, r2
 800b0ce:	d510      	bpl.n	800b0f2 <_svfiprintf_r+0x36>
 800b0d0:	690b      	ldr	r3, [r1, #16]
 800b0d2:	b973      	cbnz	r3, 800b0f2 <_svfiprintf_r+0x36>
 800b0d4:	2140      	movs	r1, #64	@ 0x40
 800b0d6:	f7ff fb87 	bl	800a7e8 <_malloc_r>
 800b0da:	6028      	str	r0, [r5, #0]
 800b0dc:	6128      	str	r0, [r5, #16]
 800b0de:	b930      	cbnz	r0, 800b0ee <_svfiprintf_r+0x32>
 800b0e0:	230c      	movs	r3, #12
 800b0e2:	603b      	str	r3, [r7, #0]
 800b0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e8:	b01d      	add	sp, #116	@ 0x74
 800b0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ee:	2340      	movs	r3, #64	@ 0x40
 800b0f0:	616b      	str	r3, [r5, #20]
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0f6:	2320      	movs	r3, #32
 800b0f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b0fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b100:	2330      	movs	r3, #48	@ 0x30
 800b102:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b2a0 <_svfiprintf_r+0x1e4>
 800b106:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b10a:	f04f 0901 	mov.w	r9, #1
 800b10e:	4623      	mov	r3, r4
 800b110:	469a      	mov	sl, r3
 800b112:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b116:	b10a      	cbz	r2, 800b11c <_svfiprintf_r+0x60>
 800b118:	2a25      	cmp	r2, #37	@ 0x25
 800b11a:	d1f9      	bne.n	800b110 <_svfiprintf_r+0x54>
 800b11c:	ebba 0b04 	subs.w	fp, sl, r4
 800b120:	d00b      	beq.n	800b13a <_svfiprintf_r+0x7e>
 800b122:	465b      	mov	r3, fp
 800b124:	4622      	mov	r2, r4
 800b126:	4629      	mov	r1, r5
 800b128:	4638      	mov	r0, r7
 800b12a:	f7ff ff6b 	bl	800b004 <__ssputs_r>
 800b12e:	3001      	adds	r0, #1
 800b130:	f000 80a7 	beq.w	800b282 <_svfiprintf_r+0x1c6>
 800b134:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b136:	445a      	add	r2, fp
 800b138:	9209      	str	r2, [sp, #36]	@ 0x24
 800b13a:	f89a 3000 	ldrb.w	r3, [sl]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	f000 809f 	beq.w	800b282 <_svfiprintf_r+0x1c6>
 800b144:	2300      	movs	r3, #0
 800b146:	f04f 32ff 	mov.w	r2, #4294967295
 800b14a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b14e:	f10a 0a01 	add.w	sl, sl, #1
 800b152:	9304      	str	r3, [sp, #16]
 800b154:	9307      	str	r3, [sp, #28]
 800b156:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b15a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b15c:	4654      	mov	r4, sl
 800b15e:	2205      	movs	r2, #5
 800b160:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b164:	484e      	ldr	r0, [pc, #312]	@ (800b2a0 <_svfiprintf_r+0x1e4>)
 800b166:	f7f5 f853 	bl	8000210 <memchr>
 800b16a:	9a04      	ldr	r2, [sp, #16]
 800b16c:	b9d8      	cbnz	r0, 800b1a6 <_svfiprintf_r+0xea>
 800b16e:	06d0      	lsls	r0, r2, #27
 800b170:	bf44      	itt	mi
 800b172:	2320      	movmi	r3, #32
 800b174:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b178:	0711      	lsls	r1, r2, #28
 800b17a:	bf44      	itt	mi
 800b17c:	232b      	movmi	r3, #43	@ 0x2b
 800b17e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b182:	f89a 3000 	ldrb.w	r3, [sl]
 800b186:	2b2a      	cmp	r3, #42	@ 0x2a
 800b188:	d015      	beq.n	800b1b6 <_svfiprintf_r+0xfa>
 800b18a:	9a07      	ldr	r2, [sp, #28]
 800b18c:	4654      	mov	r4, sl
 800b18e:	2000      	movs	r0, #0
 800b190:	f04f 0c0a 	mov.w	ip, #10
 800b194:	4621      	mov	r1, r4
 800b196:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b19a:	3b30      	subs	r3, #48	@ 0x30
 800b19c:	2b09      	cmp	r3, #9
 800b19e:	d94b      	bls.n	800b238 <_svfiprintf_r+0x17c>
 800b1a0:	b1b0      	cbz	r0, 800b1d0 <_svfiprintf_r+0x114>
 800b1a2:	9207      	str	r2, [sp, #28]
 800b1a4:	e014      	b.n	800b1d0 <_svfiprintf_r+0x114>
 800b1a6:	eba0 0308 	sub.w	r3, r0, r8
 800b1aa:	fa09 f303 	lsl.w	r3, r9, r3
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	9304      	str	r3, [sp, #16]
 800b1b2:	46a2      	mov	sl, r4
 800b1b4:	e7d2      	b.n	800b15c <_svfiprintf_r+0xa0>
 800b1b6:	9b03      	ldr	r3, [sp, #12]
 800b1b8:	1d19      	adds	r1, r3, #4
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	9103      	str	r1, [sp, #12]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	bfbb      	ittet	lt
 800b1c2:	425b      	neglt	r3, r3
 800b1c4:	f042 0202 	orrlt.w	r2, r2, #2
 800b1c8:	9307      	strge	r3, [sp, #28]
 800b1ca:	9307      	strlt	r3, [sp, #28]
 800b1cc:	bfb8      	it	lt
 800b1ce:	9204      	strlt	r2, [sp, #16]
 800b1d0:	7823      	ldrb	r3, [r4, #0]
 800b1d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b1d4:	d10a      	bne.n	800b1ec <_svfiprintf_r+0x130>
 800b1d6:	7863      	ldrb	r3, [r4, #1]
 800b1d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1da:	d132      	bne.n	800b242 <_svfiprintf_r+0x186>
 800b1dc:	9b03      	ldr	r3, [sp, #12]
 800b1de:	1d1a      	adds	r2, r3, #4
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	9203      	str	r2, [sp, #12]
 800b1e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b1e8:	3402      	adds	r4, #2
 800b1ea:	9305      	str	r3, [sp, #20]
 800b1ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b2b0 <_svfiprintf_r+0x1f4>
 800b1f0:	7821      	ldrb	r1, [r4, #0]
 800b1f2:	2203      	movs	r2, #3
 800b1f4:	4650      	mov	r0, sl
 800b1f6:	f7f5 f80b 	bl	8000210 <memchr>
 800b1fa:	b138      	cbz	r0, 800b20c <_svfiprintf_r+0x150>
 800b1fc:	9b04      	ldr	r3, [sp, #16]
 800b1fe:	eba0 000a 	sub.w	r0, r0, sl
 800b202:	2240      	movs	r2, #64	@ 0x40
 800b204:	4082      	lsls	r2, r0
 800b206:	4313      	orrs	r3, r2
 800b208:	3401      	adds	r4, #1
 800b20a:	9304      	str	r3, [sp, #16]
 800b20c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b210:	4824      	ldr	r0, [pc, #144]	@ (800b2a4 <_svfiprintf_r+0x1e8>)
 800b212:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b216:	2206      	movs	r2, #6
 800b218:	f7f4 fffa 	bl	8000210 <memchr>
 800b21c:	2800      	cmp	r0, #0
 800b21e:	d036      	beq.n	800b28e <_svfiprintf_r+0x1d2>
 800b220:	4b21      	ldr	r3, [pc, #132]	@ (800b2a8 <_svfiprintf_r+0x1ec>)
 800b222:	bb1b      	cbnz	r3, 800b26c <_svfiprintf_r+0x1b0>
 800b224:	9b03      	ldr	r3, [sp, #12]
 800b226:	3307      	adds	r3, #7
 800b228:	f023 0307 	bic.w	r3, r3, #7
 800b22c:	3308      	adds	r3, #8
 800b22e:	9303      	str	r3, [sp, #12]
 800b230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b232:	4433      	add	r3, r6
 800b234:	9309      	str	r3, [sp, #36]	@ 0x24
 800b236:	e76a      	b.n	800b10e <_svfiprintf_r+0x52>
 800b238:	fb0c 3202 	mla	r2, ip, r2, r3
 800b23c:	460c      	mov	r4, r1
 800b23e:	2001      	movs	r0, #1
 800b240:	e7a8      	b.n	800b194 <_svfiprintf_r+0xd8>
 800b242:	2300      	movs	r3, #0
 800b244:	3401      	adds	r4, #1
 800b246:	9305      	str	r3, [sp, #20]
 800b248:	4619      	mov	r1, r3
 800b24a:	f04f 0c0a 	mov.w	ip, #10
 800b24e:	4620      	mov	r0, r4
 800b250:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b254:	3a30      	subs	r2, #48	@ 0x30
 800b256:	2a09      	cmp	r2, #9
 800b258:	d903      	bls.n	800b262 <_svfiprintf_r+0x1a6>
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d0c6      	beq.n	800b1ec <_svfiprintf_r+0x130>
 800b25e:	9105      	str	r1, [sp, #20]
 800b260:	e7c4      	b.n	800b1ec <_svfiprintf_r+0x130>
 800b262:	fb0c 2101 	mla	r1, ip, r1, r2
 800b266:	4604      	mov	r4, r0
 800b268:	2301      	movs	r3, #1
 800b26a:	e7f0      	b.n	800b24e <_svfiprintf_r+0x192>
 800b26c:	ab03      	add	r3, sp, #12
 800b26e:	9300      	str	r3, [sp, #0]
 800b270:	462a      	mov	r2, r5
 800b272:	4b0e      	ldr	r3, [pc, #56]	@ (800b2ac <_svfiprintf_r+0x1f0>)
 800b274:	a904      	add	r1, sp, #16
 800b276:	4638      	mov	r0, r7
 800b278:	f7fd fd84 	bl	8008d84 <_printf_float>
 800b27c:	1c42      	adds	r2, r0, #1
 800b27e:	4606      	mov	r6, r0
 800b280:	d1d6      	bne.n	800b230 <_svfiprintf_r+0x174>
 800b282:	89ab      	ldrh	r3, [r5, #12]
 800b284:	065b      	lsls	r3, r3, #25
 800b286:	f53f af2d 	bmi.w	800b0e4 <_svfiprintf_r+0x28>
 800b28a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b28c:	e72c      	b.n	800b0e8 <_svfiprintf_r+0x2c>
 800b28e:	ab03      	add	r3, sp, #12
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	462a      	mov	r2, r5
 800b294:	4b05      	ldr	r3, [pc, #20]	@ (800b2ac <_svfiprintf_r+0x1f0>)
 800b296:	a904      	add	r1, sp, #16
 800b298:	4638      	mov	r0, r7
 800b29a:	f7fe f80b 	bl	80092b4 <_printf_i>
 800b29e:	e7ed      	b.n	800b27c <_svfiprintf_r+0x1c0>
 800b2a0:	0800e1b0 	.word	0x0800e1b0
 800b2a4:	0800e1ba 	.word	0x0800e1ba
 800b2a8:	08008d85 	.word	0x08008d85
 800b2ac:	0800b005 	.word	0x0800b005
 800b2b0:	0800e1b6 	.word	0x0800e1b6

0800b2b4 <__sfputc_r>:
 800b2b4:	6893      	ldr	r3, [r2, #8]
 800b2b6:	3b01      	subs	r3, #1
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	b410      	push	{r4}
 800b2bc:	6093      	str	r3, [r2, #8]
 800b2be:	da08      	bge.n	800b2d2 <__sfputc_r+0x1e>
 800b2c0:	6994      	ldr	r4, [r2, #24]
 800b2c2:	42a3      	cmp	r3, r4
 800b2c4:	db01      	blt.n	800b2ca <__sfputc_r+0x16>
 800b2c6:	290a      	cmp	r1, #10
 800b2c8:	d103      	bne.n	800b2d2 <__sfputc_r+0x1e>
 800b2ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2ce:	f7fe baa6 	b.w	800981e <__swbuf_r>
 800b2d2:	6813      	ldr	r3, [r2, #0]
 800b2d4:	1c58      	adds	r0, r3, #1
 800b2d6:	6010      	str	r0, [r2, #0]
 800b2d8:	7019      	strb	r1, [r3, #0]
 800b2da:	4608      	mov	r0, r1
 800b2dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2e0:	4770      	bx	lr

0800b2e2 <__sfputs_r>:
 800b2e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2e4:	4606      	mov	r6, r0
 800b2e6:	460f      	mov	r7, r1
 800b2e8:	4614      	mov	r4, r2
 800b2ea:	18d5      	adds	r5, r2, r3
 800b2ec:	42ac      	cmp	r4, r5
 800b2ee:	d101      	bne.n	800b2f4 <__sfputs_r+0x12>
 800b2f0:	2000      	movs	r0, #0
 800b2f2:	e007      	b.n	800b304 <__sfputs_r+0x22>
 800b2f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2f8:	463a      	mov	r2, r7
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	f7ff ffda 	bl	800b2b4 <__sfputc_r>
 800b300:	1c43      	adds	r3, r0, #1
 800b302:	d1f3      	bne.n	800b2ec <__sfputs_r+0xa>
 800b304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b308 <_vfiprintf_r>:
 800b308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b30c:	460d      	mov	r5, r1
 800b30e:	b09d      	sub	sp, #116	@ 0x74
 800b310:	4614      	mov	r4, r2
 800b312:	4698      	mov	r8, r3
 800b314:	4606      	mov	r6, r0
 800b316:	b118      	cbz	r0, 800b320 <_vfiprintf_r+0x18>
 800b318:	6a03      	ldr	r3, [r0, #32]
 800b31a:	b90b      	cbnz	r3, 800b320 <_vfiprintf_r+0x18>
 800b31c:	f7fe f976 	bl	800960c <__sinit>
 800b320:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b322:	07d9      	lsls	r1, r3, #31
 800b324:	d405      	bmi.n	800b332 <_vfiprintf_r+0x2a>
 800b326:	89ab      	ldrh	r3, [r5, #12]
 800b328:	059a      	lsls	r2, r3, #22
 800b32a:	d402      	bmi.n	800b332 <_vfiprintf_r+0x2a>
 800b32c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b32e:	f7fe fb88 	bl	8009a42 <__retarget_lock_acquire_recursive>
 800b332:	89ab      	ldrh	r3, [r5, #12]
 800b334:	071b      	lsls	r3, r3, #28
 800b336:	d501      	bpl.n	800b33c <_vfiprintf_r+0x34>
 800b338:	692b      	ldr	r3, [r5, #16]
 800b33a:	b99b      	cbnz	r3, 800b364 <_vfiprintf_r+0x5c>
 800b33c:	4629      	mov	r1, r5
 800b33e:	4630      	mov	r0, r6
 800b340:	f7fe faac 	bl	800989c <__swsetup_r>
 800b344:	b170      	cbz	r0, 800b364 <_vfiprintf_r+0x5c>
 800b346:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b348:	07dc      	lsls	r4, r3, #31
 800b34a:	d504      	bpl.n	800b356 <_vfiprintf_r+0x4e>
 800b34c:	f04f 30ff 	mov.w	r0, #4294967295
 800b350:	b01d      	add	sp, #116	@ 0x74
 800b352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b356:	89ab      	ldrh	r3, [r5, #12]
 800b358:	0598      	lsls	r0, r3, #22
 800b35a:	d4f7      	bmi.n	800b34c <_vfiprintf_r+0x44>
 800b35c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b35e:	f7fe fb71 	bl	8009a44 <__retarget_lock_release_recursive>
 800b362:	e7f3      	b.n	800b34c <_vfiprintf_r+0x44>
 800b364:	2300      	movs	r3, #0
 800b366:	9309      	str	r3, [sp, #36]	@ 0x24
 800b368:	2320      	movs	r3, #32
 800b36a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b36e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b372:	2330      	movs	r3, #48	@ 0x30
 800b374:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b524 <_vfiprintf_r+0x21c>
 800b378:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b37c:	f04f 0901 	mov.w	r9, #1
 800b380:	4623      	mov	r3, r4
 800b382:	469a      	mov	sl, r3
 800b384:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b388:	b10a      	cbz	r2, 800b38e <_vfiprintf_r+0x86>
 800b38a:	2a25      	cmp	r2, #37	@ 0x25
 800b38c:	d1f9      	bne.n	800b382 <_vfiprintf_r+0x7a>
 800b38e:	ebba 0b04 	subs.w	fp, sl, r4
 800b392:	d00b      	beq.n	800b3ac <_vfiprintf_r+0xa4>
 800b394:	465b      	mov	r3, fp
 800b396:	4622      	mov	r2, r4
 800b398:	4629      	mov	r1, r5
 800b39a:	4630      	mov	r0, r6
 800b39c:	f7ff ffa1 	bl	800b2e2 <__sfputs_r>
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	f000 80a7 	beq.w	800b4f4 <_vfiprintf_r+0x1ec>
 800b3a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3a8:	445a      	add	r2, fp
 800b3aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800b3ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	f000 809f 	beq.w	800b4f4 <_vfiprintf_r+0x1ec>
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b3bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3c0:	f10a 0a01 	add.w	sl, sl, #1
 800b3c4:	9304      	str	r3, [sp, #16]
 800b3c6:	9307      	str	r3, [sp, #28]
 800b3c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b3cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3ce:	4654      	mov	r4, sl
 800b3d0:	2205      	movs	r2, #5
 800b3d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3d6:	4853      	ldr	r0, [pc, #332]	@ (800b524 <_vfiprintf_r+0x21c>)
 800b3d8:	f7f4 ff1a 	bl	8000210 <memchr>
 800b3dc:	9a04      	ldr	r2, [sp, #16]
 800b3de:	b9d8      	cbnz	r0, 800b418 <_vfiprintf_r+0x110>
 800b3e0:	06d1      	lsls	r1, r2, #27
 800b3e2:	bf44      	itt	mi
 800b3e4:	2320      	movmi	r3, #32
 800b3e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3ea:	0713      	lsls	r3, r2, #28
 800b3ec:	bf44      	itt	mi
 800b3ee:	232b      	movmi	r3, #43	@ 0x2b
 800b3f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b3f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3fa:	d015      	beq.n	800b428 <_vfiprintf_r+0x120>
 800b3fc:	9a07      	ldr	r2, [sp, #28]
 800b3fe:	4654      	mov	r4, sl
 800b400:	2000      	movs	r0, #0
 800b402:	f04f 0c0a 	mov.w	ip, #10
 800b406:	4621      	mov	r1, r4
 800b408:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b40c:	3b30      	subs	r3, #48	@ 0x30
 800b40e:	2b09      	cmp	r3, #9
 800b410:	d94b      	bls.n	800b4aa <_vfiprintf_r+0x1a2>
 800b412:	b1b0      	cbz	r0, 800b442 <_vfiprintf_r+0x13a>
 800b414:	9207      	str	r2, [sp, #28]
 800b416:	e014      	b.n	800b442 <_vfiprintf_r+0x13a>
 800b418:	eba0 0308 	sub.w	r3, r0, r8
 800b41c:	fa09 f303 	lsl.w	r3, r9, r3
 800b420:	4313      	orrs	r3, r2
 800b422:	9304      	str	r3, [sp, #16]
 800b424:	46a2      	mov	sl, r4
 800b426:	e7d2      	b.n	800b3ce <_vfiprintf_r+0xc6>
 800b428:	9b03      	ldr	r3, [sp, #12]
 800b42a:	1d19      	adds	r1, r3, #4
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	9103      	str	r1, [sp, #12]
 800b430:	2b00      	cmp	r3, #0
 800b432:	bfbb      	ittet	lt
 800b434:	425b      	neglt	r3, r3
 800b436:	f042 0202 	orrlt.w	r2, r2, #2
 800b43a:	9307      	strge	r3, [sp, #28]
 800b43c:	9307      	strlt	r3, [sp, #28]
 800b43e:	bfb8      	it	lt
 800b440:	9204      	strlt	r2, [sp, #16]
 800b442:	7823      	ldrb	r3, [r4, #0]
 800b444:	2b2e      	cmp	r3, #46	@ 0x2e
 800b446:	d10a      	bne.n	800b45e <_vfiprintf_r+0x156>
 800b448:	7863      	ldrb	r3, [r4, #1]
 800b44a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b44c:	d132      	bne.n	800b4b4 <_vfiprintf_r+0x1ac>
 800b44e:	9b03      	ldr	r3, [sp, #12]
 800b450:	1d1a      	adds	r2, r3, #4
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	9203      	str	r2, [sp, #12]
 800b456:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b45a:	3402      	adds	r4, #2
 800b45c:	9305      	str	r3, [sp, #20]
 800b45e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b534 <_vfiprintf_r+0x22c>
 800b462:	7821      	ldrb	r1, [r4, #0]
 800b464:	2203      	movs	r2, #3
 800b466:	4650      	mov	r0, sl
 800b468:	f7f4 fed2 	bl	8000210 <memchr>
 800b46c:	b138      	cbz	r0, 800b47e <_vfiprintf_r+0x176>
 800b46e:	9b04      	ldr	r3, [sp, #16]
 800b470:	eba0 000a 	sub.w	r0, r0, sl
 800b474:	2240      	movs	r2, #64	@ 0x40
 800b476:	4082      	lsls	r2, r0
 800b478:	4313      	orrs	r3, r2
 800b47a:	3401      	adds	r4, #1
 800b47c:	9304      	str	r3, [sp, #16]
 800b47e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b482:	4829      	ldr	r0, [pc, #164]	@ (800b528 <_vfiprintf_r+0x220>)
 800b484:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b488:	2206      	movs	r2, #6
 800b48a:	f7f4 fec1 	bl	8000210 <memchr>
 800b48e:	2800      	cmp	r0, #0
 800b490:	d03f      	beq.n	800b512 <_vfiprintf_r+0x20a>
 800b492:	4b26      	ldr	r3, [pc, #152]	@ (800b52c <_vfiprintf_r+0x224>)
 800b494:	bb1b      	cbnz	r3, 800b4de <_vfiprintf_r+0x1d6>
 800b496:	9b03      	ldr	r3, [sp, #12]
 800b498:	3307      	adds	r3, #7
 800b49a:	f023 0307 	bic.w	r3, r3, #7
 800b49e:	3308      	adds	r3, #8
 800b4a0:	9303      	str	r3, [sp, #12]
 800b4a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4a4:	443b      	add	r3, r7
 800b4a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4a8:	e76a      	b.n	800b380 <_vfiprintf_r+0x78>
 800b4aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4ae:	460c      	mov	r4, r1
 800b4b0:	2001      	movs	r0, #1
 800b4b2:	e7a8      	b.n	800b406 <_vfiprintf_r+0xfe>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	3401      	adds	r4, #1
 800b4b8:	9305      	str	r3, [sp, #20]
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	f04f 0c0a 	mov.w	ip, #10
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4c6:	3a30      	subs	r2, #48	@ 0x30
 800b4c8:	2a09      	cmp	r2, #9
 800b4ca:	d903      	bls.n	800b4d4 <_vfiprintf_r+0x1cc>
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d0c6      	beq.n	800b45e <_vfiprintf_r+0x156>
 800b4d0:	9105      	str	r1, [sp, #20]
 800b4d2:	e7c4      	b.n	800b45e <_vfiprintf_r+0x156>
 800b4d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4d8:	4604      	mov	r4, r0
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e7f0      	b.n	800b4c0 <_vfiprintf_r+0x1b8>
 800b4de:	ab03      	add	r3, sp, #12
 800b4e0:	9300      	str	r3, [sp, #0]
 800b4e2:	462a      	mov	r2, r5
 800b4e4:	4b12      	ldr	r3, [pc, #72]	@ (800b530 <_vfiprintf_r+0x228>)
 800b4e6:	a904      	add	r1, sp, #16
 800b4e8:	4630      	mov	r0, r6
 800b4ea:	f7fd fc4b 	bl	8008d84 <_printf_float>
 800b4ee:	4607      	mov	r7, r0
 800b4f0:	1c78      	adds	r0, r7, #1
 800b4f2:	d1d6      	bne.n	800b4a2 <_vfiprintf_r+0x19a>
 800b4f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4f6:	07d9      	lsls	r1, r3, #31
 800b4f8:	d405      	bmi.n	800b506 <_vfiprintf_r+0x1fe>
 800b4fa:	89ab      	ldrh	r3, [r5, #12]
 800b4fc:	059a      	lsls	r2, r3, #22
 800b4fe:	d402      	bmi.n	800b506 <_vfiprintf_r+0x1fe>
 800b500:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b502:	f7fe fa9f 	bl	8009a44 <__retarget_lock_release_recursive>
 800b506:	89ab      	ldrh	r3, [r5, #12]
 800b508:	065b      	lsls	r3, r3, #25
 800b50a:	f53f af1f 	bmi.w	800b34c <_vfiprintf_r+0x44>
 800b50e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b510:	e71e      	b.n	800b350 <_vfiprintf_r+0x48>
 800b512:	ab03      	add	r3, sp, #12
 800b514:	9300      	str	r3, [sp, #0]
 800b516:	462a      	mov	r2, r5
 800b518:	4b05      	ldr	r3, [pc, #20]	@ (800b530 <_vfiprintf_r+0x228>)
 800b51a:	a904      	add	r1, sp, #16
 800b51c:	4630      	mov	r0, r6
 800b51e:	f7fd fec9 	bl	80092b4 <_printf_i>
 800b522:	e7e4      	b.n	800b4ee <_vfiprintf_r+0x1e6>
 800b524:	0800e1b0 	.word	0x0800e1b0
 800b528:	0800e1ba 	.word	0x0800e1ba
 800b52c:	08008d85 	.word	0x08008d85
 800b530:	0800b2e3 	.word	0x0800b2e3
 800b534:	0800e1b6 	.word	0x0800e1b6

0800b538 <__sflush_r>:
 800b538:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b540:	0716      	lsls	r6, r2, #28
 800b542:	4605      	mov	r5, r0
 800b544:	460c      	mov	r4, r1
 800b546:	d454      	bmi.n	800b5f2 <__sflush_r+0xba>
 800b548:	684b      	ldr	r3, [r1, #4]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	dc02      	bgt.n	800b554 <__sflush_r+0x1c>
 800b54e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b550:	2b00      	cmp	r3, #0
 800b552:	dd48      	ble.n	800b5e6 <__sflush_r+0xae>
 800b554:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b556:	2e00      	cmp	r6, #0
 800b558:	d045      	beq.n	800b5e6 <__sflush_r+0xae>
 800b55a:	2300      	movs	r3, #0
 800b55c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b560:	682f      	ldr	r7, [r5, #0]
 800b562:	6a21      	ldr	r1, [r4, #32]
 800b564:	602b      	str	r3, [r5, #0]
 800b566:	d030      	beq.n	800b5ca <__sflush_r+0x92>
 800b568:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b56a:	89a3      	ldrh	r3, [r4, #12]
 800b56c:	0759      	lsls	r1, r3, #29
 800b56e:	d505      	bpl.n	800b57c <__sflush_r+0x44>
 800b570:	6863      	ldr	r3, [r4, #4]
 800b572:	1ad2      	subs	r2, r2, r3
 800b574:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b576:	b10b      	cbz	r3, 800b57c <__sflush_r+0x44>
 800b578:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b57a:	1ad2      	subs	r2, r2, r3
 800b57c:	2300      	movs	r3, #0
 800b57e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b580:	6a21      	ldr	r1, [r4, #32]
 800b582:	4628      	mov	r0, r5
 800b584:	47b0      	blx	r6
 800b586:	1c43      	adds	r3, r0, #1
 800b588:	89a3      	ldrh	r3, [r4, #12]
 800b58a:	d106      	bne.n	800b59a <__sflush_r+0x62>
 800b58c:	6829      	ldr	r1, [r5, #0]
 800b58e:	291d      	cmp	r1, #29
 800b590:	d82b      	bhi.n	800b5ea <__sflush_r+0xb2>
 800b592:	4a2a      	ldr	r2, [pc, #168]	@ (800b63c <__sflush_r+0x104>)
 800b594:	410a      	asrs	r2, r1
 800b596:	07d6      	lsls	r6, r2, #31
 800b598:	d427      	bmi.n	800b5ea <__sflush_r+0xb2>
 800b59a:	2200      	movs	r2, #0
 800b59c:	6062      	str	r2, [r4, #4]
 800b59e:	04d9      	lsls	r1, r3, #19
 800b5a0:	6922      	ldr	r2, [r4, #16]
 800b5a2:	6022      	str	r2, [r4, #0]
 800b5a4:	d504      	bpl.n	800b5b0 <__sflush_r+0x78>
 800b5a6:	1c42      	adds	r2, r0, #1
 800b5a8:	d101      	bne.n	800b5ae <__sflush_r+0x76>
 800b5aa:	682b      	ldr	r3, [r5, #0]
 800b5ac:	b903      	cbnz	r3, 800b5b0 <__sflush_r+0x78>
 800b5ae:	6560      	str	r0, [r4, #84]	@ 0x54
 800b5b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b5b2:	602f      	str	r7, [r5, #0]
 800b5b4:	b1b9      	cbz	r1, 800b5e6 <__sflush_r+0xae>
 800b5b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b5ba:	4299      	cmp	r1, r3
 800b5bc:	d002      	beq.n	800b5c4 <__sflush_r+0x8c>
 800b5be:	4628      	mov	r0, r5
 800b5c0:	f7ff f89e 	bl	800a700 <_free_r>
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b5c8:	e00d      	b.n	800b5e6 <__sflush_r+0xae>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	47b0      	blx	r6
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	1c50      	adds	r0, r2, #1
 800b5d4:	d1c9      	bne.n	800b56a <__sflush_r+0x32>
 800b5d6:	682b      	ldr	r3, [r5, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d0c6      	beq.n	800b56a <__sflush_r+0x32>
 800b5dc:	2b1d      	cmp	r3, #29
 800b5de:	d001      	beq.n	800b5e4 <__sflush_r+0xac>
 800b5e0:	2b16      	cmp	r3, #22
 800b5e2:	d11e      	bne.n	800b622 <__sflush_r+0xea>
 800b5e4:	602f      	str	r7, [r5, #0]
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	e022      	b.n	800b630 <__sflush_r+0xf8>
 800b5ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5ee:	b21b      	sxth	r3, r3
 800b5f0:	e01b      	b.n	800b62a <__sflush_r+0xf2>
 800b5f2:	690f      	ldr	r7, [r1, #16]
 800b5f4:	2f00      	cmp	r7, #0
 800b5f6:	d0f6      	beq.n	800b5e6 <__sflush_r+0xae>
 800b5f8:	0793      	lsls	r3, r2, #30
 800b5fa:	680e      	ldr	r6, [r1, #0]
 800b5fc:	bf08      	it	eq
 800b5fe:	694b      	ldreq	r3, [r1, #20]
 800b600:	600f      	str	r7, [r1, #0]
 800b602:	bf18      	it	ne
 800b604:	2300      	movne	r3, #0
 800b606:	eba6 0807 	sub.w	r8, r6, r7
 800b60a:	608b      	str	r3, [r1, #8]
 800b60c:	f1b8 0f00 	cmp.w	r8, #0
 800b610:	dde9      	ble.n	800b5e6 <__sflush_r+0xae>
 800b612:	6a21      	ldr	r1, [r4, #32]
 800b614:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b616:	4643      	mov	r3, r8
 800b618:	463a      	mov	r2, r7
 800b61a:	4628      	mov	r0, r5
 800b61c:	47b0      	blx	r6
 800b61e:	2800      	cmp	r0, #0
 800b620:	dc08      	bgt.n	800b634 <__sflush_r+0xfc>
 800b622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b62a:	81a3      	strh	r3, [r4, #12]
 800b62c:	f04f 30ff 	mov.w	r0, #4294967295
 800b630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b634:	4407      	add	r7, r0
 800b636:	eba8 0800 	sub.w	r8, r8, r0
 800b63a:	e7e7      	b.n	800b60c <__sflush_r+0xd4>
 800b63c:	dfbffffe 	.word	0xdfbffffe

0800b640 <_fflush_r>:
 800b640:	b538      	push	{r3, r4, r5, lr}
 800b642:	690b      	ldr	r3, [r1, #16]
 800b644:	4605      	mov	r5, r0
 800b646:	460c      	mov	r4, r1
 800b648:	b913      	cbnz	r3, 800b650 <_fflush_r+0x10>
 800b64a:	2500      	movs	r5, #0
 800b64c:	4628      	mov	r0, r5
 800b64e:	bd38      	pop	{r3, r4, r5, pc}
 800b650:	b118      	cbz	r0, 800b65a <_fflush_r+0x1a>
 800b652:	6a03      	ldr	r3, [r0, #32]
 800b654:	b90b      	cbnz	r3, 800b65a <_fflush_r+0x1a>
 800b656:	f7fd ffd9 	bl	800960c <__sinit>
 800b65a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d0f3      	beq.n	800b64a <_fflush_r+0xa>
 800b662:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b664:	07d0      	lsls	r0, r2, #31
 800b666:	d404      	bmi.n	800b672 <_fflush_r+0x32>
 800b668:	0599      	lsls	r1, r3, #22
 800b66a:	d402      	bmi.n	800b672 <_fflush_r+0x32>
 800b66c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b66e:	f7fe f9e8 	bl	8009a42 <__retarget_lock_acquire_recursive>
 800b672:	4628      	mov	r0, r5
 800b674:	4621      	mov	r1, r4
 800b676:	f7ff ff5f 	bl	800b538 <__sflush_r>
 800b67a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b67c:	07da      	lsls	r2, r3, #31
 800b67e:	4605      	mov	r5, r0
 800b680:	d4e4      	bmi.n	800b64c <_fflush_r+0xc>
 800b682:	89a3      	ldrh	r3, [r4, #12]
 800b684:	059b      	lsls	r3, r3, #22
 800b686:	d4e1      	bmi.n	800b64c <_fflush_r+0xc>
 800b688:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b68a:	f7fe f9db 	bl	8009a44 <__retarget_lock_release_recursive>
 800b68e:	e7dd      	b.n	800b64c <_fflush_r+0xc>

0800b690 <__swhatbuf_r>:
 800b690:	b570      	push	{r4, r5, r6, lr}
 800b692:	460c      	mov	r4, r1
 800b694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b698:	2900      	cmp	r1, #0
 800b69a:	b096      	sub	sp, #88	@ 0x58
 800b69c:	4615      	mov	r5, r2
 800b69e:	461e      	mov	r6, r3
 800b6a0:	da0d      	bge.n	800b6be <__swhatbuf_r+0x2e>
 800b6a2:	89a3      	ldrh	r3, [r4, #12]
 800b6a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b6a8:	f04f 0100 	mov.w	r1, #0
 800b6ac:	bf14      	ite	ne
 800b6ae:	2340      	movne	r3, #64	@ 0x40
 800b6b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	6031      	str	r1, [r6, #0]
 800b6b8:	602b      	str	r3, [r5, #0]
 800b6ba:	b016      	add	sp, #88	@ 0x58
 800b6bc:	bd70      	pop	{r4, r5, r6, pc}
 800b6be:	466a      	mov	r2, sp
 800b6c0:	f000 f862 	bl	800b788 <_fstat_r>
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	dbec      	blt.n	800b6a2 <__swhatbuf_r+0x12>
 800b6c8:	9901      	ldr	r1, [sp, #4]
 800b6ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b6ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b6d2:	4259      	negs	r1, r3
 800b6d4:	4159      	adcs	r1, r3
 800b6d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b6da:	e7eb      	b.n	800b6b4 <__swhatbuf_r+0x24>

0800b6dc <__smakebuf_r>:
 800b6dc:	898b      	ldrh	r3, [r1, #12]
 800b6de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6e0:	079d      	lsls	r5, r3, #30
 800b6e2:	4606      	mov	r6, r0
 800b6e4:	460c      	mov	r4, r1
 800b6e6:	d507      	bpl.n	800b6f8 <__smakebuf_r+0x1c>
 800b6e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b6ec:	6023      	str	r3, [r4, #0]
 800b6ee:	6123      	str	r3, [r4, #16]
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	6163      	str	r3, [r4, #20]
 800b6f4:	b003      	add	sp, #12
 800b6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6f8:	ab01      	add	r3, sp, #4
 800b6fa:	466a      	mov	r2, sp
 800b6fc:	f7ff ffc8 	bl	800b690 <__swhatbuf_r>
 800b700:	9f00      	ldr	r7, [sp, #0]
 800b702:	4605      	mov	r5, r0
 800b704:	4639      	mov	r1, r7
 800b706:	4630      	mov	r0, r6
 800b708:	f7ff f86e 	bl	800a7e8 <_malloc_r>
 800b70c:	b948      	cbnz	r0, 800b722 <__smakebuf_r+0x46>
 800b70e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b712:	059a      	lsls	r2, r3, #22
 800b714:	d4ee      	bmi.n	800b6f4 <__smakebuf_r+0x18>
 800b716:	f023 0303 	bic.w	r3, r3, #3
 800b71a:	f043 0302 	orr.w	r3, r3, #2
 800b71e:	81a3      	strh	r3, [r4, #12]
 800b720:	e7e2      	b.n	800b6e8 <__smakebuf_r+0xc>
 800b722:	89a3      	ldrh	r3, [r4, #12]
 800b724:	6020      	str	r0, [r4, #0]
 800b726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b72a:	81a3      	strh	r3, [r4, #12]
 800b72c:	9b01      	ldr	r3, [sp, #4]
 800b72e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b732:	b15b      	cbz	r3, 800b74c <__smakebuf_r+0x70>
 800b734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b738:	4630      	mov	r0, r6
 800b73a:	f000 f837 	bl	800b7ac <_isatty_r>
 800b73e:	b128      	cbz	r0, 800b74c <__smakebuf_r+0x70>
 800b740:	89a3      	ldrh	r3, [r4, #12]
 800b742:	f023 0303 	bic.w	r3, r3, #3
 800b746:	f043 0301 	orr.w	r3, r3, #1
 800b74a:	81a3      	strh	r3, [r4, #12]
 800b74c:	89a3      	ldrh	r3, [r4, #12]
 800b74e:	431d      	orrs	r5, r3
 800b750:	81a5      	strh	r5, [r4, #12]
 800b752:	e7cf      	b.n	800b6f4 <__smakebuf_r+0x18>

0800b754 <memmove>:
 800b754:	4288      	cmp	r0, r1
 800b756:	b510      	push	{r4, lr}
 800b758:	eb01 0402 	add.w	r4, r1, r2
 800b75c:	d902      	bls.n	800b764 <memmove+0x10>
 800b75e:	4284      	cmp	r4, r0
 800b760:	4623      	mov	r3, r4
 800b762:	d807      	bhi.n	800b774 <memmove+0x20>
 800b764:	1e43      	subs	r3, r0, #1
 800b766:	42a1      	cmp	r1, r4
 800b768:	d008      	beq.n	800b77c <memmove+0x28>
 800b76a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b76e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b772:	e7f8      	b.n	800b766 <memmove+0x12>
 800b774:	4402      	add	r2, r0
 800b776:	4601      	mov	r1, r0
 800b778:	428a      	cmp	r2, r1
 800b77a:	d100      	bne.n	800b77e <memmove+0x2a>
 800b77c:	bd10      	pop	{r4, pc}
 800b77e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b782:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b786:	e7f7      	b.n	800b778 <memmove+0x24>

0800b788 <_fstat_r>:
 800b788:	b538      	push	{r3, r4, r5, lr}
 800b78a:	4d07      	ldr	r5, [pc, #28]	@ (800b7a8 <_fstat_r+0x20>)
 800b78c:	2300      	movs	r3, #0
 800b78e:	4604      	mov	r4, r0
 800b790:	4608      	mov	r0, r1
 800b792:	4611      	mov	r1, r2
 800b794:	602b      	str	r3, [r5, #0]
 800b796:	f7f6 ff85 	bl	80026a4 <_fstat>
 800b79a:	1c43      	adds	r3, r0, #1
 800b79c:	d102      	bne.n	800b7a4 <_fstat_r+0x1c>
 800b79e:	682b      	ldr	r3, [r5, #0]
 800b7a0:	b103      	cbz	r3, 800b7a4 <_fstat_r+0x1c>
 800b7a2:	6023      	str	r3, [r4, #0]
 800b7a4:	bd38      	pop	{r3, r4, r5, pc}
 800b7a6:	bf00      	nop
 800b7a8:	20013310 	.word	0x20013310

0800b7ac <_isatty_r>:
 800b7ac:	b538      	push	{r3, r4, r5, lr}
 800b7ae:	4d06      	ldr	r5, [pc, #24]	@ (800b7c8 <_isatty_r+0x1c>)
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	4608      	mov	r0, r1
 800b7b6:	602b      	str	r3, [r5, #0]
 800b7b8:	f7f6 ff84 	bl	80026c4 <_isatty>
 800b7bc:	1c43      	adds	r3, r0, #1
 800b7be:	d102      	bne.n	800b7c6 <_isatty_r+0x1a>
 800b7c0:	682b      	ldr	r3, [r5, #0]
 800b7c2:	b103      	cbz	r3, 800b7c6 <_isatty_r+0x1a>
 800b7c4:	6023      	str	r3, [r4, #0]
 800b7c6:	bd38      	pop	{r3, r4, r5, pc}
 800b7c8:	20013310 	.word	0x20013310

0800b7cc <_sbrk_r>:
 800b7cc:	b538      	push	{r3, r4, r5, lr}
 800b7ce:	4d06      	ldr	r5, [pc, #24]	@ (800b7e8 <_sbrk_r+0x1c>)
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	4608      	mov	r0, r1
 800b7d6:	602b      	str	r3, [r5, #0]
 800b7d8:	f002 fada 	bl	800dd90 <_sbrk>
 800b7dc:	1c43      	adds	r3, r0, #1
 800b7de:	d102      	bne.n	800b7e6 <_sbrk_r+0x1a>
 800b7e0:	682b      	ldr	r3, [r5, #0]
 800b7e2:	b103      	cbz	r3, 800b7e6 <_sbrk_r+0x1a>
 800b7e4:	6023      	str	r3, [r4, #0]
 800b7e6:	bd38      	pop	{r3, r4, r5, pc}
 800b7e8:	20013310 	.word	0x20013310

0800b7ec <__assert_func>:
 800b7ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7ee:	4614      	mov	r4, r2
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	4b09      	ldr	r3, [pc, #36]	@ (800b818 <__assert_func+0x2c>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4605      	mov	r5, r0
 800b7f8:	68d8      	ldr	r0, [r3, #12]
 800b7fa:	b954      	cbnz	r4, 800b812 <__assert_func+0x26>
 800b7fc:	4b07      	ldr	r3, [pc, #28]	@ (800b81c <__assert_func+0x30>)
 800b7fe:	461c      	mov	r4, r3
 800b800:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b804:	9100      	str	r1, [sp, #0]
 800b806:	462b      	mov	r3, r5
 800b808:	4905      	ldr	r1, [pc, #20]	@ (800b820 <__assert_func+0x34>)
 800b80a:	f000 f86f 	bl	800b8ec <fiprintf>
 800b80e:	f000 f87f 	bl	800b910 <abort>
 800b812:	4b04      	ldr	r3, [pc, #16]	@ (800b824 <__assert_func+0x38>)
 800b814:	e7f4      	b.n	800b800 <__assert_func+0x14>
 800b816:	bf00      	nop
 800b818:	20000028 	.word	0x20000028
 800b81c:	0800e206 	.word	0x0800e206
 800b820:	0800e1d8 	.word	0x0800e1d8
 800b824:	0800e1cb 	.word	0x0800e1cb

0800b828 <_calloc_r>:
 800b828:	b570      	push	{r4, r5, r6, lr}
 800b82a:	fba1 5402 	umull	r5, r4, r1, r2
 800b82e:	b93c      	cbnz	r4, 800b840 <_calloc_r+0x18>
 800b830:	4629      	mov	r1, r5
 800b832:	f7fe ffd9 	bl	800a7e8 <_malloc_r>
 800b836:	4606      	mov	r6, r0
 800b838:	b928      	cbnz	r0, 800b846 <_calloc_r+0x1e>
 800b83a:	2600      	movs	r6, #0
 800b83c:	4630      	mov	r0, r6
 800b83e:	bd70      	pop	{r4, r5, r6, pc}
 800b840:	220c      	movs	r2, #12
 800b842:	6002      	str	r2, [r0, #0]
 800b844:	e7f9      	b.n	800b83a <_calloc_r+0x12>
 800b846:	462a      	mov	r2, r5
 800b848:	4621      	mov	r1, r4
 800b84a:	f7fe f87d 	bl	8009948 <memset>
 800b84e:	e7f5      	b.n	800b83c <_calloc_r+0x14>

0800b850 <__ascii_mbtowc>:
 800b850:	b082      	sub	sp, #8
 800b852:	b901      	cbnz	r1, 800b856 <__ascii_mbtowc+0x6>
 800b854:	a901      	add	r1, sp, #4
 800b856:	b142      	cbz	r2, 800b86a <__ascii_mbtowc+0x1a>
 800b858:	b14b      	cbz	r3, 800b86e <__ascii_mbtowc+0x1e>
 800b85a:	7813      	ldrb	r3, [r2, #0]
 800b85c:	600b      	str	r3, [r1, #0]
 800b85e:	7812      	ldrb	r2, [r2, #0]
 800b860:	1e10      	subs	r0, r2, #0
 800b862:	bf18      	it	ne
 800b864:	2001      	movne	r0, #1
 800b866:	b002      	add	sp, #8
 800b868:	4770      	bx	lr
 800b86a:	4610      	mov	r0, r2
 800b86c:	e7fb      	b.n	800b866 <__ascii_mbtowc+0x16>
 800b86e:	f06f 0001 	mvn.w	r0, #1
 800b872:	e7f8      	b.n	800b866 <__ascii_mbtowc+0x16>

0800b874 <_realloc_r>:
 800b874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b878:	4680      	mov	r8, r0
 800b87a:	4615      	mov	r5, r2
 800b87c:	460c      	mov	r4, r1
 800b87e:	b921      	cbnz	r1, 800b88a <_realloc_r+0x16>
 800b880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b884:	4611      	mov	r1, r2
 800b886:	f7fe bfaf 	b.w	800a7e8 <_malloc_r>
 800b88a:	b92a      	cbnz	r2, 800b898 <_realloc_r+0x24>
 800b88c:	f7fe ff38 	bl	800a700 <_free_r>
 800b890:	2400      	movs	r4, #0
 800b892:	4620      	mov	r0, r4
 800b894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b898:	f000 f841 	bl	800b91e <_malloc_usable_size_r>
 800b89c:	4285      	cmp	r5, r0
 800b89e:	4606      	mov	r6, r0
 800b8a0:	d802      	bhi.n	800b8a8 <_realloc_r+0x34>
 800b8a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b8a6:	d8f4      	bhi.n	800b892 <_realloc_r+0x1e>
 800b8a8:	4629      	mov	r1, r5
 800b8aa:	4640      	mov	r0, r8
 800b8ac:	f7fe ff9c 	bl	800a7e8 <_malloc_r>
 800b8b0:	4607      	mov	r7, r0
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	d0ec      	beq.n	800b890 <_realloc_r+0x1c>
 800b8b6:	42b5      	cmp	r5, r6
 800b8b8:	462a      	mov	r2, r5
 800b8ba:	4621      	mov	r1, r4
 800b8bc:	bf28      	it	cs
 800b8be:	4632      	movcs	r2, r6
 800b8c0:	f7fe f8c1 	bl	8009a46 <memcpy>
 800b8c4:	4621      	mov	r1, r4
 800b8c6:	4640      	mov	r0, r8
 800b8c8:	f7fe ff1a 	bl	800a700 <_free_r>
 800b8cc:	463c      	mov	r4, r7
 800b8ce:	e7e0      	b.n	800b892 <_realloc_r+0x1e>

0800b8d0 <__ascii_wctomb>:
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	4608      	mov	r0, r1
 800b8d4:	b141      	cbz	r1, 800b8e8 <__ascii_wctomb+0x18>
 800b8d6:	2aff      	cmp	r2, #255	@ 0xff
 800b8d8:	d904      	bls.n	800b8e4 <__ascii_wctomb+0x14>
 800b8da:	228a      	movs	r2, #138	@ 0x8a
 800b8dc:	601a      	str	r2, [r3, #0]
 800b8de:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e2:	4770      	bx	lr
 800b8e4:	700a      	strb	r2, [r1, #0]
 800b8e6:	2001      	movs	r0, #1
 800b8e8:	4770      	bx	lr
	...

0800b8ec <fiprintf>:
 800b8ec:	b40e      	push	{r1, r2, r3}
 800b8ee:	b503      	push	{r0, r1, lr}
 800b8f0:	4601      	mov	r1, r0
 800b8f2:	ab03      	add	r3, sp, #12
 800b8f4:	4805      	ldr	r0, [pc, #20]	@ (800b90c <fiprintf+0x20>)
 800b8f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8fa:	6800      	ldr	r0, [r0, #0]
 800b8fc:	9301      	str	r3, [sp, #4]
 800b8fe:	f7ff fd03 	bl	800b308 <_vfiprintf_r>
 800b902:	b002      	add	sp, #8
 800b904:	f85d eb04 	ldr.w	lr, [sp], #4
 800b908:	b003      	add	sp, #12
 800b90a:	4770      	bx	lr
 800b90c:	20000028 	.word	0x20000028

0800b910 <abort>:
 800b910:	b508      	push	{r3, lr}
 800b912:	2006      	movs	r0, #6
 800b914:	f000 f834 	bl	800b980 <raise>
 800b918:	2001      	movs	r0, #1
 800b91a:	f7f6 fe73 	bl	8002604 <_exit>

0800b91e <_malloc_usable_size_r>:
 800b91e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b922:	1f18      	subs	r0, r3, #4
 800b924:	2b00      	cmp	r3, #0
 800b926:	bfbc      	itt	lt
 800b928:	580b      	ldrlt	r3, [r1, r0]
 800b92a:	18c0      	addlt	r0, r0, r3
 800b92c:	4770      	bx	lr

0800b92e <_raise_r>:
 800b92e:	291f      	cmp	r1, #31
 800b930:	b538      	push	{r3, r4, r5, lr}
 800b932:	4605      	mov	r5, r0
 800b934:	460c      	mov	r4, r1
 800b936:	d904      	bls.n	800b942 <_raise_r+0x14>
 800b938:	2316      	movs	r3, #22
 800b93a:	6003      	str	r3, [r0, #0]
 800b93c:	f04f 30ff 	mov.w	r0, #4294967295
 800b940:	bd38      	pop	{r3, r4, r5, pc}
 800b942:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b944:	b112      	cbz	r2, 800b94c <_raise_r+0x1e>
 800b946:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b94a:	b94b      	cbnz	r3, 800b960 <_raise_r+0x32>
 800b94c:	4628      	mov	r0, r5
 800b94e:	f000 f831 	bl	800b9b4 <_getpid_r>
 800b952:	4622      	mov	r2, r4
 800b954:	4601      	mov	r1, r0
 800b956:	4628      	mov	r0, r5
 800b958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b95c:	f000 b818 	b.w	800b990 <_kill_r>
 800b960:	2b01      	cmp	r3, #1
 800b962:	d00a      	beq.n	800b97a <_raise_r+0x4c>
 800b964:	1c59      	adds	r1, r3, #1
 800b966:	d103      	bne.n	800b970 <_raise_r+0x42>
 800b968:	2316      	movs	r3, #22
 800b96a:	6003      	str	r3, [r0, #0]
 800b96c:	2001      	movs	r0, #1
 800b96e:	e7e7      	b.n	800b940 <_raise_r+0x12>
 800b970:	2100      	movs	r1, #0
 800b972:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b976:	4620      	mov	r0, r4
 800b978:	4798      	blx	r3
 800b97a:	2000      	movs	r0, #0
 800b97c:	e7e0      	b.n	800b940 <_raise_r+0x12>
	...

0800b980 <raise>:
 800b980:	4b02      	ldr	r3, [pc, #8]	@ (800b98c <raise+0xc>)
 800b982:	4601      	mov	r1, r0
 800b984:	6818      	ldr	r0, [r3, #0]
 800b986:	f7ff bfd2 	b.w	800b92e <_raise_r>
 800b98a:	bf00      	nop
 800b98c:	20000028 	.word	0x20000028

0800b990 <_kill_r>:
 800b990:	b538      	push	{r3, r4, r5, lr}
 800b992:	4d07      	ldr	r5, [pc, #28]	@ (800b9b0 <_kill_r+0x20>)
 800b994:	2300      	movs	r3, #0
 800b996:	4604      	mov	r4, r0
 800b998:	4608      	mov	r0, r1
 800b99a:	4611      	mov	r1, r2
 800b99c:	602b      	str	r3, [r5, #0]
 800b99e:	f7f6 fe21 	bl	80025e4 <_kill>
 800b9a2:	1c43      	adds	r3, r0, #1
 800b9a4:	d102      	bne.n	800b9ac <_kill_r+0x1c>
 800b9a6:	682b      	ldr	r3, [r5, #0]
 800b9a8:	b103      	cbz	r3, 800b9ac <_kill_r+0x1c>
 800b9aa:	6023      	str	r3, [r4, #0]
 800b9ac:	bd38      	pop	{r3, r4, r5, pc}
 800b9ae:	bf00      	nop
 800b9b0:	20013310 	.word	0x20013310

0800b9b4 <_getpid_r>:
 800b9b4:	f7f6 be0e 	b.w	80025d4 <_getpid>

0800b9b8 <atan2>:
 800b9b8:	f000 bd52 	b.w	800c460 <__ieee754_atan2>

0800b9bc <pow>:
 800b9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9be:	ed2d 8b02 	vpush	{d8}
 800b9c2:	eeb0 8a40 	vmov.f32	s16, s0
 800b9c6:	eef0 8a60 	vmov.f32	s17, s1
 800b9ca:	ec55 4b11 	vmov	r4, r5, d1
 800b9ce:	f000 fe0f 	bl	800c5f0 <__ieee754_pow>
 800b9d2:	4622      	mov	r2, r4
 800b9d4:	462b      	mov	r3, r5
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	4629      	mov	r1, r5
 800b9da:	ec57 6b10 	vmov	r6, r7, d0
 800b9de:	f7f5 f8c5 	bl	8000b6c <__aeabi_dcmpun>
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	d13b      	bne.n	800ba5e <pow+0xa2>
 800b9e6:	ec51 0b18 	vmov	r0, r1, d8
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	f7f5 f88b 	bl	8000b08 <__aeabi_dcmpeq>
 800b9f2:	b1b8      	cbz	r0, 800ba24 <pow+0x68>
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	4629      	mov	r1, r5
 800b9fc:	f7f5 f884 	bl	8000b08 <__aeabi_dcmpeq>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	d146      	bne.n	800ba92 <pow+0xd6>
 800ba04:	ec45 4b10 	vmov	d0, r4, r5
 800ba08:	f000 fabe 	bl	800bf88 <finite>
 800ba0c:	b338      	cbz	r0, 800ba5e <pow+0xa2>
 800ba0e:	2200      	movs	r2, #0
 800ba10:	2300      	movs	r3, #0
 800ba12:	4620      	mov	r0, r4
 800ba14:	4629      	mov	r1, r5
 800ba16:	f7f5 f881 	bl	8000b1c <__aeabi_dcmplt>
 800ba1a:	b300      	cbz	r0, 800ba5e <pow+0xa2>
 800ba1c:	f7fd ffe6 	bl	80099ec <__errno>
 800ba20:	2322      	movs	r3, #34	@ 0x22
 800ba22:	e01b      	b.n	800ba5c <pow+0xa0>
 800ba24:	ec47 6b10 	vmov	d0, r6, r7
 800ba28:	f000 faae 	bl	800bf88 <finite>
 800ba2c:	b9e0      	cbnz	r0, 800ba68 <pow+0xac>
 800ba2e:	eeb0 0a48 	vmov.f32	s0, s16
 800ba32:	eef0 0a68 	vmov.f32	s1, s17
 800ba36:	f000 faa7 	bl	800bf88 <finite>
 800ba3a:	b1a8      	cbz	r0, 800ba68 <pow+0xac>
 800ba3c:	ec45 4b10 	vmov	d0, r4, r5
 800ba40:	f000 faa2 	bl	800bf88 <finite>
 800ba44:	b180      	cbz	r0, 800ba68 <pow+0xac>
 800ba46:	4632      	mov	r2, r6
 800ba48:	463b      	mov	r3, r7
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	4639      	mov	r1, r7
 800ba4e:	f7f5 f88d 	bl	8000b6c <__aeabi_dcmpun>
 800ba52:	2800      	cmp	r0, #0
 800ba54:	d0e2      	beq.n	800ba1c <pow+0x60>
 800ba56:	f7fd ffc9 	bl	80099ec <__errno>
 800ba5a:	2321      	movs	r3, #33	@ 0x21
 800ba5c:	6003      	str	r3, [r0, #0]
 800ba5e:	ecbd 8b02 	vpop	{d8}
 800ba62:	ec47 6b10 	vmov	d0, r6, r7
 800ba66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba68:	2200      	movs	r2, #0
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	4639      	mov	r1, r7
 800ba70:	f7f5 f84a 	bl	8000b08 <__aeabi_dcmpeq>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	d0f2      	beq.n	800ba5e <pow+0xa2>
 800ba78:	eeb0 0a48 	vmov.f32	s0, s16
 800ba7c:	eef0 0a68 	vmov.f32	s1, s17
 800ba80:	f000 fa82 	bl	800bf88 <finite>
 800ba84:	2800      	cmp	r0, #0
 800ba86:	d0ea      	beq.n	800ba5e <pow+0xa2>
 800ba88:	ec45 4b10 	vmov	d0, r4, r5
 800ba8c:	f000 fa7c 	bl	800bf88 <finite>
 800ba90:	e7c3      	b.n	800ba1a <pow+0x5e>
 800ba92:	4f01      	ldr	r7, [pc, #4]	@ (800ba98 <pow+0xdc>)
 800ba94:	2600      	movs	r6, #0
 800ba96:	e7e2      	b.n	800ba5e <pow+0xa2>
 800ba98:	3ff00000 	.word	0x3ff00000

0800ba9c <sqrt>:
 800ba9c:	b538      	push	{r3, r4, r5, lr}
 800ba9e:	ed2d 8b02 	vpush	{d8}
 800baa2:	ec55 4b10 	vmov	r4, r5, d0
 800baa6:	f000 fa7b 	bl	800bfa0 <__ieee754_sqrt>
 800baaa:	4622      	mov	r2, r4
 800baac:	462b      	mov	r3, r5
 800baae:	4620      	mov	r0, r4
 800bab0:	4629      	mov	r1, r5
 800bab2:	eeb0 8a40 	vmov.f32	s16, s0
 800bab6:	eef0 8a60 	vmov.f32	s17, s1
 800baba:	f7f5 f857 	bl	8000b6c <__aeabi_dcmpun>
 800babe:	b990      	cbnz	r0, 800bae6 <sqrt+0x4a>
 800bac0:	2200      	movs	r2, #0
 800bac2:	2300      	movs	r3, #0
 800bac4:	4620      	mov	r0, r4
 800bac6:	4629      	mov	r1, r5
 800bac8:	f7f5 f828 	bl	8000b1c <__aeabi_dcmplt>
 800bacc:	b158      	cbz	r0, 800bae6 <sqrt+0x4a>
 800bace:	f7fd ff8d 	bl	80099ec <__errno>
 800bad2:	2321      	movs	r3, #33	@ 0x21
 800bad4:	6003      	str	r3, [r0, #0]
 800bad6:	2200      	movs	r2, #0
 800bad8:	2300      	movs	r3, #0
 800bada:	4610      	mov	r0, r2
 800badc:	4619      	mov	r1, r3
 800bade:	f7f4 fed5 	bl	800088c <__aeabi_ddiv>
 800bae2:	ec41 0b18 	vmov	d8, r0, r1
 800bae6:	eeb0 0a48 	vmov.f32	s0, s16
 800baea:	eef0 0a68 	vmov.f32	s1, s17
 800baee:	ecbd 8b02 	vpop	{d8}
 800baf2:	bd38      	pop	{r3, r4, r5, pc}
 800baf4:	0000      	movs	r0, r0
	...

0800baf8 <atan>:
 800baf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bafc:	ec55 4b10 	vmov	r4, r5, d0
 800bb00:	4bbf      	ldr	r3, [pc, #764]	@ (800be00 <atan+0x308>)
 800bb02:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800bb06:	429e      	cmp	r6, r3
 800bb08:	46ab      	mov	fp, r5
 800bb0a:	d918      	bls.n	800bb3e <atan+0x46>
 800bb0c:	4bbd      	ldr	r3, [pc, #756]	@ (800be04 <atan+0x30c>)
 800bb0e:	429e      	cmp	r6, r3
 800bb10:	d801      	bhi.n	800bb16 <atan+0x1e>
 800bb12:	d109      	bne.n	800bb28 <atan+0x30>
 800bb14:	b144      	cbz	r4, 800bb28 <atan+0x30>
 800bb16:	4622      	mov	r2, r4
 800bb18:	462b      	mov	r3, r5
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	4629      	mov	r1, r5
 800bb1e:	f7f4 fbd5 	bl	80002cc <__adddf3>
 800bb22:	4604      	mov	r4, r0
 800bb24:	460d      	mov	r5, r1
 800bb26:	e006      	b.n	800bb36 <atan+0x3e>
 800bb28:	f1bb 0f00 	cmp.w	fp, #0
 800bb2c:	f340 812b 	ble.w	800bd86 <atan+0x28e>
 800bb30:	a597      	add	r5, pc, #604	@ (adr r5, 800bd90 <atan+0x298>)
 800bb32:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb36:	ec45 4b10 	vmov	d0, r4, r5
 800bb3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb3e:	4bb2      	ldr	r3, [pc, #712]	@ (800be08 <atan+0x310>)
 800bb40:	429e      	cmp	r6, r3
 800bb42:	d813      	bhi.n	800bb6c <atan+0x74>
 800bb44:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800bb48:	429e      	cmp	r6, r3
 800bb4a:	d80c      	bhi.n	800bb66 <atan+0x6e>
 800bb4c:	a392      	add	r3, pc, #584	@ (adr r3, 800bd98 <atan+0x2a0>)
 800bb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb52:	4620      	mov	r0, r4
 800bb54:	4629      	mov	r1, r5
 800bb56:	f7f4 fbb9 	bl	80002cc <__adddf3>
 800bb5a:	4bac      	ldr	r3, [pc, #688]	@ (800be0c <atan+0x314>)
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	f7f4 fffb 	bl	8000b58 <__aeabi_dcmpgt>
 800bb62:	2800      	cmp	r0, #0
 800bb64:	d1e7      	bne.n	800bb36 <atan+0x3e>
 800bb66:	f04f 3aff 	mov.w	sl, #4294967295
 800bb6a:	e029      	b.n	800bbc0 <atan+0xc8>
 800bb6c:	f000 f9b0 	bl	800bed0 <fabs>
 800bb70:	4ba7      	ldr	r3, [pc, #668]	@ (800be10 <atan+0x318>)
 800bb72:	429e      	cmp	r6, r3
 800bb74:	ec55 4b10 	vmov	r4, r5, d0
 800bb78:	f200 80bc 	bhi.w	800bcf4 <atan+0x1fc>
 800bb7c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800bb80:	429e      	cmp	r6, r3
 800bb82:	f200 809e 	bhi.w	800bcc2 <atan+0x1ca>
 800bb86:	4622      	mov	r2, r4
 800bb88:	462b      	mov	r3, r5
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	4629      	mov	r1, r5
 800bb8e:	f7f4 fb9d 	bl	80002cc <__adddf3>
 800bb92:	4b9e      	ldr	r3, [pc, #632]	@ (800be0c <atan+0x314>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	f7f4 fb97 	bl	80002c8 <__aeabi_dsub>
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	4606      	mov	r6, r0
 800bb9e:	460f      	mov	r7, r1
 800bba0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bba4:	4620      	mov	r0, r4
 800bba6:	4629      	mov	r1, r5
 800bba8:	f7f4 fb90 	bl	80002cc <__adddf3>
 800bbac:	4602      	mov	r2, r0
 800bbae:	460b      	mov	r3, r1
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	4639      	mov	r1, r7
 800bbb4:	f7f4 fe6a 	bl	800088c <__aeabi_ddiv>
 800bbb8:	f04f 0a00 	mov.w	sl, #0
 800bbbc:	4604      	mov	r4, r0
 800bbbe:	460d      	mov	r5, r1
 800bbc0:	4622      	mov	r2, r4
 800bbc2:	462b      	mov	r3, r5
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	4629      	mov	r1, r5
 800bbc8:	f7f4 fd36 	bl	8000638 <__aeabi_dmul>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	460b      	mov	r3, r1
 800bbd0:	4680      	mov	r8, r0
 800bbd2:	4689      	mov	r9, r1
 800bbd4:	f7f4 fd30 	bl	8000638 <__aeabi_dmul>
 800bbd8:	a371      	add	r3, pc, #452	@ (adr r3, 800bda0 <atan+0x2a8>)
 800bbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbde:	4606      	mov	r6, r0
 800bbe0:	460f      	mov	r7, r1
 800bbe2:	f7f4 fd29 	bl	8000638 <__aeabi_dmul>
 800bbe6:	a370      	add	r3, pc, #448	@ (adr r3, 800bda8 <atan+0x2b0>)
 800bbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbec:	f7f4 fb6e 	bl	80002cc <__adddf3>
 800bbf0:	4632      	mov	r2, r6
 800bbf2:	463b      	mov	r3, r7
 800bbf4:	f7f4 fd20 	bl	8000638 <__aeabi_dmul>
 800bbf8:	a36d      	add	r3, pc, #436	@ (adr r3, 800bdb0 <atan+0x2b8>)
 800bbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfe:	f7f4 fb65 	bl	80002cc <__adddf3>
 800bc02:	4632      	mov	r2, r6
 800bc04:	463b      	mov	r3, r7
 800bc06:	f7f4 fd17 	bl	8000638 <__aeabi_dmul>
 800bc0a:	a36b      	add	r3, pc, #428	@ (adr r3, 800bdb8 <atan+0x2c0>)
 800bc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc10:	f7f4 fb5c 	bl	80002cc <__adddf3>
 800bc14:	4632      	mov	r2, r6
 800bc16:	463b      	mov	r3, r7
 800bc18:	f7f4 fd0e 	bl	8000638 <__aeabi_dmul>
 800bc1c:	a368      	add	r3, pc, #416	@ (adr r3, 800bdc0 <atan+0x2c8>)
 800bc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc22:	f7f4 fb53 	bl	80002cc <__adddf3>
 800bc26:	4632      	mov	r2, r6
 800bc28:	463b      	mov	r3, r7
 800bc2a:	f7f4 fd05 	bl	8000638 <__aeabi_dmul>
 800bc2e:	a366      	add	r3, pc, #408	@ (adr r3, 800bdc8 <atan+0x2d0>)
 800bc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc34:	f7f4 fb4a 	bl	80002cc <__adddf3>
 800bc38:	4642      	mov	r2, r8
 800bc3a:	464b      	mov	r3, r9
 800bc3c:	f7f4 fcfc 	bl	8000638 <__aeabi_dmul>
 800bc40:	a363      	add	r3, pc, #396	@ (adr r3, 800bdd0 <atan+0x2d8>)
 800bc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc46:	4680      	mov	r8, r0
 800bc48:	4689      	mov	r9, r1
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	4639      	mov	r1, r7
 800bc4e:	f7f4 fcf3 	bl	8000638 <__aeabi_dmul>
 800bc52:	a361      	add	r3, pc, #388	@ (adr r3, 800bdd8 <atan+0x2e0>)
 800bc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc58:	f7f4 fb36 	bl	80002c8 <__aeabi_dsub>
 800bc5c:	4632      	mov	r2, r6
 800bc5e:	463b      	mov	r3, r7
 800bc60:	f7f4 fcea 	bl	8000638 <__aeabi_dmul>
 800bc64:	a35e      	add	r3, pc, #376	@ (adr r3, 800bde0 <atan+0x2e8>)
 800bc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6a:	f7f4 fb2d 	bl	80002c8 <__aeabi_dsub>
 800bc6e:	4632      	mov	r2, r6
 800bc70:	463b      	mov	r3, r7
 800bc72:	f7f4 fce1 	bl	8000638 <__aeabi_dmul>
 800bc76:	a35c      	add	r3, pc, #368	@ (adr r3, 800bde8 <atan+0x2f0>)
 800bc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7c:	f7f4 fb24 	bl	80002c8 <__aeabi_dsub>
 800bc80:	4632      	mov	r2, r6
 800bc82:	463b      	mov	r3, r7
 800bc84:	f7f4 fcd8 	bl	8000638 <__aeabi_dmul>
 800bc88:	a359      	add	r3, pc, #356	@ (adr r3, 800bdf0 <atan+0x2f8>)
 800bc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8e:	f7f4 fb1b 	bl	80002c8 <__aeabi_dsub>
 800bc92:	4632      	mov	r2, r6
 800bc94:	463b      	mov	r3, r7
 800bc96:	f7f4 fccf 	bl	8000638 <__aeabi_dmul>
 800bc9a:	4602      	mov	r2, r0
 800bc9c:	460b      	mov	r3, r1
 800bc9e:	4640      	mov	r0, r8
 800bca0:	4649      	mov	r1, r9
 800bca2:	f7f4 fb13 	bl	80002cc <__adddf3>
 800bca6:	4622      	mov	r2, r4
 800bca8:	462b      	mov	r3, r5
 800bcaa:	f7f4 fcc5 	bl	8000638 <__aeabi_dmul>
 800bcae:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	d148      	bne.n	800bd4a <atan+0x252>
 800bcb8:	4620      	mov	r0, r4
 800bcba:	4629      	mov	r1, r5
 800bcbc:	f7f4 fb04 	bl	80002c8 <__aeabi_dsub>
 800bcc0:	e72f      	b.n	800bb22 <atan+0x2a>
 800bcc2:	4b52      	ldr	r3, [pc, #328]	@ (800be0c <atan+0x314>)
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	4629      	mov	r1, r5
 800bcca:	f7f4 fafd 	bl	80002c8 <__aeabi_dsub>
 800bcce:	4b4f      	ldr	r3, [pc, #316]	@ (800be0c <atan+0x314>)
 800bcd0:	4606      	mov	r6, r0
 800bcd2:	460f      	mov	r7, r1
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	4629      	mov	r1, r5
 800bcda:	f7f4 faf7 	bl	80002cc <__adddf3>
 800bcde:	4602      	mov	r2, r0
 800bce0:	460b      	mov	r3, r1
 800bce2:	4630      	mov	r0, r6
 800bce4:	4639      	mov	r1, r7
 800bce6:	f7f4 fdd1 	bl	800088c <__aeabi_ddiv>
 800bcea:	f04f 0a01 	mov.w	sl, #1
 800bcee:	4604      	mov	r4, r0
 800bcf0:	460d      	mov	r5, r1
 800bcf2:	e765      	b.n	800bbc0 <atan+0xc8>
 800bcf4:	4b47      	ldr	r3, [pc, #284]	@ (800be14 <atan+0x31c>)
 800bcf6:	429e      	cmp	r6, r3
 800bcf8:	d21c      	bcs.n	800bd34 <atan+0x23c>
 800bcfa:	4b47      	ldr	r3, [pc, #284]	@ (800be18 <atan+0x320>)
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	4620      	mov	r0, r4
 800bd00:	4629      	mov	r1, r5
 800bd02:	f7f4 fae1 	bl	80002c8 <__aeabi_dsub>
 800bd06:	4b44      	ldr	r3, [pc, #272]	@ (800be18 <atan+0x320>)
 800bd08:	4606      	mov	r6, r0
 800bd0a:	460f      	mov	r7, r1
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	4620      	mov	r0, r4
 800bd10:	4629      	mov	r1, r5
 800bd12:	f7f4 fc91 	bl	8000638 <__aeabi_dmul>
 800bd16:	4b3d      	ldr	r3, [pc, #244]	@ (800be0c <atan+0x314>)
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f7f4 fad7 	bl	80002cc <__adddf3>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	460b      	mov	r3, r1
 800bd22:	4630      	mov	r0, r6
 800bd24:	4639      	mov	r1, r7
 800bd26:	f7f4 fdb1 	bl	800088c <__aeabi_ddiv>
 800bd2a:	f04f 0a02 	mov.w	sl, #2
 800bd2e:	4604      	mov	r4, r0
 800bd30:	460d      	mov	r5, r1
 800bd32:	e745      	b.n	800bbc0 <atan+0xc8>
 800bd34:	4622      	mov	r2, r4
 800bd36:	462b      	mov	r3, r5
 800bd38:	4938      	ldr	r1, [pc, #224]	@ (800be1c <atan+0x324>)
 800bd3a:	2000      	movs	r0, #0
 800bd3c:	f7f4 fda6 	bl	800088c <__aeabi_ddiv>
 800bd40:	f04f 0a03 	mov.w	sl, #3
 800bd44:	4604      	mov	r4, r0
 800bd46:	460d      	mov	r5, r1
 800bd48:	e73a      	b.n	800bbc0 <atan+0xc8>
 800bd4a:	4b35      	ldr	r3, [pc, #212]	@ (800be20 <atan+0x328>)
 800bd4c:	4e35      	ldr	r6, [pc, #212]	@ (800be24 <atan+0x32c>)
 800bd4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd56:	f7f4 fab7 	bl	80002c8 <__aeabi_dsub>
 800bd5a:	4622      	mov	r2, r4
 800bd5c:	462b      	mov	r3, r5
 800bd5e:	f7f4 fab3 	bl	80002c8 <__aeabi_dsub>
 800bd62:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bd66:	4602      	mov	r2, r0
 800bd68:	460b      	mov	r3, r1
 800bd6a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bd6e:	f7f4 faab 	bl	80002c8 <__aeabi_dsub>
 800bd72:	f1bb 0f00 	cmp.w	fp, #0
 800bd76:	4604      	mov	r4, r0
 800bd78:	460d      	mov	r5, r1
 800bd7a:	f6bf aedc 	bge.w	800bb36 <atan+0x3e>
 800bd7e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bd82:	461d      	mov	r5, r3
 800bd84:	e6d7      	b.n	800bb36 <atan+0x3e>
 800bd86:	a51c      	add	r5, pc, #112	@ (adr r5, 800bdf8 <atan+0x300>)
 800bd88:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bd8c:	e6d3      	b.n	800bb36 <atan+0x3e>
 800bd8e:	bf00      	nop
 800bd90:	54442d18 	.word	0x54442d18
 800bd94:	3ff921fb 	.word	0x3ff921fb
 800bd98:	8800759c 	.word	0x8800759c
 800bd9c:	7e37e43c 	.word	0x7e37e43c
 800bda0:	e322da11 	.word	0xe322da11
 800bda4:	3f90ad3a 	.word	0x3f90ad3a
 800bda8:	24760deb 	.word	0x24760deb
 800bdac:	3fa97b4b 	.word	0x3fa97b4b
 800bdb0:	a0d03d51 	.word	0xa0d03d51
 800bdb4:	3fb10d66 	.word	0x3fb10d66
 800bdb8:	c54c206e 	.word	0xc54c206e
 800bdbc:	3fb745cd 	.word	0x3fb745cd
 800bdc0:	920083ff 	.word	0x920083ff
 800bdc4:	3fc24924 	.word	0x3fc24924
 800bdc8:	5555550d 	.word	0x5555550d
 800bdcc:	3fd55555 	.word	0x3fd55555
 800bdd0:	2c6a6c2f 	.word	0x2c6a6c2f
 800bdd4:	bfa2b444 	.word	0xbfa2b444
 800bdd8:	52defd9a 	.word	0x52defd9a
 800bddc:	3fadde2d 	.word	0x3fadde2d
 800bde0:	af749a6d 	.word	0xaf749a6d
 800bde4:	3fb3b0f2 	.word	0x3fb3b0f2
 800bde8:	fe231671 	.word	0xfe231671
 800bdec:	3fbc71c6 	.word	0x3fbc71c6
 800bdf0:	9998ebc4 	.word	0x9998ebc4
 800bdf4:	3fc99999 	.word	0x3fc99999
 800bdf8:	54442d18 	.word	0x54442d18
 800bdfc:	bff921fb 	.word	0xbff921fb
 800be00:	440fffff 	.word	0x440fffff
 800be04:	7ff00000 	.word	0x7ff00000
 800be08:	3fdbffff 	.word	0x3fdbffff
 800be0c:	3ff00000 	.word	0x3ff00000
 800be10:	3ff2ffff 	.word	0x3ff2ffff
 800be14:	40038000 	.word	0x40038000
 800be18:	3ff80000 	.word	0x3ff80000
 800be1c:	bff00000 	.word	0xbff00000
 800be20:	0800e308 	.word	0x0800e308
 800be24:	0800e328 	.word	0x0800e328

0800be28 <cos>:
 800be28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be2a:	ec53 2b10 	vmov	r2, r3, d0
 800be2e:	4826      	ldr	r0, [pc, #152]	@ (800bec8 <cos+0xa0>)
 800be30:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800be34:	4281      	cmp	r1, r0
 800be36:	d806      	bhi.n	800be46 <cos+0x1e>
 800be38:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800bec0 <cos+0x98>
 800be3c:	b005      	add	sp, #20
 800be3e:	f85d eb04 	ldr.w	lr, [sp], #4
 800be42:	f000 b989 	b.w	800c158 <__kernel_cos>
 800be46:	4821      	ldr	r0, [pc, #132]	@ (800becc <cos+0xa4>)
 800be48:	4281      	cmp	r1, r0
 800be4a:	d908      	bls.n	800be5e <cos+0x36>
 800be4c:	4610      	mov	r0, r2
 800be4e:	4619      	mov	r1, r3
 800be50:	f7f4 fa3a 	bl	80002c8 <__aeabi_dsub>
 800be54:	ec41 0b10 	vmov	d0, r0, r1
 800be58:	b005      	add	sp, #20
 800be5a:	f85d fb04 	ldr.w	pc, [sp], #4
 800be5e:	4668      	mov	r0, sp
 800be60:	f001 f90a 	bl	800d078 <__ieee754_rem_pio2>
 800be64:	f000 0003 	and.w	r0, r0, #3
 800be68:	2801      	cmp	r0, #1
 800be6a:	d00b      	beq.n	800be84 <cos+0x5c>
 800be6c:	2802      	cmp	r0, #2
 800be6e:	d015      	beq.n	800be9c <cos+0x74>
 800be70:	b9d8      	cbnz	r0, 800beaa <cos+0x82>
 800be72:	ed9d 1b02 	vldr	d1, [sp, #8]
 800be76:	ed9d 0b00 	vldr	d0, [sp]
 800be7a:	f000 f96d 	bl	800c158 <__kernel_cos>
 800be7e:	ec51 0b10 	vmov	r0, r1, d0
 800be82:	e7e7      	b.n	800be54 <cos+0x2c>
 800be84:	ed9d 1b02 	vldr	d1, [sp, #8]
 800be88:	ed9d 0b00 	vldr	d0, [sp]
 800be8c:	f000 fa2c 	bl	800c2e8 <__kernel_sin>
 800be90:	ec53 2b10 	vmov	r2, r3, d0
 800be94:	4610      	mov	r0, r2
 800be96:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800be9a:	e7db      	b.n	800be54 <cos+0x2c>
 800be9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bea0:	ed9d 0b00 	vldr	d0, [sp]
 800bea4:	f000 f958 	bl	800c158 <__kernel_cos>
 800bea8:	e7f2      	b.n	800be90 <cos+0x68>
 800beaa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800beae:	ed9d 0b00 	vldr	d0, [sp]
 800beb2:	2001      	movs	r0, #1
 800beb4:	f000 fa18 	bl	800c2e8 <__kernel_sin>
 800beb8:	e7e1      	b.n	800be7e <cos+0x56>
 800beba:	bf00      	nop
 800bebc:	f3af 8000 	nop.w
	...
 800bec8:	3fe921fb 	.word	0x3fe921fb
 800becc:	7fefffff 	.word	0x7fefffff

0800bed0 <fabs>:
 800bed0:	ec51 0b10 	vmov	r0, r1, d0
 800bed4:	4602      	mov	r2, r0
 800bed6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800beda:	ec43 2b10 	vmov	d0, r2, r3
 800bede:	4770      	bx	lr

0800bee0 <sin>:
 800bee0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bee2:	ec53 2b10 	vmov	r2, r3, d0
 800bee6:	4826      	ldr	r0, [pc, #152]	@ (800bf80 <sin+0xa0>)
 800bee8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800beec:	4281      	cmp	r1, r0
 800beee:	d807      	bhi.n	800bf00 <sin+0x20>
 800bef0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800bf78 <sin+0x98>
 800bef4:	2000      	movs	r0, #0
 800bef6:	b005      	add	sp, #20
 800bef8:	f85d eb04 	ldr.w	lr, [sp], #4
 800befc:	f000 b9f4 	b.w	800c2e8 <__kernel_sin>
 800bf00:	4820      	ldr	r0, [pc, #128]	@ (800bf84 <sin+0xa4>)
 800bf02:	4281      	cmp	r1, r0
 800bf04:	d908      	bls.n	800bf18 <sin+0x38>
 800bf06:	4610      	mov	r0, r2
 800bf08:	4619      	mov	r1, r3
 800bf0a:	f7f4 f9dd 	bl	80002c8 <__aeabi_dsub>
 800bf0e:	ec41 0b10 	vmov	d0, r0, r1
 800bf12:	b005      	add	sp, #20
 800bf14:	f85d fb04 	ldr.w	pc, [sp], #4
 800bf18:	4668      	mov	r0, sp
 800bf1a:	f001 f8ad 	bl	800d078 <__ieee754_rem_pio2>
 800bf1e:	f000 0003 	and.w	r0, r0, #3
 800bf22:	2801      	cmp	r0, #1
 800bf24:	d00c      	beq.n	800bf40 <sin+0x60>
 800bf26:	2802      	cmp	r0, #2
 800bf28:	d011      	beq.n	800bf4e <sin+0x6e>
 800bf2a:	b9e8      	cbnz	r0, 800bf68 <sin+0x88>
 800bf2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bf30:	ed9d 0b00 	vldr	d0, [sp]
 800bf34:	2001      	movs	r0, #1
 800bf36:	f000 f9d7 	bl	800c2e8 <__kernel_sin>
 800bf3a:	ec51 0b10 	vmov	r0, r1, d0
 800bf3e:	e7e6      	b.n	800bf0e <sin+0x2e>
 800bf40:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bf44:	ed9d 0b00 	vldr	d0, [sp]
 800bf48:	f000 f906 	bl	800c158 <__kernel_cos>
 800bf4c:	e7f5      	b.n	800bf3a <sin+0x5a>
 800bf4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bf52:	ed9d 0b00 	vldr	d0, [sp]
 800bf56:	2001      	movs	r0, #1
 800bf58:	f000 f9c6 	bl	800c2e8 <__kernel_sin>
 800bf5c:	ec53 2b10 	vmov	r2, r3, d0
 800bf60:	4610      	mov	r0, r2
 800bf62:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bf66:	e7d2      	b.n	800bf0e <sin+0x2e>
 800bf68:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bf6c:	ed9d 0b00 	vldr	d0, [sp]
 800bf70:	f000 f8f2 	bl	800c158 <__kernel_cos>
 800bf74:	e7f2      	b.n	800bf5c <sin+0x7c>
 800bf76:	bf00      	nop
	...
 800bf80:	3fe921fb 	.word	0x3fe921fb
 800bf84:	7fefffff 	.word	0x7fefffff

0800bf88 <finite>:
 800bf88:	b082      	sub	sp, #8
 800bf8a:	ed8d 0b00 	vstr	d0, [sp]
 800bf8e:	9801      	ldr	r0, [sp, #4]
 800bf90:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800bf94:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800bf98:	0fc0      	lsrs	r0, r0, #31
 800bf9a:	b002      	add	sp, #8
 800bf9c:	4770      	bx	lr
	...

0800bfa0 <__ieee754_sqrt>:
 800bfa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa4:	4a68      	ldr	r2, [pc, #416]	@ (800c148 <__ieee754_sqrt+0x1a8>)
 800bfa6:	ec55 4b10 	vmov	r4, r5, d0
 800bfaa:	43aa      	bics	r2, r5
 800bfac:	462b      	mov	r3, r5
 800bfae:	4621      	mov	r1, r4
 800bfb0:	d110      	bne.n	800bfd4 <__ieee754_sqrt+0x34>
 800bfb2:	4622      	mov	r2, r4
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	f7f4 fb3e 	bl	8000638 <__aeabi_dmul>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	4629      	mov	r1, r5
 800bfc4:	f7f4 f982 	bl	80002cc <__adddf3>
 800bfc8:	4604      	mov	r4, r0
 800bfca:	460d      	mov	r5, r1
 800bfcc:	ec45 4b10 	vmov	d0, r4, r5
 800bfd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfd4:	2d00      	cmp	r5, #0
 800bfd6:	dc0e      	bgt.n	800bff6 <__ieee754_sqrt+0x56>
 800bfd8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800bfdc:	4322      	orrs	r2, r4
 800bfde:	d0f5      	beq.n	800bfcc <__ieee754_sqrt+0x2c>
 800bfe0:	b19d      	cbz	r5, 800c00a <__ieee754_sqrt+0x6a>
 800bfe2:	4622      	mov	r2, r4
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	4629      	mov	r1, r5
 800bfe8:	f7f4 f96e 	bl	80002c8 <__aeabi_dsub>
 800bfec:	4602      	mov	r2, r0
 800bfee:	460b      	mov	r3, r1
 800bff0:	f7f4 fc4c 	bl	800088c <__aeabi_ddiv>
 800bff4:	e7e8      	b.n	800bfc8 <__ieee754_sqrt+0x28>
 800bff6:	152a      	asrs	r2, r5, #20
 800bff8:	d115      	bne.n	800c026 <__ieee754_sqrt+0x86>
 800bffa:	2000      	movs	r0, #0
 800bffc:	e009      	b.n	800c012 <__ieee754_sqrt+0x72>
 800bffe:	0acb      	lsrs	r3, r1, #11
 800c000:	3a15      	subs	r2, #21
 800c002:	0549      	lsls	r1, r1, #21
 800c004:	2b00      	cmp	r3, #0
 800c006:	d0fa      	beq.n	800bffe <__ieee754_sqrt+0x5e>
 800c008:	e7f7      	b.n	800bffa <__ieee754_sqrt+0x5a>
 800c00a:	462a      	mov	r2, r5
 800c00c:	e7fa      	b.n	800c004 <__ieee754_sqrt+0x64>
 800c00e:	005b      	lsls	r3, r3, #1
 800c010:	3001      	adds	r0, #1
 800c012:	02dc      	lsls	r4, r3, #11
 800c014:	d5fb      	bpl.n	800c00e <__ieee754_sqrt+0x6e>
 800c016:	1e44      	subs	r4, r0, #1
 800c018:	1b12      	subs	r2, r2, r4
 800c01a:	f1c0 0420 	rsb	r4, r0, #32
 800c01e:	fa21 f404 	lsr.w	r4, r1, r4
 800c022:	4323      	orrs	r3, r4
 800c024:	4081      	lsls	r1, r0
 800c026:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c02a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c02e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c032:	07d2      	lsls	r2, r2, #31
 800c034:	bf5c      	itt	pl
 800c036:	005b      	lslpl	r3, r3, #1
 800c038:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c03c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c040:	bf58      	it	pl
 800c042:	0049      	lslpl	r1, r1, #1
 800c044:	2600      	movs	r6, #0
 800c046:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c04a:	106d      	asrs	r5, r5, #1
 800c04c:	0049      	lsls	r1, r1, #1
 800c04e:	2016      	movs	r0, #22
 800c050:	4632      	mov	r2, r6
 800c052:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c056:	1917      	adds	r7, r2, r4
 800c058:	429f      	cmp	r7, r3
 800c05a:	bfde      	ittt	le
 800c05c:	193a      	addle	r2, r7, r4
 800c05e:	1bdb      	suble	r3, r3, r7
 800c060:	1936      	addle	r6, r6, r4
 800c062:	0fcf      	lsrs	r7, r1, #31
 800c064:	3801      	subs	r0, #1
 800c066:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c06a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c06e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c072:	d1f0      	bne.n	800c056 <__ieee754_sqrt+0xb6>
 800c074:	4604      	mov	r4, r0
 800c076:	2720      	movs	r7, #32
 800c078:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c07c:	429a      	cmp	r2, r3
 800c07e:	eb00 0e0c 	add.w	lr, r0, ip
 800c082:	db02      	blt.n	800c08a <__ieee754_sqrt+0xea>
 800c084:	d113      	bne.n	800c0ae <__ieee754_sqrt+0x10e>
 800c086:	458e      	cmp	lr, r1
 800c088:	d811      	bhi.n	800c0ae <__ieee754_sqrt+0x10e>
 800c08a:	f1be 0f00 	cmp.w	lr, #0
 800c08e:	eb0e 000c 	add.w	r0, lr, ip
 800c092:	da42      	bge.n	800c11a <__ieee754_sqrt+0x17a>
 800c094:	2800      	cmp	r0, #0
 800c096:	db40      	blt.n	800c11a <__ieee754_sqrt+0x17a>
 800c098:	f102 0801 	add.w	r8, r2, #1
 800c09c:	1a9b      	subs	r3, r3, r2
 800c09e:	458e      	cmp	lr, r1
 800c0a0:	bf88      	it	hi
 800c0a2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c0a6:	eba1 010e 	sub.w	r1, r1, lr
 800c0aa:	4464      	add	r4, ip
 800c0ac:	4642      	mov	r2, r8
 800c0ae:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c0b2:	3f01      	subs	r7, #1
 800c0b4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c0b8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c0bc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c0c0:	d1dc      	bne.n	800c07c <__ieee754_sqrt+0xdc>
 800c0c2:	4319      	orrs	r1, r3
 800c0c4:	d01b      	beq.n	800c0fe <__ieee754_sqrt+0x15e>
 800c0c6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c14c <__ieee754_sqrt+0x1ac>
 800c0ca:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c150 <__ieee754_sqrt+0x1b0>
 800c0ce:	e9da 0100 	ldrd	r0, r1, [sl]
 800c0d2:	e9db 2300 	ldrd	r2, r3, [fp]
 800c0d6:	f7f4 f8f7 	bl	80002c8 <__aeabi_dsub>
 800c0da:	e9da 8900 	ldrd	r8, r9, [sl]
 800c0de:	4602      	mov	r2, r0
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	4640      	mov	r0, r8
 800c0e4:	4649      	mov	r1, r9
 800c0e6:	f7f4 fd23 	bl	8000b30 <__aeabi_dcmple>
 800c0ea:	b140      	cbz	r0, 800c0fe <__ieee754_sqrt+0x15e>
 800c0ec:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c0f0:	e9da 0100 	ldrd	r0, r1, [sl]
 800c0f4:	e9db 2300 	ldrd	r2, r3, [fp]
 800c0f8:	d111      	bne.n	800c11e <__ieee754_sqrt+0x17e>
 800c0fa:	3601      	adds	r6, #1
 800c0fc:	463c      	mov	r4, r7
 800c0fe:	1072      	asrs	r2, r6, #1
 800c100:	0863      	lsrs	r3, r4, #1
 800c102:	07f1      	lsls	r1, r6, #31
 800c104:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c108:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c10c:	bf48      	it	mi
 800c10e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c112:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c116:	4618      	mov	r0, r3
 800c118:	e756      	b.n	800bfc8 <__ieee754_sqrt+0x28>
 800c11a:	4690      	mov	r8, r2
 800c11c:	e7be      	b.n	800c09c <__ieee754_sqrt+0xfc>
 800c11e:	f7f4 f8d5 	bl	80002cc <__adddf3>
 800c122:	e9da 8900 	ldrd	r8, r9, [sl]
 800c126:	4602      	mov	r2, r0
 800c128:	460b      	mov	r3, r1
 800c12a:	4640      	mov	r0, r8
 800c12c:	4649      	mov	r1, r9
 800c12e:	f7f4 fcf5 	bl	8000b1c <__aeabi_dcmplt>
 800c132:	b120      	cbz	r0, 800c13e <__ieee754_sqrt+0x19e>
 800c134:	1ca0      	adds	r0, r4, #2
 800c136:	bf08      	it	eq
 800c138:	3601      	addeq	r6, #1
 800c13a:	3402      	adds	r4, #2
 800c13c:	e7df      	b.n	800c0fe <__ieee754_sqrt+0x15e>
 800c13e:	1c63      	adds	r3, r4, #1
 800c140:	f023 0401 	bic.w	r4, r3, #1
 800c144:	e7db      	b.n	800c0fe <__ieee754_sqrt+0x15e>
 800c146:	bf00      	nop
 800c148:	7ff00000 	.word	0x7ff00000
 800c14c:	200001f0 	.word	0x200001f0
 800c150:	200001e8 	.word	0x200001e8
 800c154:	00000000 	.word	0x00000000

0800c158 <__kernel_cos>:
 800c158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c15c:	ec57 6b10 	vmov	r6, r7, d0
 800c160:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c164:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800c168:	ed8d 1b00 	vstr	d1, [sp]
 800c16c:	d206      	bcs.n	800c17c <__kernel_cos+0x24>
 800c16e:	4630      	mov	r0, r6
 800c170:	4639      	mov	r1, r7
 800c172:	f7f4 fd11 	bl	8000b98 <__aeabi_d2iz>
 800c176:	2800      	cmp	r0, #0
 800c178:	f000 8088 	beq.w	800c28c <__kernel_cos+0x134>
 800c17c:	4632      	mov	r2, r6
 800c17e:	463b      	mov	r3, r7
 800c180:	4630      	mov	r0, r6
 800c182:	4639      	mov	r1, r7
 800c184:	f7f4 fa58 	bl	8000638 <__aeabi_dmul>
 800c188:	4b51      	ldr	r3, [pc, #324]	@ (800c2d0 <__kernel_cos+0x178>)
 800c18a:	2200      	movs	r2, #0
 800c18c:	4604      	mov	r4, r0
 800c18e:	460d      	mov	r5, r1
 800c190:	f7f4 fa52 	bl	8000638 <__aeabi_dmul>
 800c194:	a340      	add	r3, pc, #256	@ (adr r3, 800c298 <__kernel_cos+0x140>)
 800c196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19a:	4682      	mov	sl, r0
 800c19c:	468b      	mov	fp, r1
 800c19e:	4620      	mov	r0, r4
 800c1a0:	4629      	mov	r1, r5
 800c1a2:	f7f4 fa49 	bl	8000638 <__aeabi_dmul>
 800c1a6:	a33e      	add	r3, pc, #248	@ (adr r3, 800c2a0 <__kernel_cos+0x148>)
 800c1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ac:	f7f4 f88e 	bl	80002cc <__adddf3>
 800c1b0:	4622      	mov	r2, r4
 800c1b2:	462b      	mov	r3, r5
 800c1b4:	f7f4 fa40 	bl	8000638 <__aeabi_dmul>
 800c1b8:	a33b      	add	r3, pc, #236	@ (adr r3, 800c2a8 <__kernel_cos+0x150>)
 800c1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1be:	f7f4 f883 	bl	80002c8 <__aeabi_dsub>
 800c1c2:	4622      	mov	r2, r4
 800c1c4:	462b      	mov	r3, r5
 800c1c6:	f7f4 fa37 	bl	8000638 <__aeabi_dmul>
 800c1ca:	a339      	add	r3, pc, #228	@ (adr r3, 800c2b0 <__kernel_cos+0x158>)
 800c1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d0:	f7f4 f87c 	bl	80002cc <__adddf3>
 800c1d4:	4622      	mov	r2, r4
 800c1d6:	462b      	mov	r3, r5
 800c1d8:	f7f4 fa2e 	bl	8000638 <__aeabi_dmul>
 800c1dc:	a336      	add	r3, pc, #216	@ (adr r3, 800c2b8 <__kernel_cos+0x160>)
 800c1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e2:	f7f4 f871 	bl	80002c8 <__aeabi_dsub>
 800c1e6:	4622      	mov	r2, r4
 800c1e8:	462b      	mov	r3, r5
 800c1ea:	f7f4 fa25 	bl	8000638 <__aeabi_dmul>
 800c1ee:	a334      	add	r3, pc, #208	@ (adr r3, 800c2c0 <__kernel_cos+0x168>)
 800c1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f4:	f7f4 f86a 	bl	80002cc <__adddf3>
 800c1f8:	4622      	mov	r2, r4
 800c1fa:	462b      	mov	r3, r5
 800c1fc:	f7f4 fa1c 	bl	8000638 <__aeabi_dmul>
 800c200:	4622      	mov	r2, r4
 800c202:	462b      	mov	r3, r5
 800c204:	f7f4 fa18 	bl	8000638 <__aeabi_dmul>
 800c208:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c20c:	4604      	mov	r4, r0
 800c20e:	460d      	mov	r5, r1
 800c210:	4630      	mov	r0, r6
 800c212:	4639      	mov	r1, r7
 800c214:	f7f4 fa10 	bl	8000638 <__aeabi_dmul>
 800c218:	460b      	mov	r3, r1
 800c21a:	4602      	mov	r2, r0
 800c21c:	4629      	mov	r1, r5
 800c21e:	4620      	mov	r0, r4
 800c220:	f7f4 f852 	bl	80002c8 <__aeabi_dsub>
 800c224:	4b2b      	ldr	r3, [pc, #172]	@ (800c2d4 <__kernel_cos+0x17c>)
 800c226:	4598      	cmp	r8, r3
 800c228:	4606      	mov	r6, r0
 800c22a:	460f      	mov	r7, r1
 800c22c:	d810      	bhi.n	800c250 <__kernel_cos+0xf8>
 800c22e:	4602      	mov	r2, r0
 800c230:	460b      	mov	r3, r1
 800c232:	4650      	mov	r0, sl
 800c234:	4659      	mov	r1, fp
 800c236:	f7f4 f847 	bl	80002c8 <__aeabi_dsub>
 800c23a:	460b      	mov	r3, r1
 800c23c:	4926      	ldr	r1, [pc, #152]	@ (800c2d8 <__kernel_cos+0x180>)
 800c23e:	4602      	mov	r2, r0
 800c240:	2000      	movs	r0, #0
 800c242:	f7f4 f841 	bl	80002c8 <__aeabi_dsub>
 800c246:	ec41 0b10 	vmov	d0, r0, r1
 800c24a:	b003      	add	sp, #12
 800c24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c250:	4b22      	ldr	r3, [pc, #136]	@ (800c2dc <__kernel_cos+0x184>)
 800c252:	4921      	ldr	r1, [pc, #132]	@ (800c2d8 <__kernel_cos+0x180>)
 800c254:	4598      	cmp	r8, r3
 800c256:	bf8c      	ite	hi
 800c258:	4d21      	ldrhi	r5, [pc, #132]	@ (800c2e0 <__kernel_cos+0x188>)
 800c25a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800c25e:	2400      	movs	r4, #0
 800c260:	4622      	mov	r2, r4
 800c262:	462b      	mov	r3, r5
 800c264:	2000      	movs	r0, #0
 800c266:	f7f4 f82f 	bl	80002c8 <__aeabi_dsub>
 800c26a:	4622      	mov	r2, r4
 800c26c:	4680      	mov	r8, r0
 800c26e:	4689      	mov	r9, r1
 800c270:	462b      	mov	r3, r5
 800c272:	4650      	mov	r0, sl
 800c274:	4659      	mov	r1, fp
 800c276:	f7f4 f827 	bl	80002c8 <__aeabi_dsub>
 800c27a:	4632      	mov	r2, r6
 800c27c:	463b      	mov	r3, r7
 800c27e:	f7f4 f823 	bl	80002c8 <__aeabi_dsub>
 800c282:	4602      	mov	r2, r0
 800c284:	460b      	mov	r3, r1
 800c286:	4640      	mov	r0, r8
 800c288:	4649      	mov	r1, r9
 800c28a:	e7da      	b.n	800c242 <__kernel_cos+0xea>
 800c28c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800c2c8 <__kernel_cos+0x170>
 800c290:	e7db      	b.n	800c24a <__kernel_cos+0xf2>
 800c292:	bf00      	nop
 800c294:	f3af 8000 	nop.w
 800c298:	be8838d4 	.word	0xbe8838d4
 800c29c:	bda8fae9 	.word	0xbda8fae9
 800c2a0:	bdb4b1c4 	.word	0xbdb4b1c4
 800c2a4:	3e21ee9e 	.word	0x3e21ee9e
 800c2a8:	809c52ad 	.word	0x809c52ad
 800c2ac:	3e927e4f 	.word	0x3e927e4f
 800c2b0:	19cb1590 	.word	0x19cb1590
 800c2b4:	3efa01a0 	.word	0x3efa01a0
 800c2b8:	16c15177 	.word	0x16c15177
 800c2bc:	3f56c16c 	.word	0x3f56c16c
 800c2c0:	5555554c 	.word	0x5555554c
 800c2c4:	3fa55555 	.word	0x3fa55555
 800c2c8:	00000000 	.word	0x00000000
 800c2cc:	3ff00000 	.word	0x3ff00000
 800c2d0:	3fe00000 	.word	0x3fe00000
 800c2d4:	3fd33332 	.word	0x3fd33332
 800c2d8:	3ff00000 	.word	0x3ff00000
 800c2dc:	3fe90000 	.word	0x3fe90000
 800c2e0:	3fd20000 	.word	0x3fd20000
 800c2e4:	00000000 	.word	0x00000000

0800c2e8 <__kernel_sin>:
 800c2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ec:	ec55 4b10 	vmov	r4, r5, d0
 800c2f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c2f4:	b085      	sub	sp, #20
 800c2f6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800c2fa:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c2fe:	4680      	mov	r8, r0
 800c300:	d205      	bcs.n	800c30e <__kernel_sin+0x26>
 800c302:	4620      	mov	r0, r4
 800c304:	4629      	mov	r1, r5
 800c306:	f7f4 fc47 	bl	8000b98 <__aeabi_d2iz>
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d052      	beq.n	800c3b4 <__kernel_sin+0xcc>
 800c30e:	4622      	mov	r2, r4
 800c310:	462b      	mov	r3, r5
 800c312:	4620      	mov	r0, r4
 800c314:	4629      	mov	r1, r5
 800c316:	f7f4 f98f 	bl	8000638 <__aeabi_dmul>
 800c31a:	4682      	mov	sl, r0
 800c31c:	468b      	mov	fp, r1
 800c31e:	4602      	mov	r2, r0
 800c320:	460b      	mov	r3, r1
 800c322:	4620      	mov	r0, r4
 800c324:	4629      	mov	r1, r5
 800c326:	f7f4 f987 	bl	8000638 <__aeabi_dmul>
 800c32a:	a342      	add	r3, pc, #264	@ (adr r3, 800c434 <__kernel_sin+0x14c>)
 800c32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c330:	e9cd 0100 	strd	r0, r1, [sp]
 800c334:	4650      	mov	r0, sl
 800c336:	4659      	mov	r1, fp
 800c338:	f7f4 f97e 	bl	8000638 <__aeabi_dmul>
 800c33c:	a33f      	add	r3, pc, #252	@ (adr r3, 800c43c <__kernel_sin+0x154>)
 800c33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c342:	f7f3 ffc1 	bl	80002c8 <__aeabi_dsub>
 800c346:	4652      	mov	r2, sl
 800c348:	465b      	mov	r3, fp
 800c34a:	f7f4 f975 	bl	8000638 <__aeabi_dmul>
 800c34e:	a33d      	add	r3, pc, #244	@ (adr r3, 800c444 <__kernel_sin+0x15c>)
 800c350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c354:	f7f3 ffba 	bl	80002cc <__adddf3>
 800c358:	4652      	mov	r2, sl
 800c35a:	465b      	mov	r3, fp
 800c35c:	f7f4 f96c 	bl	8000638 <__aeabi_dmul>
 800c360:	a33a      	add	r3, pc, #232	@ (adr r3, 800c44c <__kernel_sin+0x164>)
 800c362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c366:	f7f3 ffaf 	bl	80002c8 <__aeabi_dsub>
 800c36a:	4652      	mov	r2, sl
 800c36c:	465b      	mov	r3, fp
 800c36e:	f7f4 f963 	bl	8000638 <__aeabi_dmul>
 800c372:	a338      	add	r3, pc, #224	@ (adr r3, 800c454 <__kernel_sin+0x16c>)
 800c374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c378:	f7f3 ffa8 	bl	80002cc <__adddf3>
 800c37c:	4606      	mov	r6, r0
 800c37e:	460f      	mov	r7, r1
 800c380:	f1b8 0f00 	cmp.w	r8, #0
 800c384:	d11b      	bne.n	800c3be <__kernel_sin+0xd6>
 800c386:	4602      	mov	r2, r0
 800c388:	460b      	mov	r3, r1
 800c38a:	4650      	mov	r0, sl
 800c38c:	4659      	mov	r1, fp
 800c38e:	f7f4 f953 	bl	8000638 <__aeabi_dmul>
 800c392:	a325      	add	r3, pc, #148	@ (adr r3, 800c428 <__kernel_sin+0x140>)
 800c394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c398:	f7f3 ff96 	bl	80002c8 <__aeabi_dsub>
 800c39c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3a0:	f7f4 f94a 	bl	8000638 <__aeabi_dmul>
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	4629      	mov	r1, r5
 800c3ac:	f7f3 ff8e 	bl	80002cc <__adddf3>
 800c3b0:	4604      	mov	r4, r0
 800c3b2:	460d      	mov	r5, r1
 800c3b4:	ec45 4b10 	vmov	d0, r4, r5
 800c3b8:	b005      	add	sp, #20
 800c3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3c2:	4b1b      	ldr	r3, [pc, #108]	@ (800c430 <__kernel_sin+0x148>)
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	f7f4 f937 	bl	8000638 <__aeabi_dmul>
 800c3ca:	4632      	mov	r2, r6
 800c3cc:	4680      	mov	r8, r0
 800c3ce:	4689      	mov	r9, r1
 800c3d0:	463b      	mov	r3, r7
 800c3d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c3d6:	f7f4 f92f 	bl	8000638 <__aeabi_dmul>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	460b      	mov	r3, r1
 800c3de:	4640      	mov	r0, r8
 800c3e0:	4649      	mov	r1, r9
 800c3e2:	f7f3 ff71 	bl	80002c8 <__aeabi_dsub>
 800c3e6:	4652      	mov	r2, sl
 800c3e8:	465b      	mov	r3, fp
 800c3ea:	f7f4 f925 	bl	8000638 <__aeabi_dmul>
 800c3ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3f2:	f7f3 ff69 	bl	80002c8 <__aeabi_dsub>
 800c3f6:	a30c      	add	r3, pc, #48	@ (adr r3, 800c428 <__kernel_sin+0x140>)
 800c3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fc:	4606      	mov	r6, r0
 800c3fe:	460f      	mov	r7, r1
 800c400:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c404:	f7f4 f918 	bl	8000638 <__aeabi_dmul>
 800c408:	4602      	mov	r2, r0
 800c40a:	460b      	mov	r3, r1
 800c40c:	4630      	mov	r0, r6
 800c40e:	4639      	mov	r1, r7
 800c410:	f7f3 ff5c 	bl	80002cc <__adddf3>
 800c414:	4602      	mov	r2, r0
 800c416:	460b      	mov	r3, r1
 800c418:	4620      	mov	r0, r4
 800c41a:	4629      	mov	r1, r5
 800c41c:	f7f3 ff54 	bl	80002c8 <__aeabi_dsub>
 800c420:	e7c6      	b.n	800c3b0 <__kernel_sin+0xc8>
 800c422:	bf00      	nop
 800c424:	f3af 8000 	nop.w
 800c428:	55555549 	.word	0x55555549
 800c42c:	3fc55555 	.word	0x3fc55555
 800c430:	3fe00000 	.word	0x3fe00000
 800c434:	5acfd57c 	.word	0x5acfd57c
 800c438:	3de5d93a 	.word	0x3de5d93a
 800c43c:	8a2b9ceb 	.word	0x8a2b9ceb
 800c440:	3e5ae5e6 	.word	0x3e5ae5e6
 800c444:	57b1fe7d 	.word	0x57b1fe7d
 800c448:	3ec71de3 	.word	0x3ec71de3
 800c44c:	19c161d5 	.word	0x19c161d5
 800c450:	3f2a01a0 	.word	0x3f2a01a0
 800c454:	1110f8a6 	.word	0x1110f8a6
 800c458:	3f811111 	.word	0x3f811111
 800c45c:	00000000 	.word	0x00000000

0800c460 <__ieee754_atan2>:
 800c460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c464:	ec57 6b11 	vmov	r6, r7, d1
 800c468:	4273      	negs	r3, r6
 800c46a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800c5e8 <__ieee754_atan2+0x188>
 800c46e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800c472:	4333      	orrs	r3, r6
 800c474:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c478:	4543      	cmp	r3, r8
 800c47a:	ec51 0b10 	vmov	r0, r1, d0
 800c47e:	4635      	mov	r5, r6
 800c480:	d809      	bhi.n	800c496 <__ieee754_atan2+0x36>
 800c482:	4244      	negs	r4, r0
 800c484:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c488:	4304      	orrs	r4, r0
 800c48a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c48e:	4544      	cmp	r4, r8
 800c490:	468e      	mov	lr, r1
 800c492:	4681      	mov	r9, r0
 800c494:	d907      	bls.n	800c4a6 <__ieee754_atan2+0x46>
 800c496:	4632      	mov	r2, r6
 800c498:	463b      	mov	r3, r7
 800c49a:	f7f3 ff17 	bl	80002cc <__adddf3>
 800c49e:	ec41 0b10 	vmov	d0, r0, r1
 800c4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4a6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800c4aa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800c4ae:	4334      	orrs	r4, r6
 800c4b0:	d103      	bne.n	800c4ba <__ieee754_atan2+0x5a>
 800c4b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4b6:	f7ff bb1f 	b.w	800baf8 <atan>
 800c4ba:	17bc      	asrs	r4, r7, #30
 800c4bc:	f004 0402 	and.w	r4, r4, #2
 800c4c0:	ea53 0909 	orrs.w	r9, r3, r9
 800c4c4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c4c8:	d107      	bne.n	800c4da <__ieee754_atan2+0x7a>
 800c4ca:	2c02      	cmp	r4, #2
 800c4cc:	d05f      	beq.n	800c58e <__ieee754_atan2+0x12e>
 800c4ce:	2c03      	cmp	r4, #3
 800c4d0:	d1e5      	bne.n	800c49e <__ieee754_atan2+0x3e>
 800c4d2:	a141      	add	r1, pc, #260	@ (adr r1, 800c5d8 <__ieee754_atan2+0x178>)
 800c4d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4d8:	e7e1      	b.n	800c49e <__ieee754_atan2+0x3e>
 800c4da:	4315      	orrs	r5, r2
 800c4dc:	d106      	bne.n	800c4ec <__ieee754_atan2+0x8c>
 800c4de:	f1be 0f00 	cmp.w	lr, #0
 800c4e2:	da5f      	bge.n	800c5a4 <__ieee754_atan2+0x144>
 800c4e4:	a13e      	add	r1, pc, #248	@ (adr r1, 800c5e0 <__ieee754_atan2+0x180>)
 800c4e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4ea:	e7d8      	b.n	800c49e <__ieee754_atan2+0x3e>
 800c4ec:	4542      	cmp	r2, r8
 800c4ee:	d10f      	bne.n	800c510 <__ieee754_atan2+0xb0>
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	f104 34ff 	add.w	r4, r4, #4294967295
 800c4f6:	d107      	bne.n	800c508 <__ieee754_atan2+0xa8>
 800c4f8:	2c02      	cmp	r4, #2
 800c4fa:	d84c      	bhi.n	800c596 <__ieee754_atan2+0x136>
 800c4fc:	4b34      	ldr	r3, [pc, #208]	@ (800c5d0 <__ieee754_atan2+0x170>)
 800c4fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c502:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c506:	e7ca      	b.n	800c49e <__ieee754_atan2+0x3e>
 800c508:	2c02      	cmp	r4, #2
 800c50a:	d848      	bhi.n	800c59e <__ieee754_atan2+0x13e>
 800c50c:	4b31      	ldr	r3, [pc, #196]	@ (800c5d4 <__ieee754_atan2+0x174>)
 800c50e:	e7f6      	b.n	800c4fe <__ieee754_atan2+0x9e>
 800c510:	4543      	cmp	r3, r8
 800c512:	d0e4      	beq.n	800c4de <__ieee754_atan2+0x7e>
 800c514:	1a9b      	subs	r3, r3, r2
 800c516:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800c51a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c51e:	da1e      	bge.n	800c55e <__ieee754_atan2+0xfe>
 800c520:	2f00      	cmp	r7, #0
 800c522:	da01      	bge.n	800c528 <__ieee754_atan2+0xc8>
 800c524:	323c      	adds	r2, #60	@ 0x3c
 800c526:	db1e      	blt.n	800c566 <__ieee754_atan2+0x106>
 800c528:	4632      	mov	r2, r6
 800c52a:	463b      	mov	r3, r7
 800c52c:	f7f4 f9ae 	bl	800088c <__aeabi_ddiv>
 800c530:	ec41 0b10 	vmov	d0, r0, r1
 800c534:	f7ff fccc 	bl	800bed0 <fabs>
 800c538:	f7ff fade 	bl	800baf8 <atan>
 800c53c:	ec51 0b10 	vmov	r0, r1, d0
 800c540:	2c01      	cmp	r4, #1
 800c542:	d013      	beq.n	800c56c <__ieee754_atan2+0x10c>
 800c544:	2c02      	cmp	r4, #2
 800c546:	d015      	beq.n	800c574 <__ieee754_atan2+0x114>
 800c548:	2c00      	cmp	r4, #0
 800c54a:	d0a8      	beq.n	800c49e <__ieee754_atan2+0x3e>
 800c54c:	a318      	add	r3, pc, #96	@ (adr r3, 800c5b0 <__ieee754_atan2+0x150>)
 800c54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c552:	f7f3 feb9 	bl	80002c8 <__aeabi_dsub>
 800c556:	a318      	add	r3, pc, #96	@ (adr r3, 800c5b8 <__ieee754_atan2+0x158>)
 800c558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55c:	e014      	b.n	800c588 <__ieee754_atan2+0x128>
 800c55e:	a118      	add	r1, pc, #96	@ (adr r1, 800c5c0 <__ieee754_atan2+0x160>)
 800c560:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c564:	e7ec      	b.n	800c540 <__ieee754_atan2+0xe0>
 800c566:	2000      	movs	r0, #0
 800c568:	2100      	movs	r1, #0
 800c56a:	e7e9      	b.n	800c540 <__ieee754_atan2+0xe0>
 800c56c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c570:	4619      	mov	r1, r3
 800c572:	e794      	b.n	800c49e <__ieee754_atan2+0x3e>
 800c574:	a30e      	add	r3, pc, #56	@ (adr r3, 800c5b0 <__ieee754_atan2+0x150>)
 800c576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57a:	f7f3 fea5 	bl	80002c8 <__aeabi_dsub>
 800c57e:	4602      	mov	r2, r0
 800c580:	460b      	mov	r3, r1
 800c582:	a10d      	add	r1, pc, #52	@ (adr r1, 800c5b8 <__ieee754_atan2+0x158>)
 800c584:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c588:	f7f3 fe9e 	bl	80002c8 <__aeabi_dsub>
 800c58c:	e787      	b.n	800c49e <__ieee754_atan2+0x3e>
 800c58e:	a10a      	add	r1, pc, #40	@ (adr r1, 800c5b8 <__ieee754_atan2+0x158>)
 800c590:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c594:	e783      	b.n	800c49e <__ieee754_atan2+0x3e>
 800c596:	a10c      	add	r1, pc, #48	@ (adr r1, 800c5c8 <__ieee754_atan2+0x168>)
 800c598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c59c:	e77f      	b.n	800c49e <__ieee754_atan2+0x3e>
 800c59e:	2000      	movs	r0, #0
 800c5a0:	2100      	movs	r1, #0
 800c5a2:	e77c      	b.n	800c49e <__ieee754_atan2+0x3e>
 800c5a4:	a106      	add	r1, pc, #24	@ (adr r1, 800c5c0 <__ieee754_atan2+0x160>)
 800c5a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5aa:	e778      	b.n	800c49e <__ieee754_atan2+0x3e>
 800c5ac:	f3af 8000 	nop.w
 800c5b0:	33145c07 	.word	0x33145c07
 800c5b4:	3ca1a626 	.word	0x3ca1a626
 800c5b8:	54442d18 	.word	0x54442d18
 800c5bc:	400921fb 	.word	0x400921fb
 800c5c0:	54442d18 	.word	0x54442d18
 800c5c4:	3ff921fb 	.word	0x3ff921fb
 800c5c8:	54442d18 	.word	0x54442d18
 800c5cc:	3fe921fb 	.word	0x3fe921fb
 800c5d0:	0800e360 	.word	0x0800e360
 800c5d4:	0800e348 	.word	0x0800e348
 800c5d8:	54442d18 	.word	0x54442d18
 800c5dc:	c00921fb 	.word	0xc00921fb
 800c5e0:	54442d18 	.word	0x54442d18
 800c5e4:	bff921fb 	.word	0xbff921fb
 800c5e8:	7ff00000 	.word	0x7ff00000
 800c5ec:	00000000 	.word	0x00000000

0800c5f0 <__ieee754_pow>:
 800c5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f4:	b091      	sub	sp, #68	@ 0x44
 800c5f6:	ed8d 1b00 	vstr	d1, [sp]
 800c5fa:	e9dd 1900 	ldrd	r1, r9, [sp]
 800c5fe:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800c602:	ea5a 0001 	orrs.w	r0, sl, r1
 800c606:	ec57 6b10 	vmov	r6, r7, d0
 800c60a:	d113      	bne.n	800c634 <__ieee754_pow+0x44>
 800c60c:	19b3      	adds	r3, r6, r6
 800c60e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800c612:	4152      	adcs	r2, r2
 800c614:	4298      	cmp	r0, r3
 800c616:	4b98      	ldr	r3, [pc, #608]	@ (800c878 <__ieee754_pow+0x288>)
 800c618:	4193      	sbcs	r3, r2
 800c61a:	f080 84ea 	bcs.w	800cff2 <__ieee754_pow+0xa02>
 800c61e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c622:	4630      	mov	r0, r6
 800c624:	4639      	mov	r1, r7
 800c626:	f7f3 fe51 	bl	80002cc <__adddf3>
 800c62a:	ec41 0b10 	vmov	d0, r0, r1
 800c62e:	b011      	add	sp, #68	@ 0x44
 800c630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c634:	4a91      	ldr	r2, [pc, #580]	@ (800c87c <__ieee754_pow+0x28c>)
 800c636:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c63a:	4590      	cmp	r8, r2
 800c63c:	463d      	mov	r5, r7
 800c63e:	4633      	mov	r3, r6
 800c640:	d806      	bhi.n	800c650 <__ieee754_pow+0x60>
 800c642:	d101      	bne.n	800c648 <__ieee754_pow+0x58>
 800c644:	2e00      	cmp	r6, #0
 800c646:	d1ea      	bne.n	800c61e <__ieee754_pow+0x2e>
 800c648:	4592      	cmp	sl, r2
 800c64a:	d801      	bhi.n	800c650 <__ieee754_pow+0x60>
 800c64c:	d10e      	bne.n	800c66c <__ieee754_pow+0x7c>
 800c64e:	b169      	cbz	r1, 800c66c <__ieee754_pow+0x7c>
 800c650:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800c654:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800c658:	431d      	orrs	r5, r3
 800c65a:	d1e0      	bne.n	800c61e <__ieee754_pow+0x2e>
 800c65c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c660:	18db      	adds	r3, r3, r3
 800c662:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800c666:	4152      	adcs	r2, r2
 800c668:	429d      	cmp	r5, r3
 800c66a:	e7d4      	b.n	800c616 <__ieee754_pow+0x26>
 800c66c:	2d00      	cmp	r5, #0
 800c66e:	46c3      	mov	fp, r8
 800c670:	da3a      	bge.n	800c6e8 <__ieee754_pow+0xf8>
 800c672:	4a83      	ldr	r2, [pc, #524]	@ (800c880 <__ieee754_pow+0x290>)
 800c674:	4592      	cmp	sl, r2
 800c676:	d84d      	bhi.n	800c714 <__ieee754_pow+0x124>
 800c678:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800c67c:	4592      	cmp	sl, r2
 800c67e:	f240 84c7 	bls.w	800d010 <__ieee754_pow+0xa20>
 800c682:	ea4f 522a 	mov.w	r2, sl, asr #20
 800c686:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800c68a:	2a14      	cmp	r2, #20
 800c68c:	dd0f      	ble.n	800c6ae <__ieee754_pow+0xbe>
 800c68e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800c692:	fa21 f402 	lsr.w	r4, r1, r2
 800c696:	fa04 f202 	lsl.w	r2, r4, r2
 800c69a:	428a      	cmp	r2, r1
 800c69c:	f040 84b8 	bne.w	800d010 <__ieee754_pow+0xa20>
 800c6a0:	f004 0401 	and.w	r4, r4, #1
 800c6a4:	f1c4 0402 	rsb	r4, r4, #2
 800c6a8:	2900      	cmp	r1, #0
 800c6aa:	d158      	bne.n	800c75e <__ieee754_pow+0x16e>
 800c6ac:	e00e      	b.n	800c6cc <__ieee754_pow+0xdc>
 800c6ae:	2900      	cmp	r1, #0
 800c6b0:	d154      	bne.n	800c75c <__ieee754_pow+0x16c>
 800c6b2:	f1c2 0214 	rsb	r2, r2, #20
 800c6b6:	fa4a f402 	asr.w	r4, sl, r2
 800c6ba:	fa04 f202 	lsl.w	r2, r4, r2
 800c6be:	4552      	cmp	r2, sl
 800c6c0:	f040 84a3 	bne.w	800d00a <__ieee754_pow+0xa1a>
 800c6c4:	f004 0401 	and.w	r4, r4, #1
 800c6c8:	f1c4 0402 	rsb	r4, r4, #2
 800c6cc:	4a6d      	ldr	r2, [pc, #436]	@ (800c884 <__ieee754_pow+0x294>)
 800c6ce:	4592      	cmp	sl, r2
 800c6d0:	d12e      	bne.n	800c730 <__ieee754_pow+0x140>
 800c6d2:	f1b9 0f00 	cmp.w	r9, #0
 800c6d6:	f280 8494 	bge.w	800d002 <__ieee754_pow+0xa12>
 800c6da:	496a      	ldr	r1, [pc, #424]	@ (800c884 <__ieee754_pow+0x294>)
 800c6dc:	4632      	mov	r2, r6
 800c6de:	463b      	mov	r3, r7
 800c6e0:	2000      	movs	r0, #0
 800c6e2:	f7f4 f8d3 	bl	800088c <__aeabi_ddiv>
 800c6e6:	e7a0      	b.n	800c62a <__ieee754_pow+0x3a>
 800c6e8:	2400      	movs	r4, #0
 800c6ea:	bbc1      	cbnz	r1, 800c75e <__ieee754_pow+0x16e>
 800c6ec:	4a63      	ldr	r2, [pc, #396]	@ (800c87c <__ieee754_pow+0x28c>)
 800c6ee:	4592      	cmp	sl, r2
 800c6f0:	d1ec      	bne.n	800c6cc <__ieee754_pow+0xdc>
 800c6f2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800c6f6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800c6fa:	431a      	orrs	r2, r3
 800c6fc:	f000 8479 	beq.w	800cff2 <__ieee754_pow+0xa02>
 800c700:	4b61      	ldr	r3, [pc, #388]	@ (800c888 <__ieee754_pow+0x298>)
 800c702:	4598      	cmp	r8, r3
 800c704:	d908      	bls.n	800c718 <__ieee754_pow+0x128>
 800c706:	f1b9 0f00 	cmp.w	r9, #0
 800c70a:	f2c0 8476 	blt.w	800cffa <__ieee754_pow+0xa0a>
 800c70e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c712:	e78a      	b.n	800c62a <__ieee754_pow+0x3a>
 800c714:	2402      	movs	r4, #2
 800c716:	e7e8      	b.n	800c6ea <__ieee754_pow+0xfa>
 800c718:	f1b9 0f00 	cmp.w	r9, #0
 800c71c:	f04f 0000 	mov.w	r0, #0
 800c720:	f04f 0100 	mov.w	r1, #0
 800c724:	da81      	bge.n	800c62a <__ieee754_pow+0x3a>
 800c726:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c72a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c72e:	e77c      	b.n	800c62a <__ieee754_pow+0x3a>
 800c730:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800c734:	d106      	bne.n	800c744 <__ieee754_pow+0x154>
 800c736:	4632      	mov	r2, r6
 800c738:	463b      	mov	r3, r7
 800c73a:	4630      	mov	r0, r6
 800c73c:	4639      	mov	r1, r7
 800c73e:	f7f3 ff7b 	bl	8000638 <__aeabi_dmul>
 800c742:	e772      	b.n	800c62a <__ieee754_pow+0x3a>
 800c744:	4a51      	ldr	r2, [pc, #324]	@ (800c88c <__ieee754_pow+0x29c>)
 800c746:	4591      	cmp	r9, r2
 800c748:	d109      	bne.n	800c75e <__ieee754_pow+0x16e>
 800c74a:	2d00      	cmp	r5, #0
 800c74c:	db07      	blt.n	800c75e <__ieee754_pow+0x16e>
 800c74e:	ec47 6b10 	vmov	d0, r6, r7
 800c752:	b011      	add	sp, #68	@ 0x44
 800c754:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c758:	f7ff bc22 	b.w	800bfa0 <__ieee754_sqrt>
 800c75c:	2400      	movs	r4, #0
 800c75e:	ec47 6b10 	vmov	d0, r6, r7
 800c762:	9302      	str	r3, [sp, #8]
 800c764:	f7ff fbb4 	bl	800bed0 <fabs>
 800c768:	9b02      	ldr	r3, [sp, #8]
 800c76a:	ec51 0b10 	vmov	r0, r1, d0
 800c76e:	bb53      	cbnz	r3, 800c7c6 <__ieee754_pow+0x1d6>
 800c770:	4b44      	ldr	r3, [pc, #272]	@ (800c884 <__ieee754_pow+0x294>)
 800c772:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800c776:	429a      	cmp	r2, r3
 800c778:	d002      	beq.n	800c780 <__ieee754_pow+0x190>
 800c77a:	f1b8 0f00 	cmp.w	r8, #0
 800c77e:	d122      	bne.n	800c7c6 <__ieee754_pow+0x1d6>
 800c780:	f1b9 0f00 	cmp.w	r9, #0
 800c784:	da05      	bge.n	800c792 <__ieee754_pow+0x1a2>
 800c786:	4602      	mov	r2, r0
 800c788:	460b      	mov	r3, r1
 800c78a:	2000      	movs	r0, #0
 800c78c:	493d      	ldr	r1, [pc, #244]	@ (800c884 <__ieee754_pow+0x294>)
 800c78e:	f7f4 f87d 	bl	800088c <__aeabi_ddiv>
 800c792:	2d00      	cmp	r5, #0
 800c794:	f6bf af49 	bge.w	800c62a <__ieee754_pow+0x3a>
 800c798:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800c79c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800c7a0:	ea58 0804 	orrs.w	r8, r8, r4
 800c7a4:	d108      	bne.n	800c7b8 <__ieee754_pow+0x1c8>
 800c7a6:	4602      	mov	r2, r0
 800c7a8:	460b      	mov	r3, r1
 800c7aa:	4610      	mov	r0, r2
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	f7f3 fd8b 	bl	80002c8 <__aeabi_dsub>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	e794      	b.n	800c6e2 <__ieee754_pow+0xf2>
 800c7b8:	2c01      	cmp	r4, #1
 800c7ba:	f47f af36 	bne.w	800c62a <__ieee754_pow+0x3a>
 800c7be:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	e731      	b.n	800c62a <__ieee754_pow+0x3a>
 800c7c6:	0feb      	lsrs	r3, r5, #31
 800c7c8:	3b01      	subs	r3, #1
 800c7ca:	ea53 0204 	orrs.w	r2, r3, r4
 800c7ce:	d102      	bne.n	800c7d6 <__ieee754_pow+0x1e6>
 800c7d0:	4632      	mov	r2, r6
 800c7d2:	463b      	mov	r3, r7
 800c7d4:	e7e9      	b.n	800c7aa <__ieee754_pow+0x1ba>
 800c7d6:	3c01      	subs	r4, #1
 800c7d8:	431c      	orrs	r4, r3
 800c7da:	d016      	beq.n	800c80a <__ieee754_pow+0x21a>
 800c7dc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800c868 <__ieee754_pow+0x278>
 800c7e0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800c7e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c7e8:	f240 8112 	bls.w	800ca10 <__ieee754_pow+0x420>
 800c7ec:	4b28      	ldr	r3, [pc, #160]	@ (800c890 <__ieee754_pow+0x2a0>)
 800c7ee:	459a      	cmp	sl, r3
 800c7f0:	4b25      	ldr	r3, [pc, #148]	@ (800c888 <__ieee754_pow+0x298>)
 800c7f2:	d916      	bls.n	800c822 <__ieee754_pow+0x232>
 800c7f4:	4598      	cmp	r8, r3
 800c7f6:	d80b      	bhi.n	800c810 <__ieee754_pow+0x220>
 800c7f8:	f1b9 0f00 	cmp.w	r9, #0
 800c7fc:	da0b      	bge.n	800c816 <__ieee754_pow+0x226>
 800c7fe:	2000      	movs	r0, #0
 800c800:	b011      	add	sp, #68	@ 0x44
 800c802:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c806:	f000 bee7 	b.w	800d5d8 <__math_oflow>
 800c80a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800c870 <__ieee754_pow+0x280>
 800c80e:	e7e7      	b.n	800c7e0 <__ieee754_pow+0x1f0>
 800c810:	f1b9 0f00 	cmp.w	r9, #0
 800c814:	dcf3      	bgt.n	800c7fe <__ieee754_pow+0x20e>
 800c816:	2000      	movs	r0, #0
 800c818:	b011      	add	sp, #68	@ 0x44
 800c81a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c81e:	f000 bed3 	b.w	800d5c8 <__math_uflow>
 800c822:	4598      	cmp	r8, r3
 800c824:	d20c      	bcs.n	800c840 <__ieee754_pow+0x250>
 800c826:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c82a:	2200      	movs	r2, #0
 800c82c:	2300      	movs	r3, #0
 800c82e:	f7f4 f975 	bl	8000b1c <__aeabi_dcmplt>
 800c832:	3800      	subs	r0, #0
 800c834:	bf18      	it	ne
 800c836:	2001      	movne	r0, #1
 800c838:	f1b9 0f00 	cmp.w	r9, #0
 800c83c:	daec      	bge.n	800c818 <__ieee754_pow+0x228>
 800c83e:	e7df      	b.n	800c800 <__ieee754_pow+0x210>
 800c840:	4b10      	ldr	r3, [pc, #64]	@ (800c884 <__ieee754_pow+0x294>)
 800c842:	4598      	cmp	r8, r3
 800c844:	f04f 0200 	mov.w	r2, #0
 800c848:	d924      	bls.n	800c894 <__ieee754_pow+0x2a4>
 800c84a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c84e:	2300      	movs	r3, #0
 800c850:	f7f4 f964 	bl	8000b1c <__aeabi_dcmplt>
 800c854:	3800      	subs	r0, #0
 800c856:	bf18      	it	ne
 800c858:	2001      	movne	r0, #1
 800c85a:	f1b9 0f00 	cmp.w	r9, #0
 800c85e:	dccf      	bgt.n	800c800 <__ieee754_pow+0x210>
 800c860:	e7da      	b.n	800c818 <__ieee754_pow+0x228>
 800c862:	bf00      	nop
 800c864:	f3af 8000 	nop.w
 800c868:	00000000 	.word	0x00000000
 800c86c:	3ff00000 	.word	0x3ff00000
 800c870:	00000000 	.word	0x00000000
 800c874:	bff00000 	.word	0xbff00000
 800c878:	fff00000 	.word	0xfff00000
 800c87c:	7ff00000 	.word	0x7ff00000
 800c880:	433fffff 	.word	0x433fffff
 800c884:	3ff00000 	.word	0x3ff00000
 800c888:	3fefffff 	.word	0x3fefffff
 800c88c:	3fe00000 	.word	0x3fe00000
 800c890:	43f00000 	.word	0x43f00000
 800c894:	4b5a      	ldr	r3, [pc, #360]	@ (800ca00 <__ieee754_pow+0x410>)
 800c896:	f7f3 fd17 	bl	80002c8 <__aeabi_dsub>
 800c89a:	a351      	add	r3, pc, #324	@ (adr r3, 800c9e0 <__ieee754_pow+0x3f0>)
 800c89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a0:	4604      	mov	r4, r0
 800c8a2:	460d      	mov	r5, r1
 800c8a4:	f7f3 fec8 	bl	8000638 <__aeabi_dmul>
 800c8a8:	a34f      	add	r3, pc, #316	@ (adr r3, 800c9e8 <__ieee754_pow+0x3f8>)
 800c8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ae:	4606      	mov	r6, r0
 800c8b0:	460f      	mov	r7, r1
 800c8b2:	4620      	mov	r0, r4
 800c8b4:	4629      	mov	r1, r5
 800c8b6:	f7f3 febf 	bl	8000638 <__aeabi_dmul>
 800c8ba:	4b52      	ldr	r3, [pc, #328]	@ (800ca04 <__ieee754_pow+0x414>)
 800c8bc:	4682      	mov	sl, r0
 800c8be:	468b      	mov	fp, r1
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	4629      	mov	r1, r5
 800c8c6:	f7f3 feb7 	bl	8000638 <__aeabi_dmul>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	a148      	add	r1, pc, #288	@ (adr r1, 800c9f0 <__ieee754_pow+0x400>)
 800c8d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8d4:	f7f3 fcf8 	bl	80002c8 <__aeabi_dsub>
 800c8d8:	4622      	mov	r2, r4
 800c8da:	462b      	mov	r3, r5
 800c8dc:	f7f3 feac 	bl	8000638 <__aeabi_dmul>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	2000      	movs	r0, #0
 800c8e6:	4948      	ldr	r1, [pc, #288]	@ (800ca08 <__ieee754_pow+0x418>)
 800c8e8:	f7f3 fcee 	bl	80002c8 <__aeabi_dsub>
 800c8ec:	4622      	mov	r2, r4
 800c8ee:	4680      	mov	r8, r0
 800c8f0:	4689      	mov	r9, r1
 800c8f2:	462b      	mov	r3, r5
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	4629      	mov	r1, r5
 800c8f8:	f7f3 fe9e 	bl	8000638 <__aeabi_dmul>
 800c8fc:	4602      	mov	r2, r0
 800c8fe:	460b      	mov	r3, r1
 800c900:	4640      	mov	r0, r8
 800c902:	4649      	mov	r1, r9
 800c904:	f7f3 fe98 	bl	8000638 <__aeabi_dmul>
 800c908:	a33b      	add	r3, pc, #236	@ (adr r3, 800c9f8 <__ieee754_pow+0x408>)
 800c90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90e:	f7f3 fe93 	bl	8000638 <__aeabi_dmul>
 800c912:	4602      	mov	r2, r0
 800c914:	460b      	mov	r3, r1
 800c916:	4650      	mov	r0, sl
 800c918:	4659      	mov	r1, fp
 800c91a:	f7f3 fcd5 	bl	80002c8 <__aeabi_dsub>
 800c91e:	4602      	mov	r2, r0
 800c920:	460b      	mov	r3, r1
 800c922:	4680      	mov	r8, r0
 800c924:	4689      	mov	r9, r1
 800c926:	4630      	mov	r0, r6
 800c928:	4639      	mov	r1, r7
 800c92a:	f7f3 fccf 	bl	80002cc <__adddf3>
 800c92e:	2400      	movs	r4, #0
 800c930:	4632      	mov	r2, r6
 800c932:	463b      	mov	r3, r7
 800c934:	4620      	mov	r0, r4
 800c936:	460d      	mov	r5, r1
 800c938:	f7f3 fcc6 	bl	80002c8 <__aeabi_dsub>
 800c93c:	4602      	mov	r2, r0
 800c93e:	460b      	mov	r3, r1
 800c940:	4640      	mov	r0, r8
 800c942:	4649      	mov	r1, r9
 800c944:	f7f3 fcc0 	bl	80002c8 <__aeabi_dsub>
 800c948:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c94c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c950:	2300      	movs	r3, #0
 800c952:	9304      	str	r3, [sp, #16]
 800c954:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c958:	4606      	mov	r6, r0
 800c95a:	460f      	mov	r7, r1
 800c95c:	4652      	mov	r2, sl
 800c95e:	465b      	mov	r3, fp
 800c960:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c964:	f7f3 fcb0 	bl	80002c8 <__aeabi_dsub>
 800c968:	4622      	mov	r2, r4
 800c96a:	462b      	mov	r3, r5
 800c96c:	f7f3 fe64 	bl	8000638 <__aeabi_dmul>
 800c970:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c974:	4680      	mov	r8, r0
 800c976:	4689      	mov	r9, r1
 800c978:	4630      	mov	r0, r6
 800c97a:	4639      	mov	r1, r7
 800c97c:	f7f3 fe5c 	bl	8000638 <__aeabi_dmul>
 800c980:	4602      	mov	r2, r0
 800c982:	460b      	mov	r3, r1
 800c984:	4640      	mov	r0, r8
 800c986:	4649      	mov	r1, r9
 800c988:	f7f3 fca0 	bl	80002cc <__adddf3>
 800c98c:	4652      	mov	r2, sl
 800c98e:	465b      	mov	r3, fp
 800c990:	4606      	mov	r6, r0
 800c992:	460f      	mov	r7, r1
 800c994:	4620      	mov	r0, r4
 800c996:	4629      	mov	r1, r5
 800c998:	f7f3 fe4e 	bl	8000638 <__aeabi_dmul>
 800c99c:	460b      	mov	r3, r1
 800c99e:	4602      	mov	r2, r0
 800c9a0:	4680      	mov	r8, r0
 800c9a2:	4689      	mov	r9, r1
 800c9a4:	4630      	mov	r0, r6
 800c9a6:	4639      	mov	r1, r7
 800c9a8:	f7f3 fc90 	bl	80002cc <__adddf3>
 800c9ac:	4b17      	ldr	r3, [pc, #92]	@ (800ca0c <__ieee754_pow+0x41c>)
 800c9ae:	4299      	cmp	r1, r3
 800c9b0:	4604      	mov	r4, r0
 800c9b2:	460d      	mov	r5, r1
 800c9b4:	468a      	mov	sl, r1
 800c9b6:	468b      	mov	fp, r1
 800c9b8:	f340 82ef 	ble.w	800cf9a <__ieee754_pow+0x9aa>
 800c9bc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800c9c0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800c9c4:	4303      	orrs	r3, r0
 800c9c6:	f000 81e8 	beq.w	800cd9a <__ieee754_pow+0x7aa>
 800c9ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	f7f4 f8a3 	bl	8000b1c <__aeabi_dcmplt>
 800c9d6:	3800      	subs	r0, #0
 800c9d8:	bf18      	it	ne
 800c9da:	2001      	movne	r0, #1
 800c9dc:	e710      	b.n	800c800 <__ieee754_pow+0x210>
 800c9de:	bf00      	nop
 800c9e0:	60000000 	.word	0x60000000
 800c9e4:	3ff71547 	.word	0x3ff71547
 800c9e8:	f85ddf44 	.word	0xf85ddf44
 800c9ec:	3e54ae0b 	.word	0x3e54ae0b
 800c9f0:	55555555 	.word	0x55555555
 800c9f4:	3fd55555 	.word	0x3fd55555
 800c9f8:	652b82fe 	.word	0x652b82fe
 800c9fc:	3ff71547 	.word	0x3ff71547
 800ca00:	3ff00000 	.word	0x3ff00000
 800ca04:	3fd00000 	.word	0x3fd00000
 800ca08:	3fe00000 	.word	0x3fe00000
 800ca0c:	408fffff 	.word	0x408fffff
 800ca10:	4bd5      	ldr	r3, [pc, #852]	@ (800cd68 <__ieee754_pow+0x778>)
 800ca12:	402b      	ands	r3, r5
 800ca14:	2200      	movs	r2, #0
 800ca16:	b92b      	cbnz	r3, 800ca24 <__ieee754_pow+0x434>
 800ca18:	4bd4      	ldr	r3, [pc, #848]	@ (800cd6c <__ieee754_pow+0x77c>)
 800ca1a:	f7f3 fe0d 	bl	8000638 <__aeabi_dmul>
 800ca1e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800ca22:	468b      	mov	fp, r1
 800ca24:	ea4f 532b 	mov.w	r3, fp, asr #20
 800ca28:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ca2c:	4413      	add	r3, r2
 800ca2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca30:	4bcf      	ldr	r3, [pc, #828]	@ (800cd70 <__ieee754_pow+0x780>)
 800ca32:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800ca36:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800ca3a:	459b      	cmp	fp, r3
 800ca3c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ca40:	dd08      	ble.n	800ca54 <__ieee754_pow+0x464>
 800ca42:	4bcc      	ldr	r3, [pc, #816]	@ (800cd74 <__ieee754_pow+0x784>)
 800ca44:	459b      	cmp	fp, r3
 800ca46:	f340 81a5 	ble.w	800cd94 <__ieee754_pow+0x7a4>
 800ca4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca50:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800ca54:	f04f 0a00 	mov.w	sl, #0
 800ca58:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800ca5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca5e:	4bc6      	ldr	r3, [pc, #792]	@ (800cd78 <__ieee754_pow+0x788>)
 800ca60:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ca64:	ed93 7b00 	vldr	d7, [r3]
 800ca68:	4629      	mov	r1, r5
 800ca6a:	ec53 2b17 	vmov	r2, r3, d7
 800ca6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ca72:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ca76:	f7f3 fc27 	bl	80002c8 <__aeabi_dsub>
 800ca7a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ca7e:	4606      	mov	r6, r0
 800ca80:	460f      	mov	r7, r1
 800ca82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca86:	f7f3 fc21 	bl	80002cc <__adddf3>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	2000      	movs	r0, #0
 800ca90:	49ba      	ldr	r1, [pc, #744]	@ (800cd7c <__ieee754_pow+0x78c>)
 800ca92:	f7f3 fefb 	bl	800088c <__aeabi_ddiv>
 800ca96:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	4630      	mov	r0, r6
 800caa0:	4639      	mov	r1, r7
 800caa2:	f7f3 fdc9 	bl	8000638 <__aeabi_dmul>
 800caa6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800caaa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800caae:	106d      	asrs	r5, r5, #1
 800cab0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800cab4:	f04f 0b00 	mov.w	fp, #0
 800cab8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800cabc:	4661      	mov	r1, ip
 800cabe:	2200      	movs	r2, #0
 800cac0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800cac4:	4658      	mov	r0, fp
 800cac6:	46e1      	mov	r9, ip
 800cac8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800cacc:	4614      	mov	r4, r2
 800cace:	461d      	mov	r5, r3
 800cad0:	f7f3 fdb2 	bl	8000638 <__aeabi_dmul>
 800cad4:	4602      	mov	r2, r0
 800cad6:	460b      	mov	r3, r1
 800cad8:	4630      	mov	r0, r6
 800cada:	4639      	mov	r1, r7
 800cadc:	f7f3 fbf4 	bl	80002c8 <__aeabi_dsub>
 800cae0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cae4:	4606      	mov	r6, r0
 800cae6:	460f      	mov	r7, r1
 800cae8:	4620      	mov	r0, r4
 800caea:	4629      	mov	r1, r5
 800caec:	f7f3 fbec 	bl	80002c8 <__aeabi_dsub>
 800caf0:	4602      	mov	r2, r0
 800caf2:	460b      	mov	r3, r1
 800caf4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800caf8:	f7f3 fbe6 	bl	80002c8 <__aeabi_dsub>
 800cafc:	465a      	mov	r2, fp
 800cafe:	464b      	mov	r3, r9
 800cb00:	f7f3 fd9a 	bl	8000638 <__aeabi_dmul>
 800cb04:	4602      	mov	r2, r0
 800cb06:	460b      	mov	r3, r1
 800cb08:	4630      	mov	r0, r6
 800cb0a:	4639      	mov	r1, r7
 800cb0c:	f7f3 fbdc 	bl	80002c8 <__aeabi_dsub>
 800cb10:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cb14:	f7f3 fd90 	bl	8000638 <__aeabi_dmul>
 800cb18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cb20:	4610      	mov	r0, r2
 800cb22:	4619      	mov	r1, r3
 800cb24:	f7f3 fd88 	bl	8000638 <__aeabi_dmul>
 800cb28:	a37d      	add	r3, pc, #500	@ (adr r3, 800cd20 <__ieee754_pow+0x730>)
 800cb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb2e:	4604      	mov	r4, r0
 800cb30:	460d      	mov	r5, r1
 800cb32:	f7f3 fd81 	bl	8000638 <__aeabi_dmul>
 800cb36:	a37c      	add	r3, pc, #496	@ (adr r3, 800cd28 <__ieee754_pow+0x738>)
 800cb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3c:	f7f3 fbc6 	bl	80002cc <__adddf3>
 800cb40:	4622      	mov	r2, r4
 800cb42:	462b      	mov	r3, r5
 800cb44:	f7f3 fd78 	bl	8000638 <__aeabi_dmul>
 800cb48:	a379      	add	r3, pc, #484	@ (adr r3, 800cd30 <__ieee754_pow+0x740>)
 800cb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4e:	f7f3 fbbd 	bl	80002cc <__adddf3>
 800cb52:	4622      	mov	r2, r4
 800cb54:	462b      	mov	r3, r5
 800cb56:	f7f3 fd6f 	bl	8000638 <__aeabi_dmul>
 800cb5a:	a377      	add	r3, pc, #476	@ (adr r3, 800cd38 <__ieee754_pow+0x748>)
 800cb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb60:	f7f3 fbb4 	bl	80002cc <__adddf3>
 800cb64:	4622      	mov	r2, r4
 800cb66:	462b      	mov	r3, r5
 800cb68:	f7f3 fd66 	bl	8000638 <__aeabi_dmul>
 800cb6c:	a374      	add	r3, pc, #464	@ (adr r3, 800cd40 <__ieee754_pow+0x750>)
 800cb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb72:	f7f3 fbab 	bl	80002cc <__adddf3>
 800cb76:	4622      	mov	r2, r4
 800cb78:	462b      	mov	r3, r5
 800cb7a:	f7f3 fd5d 	bl	8000638 <__aeabi_dmul>
 800cb7e:	a372      	add	r3, pc, #456	@ (adr r3, 800cd48 <__ieee754_pow+0x758>)
 800cb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb84:	f7f3 fba2 	bl	80002cc <__adddf3>
 800cb88:	4622      	mov	r2, r4
 800cb8a:	4606      	mov	r6, r0
 800cb8c:	460f      	mov	r7, r1
 800cb8e:	462b      	mov	r3, r5
 800cb90:	4620      	mov	r0, r4
 800cb92:	4629      	mov	r1, r5
 800cb94:	f7f3 fd50 	bl	8000638 <__aeabi_dmul>
 800cb98:	4602      	mov	r2, r0
 800cb9a:	460b      	mov	r3, r1
 800cb9c:	4630      	mov	r0, r6
 800cb9e:	4639      	mov	r1, r7
 800cba0:	f7f3 fd4a 	bl	8000638 <__aeabi_dmul>
 800cba4:	465a      	mov	r2, fp
 800cba6:	4604      	mov	r4, r0
 800cba8:	460d      	mov	r5, r1
 800cbaa:	464b      	mov	r3, r9
 800cbac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbb0:	f7f3 fb8c 	bl	80002cc <__adddf3>
 800cbb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cbb8:	f7f3 fd3e 	bl	8000638 <__aeabi_dmul>
 800cbbc:	4622      	mov	r2, r4
 800cbbe:	462b      	mov	r3, r5
 800cbc0:	f7f3 fb84 	bl	80002cc <__adddf3>
 800cbc4:	465a      	mov	r2, fp
 800cbc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cbca:	464b      	mov	r3, r9
 800cbcc:	4658      	mov	r0, fp
 800cbce:	4649      	mov	r1, r9
 800cbd0:	f7f3 fd32 	bl	8000638 <__aeabi_dmul>
 800cbd4:	4b6a      	ldr	r3, [pc, #424]	@ (800cd80 <__ieee754_pow+0x790>)
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	4606      	mov	r6, r0
 800cbda:	460f      	mov	r7, r1
 800cbdc:	f7f3 fb76 	bl	80002cc <__adddf3>
 800cbe0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cbe4:	f7f3 fb72 	bl	80002cc <__adddf3>
 800cbe8:	46d8      	mov	r8, fp
 800cbea:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800cbee:	460d      	mov	r5, r1
 800cbf0:	465a      	mov	r2, fp
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	4640      	mov	r0, r8
 800cbf6:	4649      	mov	r1, r9
 800cbf8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800cbfc:	f7f3 fd1c 	bl	8000638 <__aeabi_dmul>
 800cc00:	465c      	mov	r4, fp
 800cc02:	4680      	mov	r8, r0
 800cc04:	4689      	mov	r9, r1
 800cc06:	4b5e      	ldr	r3, [pc, #376]	@ (800cd80 <__ieee754_pow+0x790>)
 800cc08:	2200      	movs	r2, #0
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	4629      	mov	r1, r5
 800cc0e:	f7f3 fb5b 	bl	80002c8 <__aeabi_dsub>
 800cc12:	4632      	mov	r2, r6
 800cc14:	463b      	mov	r3, r7
 800cc16:	f7f3 fb57 	bl	80002c8 <__aeabi_dsub>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cc22:	f7f3 fb51 	bl	80002c8 <__aeabi_dsub>
 800cc26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc2a:	f7f3 fd05 	bl	8000638 <__aeabi_dmul>
 800cc2e:	4622      	mov	r2, r4
 800cc30:	4606      	mov	r6, r0
 800cc32:	460f      	mov	r7, r1
 800cc34:	462b      	mov	r3, r5
 800cc36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc3a:	f7f3 fcfd 	bl	8000638 <__aeabi_dmul>
 800cc3e:	4602      	mov	r2, r0
 800cc40:	460b      	mov	r3, r1
 800cc42:	4630      	mov	r0, r6
 800cc44:	4639      	mov	r1, r7
 800cc46:	f7f3 fb41 	bl	80002cc <__adddf3>
 800cc4a:	4606      	mov	r6, r0
 800cc4c:	460f      	mov	r7, r1
 800cc4e:	4602      	mov	r2, r0
 800cc50:	460b      	mov	r3, r1
 800cc52:	4640      	mov	r0, r8
 800cc54:	4649      	mov	r1, r9
 800cc56:	f7f3 fb39 	bl	80002cc <__adddf3>
 800cc5a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800cc5e:	a33c      	add	r3, pc, #240	@ (adr r3, 800cd50 <__ieee754_pow+0x760>)
 800cc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc64:	4658      	mov	r0, fp
 800cc66:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800cc6a:	460d      	mov	r5, r1
 800cc6c:	f7f3 fce4 	bl	8000638 <__aeabi_dmul>
 800cc70:	465c      	mov	r4, fp
 800cc72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc76:	4642      	mov	r2, r8
 800cc78:	464b      	mov	r3, r9
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	4629      	mov	r1, r5
 800cc7e:	f7f3 fb23 	bl	80002c8 <__aeabi_dsub>
 800cc82:	4602      	mov	r2, r0
 800cc84:	460b      	mov	r3, r1
 800cc86:	4630      	mov	r0, r6
 800cc88:	4639      	mov	r1, r7
 800cc8a:	f7f3 fb1d 	bl	80002c8 <__aeabi_dsub>
 800cc8e:	a332      	add	r3, pc, #200	@ (adr r3, 800cd58 <__ieee754_pow+0x768>)
 800cc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc94:	f7f3 fcd0 	bl	8000638 <__aeabi_dmul>
 800cc98:	a331      	add	r3, pc, #196	@ (adr r3, 800cd60 <__ieee754_pow+0x770>)
 800cc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc9e:	4606      	mov	r6, r0
 800cca0:	460f      	mov	r7, r1
 800cca2:	4620      	mov	r0, r4
 800cca4:	4629      	mov	r1, r5
 800cca6:	f7f3 fcc7 	bl	8000638 <__aeabi_dmul>
 800ccaa:	4602      	mov	r2, r0
 800ccac:	460b      	mov	r3, r1
 800ccae:	4630      	mov	r0, r6
 800ccb0:	4639      	mov	r1, r7
 800ccb2:	f7f3 fb0b 	bl	80002cc <__adddf3>
 800ccb6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ccb8:	4b32      	ldr	r3, [pc, #200]	@ (800cd84 <__ieee754_pow+0x794>)
 800ccba:	4413      	add	r3, r2
 800ccbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc0:	f7f3 fb04 	bl	80002cc <__adddf3>
 800ccc4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ccc8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ccca:	f7f3 fc4b 	bl	8000564 <__aeabi_i2d>
 800ccce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ccd0:	4b2d      	ldr	r3, [pc, #180]	@ (800cd88 <__ieee754_pow+0x798>)
 800ccd2:	4413      	add	r3, r2
 800ccd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ccd8:	4606      	mov	r6, r0
 800ccda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ccde:	460f      	mov	r7, r1
 800cce0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cce4:	f7f3 faf2 	bl	80002cc <__adddf3>
 800cce8:	4642      	mov	r2, r8
 800ccea:	464b      	mov	r3, r9
 800ccec:	f7f3 faee 	bl	80002cc <__adddf3>
 800ccf0:	4632      	mov	r2, r6
 800ccf2:	463b      	mov	r3, r7
 800ccf4:	f7f3 faea 	bl	80002cc <__adddf3>
 800ccf8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800ccfc:	4632      	mov	r2, r6
 800ccfe:	463b      	mov	r3, r7
 800cd00:	4658      	mov	r0, fp
 800cd02:	460d      	mov	r5, r1
 800cd04:	f7f3 fae0 	bl	80002c8 <__aeabi_dsub>
 800cd08:	4642      	mov	r2, r8
 800cd0a:	464b      	mov	r3, r9
 800cd0c:	f7f3 fadc 	bl	80002c8 <__aeabi_dsub>
 800cd10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd14:	f7f3 fad8 	bl	80002c8 <__aeabi_dsub>
 800cd18:	465c      	mov	r4, fp
 800cd1a:	4602      	mov	r2, r0
 800cd1c:	e036      	b.n	800cd8c <__ieee754_pow+0x79c>
 800cd1e:	bf00      	nop
 800cd20:	4a454eef 	.word	0x4a454eef
 800cd24:	3fca7e28 	.word	0x3fca7e28
 800cd28:	93c9db65 	.word	0x93c9db65
 800cd2c:	3fcd864a 	.word	0x3fcd864a
 800cd30:	a91d4101 	.word	0xa91d4101
 800cd34:	3fd17460 	.word	0x3fd17460
 800cd38:	518f264d 	.word	0x518f264d
 800cd3c:	3fd55555 	.word	0x3fd55555
 800cd40:	db6fabff 	.word	0xdb6fabff
 800cd44:	3fdb6db6 	.word	0x3fdb6db6
 800cd48:	33333303 	.word	0x33333303
 800cd4c:	3fe33333 	.word	0x3fe33333
 800cd50:	e0000000 	.word	0xe0000000
 800cd54:	3feec709 	.word	0x3feec709
 800cd58:	dc3a03fd 	.word	0xdc3a03fd
 800cd5c:	3feec709 	.word	0x3feec709
 800cd60:	145b01f5 	.word	0x145b01f5
 800cd64:	be3e2fe0 	.word	0xbe3e2fe0
 800cd68:	7ff00000 	.word	0x7ff00000
 800cd6c:	43400000 	.word	0x43400000
 800cd70:	0003988e 	.word	0x0003988e
 800cd74:	000bb679 	.word	0x000bb679
 800cd78:	0800e398 	.word	0x0800e398
 800cd7c:	3ff00000 	.word	0x3ff00000
 800cd80:	40080000 	.word	0x40080000
 800cd84:	0800e378 	.word	0x0800e378
 800cd88:	0800e388 	.word	0x0800e388
 800cd8c:	460b      	mov	r3, r1
 800cd8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd92:	e5d7      	b.n	800c944 <__ieee754_pow+0x354>
 800cd94:	f04f 0a01 	mov.w	sl, #1
 800cd98:	e65e      	b.n	800ca58 <__ieee754_pow+0x468>
 800cd9a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800d06c <__ieee754_pow+0xa7c>)
 800cd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda0:	4630      	mov	r0, r6
 800cda2:	4639      	mov	r1, r7
 800cda4:	f7f3 fa92 	bl	80002cc <__adddf3>
 800cda8:	4642      	mov	r2, r8
 800cdaa:	e9cd 0100 	strd	r0, r1, [sp]
 800cdae:	464b      	mov	r3, r9
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	4629      	mov	r1, r5
 800cdb4:	f7f3 fa88 	bl	80002c8 <__aeabi_dsub>
 800cdb8:	4602      	mov	r2, r0
 800cdba:	460b      	mov	r3, r1
 800cdbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cdc0:	f7f3 feca 	bl	8000b58 <__aeabi_dcmpgt>
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	f47f ae00 	bne.w	800c9ca <__ieee754_pow+0x3da>
 800cdca:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800cdce:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800cdd2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800cdd6:	fa43 fa0a 	asr.w	sl, r3, sl
 800cdda:	44da      	add	sl, fp
 800cddc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800cde0:	489d      	ldr	r0, [pc, #628]	@ (800d058 <__ieee754_pow+0xa68>)
 800cde2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800cde6:	4108      	asrs	r0, r1
 800cde8:	ea00 030a 	and.w	r3, r0, sl
 800cdec:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800cdf0:	f1c1 0114 	rsb	r1, r1, #20
 800cdf4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800cdf8:	fa4a fa01 	asr.w	sl, sl, r1
 800cdfc:	f1bb 0f00 	cmp.w	fp, #0
 800ce00:	4640      	mov	r0, r8
 800ce02:	4649      	mov	r1, r9
 800ce04:	f04f 0200 	mov.w	r2, #0
 800ce08:	bfb8      	it	lt
 800ce0a:	f1ca 0a00 	rsblt	sl, sl, #0
 800ce0e:	f7f3 fa5b 	bl	80002c8 <__aeabi_dsub>
 800ce12:	4680      	mov	r8, r0
 800ce14:	4689      	mov	r9, r1
 800ce16:	4632      	mov	r2, r6
 800ce18:	463b      	mov	r3, r7
 800ce1a:	4640      	mov	r0, r8
 800ce1c:	4649      	mov	r1, r9
 800ce1e:	f7f3 fa55 	bl	80002cc <__adddf3>
 800ce22:	2400      	movs	r4, #0
 800ce24:	a37c      	add	r3, pc, #496	@ (adr r3, 800d018 <__ieee754_pow+0xa28>)
 800ce26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	460d      	mov	r5, r1
 800ce2e:	f7f3 fc03 	bl	8000638 <__aeabi_dmul>
 800ce32:	4642      	mov	r2, r8
 800ce34:	e9cd 0100 	strd	r0, r1, [sp]
 800ce38:	464b      	mov	r3, r9
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	4629      	mov	r1, r5
 800ce3e:	f7f3 fa43 	bl	80002c8 <__aeabi_dsub>
 800ce42:	4602      	mov	r2, r0
 800ce44:	460b      	mov	r3, r1
 800ce46:	4630      	mov	r0, r6
 800ce48:	4639      	mov	r1, r7
 800ce4a:	f7f3 fa3d 	bl	80002c8 <__aeabi_dsub>
 800ce4e:	a374      	add	r3, pc, #464	@ (adr r3, 800d020 <__ieee754_pow+0xa30>)
 800ce50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce54:	f7f3 fbf0 	bl	8000638 <__aeabi_dmul>
 800ce58:	a373      	add	r3, pc, #460	@ (adr r3, 800d028 <__ieee754_pow+0xa38>)
 800ce5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce5e:	4680      	mov	r8, r0
 800ce60:	4689      	mov	r9, r1
 800ce62:	4620      	mov	r0, r4
 800ce64:	4629      	mov	r1, r5
 800ce66:	f7f3 fbe7 	bl	8000638 <__aeabi_dmul>
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	460b      	mov	r3, r1
 800ce6e:	4640      	mov	r0, r8
 800ce70:	4649      	mov	r1, r9
 800ce72:	f7f3 fa2b 	bl	80002cc <__adddf3>
 800ce76:	4604      	mov	r4, r0
 800ce78:	460d      	mov	r5, r1
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	460b      	mov	r3, r1
 800ce7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce82:	f7f3 fa23 	bl	80002cc <__adddf3>
 800ce86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce8a:	4680      	mov	r8, r0
 800ce8c:	4689      	mov	r9, r1
 800ce8e:	f7f3 fa1b 	bl	80002c8 <__aeabi_dsub>
 800ce92:	4602      	mov	r2, r0
 800ce94:	460b      	mov	r3, r1
 800ce96:	4620      	mov	r0, r4
 800ce98:	4629      	mov	r1, r5
 800ce9a:	f7f3 fa15 	bl	80002c8 <__aeabi_dsub>
 800ce9e:	4642      	mov	r2, r8
 800cea0:	4606      	mov	r6, r0
 800cea2:	460f      	mov	r7, r1
 800cea4:	464b      	mov	r3, r9
 800cea6:	4640      	mov	r0, r8
 800cea8:	4649      	mov	r1, r9
 800ceaa:	f7f3 fbc5 	bl	8000638 <__aeabi_dmul>
 800ceae:	a360      	add	r3, pc, #384	@ (adr r3, 800d030 <__ieee754_pow+0xa40>)
 800ceb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb4:	4604      	mov	r4, r0
 800ceb6:	460d      	mov	r5, r1
 800ceb8:	f7f3 fbbe 	bl	8000638 <__aeabi_dmul>
 800cebc:	a35e      	add	r3, pc, #376	@ (adr r3, 800d038 <__ieee754_pow+0xa48>)
 800cebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec2:	f7f3 fa01 	bl	80002c8 <__aeabi_dsub>
 800cec6:	4622      	mov	r2, r4
 800cec8:	462b      	mov	r3, r5
 800ceca:	f7f3 fbb5 	bl	8000638 <__aeabi_dmul>
 800cece:	a35c      	add	r3, pc, #368	@ (adr r3, 800d040 <__ieee754_pow+0xa50>)
 800ced0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced4:	f7f3 f9fa 	bl	80002cc <__adddf3>
 800ced8:	4622      	mov	r2, r4
 800ceda:	462b      	mov	r3, r5
 800cedc:	f7f3 fbac 	bl	8000638 <__aeabi_dmul>
 800cee0:	a359      	add	r3, pc, #356	@ (adr r3, 800d048 <__ieee754_pow+0xa58>)
 800cee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee6:	f7f3 f9ef 	bl	80002c8 <__aeabi_dsub>
 800ceea:	4622      	mov	r2, r4
 800ceec:	462b      	mov	r3, r5
 800ceee:	f7f3 fba3 	bl	8000638 <__aeabi_dmul>
 800cef2:	a357      	add	r3, pc, #348	@ (adr r3, 800d050 <__ieee754_pow+0xa60>)
 800cef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef8:	f7f3 f9e8 	bl	80002cc <__adddf3>
 800cefc:	4622      	mov	r2, r4
 800cefe:	462b      	mov	r3, r5
 800cf00:	f7f3 fb9a 	bl	8000638 <__aeabi_dmul>
 800cf04:	4602      	mov	r2, r0
 800cf06:	460b      	mov	r3, r1
 800cf08:	4640      	mov	r0, r8
 800cf0a:	4649      	mov	r1, r9
 800cf0c:	f7f3 f9dc 	bl	80002c8 <__aeabi_dsub>
 800cf10:	4604      	mov	r4, r0
 800cf12:	460d      	mov	r5, r1
 800cf14:	4602      	mov	r2, r0
 800cf16:	460b      	mov	r3, r1
 800cf18:	4640      	mov	r0, r8
 800cf1a:	4649      	mov	r1, r9
 800cf1c:	f7f3 fb8c 	bl	8000638 <__aeabi_dmul>
 800cf20:	2200      	movs	r2, #0
 800cf22:	e9cd 0100 	strd	r0, r1, [sp]
 800cf26:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	4629      	mov	r1, r5
 800cf2e:	f7f3 f9cb 	bl	80002c8 <__aeabi_dsub>
 800cf32:	4602      	mov	r2, r0
 800cf34:	460b      	mov	r3, r1
 800cf36:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf3a:	f7f3 fca7 	bl	800088c <__aeabi_ddiv>
 800cf3e:	4632      	mov	r2, r6
 800cf40:	4604      	mov	r4, r0
 800cf42:	460d      	mov	r5, r1
 800cf44:	463b      	mov	r3, r7
 800cf46:	4640      	mov	r0, r8
 800cf48:	4649      	mov	r1, r9
 800cf4a:	f7f3 fb75 	bl	8000638 <__aeabi_dmul>
 800cf4e:	4632      	mov	r2, r6
 800cf50:	463b      	mov	r3, r7
 800cf52:	f7f3 f9bb 	bl	80002cc <__adddf3>
 800cf56:	4602      	mov	r2, r0
 800cf58:	460b      	mov	r3, r1
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	4629      	mov	r1, r5
 800cf5e:	f7f3 f9b3 	bl	80002c8 <__aeabi_dsub>
 800cf62:	4642      	mov	r2, r8
 800cf64:	464b      	mov	r3, r9
 800cf66:	f7f3 f9af 	bl	80002c8 <__aeabi_dsub>
 800cf6a:	460b      	mov	r3, r1
 800cf6c:	4602      	mov	r2, r0
 800cf6e:	493b      	ldr	r1, [pc, #236]	@ (800d05c <__ieee754_pow+0xa6c>)
 800cf70:	2000      	movs	r0, #0
 800cf72:	f7f3 f9a9 	bl	80002c8 <__aeabi_dsub>
 800cf76:	ec41 0b10 	vmov	d0, r0, r1
 800cf7a:	ee10 3a90 	vmov	r3, s1
 800cf7e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cf82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cf86:	da30      	bge.n	800cfea <__ieee754_pow+0x9fa>
 800cf88:	4650      	mov	r0, sl
 800cf8a:	f000 fa71 	bl	800d470 <scalbn>
 800cf8e:	ec51 0b10 	vmov	r0, r1, d0
 800cf92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf96:	f7ff bbd2 	b.w	800c73e <__ieee754_pow+0x14e>
 800cf9a:	4c31      	ldr	r4, [pc, #196]	@ (800d060 <__ieee754_pow+0xa70>)
 800cf9c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cfa0:	42a3      	cmp	r3, r4
 800cfa2:	d91a      	bls.n	800cfda <__ieee754_pow+0x9ea>
 800cfa4:	4b2f      	ldr	r3, [pc, #188]	@ (800d064 <__ieee754_pow+0xa74>)
 800cfa6:	440b      	add	r3, r1
 800cfa8:	4303      	orrs	r3, r0
 800cfaa:	d009      	beq.n	800cfc0 <__ieee754_pow+0x9d0>
 800cfac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	f7f3 fdb2 	bl	8000b1c <__aeabi_dcmplt>
 800cfb8:	3800      	subs	r0, #0
 800cfba:	bf18      	it	ne
 800cfbc:	2001      	movne	r0, #1
 800cfbe:	e42b      	b.n	800c818 <__ieee754_pow+0x228>
 800cfc0:	4642      	mov	r2, r8
 800cfc2:	464b      	mov	r3, r9
 800cfc4:	f7f3 f980 	bl	80002c8 <__aeabi_dsub>
 800cfc8:	4632      	mov	r2, r6
 800cfca:	463b      	mov	r3, r7
 800cfcc:	f7f3 fdba 	bl	8000b44 <__aeabi_dcmpge>
 800cfd0:	2800      	cmp	r0, #0
 800cfd2:	d1eb      	bne.n	800cfac <__ieee754_pow+0x9bc>
 800cfd4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800d074 <__ieee754_pow+0xa84>
 800cfd8:	e6f7      	b.n	800cdca <__ieee754_pow+0x7da>
 800cfda:	469a      	mov	sl, r3
 800cfdc:	4b22      	ldr	r3, [pc, #136]	@ (800d068 <__ieee754_pow+0xa78>)
 800cfde:	459a      	cmp	sl, r3
 800cfe0:	f63f aef3 	bhi.w	800cdca <__ieee754_pow+0x7da>
 800cfe4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800cfe8:	e715      	b.n	800ce16 <__ieee754_pow+0x826>
 800cfea:	ec51 0b10 	vmov	r0, r1, d0
 800cfee:	4619      	mov	r1, r3
 800cff0:	e7cf      	b.n	800cf92 <__ieee754_pow+0x9a2>
 800cff2:	491a      	ldr	r1, [pc, #104]	@ (800d05c <__ieee754_pow+0xa6c>)
 800cff4:	2000      	movs	r0, #0
 800cff6:	f7ff bb18 	b.w	800c62a <__ieee754_pow+0x3a>
 800cffa:	2000      	movs	r0, #0
 800cffc:	2100      	movs	r1, #0
 800cffe:	f7ff bb14 	b.w	800c62a <__ieee754_pow+0x3a>
 800d002:	4630      	mov	r0, r6
 800d004:	4639      	mov	r1, r7
 800d006:	f7ff bb10 	b.w	800c62a <__ieee754_pow+0x3a>
 800d00a:	460c      	mov	r4, r1
 800d00c:	f7ff bb5e 	b.w	800c6cc <__ieee754_pow+0xdc>
 800d010:	2400      	movs	r4, #0
 800d012:	f7ff bb49 	b.w	800c6a8 <__ieee754_pow+0xb8>
 800d016:	bf00      	nop
 800d018:	00000000 	.word	0x00000000
 800d01c:	3fe62e43 	.word	0x3fe62e43
 800d020:	fefa39ef 	.word	0xfefa39ef
 800d024:	3fe62e42 	.word	0x3fe62e42
 800d028:	0ca86c39 	.word	0x0ca86c39
 800d02c:	be205c61 	.word	0xbe205c61
 800d030:	72bea4d0 	.word	0x72bea4d0
 800d034:	3e663769 	.word	0x3e663769
 800d038:	c5d26bf1 	.word	0xc5d26bf1
 800d03c:	3ebbbd41 	.word	0x3ebbbd41
 800d040:	af25de2c 	.word	0xaf25de2c
 800d044:	3f11566a 	.word	0x3f11566a
 800d048:	16bebd93 	.word	0x16bebd93
 800d04c:	3f66c16c 	.word	0x3f66c16c
 800d050:	5555553e 	.word	0x5555553e
 800d054:	3fc55555 	.word	0x3fc55555
 800d058:	fff00000 	.word	0xfff00000
 800d05c:	3ff00000 	.word	0x3ff00000
 800d060:	4090cbff 	.word	0x4090cbff
 800d064:	3f6f3400 	.word	0x3f6f3400
 800d068:	3fe00000 	.word	0x3fe00000
 800d06c:	652b82fe 	.word	0x652b82fe
 800d070:	3c971547 	.word	0x3c971547
 800d074:	4090cc00 	.word	0x4090cc00

0800d078 <__ieee754_rem_pio2>:
 800d078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d07c:	ec57 6b10 	vmov	r6, r7, d0
 800d080:	4bc5      	ldr	r3, [pc, #788]	@ (800d398 <__ieee754_rem_pio2+0x320>)
 800d082:	b08d      	sub	sp, #52	@ 0x34
 800d084:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d088:	4598      	cmp	r8, r3
 800d08a:	4604      	mov	r4, r0
 800d08c:	9704      	str	r7, [sp, #16]
 800d08e:	d807      	bhi.n	800d0a0 <__ieee754_rem_pio2+0x28>
 800d090:	2200      	movs	r2, #0
 800d092:	2300      	movs	r3, #0
 800d094:	ed80 0b00 	vstr	d0, [r0]
 800d098:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d09c:	2500      	movs	r5, #0
 800d09e:	e028      	b.n	800d0f2 <__ieee754_rem_pio2+0x7a>
 800d0a0:	4bbe      	ldr	r3, [pc, #760]	@ (800d39c <__ieee754_rem_pio2+0x324>)
 800d0a2:	4598      	cmp	r8, r3
 800d0a4:	d878      	bhi.n	800d198 <__ieee754_rem_pio2+0x120>
 800d0a6:	9b04      	ldr	r3, [sp, #16]
 800d0a8:	4dbd      	ldr	r5, [pc, #756]	@ (800d3a0 <__ieee754_rem_pio2+0x328>)
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	4630      	mov	r0, r6
 800d0ae:	a3ac      	add	r3, pc, #688	@ (adr r3, 800d360 <__ieee754_rem_pio2+0x2e8>)
 800d0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b4:	4639      	mov	r1, r7
 800d0b6:	dd38      	ble.n	800d12a <__ieee754_rem_pio2+0xb2>
 800d0b8:	f7f3 f906 	bl	80002c8 <__aeabi_dsub>
 800d0bc:	45a8      	cmp	r8, r5
 800d0be:	4606      	mov	r6, r0
 800d0c0:	460f      	mov	r7, r1
 800d0c2:	d01a      	beq.n	800d0fa <__ieee754_rem_pio2+0x82>
 800d0c4:	a3a8      	add	r3, pc, #672	@ (adr r3, 800d368 <__ieee754_rem_pio2+0x2f0>)
 800d0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ca:	f7f3 f8fd 	bl	80002c8 <__aeabi_dsub>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	4680      	mov	r8, r0
 800d0d4:	4689      	mov	r9, r1
 800d0d6:	4630      	mov	r0, r6
 800d0d8:	4639      	mov	r1, r7
 800d0da:	f7f3 f8f5 	bl	80002c8 <__aeabi_dsub>
 800d0de:	a3a2      	add	r3, pc, #648	@ (adr r3, 800d368 <__ieee754_rem_pio2+0x2f0>)
 800d0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e4:	f7f3 f8f0 	bl	80002c8 <__aeabi_dsub>
 800d0e8:	e9c4 8900 	strd	r8, r9, [r4]
 800d0ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d0f0:	2501      	movs	r5, #1
 800d0f2:	4628      	mov	r0, r5
 800d0f4:	b00d      	add	sp, #52	@ 0x34
 800d0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0fa:	a39d      	add	r3, pc, #628	@ (adr r3, 800d370 <__ieee754_rem_pio2+0x2f8>)
 800d0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d100:	f7f3 f8e2 	bl	80002c8 <__aeabi_dsub>
 800d104:	a39c      	add	r3, pc, #624	@ (adr r3, 800d378 <__ieee754_rem_pio2+0x300>)
 800d106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d10a:	4606      	mov	r6, r0
 800d10c:	460f      	mov	r7, r1
 800d10e:	f7f3 f8db 	bl	80002c8 <__aeabi_dsub>
 800d112:	4602      	mov	r2, r0
 800d114:	460b      	mov	r3, r1
 800d116:	4680      	mov	r8, r0
 800d118:	4689      	mov	r9, r1
 800d11a:	4630      	mov	r0, r6
 800d11c:	4639      	mov	r1, r7
 800d11e:	f7f3 f8d3 	bl	80002c8 <__aeabi_dsub>
 800d122:	a395      	add	r3, pc, #596	@ (adr r3, 800d378 <__ieee754_rem_pio2+0x300>)
 800d124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d128:	e7dc      	b.n	800d0e4 <__ieee754_rem_pio2+0x6c>
 800d12a:	f7f3 f8cf 	bl	80002cc <__adddf3>
 800d12e:	45a8      	cmp	r8, r5
 800d130:	4606      	mov	r6, r0
 800d132:	460f      	mov	r7, r1
 800d134:	d018      	beq.n	800d168 <__ieee754_rem_pio2+0xf0>
 800d136:	a38c      	add	r3, pc, #560	@ (adr r3, 800d368 <__ieee754_rem_pio2+0x2f0>)
 800d138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d13c:	f7f3 f8c6 	bl	80002cc <__adddf3>
 800d140:	4602      	mov	r2, r0
 800d142:	460b      	mov	r3, r1
 800d144:	4680      	mov	r8, r0
 800d146:	4689      	mov	r9, r1
 800d148:	4630      	mov	r0, r6
 800d14a:	4639      	mov	r1, r7
 800d14c:	f7f3 f8bc 	bl	80002c8 <__aeabi_dsub>
 800d150:	a385      	add	r3, pc, #532	@ (adr r3, 800d368 <__ieee754_rem_pio2+0x2f0>)
 800d152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d156:	f7f3 f8b9 	bl	80002cc <__adddf3>
 800d15a:	f04f 35ff 	mov.w	r5, #4294967295
 800d15e:	e9c4 8900 	strd	r8, r9, [r4]
 800d162:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d166:	e7c4      	b.n	800d0f2 <__ieee754_rem_pio2+0x7a>
 800d168:	a381      	add	r3, pc, #516	@ (adr r3, 800d370 <__ieee754_rem_pio2+0x2f8>)
 800d16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16e:	f7f3 f8ad 	bl	80002cc <__adddf3>
 800d172:	a381      	add	r3, pc, #516	@ (adr r3, 800d378 <__ieee754_rem_pio2+0x300>)
 800d174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d178:	4606      	mov	r6, r0
 800d17a:	460f      	mov	r7, r1
 800d17c:	f7f3 f8a6 	bl	80002cc <__adddf3>
 800d180:	4602      	mov	r2, r0
 800d182:	460b      	mov	r3, r1
 800d184:	4680      	mov	r8, r0
 800d186:	4689      	mov	r9, r1
 800d188:	4630      	mov	r0, r6
 800d18a:	4639      	mov	r1, r7
 800d18c:	f7f3 f89c 	bl	80002c8 <__aeabi_dsub>
 800d190:	a379      	add	r3, pc, #484	@ (adr r3, 800d378 <__ieee754_rem_pio2+0x300>)
 800d192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d196:	e7de      	b.n	800d156 <__ieee754_rem_pio2+0xde>
 800d198:	4b82      	ldr	r3, [pc, #520]	@ (800d3a4 <__ieee754_rem_pio2+0x32c>)
 800d19a:	4598      	cmp	r8, r3
 800d19c:	f200 80d1 	bhi.w	800d342 <__ieee754_rem_pio2+0x2ca>
 800d1a0:	f7fe fe96 	bl	800bed0 <fabs>
 800d1a4:	ec57 6b10 	vmov	r6, r7, d0
 800d1a8:	a375      	add	r3, pc, #468	@ (adr r3, 800d380 <__ieee754_rem_pio2+0x308>)
 800d1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ae:	4630      	mov	r0, r6
 800d1b0:	4639      	mov	r1, r7
 800d1b2:	f7f3 fa41 	bl	8000638 <__aeabi_dmul>
 800d1b6:	4b7c      	ldr	r3, [pc, #496]	@ (800d3a8 <__ieee754_rem_pio2+0x330>)
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	f7f3 f887 	bl	80002cc <__adddf3>
 800d1be:	f7f3 fceb 	bl	8000b98 <__aeabi_d2iz>
 800d1c2:	4605      	mov	r5, r0
 800d1c4:	f7f3 f9ce 	bl	8000564 <__aeabi_i2d>
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	460b      	mov	r3, r1
 800d1cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d1d0:	a363      	add	r3, pc, #396	@ (adr r3, 800d360 <__ieee754_rem_pio2+0x2e8>)
 800d1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d6:	f7f3 fa2f 	bl	8000638 <__aeabi_dmul>
 800d1da:	4602      	mov	r2, r0
 800d1dc:	460b      	mov	r3, r1
 800d1de:	4630      	mov	r0, r6
 800d1e0:	4639      	mov	r1, r7
 800d1e2:	f7f3 f871 	bl	80002c8 <__aeabi_dsub>
 800d1e6:	a360      	add	r3, pc, #384	@ (adr r3, 800d368 <__ieee754_rem_pio2+0x2f0>)
 800d1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ec:	4682      	mov	sl, r0
 800d1ee:	468b      	mov	fp, r1
 800d1f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1f4:	f7f3 fa20 	bl	8000638 <__aeabi_dmul>
 800d1f8:	2d1f      	cmp	r5, #31
 800d1fa:	4606      	mov	r6, r0
 800d1fc:	460f      	mov	r7, r1
 800d1fe:	dc0c      	bgt.n	800d21a <__ieee754_rem_pio2+0x1a2>
 800d200:	4b6a      	ldr	r3, [pc, #424]	@ (800d3ac <__ieee754_rem_pio2+0x334>)
 800d202:	1e6a      	subs	r2, r5, #1
 800d204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d208:	4543      	cmp	r3, r8
 800d20a:	d006      	beq.n	800d21a <__ieee754_rem_pio2+0x1a2>
 800d20c:	4632      	mov	r2, r6
 800d20e:	463b      	mov	r3, r7
 800d210:	4650      	mov	r0, sl
 800d212:	4659      	mov	r1, fp
 800d214:	f7f3 f858 	bl	80002c8 <__aeabi_dsub>
 800d218:	e00e      	b.n	800d238 <__ieee754_rem_pio2+0x1c0>
 800d21a:	463b      	mov	r3, r7
 800d21c:	4632      	mov	r2, r6
 800d21e:	4650      	mov	r0, sl
 800d220:	4659      	mov	r1, fp
 800d222:	f7f3 f851 	bl	80002c8 <__aeabi_dsub>
 800d226:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d22a:	9305      	str	r3, [sp, #20]
 800d22c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d230:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d234:	2b10      	cmp	r3, #16
 800d236:	dc02      	bgt.n	800d23e <__ieee754_rem_pio2+0x1c6>
 800d238:	e9c4 0100 	strd	r0, r1, [r4]
 800d23c:	e039      	b.n	800d2b2 <__ieee754_rem_pio2+0x23a>
 800d23e:	a34c      	add	r3, pc, #304	@ (adr r3, 800d370 <__ieee754_rem_pio2+0x2f8>)
 800d240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d244:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d248:	f7f3 f9f6 	bl	8000638 <__aeabi_dmul>
 800d24c:	4606      	mov	r6, r0
 800d24e:	460f      	mov	r7, r1
 800d250:	4602      	mov	r2, r0
 800d252:	460b      	mov	r3, r1
 800d254:	4650      	mov	r0, sl
 800d256:	4659      	mov	r1, fp
 800d258:	f7f3 f836 	bl	80002c8 <__aeabi_dsub>
 800d25c:	4602      	mov	r2, r0
 800d25e:	460b      	mov	r3, r1
 800d260:	4680      	mov	r8, r0
 800d262:	4689      	mov	r9, r1
 800d264:	4650      	mov	r0, sl
 800d266:	4659      	mov	r1, fp
 800d268:	f7f3 f82e 	bl	80002c8 <__aeabi_dsub>
 800d26c:	4632      	mov	r2, r6
 800d26e:	463b      	mov	r3, r7
 800d270:	f7f3 f82a 	bl	80002c8 <__aeabi_dsub>
 800d274:	a340      	add	r3, pc, #256	@ (adr r3, 800d378 <__ieee754_rem_pio2+0x300>)
 800d276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27a:	4606      	mov	r6, r0
 800d27c:	460f      	mov	r7, r1
 800d27e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d282:	f7f3 f9d9 	bl	8000638 <__aeabi_dmul>
 800d286:	4632      	mov	r2, r6
 800d288:	463b      	mov	r3, r7
 800d28a:	f7f3 f81d 	bl	80002c8 <__aeabi_dsub>
 800d28e:	4602      	mov	r2, r0
 800d290:	460b      	mov	r3, r1
 800d292:	4606      	mov	r6, r0
 800d294:	460f      	mov	r7, r1
 800d296:	4640      	mov	r0, r8
 800d298:	4649      	mov	r1, r9
 800d29a:	f7f3 f815 	bl	80002c8 <__aeabi_dsub>
 800d29e:	9a05      	ldr	r2, [sp, #20]
 800d2a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d2a4:	1ad3      	subs	r3, r2, r3
 800d2a6:	2b31      	cmp	r3, #49	@ 0x31
 800d2a8:	dc20      	bgt.n	800d2ec <__ieee754_rem_pio2+0x274>
 800d2aa:	e9c4 0100 	strd	r0, r1, [r4]
 800d2ae:	46c2      	mov	sl, r8
 800d2b0:	46cb      	mov	fp, r9
 800d2b2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d2b6:	4650      	mov	r0, sl
 800d2b8:	4642      	mov	r2, r8
 800d2ba:	464b      	mov	r3, r9
 800d2bc:	4659      	mov	r1, fp
 800d2be:	f7f3 f803 	bl	80002c8 <__aeabi_dsub>
 800d2c2:	463b      	mov	r3, r7
 800d2c4:	4632      	mov	r2, r6
 800d2c6:	f7f2 ffff 	bl	80002c8 <__aeabi_dsub>
 800d2ca:	9b04      	ldr	r3, [sp, #16]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d2d2:	f6bf af0e 	bge.w	800d0f2 <__ieee754_rem_pio2+0x7a>
 800d2d6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800d2da:	6063      	str	r3, [r4, #4]
 800d2dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d2e0:	f8c4 8000 	str.w	r8, [r4]
 800d2e4:	60a0      	str	r0, [r4, #8]
 800d2e6:	60e3      	str	r3, [r4, #12]
 800d2e8:	426d      	negs	r5, r5
 800d2ea:	e702      	b.n	800d0f2 <__ieee754_rem_pio2+0x7a>
 800d2ec:	a326      	add	r3, pc, #152	@ (adr r3, 800d388 <__ieee754_rem_pio2+0x310>)
 800d2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2f6:	f7f3 f99f 	bl	8000638 <__aeabi_dmul>
 800d2fa:	4606      	mov	r6, r0
 800d2fc:	460f      	mov	r7, r1
 800d2fe:	4602      	mov	r2, r0
 800d300:	460b      	mov	r3, r1
 800d302:	4640      	mov	r0, r8
 800d304:	4649      	mov	r1, r9
 800d306:	f7f2 ffdf 	bl	80002c8 <__aeabi_dsub>
 800d30a:	4602      	mov	r2, r0
 800d30c:	460b      	mov	r3, r1
 800d30e:	4682      	mov	sl, r0
 800d310:	468b      	mov	fp, r1
 800d312:	4640      	mov	r0, r8
 800d314:	4649      	mov	r1, r9
 800d316:	f7f2 ffd7 	bl	80002c8 <__aeabi_dsub>
 800d31a:	4632      	mov	r2, r6
 800d31c:	463b      	mov	r3, r7
 800d31e:	f7f2 ffd3 	bl	80002c8 <__aeabi_dsub>
 800d322:	a31b      	add	r3, pc, #108	@ (adr r3, 800d390 <__ieee754_rem_pio2+0x318>)
 800d324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d328:	4606      	mov	r6, r0
 800d32a:	460f      	mov	r7, r1
 800d32c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d330:	f7f3 f982 	bl	8000638 <__aeabi_dmul>
 800d334:	4632      	mov	r2, r6
 800d336:	463b      	mov	r3, r7
 800d338:	f7f2 ffc6 	bl	80002c8 <__aeabi_dsub>
 800d33c:	4606      	mov	r6, r0
 800d33e:	460f      	mov	r7, r1
 800d340:	e764      	b.n	800d20c <__ieee754_rem_pio2+0x194>
 800d342:	4b1b      	ldr	r3, [pc, #108]	@ (800d3b0 <__ieee754_rem_pio2+0x338>)
 800d344:	4598      	cmp	r8, r3
 800d346:	d935      	bls.n	800d3b4 <__ieee754_rem_pio2+0x33c>
 800d348:	4632      	mov	r2, r6
 800d34a:	463b      	mov	r3, r7
 800d34c:	4630      	mov	r0, r6
 800d34e:	4639      	mov	r1, r7
 800d350:	f7f2 ffba 	bl	80002c8 <__aeabi_dsub>
 800d354:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d358:	e9c4 0100 	strd	r0, r1, [r4]
 800d35c:	e69e      	b.n	800d09c <__ieee754_rem_pio2+0x24>
 800d35e:	bf00      	nop
 800d360:	54400000 	.word	0x54400000
 800d364:	3ff921fb 	.word	0x3ff921fb
 800d368:	1a626331 	.word	0x1a626331
 800d36c:	3dd0b461 	.word	0x3dd0b461
 800d370:	1a600000 	.word	0x1a600000
 800d374:	3dd0b461 	.word	0x3dd0b461
 800d378:	2e037073 	.word	0x2e037073
 800d37c:	3ba3198a 	.word	0x3ba3198a
 800d380:	6dc9c883 	.word	0x6dc9c883
 800d384:	3fe45f30 	.word	0x3fe45f30
 800d388:	2e000000 	.word	0x2e000000
 800d38c:	3ba3198a 	.word	0x3ba3198a
 800d390:	252049c1 	.word	0x252049c1
 800d394:	397b839a 	.word	0x397b839a
 800d398:	3fe921fb 	.word	0x3fe921fb
 800d39c:	4002d97b 	.word	0x4002d97b
 800d3a0:	3ff921fb 	.word	0x3ff921fb
 800d3a4:	413921fb 	.word	0x413921fb
 800d3a8:	3fe00000 	.word	0x3fe00000
 800d3ac:	0800e3a8 	.word	0x0800e3a8
 800d3b0:	7fefffff 	.word	0x7fefffff
 800d3b4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800d3b8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800d3bc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800d3c0:	4630      	mov	r0, r6
 800d3c2:	460f      	mov	r7, r1
 800d3c4:	f7f3 fbe8 	bl	8000b98 <__aeabi_d2iz>
 800d3c8:	f7f3 f8cc 	bl	8000564 <__aeabi_i2d>
 800d3cc:	4602      	mov	r2, r0
 800d3ce:	460b      	mov	r3, r1
 800d3d0:	4630      	mov	r0, r6
 800d3d2:	4639      	mov	r1, r7
 800d3d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d3d8:	f7f2 ff76 	bl	80002c8 <__aeabi_dsub>
 800d3dc:	4b22      	ldr	r3, [pc, #136]	@ (800d468 <__ieee754_rem_pio2+0x3f0>)
 800d3de:	2200      	movs	r2, #0
 800d3e0:	f7f3 f92a 	bl	8000638 <__aeabi_dmul>
 800d3e4:	460f      	mov	r7, r1
 800d3e6:	4606      	mov	r6, r0
 800d3e8:	f7f3 fbd6 	bl	8000b98 <__aeabi_d2iz>
 800d3ec:	f7f3 f8ba 	bl	8000564 <__aeabi_i2d>
 800d3f0:	4602      	mov	r2, r0
 800d3f2:	460b      	mov	r3, r1
 800d3f4:	4630      	mov	r0, r6
 800d3f6:	4639      	mov	r1, r7
 800d3f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d3fc:	f7f2 ff64 	bl	80002c8 <__aeabi_dsub>
 800d400:	4b19      	ldr	r3, [pc, #100]	@ (800d468 <__ieee754_rem_pio2+0x3f0>)
 800d402:	2200      	movs	r2, #0
 800d404:	f7f3 f918 	bl	8000638 <__aeabi_dmul>
 800d408:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800d40c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800d410:	f04f 0803 	mov.w	r8, #3
 800d414:	2600      	movs	r6, #0
 800d416:	2700      	movs	r7, #0
 800d418:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d41c:	4632      	mov	r2, r6
 800d41e:	463b      	mov	r3, r7
 800d420:	46c2      	mov	sl, r8
 800d422:	f108 38ff 	add.w	r8, r8, #4294967295
 800d426:	f7f3 fb6f 	bl	8000b08 <__aeabi_dcmpeq>
 800d42a:	2800      	cmp	r0, #0
 800d42c:	d1f4      	bne.n	800d418 <__ieee754_rem_pio2+0x3a0>
 800d42e:	4b0f      	ldr	r3, [pc, #60]	@ (800d46c <__ieee754_rem_pio2+0x3f4>)
 800d430:	9301      	str	r3, [sp, #4]
 800d432:	2302      	movs	r3, #2
 800d434:	9300      	str	r3, [sp, #0]
 800d436:	462a      	mov	r2, r5
 800d438:	4653      	mov	r3, sl
 800d43a:	4621      	mov	r1, r4
 800d43c:	a806      	add	r0, sp, #24
 800d43e:	f000 f8d3 	bl	800d5e8 <__kernel_rem_pio2>
 800d442:	9b04      	ldr	r3, [sp, #16]
 800d444:	2b00      	cmp	r3, #0
 800d446:	4605      	mov	r5, r0
 800d448:	f6bf ae53 	bge.w	800d0f2 <__ieee754_rem_pio2+0x7a>
 800d44c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800d450:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d454:	e9c4 2300 	strd	r2, r3, [r4]
 800d458:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800d45c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d460:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d464:	e740      	b.n	800d2e8 <__ieee754_rem_pio2+0x270>
 800d466:	bf00      	nop
 800d468:	41700000 	.word	0x41700000
 800d46c:	0800e428 	.word	0x0800e428

0800d470 <scalbn>:
 800d470:	b570      	push	{r4, r5, r6, lr}
 800d472:	ec55 4b10 	vmov	r4, r5, d0
 800d476:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d47a:	4606      	mov	r6, r0
 800d47c:	462b      	mov	r3, r5
 800d47e:	b991      	cbnz	r1, 800d4a6 <scalbn+0x36>
 800d480:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d484:	4323      	orrs	r3, r4
 800d486:	d03d      	beq.n	800d504 <scalbn+0x94>
 800d488:	4b35      	ldr	r3, [pc, #212]	@ (800d560 <scalbn+0xf0>)
 800d48a:	4620      	mov	r0, r4
 800d48c:	4629      	mov	r1, r5
 800d48e:	2200      	movs	r2, #0
 800d490:	f7f3 f8d2 	bl	8000638 <__aeabi_dmul>
 800d494:	4b33      	ldr	r3, [pc, #204]	@ (800d564 <scalbn+0xf4>)
 800d496:	429e      	cmp	r6, r3
 800d498:	4604      	mov	r4, r0
 800d49a:	460d      	mov	r5, r1
 800d49c:	da0f      	bge.n	800d4be <scalbn+0x4e>
 800d49e:	a328      	add	r3, pc, #160	@ (adr r3, 800d540 <scalbn+0xd0>)
 800d4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a4:	e01e      	b.n	800d4e4 <scalbn+0x74>
 800d4a6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d4aa:	4291      	cmp	r1, r2
 800d4ac:	d10b      	bne.n	800d4c6 <scalbn+0x56>
 800d4ae:	4622      	mov	r2, r4
 800d4b0:	4620      	mov	r0, r4
 800d4b2:	4629      	mov	r1, r5
 800d4b4:	f7f2 ff0a 	bl	80002cc <__adddf3>
 800d4b8:	4604      	mov	r4, r0
 800d4ba:	460d      	mov	r5, r1
 800d4bc:	e022      	b.n	800d504 <scalbn+0x94>
 800d4be:	460b      	mov	r3, r1
 800d4c0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d4c4:	3936      	subs	r1, #54	@ 0x36
 800d4c6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d4ca:	4296      	cmp	r6, r2
 800d4cc:	dd0d      	ble.n	800d4ea <scalbn+0x7a>
 800d4ce:	2d00      	cmp	r5, #0
 800d4d0:	a11d      	add	r1, pc, #116	@ (adr r1, 800d548 <scalbn+0xd8>)
 800d4d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4d6:	da02      	bge.n	800d4de <scalbn+0x6e>
 800d4d8:	a11d      	add	r1, pc, #116	@ (adr r1, 800d550 <scalbn+0xe0>)
 800d4da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4de:	a31a      	add	r3, pc, #104	@ (adr r3, 800d548 <scalbn+0xd8>)
 800d4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e4:	f7f3 f8a8 	bl	8000638 <__aeabi_dmul>
 800d4e8:	e7e6      	b.n	800d4b8 <scalbn+0x48>
 800d4ea:	1872      	adds	r2, r6, r1
 800d4ec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d4f0:	428a      	cmp	r2, r1
 800d4f2:	dcec      	bgt.n	800d4ce <scalbn+0x5e>
 800d4f4:	2a00      	cmp	r2, #0
 800d4f6:	dd08      	ble.n	800d50a <scalbn+0x9a>
 800d4f8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d4fc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d500:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d504:	ec45 4b10 	vmov	d0, r4, r5
 800d508:	bd70      	pop	{r4, r5, r6, pc}
 800d50a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d50e:	da08      	bge.n	800d522 <scalbn+0xb2>
 800d510:	2d00      	cmp	r5, #0
 800d512:	a10b      	add	r1, pc, #44	@ (adr r1, 800d540 <scalbn+0xd0>)
 800d514:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d518:	dac1      	bge.n	800d49e <scalbn+0x2e>
 800d51a:	a10f      	add	r1, pc, #60	@ (adr r1, 800d558 <scalbn+0xe8>)
 800d51c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d520:	e7bd      	b.n	800d49e <scalbn+0x2e>
 800d522:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d526:	3236      	adds	r2, #54	@ 0x36
 800d528:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d52c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d530:	4620      	mov	r0, r4
 800d532:	4b0d      	ldr	r3, [pc, #52]	@ (800d568 <scalbn+0xf8>)
 800d534:	4629      	mov	r1, r5
 800d536:	2200      	movs	r2, #0
 800d538:	e7d4      	b.n	800d4e4 <scalbn+0x74>
 800d53a:	bf00      	nop
 800d53c:	f3af 8000 	nop.w
 800d540:	c2f8f359 	.word	0xc2f8f359
 800d544:	01a56e1f 	.word	0x01a56e1f
 800d548:	8800759c 	.word	0x8800759c
 800d54c:	7e37e43c 	.word	0x7e37e43c
 800d550:	8800759c 	.word	0x8800759c
 800d554:	fe37e43c 	.word	0xfe37e43c
 800d558:	c2f8f359 	.word	0xc2f8f359
 800d55c:	81a56e1f 	.word	0x81a56e1f
 800d560:	43500000 	.word	0x43500000
 800d564:	ffff3cb0 	.word	0xffff3cb0
 800d568:	3c900000 	.word	0x3c900000

0800d56c <with_errno>:
 800d56c:	b510      	push	{r4, lr}
 800d56e:	ed2d 8b02 	vpush	{d8}
 800d572:	eeb0 8a40 	vmov.f32	s16, s0
 800d576:	eef0 8a60 	vmov.f32	s17, s1
 800d57a:	4604      	mov	r4, r0
 800d57c:	f7fc fa36 	bl	80099ec <__errno>
 800d580:	eeb0 0a48 	vmov.f32	s0, s16
 800d584:	eef0 0a68 	vmov.f32	s1, s17
 800d588:	ecbd 8b02 	vpop	{d8}
 800d58c:	6004      	str	r4, [r0, #0]
 800d58e:	bd10      	pop	{r4, pc}

0800d590 <xflow>:
 800d590:	4603      	mov	r3, r0
 800d592:	b507      	push	{r0, r1, r2, lr}
 800d594:	ec51 0b10 	vmov	r0, r1, d0
 800d598:	b183      	cbz	r3, 800d5bc <xflow+0x2c>
 800d59a:	4602      	mov	r2, r0
 800d59c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d5a0:	e9cd 2300 	strd	r2, r3, [sp]
 800d5a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5a8:	f7f3 f846 	bl	8000638 <__aeabi_dmul>
 800d5ac:	ec41 0b10 	vmov	d0, r0, r1
 800d5b0:	2022      	movs	r0, #34	@ 0x22
 800d5b2:	b003      	add	sp, #12
 800d5b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5b8:	f7ff bfd8 	b.w	800d56c <with_errno>
 800d5bc:	4602      	mov	r2, r0
 800d5be:	460b      	mov	r3, r1
 800d5c0:	e7ee      	b.n	800d5a0 <xflow+0x10>
 800d5c2:	0000      	movs	r0, r0
 800d5c4:	0000      	movs	r0, r0
	...

0800d5c8 <__math_uflow>:
 800d5c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d5d0 <__math_uflow+0x8>
 800d5cc:	f7ff bfe0 	b.w	800d590 <xflow>
 800d5d0:	00000000 	.word	0x00000000
 800d5d4:	10000000 	.word	0x10000000

0800d5d8 <__math_oflow>:
 800d5d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d5e0 <__math_oflow+0x8>
 800d5dc:	f7ff bfd8 	b.w	800d590 <xflow>
 800d5e0:	00000000 	.word	0x00000000
 800d5e4:	70000000 	.word	0x70000000

0800d5e8 <__kernel_rem_pio2>:
 800d5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ec:	ed2d 8b02 	vpush	{d8}
 800d5f0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800d5f4:	f112 0f14 	cmn.w	r2, #20
 800d5f8:	9306      	str	r3, [sp, #24]
 800d5fa:	9104      	str	r1, [sp, #16]
 800d5fc:	4bbe      	ldr	r3, [pc, #760]	@ (800d8f8 <__kernel_rem_pio2+0x310>)
 800d5fe:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800d600:	9008      	str	r0, [sp, #32]
 800d602:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d606:	9300      	str	r3, [sp, #0]
 800d608:	9b06      	ldr	r3, [sp, #24]
 800d60a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d60e:	bfa8      	it	ge
 800d610:	1ed4      	subge	r4, r2, #3
 800d612:	9305      	str	r3, [sp, #20]
 800d614:	bfb2      	itee	lt
 800d616:	2400      	movlt	r4, #0
 800d618:	2318      	movge	r3, #24
 800d61a:	fb94 f4f3 	sdivge	r4, r4, r3
 800d61e:	f06f 0317 	mvn.w	r3, #23
 800d622:	fb04 3303 	mla	r3, r4, r3, r3
 800d626:	eb03 0b02 	add.w	fp, r3, r2
 800d62a:	9b00      	ldr	r3, [sp, #0]
 800d62c:	9a05      	ldr	r2, [sp, #20]
 800d62e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800d8e8 <__kernel_rem_pio2+0x300>
 800d632:	eb03 0802 	add.w	r8, r3, r2
 800d636:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800d638:	1aa7      	subs	r7, r4, r2
 800d63a:	ae20      	add	r6, sp, #128	@ 0x80
 800d63c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d640:	2500      	movs	r5, #0
 800d642:	4545      	cmp	r5, r8
 800d644:	dd13      	ble.n	800d66e <__kernel_rem_pio2+0x86>
 800d646:	9b06      	ldr	r3, [sp, #24]
 800d648:	aa20      	add	r2, sp, #128	@ 0x80
 800d64a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d64e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800d652:	f04f 0800 	mov.w	r8, #0
 800d656:	9b00      	ldr	r3, [sp, #0]
 800d658:	4598      	cmp	r8, r3
 800d65a:	dc31      	bgt.n	800d6c0 <__kernel_rem_pio2+0xd8>
 800d65c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800d8e8 <__kernel_rem_pio2+0x300>
 800d660:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d664:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d668:	462f      	mov	r7, r5
 800d66a:	2600      	movs	r6, #0
 800d66c:	e01b      	b.n	800d6a6 <__kernel_rem_pio2+0xbe>
 800d66e:	42ef      	cmn	r7, r5
 800d670:	d407      	bmi.n	800d682 <__kernel_rem_pio2+0x9a>
 800d672:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d676:	f7f2 ff75 	bl	8000564 <__aeabi_i2d>
 800d67a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d67e:	3501      	adds	r5, #1
 800d680:	e7df      	b.n	800d642 <__kernel_rem_pio2+0x5a>
 800d682:	ec51 0b18 	vmov	r0, r1, d8
 800d686:	e7f8      	b.n	800d67a <__kernel_rem_pio2+0x92>
 800d688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d68c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d690:	f7f2 ffd2 	bl	8000638 <__aeabi_dmul>
 800d694:	4602      	mov	r2, r0
 800d696:	460b      	mov	r3, r1
 800d698:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d69c:	f7f2 fe16 	bl	80002cc <__adddf3>
 800d6a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6a4:	3601      	adds	r6, #1
 800d6a6:	9b05      	ldr	r3, [sp, #20]
 800d6a8:	429e      	cmp	r6, r3
 800d6aa:	f1a7 0708 	sub.w	r7, r7, #8
 800d6ae:	ddeb      	ble.n	800d688 <__kernel_rem_pio2+0xa0>
 800d6b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d6b4:	f108 0801 	add.w	r8, r8, #1
 800d6b8:	ecaa 7b02 	vstmia	sl!, {d7}
 800d6bc:	3508      	adds	r5, #8
 800d6be:	e7ca      	b.n	800d656 <__kernel_rem_pio2+0x6e>
 800d6c0:	9b00      	ldr	r3, [sp, #0]
 800d6c2:	f8dd 8000 	ldr.w	r8, [sp]
 800d6c6:	aa0c      	add	r2, sp, #48	@ 0x30
 800d6c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d6cc:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6ce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800d6d0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d6d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6d6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800d6da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6dc:	ab98      	add	r3, sp, #608	@ 0x260
 800d6de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d6e2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800d6e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d6ea:	ac0c      	add	r4, sp, #48	@ 0x30
 800d6ec:	ab70      	add	r3, sp, #448	@ 0x1c0
 800d6ee:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800d6f2:	46a1      	mov	r9, r4
 800d6f4:	46c2      	mov	sl, r8
 800d6f6:	f1ba 0f00 	cmp.w	sl, #0
 800d6fa:	f1a5 0508 	sub.w	r5, r5, #8
 800d6fe:	dc77      	bgt.n	800d7f0 <__kernel_rem_pio2+0x208>
 800d700:	4658      	mov	r0, fp
 800d702:	ed9d 0b02 	vldr	d0, [sp, #8]
 800d706:	f7ff feb3 	bl	800d470 <scalbn>
 800d70a:	ec57 6b10 	vmov	r6, r7, d0
 800d70e:	2200      	movs	r2, #0
 800d710:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800d714:	4630      	mov	r0, r6
 800d716:	4639      	mov	r1, r7
 800d718:	f7f2 ff8e 	bl	8000638 <__aeabi_dmul>
 800d71c:	ec41 0b10 	vmov	d0, r0, r1
 800d720:	f000 faba 	bl	800dc98 <floor>
 800d724:	4b75      	ldr	r3, [pc, #468]	@ (800d8fc <__kernel_rem_pio2+0x314>)
 800d726:	ec51 0b10 	vmov	r0, r1, d0
 800d72a:	2200      	movs	r2, #0
 800d72c:	f7f2 ff84 	bl	8000638 <__aeabi_dmul>
 800d730:	4602      	mov	r2, r0
 800d732:	460b      	mov	r3, r1
 800d734:	4630      	mov	r0, r6
 800d736:	4639      	mov	r1, r7
 800d738:	f7f2 fdc6 	bl	80002c8 <__aeabi_dsub>
 800d73c:	460f      	mov	r7, r1
 800d73e:	4606      	mov	r6, r0
 800d740:	f7f3 fa2a 	bl	8000b98 <__aeabi_d2iz>
 800d744:	9002      	str	r0, [sp, #8]
 800d746:	f7f2 ff0d 	bl	8000564 <__aeabi_i2d>
 800d74a:	4602      	mov	r2, r0
 800d74c:	460b      	mov	r3, r1
 800d74e:	4630      	mov	r0, r6
 800d750:	4639      	mov	r1, r7
 800d752:	f7f2 fdb9 	bl	80002c8 <__aeabi_dsub>
 800d756:	f1bb 0f00 	cmp.w	fp, #0
 800d75a:	4606      	mov	r6, r0
 800d75c:	460f      	mov	r7, r1
 800d75e:	dd6c      	ble.n	800d83a <__kernel_rem_pio2+0x252>
 800d760:	f108 31ff 	add.w	r1, r8, #4294967295
 800d764:	ab0c      	add	r3, sp, #48	@ 0x30
 800d766:	9d02      	ldr	r5, [sp, #8]
 800d768:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d76c:	f1cb 0018 	rsb	r0, fp, #24
 800d770:	fa43 f200 	asr.w	r2, r3, r0
 800d774:	4415      	add	r5, r2
 800d776:	4082      	lsls	r2, r0
 800d778:	1a9b      	subs	r3, r3, r2
 800d77a:	aa0c      	add	r2, sp, #48	@ 0x30
 800d77c:	9502      	str	r5, [sp, #8]
 800d77e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d782:	f1cb 0217 	rsb	r2, fp, #23
 800d786:	fa43 f902 	asr.w	r9, r3, r2
 800d78a:	f1b9 0f00 	cmp.w	r9, #0
 800d78e:	dd64      	ble.n	800d85a <__kernel_rem_pio2+0x272>
 800d790:	9b02      	ldr	r3, [sp, #8]
 800d792:	2200      	movs	r2, #0
 800d794:	3301      	adds	r3, #1
 800d796:	9302      	str	r3, [sp, #8]
 800d798:	4615      	mov	r5, r2
 800d79a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800d79e:	4590      	cmp	r8, r2
 800d7a0:	f300 80b8 	bgt.w	800d914 <__kernel_rem_pio2+0x32c>
 800d7a4:	f1bb 0f00 	cmp.w	fp, #0
 800d7a8:	dd07      	ble.n	800d7ba <__kernel_rem_pio2+0x1d2>
 800d7aa:	f1bb 0f01 	cmp.w	fp, #1
 800d7ae:	f000 80bf 	beq.w	800d930 <__kernel_rem_pio2+0x348>
 800d7b2:	f1bb 0f02 	cmp.w	fp, #2
 800d7b6:	f000 80c6 	beq.w	800d946 <__kernel_rem_pio2+0x35e>
 800d7ba:	f1b9 0f02 	cmp.w	r9, #2
 800d7be:	d14c      	bne.n	800d85a <__kernel_rem_pio2+0x272>
 800d7c0:	4632      	mov	r2, r6
 800d7c2:	463b      	mov	r3, r7
 800d7c4:	494e      	ldr	r1, [pc, #312]	@ (800d900 <__kernel_rem_pio2+0x318>)
 800d7c6:	2000      	movs	r0, #0
 800d7c8:	f7f2 fd7e 	bl	80002c8 <__aeabi_dsub>
 800d7cc:	4606      	mov	r6, r0
 800d7ce:	460f      	mov	r7, r1
 800d7d0:	2d00      	cmp	r5, #0
 800d7d2:	d042      	beq.n	800d85a <__kernel_rem_pio2+0x272>
 800d7d4:	4658      	mov	r0, fp
 800d7d6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800d8f0 <__kernel_rem_pio2+0x308>
 800d7da:	f7ff fe49 	bl	800d470 <scalbn>
 800d7de:	4630      	mov	r0, r6
 800d7e0:	4639      	mov	r1, r7
 800d7e2:	ec53 2b10 	vmov	r2, r3, d0
 800d7e6:	f7f2 fd6f 	bl	80002c8 <__aeabi_dsub>
 800d7ea:	4606      	mov	r6, r0
 800d7ec:	460f      	mov	r7, r1
 800d7ee:	e034      	b.n	800d85a <__kernel_rem_pio2+0x272>
 800d7f0:	4b44      	ldr	r3, [pc, #272]	@ (800d904 <__kernel_rem_pio2+0x31c>)
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7f8:	f7f2 ff1e 	bl	8000638 <__aeabi_dmul>
 800d7fc:	f7f3 f9cc 	bl	8000b98 <__aeabi_d2iz>
 800d800:	f7f2 feb0 	bl	8000564 <__aeabi_i2d>
 800d804:	4b40      	ldr	r3, [pc, #256]	@ (800d908 <__kernel_rem_pio2+0x320>)
 800d806:	2200      	movs	r2, #0
 800d808:	4606      	mov	r6, r0
 800d80a:	460f      	mov	r7, r1
 800d80c:	f7f2 ff14 	bl	8000638 <__aeabi_dmul>
 800d810:	4602      	mov	r2, r0
 800d812:	460b      	mov	r3, r1
 800d814:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d818:	f7f2 fd56 	bl	80002c8 <__aeabi_dsub>
 800d81c:	f7f3 f9bc 	bl	8000b98 <__aeabi_d2iz>
 800d820:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d824:	f849 0b04 	str.w	r0, [r9], #4
 800d828:	4639      	mov	r1, r7
 800d82a:	4630      	mov	r0, r6
 800d82c:	f7f2 fd4e 	bl	80002cc <__adddf3>
 800d830:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d834:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d838:	e75d      	b.n	800d6f6 <__kernel_rem_pio2+0x10e>
 800d83a:	d107      	bne.n	800d84c <__kernel_rem_pio2+0x264>
 800d83c:	f108 33ff 	add.w	r3, r8, #4294967295
 800d840:	aa0c      	add	r2, sp, #48	@ 0x30
 800d842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d846:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800d84a:	e79e      	b.n	800d78a <__kernel_rem_pio2+0x1a2>
 800d84c:	4b2f      	ldr	r3, [pc, #188]	@ (800d90c <__kernel_rem_pio2+0x324>)
 800d84e:	2200      	movs	r2, #0
 800d850:	f7f3 f978 	bl	8000b44 <__aeabi_dcmpge>
 800d854:	2800      	cmp	r0, #0
 800d856:	d143      	bne.n	800d8e0 <__kernel_rem_pio2+0x2f8>
 800d858:	4681      	mov	r9, r0
 800d85a:	2200      	movs	r2, #0
 800d85c:	2300      	movs	r3, #0
 800d85e:	4630      	mov	r0, r6
 800d860:	4639      	mov	r1, r7
 800d862:	f7f3 f951 	bl	8000b08 <__aeabi_dcmpeq>
 800d866:	2800      	cmp	r0, #0
 800d868:	f000 80bf 	beq.w	800d9ea <__kernel_rem_pio2+0x402>
 800d86c:	f108 33ff 	add.w	r3, r8, #4294967295
 800d870:	2200      	movs	r2, #0
 800d872:	9900      	ldr	r1, [sp, #0]
 800d874:	428b      	cmp	r3, r1
 800d876:	da6e      	bge.n	800d956 <__kernel_rem_pio2+0x36e>
 800d878:	2a00      	cmp	r2, #0
 800d87a:	f000 8089 	beq.w	800d990 <__kernel_rem_pio2+0x3a8>
 800d87e:	f108 38ff 	add.w	r8, r8, #4294967295
 800d882:	ab0c      	add	r3, sp, #48	@ 0x30
 800d884:	f1ab 0b18 	sub.w	fp, fp, #24
 800d888:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d0f6      	beq.n	800d87e <__kernel_rem_pio2+0x296>
 800d890:	4658      	mov	r0, fp
 800d892:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800d8f0 <__kernel_rem_pio2+0x308>
 800d896:	f7ff fdeb 	bl	800d470 <scalbn>
 800d89a:	f108 0301 	add.w	r3, r8, #1
 800d89e:	00da      	lsls	r2, r3, #3
 800d8a0:	9205      	str	r2, [sp, #20]
 800d8a2:	ec55 4b10 	vmov	r4, r5, d0
 800d8a6:	aa70      	add	r2, sp, #448	@ 0x1c0
 800d8a8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800d904 <__kernel_rem_pio2+0x31c>
 800d8ac:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800d8b0:	4646      	mov	r6, r8
 800d8b2:	f04f 0a00 	mov.w	sl, #0
 800d8b6:	2e00      	cmp	r6, #0
 800d8b8:	f280 80cf 	bge.w	800da5a <__kernel_rem_pio2+0x472>
 800d8bc:	4644      	mov	r4, r8
 800d8be:	2c00      	cmp	r4, #0
 800d8c0:	f2c0 80fd 	blt.w	800dabe <__kernel_rem_pio2+0x4d6>
 800d8c4:	4b12      	ldr	r3, [pc, #72]	@ (800d910 <__kernel_rem_pio2+0x328>)
 800d8c6:	461f      	mov	r7, r3
 800d8c8:	ab70      	add	r3, sp, #448	@ 0x1c0
 800d8ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d8ce:	9306      	str	r3, [sp, #24]
 800d8d0:	f04f 0a00 	mov.w	sl, #0
 800d8d4:	f04f 0b00 	mov.w	fp, #0
 800d8d8:	2600      	movs	r6, #0
 800d8da:	eba8 0504 	sub.w	r5, r8, r4
 800d8de:	e0e2      	b.n	800daa6 <__kernel_rem_pio2+0x4be>
 800d8e0:	f04f 0902 	mov.w	r9, #2
 800d8e4:	e754      	b.n	800d790 <__kernel_rem_pio2+0x1a8>
 800d8e6:	bf00      	nop
	...
 800d8f4:	3ff00000 	.word	0x3ff00000
 800d8f8:	0800e570 	.word	0x0800e570
 800d8fc:	40200000 	.word	0x40200000
 800d900:	3ff00000 	.word	0x3ff00000
 800d904:	3e700000 	.word	0x3e700000
 800d908:	41700000 	.word	0x41700000
 800d90c:	3fe00000 	.word	0x3fe00000
 800d910:	0800e530 	.word	0x0800e530
 800d914:	f854 3b04 	ldr.w	r3, [r4], #4
 800d918:	b945      	cbnz	r5, 800d92c <__kernel_rem_pio2+0x344>
 800d91a:	b123      	cbz	r3, 800d926 <__kernel_rem_pio2+0x33e>
 800d91c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800d920:	f844 3c04 	str.w	r3, [r4, #-4]
 800d924:	2301      	movs	r3, #1
 800d926:	3201      	adds	r2, #1
 800d928:	461d      	mov	r5, r3
 800d92a:	e738      	b.n	800d79e <__kernel_rem_pio2+0x1b6>
 800d92c:	1acb      	subs	r3, r1, r3
 800d92e:	e7f7      	b.n	800d920 <__kernel_rem_pio2+0x338>
 800d930:	f108 32ff 	add.w	r2, r8, #4294967295
 800d934:	ab0c      	add	r3, sp, #48	@ 0x30
 800d936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d93a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d93e:	a90c      	add	r1, sp, #48	@ 0x30
 800d940:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d944:	e739      	b.n	800d7ba <__kernel_rem_pio2+0x1d2>
 800d946:	f108 32ff 	add.w	r2, r8, #4294967295
 800d94a:	ab0c      	add	r3, sp, #48	@ 0x30
 800d94c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d950:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d954:	e7f3      	b.n	800d93e <__kernel_rem_pio2+0x356>
 800d956:	a90c      	add	r1, sp, #48	@ 0x30
 800d958:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d95c:	3b01      	subs	r3, #1
 800d95e:	430a      	orrs	r2, r1
 800d960:	e787      	b.n	800d872 <__kernel_rem_pio2+0x28a>
 800d962:	3401      	adds	r4, #1
 800d964:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d968:	2a00      	cmp	r2, #0
 800d96a:	d0fa      	beq.n	800d962 <__kernel_rem_pio2+0x37a>
 800d96c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d96e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d972:	eb0d 0503 	add.w	r5, sp, r3
 800d976:	9b06      	ldr	r3, [sp, #24]
 800d978:	aa20      	add	r2, sp, #128	@ 0x80
 800d97a:	4443      	add	r3, r8
 800d97c:	f108 0701 	add.w	r7, r8, #1
 800d980:	3d98      	subs	r5, #152	@ 0x98
 800d982:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800d986:	4444      	add	r4, r8
 800d988:	42bc      	cmp	r4, r7
 800d98a:	da04      	bge.n	800d996 <__kernel_rem_pio2+0x3ae>
 800d98c:	46a0      	mov	r8, r4
 800d98e:	e6a2      	b.n	800d6d6 <__kernel_rem_pio2+0xee>
 800d990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d992:	2401      	movs	r4, #1
 800d994:	e7e6      	b.n	800d964 <__kernel_rem_pio2+0x37c>
 800d996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d998:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800d99c:	f7f2 fde2 	bl	8000564 <__aeabi_i2d>
 800d9a0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800dc68 <__kernel_rem_pio2+0x680>
 800d9a4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d9a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d9ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d9b0:	46b2      	mov	sl, r6
 800d9b2:	f04f 0800 	mov.w	r8, #0
 800d9b6:	9b05      	ldr	r3, [sp, #20]
 800d9b8:	4598      	cmp	r8, r3
 800d9ba:	dd05      	ble.n	800d9c8 <__kernel_rem_pio2+0x3e0>
 800d9bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d9c0:	3701      	adds	r7, #1
 800d9c2:	eca5 7b02 	vstmia	r5!, {d7}
 800d9c6:	e7df      	b.n	800d988 <__kernel_rem_pio2+0x3a0>
 800d9c8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800d9cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d9d0:	f7f2 fe32 	bl	8000638 <__aeabi_dmul>
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	460b      	mov	r3, r1
 800d9d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9dc:	f7f2 fc76 	bl	80002cc <__adddf3>
 800d9e0:	f108 0801 	add.w	r8, r8, #1
 800d9e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9e8:	e7e5      	b.n	800d9b6 <__kernel_rem_pio2+0x3ce>
 800d9ea:	f1cb 0000 	rsb	r0, fp, #0
 800d9ee:	ec47 6b10 	vmov	d0, r6, r7
 800d9f2:	f7ff fd3d 	bl	800d470 <scalbn>
 800d9f6:	ec55 4b10 	vmov	r4, r5, d0
 800d9fa:	4b9d      	ldr	r3, [pc, #628]	@ (800dc70 <__kernel_rem_pio2+0x688>)
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	4620      	mov	r0, r4
 800da00:	4629      	mov	r1, r5
 800da02:	f7f3 f89f 	bl	8000b44 <__aeabi_dcmpge>
 800da06:	b300      	cbz	r0, 800da4a <__kernel_rem_pio2+0x462>
 800da08:	4b9a      	ldr	r3, [pc, #616]	@ (800dc74 <__kernel_rem_pio2+0x68c>)
 800da0a:	2200      	movs	r2, #0
 800da0c:	4620      	mov	r0, r4
 800da0e:	4629      	mov	r1, r5
 800da10:	f7f2 fe12 	bl	8000638 <__aeabi_dmul>
 800da14:	f7f3 f8c0 	bl	8000b98 <__aeabi_d2iz>
 800da18:	4606      	mov	r6, r0
 800da1a:	f7f2 fda3 	bl	8000564 <__aeabi_i2d>
 800da1e:	4b94      	ldr	r3, [pc, #592]	@ (800dc70 <__kernel_rem_pio2+0x688>)
 800da20:	2200      	movs	r2, #0
 800da22:	f7f2 fe09 	bl	8000638 <__aeabi_dmul>
 800da26:	460b      	mov	r3, r1
 800da28:	4602      	mov	r2, r0
 800da2a:	4629      	mov	r1, r5
 800da2c:	4620      	mov	r0, r4
 800da2e:	f7f2 fc4b 	bl	80002c8 <__aeabi_dsub>
 800da32:	f7f3 f8b1 	bl	8000b98 <__aeabi_d2iz>
 800da36:	ab0c      	add	r3, sp, #48	@ 0x30
 800da38:	f10b 0b18 	add.w	fp, fp, #24
 800da3c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800da40:	f108 0801 	add.w	r8, r8, #1
 800da44:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800da48:	e722      	b.n	800d890 <__kernel_rem_pio2+0x2a8>
 800da4a:	4620      	mov	r0, r4
 800da4c:	4629      	mov	r1, r5
 800da4e:	f7f3 f8a3 	bl	8000b98 <__aeabi_d2iz>
 800da52:	ab0c      	add	r3, sp, #48	@ 0x30
 800da54:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800da58:	e71a      	b.n	800d890 <__kernel_rem_pio2+0x2a8>
 800da5a:	ab0c      	add	r3, sp, #48	@ 0x30
 800da5c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800da60:	f7f2 fd80 	bl	8000564 <__aeabi_i2d>
 800da64:	4622      	mov	r2, r4
 800da66:	462b      	mov	r3, r5
 800da68:	f7f2 fde6 	bl	8000638 <__aeabi_dmul>
 800da6c:	4652      	mov	r2, sl
 800da6e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800da72:	465b      	mov	r3, fp
 800da74:	4620      	mov	r0, r4
 800da76:	4629      	mov	r1, r5
 800da78:	f7f2 fdde 	bl	8000638 <__aeabi_dmul>
 800da7c:	3e01      	subs	r6, #1
 800da7e:	4604      	mov	r4, r0
 800da80:	460d      	mov	r5, r1
 800da82:	e718      	b.n	800d8b6 <__kernel_rem_pio2+0x2ce>
 800da84:	9906      	ldr	r1, [sp, #24]
 800da86:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800da8a:	9106      	str	r1, [sp, #24]
 800da8c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800da90:	f7f2 fdd2 	bl	8000638 <__aeabi_dmul>
 800da94:	4602      	mov	r2, r0
 800da96:	460b      	mov	r3, r1
 800da98:	4650      	mov	r0, sl
 800da9a:	4659      	mov	r1, fp
 800da9c:	f7f2 fc16 	bl	80002cc <__adddf3>
 800daa0:	3601      	adds	r6, #1
 800daa2:	4682      	mov	sl, r0
 800daa4:	468b      	mov	fp, r1
 800daa6:	9b00      	ldr	r3, [sp, #0]
 800daa8:	429e      	cmp	r6, r3
 800daaa:	dc01      	bgt.n	800dab0 <__kernel_rem_pio2+0x4c8>
 800daac:	42b5      	cmp	r5, r6
 800daae:	dae9      	bge.n	800da84 <__kernel_rem_pio2+0x49c>
 800dab0:	ab48      	add	r3, sp, #288	@ 0x120
 800dab2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800dab6:	e9c5 ab00 	strd	sl, fp, [r5]
 800daba:	3c01      	subs	r4, #1
 800dabc:	e6ff      	b.n	800d8be <__kernel_rem_pio2+0x2d6>
 800dabe:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800dac0:	2b02      	cmp	r3, #2
 800dac2:	dc0b      	bgt.n	800dadc <__kernel_rem_pio2+0x4f4>
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	dc39      	bgt.n	800db3c <__kernel_rem_pio2+0x554>
 800dac8:	d05d      	beq.n	800db86 <__kernel_rem_pio2+0x59e>
 800daca:	9b02      	ldr	r3, [sp, #8]
 800dacc:	f003 0007 	and.w	r0, r3, #7
 800dad0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800dad4:	ecbd 8b02 	vpop	{d8}
 800dad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dadc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800dade:	2b03      	cmp	r3, #3
 800dae0:	d1f3      	bne.n	800daca <__kernel_rem_pio2+0x4e2>
 800dae2:	9b05      	ldr	r3, [sp, #20]
 800dae4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800dae8:	eb0d 0403 	add.w	r4, sp, r3
 800daec:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800daf0:	4625      	mov	r5, r4
 800daf2:	46c2      	mov	sl, r8
 800daf4:	f1ba 0f00 	cmp.w	sl, #0
 800daf8:	f1a5 0508 	sub.w	r5, r5, #8
 800dafc:	dc6b      	bgt.n	800dbd6 <__kernel_rem_pio2+0x5ee>
 800dafe:	4645      	mov	r5, r8
 800db00:	2d01      	cmp	r5, #1
 800db02:	f1a4 0408 	sub.w	r4, r4, #8
 800db06:	f300 8087 	bgt.w	800dc18 <__kernel_rem_pio2+0x630>
 800db0a:	9c05      	ldr	r4, [sp, #20]
 800db0c:	ab48      	add	r3, sp, #288	@ 0x120
 800db0e:	441c      	add	r4, r3
 800db10:	2000      	movs	r0, #0
 800db12:	2100      	movs	r1, #0
 800db14:	f1b8 0f01 	cmp.w	r8, #1
 800db18:	f300 809c 	bgt.w	800dc54 <__kernel_rem_pio2+0x66c>
 800db1c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800db20:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800db24:	f1b9 0f00 	cmp.w	r9, #0
 800db28:	f040 80a6 	bne.w	800dc78 <__kernel_rem_pio2+0x690>
 800db2c:	9b04      	ldr	r3, [sp, #16]
 800db2e:	e9c3 7800 	strd	r7, r8, [r3]
 800db32:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800db36:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800db3a:	e7c6      	b.n	800daca <__kernel_rem_pio2+0x4e2>
 800db3c:	9d05      	ldr	r5, [sp, #20]
 800db3e:	ab48      	add	r3, sp, #288	@ 0x120
 800db40:	441d      	add	r5, r3
 800db42:	4644      	mov	r4, r8
 800db44:	2000      	movs	r0, #0
 800db46:	2100      	movs	r1, #0
 800db48:	2c00      	cmp	r4, #0
 800db4a:	da35      	bge.n	800dbb8 <__kernel_rem_pio2+0x5d0>
 800db4c:	f1b9 0f00 	cmp.w	r9, #0
 800db50:	d038      	beq.n	800dbc4 <__kernel_rem_pio2+0x5dc>
 800db52:	4602      	mov	r2, r0
 800db54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800db58:	9c04      	ldr	r4, [sp, #16]
 800db5a:	e9c4 2300 	strd	r2, r3, [r4]
 800db5e:	4602      	mov	r2, r0
 800db60:	460b      	mov	r3, r1
 800db62:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800db66:	f7f2 fbaf 	bl	80002c8 <__aeabi_dsub>
 800db6a:	ad4a      	add	r5, sp, #296	@ 0x128
 800db6c:	2401      	movs	r4, #1
 800db6e:	45a0      	cmp	r8, r4
 800db70:	da2b      	bge.n	800dbca <__kernel_rem_pio2+0x5e2>
 800db72:	f1b9 0f00 	cmp.w	r9, #0
 800db76:	d002      	beq.n	800db7e <__kernel_rem_pio2+0x596>
 800db78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800db7c:	4619      	mov	r1, r3
 800db7e:	9b04      	ldr	r3, [sp, #16]
 800db80:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800db84:	e7a1      	b.n	800daca <__kernel_rem_pio2+0x4e2>
 800db86:	9c05      	ldr	r4, [sp, #20]
 800db88:	ab48      	add	r3, sp, #288	@ 0x120
 800db8a:	441c      	add	r4, r3
 800db8c:	2000      	movs	r0, #0
 800db8e:	2100      	movs	r1, #0
 800db90:	f1b8 0f00 	cmp.w	r8, #0
 800db94:	da09      	bge.n	800dbaa <__kernel_rem_pio2+0x5c2>
 800db96:	f1b9 0f00 	cmp.w	r9, #0
 800db9a:	d002      	beq.n	800dba2 <__kernel_rem_pio2+0x5ba>
 800db9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dba0:	4619      	mov	r1, r3
 800dba2:	9b04      	ldr	r3, [sp, #16]
 800dba4:	e9c3 0100 	strd	r0, r1, [r3]
 800dba8:	e78f      	b.n	800daca <__kernel_rem_pio2+0x4e2>
 800dbaa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dbae:	f7f2 fb8d 	bl	80002cc <__adddf3>
 800dbb2:	f108 38ff 	add.w	r8, r8, #4294967295
 800dbb6:	e7eb      	b.n	800db90 <__kernel_rem_pio2+0x5a8>
 800dbb8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800dbbc:	f7f2 fb86 	bl	80002cc <__adddf3>
 800dbc0:	3c01      	subs	r4, #1
 800dbc2:	e7c1      	b.n	800db48 <__kernel_rem_pio2+0x560>
 800dbc4:	4602      	mov	r2, r0
 800dbc6:	460b      	mov	r3, r1
 800dbc8:	e7c6      	b.n	800db58 <__kernel_rem_pio2+0x570>
 800dbca:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800dbce:	f7f2 fb7d 	bl	80002cc <__adddf3>
 800dbd2:	3401      	adds	r4, #1
 800dbd4:	e7cb      	b.n	800db6e <__kernel_rem_pio2+0x586>
 800dbd6:	ed95 7b00 	vldr	d7, [r5]
 800dbda:	ed8d 7b00 	vstr	d7, [sp]
 800dbde:	ed95 7b02 	vldr	d7, [r5, #8]
 800dbe2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dbe6:	ec53 2b17 	vmov	r2, r3, d7
 800dbea:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dbee:	f7f2 fb6d 	bl	80002cc <__adddf3>
 800dbf2:	4602      	mov	r2, r0
 800dbf4:	460b      	mov	r3, r1
 800dbf6:	4606      	mov	r6, r0
 800dbf8:	460f      	mov	r7, r1
 800dbfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dbfe:	f7f2 fb63 	bl	80002c8 <__aeabi_dsub>
 800dc02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dc06:	f7f2 fb61 	bl	80002cc <__adddf3>
 800dc0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc0e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800dc12:	e9c5 6700 	strd	r6, r7, [r5]
 800dc16:	e76d      	b.n	800daf4 <__kernel_rem_pio2+0x50c>
 800dc18:	ed94 7b00 	vldr	d7, [r4]
 800dc1c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800dc20:	ec51 0b17 	vmov	r0, r1, d7
 800dc24:	4652      	mov	r2, sl
 800dc26:	465b      	mov	r3, fp
 800dc28:	ed8d 7b00 	vstr	d7, [sp]
 800dc2c:	f7f2 fb4e 	bl	80002cc <__adddf3>
 800dc30:	4602      	mov	r2, r0
 800dc32:	460b      	mov	r3, r1
 800dc34:	4606      	mov	r6, r0
 800dc36:	460f      	mov	r7, r1
 800dc38:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc3c:	f7f2 fb44 	bl	80002c8 <__aeabi_dsub>
 800dc40:	4652      	mov	r2, sl
 800dc42:	465b      	mov	r3, fp
 800dc44:	f7f2 fb42 	bl	80002cc <__adddf3>
 800dc48:	3d01      	subs	r5, #1
 800dc4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dc4e:	e9c4 6700 	strd	r6, r7, [r4]
 800dc52:	e755      	b.n	800db00 <__kernel_rem_pio2+0x518>
 800dc54:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dc58:	f7f2 fb38 	bl	80002cc <__adddf3>
 800dc5c:	f108 38ff 	add.w	r8, r8, #4294967295
 800dc60:	e758      	b.n	800db14 <__kernel_rem_pio2+0x52c>
 800dc62:	bf00      	nop
 800dc64:	f3af 8000 	nop.w
	...
 800dc70:	41700000 	.word	0x41700000
 800dc74:	3e700000 	.word	0x3e700000
 800dc78:	9b04      	ldr	r3, [sp, #16]
 800dc7a:	9a04      	ldr	r2, [sp, #16]
 800dc7c:	601f      	str	r7, [r3, #0]
 800dc7e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800dc82:	605c      	str	r4, [r3, #4]
 800dc84:	609d      	str	r5, [r3, #8]
 800dc86:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800dc8a:	60d3      	str	r3, [r2, #12]
 800dc8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dc90:	6110      	str	r0, [r2, #16]
 800dc92:	6153      	str	r3, [r2, #20]
 800dc94:	e719      	b.n	800daca <__kernel_rem_pio2+0x4e2>
 800dc96:	bf00      	nop

0800dc98 <floor>:
 800dc98:	ec51 0b10 	vmov	r0, r1, d0
 800dc9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dca4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800dca8:	2e13      	cmp	r6, #19
 800dcaa:	460c      	mov	r4, r1
 800dcac:	4605      	mov	r5, r0
 800dcae:	4680      	mov	r8, r0
 800dcb0:	dc34      	bgt.n	800dd1c <floor+0x84>
 800dcb2:	2e00      	cmp	r6, #0
 800dcb4:	da17      	bge.n	800dce6 <floor+0x4e>
 800dcb6:	a332      	add	r3, pc, #200	@ (adr r3, 800dd80 <floor+0xe8>)
 800dcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcbc:	f7f2 fb06 	bl	80002cc <__adddf3>
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	f7f2 ff48 	bl	8000b58 <__aeabi_dcmpgt>
 800dcc8:	b150      	cbz	r0, 800dce0 <floor+0x48>
 800dcca:	2c00      	cmp	r4, #0
 800dccc:	da55      	bge.n	800dd7a <floor+0xe2>
 800dcce:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800dcd2:	432c      	orrs	r4, r5
 800dcd4:	2500      	movs	r5, #0
 800dcd6:	42ac      	cmp	r4, r5
 800dcd8:	4c2b      	ldr	r4, [pc, #172]	@ (800dd88 <floor+0xf0>)
 800dcda:	bf08      	it	eq
 800dcdc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800dce0:	4621      	mov	r1, r4
 800dce2:	4628      	mov	r0, r5
 800dce4:	e023      	b.n	800dd2e <floor+0x96>
 800dce6:	4f29      	ldr	r7, [pc, #164]	@ (800dd8c <floor+0xf4>)
 800dce8:	4137      	asrs	r7, r6
 800dcea:	ea01 0307 	and.w	r3, r1, r7
 800dcee:	4303      	orrs	r3, r0
 800dcf0:	d01d      	beq.n	800dd2e <floor+0x96>
 800dcf2:	a323      	add	r3, pc, #140	@ (adr r3, 800dd80 <floor+0xe8>)
 800dcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf8:	f7f2 fae8 	bl	80002cc <__adddf3>
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	2300      	movs	r3, #0
 800dd00:	f7f2 ff2a 	bl	8000b58 <__aeabi_dcmpgt>
 800dd04:	2800      	cmp	r0, #0
 800dd06:	d0eb      	beq.n	800dce0 <floor+0x48>
 800dd08:	2c00      	cmp	r4, #0
 800dd0a:	bfbe      	ittt	lt
 800dd0c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800dd10:	4133      	asrlt	r3, r6
 800dd12:	18e4      	addlt	r4, r4, r3
 800dd14:	ea24 0407 	bic.w	r4, r4, r7
 800dd18:	2500      	movs	r5, #0
 800dd1a:	e7e1      	b.n	800dce0 <floor+0x48>
 800dd1c:	2e33      	cmp	r6, #51	@ 0x33
 800dd1e:	dd0a      	ble.n	800dd36 <floor+0x9e>
 800dd20:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800dd24:	d103      	bne.n	800dd2e <floor+0x96>
 800dd26:	4602      	mov	r2, r0
 800dd28:	460b      	mov	r3, r1
 800dd2a:	f7f2 facf 	bl	80002cc <__adddf3>
 800dd2e:	ec41 0b10 	vmov	d0, r0, r1
 800dd32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd36:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800dd3a:	f04f 37ff 	mov.w	r7, #4294967295
 800dd3e:	40df      	lsrs	r7, r3
 800dd40:	4207      	tst	r7, r0
 800dd42:	d0f4      	beq.n	800dd2e <floor+0x96>
 800dd44:	a30e      	add	r3, pc, #56	@ (adr r3, 800dd80 <floor+0xe8>)
 800dd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4a:	f7f2 fabf 	bl	80002cc <__adddf3>
 800dd4e:	2200      	movs	r2, #0
 800dd50:	2300      	movs	r3, #0
 800dd52:	f7f2 ff01 	bl	8000b58 <__aeabi_dcmpgt>
 800dd56:	2800      	cmp	r0, #0
 800dd58:	d0c2      	beq.n	800dce0 <floor+0x48>
 800dd5a:	2c00      	cmp	r4, #0
 800dd5c:	da0a      	bge.n	800dd74 <floor+0xdc>
 800dd5e:	2e14      	cmp	r6, #20
 800dd60:	d101      	bne.n	800dd66 <floor+0xce>
 800dd62:	3401      	adds	r4, #1
 800dd64:	e006      	b.n	800dd74 <floor+0xdc>
 800dd66:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	40b3      	lsls	r3, r6
 800dd6e:	441d      	add	r5, r3
 800dd70:	4545      	cmp	r5, r8
 800dd72:	d3f6      	bcc.n	800dd62 <floor+0xca>
 800dd74:	ea25 0507 	bic.w	r5, r5, r7
 800dd78:	e7b2      	b.n	800dce0 <floor+0x48>
 800dd7a:	2500      	movs	r5, #0
 800dd7c:	462c      	mov	r4, r5
 800dd7e:	e7af      	b.n	800dce0 <floor+0x48>
 800dd80:	8800759c 	.word	0x8800759c
 800dd84:	7e37e43c 	.word	0x7e37e43c
 800dd88:	bff00000 	.word	0xbff00000
 800dd8c:	000fffff 	.word	0x000fffff

0800dd90 <_sbrk>:
 800dd90:	4a04      	ldr	r2, [pc, #16]	@ (800dda4 <_sbrk+0x14>)
 800dd92:	6811      	ldr	r1, [r2, #0]
 800dd94:	4603      	mov	r3, r0
 800dd96:	b909      	cbnz	r1, 800dd9c <_sbrk+0xc>
 800dd98:	4903      	ldr	r1, [pc, #12]	@ (800dda8 <_sbrk+0x18>)
 800dd9a:	6011      	str	r1, [r2, #0]
 800dd9c:	6810      	ldr	r0, [r2, #0]
 800dd9e:	4403      	add	r3, r0
 800dda0:	6013      	str	r3, [r2, #0]
 800dda2:	4770      	bx	lr
 800dda4:	20013320 	.word	0x20013320
 800dda8:	20013328 	.word	0x20013328

0800ddac <_init>:
 800ddac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddae:	bf00      	nop
 800ddb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddb2:	bc08      	pop	{r3}
 800ddb4:	469e      	mov	lr, r3
 800ddb6:	4770      	bx	lr

0800ddb8 <_fini>:
 800ddb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddba:	bf00      	nop
 800ddbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddbe:	bc08      	pop	{r3}
 800ddc0:	469e      	mov	lr, r3
 800ddc2:	4770      	bx	lr
