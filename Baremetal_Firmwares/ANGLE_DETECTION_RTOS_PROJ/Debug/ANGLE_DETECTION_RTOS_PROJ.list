
ANGLE_DETECTION_RTOS_PROJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c114  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  0800c2e8  0800c2e8  0000d2e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c850  0800c850  0000e1f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c850  0800c850  0000d850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c858  0800c858  0000e1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c858  0800c858  0000d858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c85c  0800c85c  0000d85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800c860  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013130  200001f8  0800ca58  0000e1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013328  0800ca58  0000e328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178d5  00000000  00000000  0000e228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003810  00000000  00000000  00025afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  00029310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ae  00000000  00000000  0002a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000258d2  00000000  00000000  0002bb5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bed8  00000000  00000000  00051430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000def08  00000000  00000000  0006d308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c210  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074bc  00000000  00000000  0014c254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  00153710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c2cc 	.word	0x0800c2cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800c2cc 	.word	0x0800c2cc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <CalculateAccAngle>:
#include "CalculateAngle.h"

Struct_Angle Angle;

void CalculateAccAngle(Struct_Angle* Angle, Struct_MPU6050* MPU6050)
{
 8000f78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
	Angle->acc_roll  = atan(-MPU6050->acc_x / sqrt(pow(MPU6050->acc_y,2) + pow(MPU6050->acc_z,2))) * RADIAN_TO_DEGREE;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f8a:	eef1 7a67 	vneg.f32	s15, s15
 8000f8e:	ee17 3a90 	vmov	r3, s15
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff faf8 	bl	8000588 <__aeabi_f2d>
 8000f98:	4604      	mov	r4, r0
 8000f9a:	460d      	mov	r5, r1
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff faf1 	bl	8000588 <__aeabi_f2d>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	ed9f 1b57 	vldr	d1, [pc, #348]	@ 8001108 <CalculateAccAngle+0x190>
 8000fae:	ec43 2b10 	vmov	d0, r2, r3
 8000fb2:	f00a f859 	bl	800b068 <pow>
 8000fb6:	ec59 8b10 	vmov	r8, r9, d0
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fae2 	bl	8000588 <__aeabi_f2d>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 8001108 <CalculateAccAngle+0x190>
 8000fcc:	ec43 2b10 	vmov	d0, r2, r3
 8000fd0:	f00a f84a 	bl	800b068 <pow>
 8000fd4:	ec53 2b10 	vmov	r2, r3, d0
 8000fd8:	4640      	mov	r0, r8
 8000fda:	4649      	mov	r1, r9
 8000fdc:	f7ff f976 	bl	80002cc <__adddf3>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	ec43 2b17 	vmov	d7, r2, r3
 8000fe8:	eeb0 0a47 	vmov.f32	s0, s14
 8000fec:	eef0 0a67 	vmov.f32	s1, s15
 8000ff0:	f00a f8aa 	bl	800b148 <sqrt>
 8000ff4:	ec53 2b10 	vmov	r2, r3, d0
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	4629      	mov	r1, r5
 8000ffc:	f7ff fc46 	bl	800088c <__aeabi_ddiv>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	ec43 2b17 	vmov	d7, r2, r3
 8001008:	eeb0 0a47 	vmov.f32	s0, s14
 800100c:	eef0 0a67 	vmov.f32	s1, s15
 8001010:	f00a f8c6 	bl	800b1a0 <atan>
 8001014:	ec51 0b10 	vmov	r0, r1, d0
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	4b3e      	ldr	r3, [pc, #248]	@ (8001118 <CalculateAccAngle+0x1a0>)
 800101e:	f7ff fb0b 	bl	8000638 <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	a339      	add	r3, pc, #228	@ (adr r3, 8001110 <CalculateAccAngle+0x198>)
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	f7ff fc2c 	bl	800088c <__aeabi_ddiv>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f7ff fdd4 	bl	8000be8 <__aeabi_d2f>
 8001040:	4602      	mov	r2, r0
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	601a      	str	r2, [r3, #0]
	Angle->acc_pitch = atan(MPU6050->acc_y / sqrt(pow(MPU6050->acc_x,2) + pow(MPU6050->acc_z,2))) * RADIAN_TO_DEGREE;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fa9c 	bl	8000588 <__aeabi_f2d>
 8001050:	4604      	mov	r4, r0
 8001052:	460d      	mov	r5, r1
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fa95 	bl	8000588 <__aeabi_f2d>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	ed9f 1b29 	vldr	d1, [pc, #164]	@ 8001108 <CalculateAccAngle+0x190>
 8001066:	ec43 2b10 	vmov	d0, r2, r3
 800106a:	f009 fffd 	bl	800b068 <pow>
 800106e:	ec59 8b10 	vmov	r8, r9, d0
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fa86 	bl	8000588 <__aeabi_f2d>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8001108 <CalculateAccAngle+0x190>
 8001084:	ec43 2b10 	vmov	d0, r2, r3
 8001088:	f009 ffee 	bl	800b068 <pow>
 800108c:	ec53 2b10 	vmov	r2, r3, d0
 8001090:	4640      	mov	r0, r8
 8001092:	4649      	mov	r1, r9
 8001094:	f7ff f91a 	bl	80002cc <__adddf3>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	ec43 2b17 	vmov	d7, r2, r3
 80010a0:	eeb0 0a47 	vmov.f32	s0, s14
 80010a4:	eef0 0a67 	vmov.f32	s1, s15
 80010a8:	f00a f84e 	bl	800b148 <sqrt>
 80010ac:	ec53 2b10 	vmov	r2, r3, d0
 80010b0:	4620      	mov	r0, r4
 80010b2:	4629      	mov	r1, r5
 80010b4:	f7ff fbea 	bl	800088c <__aeabi_ddiv>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	ec43 2b17 	vmov	d7, r2, r3
 80010c0:	eeb0 0a47 	vmov.f32	s0, s14
 80010c4:	eef0 0a67 	vmov.f32	s1, s15
 80010c8:	f00a f86a 	bl	800b1a0 <atan>
 80010cc:	ec51 0b10 	vmov	r0, r1, d0
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <CalculateAccAngle+0x1a0>)
 80010d6:	f7ff faaf 	bl	8000638 <__aeabi_dmul>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4610      	mov	r0, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	a30b      	add	r3, pc, #44	@ (adr r3, 8001110 <CalculateAccAngle+0x198>)
 80010e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e8:	f7ff fbd0 	bl	800088c <__aeabi_ddiv>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4610      	mov	r0, r2
 80010f2:	4619      	mov	r1, r3
 80010f4:	f7ff fd78 	bl	8000be8 <__aeabi_d2f>
 80010f8:	4602      	mov	r2, r0
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	605a      	str	r2, [r3, #4]
	//	Angle->acc_yaw = atan(sqrt(pow(MPU6050->acc_x, 2) + pow(MPU6050->acc_y, 2)) / MPU6050->acc_z) * RADIAN_TO_DEGREE;
	//Can't use Angle->acc_yaw there is no reliability. It's based on my personal experimental view.
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001108:	00000000 	.word	0x00000000
 800110c:	40000000 	.word	0x40000000
 8001110:	00000000 	.word	0x00000000
 8001114:	400921fb 	.word	0x400921fb
 8001118:	40668000 	.word	0x40668000

0800111c <CalculateCompliFilter>:
	Angle->gyro_pitch += MPU6050->gyro_x * dt;
	Angle->gyro_yaw   += MPU6050->gyro_z * dt;
}

void CalculateCompliFilter(Struct_Angle* Angle, Struct_MPU6050* MPU6050)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
	CalculateAccAngle(Angle, MPU6050); //Prepare Acc Angle before using Complimentary Filter.
 8001126:	6839      	ldr	r1, [r7, #0]
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ff25 	bl	8000f78 <CalculateAccAngle>

	static float alpha = 0.96f;
	Angle->ComFilt_roll  = alpha*(MPU6050->gyro_y * dt + Angle->ComFilt_roll) + (1-alpha) * Angle->acc_roll;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001134:	4b2b      	ldr	r3, [pc, #172]	@ (80011e4 <CalculateCompliFilter+0xc8>)
 8001136:	edd3 7a00 	vldr	s15, [r3]
 800113a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	edd3 7a06 	vldr	s15, [r3, #24]
 8001144:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001148:	4b27      	ldr	r3, [pc, #156]	@ (80011e8 <CalculateCompliFilter+0xcc>)
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001152:	4b25      	ldr	r3, [pc, #148]	@ (80011e8 <CalculateCompliFilter+0xcc>)
 8001154:	edd3 7a00 	vldr	s15, [r3]
 8001158:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800115c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	edd3 7a00 	vldr	s15, [r3]
 8001166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800116a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	edc3 7a06 	vstr	s15, [r3, #24]
	Angle->ComFilt_pitch = alpha*(MPU6050->gyro_x * dt + Angle->ComFilt_pitch) + (1-alpha) * Angle->acc_pitch;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	ed93 7a08 	vldr	s14, [r3, #32]
 800117a:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <CalculateCompliFilter+0xc8>)
 800117c:	edd3 7a00 	vldr	s15, [r3]
 8001180:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	edd3 7a07 	vldr	s15, [r3, #28]
 800118a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800118e:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <CalculateCompliFilter+0xcc>)
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001198:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <CalculateCompliFilter+0xcc>)
 800119a:	edd3 7a00 	vldr	s15, [r3]
 800119e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80011a2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80011ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	edc3 7a07 	vstr	s15, [r3, #28]
	Angle->ComFilt_yaw   = Angle->ComFilt_yaw + MPU6050->gyro_z * dt;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	ed93 7a08 	vldr	s14, [r3, #32]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80011c6:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <CalculateCompliFilter+0xc8>)
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000004 	.word	0x20000004

080011ec <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize() {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
    devAddr = HMC5883L_DEFAULT_ADDRESS;
 80011f0:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <HMC5883L_initialize+0x28>)
 80011f2:	221e      	movs	r2, #30
 80011f4:	701a      	strb	r2, [r3, #0]
    // write CONFIG_A register
    I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_A,
 80011f6:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <HMC5883L_initialize+0x28>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2270      	movs	r2, #112	@ 0x70
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f8ec 	bl	80013dc <I2Cdev_writeByte>
        (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
        (HMC5883L_RATE_15     << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
        (HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1)));

    // write CONFIG_B register
    HMC5883L_setGain(HMC5883L_GAIN_1090);
 8001204:	2001      	movs	r0, #1
 8001206:	f000 f82f 	bl	8001268 <HMC5883L_setGain>

    // write MODE register
    HMC5883L_setMode(HMC5883L_MODE_SINGLE);
 800120a:	2001      	movs	r0, #1
 800120c:	f000 f840 	bl	8001290 <HMC5883L_setMode>
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000238 	.word	0x20000238

08001218 <HMC5883L_testConnection>:

/** Verify the I2C connection.
 * Make sure the device is connected and responds as expected.
 * @return True if connection is valid, false otherwise
 */
bool HMC5883L_testConnection() {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af02      	add	r7, sp, #8
    if (I2Cdev_readBytes(devAddr, HMC5883L_RA_ID_A, 3, buffer, 0) == 3) {
 800121e:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <HMC5883L_testConnection+0x48>)
 8001220:	7818      	ldrb	r0, [r3, #0]
 8001222:	2300      	movs	r3, #0
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <HMC5883L_testConnection+0x4c>)
 8001228:	2203      	movs	r2, #3
 800122a:	210a      	movs	r1, #10
 800122c:	f000 f89e 	bl	800136c <I2Cdev_readBytes>
 8001230:	4603      	mov	r3, r0
 8001232:	2b03      	cmp	r3, #3
 8001234:	d10f      	bne.n	8001256 <HMC5883L_testConnection+0x3e>
        return (buffer[0] == 'H' && buffer[1] == '4' && buffer[2] == '3');
 8001236:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <HMC5883L_testConnection+0x4c>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b48      	cmp	r3, #72	@ 0x48
 800123c:	d109      	bne.n	8001252 <HMC5883L_testConnection+0x3a>
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <HMC5883L_testConnection+0x4c>)
 8001240:	785b      	ldrb	r3, [r3, #1]
 8001242:	2b34      	cmp	r3, #52	@ 0x34
 8001244:	d105      	bne.n	8001252 <HMC5883L_testConnection+0x3a>
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <HMC5883L_testConnection+0x4c>)
 8001248:	789b      	ldrb	r3, [r3, #2]
 800124a:	2b33      	cmp	r3, #51	@ 0x33
 800124c:	d101      	bne.n	8001252 <HMC5883L_testConnection+0x3a>
 800124e:	2301      	movs	r3, #1
 8001250:	e002      	b.n	8001258 <HMC5883L_testConnection+0x40>
 8001252:	2300      	movs	r3, #0
 8001254:	e000      	b.n	8001258 <HMC5883L_testConnection+0x40>
    }
    return false;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000238 	.word	0x20000238
 8001264:	2000023c 	.word	0x2000023c

08001268 <HMC5883L_setGain>:
 * @see getGain()
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */
void HMC5883L_setGain(uint8_t gain) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 4-0 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_B, gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1));
 8001272:	4b06      	ldr	r3, [pc, #24]	@ (800128c <HMC5883L_setGain+0x24>)
 8001274:	7818      	ldrb	r0, [r3, #0]
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	015b      	lsls	r3, r3, #5
 800127a:	b2db      	uxtb	r3, r3
 800127c:	461a      	mov	r2, r3
 800127e:	2101      	movs	r1, #1
 8001280:	f000 f8ac 	bl	80013dc <I2Cdev_writeByte>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000238 	.word	0x20000238

08001290 <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 7-2 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
 800129a:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <HMC5883L_setMode+0x28>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	79fa      	ldrb	r2, [r7, #7]
 80012a0:	2102      	movs	r1, #2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f89a 	bl	80013dc <I2Cdev_writeByte>
    mode = newMode; // track to tell if we have to clear bit 7 after a read
 80012a8:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <HMC5883L_setMode+0x2c>)
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	7013      	strb	r3, [r2, #0]
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000238 	.word	0x20000238
 80012bc:	20000242 	.word	0x20000242

080012c0 <HMC5883L_getHeading>:
 * @param x 16-bit signed integer container for X-axis heading
 * @param y 16-bit signed integer container for Y-axis heading
 * @param z 16-bit signed integer container for Z-axis heading
 * @see HMC5883L_RA_DATAX_H
 */
void HMC5883L_getHeading(int16_t *x, int16_t *y, int16_t *z) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af02      	add	r7, sp, #8
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
    I2Cdev_readBytes(devAddr, HMC5883L_RA_DATAX_H, 6, buffer, 0);
 80012cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001340 <HMC5883L_getHeading+0x80>)
 80012ce:	7818      	ldrb	r0, [r3, #0]
 80012d0:	2300      	movs	r3, #0
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <HMC5883L_getHeading+0x84>)
 80012d6:	2206      	movs	r2, #6
 80012d8:	2103      	movs	r1, #3
 80012da:	f000 f847 	bl	800136c <I2Cdev_readBytes>
    if (mode == HMC5883L_MODE_SINGLE) I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, HMC5883L_MODE_SINGLE << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
 80012de:	4b1a      	ldr	r3, [pc, #104]	@ (8001348 <HMC5883L_getHeading+0x88>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d106      	bne.n	80012f4 <HMC5883L_getHeading+0x34>
 80012e6:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <HMC5883L_getHeading+0x80>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2201      	movs	r2, #1
 80012ec:	2102      	movs	r1, #2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f874 	bl	80013dc <I2Cdev_writeByte>
    *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 80012f4:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <HMC5883L_getHeading+0x84>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <HMC5883L_getHeading+0x84>)
 80012fe:	785b      	ldrb	r3, [r3, #1]
 8001300:	b21b      	sxth	r3, r3
 8001302:	4313      	orrs	r3, r2
 8001304:	b21a      	sxth	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[4]) << 8) | buffer[5];
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <HMC5883L_getHeading+0x84>)
 800130c:	791b      	ldrb	r3, [r3, #4]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b21a      	sxth	r2, r3
 8001312:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <HMC5883L_getHeading+0x84>)
 8001314:	795b      	ldrb	r3, [r3, #5]
 8001316:	b21b      	sxth	r3, r3
 8001318:	4313      	orrs	r3, r2
 800131a:	b21a      	sxth	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[2]) << 8) | buffer[3];
 8001320:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <HMC5883L_getHeading+0x84>)
 8001322:	789b      	ldrb	r3, [r3, #2]
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	b21a      	sxth	r2, r3
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <HMC5883L_getHeading+0x84>)
 800132a:	78db      	ldrb	r3, [r3, #3]
 800132c:	b21b      	sxth	r3, r3
 800132e:	4313      	orrs	r3, r2
 8001330:	b21a      	sxth	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	801a      	strh	r2, [r3, #0]
}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000238 	.word	0x20000238
 8001344:	2000023c 	.word	0x2000023c
 8001348:	20000242 	.word	0x20000242

0800134c <I2Cdev_init>:
uint16_t I2Cdev_readTimeout = I2CDEV_DEFAULT_READ_TIMEOUT;

/** Sets device handle to use for communications
 * You can call this function and set any other device at any moment
 */
void I2Cdev_init(I2C_HandleTypeDef * hi2c){
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	I2Cdev_hi2c = hi2c;
 8001354:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <I2Cdev_init+0x1c>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000244 	.word	0x20000244

0800136c <I2Cdev_readBytes>:
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
uint8_t I2Cdev_readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af02      	add	r7, sp, #8
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	4603      	mov	r3, r0
 8001376:	71fb      	strb	r3, [r7, #7]
 8001378:	460b      	mov	r3, r1
 800137a:	71bb      	strb	r3, [r7, #6]
 800137c:	4613      	mov	r3, r2
 800137e:	717b      	strb	r3, [r7, #5]
    uint16_t tout = timeout > 0 ? timeout : I2CDEV_DEFAULT_READ_TIMEOUT;
 8001380:	8b3b      	ldrh	r3, [r7, #24]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <I2Cdev_readBytes+0x1e>
 8001386:	8b3b      	ldrh	r3, [r7, #24]
 8001388:	e001      	b.n	800138e <I2Cdev_readBytes+0x22>
 800138a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800138e:	81fb      	strh	r3, [r7, #14]

    HAL_I2C_Master_Transmit(I2Cdev_hi2c, devAddr << 1, &regAddr, 1, tout);
 8001390:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <I2Cdev_readBytes+0x6c>)
 8001392:	6818      	ldr	r0, [r3, #0]
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	b29b      	uxth	r3, r3
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	b299      	uxth	r1, r3
 800139c:	89fb      	ldrh	r3, [r7, #14]
 800139e:	1dba      	adds	r2, r7, #6
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2301      	movs	r3, #1
 80013a4:	f001 fbce 	bl	8002b44 <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(I2Cdev_hi2c, devAddr << 1, data, length, tout) == HAL_OK) return length;
 80013a8:	4b0b      	ldr	r3, [pc, #44]	@ (80013d8 <I2Cdev_readBytes+0x6c>)
 80013aa:	6818      	ldr	r0, [r3, #0]
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	b299      	uxth	r1, r3
 80013b4:	797b      	ldrb	r3, [r7, #5]
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	89fb      	ldrh	r3, [r7, #14]
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	4613      	mov	r3, r2
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	f001 fcbe 	bl	8002d40 <HAL_I2C_Master_Receive>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <I2Cdev_readBytes+0x62>
 80013ca:	797b      	ldrb	r3, [r7, #5]
 80013cc:	e000      	b.n	80013d0 <I2Cdev_readBytes+0x64>
    return -1;
 80013ce:	23ff      	movs	r3, #255	@ 0xff
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000244 	.word	0x20000244

080013dc <I2Cdev_writeByte>:
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
 80013e6:	460b      	mov	r3, r1
 80013e8:	71bb      	strb	r3, [r7, #6]
 80013ea:	4613      	mov	r3, r2
 80013ec:	717b      	strb	r3, [r7, #5]
    return I2Cdev_writeBytes(devAddr, regAddr, 1, &data);
 80013ee:	1d7b      	adds	r3, r7, #5
 80013f0:	79b9      	ldrb	r1, [r7, #6]
 80013f2:	79f8      	ldrb	r0, [r7, #7]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f000 f805 	bl	8001404 <I2Cdev_writeBytes>
 80013fa:	4603      	mov	r3, r0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <I2Cdev_writeBytes>:
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* pData)
{
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b089      	sub	sp, #36	@ 0x24
 8001408:	af04      	add	r7, sp, #16
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	4603      	mov	r3, r0
 800140e:	71fb      	strb	r3, [r7, #7]
 8001410:	460b      	mov	r3, r1
 8001412:	71bb      	strb	r3, [r7, #6]
 8001414:	4613      	mov	r3, r2
 8001416:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(I2Cdev_hi2c, devAddr << 1, regAddr, I2C_MEMADD_SIZE_8BIT, pData, length, 1000);
 8001418:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <I2Cdev_writeBytes+0x54>)
 800141a:	6818      	ldr	r0, [r3, #0]
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	b29b      	uxth	r3, r3
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	b299      	uxth	r1, r3
 8001424:	79bb      	ldrb	r3, [r7, #6]
 8001426:	b29a      	uxth	r2, r3
 8001428:	797b      	ldrb	r3, [r7, #5]
 800142a:	b29b      	uxth	r3, r3
 800142c:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8001430:	9402      	str	r4, [sp, #8]
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2301      	movs	r3, #1
 800143a:	f001 feb3 	bl	80031a4 <HAL_I2C_Mem_Write>
 800143e:	4603      	mov	r3, r0
 8001440:	73fb      	strb	r3, [r7, #15]
    return status == HAL_OK;
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf0c      	ite	eq
 8001448:	2301      	moveq	r3, #1
 800144a:	2300      	movne	r3, #0
 800144c:	b2db      	uxtb	r3, r3
}
 800144e:	4618      	mov	r0, r3
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	bd90      	pop	{r4, r7, pc}
 8001456:	bf00      	nop
 8001458:	20000244 	.word	0x20000244

0800145c <MPU6050_Writebyte>:

static float LSB_Sensitivity_ACC;
static float LSB_Sensitivity_GYRO;

void MPU6050_Writebyte(uint8_t reg_addr, uint8_t val)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af04      	add	r7, sp, #16
 8001462:	4603      	mov	r3, r0
 8001464:	460a      	mov	r2, r1
 8001466:	71fb      	strb	r3, [r7, #7]
 8001468:	4613      	mov	r3, r2
 800146a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, &val, 1, 1);
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	b29a      	uxth	r2, r3
 8001470:	2301      	movs	r3, #1
 8001472:	9302      	str	r3, [sp, #8]
 8001474:	2301      	movs	r3, #1
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	1dbb      	adds	r3, r7, #6
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2301      	movs	r3, #1
 800147e:	21d0      	movs	r1, #208	@ 0xd0
 8001480:	4803      	ldr	r0, [pc, #12]	@ (8001490 <MPU6050_Writebyte+0x34>)
 8001482:	f001 fe8f 	bl	80031a4 <HAL_I2C_Mem_Write>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	2000027c 	.word	0x2000027c

08001494 <MPU6050_Readbyte>:
{
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
}

void MPU6050_Readbyte(uint8_t reg_addr, uint8_t* data)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af04      	add	r7, sp, #16
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, 1, 1);
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	2301      	movs	r3, #1
 80014a6:	9302      	str	r3, [sp, #8]
 80014a8:	2301      	movs	r3, #1
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2301      	movs	r3, #1
 80014b2:	21d0      	movs	r1, #208	@ 0xd0
 80014b4:	4803      	ldr	r0, [pc, #12]	@ (80014c4 <MPU6050_Readbyte+0x30>)
 80014b6:	f001 ff6f 	bl	8003398 <HAL_I2C_Mem_Read>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2000027c 	.word	0x2000027c

080014c8 <MPU6050_Readbytes>:

void MPU6050_Readbytes(uint8_t reg_addr, uint8_t len, uint8_t* data)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af04      	add	r7, sp, #16
 80014ce:	4603      	mov	r3, r0
 80014d0:	603a      	str	r2, [r7, #0]
 80014d2:	71fb      	strb	r3, [r7, #7]
 80014d4:	460b      	mov	r3, r1
 80014d6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	b29a      	uxth	r2, r3
 80014dc:	79bb      	ldrb	r3, [r7, #6]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	2101      	movs	r1, #1
 80014e2:	9102      	str	r1, [sp, #8]
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	2301      	movs	r3, #1
 80014ec:	21d0      	movs	r1, #208	@ 0xd0
 80014ee:	4803      	ldr	r0, [pc, #12]	@ (80014fc <MPU6050_Readbytes+0x34>)
 80014f0:	f001 ff52 	bl	8003398 <HAL_I2C_Mem_Read>
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	2000027c 	.word	0x2000027c

08001500 <MPU6050_Initialization>:

void MPU6050_Initialization(void)
{
 8001500:	b5b0      	push	{r4, r5, r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af02      	add	r7, sp, #8
	HAL_Delay(50);
 8001506:	2032      	movs	r0, #50	@ 0x32
 8001508:	f000 ff26 	bl	8002358 <HAL_Delay>
	uint8_t who_am_i = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	707b      	strb	r3, [r7, #1]
	printf("Checking MPU6050...\n");
 8001510:	484d      	ldr	r0, [pc, #308]	@ (8001648 <MPU6050_Initialization+0x148>)
 8001512:	f007 fc71 	bl	8008df8 <puts>

	MPU6050_Readbyte(MPU6050_WHO_AM_I, &who_am_i);
 8001516:	1c7b      	adds	r3, r7, #1
 8001518:	4619      	mov	r1, r3
 800151a:	2075      	movs	r0, #117	@ 0x75
 800151c:	f7ff ffba 	bl	8001494 <MPU6050_Readbyte>
	if(who_am_i == 0x68)
 8001520:	787b      	ldrb	r3, [r7, #1]
 8001522:	2b68      	cmp	r3, #104	@ 0x68
 8001524:	d105      	bne.n	8001532 <MPU6050_Initialization+0x32>
	{
		printf("MPU6050 who_am_i = 0x%02x...OK\n", who_am_i);
 8001526:	787b      	ldrb	r3, [r7, #1]
 8001528:	4619      	mov	r1, r3
 800152a:	4848      	ldr	r0, [pc, #288]	@ (800164c <MPU6050_Initialization+0x14c>)
 800152c:	f007 fbfc 	bl	8008d28 <iprintf>
 8001530:	e00f      	b.n	8001552 <MPU6050_Initialization+0x52>
	}
	else
	{
		printf("ERROR!\n");
 8001532:	4847      	ldr	r0, [pc, #284]	@ (8001650 <MPU6050_Initialization+0x150>)
 8001534:	f007 fc60 	bl	8008df8 <puts>
		printf("MPU6050 who_am_i : 0x%02x should be 0x68\n", who_am_i);
 8001538:	787b      	ldrb	r3, [r7, #1]
 800153a:	4619      	mov	r1, r3
 800153c:	4845      	ldr	r0, [pc, #276]	@ (8001654 <MPU6050_Initialization+0x154>)
 800153e:	f007 fbf3 	bl	8008d28 <iprintf>
		while(1)
		{
			printf("who am i error. Can not recognize mpu6050\n");
 8001542:	4845      	ldr	r0, [pc, #276]	@ (8001658 <MPU6050_Initialization+0x158>)
 8001544:	f007 fc58 	bl	8008df8 <puts>
			HAL_Delay(100);
 8001548:	2064      	movs	r0, #100	@ 0x64
 800154a:	f000 ff05 	bl	8002358 <HAL_Delay>
			printf("who am i error. Can not recognize mpu6050\n");
 800154e:	bf00      	nop
 8001550:	e7f7      	b.n	8001542 <MPU6050_Initialization+0x42>
		}
	}

	//Reset the whole module before initialization
	MPU6050_Writebyte(MPU6050_PWR_MGMT_1, 0x1<<7);
 8001552:	2180      	movs	r1, #128	@ 0x80
 8001554:	206b      	movs	r0, #107	@ 0x6b
 8001556:	f7ff ff81 	bl	800145c <MPU6050_Writebyte>
	HAL_Delay(100);
 800155a:	2064      	movs	r0, #100	@ 0x64
 800155c:	f000 fefc 	bl	8002358 <HAL_Delay>

	//Power Management setting
	/* Default is sleep mode
	 * necessary to wake up MPU6050*/
	MPU6050_Writebyte(MPU6050_PWR_MGMT_1, 0x00);
 8001560:	2100      	movs	r1, #0
 8001562:	206b      	movs	r0, #107	@ 0x6b
 8001564:	f7ff ff7a 	bl	800145c <MPU6050_Writebyte>
	HAL_Delay(50);
 8001568:	2032      	movs	r0, #50	@ 0x32
 800156a:	f000 fef5 	bl	8002358 <HAL_Delay>

	//Sample rate divider
	/*Sample Rate = Gyroscope Output Rate / (1 + SMPRT_DIV) */
	//	MPU6050_Writebyte(MPU6050_SMPRT_DIV, 0x00); // ACC output rate is 1kHz, GYRO output rate is 8kHz
	MPU6050_Writebyte(MPU6050_SMPRT_DIV, 39); // Sample Rate = 200Hz
 800156e:	2127      	movs	r1, #39	@ 0x27
 8001570:	2019      	movs	r0, #25
 8001572:	f7ff ff73 	bl	800145c <MPU6050_Writebyte>
	HAL_Delay(50);
 8001576:	2032      	movs	r0, #50	@ 0x32
 8001578:	f000 feee 	bl	8002358 <HAL_Delay>

	//FSYNC and DLPF setting
	/*DLPF is set to 0*/
	MPU6050_Writebyte(MPU6050_CONFIG, 0x00);
 800157c:	2100      	movs	r1, #0
 800157e:	201a      	movs	r0, #26
 8001580:	f7ff ff6c 	bl	800145c <MPU6050_Writebyte>
	HAL_Delay(50);
 8001584:	2032      	movs	r0, #50	@ 0x32
 8001586:	f000 fee7 	bl	8002358 <HAL_Delay>
	/*FS_SEL  Full Scale Range
	  0    	+-250 degree/s
	  1		+-500 degree/s
	  2		+-1000 degree/s
	  3		+-2000 degree/s	*/
	uint8_t FS_SCALE_GYRO = 0x0;
 800158a:	2300      	movs	r3, #0
 800158c:	71fb      	strb	r3, [r7, #7]
	MPU6050_Writebyte(MPU6050_GYRO_CONFIG, FS_SCALE_GYRO<<3);
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	b2db      	uxtb	r3, r3
 8001594:	4619      	mov	r1, r3
 8001596:	201b      	movs	r0, #27
 8001598:	f7ff ff60 	bl	800145c <MPU6050_Writebyte>
	HAL_Delay(50);
 800159c:	2032      	movs	r0, #50	@ 0x32
 800159e:	f000 fedb 	bl	8002358 <HAL_Delay>
	/*FS_SEL  Full Scale Range
	  0    	+-2g
	  1		+-4g
	  2		+-8g
	  3		+-16g	*/
	uint8_t FS_SCALE_ACC = 0x0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	71bb      	strb	r3, [r7, #6]
	MPU6050_Writebyte(MPU6050_ACCEL_CONFIG, FS_SCALE_ACC<<3);
 80015a6:	79bb      	ldrb	r3, [r7, #6]
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	4619      	mov	r1, r3
 80015ae:	201c      	movs	r0, #28
 80015b0:	f7ff ff54 	bl	800145c <MPU6050_Writebyte>
	HAL_Delay(50);
 80015b4:	2032      	movs	r0, #50	@ 0x32
 80015b6:	f000 fecf 	bl	8002358 <HAL_Delay>

	MPU6050_Get_LSB_Sensitivity(FS_SCALE_GYRO, FS_SCALE_ACC);
 80015ba:	79ba      	ldrb	r2, [r7, #6]
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 f8a1 	bl	8001708 <MPU6050_Get_LSB_Sensitivity>
	printf("LSB_Sensitivity_GYRO: %f, LSB_Sensitivity_ACC: %f\n",LSB_Sensitivity_GYRO, LSB_Sensitivity_ACC);
 80015c6:	4b25      	ldr	r3, [pc, #148]	@ (800165c <MPU6050_Initialization+0x15c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ffdc 	bl	8000588 <__aeabi_f2d>
 80015d0:	4604      	mov	r4, r0
 80015d2:	460d      	mov	r5, r1
 80015d4:	4b22      	ldr	r3, [pc, #136]	@ (8001660 <MPU6050_Initialization+0x160>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffd5 	bl	8000588 <__aeabi_f2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	e9cd 2300 	strd	r2, r3, [sp]
 80015e6:	4622      	mov	r2, r4
 80015e8:	462b      	mov	r3, r5
 80015ea:	481e      	ldr	r0, [pc, #120]	@ (8001664 <MPU6050_Initialization+0x164>)
 80015ec:	f007 fb9c 	bl	8008d28 <iprintf>

	//Interrupt PIN setting
	uint8_t INT_LEVEL = 0x0; //0 - active high, 1 - active low
 80015f0:	2300      	movs	r3, #0
 80015f2:	717b      	strb	r3, [r7, #5]
	uint8_t LATCH_INT_EN = 0x0; //0 - INT 50us pulse, 1 - interrupt clear required
 80015f4:	2300      	movs	r3, #0
 80015f6:	713b      	strb	r3, [r7, #4]
	uint8_t INT_RD_CLEAR = 0x1; //0 - INT flag cleared by reading INT_STATUS, 1 - INT flag cleared by any read operation
 80015f8:	2301      	movs	r3, #1
 80015fa:	70fb      	strb	r3, [r7, #3]
	MPU6050_Writebyte(MPU6050_INT_PIN_CFG, (INT_LEVEL<<7)|(LATCH_INT_EN<<5)|(INT_RD_CLEAR<<4)); //
 80015fc:	797b      	ldrb	r3, [r7, #5]
 80015fe:	01db      	lsls	r3, r3, #7
 8001600:	b25a      	sxtb	r2, r3
 8001602:	793b      	ldrb	r3, [r7, #4]
 8001604:	015b      	lsls	r3, r3, #5
 8001606:	b25b      	sxtb	r3, r3
 8001608:	4313      	orrs	r3, r2
 800160a:	b25a      	sxtb	r2, r3
 800160c:	78fb      	ldrb	r3, [r7, #3]
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	b25b      	sxtb	r3, r3
 8001612:	4313      	orrs	r3, r2
 8001614:	b25b      	sxtb	r3, r3
 8001616:	b2db      	uxtb	r3, r3
 8001618:	4619      	mov	r1, r3
 800161a:	2037      	movs	r0, #55	@ 0x37
 800161c:	f7ff ff1e 	bl	800145c <MPU6050_Writebyte>
	HAL_Delay(50);
 8001620:	2032      	movs	r0, #50	@ 0x32
 8001622:	f000 fe99 	bl	8002358 <HAL_Delay>

	//Interrupt enable setting
	uint8_t DATA_RDY_EN = 0x1; // 1 - enable, 0 - disable
 8001626:	2301      	movs	r3, #1
 8001628:	70bb      	strb	r3, [r7, #2]
	MPU6050_Writebyte(MPU6050_INT_ENABLE, DATA_RDY_EN);
 800162a:	78bb      	ldrb	r3, [r7, #2]
 800162c:	4619      	mov	r1, r3
 800162e:	2038      	movs	r0, #56	@ 0x38
 8001630:	f7ff ff14 	bl	800145c <MPU6050_Writebyte>
	HAL_Delay(50);
 8001634:	2032      	movs	r0, #50	@ 0x32
 8001636:	f000 fe8f 	bl	8002358 <HAL_Delay>

	printf("MPU6050 setting is finished\n");
 800163a:	480b      	ldr	r0, [pc, #44]	@ (8001668 <MPU6050_Initialization+0x168>)
 800163c:	f007 fbdc 	bl	8008df8 <puts>
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bdb0      	pop	{r4, r5, r7, pc}
 8001648:	0800c2e8 	.word	0x0800c2e8
 800164c:	0800c2fc 	.word	0x0800c2fc
 8001650:	0800c31c 	.word	0x0800c31c
 8001654:	0800c324 	.word	0x0800c324
 8001658:	0800c350 	.word	0x0800c350
 800165c:	20000278 	.word	0x20000278
 8001660:	20000274 	.word	0x20000274
 8001664:	0800c37c 	.word	0x0800c37c
 8001668:	0800c3b0 	.word	0x0800c3b0

0800166c <MPU6050_Get6AxisRawData>:
/*Get Raw Data from sensor*/
void MPU6050_Get6AxisRawData(Struct_MPU6050* mpu6050)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	MPU6050_Readbytes(MPU6050_ACCEL_XOUT_H, 14, data);
 8001674:	f107 0308 	add.w	r3, r7, #8
 8001678:	461a      	mov	r2, r3
 800167a:	210e      	movs	r1, #14
 800167c:	203b      	movs	r0, #59	@ 0x3b
 800167e:	f7ff ff23 	bl	80014c8 <MPU6050_Readbytes>

	mpu6050->acc_x_raw = (data[0] << 8) | data[1];
 8001682:	7a3b      	ldrb	r3, [r7, #8]
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	b21a      	sxth	r2, r3
 8001688:	7a7b      	ldrb	r3, [r7, #9]
 800168a:	b21b      	sxth	r3, r3
 800168c:	4313      	orrs	r3, r2
 800168e:	b21a      	sxth	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	801a      	strh	r2, [r3, #0]
	mpu6050->acc_y_raw = (data[2] << 8) | data[3];
 8001694:	7abb      	ldrb	r3, [r7, #10]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	b21a      	sxth	r2, r3
 800169a:	7afb      	ldrb	r3, [r7, #11]
 800169c:	b21b      	sxth	r3, r3
 800169e:	4313      	orrs	r3, r2
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	805a      	strh	r2, [r3, #2]
	mpu6050->acc_z_raw = (data[4] << 8) | data[5];
 80016a6:	7b3b      	ldrb	r3, [r7, #12]
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	b21a      	sxth	r2, r3
 80016ac:	7b7b      	ldrb	r3, [r7, #13]
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b21a      	sxth	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	809a      	strh	r2, [r3, #4]

	mpu6050->temperature_raw = (data[6] << 8) | data[7];
 80016b8:	7bbb      	ldrb	r3, [r7, #14]
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	b21a      	sxth	r2, r3
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	80da      	strh	r2, [r3, #6]

	mpu6050->gyro_x_raw = ((data[8] << 8) | data[9]);
 80016ca:	7c3b      	ldrb	r3, [r7, #16]
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	7c7b      	ldrb	r3, [r7, #17]
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	4313      	orrs	r3, r2
 80016d6:	b21a      	sxth	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	811a      	strh	r2, [r3, #8]
	mpu6050->gyro_y_raw = ((data[10] << 8) | data[11]);
 80016dc:	7cbb      	ldrb	r3, [r7, #18]
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	b21a      	sxth	r2, r3
 80016e2:	7cfb      	ldrb	r3, [r7, #19]
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	4313      	orrs	r3, r2
 80016e8:	b21a      	sxth	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	815a      	strh	r2, [r3, #10]
	mpu6050->gyro_z_raw = ((data[12] << 8) | data[13]);
 80016ee:	7d3b      	ldrb	r3, [r7, #20]
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	b21a      	sxth	r2, r3
 80016f4:	7d7b      	ldrb	r3, [r7, #21]
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	b21a      	sxth	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	819a      	strh	r2, [r3, #12]
}
 8001700:	bf00      	nop
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <MPU6050_Get_LSB_Sensitivity>:

void MPU6050_Get_LSB_Sensitivity(uint8_t FS_SCALE_GYRO, uint8_t FS_SCALE_ACC)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	460a      	mov	r2, r1
 8001712:	71fb      	strb	r3, [r7, #7]
 8001714:	4613      	mov	r3, r2
 8001716:	71bb      	strb	r3, [r7, #6]
	switch(FS_SCALE_GYRO)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	2b03      	cmp	r3, #3
 800171c:	d81a      	bhi.n	8001754 <MPU6050_Get_LSB_Sensitivity+0x4c>
 800171e:	a201      	add	r2, pc, #4	@ (adr r2, 8001724 <MPU6050_Get_LSB_Sensitivity+0x1c>)
 8001720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001724:	08001735 	.word	0x08001735
 8001728:	0800173d 	.word	0x0800173d
 800172c:	08001745 	.word	0x08001745
 8001730:	0800174d 	.word	0x0800174d
	{
	case 0:
		LSB_Sensitivity_GYRO = 131.f;
 8001734:	4b1b      	ldr	r3, [pc, #108]	@ (80017a4 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 8001736:	4a1c      	ldr	r2, [pc, #112]	@ (80017a8 <MPU6050_Get_LSB_Sensitivity+0xa0>)
 8001738:	601a      	str	r2, [r3, #0]
		break;
 800173a:	e00b      	b.n	8001754 <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 1:
		LSB_Sensitivity_GYRO = 65.5f;
 800173c:	4b19      	ldr	r3, [pc, #100]	@ (80017a4 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 800173e:	4a1b      	ldr	r2, [pc, #108]	@ (80017ac <MPU6050_Get_LSB_Sensitivity+0xa4>)
 8001740:	601a      	str	r2, [r3, #0]
		break;
 8001742:	e007      	b.n	8001754 <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 2:
		LSB_Sensitivity_GYRO = 32.8f;
 8001744:	4b17      	ldr	r3, [pc, #92]	@ (80017a4 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 8001746:	4a1a      	ldr	r2, [pc, #104]	@ (80017b0 <MPU6050_Get_LSB_Sensitivity+0xa8>)
 8001748:	601a      	str	r2, [r3, #0]
		break;
 800174a:	e003      	b.n	8001754 <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 3:
		LSB_Sensitivity_GYRO = 16.4f;
 800174c:	4b15      	ldr	r3, [pc, #84]	@ (80017a4 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 800174e:	4a19      	ldr	r2, [pc, #100]	@ (80017b4 <MPU6050_Get_LSB_Sensitivity+0xac>)
 8001750:	601a      	str	r2, [r3, #0]
		break;
 8001752:	bf00      	nop
	}
	switch(FS_SCALE_ACC)
 8001754:	79bb      	ldrb	r3, [r7, #6]
 8001756:	2b03      	cmp	r3, #3
 8001758:	d81e      	bhi.n	8001798 <MPU6050_Get_LSB_Sensitivity+0x90>
 800175a:	a201      	add	r2, pc, #4	@ (adr r2, 8001760 <MPU6050_Get_LSB_Sensitivity+0x58>)
 800175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001760:	08001771 	.word	0x08001771
 8001764:	0800177b 	.word	0x0800177b
 8001768:	08001785 	.word	0x08001785
 800176c:	0800178f 	.word	0x0800178f
	{
	case 0:
		LSB_Sensitivity_ACC = 16384.f;
 8001770:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8001772:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8001776:	601a      	str	r2, [r3, #0]
		break;
 8001778:	e00e      	b.n	8001798 <MPU6050_Get_LSB_Sensitivity+0x90>
	case 1:
		LSB_Sensitivity_ACC = 8192.f;
 800177a:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 800177c:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8001780:	601a      	str	r2, [r3, #0]
		break;
 8001782:	e009      	b.n	8001798 <MPU6050_Get_LSB_Sensitivity+0x90>
	case 2:
		LSB_Sensitivity_ACC = 4096.f;
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8001786:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 800178a:	601a      	str	r2, [r3, #0]
		break;
 800178c:	e004      	b.n	8001798 <MPU6050_Get_LSB_Sensitivity+0x90>
	case 3:
		LSB_Sensitivity_ACC = 2048.f;
 800178e:	4b0a      	ldr	r3, [pc, #40]	@ (80017b8 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8001790:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8001794:	601a      	str	r2, [r3, #0]
		break;
 8001796:	bf00      	nop
	}
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	20000278 	.word	0x20000278
 80017a8:	43030000 	.word	0x43030000
 80017ac:	42830000 	.word	0x42830000
 80017b0:	42033333 	.word	0x42033333
 80017b4:	41833333 	.word	0x41833333
 80017b8:	20000274 	.word	0x20000274
 80017bc:	00000000 	.word	0x00000000

080017c0 <MPU6050_DataConvert>:

/*Convert Unit. acc_raw -> g, gyro_raw -> degree per second*/
void MPU6050_DataConvert(Struct_MPU6050* mpu6050)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	//printf("LSB_Sensitivity_GYRO: %f, LSB_Sensitivity_ACC: %f\n",LSB_Sensitivity_GYRO,LSB_Sensitivity_ACC);
	mpu6050->acc_x = mpu6050->acc_x_raw / LSB_Sensitivity_ACC;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ce:	ee07 3a90 	vmov	s15, r3
 80017d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017d6:	4b3c      	ldr	r3, [pc, #240]	@ (80018c8 <MPU6050_DataConvert+0x108>)
 80017d8:	ed93 7a00 	vldr	s14, [r3]
 80017dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	edc3 7a04 	vstr	s15, [r3, #16]
	mpu6050->acc_y = mpu6050->acc_y_raw / LSB_Sensitivity_ACC;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017ec:	ee07 3a90 	vmov	s15, r3
 80017f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017f4:	4b34      	ldr	r3, [pc, #208]	@ (80018c8 <MPU6050_DataConvert+0x108>)
 80017f6:	ed93 7a00 	vldr	s14, [r3]
 80017fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	edc3 7a05 	vstr	s15, [r3, #20]
	mpu6050->acc_z = mpu6050->acc_z_raw / LSB_Sensitivity_ACC;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800180a:	ee07 3a90 	vmov	s15, r3
 800180e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001812:	4b2d      	ldr	r3, [pc, #180]	@ (80018c8 <MPU6050_DataConvert+0x108>)
 8001814:	ed93 7a00 	vldr	s14, [r3]
 8001818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	edc3 7a06 	vstr	s15, [r3, #24]

	mpu6050->temperature = (float)(mpu6050->temperature_raw)/340+36.53;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001828:	ee07 3a90 	vmov	s15, r3
 800182c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001830:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80018cc <MPU6050_DataConvert+0x10c>
 8001834:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001838:	ee16 0a90 	vmov	r0, s13
 800183c:	f7fe fea4 	bl	8000588 <__aeabi_f2d>
 8001840:	a31f      	add	r3, pc, #124	@ (adr r3, 80018c0 <MPU6050_DataConvert+0x100>)
 8001842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001846:	f7fe fd41 	bl	80002cc <__adddf3>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4610      	mov	r0, r2
 8001850:	4619      	mov	r1, r3
 8001852:	f7ff f9c9 	bl	8000be8 <__aeabi_d2f>
 8001856:	4602      	mov	r2, r0
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	61da      	str	r2, [r3, #28]

	mpu6050->gyro_x = mpu6050->gyro_x_raw / LSB_Sensitivity_GYRO;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001862:	ee07 3a90 	vmov	s15, r3
 8001866:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800186a:	4b19      	ldr	r3, [pc, #100]	@ (80018d0 <MPU6050_DataConvert+0x110>)
 800186c:	ed93 7a00 	vldr	s14, [r3]
 8001870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	edc3 7a08 	vstr	s15, [r3, #32]
	mpu6050->gyro_y = mpu6050->gyro_y_raw / LSB_Sensitivity_GYRO;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001888:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <MPU6050_DataConvert+0x110>)
 800188a:	ed93 7a00 	vldr	s14, [r3]
 800188e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	mpu6050->gyro_z = mpu6050->gyro_z_raw / LSB_Sensitivity_GYRO;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800189e:	ee07 3a90 	vmov	s15, r3
 80018a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018a6:	4b0a      	ldr	r3, [pc, #40]	@ (80018d0 <MPU6050_DataConvert+0x110>)
 80018a8:	ed93 7a00 	vldr	s14, [r3]
 80018ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	0a3d70a4 	.word	0x0a3d70a4
 80018c4:	404243d7 	.word	0x404243d7
 80018c8:	20000274 	.word	0x20000274
 80018cc:	43aa0000 	.word	0x43aa0000
 80018d0:	20000278 	.word	0x20000278

080018d4 <MPU6050_DataReady>:


int MPU6050_DataReady(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
			return 1;
		}
	}
	return 0;
	 */
	return HAL_GPIO_ReadPin(MPU6050_INT_PORT, MPU6050_INT_PIN);
 80018d8:	2120      	movs	r1, #32
 80018da:	4803      	ldr	r0, [pc, #12]	@ (80018e8 <MPU6050_DataReady+0x14>)
 80018dc:	f000 ffd6 	bl	800288c <HAL_GPIO_ReadPin>
 80018e0:	4603      	mov	r3, r0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40020400 	.word	0x40020400

080018ec <MPU6050_ProcessData>:

void MPU6050_ProcessData(Struct_MPU6050* mpu6050)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	MPU6050_Get6AxisRawData(mpu6050);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff feb9 	bl	800166c <MPU6050_Get6AxisRawData>
	MPU6050_DataConvert(mpu6050);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ff60 	bl	80017c0 <MPU6050_DataConvert>
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800190e:	f000 fce1 	bl	80022d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001912:	f000 f88b 	bl	8001a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001916:	f000 f97b 	bl	8001c10 <MX_GPIO_Init>
  MX_I2C1_Init();
 800191a:	f000 f8f3 	bl	8001b04 <MX_I2C1_Init>
  MX_I2C2_Init();
 800191e:	f000 f91f 	bl	8001b60 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001922:	f000 f94b 	bl	8001bbc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  I2Cdev_init(&hi2c2);
 8001926:	4835      	ldr	r0, [pc, #212]	@ (80019fc <main+0xf4>)
 8001928:	f7ff fd10 	bl	800134c <I2Cdev_init>
  HMC5883L_initialize();
 800192c:	f7ff fc5e 	bl	80011ec <HMC5883L_initialize>
  MPU6050_Initialization();
 8001930:	f7ff fde6 	bl	8001500 <MPU6050_Initialization>

  if (HMC5883L_testConnection())
 8001934:	f7ff fc70 	bl	8001218 <HMC5883L_testConnection>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00f      	beq.n	800195e <main+0x56>
  {
	  sprintf(buffer, "HMC5883L Connected\r\n");
 800193e:	4930      	ldr	r1, [pc, #192]	@ (8001a00 <main+0xf8>)
 8001940:	4830      	ldr	r0, [pc, #192]	@ (8001a04 <main+0xfc>)
 8001942:	f007 fa61 	bl	8008e08 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001946:	482f      	ldr	r0, [pc, #188]	@ (8001a04 <main+0xfc>)
 8001948:	f7fe fcb2 	bl	80002b0 <strlen>
 800194c:	4603      	mov	r3, r0
 800194e:	b29a      	uxth	r2, r3
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
 8001954:	492b      	ldr	r1, [pc, #172]	@ (8001a04 <main+0xfc>)
 8001956:	482c      	ldr	r0, [pc, #176]	@ (8001a08 <main+0x100>)
 8001958:	f003 fd5a 	bl	8005410 <HAL_UART_Transmit>
 800195c:	e00e      	b.n	800197c <main+0x74>
  }
  else
  {
	  sprintf(buffer, "HMC5883L Connection Failed\r\n");
 800195e:	492b      	ldr	r1, [pc, #172]	@ (8001a0c <main+0x104>)
 8001960:	4828      	ldr	r0, [pc, #160]	@ (8001a04 <main+0xfc>)
 8001962:	f007 fa51 	bl	8008e08 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001966:	4827      	ldr	r0, [pc, #156]	@ (8001a04 <main+0xfc>)
 8001968:	f7fe fca2 	bl	80002b0 <strlen>
 800196c:	4603      	mov	r3, r0
 800196e:	b29a      	uxth	r2, r3
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
 8001974:	4923      	ldr	r1, [pc, #140]	@ (8001a04 <main+0xfc>)
 8001976:	4824      	ldr	r0, [pc, #144]	@ (8001a08 <main+0x100>)
 8001978:	f003 fd4a 	bl	8005410 <HAL_UART_Transmit>
  }

  status = xTaskCreate(mpu6050_task, "gyro-accel", 512, NULL, 4, &mpu6050_handler);
 800197c:	4b24      	ldr	r3, [pc, #144]	@ (8001a10 <main+0x108>)
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	2304      	movs	r3, #4
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2300      	movs	r3, #0
 8001986:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800198a:	4922      	ldr	r1, [pc, #136]	@ (8001a14 <main+0x10c>)
 800198c:	4822      	ldr	r0, [pc, #136]	@ (8001a18 <main+0x110>)
 800198e:	f004 fe9f 	bl	80066d0 <xTaskCreate>
 8001992:	4603      	mov	r3, r0
 8001994:	4a21      	ldr	r2, [pc, #132]	@ (8001a1c <main+0x114>)
 8001996:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8001998:	4b20      	ldr	r3, [pc, #128]	@ (8001a1c <main+0x114>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d00b      	beq.n	80019b8 <main+0xb0>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80019a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019a4:	f383 8811 	msr	BASEPRI, r3
 80019a8:	f3bf 8f6f 	isb	sy
 80019ac:	f3bf 8f4f 	dsb	sy
 80019b0:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80019b2:	bf00      	nop
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <main+0xac>

  status = xTaskCreate(hmc5883l_task, "magnetometer", 2048, NULL, 4, &hmc5883l_handler);
 80019b8:	4b19      	ldr	r3, [pc, #100]	@ (8001a20 <main+0x118>)
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	2304      	movs	r3, #4
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	2300      	movs	r3, #0
 80019c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019c6:	4917      	ldr	r1, [pc, #92]	@ (8001a24 <main+0x11c>)
 80019c8:	4817      	ldr	r0, [pc, #92]	@ (8001a28 <main+0x120>)
 80019ca:	f004 fe81 	bl	80066d0 <xTaskCreate>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4a12      	ldr	r2, [pc, #72]	@ (8001a1c <main+0x114>)
 80019d2:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 80019d4:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <main+0x114>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d00b      	beq.n	80019f4 <main+0xec>
        __asm volatile
 80019dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019e0:	f383 8811 	msr	BASEPRI, r3
 80019e4:	f3bf 8f6f 	isb	sy
 80019e8:	f3bf 8f4f 	dsb	sy
 80019ec:	603b      	str	r3, [r7, #0]
    }
 80019ee:	bf00      	nop
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <main+0xe8>

  vTaskStartScheduler();
 80019f4:	f004 ffe8 	bl	80069c8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <main+0xf0>
 80019fc:	200002d0 	.word	0x200002d0
 8001a00:	0800c3cc 	.word	0x0800c3cc
 8001a04:	20000380 	.word	0x20000380
 8001a08:	20000324 	.word	0x20000324
 8001a0c:	0800c3e4 	.word	0x0800c3e4
 8001a10:	2000036c 	.word	0x2000036c
 8001a14:	0800c404 	.word	0x0800c404
 8001a18:	08001cc1 	.word	0x08001cc1
 8001a1c:	20000374 	.word	0x20000374
 8001a20:	20000370 	.word	0x20000370
 8001a24:	0800c410 	.word	0x0800c410
 8001a28:	08001d1d 	.word	0x08001d1d

08001a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b094      	sub	sp, #80	@ 0x50
 8001a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a32:	f107 031c 	add.w	r3, r7, #28
 8001a36:	2234      	movs	r2, #52	@ 0x34
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f007 fadc 	bl	8008ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a40:	f107 0308 	add.w	r3, r7, #8
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	4b29      	ldr	r3, [pc, #164]	@ (8001afc <SystemClock_Config+0xd0>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a58:	4a28      	ldr	r2, [pc, #160]	@ (8001afc <SystemClock_Config+0xd0>)
 8001a5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a60:	4b26      	ldr	r3, [pc, #152]	@ (8001afc <SystemClock_Config+0xd0>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	4b23      	ldr	r3, [pc, #140]	@ (8001b00 <SystemClock_Config+0xd4>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001a78:	4a21      	ldr	r2, [pc, #132]	@ (8001b00 <SystemClock_Config+0xd4>)
 8001a7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	4b1f      	ldr	r3, [pc, #124]	@ (8001b00 <SystemClock_Config+0xd4>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a88:	603b      	str	r3, [r7, #0]
 8001a8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a90:	2301      	movs	r3, #1
 8001a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a94:	2310      	movs	r3, #16
 8001a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001aa0:	2308      	movs	r3, #8
 8001aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001aa4:	2360      	movs	r3, #96	@ 0x60
 8001aa6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001aac:	2302      	movs	r3, #2
 8001aae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab4:	f107 031c 	add.w	r3, r7, #28
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 ff1f 	bl	80048fc <HAL_RCC_OscConfig>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ac4:	f000 f98e 	bl	8001de4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac8:	230f      	movs	r3, #15
 8001aca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001acc:	2302      	movs	r3, #2
 8001ace:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001ad0:	2380      	movs	r3, #128	@ 0x80
 8001ad2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ad4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ade:	f107 0308 	add.w	r3, r7, #8
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f002 fb8d 	bl	8004204 <HAL_RCC_ClockConfig>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001af0:	f000 f978 	bl	8001de4 <Error_Handler>
  }
}
 8001af4:	bf00      	nop
 8001af6:	3750      	adds	r7, #80	@ 0x50
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40007000 	.word	0x40007000

08001b04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b08:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b0a:	4a13      	ldr	r2, [pc, #76]	@ (8001b58 <MX_I2C1_Init+0x54>)
 8001b0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b0e:	4b11      	ldr	r3, [pc, #68]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b10:	4a12      	ldr	r2, [pc, #72]	@ (8001b5c <MX_I2C1_Init+0x58>)
 8001b12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b14:	4b0f      	ldr	r3, [pc, #60]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b20:	4b0c      	ldr	r3, [pc, #48]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b28:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b2e:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b34:	4b07      	ldr	r3, [pc, #28]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b3a:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b40:	4804      	ldr	r0, [pc, #16]	@ (8001b54 <MX_I2C1_Init+0x50>)
 8001b42:	f000 febb 	bl	80028bc <HAL_I2C_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b4c:	f000 f94a 	bl	8001de4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	2000027c 	.word	0x2000027c
 8001b58:	40005400 	.word	0x40005400
 8001b5c:	000186a0 	.word	0x000186a0

08001b60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b64:	4b12      	ldr	r3, [pc, #72]	@ (8001bb0 <MX_I2C2_Init+0x50>)
 8001b66:	4a13      	ldr	r2, [pc, #76]	@ (8001bb4 <MX_I2C2_Init+0x54>)
 8001b68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001b6a:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <MX_I2C2_Init+0x50>)
 8001b6c:	4a12      	ldr	r2, [pc, #72]	@ (8001bb8 <MX_I2C2_Init+0x58>)
 8001b6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b70:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb0 <MX_I2C2_Init+0x50>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b76:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb0 <MX_I2C2_Init+0x50>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb0 <MX_I2C2_Init+0x50>)
 8001b7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b82:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b84:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb0 <MX_I2C2_Init+0x50>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b8a:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <MX_I2C2_Init+0x50>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b90:	4b07      	ldr	r3, [pc, #28]	@ (8001bb0 <MX_I2C2_Init+0x50>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b96:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <MX_I2C2_Init+0x50>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b9c:	4804      	ldr	r0, [pc, #16]	@ (8001bb0 <MX_I2C2_Init+0x50>)
 8001b9e:	f000 fe8d 	bl	80028bc <HAL_I2C_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ba8:	f000 f91c 	bl	8001de4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	200002d0 	.word	0x200002d0
 8001bb4:	40005800 	.word	0x40005800
 8001bb8:	00061a80 	.word	0x00061a80

08001bbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bc2:	4a12      	ldr	r2, [pc, #72]	@ (8001c0c <MX_USART2_UART_Init+0x50>)
 8001bc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bc6:	4b10      	ldr	r3, [pc, #64]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bda:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001be0:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001be2:	220c      	movs	r2, #12
 8001be4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be6:	4b08      	ldr	r3, [pc, #32]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bec:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bf2:	4805      	ldr	r0, [pc, #20]	@ (8001c08 <MX_USART2_UART_Init+0x4c>)
 8001bf4:	f003 fbbc 	bl	8005370 <HAL_UART_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bfe:	f000 f8f1 	bl	8001de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000324 	.word	0x20000324
 8001c0c:	40004400 	.word	0x40004400

08001c10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	@ 0x28
 8001c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	60da      	str	r2, [r3, #12]
 8001c24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	4b23      	ldr	r3, [pc, #140]	@ (8001cb8 <MX_GPIO_Init+0xa8>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	4a22      	ldr	r2, [pc, #136]	@ (8001cb8 <MX_GPIO_Init+0xa8>)
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c36:	4b20      	ldr	r3, [pc, #128]	@ (8001cb8 <MX_GPIO_Init+0xa8>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb8 <MX_GPIO_Init+0xa8>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8001cb8 <MX_GPIO_Init+0xa8>)
 8001c4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c52:	4b19      	ldr	r3, [pc, #100]	@ (8001cb8 <MX_GPIO_Init+0xa8>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	4b15      	ldr	r3, [pc, #84]	@ (8001cb8 <MX_GPIO_Init+0xa8>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	4a14      	ldr	r2, [pc, #80]	@ (8001cb8 <MX_GPIO_Init+0xa8>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6e:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <MX_GPIO_Init+0xa8>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb8 <MX_GPIO_Init+0xa8>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb8 <MX_GPIO_Init+0xa8>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <MX_GPIO_Init+0xa8>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c96:	2320      	movs	r3, #32
 8001c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4804      	ldr	r0, [pc, #16]	@ (8001cbc <MX_GPIO_Init+0xac>)
 8001caa:	f000 fc5b 	bl	8002564 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cae:	bf00      	nop
 8001cb0:	3728      	adds	r7, #40	@ 0x28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40020400 	.word	0x40020400

08001cc0 <mpu6050_task>:

/* USER CODE BEGIN 4 */
static void mpu6050_task(void* parameters)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(MPU6050_DataReady() == 1)
 8001cc8:	f7ff fe04 	bl	80018d4 <MPU6050_DataReady>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d110      	bne.n	8001cf4 <mpu6050_task+0x34>
		{
			MPU6050_ProcessData(&MPU6050);
 8001cd2:	480e      	ldr	r0, [pc, #56]	@ (8001d0c <mpu6050_task+0x4c>)
 8001cd4:	f7ff fe0a 	bl	80018ec <MPU6050_ProcessData>
			CalculateCompliFilter(&Angle, &MPU6050);
 8001cd8:	490c      	ldr	r1, [pc, #48]	@ (8001d0c <mpu6050_task+0x4c>)
 8001cda:	480d      	ldr	r0, [pc, #52]	@ (8001d10 <mpu6050_task+0x50>)
 8001cdc:	f7ff fa1e 	bl	800111c <CalculateCompliFilter>
			printf("%f\r\n",Angle.ComFilt_yaw);
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <mpu6050_task+0x50>)
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe fc4f 	bl	8000588 <__aeabi_f2d>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4809      	ldr	r0, [pc, #36]	@ (8001d14 <mpu6050_task+0x54>)
 8001cf0:	f007 f81a 	bl	8008d28 <iprintf>
		}
		taskYIELD();
 8001cf4:	4b08      	ldr	r3, [pc, #32]	@ (8001d18 <mpu6050_task+0x58>)
 8001cf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	f3bf 8f4f 	dsb	sy
 8001d00:	f3bf 8f6f 	isb	sy
		vTaskDelay(10);
 8001d04:	200a      	movs	r0, #10
 8001d06:	f004 fe29 	bl	800695c <vTaskDelay>
		if(MPU6050_DataReady() == 1)
 8001d0a:	e7dd      	b.n	8001cc8 <mpu6050_task+0x8>
 8001d0c:	20000248 	.word	0x20000248
 8001d10:	20000214 	.word	0x20000214
 8001d14:	0800c420 	.word	0x0800c420
 8001d18:	e000ed04 	.word	0xe000ed04

08001d1c <hmc5883l_task>:
	}
}

static void hmc5883l_task(void* parameters)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af02      	add	r7, sp, #8
 8001d22:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HMC5883L_getHeading(&mx, &my, &mz);
 8001d24:	4a16      	ldr	r2, [pc, #88]	@ (8001d80 <hmc5883l_task+0x64>)
 8001d26:	4917      	ldr	r1, [pc, #92]	@ (8001d84 <hmc5883l_task+0x68>)
 8001d28:	4817      	ldr	r0, [pc, #92]	@ (8001d88 <hmc5883l_task+0x6c>)
 8001d2a:	f7ff fac9 	bl	80012c0 <HMC5883L_getHeading>
		sprintf(buffer, "Mag X: %d\tY: %d\tZ: %d\r\n", mx, my, mz);
 8001d2e:	4b16      	ldr	r3, [pc, #88]	@ (8001d88 <hmc5883l_task+0x6c>)
 8001d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b13      	ldr	r3, [pc, #76]	@ (8001d84 <hmc5883l_task+0x68>)
 8001d38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4b10      	ldr	r3, [pc, #64]	@ (8001d80 <hmc5883l_task+0x64>)
 8001d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	460b      	mov	r3, r1
 8001d48:	4910      	ldr	r1, [pc, #64]	@ (8001d8c <hmc5883l_task+0x70>)
 8001d4a:	4811      	ldr	r0, [pc, #68]	@ (8001d90 <hmc5883l_task+0x74>)
 8001d4c:	f007 f85c 	bl	8008e08 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001d50:	480f      	ldr	r0, [pc, #60]	@ (8001d90 <hmc5883l_task+0x74>)
 8001d52:	f7fe faad 	bl	80002b0 <strlen>
 8001d56:	4603      	mov	r3, r0
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5e:	490c      	ldr	r1, [pc, #48]	@ (8001d90 <hmc5883l_task+0x74>)
 8001d60:	480c      	ldr	r0, [pc, #48]	@ (8001d94 <hmc5883l_task+0x78>)
 8001d62:	f003 fb55 	bl	8005410 <HAL_UART_Transmit>
		taskYIELD();
 8001d66:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <hmc5883l_task+0x7c>)
 8001d68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	f3bf 8f4f 	dsb	sy
 8001d72:	f3bf 8f6f 	isb	sy
		vTaskDelay(10);
 8001d76:	200a      	movs	r0, #10
 8001d78:	f004 fdf0 	bl	800695c <vTaskDelay>
		HMC5883L_getHeading(&mx, &my, &mz);
 8001d7c:	bf00      	nop
 8001d7e:	e7d1      	b.n	8001d24 <hmc5883l_task+0x8>
 8001d80:	2000037c 	.word	0x2000037c
 8001d84:	2000037a 	.word	0x2000037a
 8001d88:	20000378 	.word	0x20000378
 8001d8c:	0800c428 	.word	0x0800c428
 8001d90:	20000380 	.word	0x20000380
 8001d94:	20000324 	.word	0x20000324
 8001d98:	e000ed04 	.word	0xe000ed04

08001d9c <__io_putchar>:
	}
}

#define PRINTF   int __io_putchar(int ch)
PRINTF
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001da4:	1d39      	adds	r1, r7, #4
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295
 8001daa:	2201      	movs	r2, #1
 8001dac:	4803      	ldr	r0, [pc, #12]	@ (8001dbc <__io_putchar+0x20>)
 8001dae:	f003 fb2f 	bl	8005410 <HAL_UART_Transmit>
	return ch;
 8001db2:	687b      	ldr	r3, [r7, #4]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000324 	.word	0x20000324

08001dc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a04      	ldr	r2, [pc, #16]	@ (8001de0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d101      	bne.n	8001dd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001dd2:	f000 faa1 	bl	8002318 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40010000 	.word	0x40010000

08001de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de8:	b672      	cpsid	i
}
 8001dea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <Error_Handler+0x8>

08001df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	4b10      	ldr	r3, [pc, #64]	@ (8001e3c <HAL_MspInit+0x4c>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	4a0f      	ldr	r2, [pc, #60]	@ (8001e3c <HAL_MspInit+0x4c>)
 8001e00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e06:	4b0d      	ldr	r3, [pc, #52]	@ (8001e3c <HAL_MspInit+0x4c>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	603b      	str	r3, [r7, #0]
 8001e16:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <HAL_MspInit+0x4c>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	4a08      	ldr	r2, [pc, #32]	@ (8001e3c <HAL_MspInit+0x4c>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_MspInit+0x4c>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800

08001e40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08c      	sub	sp, #48	@ 0x30
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a42      	ldr	r2, [pc, #264]	@ (8001f68 <HAL_I2C_MspInit+0x128>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d12c      	bne.n	8001ebc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	4b41      	ldr	r3, [pc, #260]	@ (8001f6c <HAL_I2C_MspInit+0x12c>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	4a40      	ldr	r2, [pc, #256]	@ (8001f6c <HAL_I2C_MspInit+0x12c>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e72:	4b3e      	ldr	r3, [pc, #248]	@ (8001f6c <HAL_I2C_MspInit+0x12c>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e7e:	23c0      	movs	r3, #192	@ 0xc0
 8001e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e82:	2312      	movs	r3, #18
 8001e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e8e:	2304      	movs	r3, #4
 8001e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e92:	f107 031c 	add.w	r3, r7, #28
 8001e96:	4619      	mov	r1, r3
 8001e98:	4835      	ldr	r0, [pc, #212]	@ (8001f70 <HAL_I2C_MspInit+0x130>)
 8001e9a:	f000 fb63 	bl	8002564 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	4b32      	ldr	r3, [pc, #200]	@ (8001f6c <HAL_I2C_MspInit+0x12c>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	4a31      	ldr	r2, [pc, #196]	@ (8001f6c <HAL_I2C_MspInit+0x12c>)
 8001ea8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eae:	4b2f      	ldr	r3, [pc, #188]	@ (8001f6c <HAL_I2C_MspInit+0x12c>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001eba:	e050      	b.n	8001f5e <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a2c      	ldr	r2, [pc, #176]	@ (8001f74 <HAL_I2C_MspInit+0x134>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d14b      	bne.n	8001f5e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	4b28      	ldr	r3, [pc, #160]	@ (8001f6c <HAL_I2C_MspInit+0x12c>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	4a27      	ldr	r2, [pc, #156]	@ (8001f6c <HAL_I2C_MspInit+0x12c>)
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed6:	4b25      	ldr	r3, [pc, #148]	@ (8001f6c <HAL_I2C_MspInit+0x12c>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b21      	ldr	r3, [pc, #132]	@ (8001f6c <HAL_I2C_MspInit+0x12c>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	4a20      	ldr	r2, [pc, #128]	@ (8001f6c <HAL_I2C_MspInit+0x12c>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f6c <HAL_I2C_MspInit+0x12c>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001efe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f04:	2312      	movs	r3, #18
 8001f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f10:	2304      	movs	r3, #4
 8001f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f14:	f107 031c 	add.w	r3, r7, #28
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4815      	ldr	r0, [pc, #84]	@ (8001f70 <HAL_I2C_MspInit+0x130>)
 8001f1c:	f000 fb22 	bl	8002564 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f26:	2312      	movs	r3, #18
 8001f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f32:	2304      	movs	r3, #4
 8001f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f36:	f107 031c 	add.w	r3, r7, #28
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	480e      	ldr	r0, [pc, #56]	@ (8001f78 <HAL_I2C_MspInit+0x138>)
 8001f3e:	f000 fb11 	bl	8002564 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <HAL_I2C_MspInit+0x12c>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	4a08      	ldr	r2, [pc, #32]	@ (8001f6c <HAL_I2C_MspInit+0x12c>)
 8001f4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f52:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <HAL_I2C_MspInit+0x12c>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
}
 8001f5e:	bf00      	nop
 8001f60:	3730      	adds	r7, #48	@ 0x30
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40005400 	.word	0x40005400
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40020400 	.word	0x40020400
 8001f74:	40005800 	.word	0x40005800
 8001f78:	40020800 	.word	0x40020800

08001f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	@ 0x28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a19      	ldr	r2, [pc, #100]	@ (8002000 <HAL_UART_MspInit+0x84>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d12b      	bne.n	8001ff6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	4b18      	ldr	r3, [pc, #96]	@ (8002004 <HAL_UART_MspInit+0x88>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	4a17      	ldr	r2, [pc, #92]	@ (8002004 <HAL_UART_MspInit+0x88>)
 8001fa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fae:	4b15      	ldr	r3, [pc, #84]	@ (8002004 <HAL_UART_MspInit+0x88>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	4b11      	ldr	r3, [pc, #68]	@ (8002004 <HAL_UART_MspInit+0x88>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	4a10      	ldr	r2, [pc, #64]	@ (8002004 <HAL_UART_MspInit+0x88>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fca:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <HAL_UART_MspInit+0x88>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fd6:	230c      	movs	r3, #12
 8001fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fe6:	2307      	movs	r3, #7
 8001fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4805      	ldr	r0, [pc, #20]	@ (8002008 <HAL_UART_MspInit+0x8c>)
 8001ff2:	f000 fab7 	bl	8002564 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001ff6:	bf00      	nop
 8001ff8:	3728      	adds	r7, #40	@ 0x28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40004400 	.word	0x40004400
 8002004:	40023800 	.word	0x40023800
 8002008:	40020000 	.word	0x40020000

0800200c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08c      	sub	sp, #48	@ 0x30
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	4b2e      	ldr	r3, [pc, #184]	@ (80020dc <HAL_InitTick+0xd0>)
 8002022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002024:	4a2d      	ldr	r2, [pc, #180]	@ (80020dc <HAL_InitTick+0xd0>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6453      	str	r3, [r2, #68]	@ 0x44
 800202c:	4b2b      	ldr	r3, [pc, #172]	@ (80020dc <HAL_InitTick+0xd0>)
 800202e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002038:	f107 020c 	add.w	r2, r7, #12
 800203c:	f107 0310 	add.w	r3, r7, #16
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f002 f9f8 	bl	8004438 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002048:	f002 f9e2 	bl	8004410 <HAL_RCC_GetPCLK2Freq>
 800204c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800204e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002050:	4a23      	ldr	r2, [pc, #140]	@ (80020e0 <HAL_InitTick+0xd4>)
 8002052:	fba2 2303 	umull	r2, r3, r2, r3
 8002056:	0c9b      	lsrs	r3, r3, #18
 8002058:	3b01      	subs	r3, #1
 800205a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800205c:	4b21      	ldr	r3, [pc, #132]	@ (80020e4 <HAL_InitTick+0xd8>)
 800205e:	4a22      	ldr	r2, [pc, #136]	@ (80020e8 <HAL_InitTick+0xdc>)
 8002060:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002062:	4b20      	ldr	r3, [pc, #128]	@ (80020e4 <HAL_InitTick+0xd8>)
 8002064:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002068:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800206a:	4a1e      	ldr	r2, [pc, #120]	@ (80020e4 <HAL_InitTick+0xd8>)
 800206c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002070:	4b1c      	ldr	r3, [pc, #112]	@ (80020e4 <HAL_InitTick+0xd8>)
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002076:	4b1b      	ldr	r3, [pc, #108]	@ (80020e4 <HAL_InitTick+0xd8>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800207c:	4b19      	ldr	r3, [pc, #100]	@ (80020e4 <HAL_InitTick+0xd8>)
 800207e:	2200      	movs	r2, #0
 8002080:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002082:	4818      	ldr	r0, [pc, #96]	@ (80020e4 <HAL_InitTick+0xd8>)
 8002084:	f002 fed8 	bl	8004e38 <HAL_TIM_Base_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800208e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002092:	2b00      	cmp	r3, #0
 8002094:	d11b      	bne.n	80020ce <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002096:	4813      	ldr	r0, [pc, #76]	@ (80020e4 <HAL_InitTick+0xd8>)
 8002098:	f002 ff28 	bl	8004eec <HAL_TIM_Base_Start_IT>
 800209c:	4603      	mov	r3, r0
 800209e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80020a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d111      	bne.n	80020ce <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020aa:	2019      	movs	r0, #25
 80020ac:	f000 fa4c 	bl	8002548 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b0f      	cmp	r3, #15
 80020b4:	d808      	bhi.n	80020c8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80020b6:	2200      	movs	r2, #0
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	2019      	movs	r0, #25
 80020bc:	f000 fa28 	bl	8002510 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020c0:	4a0a      	ldr	r2, [pc, #40]	@ (80020ec <HAL_InitTick+0xe0>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e002      	b.n	80020ce <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80020ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3730      	adds	r7, #48	@ 0x30
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800
 80020e0:	431bde83 	.word	0x431bde83
 80020e4:	200003e4 	.word	0x200003e4
 80020e8:	40010000 	.word	0x40010000
 80020ec:	2000000c 	.word	0x2000000c

080020f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020f4:	bf00      	nop
 80020f6:	e7fd      	b.n	80020f4 <NMI_Handler+0x4>

080020f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020fc:	bf00      	nop
 80020fe:	e7fd      	b.n	80020fc <HardFault_Handler+0x4>

08002100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002104:	bf00      	nop
 8002106:	e7fd      	b.n	8002104 <MemManage_Handler+0x4>

08002108 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800210c:	bf00      	nop
 800210e:	e7fd      	b.n	800210c <BusFault_Handler+0x4>

08002110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002114:	bf00      	nop
 8002116:	e7fd      	b.n	8002114 <UsageFault_Handler+0x4>

08002118 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800212c:	4802      	ldr	r0, [pc, #8]	@ (8002138 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800212e:	f002 ff4d 	bl	8004fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	200003e4 	.word	0x200003e4

0800213c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return 1;
 8002140:	2301      	movs	r3, #1
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <_kill>:

int _kill(int pid, int sig)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002156:	f006 ffa1 	bl	800909c <__errno>
 800215a:	4603      	mov	r3, r0
 800215c:	2216      	movs	r2, #22
 800215e:	601a      	str	r2, [r3, #0]
  return -1;
 8002160:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <_exit>:

void _exit (int status)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002174:	f04f 31ff 	mov.w	r1, #4294967295
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ffe7 	bl	800214c <_kill>
  while (1) {}    /* Make sure we hang here */
 800217e:	bf00      	nop
 8002180:	e7fd      	b.n	800217e <_exit+0x12>

08002182 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b086      	sub	sp, #24
 8002186:	af00      	add	r7, sp, #0
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	e00a      	b.n	80021aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002194:	f3af 8000 	nop.w
 8002198:	4601      	mov	r1, r0
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	60ba      	str	r2, [r7, #8]
 80021a0:	b2ca      	uxtb	r2, r1
 80021a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	3301      	adds	r3, #1
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	dbf0      	blt.n	8002194 <_read+0x12>
  }

  return len;
 80021b2:	687b      	ldr	r3, [r7, #4]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	e009      	b.n	80021e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	60ba      	str	r2, [r7, #8]
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fde0 	bl	8001d9c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	3301      	adds	r3, #1
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	dbf1      	blt.n	80021ce <_write+0x12>
  }
  return len;
 80021ea:	687b      	ldr	r3, [r7, #4]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <_close>:

int _close(int file)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800221c:	605a      	str	r2, [r3, #4]
  return 0;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <_isatty>:

int _isatty(int file)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002234:	2301      	movs	r3, #1
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002242:	b480      	push	{r7}
 8002244:	b085      	sub	sp, #20
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002260:	4b06      	ldr	r3, [pc, #24]	@ (800227c <SystemInit+0x20>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002266:	4a05      	ldr	r2, [pc, #20]	@ (800227c <SystemInit+0x20>)
 8002268:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800226c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002280:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002284:	f7ff ffea 	bl	800225c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002288:	480c      	ldr	r0, [pc, #48]	@ (80022bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800228a:	490d      	ldr	r1, [pc, #52]	@ (80022c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800228c:	4a0d      	ldr	r2, [pc, #52]	@ (80022c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800228e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002290:	e002      	b.n	8002298 <LoopCopyDataInit>

08002292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002296:	3304      	adds	r3, #4

08002298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800229a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800229c:	d3f9      	bcc.n	8002292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800229e:	4a0a      	ldr	r2, [pc, #40]	@ (80022c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022a0:	4c0a      	ldr	r4, [pc, #40]	@ (80022cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80022a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a4:	e001      	b.n	80022aa <LoopFillZerobss>

080022a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a8:	3204      	adds	r2, #4

080022aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022ac:	d3fb      	bcc.n	80022a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80022ae:	f006 fefb 	bl	80090a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022b2:	f7ff fb29 	bl	8001908 <main>
  bx  lr    
 80022b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022c0:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80022c4:	0800c860 	.word	0x0800c860
  ldr r2, =_sbss
 80022c8:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80022cc:	20013328 	.word	0x20013328

080022d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022d0:	e7fe      	b.n	80022d0 <ADC_IRQHandler>
	...

080022d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002314 <HAL_Init+0x40>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002314 <HAL_Init+0x40>)
 80022de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <HAL_Init+0x40>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002314 <HAL_Init+0x40>)
 80022ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022f0:	4b08      	ldr	r3, [pc, #32]	@ (8002314 <HAL_Init+0x40>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a07      	ldr	r2, [pc, #28]	@ (8002314 <HAL_Init+0x40>)
 80022f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022fc:	2003      	movs	r0, #3
 80022fe:	f000 f8fc 	bl	80024fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002302:	200f      	movs	r0, #15
 8002304:	f7ff fe82 	bl	800200c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002308:	f7ff fd72 	bl	8001df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40023c00 	.word	0x40023c00

08002318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800231c:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <HAL_IncTick+0x20>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	4b06      	ldr	r3, [pc, #24]	@ (800233c <HAL_IncTick+0x24>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4413      	add	r3, r2
 8002328:	4a04      	ldr	r2, [pc, #16]	@ (800233c <HAL_IncTick+0x24>)
 800232a:	6013      	str	r3, [r2, #0]
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20000010 	.word	0x20000010
 800233c:	2000042c 	.word	0x2000042c

08002340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return uwTick;
 8002344:	4b03      	ldr	r3, [pc, #12]	@ (8002354 <HAL_GetTick+0x14>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	2000042c 	.word	0x2000042c

08002358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002360:	f7ff ffee 	bl	8002340 <HAL_GetTick>
 8002364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002370:	d005      	beq.n	800237e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002372:	4b0a      	ldr	r3, [pc, #40]	@ (800239c <HAL_Delay+0x44>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4413      	add	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800237e:	bf00      	nop
 8002380:	f7ff ffde 	bl	8002340 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	429a      	cmp	r2, r3
 800238e:	d8f7      	bhi.n	8002380 <HAL_Delay+0x28>
  {
  }
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000010 	.word	0x20000010

080023a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b0:	4b0c      	ldr	r3, [pc, #48]	@ (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023bc:	4013      	ands	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d2:	4a04      	ldr	r2, [pc, #16]	@ (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	60d3      	str	r3, [r2, #12]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ec:	4b04      	ldr	r3, [pc, #16]	@ (8002400 <__NVIC_GetPriorityGrouping+0x18>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	f003 0307 	and.w	r3, r3, #7
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	2b00      	cmp	r3, #0
 8002414:	db0b      	blt.n	800242e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	f003 021f 	and.w	r2, r3, #31
 800241c:	4907      	ldr	r1, [pc, #28]	@ (800243c <__NVIC_EnableIRQ+0x38>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	2001      	movs	r0, #1
 8002426:	fa00 f202 	lsl.w	r2, r0, r2
 800242a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000e100 	.word	0xe000e100

08002440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	6039      	str	r1, [r7, #0]
 800244a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002450:	2b00      	cmp	r3, #0
 8002452:	db0a      	blt.n	800246a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	b2da      	uxtb	r2, r3
 8002458:	490c      	ldr	r1, [pc, #48]	@ (800248c <__NVIC_SetPriority+0x4c>)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	0112      	lsls	r2, r2, #4
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	440b      	add	r3, r1
 8002464:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002468:	e00a      	b.n	8002480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4908      	ldr	r1, [pc, #32]	@ (8002490 <__NVIC_SetPriority+0x50>)
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	3b04      	subs	r3, #4
 8002478:	0112      	lsls	r2, r2, #4
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	440b      	add	r3, r1
 800247e:	761a      	strb	r2, [r3, #24]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000e100 	.word	0xe000e100
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	@ 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f1c3 0307 	rsb	r3, r3, #7
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	bf28      	it	cs
 80024b2:	2304      	movcs	r3, #4
 80024b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3304      	adds	r3, #4
 80024ba:	2b06      	cmp	r3, #6
 80024bc:	d902      	bls.n	80024c4 <NVIC_EncodePriority+0x30>
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3b03      	subs	r3, #3
 80024c2:	e000      	b.n	80024c6 <NVIC_EncodePriority+0x32>
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	f04f 32ff 	mov.w	r2, #4294967295
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43da      	mvns	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	401a      	ands	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024dc:	f04f 31ff 	mov.w	r1, #4294967295
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa01 f303 	lsl.w	r3, r1, r3
 80024e6:	43d9      	mvns	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ec:	4313      	orrs	r3, r2
         );
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3724      	adds	r7, #36	@ 0x24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ff4c 	bl	80023a0 <__NVIC_SetPriorityGrouping>
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002522:	f7ff ff61 	bl	80023e8 <__NVIC_GetPriorityGrouping>
 8002526:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	68b9      	ldr	r1, [r7, #8]
 800252c:	6978      	ldr	r0, [r7, #20]
 800252e:	f7ff ffb1 	bl	8002494 <NVIC_EncodePriority>
 8002532:	4602      	mov	r2, r0
 8002534:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002538:	4611      	mov	r1, r2
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff ff80 	bl	8002440 <__NVIC_SetPriority>
}
 8002540:	bf00      	nop
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ff54 	bl	8002404 <__NVIC_EnableIRQ>
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002564:	b480      	push	{r7}
 8002566:	b089      	sub	sp, #36	@ 0x24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	e165      	b.n	800284c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002580:	2201      	movs	r2, #1
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	429a      	cmp	r2, r3
 800259a:	f040 8154 	bne.w	8002846 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d005      	beq.n	80025b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d130      	bne.n	8002618 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	2203      	movs	r2, #3
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025ec:	2201      	movs	r2, #1
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 0201 	and.w	r2, r3, #1
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	2b03      	cmp	r3, #3
 8002622:	d017      	beq.n	8002654 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d123      	bne.n	80026a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	08da      	lsrs	r2, r3, #3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3208      	adds	r2, #8
 8002668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	220f      	movs	r2, #15
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	08da      	lsrs	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3208      	adds	r2, #8
 80026a2:	69b9      	ldr	r1, [r7, #24]
 80026a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	2203      	movs	r2, #3
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 0203 	and.w	r2, r3, #3
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80ae 	beq.w	8002846 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002864 <HAL_GPIO_Init+0x300>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f2:	4a5c      	ldr	r2, [pc, #368]	@ (8002864 <HAL_GPIO_Init+0x300>)
 80026f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026fa:	4b5a      	ldr	r3, [pc, #360]	@ (8002864 <HAL_GPIO_Init+0x300>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002706:	4a58      	ldr	r2, [pc, #352]	@ (8002868 <HAL_GPIO_Init+0x304>)
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	089b      	lsrs	r3, r3, #2
 800270c:	3302      	adds	r3, #2
 800270e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	220f      	movs	r2, #15
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4f      	ldr	r2, [pc, #316]	@ (800286c <HAL_GPIO_Init+0x308>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d025      	beq.n	800277e <HAL_GPIO_Init+0x21a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4e      	ldr	r2, [pc, #312]	@ (8002870 <HAL_GPIO_Init+0x30c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d01f      	beq.n	800277a <HAL_GPIO_Init+0x216>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4d      	ldr	r2, [pc, #308]	@ (8002874 <HAL_GPIO_Init+0x310>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d019      	beq.n	8002776 <HAL_GPIO_Init+0x212>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4c      	ldr	r2, [pc, #304]	@ (8002878 <HAL_GPIO_Init+0x314>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d013      	beq.n	8002772 <HAL_GPIO_Init+0x20e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4b      	ldr	r2, [pc, #300]	@ (800287c <HAL_GPIO_Init+0x318>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00d      	beq.n	800276e <HAL_GPIO_Init+0x20a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4a      	ldr	r2, [pc, #296]	@ (8002880 <HAL_GPIO_Init+0x31c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d007      	beq.n	800276a <HAL_GPIO_Init+0x206>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a49      	ldr	r2, [pc, #292]	@ (8002884 <HAL_GPIO_Init+0x320>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d101      	bne.n	8002766 <HAL_GPIO_Init+0x202>
 8002762:	2306      	movs	r3, #6
 8002764:	e00c      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 8002766:	2307      	movs	r3, #7
 8002768:	e00a      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 800276a:	2305      	movs	r3, #5
 800276c:	e008      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 800276e:	2304      	movs	r3, #4
 8002770:	e006      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 8002772:	2303      	movs	r3, #3
 8002774:	e004      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 8002776:	2302      	movs	r3, #2
 8002778:	e002      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <HAL_GPIO_Init+0x21c>
 800277e:	2300      	movs	r3, #0
 8002780:	69fa      	ldr	r2, [r7, #28]
 8002782:	f002 0203 	and.w	r2, r2, #3
 8002786:	0092      	lsls	r2, r2, #2
 8002788:	4093      	lsls	r3, r2
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002790:	4935      	ldr	r1, [pc, #212]	@ (8002868 <HAL_GPIO_Init+0x304>)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	089b      	lsrs	r3, r3, #2
 8002796:	3302      	adds	r3, #2
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800279e:	4b3a      	ldr	r3, [pc, #232]	@ (8002888 <HAL_GPIO_Init+0x324>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027c2:	4a31      	ldr	r2, [pc, #196]	@ (8002888 <HAL_GPIO_Init+0x324>)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002888 <HAL_GPIO_Init+0x324>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027ec:	4a26      	ldr	r2, [pc, #152]	@ (8002888 <HAL_GPIO_Init+0x324>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027f2:	4b25      	ldr	r3, [pc, #148]	@ (8002888 <HAL_GPIO_Init+0x324>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002816:	4a1c      	ldr	r2, [pc, #112]	@ (8002888 <HAL_GPIO_Init+0x324>)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800281c:	4b1a      	ldr	r3, [pc, #104]	@ (8002888 <HAL_GPIO_Init+0x324>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002840:	4a11      	ldr	r2, [pc, #68]	@ (8002888 <HAL_GPIO_Init+0x324>)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3301      	adds	r3, #1
 800284a:	61fb      	str	r3, [r7, #28]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	2b0f      	cmp	r3, #15
 8002850:	f67f ae96 	bls.w	8002580 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	3724      	adds	r7, #36	@ 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	40013800 	.word	0x40013800
 800286c:	40020000 	.word	0x40020000
 8002870:	40020400 	.word	0x40020400
 8002874:	40020800 	.word	0x40020800
 8002878:	40020c00 	.word	0x40020c00
 800287c:	40021000 	.word	0x40021000
 8002880:	40021400 	.word	0x40021400
 8002884:	40021800 	.word	0x40021800
 8002888:	40013c00 	.word	0x40013c00

0800288c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	887b      	ldrh	r3, [r7, #2]
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
 80028a8:	e001      	b.n	80028ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028aa:	2300      	movs	r3, #0
 80028ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e12b      	b.n	8002b26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff faac 	bl	8001e40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2224      	movs	r2, #36	@ 0x24
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0201 	bic.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800290e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800291e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002920:	f001 fd62 	bl	80043e8 <HAL_RCC_GetPCLK1Freq>
 8002924:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4a81      	ldr	r2, [pc, #516]	@ (8002b30 <HAL_I2C_Init+0x274>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d807      	bhi.n	8002940 <HAL_I2C_Init+0x84>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4a80      	ldr	r2, [pc, #512]	@ (8002b34 <HAL_I2C_Init+0x278>)
 8002934:	4293      	cmp	r3, r2
 8002936:	bf94      	ite	ls
 8002938:	2301      	movls	r3, #1
 800293a:	2300      	movhi	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	e006      	b.n	800294e <HAL_I2C_Init+0x92>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4a7d      	ldr	r2, [pc, #500]	@ (8002b38 <HAL_I2C_Init+0x27c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	bf94      	ite	ls
 8002948:	2301      	movls	r3, #1
 800294a:	2300      	movhi	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e0e7      	b.n	8002b26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4a78      	ldr	r2, [pc, #480]	@ (8002b3c <HAL_I2C_Init+0x280>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	0c9b      	lsrs	r3, r3, #18
 8002960:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	4a6a      	ldr	r2, [pc, #424]	@ (8002b30 <HAL_I2C_Init+0x274>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d802      	bhi.n	8002990 <HAL_I2C_Init+0xd4>
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	3301      	adds	r3, #1
 800298e:	e009      	b.n	80029a4 <HAL_I2C_Init+0xe8>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002996:	fb02 f303 	mul.w	r3, r2, r3
 800299a:	4a69      	ldr	r2, [pc, #420]	@ (8002b40 <HAL_I2C_Init+0x284>)
 800299c:	fba2 2303 	umull	r2, r3, r2, r3
 80029a0:	099b      	lsrs	r3, r3, #6
 80029a2:	3301      	adds	r3, #1
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	430b      	orrs	r3, r1
 80029aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80029b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	495c      	ldr	r1, [pc, #368]	@ (8002b30 <HAL_I2C_Init+0x274>)
 80029c0:	428b      	cmp	r3, r1
 80029c2:	d819      	bhi.n	80029f8 <HAL_I2C_Init+0x13c>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	1e59      	subs	r1, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80029d2:	1c59      	adds	r1, r3, #1
 80029d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80029d8:	400b      	ands	r3, r1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_I2C_Init+0x138>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	1e59      	subs	r1, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ec:	3301      	adds	r3, #1
 80029ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f2:	e051      	b.n	8002a98 <HAL_I2C_Init+0x1dc>
 80029f4:	2304      	movs	r3, #4
 80029f6:	e04f      	b.n	8002a98 <HAL_I2C_Init+0x1dc>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d111      	bne.n	8002a24 <HAL_I2C_Init+0x168>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1e58      	subs	r0, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6859      	ldr	r1, [r3, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	440b      	add	r3, r1
 8002a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a12:	3301      	adds	r3, #1
 8002a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf0c      	ite	eq
 8002a1c:	2301      	moveq	r3, #1
 8002a1e:	2300      	movne	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	e012      	b.n	8002a4a <HAL_I2C_Init+0x18e>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	1e58      	subs	r0, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6859      	ldr	r1, [r3, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	0099      	lsls	r1, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bf0c      	ite	eq
 8002a44:	2301      	moveq	r3, #1
 8002a46:	2300      	movne	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_I2C_Init+0x196>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e022      	b.n	8002a98 <HAL_I2C_Init+0x1dc>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10e      	bne.n	8002a78 <HAL_I2C_Init+0x1bc>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1e58      	subs	r0, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6859      	ldr	r1, [r3, #4]
 8002a62:	460b      	mov	r3, r1
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	440b      	add	r3, r1
 8002a68:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a76:	e00f      	b.n	8002a98 <HAL_I2C_Init+0x1dc>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1e58      	subs	r0, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6859      	ldr	r1, [r3, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	0099      	lsls	r1, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	6809      	ldr	r1, [r1, #0]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69da      	ldr	r2, [r3, #28]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ac6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6911      	ldr	r1, [r2, #16]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68d2      	ldr	r2, [r2, #12]
 8002ad2:	4311      	orrs	r1, r2
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	430b      	orrs	r3, r1
 8002ada:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2220      	movs	r2, #32
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	000186a0 	.word	0x000186a0
 8002b34:	001e847f 	.word	0x001e847f
 8002b38:	003d08ff 	.word	0x003d08ff
 8002b3c:	431bde83 	.word	0x431bde83
 8002b40:	10624dd3 	.word	0x10624dd3

08002b44 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af02      	add	r7, sp, #8
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	460b      	mov	r3, r1
 8002b52:	817b      	strh	r3, [r7, #10]
 8002b54:	4613      	mov	r3, r2
 8002b56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b58:	f7ff fbf2 	bl	8002340 <HAL_GetTick>
 8002b5c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b20      	cmp	r3, #32
 8002b68:	f040 80e0 	bne.w	8002d2c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	2319      	movs	r3, #25
 8002b72:	2201      	movs	r2, #1
 8002b74:	4970      	ldr	r1, [pc, #448]	@ (8002d38 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f001 f90e 	bl	8003d98 <I2C_WaitOnFlagUntilTimeout>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b82:	2302      	movs	r3, #2
 8002b84:	e0d3      	b.n	8002d2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_I2C_Master_Transmit+0x50>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e0cc      	b.n	8002d2e <HAL_I2C_Master_Transmit+0x1ea>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d007      	beq.n	8002bba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0201 	orr.w	r2, r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2221      	movs	r2, #33	@ 0x21
 8002bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2210      	movs	r2, #16
 8002bd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	893a      	ldrh	r2, [r7, #8]
 8002bea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4a50      	ldr	r2, [pc, #320]	@ (8002d3c <HAL_I2C_Master_Transmit+0x1f8>)
 8002bfa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bfc:	8979      	ldrh	r1, [r7, #10]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	6a3a      	ldr	r2, [r7, #32]
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 fdfa 	bl	80037fc <I2C_MasterRequestWrite>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e08d      	b.n	8002d2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c28:	e066      	b.n	8002cf8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	6a39      	ldr	r1, [r7, #32]
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f001 f9cc 	bl	8003fcc <I2C_WaitOnTXEFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00d      	beq.n	8002c56 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d107      	bne.n	8002c52 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e06b      	b.n	8002d2e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5a:	781a      	ldrb	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d11b      	bne.n	8002ccc <HAL_I2C_Master_Transmit+0x188>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d017      	beq.n	8002ccc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca0:	781a      	ldrb	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	6a39      	ldr	r1, [r7, #32]
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f001 f9c3 	bl	800405c <I2C_WaitOnBTFFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00d      	beq.n	8002cf8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d107      	bne.n	8002cf4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e01a      	b.n	8002d2e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d194      	bne.n	8002c2a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e000      	b.n	8002d2e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d2c:	2302      	movs	r3, #2
  }
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	00100002 	.word	0x00100002
 8002d3c:	ffff0000 	.word	0xffff0000

08002d40 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08c      	sub	sp, #48	@ 0x30
 8002d44:	af02      	add	r7, sp, #8
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	607a      	str	r2, [r7, #4]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	817b      	strh	r3, [r7, #10]
 8002d50:	4613      	mov	r3, r2
 8002d52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d54:	f7ff faf4 	bl	8002340 <HAL_GetTick>
 8002d58:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b20      	cmp	r3, #32
 8002d64:	f040 8217 	bne.w	8003196 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	2319      	movs	r3, #25
 8002d6e:	2201      	movs	r2, #1
 8002d70:	497c      	ldr	r1, [pc, #496]	@ (8002f64 <HAL_I2C_Master_Receive+0x224>)
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f001 f810 	bl	8003d98 <I2C_WaitOnFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e20a      	b.n	8003198 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_I2C_Master_Receive+0x50>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e203      	b.n	8003198 <HAL_I2C_Master_Receive+0x458>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d007      	beq.n	8002db6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f042 0201 	orr.w	r2, r2, #1
 8002db4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dc4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2222      	movs	r2, #34	@ 0x22
 8002dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2210      	movs	r2, #16
 8002dd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	893a      	ldrh	r2, [r7, #8]
 8002de6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	4a5c      	ldr	r2, [pc, #368]	@ (8002f68 <HAL_I2C_Master_Receive+0x228>)
 8002df6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002df8:	8979      	ldrh	r1, [r7, #10]
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 fd7e 	bl	8003900 <I2C_MasterRequestRead>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e1c4      	b.n	8003198 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d113      	bne.n	8002e3e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e16:	2300      	movs	r3, #0
 8002e18:	623b      	str	r3, [r7, #32]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	623b      	str	r3, [r7, #32]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	623b      	str	r3, [r7, #32]
 8002e2a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	e198      	b.n	8003170 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d11b      	bne.n	8002e7e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	61fb      	str	r3, [r7, #28]
 8002e6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	e178      	b.n	8003170 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d11b      	bne.n	8002ebe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e94:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ea4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61bb      	str	r3, [r7, #24]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	61bb      	str	r3, [r7, #24]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	e158      	b.n	8003170 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ecc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ee4:	e144      	b.n	8003170 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	f200 80f1 	bhi.w	80030d2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d123      	bne.n	8002f40 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002efa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f001 f8f5 	bl	80040ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e145      	b.n	8003198 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691a      	ldr	r2, [r3, #16]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f3e:	e117      	b.n	8003170 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d14e      	bne.n	8002fe6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4e:	2200      	movs	r2, #0
 8002f50:	4906      	ldr	r1, [pc, #24]	@ (8002f6c <HAL_I2C_Master_Receive+0x22c>)
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 ff20 	bl	8003d98 <I2C_WaitOnFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d008      	beq.n	8002f70 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e11a      	b.n	8003198 <HAL_I2C_Master_Receive+0x458>
 8002f62:	bf00      	nop
 8002f64:	00100002 	.word	0x00100002
 8002f68:	ffff0000 	.word	0xffff0000
 8002f6c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691a      	ldr	r2, [r3, #16]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691a      	ldr	r2, [r3, #16]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fe4:	e0c4      	b.n	8003170 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fec:	2200      	movs	r2, #0
 8002fee:	496c      	ldr	r1, [pc, #432]	@ (80031a0 <HAL_I2C_Master_Receive+0x460>)
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 fed1 	bl	8003d98 <I2C_WaitOnFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0cb      	b.n	8003198 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800300e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691a      	ldr	r2, [r3, #16]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003038:	b29b      	uxth	r3, r3
 800303a:	3b01      	subs	r3, #1
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003048:	2200      	movs	r2, #0
 800304a:	4955      	ldr	r1, [pc, #340]	@ (80031a0 <HAL_I2C_Master_Receive+0x460>)
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 fea3 	bl	8003d98 <I2C_WaitOnFlagUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e09d      	b.n	8003198 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800306a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691a      	ldr	r2, [r3, #16]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030d0:	e04e      	b.n	8003170 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f001 f808 	bl	80040ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e058      	b.n	8003198 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800310e:	b29b      	uxth	r3, r3
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b04      	cmp	r3, #4
 8003124:	d124      	bne.n	8003170 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312a:	2b03      	cmp	r3, #3
 800312c:	d107      	bne.n	800313e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800313c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800315a:	3b01      	subs	r3, #1
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003166:	b29b      	uxth	r3, r3
 8003168:	3b01      	subs	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003174:	2b00      	cmp	r3, #0
 8003176:	f47f aeb6 	bne.w	8002ee6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	e000      	b.n	8003198 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003196:	2302      	movs	r3, #2
  }
}
 8003198:	4618      	mov	r0, r3
 800319a:	3728      	adds	r7, #40	@ 0x28
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	00010004 	.word	0x00010004

080031a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	4608      	mov	r0, r1
 80031ae:	4611      	mov	r1, r2
 80031b0:	461a      	mov	r2, r3
 80031b2:	4603      	mov	r3, r0
 80031b4:	817b      	strh	r3, [r7, #10]
 80031b6:	460b      	mov	r3, r1
 80031b8:	813b      	strh	r3, [r7, #8]
 80031ba:	4613      	mov	r3, r2
 80031bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031be:	f7ff f8bf 	bl	8002340 <HAL_GetTick>
 80031c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	f040 80d9 	bne.w	8003384 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	2319      	movs	r3, #25
 80031d8:	2201      	movs	r2, #1
 80031da:	496d      	ldr	r1, [pc, #436]	@ (8003390 <HAL_I2C_Mem_Write+0x1ec>)
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 fddb 	bl	8003d98 <I2C_WaitOnFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80031e8:	2302      	movs	r3, #2
 80031ea:	e0cc      	b.n	8003386 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_I2C_Mem_Write+0x56>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e0c5      	b.n	8003386 <HAL_I2C_Mem_Write+0x1e2>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b01      	cmp	r3, #1
 800320e:	d007      	beq.n	8003220 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800322e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2221      	movs	r2, #33	@ 0x21
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2240      	movs	r2, #64	@ 0x40
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a3a      	ldr	r2, [r7, #32]
 800324a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003250:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4a4d      	ldr	r2, [pc, #308]	@ (8003394 <HAL_I2C_Mem_Write+0x1f0>)
 8003260:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003262:	88f8      	ldrh	r0, [r7, #6]
 8003264:	893a      	ldrh	r2, [r7, #8]
 8003266:	8979      	ldrh	r1, [r7, #10]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	9301      	str	r3, [sp, #4]
 800326c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	4603      	mov	r3, r0
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 fc12 	bl	8003a9c <I2C_RequestMemoryWrite>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d052      	beq.n	8003324 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e081      	b.n	8003386 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 fea0 	bl	8003fcc <I2C_WaitOnTXEFlagUntilTimeout>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00d      	beq.n	80032ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	2b04      	cmp	r3, #4
 8003298:	d107      	bne.n	80032aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e06b      	b.n	8003386 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b2:	781a      	ldrb	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d11b      	bne.n	8003324 <HAL_I2C_Mem_Write+0x180>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d017      	beq.n	8003324 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	781a      	ldrb	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330e:	3b01      	subs	r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1aa      	bne.n	8003282 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 fe93 	bl	800405c <I2C_WaitOnBTFFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00d      	beq.n	8003358 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003340:	2b04      	cmp	r3, #4
 8003342:	d107      	bne.n	8003354 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003352:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e016      	b.n	8003386 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	e000      	b.n	8003386 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003384:	2302      	movs	r3, #2
  }
}
 8003386:	4618      	mov	r0, r3
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	00100002 	.word	0x00100002
 8003394:	ffff0000 	.word	0xffff0000

08003398 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08c      	sub	sp, #48	@ 0x30
 800339c:	af02      	add	r7, sp, #8
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	4608      	mov	r0, r1
 80033a2:	4611      	mov	r1, r2
 80033a4:	461a      	mov	r2, r3
 80033a6:	4603      	mov	r3, r0
 80033a8:	817b      	strh	r3, [r7, #10]
 80033aa:	460b      	mov	r3, r1
 80033ac:	813b      	strh	r3, [r7, #8]
 80033ae:	4613      	mov	r3, r2
 80033b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033b2:	f7fe ffc5 	bl	8002340 <HAL_GetTick>
 80033b6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	f040 8214 	bne.w	80037ee <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	2319      	movs	r3, #25
 80033cc:	2201      	movs	r2, #1
 80033ce:	497b      	ldr	r1, [pc, #492]	@ (80035bc <HAL_I2C_Mem_Read+0x224>)
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 fce1 	bl	8003d98 <I2C_WaitOnFlagUntilTimeout>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80033dc:	2302      	movs	r3, #2
 80033de:	e207      	b.n	80037f0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d101      	bne.n	80033ee <HAL_I2C_Mem_Read+0x56>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e200      	b.n	80037f0 <HAL_I2C_Mem_Read+0x458>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b01      	cmp	r3, #1
 8003402:	d007      	beq.n	8003414 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0201 	orr.w	r2, r2, #1
 8003412:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003422:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2222      	movs	r2, #34	@ 0x22
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2240      	movs	r2, #64	@ 0x40
 8003430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800343e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003444:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4a5b      	ldr	r2, [pc, #364]	@ (80035c0 <HAL_I2C_Mem_Read+0x228>)
 8003454:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003456:	88f8      	ldrh	r0, [r7, #6]
 8003458:	893a      	ldrh	r2, [r7, #8]
 800345a:	8979      	ldrh	r1, [r7, #10]
 800345c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345e:	9301      	str	r3, [sp, #4]
 8003460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	4603      	mov	r3, r0
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 fbae 	bl	8003bc8 <I2C_RequestMemoryRead>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e1bc      	b.n	80037f0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800347a:	2b00      	cmp	r3, #0
 800347c:	d113      	bne.n	80034a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347e:	2300      	movs	r3, #0
 8003480:	623b      	str	r3, [r7, #32]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	623b      	str	r3, [r7, #32]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	623b      	str	r3, [r7, #32]
 8003492:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	e190      	b.n	80037c8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d11b      	bne.n	80034e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	61fb      	str	r3, [r7, #28]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	61fb      	str	r3, [r7, #28]
 80034d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	e170      	b.n	80037c8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d11b      	bne.n	8003526 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800350c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350e:	2300      	movs	r3, #0
 8003510:	61bb      	str	r3, [r7, #24]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	61bb      	str	r3, [r7, #24]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	e150      	b.n	80037c8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	617b      	str	r3, [r7, #20]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800353c:	e144      	b.n	80037c8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003542:	2b03      	cmp	r3, #3
 8003544:	f200 80f1 	bhi.w	800372a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800354c:	2b01      	cmp	r3, #1
 800354e:	d123      	bne.n	8003598 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003552:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 fdc9 	bl	80040ec <I2C_WaitOnRXNEFlagUntilTimeout>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e145      	b.n	80037f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800358c:	b29b      	uxth	r3, r3
 800358e:	3b01      	subs	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003596:	e117      	b.n	80037c8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359c:	2b02      	cmp	r3, #2
 800359e:	d14e      	bne.n	800363e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a6:	2200      	movs	r2, #0
 80035a8:	4906      	ldr	r1, [pc, #24]	@ (80035c4 <HAL_I2C_Mem_Read+0x22c>)
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 fbf4 	bl	8003d98 <I2C_WaitOnFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d008      	beq.n	80035c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e11a      	b.n	80037f0 <HAL_I2C_Mem_Read+0x458>
 80035ba:	bf00      	nop
 80035bc:	00100002 	.word	0x00100002
 80035c0:	ffff0000 	.word	0xffff0000
 80035c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691a      	ldr	r2, [r3, #16]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	3b01      	subs	r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800363c:	e0c4      	b.n	80037c8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800363e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003644:	2200      	movs	r2, #0
 8003646:	496c      	ldr	r1, [pc, #432]	@ (80037f8 <HAL_I2C_Mem_Read+0x460>)
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 fba5 	bl	8003d98 <I2C_WaitOnFlagUntilTimeout>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0cb      	b.n	80037f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691a      	ldr	r2, [r3, #16]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003690:	b29b      	uxth	r3, r3
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a0:	2200      	movs	r2, #0
 80036a2:	4955      	ldr	r1, [pc, #340]	@ (80037f8 <HAL_I2C_Mem_Read+0x460>)
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 fb77 	bl	8003d98 <I2C_WaitOnFlagUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e09d      	b.n	80037f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003728:	e04e      	b.n	80037c8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800372a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800372c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 fcdc 	bl	80040ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e058      	b.n	80037f0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	b29a      	uxth	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b04      	cmp	r3, #4
 800377c:	d124      	bne.n	80037c8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003782:	2b03      	cmp	r3, #3
 8003784:	d107      	bne.n	8003796 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003794:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f47f aeb6 	bne.w	800353e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	e000      	b.n	80037f0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80037ee:	2302      	movs	r3, #2
  }
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3728      	adds	r7, #40	@ 0x28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	00010004 	.word	0x00010004

080037fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af02      	add	r7, sp, #8
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	460b      	mov	r3, r1
 800380a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003810:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2b08      	cmp	r3, #8
 8003816:	d006      	beq.n	8003826 <I2C_MasterRequestWrite+0x2a>
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d003      	beq.n	8003826 <I2C_MasterRequestWrite+0x2a>
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003824:	d108      	bne.n	8003838 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e00b      	b.n	8003850 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383c:	2b12      	cmp	r3, #18
 800383e:	d107      	bne.n	8003850 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800384e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 fa9b 	bl	8003d98 <I2C_WaitOnFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00d      	beq.n	8003884 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003872:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003876:	d103      	bne.n	8003880 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800387e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e035      	b.n	80038f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800388c:	d108      	bne.n	80038a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800388e:	897b      	ldrh	r3, [r7, #10]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	461a      	mov	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800389c:	611a      	str	r2, [r3, #16]
 800389e:	e01b      	b.n	80038d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038a0:	897b      	ldrh	r3, [r7, #10]
 80038a2:	11db      	asrs	r3, r3, #7
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	f003 0306 	and.w	r3, r3, #6
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	f063 030f 	orn	r3, r3, #15
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	490e      	ldr	r1, [pc, #56]	@ (80038f8 <I2C_MasterRequestWrite+0xfc>)
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 fae4 	bl	8003e8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e010      	b.n	80038f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038ce:	897b      	ldrh	r3, [r7, #10]
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	4907      	ldr	r1, [pc, #28]	@ (80038fc <I2C_MasterRequestWrite+0x100>)
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 fad4 	bl	8003e8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	00010008 	.word	0x00010008
 80038fc:	00010002 	.word	0x00010002

08003900 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af02      	add	r7, sp, #8
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	460b      	mov	r3, r1
 800390e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003914:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003924:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2b08      	cmp	r3, #8
 800392a:	d006      	beq.n	800393a <I2C_MasterRequestRead+0x3a>
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d003      	beq.n	800393a <I2C_MasterRequestRead+0x3a>
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003938:	d108      	bne.n	800394c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e00b      	b.n	8003964 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003950:	2b11      	cmp	r3, #17
 8003952:	d107      	bne.n	8003964 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003962:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 fa11 	bl	8003d98 <I2C_WaitOnFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00d      	beq.n	8003998 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800398a:	d103      	bne.n	8003994 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003992:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e079      	b.n	8003a8c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039a0:	d108      	bne.n	80039b4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039a2:	897b      	ldrh	r3, [r7, #10]
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	611a      	str	r2, [r3, #16]
 80039b2:	e05f      	b.n	8003a74 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039b4:	897b      	ldrh	r3, [r7, #10]
 80039b6:	11db      	asrs	r3, r3, #7
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	f003 0306 	and.w	r3, r3, #6
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	f063 030f 	orn	r3, r3, #15
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	4930      	ldr	r1, [pc, #192]	@ (8003a94 <I2C_MasterRequestRead+0x194>)
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 fa5a 	bl	8003e8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e054      	b.n	8003a8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039e2:	897b      	ldrh	r3, [r7, #10]
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	4929      	ldr	r1, [pc, #164]	@ (8003a98 <I2C_MasterRequestRead+0x198>)
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 fa4a 	bl	8003e8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e044      	b.n	8003a8c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a02:	2300      	movs	r3, #0
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a26:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 f9af 	bl	8003d98 <I2C_WaitOnFlagUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00d      	beq.n	8003a5c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a4e:	d103      	bne.n	8003a58 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a56:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e017      	b.n	8003a8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003a5c:	897b      	ldrh	r3, [r7, #10]
 8003a5e:	11db      	asrs	r3, r3, #7
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	f003 0306 	and.w	r3, r3, #6
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	f063 030e 	orn	r3, r3, #14
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	4907      	ldr	r1, [pc, #28]	@ (8003a98 <I2C_MasterRequestRead+0x198>)
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 fa06 	bl	8003e8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	00010008 	.word	0x00010008
 8003a98:	00010002 	.word	0x00010002

08003a9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	4608      	mov	r0, r1
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4603      	mov	r3, r0
 8003aac:	817b      	strh	r3, [r7, #10]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	813b      	strh	r3, [r7, #8]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ac4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 f960 	bl	8003d98 <I2C_WaitOnFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00d      	beq.n	8003afa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aec:	d103      	bne.n	8003af6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003af4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e05f      	b.n	8003bba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003afa:	897b      	ldrh	r3, [r7, #10]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	461a      	mov	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0c:	6a3a      	ldr	r2, [r7, #32]
 8003b0e:	492d      	ldr	r1, [pc, #180]	@ (8003bc4 <I2C_RequestMemoryWrite+0x128>)
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f9bb 	bl	8003e8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e04c      	b.n	8003bba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b38:	6a39      	ldr	r1, [r7, #32]
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 fa46 	bl	8003fcc <I2C_WaitOnTXEFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00d      	beq.n	8003b62 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d107      	bne.n	8003b5e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e02b      	b.n	8003bba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b62:	88fb      	ldrh	r3, [r7, #6]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d105      	bne.n	8003b74 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b68:	893b      	ldrh	r3, [r7, #8]
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	611a      	str	r2, [r3, #16]
 8003b72:	e021      	b.n	8003bb8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b74:	893b      	ldrh	r3, [r7, #8]
 8003b76:	0a1b      	lsrs	r3, r3, #8
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b84:	6a39      	ldr	r1, [r7, #32]
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fa20 	bl	8003fcc <I2C_WaitOnTXEFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00d      	beq.n	8003bae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d107      	bne.n	8003baa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ba8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e005      	b.n	8003bba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bae:	893b      	ldrh	r3, [r7, #8]
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	00010002 	.word	0x00010002

08003bc8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	4608      	mov	r0, r1
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	817b      	strh	r3, [r7, #10]
 8003bda:	460b      	mov	r3, r1
 8003bdc:	813b      	strh	r3, [r7, #8]
 8003bde:	4613      	mov	r3, r2
 8003be0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003bf0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 f8c2 	bl	8003d98 <I2C_WaitOnFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00d      	beq.n	8003c36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c28:	d103      	bne.n	8003c32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c30:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e0aa      	b.n	8003d8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c36:	897b      	ldrh	r3, [r7, #10]
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c48:	6a3a      	ldr	r2, [r7, #32]
 8003c4a:	4952      	ldr	r1, [pc, #328]	@ (8003d94 <I2C_RequestMemoryRead+0x1cc>)
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 f91d 	bl	8003e8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e097      	b.n	8003d8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c74:	6a39      	ldr	r1, [r7, #32]
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 f9a8 	bl	8003fcc <I2C_WaitOnTXEFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00d      	beq.n	8003c9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d107      	bne.n	8003c9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e076      	b.n	8003d8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c9e:	88fb      	ldrh	r3, [r7, #6]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d105      	bne.n	8003cb0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ca4:	893b      	ldrh	r3, [r7, #8]
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	611a      	str	r2, [r3, #16]
 8003cae:	e021      	b.n	8003cf4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cb0:	893b      	ldrh	r3, [r7, #8]
 8003cb2:	0a1b      	lsrs	r3, r3, #8
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cc0:	6a39      	ldr	r1, [r7, #32]
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 f982 	bl	8003fcc <I2C_WaitOnTXEFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00d      	beq.n	8003cea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d107      	bne.n	8003ce6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ce4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e050      	b.n	8003d8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cea:	893b      	ldrh	r3, [r7, #8]
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cf6:	6a39      	ldr	r1, [r7, #32]
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 f967 	bl	8003fcc <I2C_WaitOnTXEFlagUntilTimeout>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00d      	beq.n	8003d20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d107      	bne.n	8003d1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e035      	b.n	8003d8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 f82b 	bl	8003d98 <I2C_WaitOnFlagUntilTimeout>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00d      	beq.n	8003d64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d56:	d103      	bne.n	8003d60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e013      	b.n	8003d8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d64:	897b      	ldrh	r3, [r7, #10]
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d76:	6a3a      	ldr	r2, [r7, #32]
 8003d78:	4906      	ldr	r1, [pc, #24]	@ (8003d94 <I2C_RequestMemoryRead+0x1cc>)
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 f886 	bl	8003e8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	00010002 	.word	0x00010002

08003d98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	603b      	str	r3, [r7, #0]
 8003da4:	4613      	mov	r3, r2
 8003da6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003da8:	e048      	b.n	8003e3c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db0:	d044      	beq.n	8003e3c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db2:	f7fe fac5 	bl	8002340 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d302      	bcc.n	8003dc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d139      	bne.n	8003e3c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	0c1b      	lsrs	r3, r3, #16
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d10d      	bne.n	8003dee <I2C_WaitOnFlagUntilTimeout+0x56>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	43da      	mvns	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	bf0c      	ite	eq
 8003de4:	2301      	moveq	r3, #1
 8003de6:	2300      	movne	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	461a      	mov	r2, r3
 8003dec:	e00c      	b.n	8003e08 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	43da      	mvns	r2, r3
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bf0c      	ite	eq
 8003e00:	2301      	moveq	r3, #1
 8003e02:	2300      	movne	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	79fb      	ldrb	r3, [r7, #7]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d116      	bne.n	8003e3c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e28:	f043 0220 	orr.w	r2, r3, #32
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e023      	b.n	8003e84 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	0c1b      	lsrs	r3, r3, #16
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d10d      	bne.n	8003e62 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	43da      	mvns	r2, r3
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	4013      	ands	r3, r2
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	bf0c      	ite	eq
 8003e58:	2301      	moveq	r3, #1
 8003e5a:	2300      	movne	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	e00c      	b.n	8003e7c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	43da      	mvns	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	bf0c      	ite	eq
 8003e74:	2301      	moveq	r3, #1
 8003e76:	2300      	movne	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d093      	beq.n	8003daa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e9a:	e071      	b.n	8003f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eaa:	d123      	bne.n	8003ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ec4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	f043 0204 	orr.w	r2, r3, #4
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e067      	b.n	8003fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efa:	d041      	beq.n	8003f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003efc:	f7fe fa20 	bl	8002340 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d302      	bcc.n	8003f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d136      	bne.n	8003f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	0c1b      	lsrs	r3, r3, #16
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d10c      	bne.n	8003f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	43da      	mvns	r2, r3
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	4013      	ands	r3, r2
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	bf14      	ite	ne
 8003f2e:	2301      	movne	r3, #1
 8003f30:	2300      	moveq	r3, #0
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	e00b      	b.n	8003f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	43da      	mvns	r2, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	4013      	ands	r3, r2
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	bf14      	ite	ne
 8003f48:	2301      	movne	r3, #1
 8003f4a:	2300      	moveq	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d016      	beq.n	8003f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6c:	f043 0220 	orr.w	r2, r3, #32
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e021      	b.n	8003fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	0c1b      	lsrs	r3, r3, #16
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d10c      	bne.n	8003fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	43da      	mvns	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	4013      	ands	r3, r2
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bf14      	ite	ne
 8003f9c:	2301      	movne	r3, #1
 8003f9e:	2300      	moveq	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	e00b      	b.n	8003fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	43da      	mvns	r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	bf14      	ite	ne
 8003fb6:	2301      	movne	r3, #1
 8003fb8:	2300      	moveq	r3, #0
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f47f af6d 	bne.w	8003e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fd8:	e034      	b.n	8004044 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 f8e3 	bl	80041a6 <I2C_IsAcknowledgeFailed>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e034      	b.n	8004054 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff0:	d028      	beq.n	8004044 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff2:	f7fe f9a5 	bl	8002340 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d302      	bcc.n	8004008 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d11d      	bne.n	8004044 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004012:	2b80      	cmp	r3, #128	@ 0x80
 8004014:	d016      	beq.n	8004044 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004030:	f043 0220 	orr.w	r2, r3, #32
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e007      	b.n	8004054 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800404e:	2b80      	cmp	r3, #128	@ 0x80
 8004050:	d1c3      	bne.n	8003fda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004068:	e034      	b.n	80040d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 f89b 	bl	80041a6 <I2C_IsAcknowledgeFailed>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e034      	b.n	80040e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004080:	d028      	beq.n	80040d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004082:	f7fe f95d 	bl	8002340 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	429a      	cmp	r2, r3
 8004090:	d302      	bcc.n	8004098 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d11d      	bne.n	80040d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f003 0304 	and.w	r3, r3, #4
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d016      	beq.n	80040d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c0:	f043 0220 	orr.w	r2, r3, #32
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e007      	b.n	80040e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d1c3      	bne.n	800406a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040f8:	e049      	b.n	800418e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	f003 0310 	and.w	r3, r3, #16
 8004104:	2b10      	cmp	r3, #16
 8004106:	d119      	bne.n	800413c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f06f 0210 	mvn.w	r2, #16
 8004110:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e030      	b.n	800419e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413c:	f7fe f900 	bl	8002340 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	429a      	cmp	r2, r3
 800414a:	d302      	bcc.n	8004152 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d11d      	bne.n	800418e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800415c:	2b40      	cmp	r3, #64	@ 0x40
 800415e:	d016      	beq.n	800418e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2220      	movs	r2, #32
 800416a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	f043 0220 	orr.w	r2, r3, #32
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e007      	b.n	800419e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004198:	2b40      	cmp	r3, #64	@ 0x40
 800419a:	d1ae      	bne.n	80040fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041bc:	d11b      	bne.n	80041f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e2:	f043 0204 	orr.w	r2, r3, #4
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e0cc      	b.n	80043b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004218:	4b68      	ldr	r3, [pc, #416]	@ (80043bc <HAL_RCC_ClockConfig+0x1b8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 030f 	and.w	r3, r3, #15
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d90c      	bls.n	8004240 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004226:	4b65      	ldr	r3, [pc, #404]	@ (80043bc <HAL_RCC_ClockConfig+0x1b8>)
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800422e:	4b63      	ldr	r3, [pc, #396]	@ (80043bc <HAL_RCC_ClockConfig+0x1b8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d001      	beq.n	8004240 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e0b8      	b.n	80043b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d020      	beq.n	800428e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d005      	beq.n	8004264 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004258:	4b59      	ldr	r3, [pc, #356]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	4a58      	ldr	r2, [pc, #352]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004262:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	2b00      	cmp	r3, #0
 800426e:	d005      	beq.n	800427c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004270:	4b53      	ldr	r3, [pc, #332]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	4a52      	ldr	r2, [pc, #328]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800427a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800427c:	4b50      	ldr	r3, [pc, #320]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	494d      	ldr	r1, [pc, #308]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	4313      	orrs	r3, r2
 800428c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d044      	beq.n	8004324 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d107      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a2:	4b47      	ldr	r3, [pc, #284]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d119      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e07f      	b.n	80043b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d003      	beq.n	80042c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042be:	2b03      	cmp	r3, #3
 80042c0:	d107      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c2:	4b3f      	ldr	r3, [pc, #252]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d109      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e06f      	b.n	80043b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d2:	4b3b      	ldr	r3, [pc, #236]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e067      	b.n	80043b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042e2:	4b37      	ldr	r3, [pc, #220]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f023 0203 	bic.w	r2, r3, #3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	4934      	ldr	r1, [pc, #208]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042f4:	f7fe f824 	bl	8002340 <HAL_GetTick>
 80042f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fa:	e00a      	b.n	8004312 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042fc:	f7fe f820 	bl	8002340 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800430a:	4293      	cmp	r3, r2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e04f      	b.n	80043b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004312:	4b2b      	ldr	r3, [pc, #172]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 020c 	and.w	r2, r3, #12
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	429a      	cmp	r2, r3
 8004322:	d1eb      	bne.n	80042fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004324:	4b25      	ldr	r3, [pc, #148]	@ (80043bc <HAL_RCC_ClockConfig+0x1b8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d20c      	bcs.n	800434c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004332:	4b22      	ldr	r3, [pc, #136]	@ (80043bc <HAL_RCC_ClockConfig+0x1b8>)
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800433a:	4b20      	ldr	r3, [pc, #128]	@ (80043bc <HAL_RCC_ClockConfig+0x1b8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	429a      	cmp	r2, r3
 8004346:	d001      	beq.n	800434c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e032      	b.n	80043b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b00      	cmp	r3, #0
 8004356:	d008      	beq.n	800436a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004358:	4b19      	ldr	r3, [pc, #100]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	4916      	ldr	r1, [pc, #88]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	4313      	orrs	r3, r2
 8004368:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b00      	cmp	r3, #0
 8004374:	d009      	beq.n	800438a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004376:	4b12      	ldr	r3, [pc, #72]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	490e      	ldr	r1, [pc, #56]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	4313      	orrs	r3, r2
 8004388:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800438a:	f000 f887 	bl	800449c <HAL_RCC_GetSysClockFreq>
 800438e:	4602      	mov	r2, r0
 8004390:	4b0b      	ldr	r3, [pc, #44]	@ (80043c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	091b      	lsrs	r3, r3, #4
 8004396:	f003 030f 	and.w	r3, r3, #15
 800439a:	490a      	ldr	r1, [pc, #40]	@ (80043c4 <HAL_RCC_ClockConfig+0x1c0>)
 800439c:	5ccb      	ldrb	r3, [r1, r3]
 800439e:	fa22 f303 	lsr.w	r3, r2, r3
 80043a2:	4a09      	ldr	r2, [pc, #36]	@ (80043c8 <HAL_RCC_ClockConfig+0x1c4>)
 80043a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80043a6:	4b09      	ldr	r3, [pc, #36]	@ (80043cc <HAL_RCC_ClockConfig+0x1c8>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fd fe2e 	bl	800200c <HAL_InitTick>

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40023c00 	.word	0x40023c00
 80043c0:	40023800 	.word	0x40023800
 80043c4:	0800c458 	.word	0x0800c458
 80043c8:	20000008 	.word	0x20000008
 80043cc:	2000000c 	.word	0x2000000c

080043d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043d4:	4b03      	ldr	r3, [pc, #12]	@ (80043e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043d6:	681b      	ldr	r3, [r3, #0]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	20000008 	.word	0x20000008

080043e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043ec:	f7ff fff0 	bl	80043d0 <HAL_RCC_GetHCLKFreq>
 80043f0:	4602      	mov	r2, r0
 80043f2:	4b05      	ldr	r3, [pc, #20]	@ (8004408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	0a9b      	lsrs	r3, r3, #10
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	4903      	ldr	r1, [pc, #12]	@ (800440c <HAL_RCC_GetPCLK1Freq+0x24>)
 80043fe:	5ccb      	ldrb	r3, [r1, r3]
 8004400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004404:	4618      	mov	r0, r3
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40023800 	.word	0x40023800
 800440c:	0800c468 	.word	0x0800c468

08004410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004414:	f7ff ffdc 	bl	80043d0 <HAL_RCC_GetHCLKFreq>
 8004418:	4602      	mov	r2, r0
 800441a:	4b05      	ldr	r3, [pc, #20]	@ (8004430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	0b5b      	lsrs	r3, r3, #13
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	4903      	ldr	r1, [pc, #12]	@ (8004434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004426:	5ccb      	ldrb	r3, [r1, r3]
 8004428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800442c:	4618      	mov	r0, r3
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40023800 	.word	0x40023800
 8004434:	0800c468 	.word	0x0800c468

08004438 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	220f      	movs	r2, #15
 8004446:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004448:	4b12      	ldr	r3, [pc, #72]	@ (8004494 <HAL_RCC_GetClockConfig+0x5c>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 0203 	and.w	r2, r3, #3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004454:	4b0f      	ldr	r3, [pc, #60]	@ (8004494 <HAL_RCC_GetClockConfig+0x5c>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004460:	4b0c      	ldr	r3, [pc, #48]	@ (8004494 <HAL_RCC_GetClockConfig+0x5c>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800446c:	4b09      	ldr	r3, [pc, #36]	@ (8004494 <HAL_RCC_GetClockConfig+0x5c>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	08db      	lsrs	r3, r3, #3
 8004472:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800447a:	4b07      	ldr	r3, [pc, #28]	@ (8004498 <HAL_RCC_GetClockConfig+0x60>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 020f 	and.w	r2, r3, #15
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	601a      	str	r2, [r3, #0]
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40023800 	.word	0x40023800
 8004498:	40023c00 	.word	0x40023c00

0800449c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800449c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a0:	b0ae      	sub	sp, #184	@ 0xb8
 80044a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044c2:	4bcb      	ldr	r3, [pc, #812]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 030c 	and.w	r3, r3, #12
 80044ca:	2b0c      	cmp	r3, #12
 80044cc:	f200 8206 	bhi.w	80048dc <HAL_RCC_GetSysClockFreq+0x440>
 80044d0:	a201      	add	r2, pc, #4	@ (adr r2, 80044d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80044d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d6:	bf00      	nop
 80044d8:	0800450d 	.word	0x0800450d
 80044dc:	080048dd 	.word	0x080048dd
 80044e0:	080048dd 	.word	0x080048dd
 80044e4:	080048dd 	.word	0x080048dd
 80044e8:	08004515 	.word	0x08004515
 80044ec:	080048dd 	.word	0x080048dd
 80044f0:	080048dd 	.word	0x080048dd
 80044f4:	080048dd 	.word	0x080048dd
 80044f8:	0800451d 	.word	0x0800451d
 80044fc:	080048dd 	.word	0x080048dd
 8004500:	080048dd 	.word	0x080048dd
 8004504:	080048dd 	.word	0x080048dd
 8004508:	0800470d 	.word	0x0800470d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800450c:	4bb9      	ldr	r3, [pc, #740]	@ (80047f4 <HAL_RCC_GetSysClockFreq+0x358>)
 800450e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004512:	e1e7      	b.n	80048e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004514:	4bb8      	ldr	r3, [pc, #736]	@ (80047f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004516:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800451a:	e1e3      	b.n	80048e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800451c:	4bb4      	ldr	r3, [pc, #720]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004524:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004528:	4bb1      	ldr	r3, [pc, #708]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d071      	beq.n	8004618 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004534:	4bae      	ldr	r3, [pc, #696]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	099b      	lsrs	r3, r3, #6
 800453a:	2200      	movs	r2, #0
 800453c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004540:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004544:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800454c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004550:	2300      	movs	r3, #0
 8004552:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004556:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800455a:	4622      	mov	r2, r4
 800455c:	462b      	mov	r3, r5
 800455e:	f04f 0000 	mov.w	r0, #0
 8004562:	f04f 0100 	mov.w	r1, #0
 8004566:	0159      	lsls	r1, r3, #5
 8004568:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800456c:	0150      	lsls	r0, r2, #5
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	4621      	mov	r1, r4
 8004574:	1a51      	subs	r1, r2, r1
 8004576:	6439      	str	r1, [r7, #64]	@ 0x40
 8004578:	4629      	mov	r1, r5
 800457a:	eb63 0301 	sbc.w	r3, r3, r1
 800457e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	f04f 0300 	mov.w	r3, #0
 8004588:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800458c:	4649      	mov	r1, r9
 800458e:	018b      	lsls	r3, r1, #6
 8004590:	4641      	mov	r1, r8
 8004592:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004596:	4641      	mov	r1, r8
 8004598:	018a      	lsls	r2, r1, #6
 800459a:	4641      	mov	r1, r8
 800459c:	1a51      	subs	r1, r2, r1
 800459e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80045a0:	4649      	mov	r1, r9
 80045a2:	eb63 0301 	sbc.w	r3, r3, r1
 80045a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	f04f 0300 	mov.w	r3, #0
 80045b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80045b4:	4649      	mov	r1, r9
 80045b6:	00cb      	lsls	r3, r1, #3
 80045b8:	4641      	mov	r1, r8
 80045ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045be:	4641      	mov	r1, r8
 80045c0:	00ca      	lsls	r2, r1, #3
 80045c2:	4610      	mov	r0, r2
 80045c4:	4619      	mov	r1, r3
 80045c6:	4603      	mov	r3, r0
 80045c8:	4622      	mov	r2, r4
 80045ca:	189b      	adds	r3, r3, r2
 80045cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80045ce:	462b      	mov	r3, r5
 80045d0:	460a      	mov	r2, r1
 80045d2:	eb42 0303 	adc.w	r3, r2, r3
 80045d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80045e4:	4629      	mov	r1, r5
 80045e6:	024b      	lsls	r3, r1, #9
 80045e8:	4621      	mov	r1, r4
 80045ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045ee:	4621      	mov	r1, r4
 80045f0:	024a      	lsls	r2, r1, #9
 80045f2:	4610      	mov	r0, r2
 80045f4:	4619      	mov	r1, r3
 80045f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045fa:	2200      	movs	r2, #0
 80045fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004600:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004604:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004608:	f7fc fb3e 	bl	8000c88 <__aeabi_uldivmod>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4613      	mov	r3, r2
 8004612:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004616:	e067      	b.n	80046e8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004618:	4b75      	ldr	r3, [pc, #468]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	099b      	lsrs	r3, r3, #6
 800461e:	2200      	movs	r2, #0
 8004620:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004624:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004628:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800462c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004630:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004632:	2300      	movs	r3, #0
 8004634:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004636:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800463a:	4622      	mov	r2, r4
 800463c:	462b      	mov	r3, r5
 800463e:	f04f 0000 	mov.w	r0, #0
 8004642:	f04f 0100 	mov.w	r1, #0
 8004646:	0159      	lsls	r1, r3, #5
 8004648:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800464c:	0150      	lsls	r0, r2, #5
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	4621      	mov	r1, r4
 8004654:	1a51      	subs	r1, r2, r1
 8004656:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004658:	4629      	mov	r1, r5
 800465a:	eb63 0301 	sbc.w	r3, r3, r1
 800465e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	f04f 0300 	mov.w	r3, #0
 8004668:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800466c:	4649      	mov	r1, r9
 800466e:	018b      	lsls	r3, r1, #6
 8004670:	4641      	mov	r1, r8
 8004672:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004676:	4641      	mov	r1, r8
 8004678:	018a      	lsls	r2, r1, #6
 800467a:	4641      	mov	r1, r8
 800467c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004680:	4649      	mov	r1, r9
 8004682:	eb63 0b01 	sbc.w	fp, r3, r1
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004692:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004696:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800469a:	4692      	mov	sl, r2
 800469c:	469b      	mov	fp, r3
 800469e:	4623      	mov	r3, r4
 80046a0:	eb1a 0303 	adds.w	r3, sl, r3
 80046a4:	623b      	str	r3, [r7, #32]
 80046a6:	462b      	mov	r3, r5
 80046a8:	eb4b 0303 	adc.w	r3, fp, r3
 80046ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80046ba:	4629      	mov	r1, r5
 80046bc:	028b      	lsls	r3, r1, #10
 80046be:	4621      	mov	r1, r4
 80046c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046c4:	4621      	mov	r1, r4
 80046c6:	028a      	lsls	r2, r1, #10
 80046c8:	4610      	mov	r0, r2
 80046ca:	4619      	mov	r1, r3
 80046cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046d0:	2200      	movs	r2, #0
 80046d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80046d4:	677a      	str	r2, [r7, #116]	@ 0x74
 80046d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80046da:	f7fc fad5 	bl	8000c88 <__aeabi_uldivmod>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4613      	mov	r3, r2
 80046e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80046e8:	4b41      	ldr	r3, [pc, #260]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	0c1b      	lsrs	r3, r3, #16
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	3301      	adds	r3, #1
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80046fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80046fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004702:	fbb2 f3f3 	udiv	r3, r2, r3
 8004706:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800470a:	e0eb      	b.n	80048e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800470c:	4b38      	ldr	r3, [pc, #224]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004714:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004718:	4b35      	ldr	r3, [pc, #212]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d06b      	beq.n	80047fc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004724:	4b32      	ldr	r3, [pc, #200]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	099b      	lsrs	r3, r3, #6
 800472a:	2200      	movs	r2, #0
 800472c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800472e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004730:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004736:	663b      	str	r3, [r7, #96]	@ 0x60
 8004738:	2300      	movs	r3, #0
 800473a:	667b      	str	r3, [r7, #100]	@ 0x64
 800473c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004740:	4622      	mov	r2, r4
 8004742:	462b      	mov	r3, r5
 8004744:	f04f 0000 	mov.w	r0, #0
 8004748:	f04f 0100 	mov.w	r1, #0
 800474c:	0159      	lsls	r1, r3, #5
 800474e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004752:	0150      	lsls	r0, r2, #5
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4621      	mov	r1, r4
 800475a:	1a51      	subs	r1, r2, r1
 800475c:	61b9      	str	r1, [r7, #24]
 800475e:	4629      	mov	r1, r5
 8004760:	eb63 0301 	sbc.w	r3, r3, r1
 8004764:	61fb      	str	r3, [r7, #28]
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	f04f 0300 	mov.w	r3, #0
 800476e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004772:	4659      	mov	r1, fp
 8004774:	018b      	lsls	r3, r1, #6
 8004776:	4651      	mov	r1, sl
 8004778:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800477c:	4651      	mov	r1, sl
 800477e:	018a      	lsls	r2, r1, #6
 8004780:	4651      	mov	r1, sl
 8004782:	ebb2 0801 	subs.w	r8, r2, r1
 8004786:	4659      	mov	r1, fp
 8004788:	eb63 0901 	sbc.w	r9, r3, r1
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004798:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800479c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047a0:	4690      	mov	r8, r2
 80047a2:	4699      	mov	r9, r3
 80047a4:	4623      	mov	r3, r4
 80047a6:	eb18 0303 	adds.w	r3, r8, r3
 80047aa:	613b      	str	r3, [r7, #16]
 80047ac:	462b      	mov	r3, r5
 80047ae:	eb49 0303 	adc.w	r3, r9, r3
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80047c0:	4629      	mov	r1, r5
 80047c2:	024b      	lsls	r3, r1, #9
 80047c4:	4621      	mov	r1, r4
 80047c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047ca:	4621      	mov	r1, r4
 80047cc:	024a      	lsls	r2, r1, #9
 80047ce:	4610      	mov	r0, r2
 80047d0:	4619      	mov	r1, r3
 80047d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047d6:	2200      	movs	r2, #0
 80047d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047da:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80047dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80047e0:	f7fc fa52 	bl	8000c88 <__aeabi_uldivmod>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4613      	mov	r3, r2
 80047ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047ee:	e065      	b.n	80048bc <HAL_RCC_GetSysClockFreq+0x420>
 80047f0:	40023800 	.word	0x40023800
 80047f4:	00f42400 	.word	0x00f42400
 80047f8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047fc:	4b3d      	ldr	r3, [pc, #244]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	099b      	lsrs	r3, r3, #6
 8004802:	2200      	movs	r2, #0
 8004804:	4618      	mov	r0, r3
 8004806:	4611      	mov	r1, r2
 8004808:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800480c:	653b      	str	r3, [r7, #80]	@ 0x50
 800480e:	2300      	movs	r3, #0
 8004810:	657b      	str	r3, [r7, #84]	@ 0x54
 8004812:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004816:	4642      	mov	r2, r8
 8004818:	464b      	mov	r3, r9
 800481a:	f04f 0000 	mov.w	r0, #0
 800481e:	f04f 0100 	mov.w	r1, #0
 8004822:	0159      	lsls	r1, r3, #5
 8004824:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004828:	0150      	lsls	r0, r2, #5
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	4641      	mov	r1, r8
 8004830:	1a51      	subs	r1, r2, r1
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	4649      	mov	r1, r9
 8004836:	eb63 0301 	sbc.w	r3, r3, r1
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004848:	4659      	mov	r1, fp
 800484a:	018b      	lsls	r3, r1, #6
 800484c:	4651      	mov	r1, sl
 800484e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004852:	4651      	mov	r1, sl
 8004854:	018a      	lsls	r2, r1, #6
 8004856:	4651      	mov	r1, sl
 8004858:	1a54      	subs	r4, r2, r1
 800485a:	4659      	mov	r1, fp
 800485c:	eb63 0501 	sbc.w	r5, r3, r1
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	00eb      	lsls	r3, r5, #3
 800486a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800486e:	00e2      	lsls	r2, r4, #3
 8004870:	4614      	mov	r4, r2
 8004872:	461d      	mov	r5, r3
 8004874:	4643      	mov	r3, r8
 8004876:	18e3      	adds	r3, r4, r3
 8004878:	603b      	str	r3, [r7, #0]
 800487a:	464b      	mov	r3, r9
 800487c:	eb45 0303 	adc.w	r3, r5, r3
 8004880:	607b      	str	r3, [r7, #4]
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	f04f 0300 	mov.w	r3, #0
 800488a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800488e:	4629      	mov	r1, r5
 8004890:	028b      	lsls	r3, r1, #10
 8004892:	4621      	mov	r1, r4
 8004894:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004898:	4621      	mov	r1, r4
 800489a:	028a      	lsls	r2, r1, #10
 800489c:	4610      	mov	r0, r2
 800489e:	4619      	mov	r1, r3
 80048a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048a4:	2200      	movs	r2, #0
 80048a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048a8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80048aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80048ae:	f7fc f9eb 	bl	8000c88 <__aeabi_uldivmod>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4613      	mov	r3, r2
 80048b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80048bc:	4b0d      	ldr	r3, [pc, #52]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	0f1b      	lsrs	r3, r3, #28
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80048ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80048ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80048d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80048da:	e003      	b.n	80048e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048dc:	4b06      	ldr	r3, [pc, #24]	@ (80048f8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80048de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80048e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	37b8      	adds	r7, #184	@ 0xb8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048f2:	bf00      	nop
 80048f4:	40023800 	.word	0x40023800
 80048f8:	00f42400 	.word	0x00f42400

080048fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e28d      	b.n	8004e2a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 8083 	beq.w	8004a22 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800491c:	4b94      	ldr	r3, [pc, #592]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 030c 	and.w	r3, r3, #12
 8004924:	2b04      	cmp	r3, #4
 8004926:	d019      	beq.n	800495c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004928:	4b91      	ldr	r3, [pc, #580]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 030c 	and.w	r3, r3, #12
        || \
 8004930:	2b08      	cmp	r3, #8
 8004932:	d106      	bne.n	8004942 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004934:	4b8e      	ldr	r3, [pc, #568]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800493c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004940:	d00c      	beq.n	800495c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004942:	4b8b      	ldr	r3, [pc, #556]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800494a:	2b0c      	cmp	r3, #12
 800494c:	d112      	bne.n	8004974 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800494e:	4b88      	ldr	r3, [pc, #544]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004956:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800495a:	d10b      	bne.n	8004974 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800495c:	4b84      	ldr	r3, [pc, #528]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d05b      	beq.n	8004a20 <HAL_RCC_OscConfig+0x124>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d157      	bne.n	8004a20 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e25a      	b.n	8004e2a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800497c:	d106      	bne.n	800498c <HAL_RCC_OscConfig+0x90>
 800497e:	4b7c      	ldr	r3, [pc, #496]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a7b      	ldr	r2, [pc, #492]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 8004984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	e01d      	b.n	80049c8 <HAL_RCC_OscConfig+0xcc>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004994:	d10c      	bne.n	80049b0 <HAL_RCC_OscConfig+0xb4>
 8004996:	4b76      	ldr	r3, [pc, #472]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a75      	ldr	r2, [pc, #468]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 800499c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	4b73      	ldr	r3, [pc, #460]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a72      	ldr	r2, [pc, #456]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 80049a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	e00b      	b.n	80049c8 <HAL_RCC_OscConfig+0xcc>
 80049b0:	4b6f      	ldr	r3, [pc, #444]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a6e      	ldr	r2, [pc, #440]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 80049b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	4b6c      	ldr	r3, [pc, #432]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a6b      	ldr	r2, [pc, #428]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 80049c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d013      	beq.n	80049f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d0:	f7fd fcb6 	bl	8002340 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049d8:	f7fd fcb2 	bl	8002340 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b64      	cmp	r3, #100	@ 0x64
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e21f      	b.n	8004e2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ea:	4b61      	ldr	r3, [pc, #388]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0f0      	beq.n	80049d8 <HAL_RCC_OscConfig+0xdc>
 80049f6:	e014      	b.n	8004a22 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f8:	f7fd fca2 	bl	8002340 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a00:	f7fd fc9e 	bl	8002340 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b64      	cmp	r3, #100	@ 0x64
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e20b      	b.n	8004e2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a12:	4b57      	ldr	r3, [pc, #348]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f0      	bne.n	8004a00 <HAL_RCC_OscConfig+0x104>
 8004a1e:	e000      	b.n	8004a22 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d06f      	beq.n	8004b0e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a2e:	4b50      	ldr	r3, [pc, #320]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d017      	beq.n	8004a6a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004a3a:	4b4d      	ldr	r3, [pc, #308]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
        || \
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d105      	bne.n	8004a52 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004a46:	4b4a      	ldr	r3, [pc, #296]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00b      	beq.n	8004a6a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a52:	4b47      	ldr	r3, [pc, #284]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004a5a:	2b0c      	cmp	r3, #12
 8004a5c:	d11c      	bne.n	8004a98 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a5e:	4b44      	ldr	r3, [pc, #272]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d116      	bne.n	8004a98 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a6a:	4b41      	ldr	r3, [pc, #260]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <HAL_RCC_OscConfig+0x186>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d001      	beq.n	8004a82 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e1d3      	b.n	8004e2a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a82:	4b3b      	ldr	r3, [pc, #236]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	4937      	ldr	r1, [pc, #220]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a96:	e03a      	b.n	8004b0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d020      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aa0:	4b34      	ldr	r3, [pc, #208]	@ (8004b74 <HAL_RCC_OscConfig+0x278>)
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa6:	f7fd fc4b 	bl	8002340 <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aae:	f7fd fc47 	bl	8002340 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e1b4      	b.n	8004e2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0f0      	beq.n	8004aae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004acc:	4b28      	ldr	r3, [pc, #160]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	4925      	ldr	r1, [pc, #148]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	600b      	str	r3, [r1, #0]
 8004ae0:	e015      	b.n	8004b0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ae2:	4b24      	ldr	r3, [pc, #144]	@ (8004b74 <HAL_RCC_OscConfig+0x278>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae8:	f7fd fc2a 	bl	8002340 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004af0:	f7fd fc26 	bl	8002340 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e193      	b.n	8004e2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b02:	4b1b      	ldr	r3, [pc, #108]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f0      	bne.n	8004af0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d036      	beq.n	8004b88 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d016      	beq.n	8004b50 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b22:	4b15      	ldr	r3, [pc, #84]	@ (8004b78 <HAL_RCC_OscConfig+0x27c>)
 8004b24:	2201      	movs	r2, #1
 8004b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b28:	f7fd fc0a 	bl	8002340 <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b30:	f7fd fc06 	bl	8002340 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e173      	b.n	8004e2a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b42:	4b0b      	ldr	r3, [pc, #44]	@ (8004b70 <HAL_RCC_OscConfig+0x274>)
 8004b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0f0      	beq.n	8004b30 <HAL_RCC_OscConfig+0x234>
 8004b4e:	e01b      	b.n	8004b88 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b50:	4b09      	ldr	r3, [pc, #36]	@ (8004b78 <HAL_RCC_OscConfig+0x27c>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b56:	f7fd fbf3 	bl	8002340 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b5c:	e00e      	b.n	8004b7c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b5e:	f7fd fbef 	bl	8002340 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d907      	bls.n	8004b7c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e15c      	b.n	8004e2a <HAL_RCC_OscConfig+0x52e>
 8004b70:	40023800 	.word	0x40023800
 8004b74:	42470000 	.word	0x42470000
 8004b78:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b7c:	4b8a      	ldr	r3, [pc, #552]	@ (8004da8 <HAL_RCC_OscConfig+0x4ac>)
 8004b7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1ea      	bne.n	8004b5e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 8097 	beq.w	8004cc4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b96:	2300      	movs	r3, #0
 8004b98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b9a:	4b83      	ldr	r3, [pc, #524]	@ (8004da8 <HAL_RCC_OscConfig+0x4ac>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10f      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60bb      	str	r3, [r7, #8]
 8004baa:	4b7f      	ldr	r3, [pc, #508]	@ (8004da8 <HAL_RCC_OscConfig+0x4ac>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bae:	4a7e      	ldr	r2, [pc, #504]	@ (8004da8 <HAL_RCC_OscConfig+0x4ac>)
 8004bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bb6:	4b7c      	ldr	r3, [pc, #496]	@ (8004da8 <HAL_RCC_OscConfig+0x4ac>)
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bbe:	60bb      	str	r3, [r7, #8]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc6:	4b79      	ldr	r3, [pc, #484]	@ (8004dac <HAL_RCC_OscConfig+0x4b0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d118      	bne.n	8004c04 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bd2:	4b76      	ldr	r3, [pc, #472]	@ (8004dac <HAL_RCC_OscConfig+0x4b0>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a75      	ldr	r2, [pc, #468]	@ (8004dac <HAL_RCC_OscConfig+0x4b0>)
 8004bd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bde:	f7fd fbaf 	bl	8002340 <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be4:	e008      	b.n	8004bf8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be6:	f7fd fbab 	bl	8002340 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e118      	b.n	8004e2a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf8:	4b6c      	ldr	r3, [pc, #432]	@ (8004dac <HAL_RCC_OscConfig+0x4b0>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0f0      	beq.n	8004be6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d106      	bne.n	8004c1a <HAL_RCC_OscConfig+0x31e>
 8004c0c:	4b66      	ldr	r3, [pc, #408]	@ (8004da8 <HAL_RCC_OscConfig+0x4ac>)
 8004c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c10:	4a65      	ldr	r2, [pc, #404]	@ (8004da8 <HAL_RCC_OscConfig+0x4ac>)
 8004c12:	f043 0301 	orr.w	r3, r3, #1
 8004c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c18:	e01c      	b.n	8004c54 <HAL_RCC_OscConfig+0x358>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	2b05      	cmp	r3, #5
 8004c20:	d10c      	bne.n	8004c3c <HAL_RCC_OscConfig+0x340>
 8004c22:	4b61      	ldr	r3, [pc, #388]	@ (8004da8 <HAL_RCC_OscConfig+0x4ac>)
 8004c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c26:	4a60      	ldr	r2, [pc, #384]	@ (8004da8 <HAL_RCC_OscConfig+0x4ac>)
 8004c28:	f043 0304 	orr.w	r3, r3, #4
 8004c2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c2e:	4b5e      	ldr	r3, [pc, #376]	@ (8004da8 <HAL_RCC_OscConfig+0x4ac>)
 8004c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c32:	4a5d      	ldr	r2, [pc, #372]	@ (8004da8 <HAL_RCC_OscConfig+0x4ac>)
 8004c34:	f043 0301 	orr.w	r3, r3, #1
 8004c38:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c3a:	e00b      	b.n	8004c54 <HAL_RCC_OscConfig+0x358>
 8004c3c:	4b5a      	ldr	r3, [pc, #360]	@ (8004da8 <HAL_RCC_OscConfig+0x4ac>)
 8004c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c40:	4a59      	ldr	r2, [pc, #356]	@ (8004da8 <HAL_RCC_OscConfig+0x4ac>)
 8004c42:	f023 0301 	bic.w	r3, r3, #1
 8004c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c48:	4b57      	ldr	r3, [pc, #348]	@ (8004da8 <HAL_RCC_OscConfig+0x4ac>)
 8004c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c4c:	4a56      	ldr	r2, [pc, #344]	@ (8004da8 <HAL_RCC_OscConfig+0x4ac>)
 8004c4e:	f023 0304 	bic.w	r3, r3, #4
 8004c52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d015      	beq.n	8004c88 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5c:	f7fd fb70 	bl	8002340 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c62:	e00a      	b.n	8004c7a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c64:	f7fd fb6c 	bl	8002340 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e0d7      	b.n	8004e2a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c7a:	4b4b      	ldr	r3, [pc, #300]	@ (8004da8 <HAL_RCC_OscConfig+0x4ac>)
 8004c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0ee      	beq.n	8004c64 <HAL_RCC_OscConfig+0x368>
 8004c86:	e014      	b.n	8004cb2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c88:	f7fd fb5a 	bl	8002340 <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c8e:	e00a      	b.n	8004ca6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c90:	f7fd fb56 	bl	8002340 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e0c1      	b.n	8004e2a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ca6:	4b40      	ldr	r3, [pc, #256]	@ (8004da8 <HAL_RCC_OscConfig+0x4ac>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1ee      	bne.n	8004c90 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cb2:	7dfb      	ldrb	r3, [r7, #23]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d105      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cb8:	4b3b      	ldr	r3, [pc, #236]	@ (8004da8 <HAL_RCC_OscConfig+0x4ac>)
 8004cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cbc:	4a3a      	ldr	r2, [pc, #232]	@ (8004da8 <HAL_RCC_OscConfig+0x4ac>)
 8004cbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cc2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 80ad 	beq.w	8004e28 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cce:	4b36      	ldr	r3, [pc, #216]	@ (8004da8 <HAL_RCC_OscConfig+0x4ac>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 030c 	and.w	r3, r3, #12
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d060      	beq.n	8004d9c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d145      	bne.n	8004d6e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce2:	4b33      	ldr	r3, [pc, #204]	@ (8004db0 <HAL_RCC_OscConfig+0x4b4>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce8:	f7fd fb2a 	bl	8002340 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf0:	f7fd fb26 	bl	8002340 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e093      	b.n	8004e2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d02:	4b29      	ldr	r3, [pc, #164]	@ (8004da8 <HAL_RCC_OscConfig+0x4ac>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f0      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69da      	ldr	r2, [r3, #28]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1c:	019b      	lsls	r3, r3, #6
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d24:	085b      	lsrs	r3, r3, #1
 8004d26:	3b01      	subs	r3, #1
 8004d28:	041b      	lsls	r3, r3, #16
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d30:	061b      	lsls	r3, r3, #24
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d38:	071b      	lsls	r3, r3, #28
 8004d3a:	491b      	ldr	r1, [pc, #108]	@ (8004da8 <HAL_RCC_OscConfig+0x4ac>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d40:	4b1b      	ldr	r3, [pc, #108]	@ (8004db0 <HAL_RCC_OscConfig+0x4b4>)
 8004d42:	2201      	movs	r2, #1
 8004d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d46:	f7fd fafb 	bl	8002340 <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d4e:	f7fd faf7 	bl	8002340 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e064      	b.n	8004e2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d60:	4b11      	ldr	r3, [pc, #68]	@ (8004da8 <HAL_RCC_OscConfig+0x4ac>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0f0      	beq.n	8004d4e <HAL_RCC_OscConfig+0x452>
 8004d6c:	e05c      	b.n	8004e28 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d6e:	4b10      	ldr	r3, [pc, #64]	@ (8004db0 <HAL_RCC_OscConfig+0x4b4>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d74:	f7fd fae4 	bl	8002340 <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d7c:	f7fd fae0 	bl	8002340 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e04d      	b.n	8004e2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d8e:	4b06      	ldr	r3, [pc, #24]	@ (8004da8 <HAL_RCC_OscConfig+0x4ac>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f0      	bne.n	8004d7c <HAL_RCC_OscConfig+0x480>
 8004d9a:	e045      	b.n	8004e28 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d107      	bne.n	8004db4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e040      	b.n	8004e2a <HAL_RCC_OscConfig+0x52e>
 8004da8:	40023800 	.word	0x40023800
 8004dac:	40007000 	.word	0x40007000
 8004db0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004db4:	4b1f      	ldr	r3, [pc, #124]	@ (8004e34 <HAL_RCC_OscConfig+0x538>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d030      	beq.n	8004e24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d129      	bne.n	8004e24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d122      	bne.n	8004e24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004de4:	4013      	ands	r3, r2
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004dea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d119      	bne.n	8004e24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfa:	085b      	lsrs	r3, r3, #1
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d10f      	bne.n	8004e24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d107      	bne.n	8004e24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d001      	beq.n	8004e28 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e000      	b.n	8004e2a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	40023800 	.word	0x40023800

08004e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e041      	b.n	8004ece <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f839 	bl	8004ed6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3304      	adds	r3, #4
 8004e74:	4619      	mov	r1, r3
 8004e76:	4610      	mov	r0, r2
 8004e78:	f000 f9c0 	bl	80051fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
	...

08004eec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d001      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e04e      	b.n	8004fa2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0201 	orr.w	r2, r2, #1
 8004f1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a23      	ldr	r2, [pc, #140]	@ (8004fb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d022      	beq.n	8004f6c <HAL_TIM_Base_Start_IT+0x80>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f2e:	d01d      	beq.n	8004f6c <HAL_TIM_Base_Start_IT+0x80>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a1f      	ldr	r2, [pc, #124]	@ (8004fb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d018      	beq.n	8004f6c <HAL_TIM_Base_Start_IT+0x80>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8004fb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d013      	beq.n	8004f6c <HAL_TIM_Base_Start_IT+0x80>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a1c      	ldr	r2, [pc, #112]	@ (8004fbc <HAL_TIM_Base_Start_IT+0xd0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00e      	beq.n	8004f6c <HAL_TIM_Base_Start_IT+0x80>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a1b      	ldr	r2, [pc, #108]	@ (8004fc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d009      	beq.n	8004f6c <HAL_TIM_Base_Start_IT+0x80>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a19      	ldr	r2, [pc, #100]	@ (8004fc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d004      	beq.n	8004f6c <HAL_TIM_Base_Start_IT+0x80>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a18      	ldr	r2, [pc, #96]	@ (8004fc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d111      	bne.n	8004f90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b06      	cmp	r3, #6
 8004f7c:	d010      	beq.n	8004fa0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 0201 	orr.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f8e:	e007      	b.n	8004fa0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	40010000 	.word	0x40010000
 8004fb4:	40000400 	.word	0x40000400
 8004fb8:	40000800 	.word	0x40000800
 8004fbc:	40000c00 	.word	0x40000c00
 8004fc0:	40010400 	.word	0x40010400
 8004fc4:	40014000 	.word	0x40014000
 8004fc8:	40001800 	.word	0x40001800

08004fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d020      	beq.n	8005030 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01b      	beq.n	8005030 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f06f 0202 	mvn.w	r2, #2
 8005000:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f8d2 	bl	80051c0 <HAL_TIM_IC_CaptureCallback>
 800501c:	e005      	b.n	800502a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f8c4 	bl	80051ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f8d5 	bl	80051d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	2b00      	cmp	r3, #0
 8005038:	d020      	beq.n	800507c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b00      	cmp	r3, #0
 8005042:	d01b      	beq.n	800507c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f06f 0204 	mvn.w	r2, #4
 800504c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2202      	movs	r2, #2
 8005052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f8ac 	bl	80051c0 <HAL_TIM_IC_CaptureCallback>
 8005068:	e005      	b.n	8005076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f89e 	bl	80051ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f8af 	bl	80051d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f003 0308 	and.w	r3, r3, #8
 8005082:	2b00      	cmp	r3, #0
 8005084:	d020      	beq.n	80050c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01b      	beq.n	80050c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f06f 0208 	mvn.w	r2, #8
 8005098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2204      	movs	r2, #4
 800509e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f886 	bl	80051c0 <HAL_TIM_IC_CaptureCallback>
 80050b4:	e005      	b.n	80050c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f878 	bl	80051ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f889 	bl	80051d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f003 0310 	and.w	r3, r3, #16
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d020      	beq.n	8005114 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f003 0310 	and.w	r3, r3, #16
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01b      	beq.n	8005114 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0210 	mvn.w	r2, #16
 80050e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2208      	movs	r2, #8
 80050ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f860 	bl	80051c0 <HAL_TIM_IC_CaptureCallback>
 8005100:	e005      	b.n	800510e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f852 	bl	80051ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f863 	bl	80051d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00c      	beq.n	8005138 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0201 	mvn.w	r2, #1
 8005130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fc fe44 	bl	8001dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00c      	beq.n	800515c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005148:	2b00      	cmp	r3, #0
 800514a:	d007      	beq.n	800515c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f900 	bl	800535c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00c      	beq.n	8005180 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800516c:	2b00      	cmp	r3, #0
 800516e:	d007      	beq.n	8005180 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f834 	bl	80051e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 0320 	and.w	r3, r3, #32
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00c      	beq.n	80051a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f003 0320 	and.w	r3, r3, #32
 8005190:	2b00      	cmp	r3, #0
 8005192:	d007      	beq.n	80051a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0220 	mvn.w	r2, #32
 800519c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f8d2 	bl	8005348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051a4:	bf00      	nop
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a43      	ldr	r2, [pc, #268]	@ (800531c <TIM_Base_SetConfig+0x120>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d013      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800521a:	d00f      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a40      	ldr	r2, [pc, #256]	@ (8005320 <TIM_Base_SetConfig+0x124>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d00b      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a3f      	ldr	r2, [pc, #252]	@ (8005324 <TIM_Base_SetConfig+0x128>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d007      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a3e      	ldr	r2, [pc, #248]	@ (8005328 <TIM_Base_SetConfig+0x12c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d003      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a3d      	ldr	r2, [pc, #244]	@ (800532c <TIM_Base_SetConfig+0x130>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d108      	bne.n	800524e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a32      	ldr	r2, [pc, #200]	@ (800531c <TIM_Base_SetConfig+0x120>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d02b      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800525c:	d027      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a2f      	ldr	r2, [pc, #188]	@ (8005320 <TIM_Base_SetConfig+0x124>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d023      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a2e      	ldr	r2, [pc, #184]	@ (8005324 <TIM_Base_SetConfig+0x128>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d01f      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a2d      	ldr	r2, [pc, #180]	@ (8005328 <TIM_Base_SetConfig+0x12c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d01b      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a2c      	ldr	r2, [pc, #176]	@ (800532c <TIM_Base_SetConfig+0x130>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d017      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a2b      	ldr	r2, [pc, #172]	@ (8005330 <TIM_Base_SetConfig+0x134>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d013      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a2a      	ldr	r2, [pc, #168]	@ (8005334 <TIM_Base_SetConfig+0x138>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d00f      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a29      	ldr	r2, [pc, #164]	@ (8005338 <TIM_Base_SetConfig+0x13c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00b      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a28      	ldr	r2, [pc, #160]	@ (800533c <TIM_Base_SetConfig+0x140>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d007      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a27      	ldr	r2, [pc, #156]	@ (8005340 <TIM_Base_SetConfig+0x144>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d003      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a26      	ldr	r2, [pc, #152]	@ (8005344 <TIM_Base_SetConfig+0x148>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d108      	bne.n	80052c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a0e      	ldr	r2, [pc, #56]	@ (800531c <TIM_Base_SetConfig+0x120>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d003      	beq.n	80052ee <TIM_Base_SetConfig+0xf2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a10      	ldr	r2, [pc, #64]	@ (800532c <TIM_Base_SetConfig+0x130>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d103      	bne.n	80052f6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f043 0204 	orr.w	r2, r3, #4
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	601a      	str	r2, [r3, #0]
}
 800530e:	bf00      	nop
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	40010000 	.word	0x40010000
 8005320:	40000400 	.word	0x40000400
 8005324:	40000800 	.word	0x40000800
 8005328:	40000c00 	.word	0x40000c00
 800532c:	40010400 	.word	0x40010400
 8005330:	40014000 	.word	0x40014000
 8005334:	40014400 	.word	0x40014400
 8005338:	40014800 	.word	0x40014800
 800533c:	40001800 	.word	0x40001800
 8005340:	40001c00 	.word	0x40001c00
 8005344:	40002000 	.word	0x40002000

08005348 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e042      	b.n	8005408 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d106      	bne.n	800539c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fc fdf0 	bl	8001f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2224      	movs	r2, #36	@ 0x24
 80053a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68da      	ldr	r2, [r3, #12]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f973 	bl	80056a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	691a      	ldr	r2, [r3, #16]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695a      	ldr	r2, [r3, #20]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08a      	sub	sp, #40	@ 0x28
 8005414:	af02      	add	r7, sp, #8
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	603b      	str	r3, [r7, #0]
 800541c:	4613      	mov	r3, r2
 800541e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b20      	cmp	r3, #32
 800542e:	d175      	bne.n	800551c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <HAL_UART_Transmit+0x2c>
 8005436:	88fb      	ldrh	r3, [r7, #6]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e06e      	b.n	800551e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2221      	movs	r2, #33	@ 0x21
 800544a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800544e:	f7fc ff77 	bl	8002340 <HAL_GetTick>
 8005452:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	88fa      	ldrh	r2, [r7, #6]
 8005458:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	88fa      	ldrh	r2, [r7, #6]
 800545e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005468:	d108      	bne.n	800547c <HAL_UART_Transmit+0x6c>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d104      	bne.n	800547c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005472:	2300      	movs	r3, #0
 8005474:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	61bb      	str	r3, [r7, #24]
 800547a:	e003      	b.n	8005484 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005480:	2300      	movs	r3, #0
 8005482:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005484:	e02e      	b.n	80054e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2200      	movs	r2, #0
 800548e:	2180      	movs	r1, #128	@ 0x80
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 f848 	bl	8005526 <UART_WaitOnFlagUntilTimeout>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e03a      	b.n	800551e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10b      	bne.n	80054c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	3302      	adds	r3, #2
 80054c2:	61bb      	str	r3, [r7, #24]
 80054c4:	e007      	b.n	80054d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	781a      	ldrb	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	3301      	adds	r3, #1
 80054d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1cb      	bne.n	8005486 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2200      	movs	r2, #0
 80054f6:	2140      	movs	r1, #64	@ 0x40
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f814 	bl	8005526 <UART_WaitOnFlagUntilTimeout>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d005      	beq.n	8005510 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e006      	b.n	800551e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005518:	2300      	movs	r3, #0
 800551a:	e000      	b.n	800551e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800551c:	2302      	movs	r3, #2
  }
}
 800551e:	4618      	mov	r0, r3
 8005520:	3720      	adds	r7, #32
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b086      	sub	sp, #24
 800552a:	af00      	add	r7, sp, #0
 800552c:	60f8      	str	r0, [r7, #12]
 800552e:	60b9      	str	r1, [r7, #8]
 8005530:	603b      	str	r3, [r7, #0]
 8005532:	4613      	mov	r3, r2
 8005534:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005536:	e03b      	b.n	80055b0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553e:	d037      	beq.n	80055b0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005540:	f7fc fefe 	bl	8002340 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	6a3a      	ldr	r2, [r7, #32]
 800554c:	429a      	cmp	r2, r3
 800554e:	d302      	bcc.n	8005556 <UART_WaitOnFlagUntilTimeout+0x30>
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e03a      	b.n	80055d0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b00      	cmp	r3, #0
 8005566:	d023      	beq.n	80055b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2b80      	cmp	r3, #128	@ 0x80
 800556c:	d020      	beq.n	80055b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2b40      	cmp	r3, #64	@ 0x40
 8005572:	d01d      	beq.n	80055b0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b08      	cmp	r3, #8
 8005580:	d116      	bne.n	80055b0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005582:	2300      	movs	r3, #0
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	617b      	str	r3, [r7, #20]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	617b      	str	r3, [r7, #20]
 8005596:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 f81d 	bl	80055d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2208      	movs	r2, #8
 80055a2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e00f      	b.n	80055d0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	4013      	ands	r3, r2
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	429a      	cmp	r2, r3
 80055be:	bf0c      	ite	eq
 80055c0:	2301      	moveq	r3, #1
 80055c2:	2300      	movne	r3, #0
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	461a      	mov	r2, r3
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d0b4      	beq.n	8005538 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055d8:	b480      	push	{r7}
 80055da:	b095      	sub	sp, #84	@ 0x54
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	330c      	adds	r3, #12
 80055e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ea:	e853 3f00 	ldrex	r3, [r3]
 80055ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	330c      	adds	r3, #12
 80055fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005600:	643a      	str	r2, [r7, #64]	@ 0x40
 8005602:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005606:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005608:	e841 2300 	strex	r3, r2, [r1]
 800560c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800560e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e5      	bne.n	80055e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3314      	adds	r3, #20
 800561a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	61fb      	str	r3, [r7, #28]
   return(result);
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f023 0301 	bic.w	r3, r3, #1
 800562a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3314      	adds	r3, #20
 8005632:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005634:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005636:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800563a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e5      	bne.n	8005614 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564c:	2b01      	cmp	r3, #1
 800564e:	d119      	bne.n	8005684 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	330c      	adds	r3, #12
 8005656:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	e853 3f00 	ldrex	r3, [r3]
 800565e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f023 0310 	bic.w	r3, r3, #16
 8005666:	647b      	str	r3, [r7, #68]	@ 0x44
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	330c      	adds	r3, #12
 800566e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005670:	61ba      	str	r2, [r7, #24]
 8005672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005674:	6979      	ldr	r1, [r7, #20]
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	e841 2300 	strex	r3, r2, [r1]
 800567c:	613b      	str	r3, [r7, #16]
   return(result);
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1e5      	bne.n	8005650 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2220      	movs	r2, #32
 8005688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005692:	bf00      	nop
 8005694:	3754      	adds	r7, #84	@ 0x54
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056a4:	b0c0      	sub	sp, #256	@ 0x100
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80056b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056bc:	68d9      	ldr	r1, [r3, #12]
 80056be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	ea40 0301 	orr.w	r3, r0, r1
 80056c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	431a      	orrs	r2, r3
 80056e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80056f8:	f021 010c 	bic.w	r1, r1, #12
 80056fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005706:	430b      	orrs	r3, r1
 8005708:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800570a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800571a:	6999      	ldr	r1, [r3, #24]
 800571c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	ea40 0301 	orr.w	r3, r0, r1
 8005726:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	4b8f      	ldr	r3, [pc, #572]	@ (800596c <UART_SetConfig+0x2cc>)
 8005730:	429a      	cmp	r2, r3
 8005732:	d005      	beq.n	8005740 <UART_SetConfig+0xa0>
 8005734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	4b8d      	ldr	r3, [pc, #564]	@ (8005970 <UART_SetConfig+0x2d0>)
 800573c:	429a      	cmp	r2, r3
 800573e:	d104      	bne.n	800574a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005740:	f7fe fe66 	bl	8004410 <HAL_RCC_GetPCLK2Freq>
 8005744:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005748:	e003      	b.n	8005752 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800574a:	f7fe fe4d 	bl	80043e8 <HAL_RCC_GetPCLK1Freq>
 800574e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800575c:	f040 810c 	bne.w	8005978 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005764:	2200      	movs	r2, #0
 8005766:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800576a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800576e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005772:	4622      	mov	r2, r4
 8005774:	462b      	mov	r3, r5
 8005776:	1891      	adds	r1, r2, r2
 8005778:	65b9      	str	r1, [r7, #88]	@ 0x58
 800577a:	415b      	adcs	r3, r3
 800577c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800577e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005782:	4621      	mov	r1, r4
 8005784:	eb12 0801 	adds.w	r8, r2, r1
 8005788:	4629      	mov	r1, r5
 800578a:	eb43 0901 	adc.w	r9, r3, r1
 800578e:	f04f 0200 	mov.w	r2, #0
 8005792:	f04f 0300 	mov.w	r3, #0
 8005796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800579a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800579e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057a2:	4690      	mov	r8, r2
 80057a4:	4699      	mov	r9, r3
 80057a6:	4623      	mov	r3, r4
 80057a8:	eb18 0303 	adds.w	r3, r8, r3
 80057ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80057b0:	462b      	mov	r3, r5
 80057b2:	eb49 0303 	adc.w	r3, r9, r3
 80057b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80057c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80057ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80057ce:	460b      	mov	r3, r1
 80057d0:	18db      	adds	r3, r3, r3
 80057d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80057d4:	4613      	mov	r3, r2
 80057d6:	eb42 0303 	adc.w	r3, r2, r3
 80057da:	657b      	str	r3, [r7, #84]	@ 0x54
 80057dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80057e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80057e4:	f7fb fa50 	bl	8000c88 <__aeabi_uldivmod>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4b61      	ldr	r3, [pc, #388]	@ (8005974 <UART_SetConfig+0x2d4>)
 80057ee:	fba3 2302 	umull	r2, r3, r3, r2
 80057f2:	095b      	lsrs	r3, r3, #5
 80057f4:	011c      	lsls	r4, r3, #4
 80057f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005800:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005804:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005808:	4642      	mov	r2, r8
 800580a:	464b      	mov	r3, r9
 800580c:	1891      	adds	r1, r2, r2
 800580e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005810:	415b      	adcs	r3, r3
 8005812:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005814:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005818:	4641      	mov	r1, r8
 800581a:	eb12 0a01 	adds.w	sl, r2, r1
 800581e:	4649      	mov	r1, r9
 8005820:	eb43 0b01 	adc.w	fp, r3, r1
 8005824:	f04f 0200 	mov.w	r2, #0
 8005828:	f04f 0300 	mov.w	r3, #0
 800582c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005830:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005834:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005838:	4692      	mov	sl, r2
 800583a:	469b      	mov	fp, r3
 800583c:	4643      	mov	r3, r8
 800583e:	eb1a 0303 	adds.w	r3, sl, r3
 8005842:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005846:	464b      	mov	r3, r9
 8005848:	eb4b 0303 	adc.w	r3, fp, r3
 800584c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800585c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005860:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005864:	460b      	mov	r3, r1
 8005866:	18db      	adds	r3, r3, r3
 8005868:	643b      	str	r3, [r7, #64]	@ 0x40
 800586a:	4613      	mov	r3, r2
 800586c:	eb42 0303 	adc.w	r3, r2, r3
 8005870:	647b      	str	r3, [r7, #68]	@ 0x44
 8005872:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005876:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800587a:	f7fb fa05 	bl	8000c88 <__aeabi_uldivmod>
 800587e:	4602      	mov	r2, r0
 8005880:	460b      	mov	r3, r1
 8005882:	4611      	mov	r1, r2
 8005884:	4b3b      	ldr	r3, [pc, #236]	@ (8005974 <UART_SetConfig+0x2d4>)
 8005886:	fba3 2301 	umull	r2, r3, r3, r1
 800588a:	095b      	lsrs	r3, r3, #5
 800588c:	2264      	movs	r2, #100	@ 0x64
 800588e:	fb02 f303 	mul.w	r3, r2, r3
 8005892:	1acb      	subs	r3, r1, r3
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800589a:	4b36      	ldr	r3, [pc, #216]	@ (8005974 <UART_SetConfig+0x2d4>)
 800589c:	fba3 2302 	umull	r2, r3, r3, r2
 80058a0:	095b      	lsrs	r3, r3, #5
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80058a8:	441c      	add	r4, r3
 80058aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058ae:	2200      	movs	r2, #0
 80058b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80058b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80058bc:	4642      	mov	r2, r8
 80058be:	464b      	mov	r3, r9
 80058c0:	1891      	adds	r1, r2, r2
 80058c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80058c4:	415b      	adcs	r3, r3
 80058c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80058cc:	4641      	mov	r1, r8
 80058ce:	1851      	adds	r1, r2, r1
 80058d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80058d2:	4649      	mov	r1, r9
 80058d4:	414b      	adcs	r3, r1
 80058d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80058d8:	f04f 0200 	mov.w	r2, #0
 80058dc:	f04f 0300 	mov.w	r3, #0
 80058e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80058e4:	4659      	mov	r1, fp
 80058e6:	00cb      	lsls	r3, r1, #3
 80058e8:	4651      	mov	r1, sl
 80058ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ee:	4651      	mov	r1, sl
 80058f0:	00ca      	lsls	r2, r1, #3
 80058f2:	4610      	mov	r0, r2
 80058f4:	4619      	mov	r1, r3
 80058f6:	4603      	mov	r3, r0
 80058f8:	4642      	mov	r2, r8
 80058fa:	189b      	adds	r3, r3, r2
 80058fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005900:	464b      	mov	r3, r9
 8005902:	460a      	mov	r2, r1
 8005904:	eb42 0303 	adc.w	r3, r2, r3
 8005908:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005918:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800591c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005920:	460b      	mov	r3, r1
 8005922:	18db      	adds	r3, r3, r3
 8005924:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005926:	4613      	mov	r3, r2
 8005928:	eb42 0303 	adc.w	r3, r2, r3
 800592c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800592e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005932:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005936:	f7fb f9a7 	bl	8000c88 <__aeabi_uldivmod>
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	4b0d      	ldr	r3, [pc, #52]	@ (8005974 <UART_SetConfig+0x2d4>)
 8005940:	fba3 1302 	umull	r1, r3, r3, r2
 8005944:	095b      	lsrs	r3, r3, #5
 8005946:	2164      	movs	r1, #100	@ 0x64
 8005948:	fb01 f303 	mul.w	r3, r1, r3
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	3332      	adds	r3, #50	@ 0x32
 8005952:	4a08      	ldr	r2, [pc, #32]	@ (8005974 <UART_SetConfig+0x2d4>)
 8005954:	fba2 2303 	umull	r2, r3, r2, r3
 8005958:	095b      	lsrs	r3, r3, #5
 800595a:	f003 0207 	and.w	r2, r3, #7
 800595e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4422      	add	r2, r4
 8005966:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005968:	e106      	b.n	8005b78 <UART_SetConfig+0x4d8>
 800596a:	bf00      	nop
 800596c:	40011000 	.word	0x40011000
 8005970:	40011400 	.word	0x40011400
 8005974:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800597c:	2200      	movs	r2, #0
 800597e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005982:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005986:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800598a:	4642      	mov	r2, r8
 800598c:	464b      	mov	r3, r9
 800598e:	1891      	adds	r1, r2, r2
 8005990:	6239      	str	r1, [r7, #32]
 8005992:	415b      	adcs	r3, r3
 8005994:	627b      	str	r3, [r7, #36]	@ 0x24
 8005996:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800599a:	4641      	mov	r1, r8
 800599c:	1854      	adds	r4, r2, r1
 800599e:	4649      	mov	r1, r9
 80059a0:	eb43 0501 	adc.w	r5, r3, r1
 80059a4:	f04f 0200 	mov.w	r2, #0
 80059a8:	f04f 0300 	mov.w	r3, #0
 80059ac:	00eb      	lsls	r3, r5, #3
 80059ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059b2:	00e2      	lsls	r2, r4, #3
 80059b4:	4614      	mov	r4, r2
 80059b6:	461d      	mov	r5, r3
 80059b8:	4643      	mov	r3, r8
 80059ba:	18e3      	adds	r3, r4, r3
 80059bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80059c0:	464b      	mov	r3, r9
 80059c2:	eb45 0303 	adc.w	r3, r5, r3
 80059c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80059ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059da:	f04f 0200 	mov.w	r2, #0
 80059de:	f04f 0300 	mov.w	r3, #0
 80059e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80059e6:	4629      	mov	r1, r5
 80059e8:	008b      	lsls	r3, r1, #2
 80059ea:	4621      	mov	r1, r4
 80059ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059f0:	4621      	mov	r1, r4
 80059f2:	008a      	lsls	r2, r1, #2
 80059f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80059f8:	f7fb f946 	bl	8000c88 <__aeabi_uldivmod>
 80059fc:	4602      	mov	r2, r0
 80059fe:	460b      	mov	r3, r1
 8005a00:	4b60      	ldr	r3, [pc, #384]	@ (8005b84 <UART_SetConfig+0x4e4>)
 8005a02:	fba3 2302 	umull	r2, r3, r3, r2
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	011c      	lsls	r4, r3, #4
 8005a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a1c:	4642      	mov	r2, r8
 8005a1e:	464b      	mov	r3, r9
 8005a20:	1891      	adds	r1, r2, r2
 8005a22:	61b9      	str	r1, [r7, #24]
 8005a24:	415b      	adcs	r3, r3
 8005a26:	61fb      	str	r3, [r7, #28]
 8005a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a2c:	4641      	mov	r1, r8
 8005a2e:	1851      	adds	r1, r2, r1
 8005a30:	6139      	str	r1, [r7, #16]
 8005a32:	4649      	mov	r1, r9
 8005a34:	414b      	adcs	r3, r1
 8005a36:	617b      	str	r3, [r7, #20]
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	f04f 0300 	mov.w	r3, #0
 8005a40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a44:	4659      	mov	r1, fp
 8005a46:	00cb      	lsls	r3, r1, #3
 8005a48:	4651      	mov	r1, sl
 8005a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a4e:	4651      	mov	r1, sl
 8005a50:	00ca      	lsls	r2, r1, #3
 8005a52:	4610      	mov	r0, r2
 8005a54:	4619      	mov	r1, r3
 8005a56:	4603      	mov	r3, r0
 8005a58:	4642      	mov	r2, r8
 8005a5a:	189b      	adds	r3, r3, r2
 8005a5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a60:	464b      	mov	r3, r9
 8005a62:	460a      	mov	r2, r1
 8005a64:	eb42 0303 	adc.w	r3, r2, r3
 8005a68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a78:	f04f 0200 	mov.w	r2, #0
 8005a7c:	f04f 0300 	mov.w	r3, #0
 8005a80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a84:	4649      	mov	r1, r9
 8005a86:	008b      	lsls	r3, r1, #2
 8005a88:	4641      	mov	r1, r8
 8005a8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a8e:	4641      	mov	r1, r8
 8005a90:	008a      	lsls	r2, r1, #2
 8005a92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a96:	f7fb f8f7 	bl	8000c88 <__aeabi_uldivmod>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4611      	mov	r1, r2
 8005aa0:	4b38      	ldr	r3, [pc, #224]	@ (8005b84 <UART_SetConfig+0x4e4>)
 8005aa2:	fba3 2301 	umull	r2, r3, r3, r1
 8005aa6:	095b      	lsrs	r3, r3, #5
 8005aa8:	2264      	movs	r2, #100	@ 0x64
 8005aaa:	fb02 f303 	mul.w	r3, r2, r3
 8005aae:	1acb      	subs	r3, r1, r3
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	3332      	adds	r3, #50	@ 0x32
 8005ab4:	4a33      	ldr	r2, [pc, #204]	@ (8005b84 <UART_SetConfig+0x4e4>)
 8005ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aba:	095b      	lsrs	r3, r3, #5
 8005abc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ac0:	441c      	add	r4, r3
 8005ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005aca:	677a      	str	r2, [r7, #116]	@ 0x74
 8005acc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ad0:	4642      	mov	r2, r8
 8005ad2:	464b      	mov	r3, r9
 8005ad4:	1891      	adds	r1, r2, r2
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	415b      	adcs	r3, r3
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ae0:	4641      	mov	r1, r8
 8005ae2:	1851      	adds	r1, r2, r1
 8005ae4:	6039      	str	r1, [r7, #0]
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	414b      	adcs	r3, r1
 8005aea:	607b      	str	r3, [r7, #4]
 8005aec:	f04f 0200 	mov.w	r2, #0
 8005af0:	f04f 0300 	mov.w	r3, #0
 8005af4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005af8:	4659      	mov	r1, fp
 8005afa:	00cb      	lsls	r3, r1, #3
 8005afc:	4651      	mov	r1, sl
 8005afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b02:	4651      	mov	r1, sl
 8005b04:	00ca      	lsls	r2, r1, #3
 8005b06:	4610      	mov	r0, r2
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	4642      	mov	r2, r8
 8005b0e:	189b      	adds	r3, r3, r2
 8005b10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b12:	464b      	mov	r3, r9
 8005b14:	460a      	mov	r2, r1
 8005b16:	eb42 0303 	adc.w	r3, r2, r3
 8005b1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b26:	667a      	str	r2, [r7, #100]	@ 0x64
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005b34:	4649      	mov	r1, r9
 8005b36:	008b      	lsls	r3, r1, #2
 8005b38:	4641      	mov	r1, r8
 8005b3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b3e:	4641      	mov	r1, r8
 8005b40:	008a      	lsls	r2, r1, #2
 8005b42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005b46:	f7fb f89f 	bl	8000c88 <__aeabi_uldivmod>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b84 <UART_SetConfig+0x4e4>)
 8005b50:	fba3 1302 	umull	r1, r3, r3, r2
 8005b54:	095b      	lsrs	r3, r3, #5
 8005b56:	2164      	movs	r1, #100	@ 0x64
 8005b58:	fb01 f303 	mul.w	r3, r1, r3
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	3332      	adds	r3, #50	@ 0x32
 8005b62:	4a08      	ldr	r2, [pc, #32]	@ (8005b84 <UART_SetConfig+0x4e4>)
 8005b64:	fba2 2303 	umull	r2, r3, r2, r3
 8005b68:	095b      	lsrs	r3, r3, #5
 8005b6a:	f003 020f 	and.w	r2, r3, #15
 8005b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4422      	add	r2, r4
 8005b76:	609a      	str	r2, [r3, #8]
}
 8005b78:	bf00      	nop
 8005b7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b84:	51eb851f 	.word	0x51eb851f

08005b88 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f103 0208 	add.w	r2, r3, #8
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f103 0208 	add.w	r2, r3, #8
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f103 0208 	add.w	r2, r3, #8
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8005be2:	b480      	push	{r7}
 8005be4:	b085      	sub	sp, #20
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	601a      	str	r2, [r3, #0]
}
 8005c1e:	bf00      	nop
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b085      	sub	sp, #20
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c40:	d103      	bne.n	8005c4a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	e00c      	b.n	8005c64 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3308      	adds	r3, #8
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	e002      	b.n	8005c58 <vListInsert+0x2e>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d2f6      	bcs.n	8005c52 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	601a      	str	r2, [r3, #0]
}
 8005c90:	bf00      	nop
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	6892      	ldr	r2, [r2, #8]
 8005cb2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6852      	ldr	r2, [r2, #4]
 8005cbc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d103      	bne.n	8005cd0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	1e5a      	subs	r2, r3, #1
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10b      	bne.n	8005d1c <xQueueGenericReset+0x2c>
        __asm volatile
 8005d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	60bb      	str	r3, [r7, #8]
    }
 8005d16:	bf00      	nop
 8005d18:	bf00      	nop
 8005d1a:	e7fd      	b.n	8005d18 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8005d1c:	f001 ffbe 	bl	8007c9c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d28:	68f9      	ldr	r1, [r7, #12]
 8005d2a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005d2c:	fb01 f303 	mul.w	r3, r1, r3
 8005d30:	441a      	add	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	68f9      	ldr	r1, [r7, #12]
 8005d50:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005d52:	fb01 f303 	mul.w	r3, r1, r3
 8005d56:	441a      	add	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	22ff      	movs	r2, #255	@ 0xff
 8005d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	22ff      	movs	r2, #255	@ 0xff
 8005d68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d114      	bne.n	8005d9c <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d01a      	beq.n	8005db0 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	3310      	adds	r3, #16
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f001 f898 	bl	8006eb4 <xTaskRemoveFromEventList>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d012      	beq.n	8005db0 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8005d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc0 <xQueueGenericReset+0xd0>)
 8005d8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	e009      	b.n	8005db0 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3310      	adds	r3, #16
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff fef1 	bl	8005b88 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	3324      	adds	r3, #36	@ 0x24
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7ff feec 	bl	8005b88 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8005db0:	f001 ffa6 	bl	8007d00 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8005db4:	2301      	movs	r3, #1
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	e000ed04 	.word	0xe000ed04

08005dc4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08c      	sub	sp, #48	@ 0x30
 8005dc8:	af02      	add	r7, sp, #8
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10b      	bne.n	8005df0 <xQueueGenericCreate+0x2c>
        __asm volatile
 8005dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ddc:	f383 8811 	msr	BASEPRI, r3
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	61bb      	str	r3, [r7, #24]
    }
 8005dea:	bf00      	nop
 8005dec:	bf00      	nop
 8005dee:	e7fd      	b.n	8005dec <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	fb02 f303 	mul.w	r3, r2, r3
 8005df8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d006      	beq.n	8005e0e <xQueueGenericCreate+0x4a>
 8005e00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d101      	bne.n	8005e12 <xQueueGenericCreate+0x4e>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <xQueueGenericCreate+0x50>
 8005e12:	2300      	movs	r3, #0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10b      	bne.n	8005e30 <xQueueGenericCreate+0x6c>
        __asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	617b      	str	r3, [r7, #20]
    }
 8005e2a:	bf00      	nop
 8005e2c:	bf00      	nop
 8005e2e:	e7fd      	b.n	8005e2c <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8005e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e32:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8005e36:	d90b      	bls.n	8005e50 <xQueueGenericCreate+0x8c>
        __asm volatile
 8005e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3c:	f383 8811 	msr	BASEPRI, r3
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	613b      	str	r3, [r7, #16]
    }
 8005e4a:	bf00      	nop
 8005e4c:	bf00      	nop
 8005e4e:	e7fd      	b.n	8005e4c <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e52:	3350      	adds	r3, #80	@ 0x50
 8005e54:	4618      	mov	r0, r3
 8005e56:	f002 f84b 	bl	8007ef0 <pvPortMalloc>
 8005e5a:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00d      	beq.n	8005e7e <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	3350      	adds	r3, #80	@ 0x50
 8005e6a:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e6c:	79fa      	ldrb	r2, [r7, #7]
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	4613      	mov	r3, r2
 8005e74:	69fa      	ldr	r2, [r7, #28]
 8005e76:	68b9      	ldr	r1, [r7, #8]
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f000 f805 	bl	8005e88 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
    }
 8005e80:	4618      	mov	r0, r3
 8005e82:	3728      	adds	r7, #40	@ 0x28
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d103      	bne.n	8005ea4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	e002      	b.n	8005eaa <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	69b8      	ldr	r0, [r7, #24]
 8005eba:	f7ff ff19 	bl	8005cf0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	78fa      	ldrb	r2, [r7, #3]
 8005ec2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005ec6:	bf00      	nop
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08e      	sub	sp, #56	@ 0x38
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10b      	bne.n	8005f04 <xQueueGenericSend+0x34>
        __asm volatile
 8005eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005efe:	bf00      	nop
 8005f00:	bf00      	nop
 8005f02:	e7fd      	b.n	8005f00 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d103      	bne.n	8005f12 <xQueueGenericSend+0x42>
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <xQueueGenericSend+0x46>
 8005f12:	2301      	movs	r3, #1
 8005f14:	e000      	b.n	8005f18 <xQueueGenericSend+0x48>
 8005f16:	2300      	movs	r3, #0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10b      	bne.n	8005f34 <xQueueGenericSend+0x64>
        __asm volatile
 8005f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005f2e:	bf00      	nop
 8005f30:	bf00      	nop
 8005f32:	e7fd      	b.n	8005f30 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d103      	bne.n	8005f42 <xQueueGenericSend+0x72>
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d101      	bne.n	8005f46 <xQueueGenericSend+0x76>
 8005f42:	2301      	movs	r3, #1
 8005f44:	e000      	b.n	8005f48 <xQueueGenericSend+0x78>
 8005f46:	2300      	movs	r3, #0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10b      	bne.n	8005f64 <xQueueGenericSend+0x94>
        __asm volatile
 8005f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	623b      	str	r3, [r7, #32]
    }
 8005f5e:	bf00      	nop
 8005f60:	bf00      	nop
 8005f62:	e7fd      	b.n	8005f60 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f64:	f001 f946 	bl	80071f4 <xTaskGetSchedulerState>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d102      	bne.n	8005f74 <xQueueGenericSend+0xa4>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <xQueueGenericSend+0xa8>
 8005f74:	2301      	movs	r3, #1
 8005f76:	e000      	b.n	8005f7a <xQueueGenericSend+0xaa>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10b      	bne.n	8005f96 <xQueueGenericSend+0xc6>
        __asm volatile
 8005f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	61fb      	str	r3, [r7, #28]
    }
 8005f90:	bf00      	nop
 8005f92:	bf00      	nop
 8005f94:	e7fd      	b.n	8005f92 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005f96:	f001 fe81 	bl	8007c9c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d302      	bcc.n	8005fac <xQueueGenericSend+0xdc>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d129      	bne.n	8006000 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	68b9      	ldr	r1, [r7, #8]
 8005fb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fb2:	f000 fa1f 	bl	80063f4 <prvCopyDataToQueue>
 8005fb6:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d010      	beq.n	8005fe2 <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc2:	3324      	adds	r3, #36	@ 0x24
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 ff75 	bl	8006eb4 <xTaskRemoveFromEventList>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d013      	beq.n	8005ff8 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8005fd0:	4b3f      	ldr	r3, [pc, #252]	@ (80060d0 <xQueueGenericSend+0x200>)
 8005fd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	e00a      	b.n	8005ff8 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8005fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d007      	beq.n	8005ff8 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005fe8:	4b39      	ldr	r3, [pc, #228]	@ (80060d0 <xQueueGenericSend+0x200>)
 8005fea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005ff8:	f001 fe82 	bl	8007d00 <vPortExitCritical>
                return pdPASS;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e063      	b.n	80060c8 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d103      	bne.n	800600e <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006006:	f001 fe7b 	bl	8007d00 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800600a:	2300      	movs	r3, #0
 800600c:	e05c      	b.n	80060c8 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800600e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006010:	2b00      	cmp	r3, #0
 8006012:	d106      	bne.n	8006022 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006014:	f107 0314 	add.w	r3, r7, #20
 8006018:	4618      	mov	r0, r3
 800601a:	f000 ffaf 	bl	8006f7c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800601e:	2301      	movs	r3, #1
 8006020:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006022:	f001 fe6d 	bl	8007d00 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006026:	f000 fd21 	bl	8006a6c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800602a:	f001 fe37 	bl	8007c9c <vPortEnterCritical>
 800602e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006030:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006034:	b25b      	sxtb	r3, r3
 8006036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603a:	d103      	bne.n	8006044 <xQueueGenericSend+0x174>
 800603c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006046:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800604a:	b25b      	sxtb	r3, r3
 800604c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006050:	d103      	bne.n	800605a <xQueueGenericSend+0x18a>
 8006052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800605a:	f001 fe51 	bl	8007d00 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800605e:	1d3a      	adds	r2, r7, #4
 8006060:	f107 0314 	add.w	r3, r7, #20
 8006064:	4611      	mov	r1, r2
 8006066:	4618      	mov	r0, r3
 8006068:	f000 ff9e 	bl	8006fa8 <xTaskCheckForTimeOut>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d124      	bne.n	80060bc <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006072:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006074:	f000 fab6 	bl	80065e4 <prvIsQueueFull>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d018      	beq.n	80060b0 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800607e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006080:	3310      	adds	r3, #16
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	4611      	mov	r1, r2
 8006086:	4618      	mov	r0, r3
 8006088:	f000 fec2 	bl	8006e10 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800608c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800608e:	f000 fa41 	bl	8006514 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8006092:	f000 fcf9 	bl	8006a88 <xTaskResumeAll>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	f47f af7c 	bne.w	8005f96 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 800609e:	4b0c      	ldr	r3, [pc, #48]	@ (80060d0 <xQueueGenericSend+0x200>)
 80060a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	e772      	b.n	8005f96 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80060b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060b2:	f000 fa2f 	bl	8006514 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80060b6:	f000 fce7 	bl	8006a88 <xTaskResumeAll>
 80060ba:	e76c      	b.n	8005f96 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80060bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060be:	f000 fa29 	bl	8006514 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80060c2:	f000 fce1 	bl	8006a88 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80060c6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3738      	adds	r7, #56	@ 0x38
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	e000ed04 	.word	0xe000ed04

080060d4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b090      	sub	sp, #64	@ 0x40
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 80060e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10b      	bne.n	8006104 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80060fe:	bf00      	nop
 8006100:	bf00      	nop
 8006102:	e7fd      	b.n	8006100 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d103      	bne.n	8006112 <xQueueGenericSendFromISR+0x3e>
 800610a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <xQueueGenericSendFromISR+0x42>
 8006112:	2301      	movs	r3, #1
 8006114:	e000      	b.n	8006118 <xQueueGenericSendFromISR+0x44>
 8006116:	2300      	movs	r3, #0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10b      	bne.n	8006134 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800612e:	bf00      	nop
 8006130:	bf00      	nop
 8006132:	e7fd      	b.n	8006130 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b02      	cmp	r3, #2
 8006138:	d103      	bne.n	8006142 <xQueueGenericSendFromISR+0x6e>
 800613a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800613c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <xQueueGenericSendFromISR+0x72>
 8006142:	2301      	movs	r3, #1
 8006144:	e000      	b.n	8006148 <xQueueGenericSendFromISR+0x74>
 8006146:	2300      	movs	r3, #0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10b      	bne.n	8006164 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	623b      	str	r3, [r7, #32]
    }
 800615e:	bf00      	nop
 8006160:	bf00      	nop
 8006162:	e7fd      	b.n	8006160 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006164:	f001 fe82 	bl	8007e6c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8006168:	f3ef 8211 	mrs	r2, BASEPRI
 800616c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	61fa      	str	r2, [r7, #28]
 800617e:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8006180:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006182:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006186:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800618a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800618c:	429a      	cmp	r2, r3
 800618e:	d302      	bcc.n	8006196 <xQueueGenericSendFromISR+0xc2>
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	2b02      	cmp	r3, #2
 8006194:	d13f      	bne.n	8006216 <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8006196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006198:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800619c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	68b9      	ldr	r1, [r7, #8]
 80061aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80061ac:	f000 f922 	bl	80063f4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80061b0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80061b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b8:	d112      	bne.n	80061e0 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d026      	beq.n	8006210 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c4:	3324      	adds	r3, #36	@ 0x24
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 fe74 	bl	8006eb4 <xTaskRemoveFromEventList>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d01e      	beq.n	8006210 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d01b      	beq.n	8006210 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	e017      	b.n	8006210 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80061e0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80061e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80061e6:	d10b      	bne.n	8006200 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	617b      	str	r3, [r7, #20]
    }
 80061fa:	bf00      	nop
 80061fc:	bf00      	nop
 80061fe:	e7fd      	b.n	80061fc <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006200:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006204:	3301      	adds	r3, #1
 8006206:	b2db      	uxtb	r3, r3
 8006208:	b25a      	sxtb	r2, r3
 800620a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800620c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8006210:	2301      	movs	r3, #1
 8006212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8006214:	e001      	b.n	800621a <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8006216:	2300      	movs	r3, #0
 8006218:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800621a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800621c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006224:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006228:	4618      	mov	r0, r3
 800622a:	3740      	adds	r7, #64	@ 0x40
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b08c      	sub	sp, #48	@ 0x30
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800623c:	2300      	movs	r3, #0
 800623e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10b      	bne.n	8006262 <xQueueReceive+0x32>
        __asm volatile
 800624a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	623b      	str	r3, [r7, #32]
    }
 800625c:	bf00      	nop
 800625e:	bf00      	nop
 8006260:	e7fd      	b.n	800625e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d103      	bne.n	8006270 <xQueueReceive+0x40>
 8006268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <xQueueReceive+0x44>
 8006270:	2301      	movs	r3, #1
 8006272:	e000      	b.n	8006276 <xQueueReceive+0x46>
 8006274:	2300      	movs	r3, #0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10b      	bne.n	8006292 <xQueueReceive+0x62>
        __asm volatile
 800627a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627e:	f383 8811 	msr	BASEPRI, r3
 8006282:	f3bf 8f6f 	isb	sy
 8006286:	f3bf 8f4f 	dsb	sy
 800628a:	61fb      	str	r3, [r7, #28]
    }
 800628c:	bf00      	nop
 800628e:	bf00      	nop
 8006290:	e7fd      	b.n	800628e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006292:	f000 ffaf 	bl	80071f4 <xTaskGetSchedulerState>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d102      	bne.n	80062a2 <xQueueReceive+0x72>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <xQueueReceive+0x76>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e000      	b.n	80062a8 <xQueueReceive+0x78>
 80062a6:	2300      	movs	r3, #0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10b      	bne.n	80062c4 <xQueueReceive+0x94>
        __asm volatile
 80062ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b0:	f383 8811 	msr	BASEPRI, r3
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	61bb      	str	r3, [r7, #24]
    }
 80062be:	bf00      	nop
 80062c0:	bf00      	nop
 80062c2:	e7fd      	b.n	80062c0 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80062c4:	f001 fcea 	bl	8007c9c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062cc:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d01f      	beq.n	8006314 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062d4:	68b9      	ldr	r1, [r7, #8]
 80062d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062d8:	f000 f8f6 	bl	80064c8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062de:	1e5a      	subs	r2, r3, #1
 80062e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00f      	beq.n	800630c <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ee:	3310      	adds	r3, #16
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fddf 	bl	8006eb4 <xTaskRemoveFromEventList>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d007      	beq.n	800630c <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80062fc:	4b3c      	ldr	r3, [pc, #240]	@ (80063f0 <xQueueReceive+0x1c0>)
 80062fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800630c:	f001 fcf8 	bl	8007d00 <vPortExitCritical>
                return pdPASS;
 8006310:	2301      	movs	r3, #1
 8006312:	e069      	b.n	80063e8 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d103      	bne.n	8006322 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800631a:	f001 fcf1 	bl	8007d00 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800631e:	2300      	movs	r3, #0
 8006320:	e062      	b.n	80063e8 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006324:	2b00      	cmp	r3, #0
 8006326:	d106      	bne.n	8006336 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006328:	f107 0310 	add.w	r3, r7, #16
 800632c:	4618      	mov	r0, r3
 800632e:	f000 fe25 	bl	8006f7c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006332:	2301      	movs	r3, #1
 8006334:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006336:	f001 fce3 	bl	8007d00 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800633a:	f000 fb97 	bl	8006a6c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800633e:	f001 fcad 	bl	8007c9c <vPortEnterCritical>
 8006342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006344:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006348:	b25b      	sxtb	r3, r3
 800634a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634e:	d103      	bne.n	8006358 <xQueueReceive+0x128>
 8006350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800635e:	b25b      	sxtb	r3, r3
 8006360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006364:	d103      	bne.n	800636e <xQueueReceive+0x13e>
 8006366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800636e:	f001 fcc7 	bl	8007d00 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006372:	1d3a      	adds	r2, r7, #4
 8006374:	f107 0310 	add.w	r3, r7, #16
 8006378:	4611      	mov	r1, r2
 800637a:	4618      	mov	r0, r3
 800637c:	f000 fe14 	bl	8006fa8 <xTaskCheckForTimeOut>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d123      	bne.n	80063ce <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006386:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006388:	f000 f916 	bl	80065b8 <prvIsQueueEmpty>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d017      	beq.n	80063c2 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006394:	3324      	adds	r3, #36	@ 0x24
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	4611      	mov	r1, r2
 800639a:	4618      	mov	r0, r3
 800639c:	f000 fd38 	bl	8006e10 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80063a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063a2:	f000 f8b7 	bl	8006514 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80063a6:	f000 fb6f 	bl	8006a88 <xTaskResumeAll>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d189      	bne.n	80062c4 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80063b0:	4b0f      	ldr	r3, [pc, #60]	@ (80063f0 <xQueueReceive+0x1c0>)
 80063b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	e780      	b.n	80062c4 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80063c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063c4:	f000 f8a6 	bl	8006514 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80063c8:	f000 fb5e 	bl	8006a88 <xTaskResumeAll>
 80063cc:	e77a      	b.n	80062c4 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80063ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063d0:	f000 f8a0 	bl	8006514 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80063d4:	f000 fb58 	bl	8006a88 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063da:	f000 f8ed 	bl	80065b8 <prvIsQueueEmpty>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f43f af6f 	beq.w	80062c4 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80063e6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3730      	adds	r7, #48	@ 0x30
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	e000ed04 	.word	0xe000ed04

080063f4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8006400:	2300      	movs	r3, #0
 8006402:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006408:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10d      	bne.n	800642e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d14d      	bne.n	80064b6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	4618      	mov	r0, r3
 8006420:	f000 ff06 	bl	8007230 <xTaskPriorityDisinherit>
 8006424:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	609a      	str	r2, [r3, #8]
 800642c:	e043      	b.n	80064b6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d119      	bne.n	8006468 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6858      	ldr	r0, [r3, #4]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643c:	461a      	mov	r2, r3
 800643e:	68b9      	ldr	r1, [r7, #8]
 8006440:	f002 fe59 	bl	80090f6 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644c:	441a      	add	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	429a      	cmp	r2, r3
 800645c:	d32b      	bcc.n	80064b6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	605a      	str	r2, [r3, #4]
 8006466:	e026      	b.n	80064b6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	68d8      	ldr	r0, [r3, #12]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006470:	461a      	mov	r2, r3
 8006472:	68b9      	ldr	r1, [r7, #8]
 8006474:	f002 fe3f 	bl	80090f6 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	68da      	ldr	r2, [r3, #12]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006480:	425b      	negs	r3, r3
 8006482:	441a      	add	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	429a      	cmp	r2, r3
 8006492:	d207      	bcs.n	80064a4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649c:	425b      	negs	r3, r3
 800649e:	441a      	add	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d105      	bne.n	80064b6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	3b01      	subs	r3, #1
 80064b4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	1c5a      	adds	r2, r3, #1
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80064be:	697b      	ldr	r3, [r7, #20]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d018      	beq.n	800650c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e2:	441a      	add	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d303      	bcc.n	80064fc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68d9      	ldr	r1, [r3, #12]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006504:	461a      	mov	r2, r3
 8006506:	6838      	ldr	r0, [r7, #0]
 8006508:	f002 fdf5 	bl	80090f6 <memcpy>
    }
}
 800650c:	bf00      	nop
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800651c:	f001 fbbe 	bl	8007c9c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006526:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006528:	e011      	b.n	800654e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652e:	2b00      	cmp	r3, #0
 8006530:	d012      	beq.n	8006558 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	3324      	adds	r3, #36	@ 0x24
 8006536:	4618      	mov	r0, r3
 8006538:	f000 fcbc 	bl	8006eb4 <xTaskRemoveFromEventList>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8006542:	f000 fd99 	bl	8007078 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006546:	7bfb      	ldrb	r3, [r7, #15]
 8006548:	3b01      	subs	r3, #1
 800654a:	b2db      	uxtb	r3, r3
 800654c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800654e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006552:	2b00      	cmp	r3, #0
 8006554:	dce9      	bgt.n	800652a <prvUnlockQueue+0x16>
 8006556:	e000      	b.n	800655a <prvUnlockQueue+0x46>
                        break;
 8006558:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	22ff      	movs	r2, #255	@ 0xff
 800655e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8006562:	f001 fbcd 	bl	8007d00 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006566:	f001 fb99 	bl	8007c9c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006570:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006572:	e011      	b.n	8006598 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d012      	beq.n	80065a2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	3310      	adds	r3, #16
 8006580:	4618      	mov	r0, r3
 8006582:	f000 fc97 	bl	8006eb4 <xTaskRemoveFromEventList>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800658c:	f000 fd74 	bl	8007078 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006590:	7bbb      	ldrb	r3, [r7, #14]
 8006592:	3b01      	subs	r3, #1
 8006594:	b2db      	uxtb	r3, r3
 8006596:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006598:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800659c:	2b00      	cmp	r3, #0
 800659e:	dce9      	bgt.n	8006574 <prvUnlockQueue+0x60>
 80065a0:	e000      	b.n	80065a4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80065a2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	22ff      	movs	r2, #255	@ 0xff
 80065a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80065ac:	f001 fba8 	bl	8007d00 <vPortExitCritical>
}
 80065b0:	bf00      	nop
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80065c0:	f001 fb6c 	bl	8007c9c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d102      	bne.n	80065d2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80065cc:	2301      	movs	r3, #1
 80065ce:	60fb      	str	r3, [r7, #12]
 80065d0:	e001      	b.n	80065d6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80065d2:	2300      	movs	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80065d6:	f001 fb93 	bl	8007d00 <vPortExitCritical>

    return xReturn;
 80065da:	68fb      	ldr	r3, [r7, #12]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80065ec:	f001 fb56 	bl	8007c9c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d102      	bne.n	8006602 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80065fc:	2301      	movs	r3, #1
 80065fe:	60fb      	str	r3, [r7, #12]
 8006600:	e001      	b.n	8006606 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8006602:	2300      	movs	r3, #0
 8006604:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006606:	f001 fb7b 	bl	8007d00 <vPortExitCritical>

    return xReturn;
 800660a:	68fb      	ldr	r3, [r7, #12]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800661e:	2300      	movs	r3, #0
 8006620:	60fb      	str	r3, [r7, #12]
 8006622:	e014      	b.n	800664e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006624:	4a0f      	ldr	r2, [pc, #60]	@ (8006664 <vQueueAddToRegistry+0x50>)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10b      	bne.n	8006648 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006630:	490c      	ldr	r1, [pc, #48]	@ (8006664 <vQueueAddToRegistry+0x50>)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800663a:	4a0a      	ldr	r2, [pc, #40]	@ (8006664 <vQueueAddToRegistry+0x50>)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	00db      	lsls	r3, r3, #3
 8006640:	4413      	add	r3, r2
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8006646:	e006      	b.n	8006656 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	3301      	adds	r3, #1
 800664c:	60fb      	str	r3, [r7, #12]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2b07      	cmp	r3, #7
 8006652:	d9e7      	bls.n	8006624 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8006654:	bf00      	nop
 8006656:	bf00      	nop
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	20000430 	.word	0x20000430

08006668 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006678:	f001 fb10 	bl	8007c9c <vPortEnterCritical>
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006682:	b25b      	sxtb	r3, r3
 8006684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006688:	d103      	bne.n	8006692 <vQueueWaitForMessageRestricted+0x2a>
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006698:	b25b      	sxtb	r3, r3
 800669a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669e:	d103      	bne.n	80066a8 <vQueueWaitForMessageRestricted+0x40>
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066a8:	f001 fb2a 	bl	8007d00 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d106      	bne.n	80066c2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	3324      	adds	r3, #36	@ 0x24
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	68b9      	ldr	r1, [r7, #8]
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 fbcd 	bl	8006e5c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80066c2:	6978      	ldr	r0, [r7, #20]
 80066c4:	f7ff ff26 	bl	8006514 <prvUnlockQueue>
    }
 80066c8:	bf00      	nop
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08c      	sub	sp, #48	@ 0x30
 80066d4:	af04      	add	r7, sp, #16
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	603b      	str	r3, [r7, #0]
 80066dc:	4613      	mov	r3, r2
 80066de:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80066e0:	88fb      	ldrh	r3, [r7, #6]
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4618      	mov	r0, r3
 80066e6:	f001 fc03 	bl	8007ef0 <pvPortMalloc>
 80066ea:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00e      	beq.n	8006710 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80066f2:	2058      	movs	r0, #88	@ 0x58
 80066f4:	f001 fbfc 	bl	8007ef0 <pvPortMalloc>
 80066f8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	631a      	str	r2, [r3, #48]	@ 0x30
 8006706:	e005      	b.n	8006714 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8006708:	6978      	ldr	r0, [r7, #20]
 800670a:	f001 fcd3 	bl	80080b4 <vPortFree>
 800670e:	e001      	b.n	8006714 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8006710:	2300      	movs	r3, #0
 8006712:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d013      	beq.n	8006742 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800671a:	88fa      	ldrh	r2, [r7, #6]
 800671c:	2300      	movs	r3, #0
 800671e:	9303      	str	r3, [sp, #12]
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	9302      	str	r3, [sp, #8]
 8006724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006726:	9301      	str	r3, [sp, #4]
 8006728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	68b9      	ldr	r1, [r7, #8]
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 f80e 	bl	8006752 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006736:	69f8      	ldr	r0, [r7, #28]
 8006738:	f000 f8a2 	bl	8006880 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800673c:	2301      	movs	r3, #1
 800673e:	61bb      	str	r3, [r7, #24]
 8006740:	e002      	b.n	8006748 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006742:	f04f 33ff 	mov.w	r3, #4294967295
 8006746:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8006748:	69bb      	ldr	r3, [r7, #24]
    }
 800674a:	4618      	mov	r0, r3
 800674c:	3720      	adds	r7, #32
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b088      	sub	sp, #32
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	607a      	str	r2, [r7, #4]
 800675e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006762:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	461a      	mov	r2, r3
 800676a:	21a5      	movs	r1, #165	@ 0xa5
 800676c:	f002 fc44 	bl	8008ff8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006772:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800677a:	3b01      	subs	r3, #1
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	f023 0307 	bic.w	r3, r3, #7
 8006788:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	f003 0307 	and.w	r3, r3, #7
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00b      	beq.n	80067ac <prvInitialiseNewTask+0x5a>
        __asm volatile
 8006794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006798:	f383 8811 	msr	BASEPRI, r3
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	617b      	str	r3, [r7, #20]
    }
 80067a6:	bf00      	nop
 80067a8:	bf00      	nop
 80067aa:	e7fd      	b.n	80067a8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d01f      	beq.n	80067f2 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067b2:	2300      	movs	r3, #0
 80067b4:	61fb      	str	r3, [r7, #28]
 80067b6:	e012      	b.n	80067de <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	4413      	add	r3, r2
 80067be:	7819      	ldrb	r1, [r3, #0]
 80067c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	4413      	add	r3, r2
 80067c6:	3334      	adds	r3, #52	@ 0x34
 80067c8:	460a      	mov	r2, r1
 80067ca:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	4413      	add	r3, r2
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d006      	beq.n	80067e6 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	3301      	adds	r3, #1
 80067dc:	61fb      	str	r3, [r7, #28]
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	2b09      	cmp	r3, #9
 80067e2:	d9e9      	bls.n	80067b8 <prvInitialiseNewTask+0x66>
 80067e4:	e000      	b.n	80067e8 <prvInitialiseNewTask+0x96>
            {
                break;
 80067e6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80067f0:	e003      	b.n	80067fa <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80067f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067fc:	2b04      	cmp	r3, #4
 80067fe:	d901      	bls.n	8006804 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006800:	2304      	movs	r3, #4
 8006802:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006806:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006808:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800680a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800680e:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8006810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006812:	2200      	movs	r2, #0
 8006814:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006818:	3304      	adds	r3, #4
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff f9d4 	bl	8005bc8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006822:	3318      	adds	r3, #24
 8006824:	4618      	mov	r0, r3
 8006826:	f7ff f9cf 	bl	8005bc8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800682a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800682e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006832:	f1c3 0205 	rsb	r2, r3, #5
 8006836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006838:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800683a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800683e:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8006840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006842:	3350      	adds	r3, #80	@ 0x50
 8006844:	2204      	movs	r2, #4
 8006846:	2100      	movs	r1, #0
 8006848:	4618      	mov	r0, r3
 800684a:	f002 fbd5 	bl	8008ff8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800684e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006850:	3354      	adds	r3, #84	@ 0x54
 8006852:	2201      	movs	r2, #1
 8006854:	2100      	movs	r1, #0
 8006856:	4618      	mov	r0, r3
 8006858:	f002 fbce 	bl	8008ff8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	68f9      	ldr	r1, [r7, #12]
 8006860:	69b8      	ldr	r0, [r7, #24]
 8006862:	f001 f8e5 	bl	8007a30 <pxPortInitialiseStack>
 8006866:	4602      	mov	r2, r0
 8006868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800686c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006876:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006878:	bf00      	nop
 800687a:	3720      	adds	r7, #32
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006888:	f001 fa08 	bl	8007c9c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800688c:	4b2c      	ldr	r3, [pc, #176]	@ (8006940 <prvAddNewTaskToReadyList+0xc0>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3301      	adds	r3, #1
 8006892:	4a2b      	ldr	r2, [pc, #172]	@ (8006940 <prvAddNewTaskToReadyList+0xc0>)
 8006894:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8006896:	4b2b      	ldr	r3, [pc, #172]	@ (8006944 <prvAddNewTaskToReadyList+0xc4>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d109      	bne.n	80068b2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800689e:	4a29      	ldr	r2, [pc, #164]	@ (8006944 <prvAddNewTaskToReadyList+0xc4>)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068a4:	4b26      	ldr	r3, [pc, #152]	@ (8006940 <prvAddNewTaskToReadyList+0xc0>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d110      	bne.n	80068ce <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80068ac:	f000 fc08 	bl	80070c0 <prvInitialiseTaskLists>
 80068b0:	e00d      	b.n	80068ce <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80068b2:	4b25      	ldr	r3, [pc, #148]	@ (8006948 <prvAddNewTaskToReadyList+0xc8>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d109      	bne.n	80068ce <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80068ba:	4b22      	ldr	r3, [pc, #136]	@ (8006944 <prvAddNewTaskToReadyList+0xc4>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d802      	bhi.n	80068ce <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80068c8:	4a1e      	ldr	r2, [pc, #120]	@ (8006944 <prvAddNewTaskToReadyList+0xc4>)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80068ce:	4b1f      	ldr	r3, [pc, #124]	@ (800694c <prvAddNewTaskToReadyList+0xcc>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3301      	adds	r3, #1
 80068d4:	4a1d      	ldr	r2, [pc, #116]	@ (800694c <prvAddNewTaskToReadyList+0xcc>)
 80068d6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80068d8:	4b1c      	ldr	r3, [pc, #112]	@ (800694c <prvAddNewTaskToReadyList+0xcc>)
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e4:	2201      	movs	r2, #1
 80068e6:	409a      	lsls	r2, r3
 80068e8:	4b19      	ldr	r3, [pc, #100]	@ (8006950 <prvAddNewTaskToReadyList+0xd0>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	4a18      	ldr	r2, [pc, #96]	@ (8006950 <prvAddNewTaskToReadyList+0xd0>)
 80068f0:	6013      	str	r3, [r2, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068f6:	4613      	mov	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4a15      	ldr	r2, [pc, #84]	@ (8006954 <prvAddNewTaskToReadyList+0xd4>)
 8006900:	441a      	add	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	3304      	adds	r3, #4
 8006906:	4619      	mov	r1, r3
 8006908:	4610      	mov	r0, r2
 800690a:	f7ff f96a 	bl	8005be2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800690e:	f001 f9f7 	bl	8007d00 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8006912:	4b0d      	ldr	r3, [pc, #52]	@ (8006948 <prvAddNewTaskToReadyList+0xc8>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00e      	beq.n	8006938 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800691a:	4b0a      	ldr	r3, [pc, #40]	@ (8006944 <prvAddNewTaskToReadyList+0xc4>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006924:	429a      	cmp	r2, r3
 8006926:	d207      	bcs.n	8006938 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006928:	4b0b      	ldr	r3, [pc, #44]	@ (8006958 <prvAddNewTaskToReadyList+0xd8>)
 800692a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006938:	bf00      	nop
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	20000548 	.word	0x20000548
 8006944:	20000470 	.word	0x20000470
 8006948:	20000554 	.word	0x20000554
 800694c:	20000564 	.word	0x20000564
 8006950:	20000550 	.word	0x20000550
 8006954:	20000474 	.word	0x20000474
 8006958:	e000ed04 	.word	0xe000ed04

0800695c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8006964:	2300      	movs	r3, #0
 8006966:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d018      	beq.n	80069a0 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800696e:	4b14      	ldr	r3, [pc, #80]	@ (80069c0 <vTaskDelay+0x64>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00b      	beq.n	800698e <vTaskDelay+0x32>
        __asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	60bb      	str	r3, [r7, #8]
    }
 8006988:	bf00      	nop
 800698a:	bf00      	nop
 800698c:	e7fd      	b.n	800698a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800698e:	f000 f86d 	bl	8006a6c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006992:	2100      	movs	r1, #0
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fcc7 	bl	8007328 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800699a:	f000 f875 	bl	8006a88 <xTaskResumeAll>
 800699e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d107      	bne.n	80069b6 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 80069a6:	4b07      	ldr	r3, [pc, #28]	@ (80069c4 <vTaskDelay+0x68>)
 80069a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80069b6:	bf00      	nop
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20000570 	.word	0x20000570
 80069c4:	e000ed04 	.word	0xe000ed04

080069c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80069ce:	4b20      	ldr	r3, [pc, #128]	@ (8006a50 <vTaskStartScheduler+0x88>)
 80069d0:	9301      	str	r3, [sp, #4]
 80069d2:	2300      	movs	r3, #0
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	2300      	movs	r3, #0
 80069d8:	2282      	movs	r2, #130	@ 0x82
 80069da:	491e      	ldr	r1, [pc, #120]	@ (8006a54 <vTaskStartScheduler+0x8c>)
 80069dc:	481e      	ldr	r0, [pc, #120]	@ (8006a58 <vTaskStartScheduler+0x90>)
 80069de:	f7ff fe77 	bl	80066d0 <xTaskCreate>
 80069e2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d102      	bne.n	80069f0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80069ea:	f000 fd03 	bl	80073f4 <xTimerCreateTimerTask>
 80069ee:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d116      	bne.n	8006a24 <vTaskStartScheduler+0x5c>
        __asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	60bb      	str	r3, [r7, #8]
    }
 8006a08:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8006a0a:	4b14      	ldr	r3, [pc, #80]	@ (8006a5c <vTaskStartScheduler+0x94>)
 8006a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a10:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006a12:	4b13      	ldr	r3, [pc, #76]	@ (8006a60 <vTaskStartScheduler+0x98>)
 8006a14:	2201      	movs	r2, #1
 8006a16:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a18:	4b12      	ldr	r3, [pc, #72]	@ (8006a64 <vTaskStartScheduler+0x9c>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8006a1e:	f001 f899 	bl	8007b54 <xPortStartScheduler>
 8006a22:	e00f      	b.n	8006a44 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2a:	d10b      	bne.n	8006a44 <vTaskStartScheduler+0x7c>
        __asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	607b      	str	r3, [r7, #4]
    }
 8006a3e:	bf00      	nop
 8006a40:	bf00      	nop
 8006a42:	e7fd      	b.n	8006a40 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006a44:	4b08      	ldr	r3, [pc, #32]	@ (8006a68 <vTaskStartScheduler+0xa0>)
 8006a46:	681b      	ldr	r3, [r3, #0]
}
 8006a48:	bf00      	nop
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	2000056c 	.word	0x2000056c
 8006a54:	0800c440 	.word	0x0800c440
 8006a58:	08007091 	.word	0x08007091
 8006a5c:	20000568 	.word	0x20000568
 8006a60:	20000554 	.word	0x20000554
 8006a64:	2000054c 	.word	0x2000054c
 8006a68:	20000014 	.word	0x20000014

08006a6c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006a70:	4b04      	ldr	r3, [pc, #16]	@ (8006a84 <vTaskSuspendAll+0x18>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3301      	adds	r3, #1
 8006a76:	4a03      	ldr	r2, [pc, #12]	@ (8006a84 <vTaskSuspendAll+0x18>)
 8006a78:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8006a7a:	bf00      	nop
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	20000570 	.word	0x20000570

08006a88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8006a92:	2300      	movs	r3, #0
 8006a94:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8006a96:	4b42      	ldr	r3, [pc, #264]	@ (8006ba0 <xTaskResumeAll+0x118>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10b      	bne.n	8006ab6 <xTaskResumeAll+0x2e>
        __asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	603b      	str	r3, [r7, #0]
    }
 8006ab0:	bf00      	nop
 8006ab2:	bf00      	nop
 8006ab4:	e7fd      	b.n	8006ab2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8006ab6:	f001 f8f1 	bl	8007c9c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006aba:	4b39      	ldr	r3, [pc, #228]	@ (8006ba0 <xTaskResumeAll+0x118>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	4a37      	ldr	r2, [pc, #220]	@ (8006ba0 <xTaskResumeAll+0x118>)
 8006ac2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ac4:	4b36      	ldr	r3, [pc, #216]	@ (8006ba0 <xTaskResumeAll+0x118>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d161      	bne.n	8006b90 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006acc:	4b35      	ldr	r3, [pc, #212]	@ (8006ba4 <xTaskResumeAll+0x11c>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d05d      	beq.n	8006b90 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ad4:	e02e      	b.n	8006b34 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ad6:	4b34      	ldr	r3, [pc, #208]	@ (8006ba8 <xTaskResumeAll+0x120>)
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	3318      	adds	r3, #24
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7ff f8da 	bl	8005c9c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3304      	adds	r3, #4
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7ff f8d5 	bl	8005c9c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af6:	2201      	movs	r2, #1
 8006af8:	409a      	lsls	r2, r3
 8006afa:	4b2c      	ldr	r3, [pc, #176]	@ (8006bac <xTaskResumeAll+0x124>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	4a2a      	ldr	r2, [pc, #168]	@ (8006bac <xTaskResumeAll+0x124>)
 8006b02:	6013      	str	r3, [r2, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4a27      	ldr	r2, [pc, #156]	@ (8006bb0 <xTaskResumeAll+0x128>)
 8006b12:	441a      	add	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	3304      	adds	r3, #4
 8006b18:	4619      	mov	r1, r3
 8006b1a:	4610      	mov	r0, r2
 8006b1c:	f7ff f861 	bl	8005be2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b24:	4b23      	ldr	r3, [pc, #140]	@ (8006bb4 <xTaskResumeAll+0x12c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d302      	bcc.n	8006b34 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8006b2e:	4b22      	ldr	r3, [pc, #136]	@ (8006bb8 <xTaskResumeAll+0x130>)
 8006b30:	2201      	movs	r2, #1
 8006b32:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b34:	4b1c      	ldr	r3, [pc, #112]	@ (8006ba8 <xTaskResumeAll+0x120>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1cc      	bne.n	8006ad6 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d001      	beq.n	8006b46 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006b42:	f000 fb3b 	bl	80071bc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b46:	4b1d      	ldr	r3, [pc, #116]	@ (8006bbc <xTaskResumeAll+0x134>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d010      	beq.n	8006b74 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006b52:	f000 f847 	bl	8006be4 <xTaskIncrementTick>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d002      	beq.n	8006b62 <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8006b5c:	4b16      	ldr	r3, [pc, #88]	@ (8006bb8 <xTaskResumeAll+0x130>)
 8006b5e:	2201      	movs	r2, #1
 8006b60:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	3b01      	subs	r3, #1
 8006b66:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1f1      	bne.n	8006b52 <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8006b6e:	4b13      	ldr	r3, [pc, #76]	@ (8006bbc <xTaskResumeAll+0x134>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006b74:	4b10      	ldr	r3, [pc, #64]	@ (8006bb8 <xTaskResumeAll+0x130>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d009      	beq.n	8006b90 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8006b80:	4b0f      	ldr	r3, [pc, #60]	@ (8006bc0 <xTaskResumeAll+0x138>)
 8006b82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006b90:	f001 f8b6 	bl	8007d00 <vPortExitCritical>

    return xAlreadyYielded;
 8006b94:	68bb      	ldr	r3, [r7, #8]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	20000570 	.word	0x20000570
 8006ba4:	20000548 	.word	0x20000548
 8006ba8:	20000508 	.word	0x20000508
 8006bac:	20000550 	.word	0x20000550
 8006bb0:	20000474 	.word	0x20000474
 8006bb4:	20000470 	.word	0x20000470
 8006bb8:	2000055c 	.word	0x2000055c
 8006bbc:	20000558 	.word	0x20000558
 8006bc0:	e000ed04 	.word	0xe000ed04

08006bc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006bca:	4b05      	ldr	r3, [pc, #20]	@ (8006be0 <xTaskGetTickCount+0x1c>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006bd0:	687b      	ldr	r3, [r7, #4]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	2000054c 	.word	0x2000054c

08006be4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006bea:	2300      	movs	r3, #0
 8006bec:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bee:	4b4f      	ldr	r3, [pc, #316]	@ (8006d2c <xTaskIncrementTick+0x148>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f040 808f 	bne.w	8006d16 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006bf8:	4b4d      	ldr	r3, [pc, #308]	@ (8006d30 <xTaskIncrementTick+0x14c>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006c00:	4a4b      	ldr	r2, [pc, #300]	@ (8006d30 <xTaskIncrementTick+0x14c>)
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d121      	bne.n	8006c50 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8006c0c:	4b49      	ldr	r3, [pc, #292]	@ (8006d34 <xTaskIncrementTick+0x150>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00b      	beq.n	8006c2e <xTaskIncrementTick+0x4a>
        __asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	603b      	str	r3, [r7, #0]
    }
 8006c28:	bf00      	nop
 8006c2a:	bf00      	nop
 8006c2c:	e7fd      	b.n	8006c2a <xTaskIncrementTick+0x46>
 8006c2e:	4b41      	ldr	r3, [pc, #260]	@ (8006d34 <xTaskIncrementTick+0x150>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	4b40      	ldr	r3, [pc, #256]	@ (8006d38 <xTaskIncrementTick+0x154>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a3e      	ldr	r2, [pc, #248]	@ (8006d34 <xTaskIncrementTick+0x150>)
 8006c3a:	6013      	str	r3, [r2, #0]
 8006c3c:	4a3e      	ldr	r2, [pc, #248]	@ (8006d38 <xTaskIncrementTick+0x154>)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	4b3e      	ldr	r3, [pc, #248]	@ (8006d3c <xTaskIncrementTick+0x158>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3301      	adds	r3, #1
 8006c48:	4a3c      	ldr	r2, [pc, #240]	@ (8006d3c <xTaskIncrementTick+0x158>)
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	f000 fab6 	bl	80071bc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006c50:	4b3b      	ldr	r3, [pc, #236]	@ (8006d40 <xTaskIncrementTick+0x15c>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d348      	bcc.n	8006cec <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c5a:	4b36      	ldr	r3, [pc, #216]	@ (8006d34 <xTaskIncrementTick+0x150>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d104      	bne.n	8006c6e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c64:	4b36      	ldr	r3, [pc, #216]	@ (8006d40 <xTaskIncrementTick+0x15c>)
 8006c66:	f04f 32ff 	mov.w	r2, #4294967295
 8006c6a:	601a      	str	r2, [r3, #0]
                    break;
 8006c6c:	e03e      	b.n	8006cec <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c6e:	4b31      	ldr	r3, [pc, #196]	@ (8006d34 <xTaskIncrementTick+0x150>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d203      	bcs.n	8006c8e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006c86:	4a2e      	ldr	r2, [pc, #184]	@ (8006d40 <xTaskIncrementTick+0x15c>)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c8c:	e02e      	b.n	8006cec <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	3304      	adds	r3, #4
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7ff f802 	bl	8005c9c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d004      	beq.n	8006caa <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	3318      	adds	r3, #24
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fe fff9 	bl	8005c9c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cae:	2201      	movs	r2, #1
 8006cb0:	409a      	lsls	r2, r3
 8006cb2:	4b24      	ldr	r3, [pc, #144]	@ (8006d44 <xTaskIncrementTick+0x160>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	4a22      	ldr	r2, [pc, #136]	@ (8006d44 <xTaskIncrementTick+0x160>)
 8006cba:	6013      	str	r3, [r2, #0]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4a1f      	ldr	r2, [pc, #124]	@ (8006d48 <xTaskIncrementTick+0x164>)
 8006cca:	441a      	add	r2, r3
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	3304      	adds	r3, #4
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	4610      	mov	r0, r2
 8006cd4:	f7fe ff85 	bl	8005be2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8006d4c <xTaskIncrementTick+0x168>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d3b9      	bcc.n	8006c5a <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cea:	e7b6      	b.n	8006c5a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006cec:	4b17      	ldr	r3, [pc, #92]	@ (8006d4c <xTaskIncrementTick+0x168>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cf2:	4915      	ldr	r1, [pc, #84]	@ (8006d48 <xTaskIncrementTick+0x164>)
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	440b      	add	r3, r1
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d901      	bls.n	8006d08 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8006d04:	2301      	movs	r3, #1
 8006d06:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8006d08:	4b11      	ldr	r3, [pc, #68]	@ (8006d50 <xTaskIncrementTick+0x16c>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d007      	beq.n	8006d20 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8006d10:	2301      	movs	r3, #1
 8006d12:	617b      	str	r3, [r7, #20]
 8006d14:	e004      	b.n	8006d20 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006d16:	4b0f      	ldr	r3, [pc, #60]	@ (8006d54 <xTaskIncrementTick+0x170>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8006d54 <xTaskIncrementTick+0x170>)
 8006d1e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8006d20:	697b      	ldr	r3, [r7, #20]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3718      	adds	r7, #24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20000570 	.word	0x20000570
 8006d30:	2000054c 	.word	0x2000054c
 8006d34:	20000500 	.word	0x20000500
 8006d38:	20000504 	.word	0x20000504
 8006d3c:	20000560 	.word	0x20000560
 8006d40:	20000568 	.word	0x20000568
 8006d44:	20000550 	.word	0x20000550
 8006d48:	20000474 	.word	0x20000474
 8006d4c:	20000470 	.word	0x20000470
 8006d50:	2000055c 	.word	0x2000055c
 8006d54:	20000558 	.word	0x20000558

08006d58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d5e:	4b27      	ldr	r3, [pc, #156]	@ (8006dfc <vTaskSwitchContext+0xa4>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006d66:	4b26      	ldr	r3, [pc, #152]	@ (8006e00 <vTaskSwitchContext+0xa8>)
 8006d68:	2201      	movs	r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8006d6c:	e040      	b.n	8006df0 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8006d6e:	4b24      	ldr	r3, [pc, #144]	@ (8006e00 <vTaskSwitchContext+0xa8>)
 8006d70:	2200      	movs	r2, #0
 8006d72:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d74:	4b23      	ldr	r3, [pc, #140]	@ (8006e04 <vTaskSwitchContext+0xac>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	fab3 f383 	clz	r3, r3
 8006d80:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006d82:	7afb      	ldrb	r3, [r7, #11]
 8006d84:	f1c3 031f 	rsb	r3, r3, #31
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	491f      	ldr	r1, [pc, #124]	@ (8006e08 <vTaskSwitchContext+0xb0>)
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	440b      	add	r3, r1
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10b      	bne.n	8006db6 <vTaskSwitchContext+0x5e>
        __asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	607b      	str	r3, [r7, #4]
    }
 8006db0:	bf00      	nop
 8006db2:	bf00      	nop
 8006db4:	e7fd      	b.n	8006db2 <vTaskSwitchContext+0x5a>
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	4613      	mov	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4a11      	ldr	r2, [pc, #68]	@ (8006e08 <vTaskSwitchContext+0xb0>)
 8006dc2:	4413      	add	r3, r2
 8006dc4:	613b      	str	r3, [r7, #16]
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	605a      	str	r2, [r3, #4]
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	3308      	adds	r3, #8
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d104      	bne.n	8006de6 <vTaskSwitchContext+0x8e>
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	605a      	str	r2, [r3, #4]
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	4a07      	ldr	r2, [pc, #28]	@ (8006e0c <vTaskSwitchContext+0xb4>)
 8006dee:	6013      	str	r3, [r2, #0]
}
 8006df0:	bf00      	nop
 8006df2:	371c      	adds	r7, #28
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	20000570 	.word	0x20000570
 8006e00:	2000055c 	.word	0x2000055c
 8006e04:	20000550 	.word	0x20000550
 8006e08:	20000474 	.word	0x20000474
 8006e0c:	20000470 	.word	0x20000470

08006e10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10b      	bne.n	8006e38 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	60fb      	str	r3, [r7, #12]
    }
 8006e32:	bf00      	nop
 8006e34:	bf00      	nop
 8006e36:	e7fd      	b.n	8006e34 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e38:	4b07      	ldr	r3, [pc, #28]	@ (8006e58 <vTaskPlaceOnEventList+0x48>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3318      	adds	r3, #24
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f7fe fef2 	bl	8005c2a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e46:	2101      	movs	r1, #1
 8006e48:	6838      	ldr	r0, [r7, #0]
 8006e4a:	f000 fa6d 	bl	8007328 <prvAddCurrentTaskToDelayedList>
}
 8006e4e:	bf00      	nop
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20000470 	.word	0x20000470

08006e5c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10b      	bne.n	8006e86 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	617b      	str	r3, [r7, #20]
    }
 8006e80:	bf00      	nop
 8006e82:	bf00      	nop
 8006e84:	e7fd      	b.n	8006e82 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e86:	4b0a      	ldr	r3, [pc, #40]	@ (8006eb0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3318      	adds	r3, #24
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f7fe fea7 	bl	8005be2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d002      	beq.n	8006ea0 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8006e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e9e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ea0:	6879      	ldr	r1, [r7, #4]
 8006ea2:	68b8      	ldr	r0, [r7, #8]
 8006ea4:	f000 fa40 	bl	8007328 <prvAddCurrentTaskToDelayedList>
    }
 8006ea8:	bf00      	nop
 8006eaa:	3718      	adds	r7, #24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	20000470 	.word	0x20000470

08006eb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10b      	bne.n	8006ee2 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8006eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ece:	f383 8811 	msr	BASEPRI, r3
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	60fb      	str	r3, [r7, #12]
    }
 8006edc:	bf00      	nop
 8006ede:	bf00      	nop
 8006ee0:	e7fd      	b.n	8006ede <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	3318      	adds	r3, #24
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fe fed8 	bl	8005c9c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eec:	4b1d      	ldr	r3, [pc, #116]	@ (8006f64 <xTaskRemoveFromEventList+0xb0>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d11c      	bne.n	8006f2e <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7fe fecf 	bl	8005c9c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f02:	2201      	movs	r2, #1
 8006f04:	409a      	lsls	r2, r3
 8006f06:	4b18      	ldr	r3, [pc, #96]	@ (8006f68 <xTaskRemoveFromEventList+0xb4>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	4a16      	ldr	r2, [pc, #88]	@ (8006f68 <xTaskRemoveFromEventList+0xb4>)
 8006f0e:	6013      	str	r3, [r2, #0]
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f14:	4613      	mov	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4a13      	ldr	r2, [pc, #76]	@ (8006f6c <xTaskRemoveFromEventList+0xb8>)
 8006f1e:	441a      	add	r2, r3
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	3304      	adds	r3, #4
 8006f24:	4619      	mov	r1, r3
 8006f26:	4610      	mov	r0, r2
 8006f28:	f7fe fe5b 	bl	8005be2 <vListInsertEnd>
 8006f2c:	e005      	b.n	8006f3a <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	3318      	adds	r3, #24
 8006f32:	4619      	mov	r1, r3
 8006f34:	480e      	ldr	r0, [pc, #56]	@ (8006f70 <xTaskRemoveFromEventList+0xbc>)
 8006f36:	f7fe fe54 	bl	8005be2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f74 <xTaskRemoveFromEventList+0xc0>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d905      	bls.n	8006f54 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f78 <xTaskRemoveFromEventList+0xc4>)
 8006f4e:	2201      	movs	r2, #1
 8006f50:	601a      	str	r2, [r3, #0]
 8006f52:	e001      	b.n	8006f58 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 8006f54:	2300      	movs	r3, #0
 8006f56:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006f58:	697b      	ldr	r3, [r7, #20]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	20000570 	.word	0x20000570
 8006f68:	20000550 	.word	0x20000550
 8006f6c:	20000474 	.word	0x20000474
 8006f70:	20000508 	.word	0x20000508
 8006f74:	20000470 	.word	0x20000470
 8006f78:	2000055c 	.word	0x2000055c

08006f7c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f84:	4b06      	ldr	r3, [pc, #24]	@ (8006fa0 <vTaskInternalSetTimeOutState+0x24>)
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006f8c:	4b05      	ldr	r3, [pc, #20]	@ (8006fa4 <vTaskInternalSetTimeOutState+0x28>)
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	605a      	str	r2, [r3, #4]
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	20000560 	.word	0x20000560
 8006fa4:	2000054c 	.word	0x2000054c

08006fa8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b088      	sub	sp, #32
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10b      	bne.n	8006fd0 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	613b      	str	r3, [r7, #16]
    }
 8006fca:	bf00      	nop
 8006fcc:	bf00      	nop
 8006fce:	e7fd      	b.n	8006fcc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10b      	bne.n	8006fee <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8006fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	60fb      	str	r3, [r7, #12]
    }
 8006fe8:	bf00      	nop
 8006fea:	bf00      	nop
 8006fec:	e7fd      	b.n	8006fea <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8006fee:	f000 fe55 	bl	8007c9c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8007070 <xTaskCheckForTimeOut+0xc8>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	69ba      	ldr	r2, [r7, #24]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700a:	d102      	bne.n	8007012 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800700c:	2300      	movs	r3, #0
 800700e:	61fb      	str	r3, [r7, #28]
 8007010:	e026      	b.n	8007060 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	4b17      	ldr	r3, [pc, #92]	@ (8007074 <xTaskCheckForTimeOut+0xcc>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	429a      	cmp	r2, r3
 800701c:	d00a      	beq.n	8007034 <xTaskCheckForTimeOut+0x8c>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	429a      	cmp	r2, r3
 8007026:	d305      	bcc.n	8007034 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8007028:	2301      	movs	r3, #1
 800702a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	2200      	movs	r2, #0
 8007030:	601a      	str	r2, [r3, #0]
 8007032:	e015      	b.n	8007060 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	429a      	cmp	r2, r3
 800703c:	d20b      	bcs.n	8007056 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	1ad2      	subs	r2, r2, r3
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7ff ff96 	bl	8006f7c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007050:	2300      	movs	r3, #0
 8007052:	61fb      	str	r3, [r7, #28]
 8007054:	e004      	b.n	8007060 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2200      	movs	r2, #0
 800705a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800705c:	2301      	movs	r3, #1
 800705e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8007060:	f000 fe4e 	bl	8007d00 <vPortExitCritical>

    return xReturn;
 8007064:	69fb      	ldr	r3, [r7, #28]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3720      	adds	r7, #32
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	2000054c 	.word	0x2000054c
 8007074:	20000560 	.word	0x20000560

08007078 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007078:	b480      	push	{r7}
 800707a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800707c:	4b03      	ldr	r3, [pc, #12]	@ (800708c <vTaskMissedYield+0x14>)
 800707e:	2201      	movs	r2, #1
 8007080:	601a      	str	r2, [r3, #0]
}
 8007082:	bf00      	nop
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	2000055c 	.word	0x2000055c

08007090 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007098:	f000 f852 	bl	8007140 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800709c:	4b06      	ldr	r3, [pc, #24]	@ (80070b8 <prvIdleTask+0x28>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d9f9      	bls.n	8007098 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80070a4:	4b05      	ldr	r3, [pc, #20]	@ (80070bc <prvIdleTask+0x2c>)
 80070a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80070b4:	e7f0      	b.n	8007098 <prvIdleTask+0x8>
 80070b6:	bf00      	nop
 80070b8:	20000474 	.word	0x20000474
 80070bc:	e000ed04 	.word	0xe000ed04

080070c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070c6:	2300      	movs	r3, #0
 80070c8:	607b      	str	r3, [r7, #4]
 80070ca:	e00c      	b.n	80070e6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	4613      	mov	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4a12      	ldr	r2, [pc, #72]	@ (8007120 <prvInitialiseTaskLists+0x60>)
 80070d8:	4413      	add	r3, r2
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fe fd54 	bl	8005b88 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	3301      	adds	r3, #1
 80070e4:	607b      	str	r3, [r7, #4]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2b04      	cmp	r3, #4
 80070ea:	d9ef      	bls.n	80070cc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80070ec:	480d      	ldr	r0, [pc, #52]	@ (8007124 <prvInitialiseTaskLists+0x64>)
 80070ee:	f7fe fd4b 	bl	8005b88 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80070f2:	480d      	ldr	r0, [pc, #52]	@ (8007128 <prvInitialiseTaskLists+0x68>)
 80070f4:	f7fe fd48 	bl	8005b88 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80070f8:	480c      	ldr	r0, [pc, #48]	@ (800712c <prvInitialiseTaskLists+0x6c>)
 80070fa:	f7fe fd45 	bl	8005b88 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80070fe:	480c      	ldr	r0, [pc, #48]	@ (8007130 <prvInitialiseTaskLists+0x70>)
 8007100:	f7fe fd42 	bl	8005b88 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8007104:	480b      	ldr	r0, [pc, #44]	@ (8007134 <prvInitialiseTaskLists+0x74>)
 8007106:	f7fe fd3f 	bl	8005b88 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800710a:	4b0b      	ldr	r3, [pc, #44]	@ (8007138 <prvInitialiseTaskLists+0x78>)
 800710c:	4a05      	ldr	r2, [pc, #20]	@ (8007124 <prvInitialiseTaskLists+0x64>)
 800710e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007110:	4b0a      	ldr	r3, [pc, #40]	@ (800713c <prvInitialiseTaskLists+0x7c>)
 8007112:	4a05      	ldr	r2, [pc, #20]	@ (8007128 <prvInitialiseTaskLists+0x68>)
 8007114:	601a      	str	r2, [r3, #0]
}
 8007116:	bf00      	nop
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	20000474 	.word	0x20000474
 8007124:	200004d8 	.word	0x200004d8
 8007128:	200004ec 	.word	0x200004ec
 800712c:	20000508 	.word	0x20000508
 8007130:	2000051c 	.word	0x2000051c
 8007134:	20000534 	.word	0x20000534
 8007138:	20000500 	.word	0x20000500
 800713c:	20000504 	.word	0x20000504

08007140 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007146:	e019      	b.n	800717c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8007148:	f000 fda8 	bl	8007c9c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800714c:	4b10      	ldr	r3, [pc, #64]	@ (8007190 <prvCheckTasksWaitingTermination+0x50>)
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	3304      	adds	r3, #4
 8007158:	4618      	mov	r0, r3
 800715a:	f7fe fd9f 	bl	8005c9c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800715e:	4b0d      	ldr	r3, [pc, #52]	@ (8007194 <prvCheckTasksWaitingTermination+0x54>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3b01      	subs	r3, #1
 8007164:	4a0b      	ldr	r2, [pc, #44]	@ (8007194 <prvCheckTasksWaitingTermination+0x54>)
 8007166:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8007168:	4b0b      	ldr	r3, [pc, #44]	@ (8007198 <prvCheckTasksWaitingTermination+0x58>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3b01      	subs	r3, #1
 800716e:	4a0a      	ldr	r2, [pc, #40]	@ (8007198 <prvCheckTasksWaitingTermination+0x58>)
 8007170:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8007172:	f000 fdc5 	bl	8007d00 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f810 	bl	800719c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800717c:	4b06      	ldr	r3, [pc, #24]	@ (8007198 <prvCheckTasksWaitingTermination+0x58>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e1      	bne.n	8007148 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8007184:	bf00      	nop
 8007186:	bf00      	nop
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	2000051c 	.word	0x2000051c
 8007194:	20000548 	.word	0x20000548
 8007198:	20000530 	.word	0x20000530

0800719c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071a8:	4618      	mov	r0, r3
 80071aa:	f000 ff83 	bl	80080b4 <vPortFree>
                vPortFree( pxTCB );
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 ff80 	bl	80080b4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80071b4:	bf00      	nop
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80071bc:	b480      	push	{r7}
 80071be:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071c0:	4b0a      	ldr	r3, [pc, #40]	@ (80071ec <prvResetNextTaskUnblockTime+0x30>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d104      	bne.n	80071d4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80071ca:	4b09      	ldr	r3, [pc, #36]	@ (80071f0 <prvResetNextTaskUnblockTime+0x34>)
 80071cc:	f04f 32ff 	mov.w	r2, #4294967295
 80071d0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80071d2:	e005      	b.n	80071e0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80071d4:	4b05      	ldr	r3, [pc, #20]	@ (80071ec <prvResetNextTaskUnblockTime+0x30>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a04      	ldr	r2, [pc, #16]	@ (80071f0 <prvResetNextTaskUnblockTime+0x34>)
 80071de:	6013      	str	r3, [r2, #0]
}
 80071e0:	bf00      	nop
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	20000500 	.word	0x20000500
 80071f0:	20000568 	.word	0x20000568

080071f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80071fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007228 <xTaskGetSchedulerState+0x34>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d102      	bne.n	8007208 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8007202:	2301      	movs	r3, #1
 8007204:	607b      	str	r3, [r7, #4]
 8007206:	e008      	b.n	800721a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007208:	4b08      	ldr	r3, [pc, #32]	@ (800722c <xTaskGetSchedulerState+0x38>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d102      	bne.n	8007216 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007210:	2302      	movs	r3, #2
 8007212:	607b      	str	r3, [r7, #4]
 8007214:	e001      	b.n	800721a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8007216:	2300      	movs	r3, #0
 8007218:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800721a:	687b      	ldr	r3, [r7, #4]
    }
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	20000554 	.word	0x20000554
 800722c:	20000570 	.word	0x20000570

08007230 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800723c:	2300      	movs	r3, #0
 800723e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d065      	beq.n	8007312 <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007246:	4b35      	ldr	r3, [pc, #212]	@ (800731c <xTaskPriorityDisinherit+0xec>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	429a      	cmp	r2, r3
 800724e:	d00b      	beq.n	8007268 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8007250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	60fb      	str	r3, [r7, #12]
    }
 8007262:	bf00      	nop
 8007264:	bf00      	nop
 8007266:	e7fd      	b.n	8007264 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10b      	bne.n	8007288 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	60bb      	str	r3, [r7, #8]
    }
 8007282:	bf00      	nop
 8007284:	bf00      	nop
 8007286:	e7fd      	b.n	8007284 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800728c:	1e5a      	subs	r2, r3, #1
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800729a:	429a      	cmp	r2, r3
 800729c:	d039      	beq.n	8007312 <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d135      	bne.n	8007312 <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	3304      	adds	r3, #4
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fe fcf6 	bl	8005c9c <uxListRemove>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10a      	bne.n	80072cc <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ba:	2201      	movs	r2, #1
 80072bc:	fa02 f303 	lsl.w	r3, r2, r3
 80072c0:	43da      	mvns	r2, r3
 80072c2:	4b17      	ldr	r3, [pc, #92]	@ (8007320 <xTaskPriorityDisinherit+0xf0>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4013      	ands	r3, r2
 80072c8:	4a15      	ldr	r2, [pc, #84]	@ (8007320 <xTaskPriorityDisinherit+0xf0>)
 80072ca:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d8:	f1c3 0205 	rsb	r2, r3, #5
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e4:	2201      	movs	r2, #1
 80072e6:	409a      	lsls	r2, r3
 80072e8:	4b0d      	ldr	r3, [pc, #52]	@ (8007320 <xTaskPriorityDisinherit+0xf0>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	4a0c      	ldr	r2, [pc, #48]	@ (8007320 <xTaskPriorityDisinherit+0xf0>)
 80072f0:	6013      	str	r3, [r2, #0]
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072f6:	4613      	mov	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4a09      	ldr	r2, [pc, #36]	@ (8007324 <xTaskPriorityDisinherit+0xf4>)
 8007300:	441a      	add	r2, r3
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	3304      	adds	r3, #4
 8007306:	4619      	mov	r1, r3
 8007308:	4610      	mov	r0, r2
 800730a:	f7fe fc6a 	bl	8005be2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800730e:	2301      	movs	r3, #1
 8007310:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007312:	697b      	ldr	r3, [r7, #20]
    }
 8007314:	4618      	mov	r0, r3
 8007316:	3718      	adds	r7, #24
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	20000470 	.word	0x20000470
 8007320:	20000550 	.word	0x20000550
 8007324:	20000474 	.word	0x20000474

08007328 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007332:	4b29      	ldr	r3, [pc, #164]	@ (80073d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007338:	4b28      	ldr	r3, [pc, #160]	@ (80073dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3304      	adds	r3, #4
 800733e:	4618      	mov	r0, r3
 8007340:	f7fe fcac 	bl	8005c9c <uxListRemove>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10b      	bne.n	8007362 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800734a:	4b24      	ldr	r3, [pc, #144]	@ (80073dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007350:	2201      	movs	r2, #1
 8007352:	fa02 f303 	lsl.w	r3, r2, r3
 8007356:	43da      	mvns	r2, r3
 8007358:	4b21      	ldr	r3, [pc, #132]	@ (80073e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4013      	ands	r3, r2
 800735e:	4a20      	ldr	r2, [pc, #128]	@ (80073e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007360:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007368:	d10a      	bne.n	8007380 <prvAddCurrentTaskToDelayedList+0x58>
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d007      	beq.n	8007380 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007370:	4b1a      	ldr	r3, [pc, #104]	@ (80073dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3304      	adds	r3, #4
 8007376:	4619      	mov	r1, r3
 8007378:	481a      	ldr	r0, [pc, #104]	@ (80073e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800737a:	f7fe fc32 	bl	8005be2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800737e:	e026      	b.n	80073ce <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4413      	add	r3, r2
 8007386:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007388:	4b14      	ldr	r3, [pc, #80]	@ (80073dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	429a      	cmp	r2, r3
 8007396:	d209      	bcs.n	80073ac <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007398:	4b13      	ldr	r3, [pc, #76]	@ (80073e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	4b0f      	ldr	r3, [pc, #60]	@ (80073dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	3304      	adds	r3, #4
 80073a2:	4619      	mov	r1, r3
 80073a4:	4610      	mov	r0, r2
 80073a6:	f7fe fc40 	bl	8005c2a <vListInsert>
}
 80073aa:	e010      	b.n	80073ce <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073ac:	4b0f      	ldr	r3, [pc, #60]	@ (80073ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	4b0a      	ldr	r3, [pc, #40]	@ (80073dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3304      	adds	r3, #4
 80073b6:	4619      	mov	r1, r3
 80073b8:	4610      	mov	r0, r2
 80073ba:	f7fe fc36 	bl	8005c2a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80073be:	4b0c      	ldr	r3, [pc, #48]	@ (80073f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d202      	bcs.n	80073ce <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80073c8:	4a09      	ldr	r2, [pc, #36]	@ (80073f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	6013      	str	r3, [r2, #0]
}
 80073ce:	bf00      	nop
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	2000054c 	.word	0x2000054c
 80073dc:	20000470 	.word	0x20000470
 80073e0:	20000550 	.word	0x20000550
 80073e4:	20000534 	.word	0x20000534
 80073e8:	20000504 	.word	0x20000504
 80073ec:	20000500 	.word	0x20000500
 80073f0:	20000568 	.word	0x20000568

080073f4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80073fa:	2300      	movs	r3, #0
 80073fc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80073fe:	f000 fae1 	bl	80079c4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007402:	4b12      	ldr	r3, [pc, #72]	@ (800744c <xTimerCreateTimerTask+0x58>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00b      	beq.n	8007422 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800740a:	4b11      	ldr	r3, [pc, #68]	@ (8007450 <xTimerCreateTimerTask+0x5c>)
 800740c:	9301      	str	r3, [sp, #4]
 800740e:	2302      	movs	r3, #2
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	2300      	movs	r3, #0
 8007414:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007418:	490e      	ldr	r1, [pc, #56]	@ (8007454 <xTimerCreateTimerTask+0x60>)
 800741a:	480f      	ldr	r0, [pc, #60]	@ (8007458 <xTimerCreateTimerTask+0x64>)
 800741c:	f7ff f958 	bl	80066d0 <xTaskCreate>
 8007420:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10b      	bne.n	8007440 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	603b      	str	r3, [r7, #0]
    }
 800743a:	bf00      	nop
 800743c:	bf00      	nop
 800743e:	e7fd      	b.n	800743c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8007440:	687b      	ldr	r3, [r7, #4]
    }
 8007442:	4618      	mov	r0, r3
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	200005a4 	.word	0x200005a4
 8007450:	200005a8 	.word	0x200005a8
 8007454:	0800c448 	.word	0x0800c448
 8007458:	08007595 	.word	0x08007595

0800745c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800745c:	b580      	push	{r7, lr}
 800745e:	b08a      	sub	sp, #40	@ 0x28
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
 8007468:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800746a:	2300      	movs	r3, #0
 800746c:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10b      	bne.n	800748c <xTimerGenericCommand+0x30>
        __asm volatile
 8007474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	623b      	str	r3, [r7, #32]
    }
 8007486:	bf00      	nop
 8007488:	bf00      	nop
 800748a:	e7fd      	b.n	8007488 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800748c:	4b19      	ldr	r3, [pc, #100]	@ (80074f4 <xTimerGenericCommand+0x98>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d02a      	beq.n	80074ea <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	2b05      	cmp	r3, #5
 80074a4:	dc18      	bgt.n	80074d8 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80074a6:	f7ff fea5 	bl	80071f4 <xTaskGetSchedulerState>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d109      	bne.n	80074c4 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80074b0:	4b10      	ldr	r3, [pc, #64]	@ (80074f4 <xTimerGenericCommand+0x98>)
 80074b2:	6818      	ldr	r0, [r3, #0]
 80074b4:	f107 0114 	add.w	r1, r7, #20
 80074b8:	2300      	movs	r3, #0
 80074ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074bc:	f7fe fd08 	bl	8005ed0 <xQueueGenericSend>
 80074c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80074c2:	e012      	b.n	80074ea <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80074c4:	4b0b      	ldr	r3, [pc, #44]	@ (80074f4 <xTimerGenericCommand+0x98>)
 80074c6:	6818      	ldr	r0, [r3, #0]
 80074c8:	f107 0114 	add.w	r1, r7, #20
 80074cc:	2300      	movs	r3, #0
 80074ce:	2200      	movs	r2, #0
 80074d0:	f7fe fcfe 	bl	8005ed0 <xQueueGenericSend>
 80074d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80074d6:	e008      	b.n	80074ea <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80074d8:	4b06      	ldr	r3, [pc, #24]	@ (80074f4 <xTimerGenericCommand+0x98>)
 80074da:	6818      	ldr	r0, [r3, #0]
 80074dc:	f107 0114 	add.w	r1, r7, #20
 80074e0:	2300      	movs	r3, #0
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	f7fe fdf6 	bl	80060d4 <xQueueGenericSendFromISR>
 80074e8:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80074ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80074ec:	4618      	mov	r0, r3
 80074ee:	3728      	adds	r7, #40	@ 0x28
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	200005a4 	.word	0x200005a4

080074f8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b088      	sub	sp, #32
 80074fc:	af02      	add	r7, sp, #8
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007502:	4b23      	ldr	r3, [pc, #140]	@ (8007590 <prvProcessExpiredTimer+0x98>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	3304      	adds	r3, #4
 8007510:	4618      	mov	r0, r3
 8007512:	f7fe fbc3 	bl	8005c9c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800751c:	f003 0304 	and.w	r3, r3, #4
 8007520:	2b00      	cmp	r3, #0
 8007522:	d023      	beq.n	800756c <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	699a      	ldr	r2, [r3, #24]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	18d1      	adds	r1, r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	6978      	ldr	r0, [r7, #20]
 8007532:	f000 f8d5 	bl	80076e0 <prvInsertTimerInActiveList>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d020      	beq.n	800757e <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800753c:	2300      	movs	r3, #0
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	2300      	movs	r3, #0
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	2100      	movs	r1, #0
 8007546:	6978      	ldr	r0, [r7, #20]
 8007548:	f7ff ff88 	bl	800745c <xTimerGenericCommand>
 800754c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d114      	bne.n	800757e <prvProcessExpiredTimer+0x86>
        __asm volatile
 8007554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	60fb      	str	r3, [r7, #12]
    }
 8007566:	bf00      	nop
 8007568:	bf00      	nop
 800756a:	e7fd      	b.n	8007568 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007572:	f023 0301 	bic.w	r3, r3, #1
 8007576:	b2da      	uxtb	r2, r3
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	6978      	ldr	r0, [r7, #20]
 8007584:	4798      	blx	r3
    }
 8007586:	bf00      	nop
 8007588:	3718      	adds	r7, #24
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	2000059c 	.word	0x2000059c

08007594 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800759c:	f107 0308 	add.w	r3, r7, #8
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 f859 	bl	8007658 <prvGetNextExpireTime>
 80075a6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	4619      	mov	r1, r3
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 f805 	bl	80075bc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80075b2:	f000 f8d7 	bl	8007764 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075b6:	bf00      	nop
 80075b8:	e7f0      	b.n	800759c <prvTimerTask+0x8>
	...

080075bc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80075c6:	f7ff fa51 	bl	8006a6c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075ca:	f107 0308 	add.w	r3, r7, #8
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 f866 	bl	80076a0 <prvSampleTimeNow>
 80075d4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d130      	bne.n	800763e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10a      	bne.n	80075f8 <prvProcessTimerOrBlockTask+0x3c>
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d806      	bhi.n	80075f8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80075ea:	f7ff fa4d 	bl	8006a88 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80075ee:	68f9      	ldr	r1, [r7, #12]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f7ff ff81 	bl	80074f8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80075f6:	e024      	b.n	8007642 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d008      	beq.n	8007610 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80075fe:	4b13      	ldr	r3, [pc, #76]	@ (800764c <prvProcessTimerOrBlockTask+0x90>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <prvProcessTimerOrBlockTask+0x50>
 8007608:	2301      	movs	r3, #1
 800760a:	e000      	b.n	800760e <prvProcessTimerOrBlockTask+0x52>
 800760c:	2300      	movs	r3, #0
 800760e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007610:	4b0f      	ldr	r3, [pc, #60]	@ (8007650 <prvProcessTimerOrBlockTask+0x94>)
 8007612:	6818      	ldr	r0, [r3, #0]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	4619      	mov	r1, r3
 800761e:	f7ff f823 	bl	8006668 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007622:	f7ff fa31 	bl	8006a88 <xTaskResumeAll>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10a      	bne.n	8007642 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800762c:	4b09      	ldr	r3, [pc, #36]	@ (8007654 <prvProcessTimerOrBlockTask+0x98>)
 800762e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	f3bf 8f6f 	isb	sy
    }
 800763c:	e001      	b.n	8007642 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800763e:	f7ff fa23 	bl	8006a88 <xTaskResumeAll>
    }
 8007642:	bf00      	nop
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	200005a0 	.word	0x200005a0
 8007650:	200005a4 	.word	0x200005a4
 8007654:	e000ed04 	.word	0xe000ed04

08007658 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007660:	4b0e      	ldr	r3, [pc, #56]	@ (800769c <prvGetNextExpireTime+0x44>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <prvGetNextExpireTime+0x16>
 800766a:	2201      	movs	r2, #1
 800766c:	e000      	b.n	8007670 <prvGetNextExpireTime+0x18>
 800766e:	2200      	movs	r2, #0
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d105      	bne.n	8007688 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800767c:	4b07      	ldr	r3, [pc, #28]	@ (800769c <prvGetNextExpireTime+0x44>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	60fb      	str	r3, [r7, #12]
 8007686:	e001      	b.n	800768c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007688:	2300      	movs	r3, #0
 800768a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800768c:	68fb      	ldr	r3, [r7, #12]
    }
 800768e:	4618      	mov	r0, r3
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	2000059c 	.word	0x2000059c

080076a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80076a8:	f7ff fa8c 	bl	8006bc4 <xTaskGetTickCount>
 80076ac:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80076ae:	4b0b      	ldr	r3, [pc, #44]	@ (80076dc <prvSampleTimeNow+0x3c>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d205      	bcs.n	80076c4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80076b8:	f000 f91e 	bl	80078f8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	601a      	str	r2, [r3, #0]
 80076c2:	e002      	b.n	80076ca <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80076ca:	4a04      	ldr	r2, [pc, #16]	@ (80076dc <prvSampleTimeNow+0x3c>)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80076d0:	68fb      	ldr	r3, [r7, #12]
    }
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	200005ac 	.word	0x200005ac

080076e0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
 80076ec:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80076ee:	2300      	movs	r3, #0
 80076f0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	429a      	cmp	r2, r3
 8007704:	d812      	bhi.n	800772c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	1ad2      	subs	r2, r2, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	429a      	cmp	r2, r3
 8007712:	d302      	bcc.n	800771a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007714:	2301      	movs	r3, #1
 8007716:	617b      	str	r3, [r7, #20]
 8007718:	e01b      	b.n	8007752 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800771a:	4b10      	ldr	r3, [pc, #64]	@ (800775c <prvInsertTimerInActiveList+0x7c>)
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	3304      	adds	r3, #4
 8007722:	4619      	mov	r1, r3
 8007724:	4610      	mov	r0, r2
 8007726:	f7fe fa80 	bl	8005c2a <vListInsert>
 800772a:	e012      	b.n	8007752 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	429a      	cmp	r2, r3
 8007732:	d206      	bcs.n	8007742 <prvInsertTimerInActiveList+0x62>
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	429a      	cmp	r2, r3
 800773a:	d302      	bcc.n	8007742 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800773c:	2301      	movs	r3, #1
 800773e:	617b      	str	r3, [r7, #20]
 8007740:	e007      	b.n	8007752 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007742:	4b07      	ldr	r3, [pc, #28]	@ (8007760 <prvInsertTimerInActiveList+0x80>)
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3304      	adds	r3, #4
 800774a:	4619      	mov	r1, r3
 800774c:	4610      	mov	r0, r2
 800774e:	f7fe fa6c 	bl	8005c2a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007752:	697b      	ldr	r3, [r7, #20]
    }
 8007754:	4618      	mov	r0, r3
 8007756:	3718      	adds	r7, #24
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	200005a0 	.word	0x200005a0
 8007760:	2000059c 	.word	0x2000059c

08007764 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007764:	b580      	push	{r7, lr}
 8007766:	b08c      	sub	sp, #48	@ 0x30
 8007768:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800776a:	e0b2      	b.n	80078d2 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2b00      	cmp	r3, #0
 8007770:	f2c0 80af 	blt.w	80078d2 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777a:	695b      	ldr	r3, [r3, #20]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d004      	beq.n	800778a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007782:	3304      	adds	r3, #4
 8007784:	4618      	mov	r0, r3
 8007786:	f7fe fa89 	bl	8005c9c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800778a:	1d3b      	adds	r3, r7, #4
 800778c:	4618      	mov	r0, r3
 800778e:	f7ff ff87 	bl	80076a0 <prvSampleTimeNow>
 8007792:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2b09      	cmp	r3, #9
 8007798:	f200 8098 	bhi.w	80078cc <prvProcessReceivedCommands+0x168>
 800779c:	a201      	add	r2, pc, #4	@ (adr r2, 80077a4 <prvProcessReceivedCommands+0x40>)
 800779e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a2:	bf00      	nop
 80077a4:	080077cd 	.word	0x080077cd
 80077a8:	080077cd 	.word	0x080077cd
 80077ac:	080077cd 	.word	0x080077cd
 80077b0:	08007843 	.word	0x08007843
 80077b4:	08007857 	.word	0x08007857
 80077b8:	080078a3 	.word	0x080078a3
 80077bc:	080077cd 	.word	0x080077cd
 80077c0:	080077cd 	.word	0x080077cd
 80077c4:	08007843 	.word	0x08007843
 80077c8:	08007857 	.word	0x08007857
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077d2:	f043 0301 	orr.w	r3, r3, #1
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	18d1      	adds	r1, r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6a3a      	ldr	r2, [r7, #32]
 80077ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80077ec:	f7ff ff78 	bl	80076e0 <prvInsertTimerInActiveList>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d06c      	beq.n	80078d0 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80077fc:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007800:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007804:	f003 0304 	and.w	r3, r3, #4
 8007808:	2b00      	cmp	r3, #0
 800780a:	d061      	beq.n	80078d0 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	441a      	add	r2, r3
 8007814:	2300      	movs	r3, #0
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	2300      	movs	r3, #0
 800781a:	2100      	movs	r1, #0
 800781c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800781e:	f7ff fe1d 	bl	800745c <xTimerGenericCommand>
 8007822:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d152      	bne.n	80078d0 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 800782a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800782e:	f383 8811 	msr	BASEPRI, r3
 8007832:	f3bf 8f6f 	isb	sy
 8007836:	f3bf 8f4f 	dsb	sy
 800783a:	61bb      	str	r3, [r7, #24]
    }
 800783c:	bf00      	nop
 800783e:	bf00      	nop
 8007840:	e7fd      	b.n	800783e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007844:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007848:	f023 0301 	bic.w	r3, r3, #1
 800784c:	b2da      	uxtb	r2, r3
 800784e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007850:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8007854:	e03d      	b.n	80078d2 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007858:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800785c:	f043 0301 	orr.w	r3, r3, #1
 8007860:	b2da      	uxtb	r2, r3
 8007862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007864:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786c:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800786e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10b      	bne.n	800788e <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8007876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	617b      	str	r3, [r7, #20]
    }
 8007888:	bf00      	nop
 800788a:	bf00      	nop
 800788c:	e7fd      	b.n	800788a <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800788e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007890:	699a      	ldr	r2, [r3, #24]
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	18d1      	adds	r1, r2, r3
 8007896:	6a3b      	ldr	r3, [r7, #32]
 8007898:	6a3a      	ldr	r2, [r7, #32]
 800789a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800789c:	f7ff ff20 	bl	80076e0 <prvInsertTimerInActiveList>
                        break;
 80078a0:	e017      	b.n	80078d2 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80078a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078a8:	f003 0302 	and.w	r3, r3, #2
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d103      	bne.n	80078b8 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 80078b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80078b2:	f000 fbff 	bl	80080b4 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80078b6:	e00c      	b.n	80078d2 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078be:	f023 0301 	bic.w	r3, r3, #1
 80078c2:	b2da      	uxtb	r2, r3
 80078c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80078ca:	e002      	b.n	80078d2 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 80078cc:	bf00      	nop
 80078ce:	e000      	b.n	80078d2 <prvProcessReceivedCommands+0x16e>
                        break;
 80078d0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078d2:	4b08      	ldr	r3, [pc, #32]	@ (80078f4 <prvProcessReceivedCommands+0x190>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f107 0108 	add.w	r1, r7, #8
 80078da:	2200      	movs	r2, #0
 80078dc:	4618      	mov	r0, r3
 80078de:	f7fe fca7 	bl	8006230 <xQueueReceive>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f47f af41 	bne.w	800776c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80078ea:	bf00      	nop
 80078ec:	bf00      	nop
 80078ee:	3728      	adds	r7, #40	@ 0x28
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	200005a4 	.word	0x200005a4

080078f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b088      	sub	sp, #32
 80078fc:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078fe:	e049      	b.n	8007994 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007900:	4b2e      	ldr	r3, [pc, #184]	@ (80079bc <prvSwitchTimerLists+0xc4>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800790a:	4b2c      	ldr	r3, [pc, #176]	@ (80079bc <prvSwitchTimerLists+0xc4>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	3304      	adds	r3, #4
 8007918:	4618      	mov	r0, r3
 800791a:	f7fe f9bf 	bl	8005c9c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800792c:	f003 0304 	and.w	r3, r3, #4
 8007930:	2b00      	cmp	r3, #0
 8007932:	d02f      	beq.n	8007994 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	4413      	add	r3, r2
 800793c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	429a      	cmp	r2, r3
 8007944:	d90e      	bls.n	8007964 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007952:	4b1a      	ldr	r3, [pc, #104]	@ (80079bc <prvSwitchTimerLists+0xc4>)
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	3304      	adds	r3, #4
 800795a:	4619      	mov	r1, r3
 800795c:	4610      	mov	r0, r2
 800795e:	f7fe f964 	bl	8005c2a <vListInsert>
 8007962:	e017      	b.n	8007994 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007964:	2300      	movs	r3, #0
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	2300      	movs	r3, #0
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	2100      	movs	r1, #0
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f7ff fd74 	bl	800745c <xTimerGenericCommand>
 8007974:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10b      	bne.n	8007994 <prvSwitchTimerLists+0x9c>
        __asm volatile
 800797c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	603b      	str	r3, [r7, #0]
    }
 800798e:	bf00      	nop
 8007990:	bf00      	nop
 8007992:	e7fd      	b.n	8007990 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007994:	4b09      	ldr	r3, [pc, #36]	@ (80079bc <prvSwitchTimerLists+0xc4>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1b0      	bne.n	8007900 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800799e:	4b07      	ldr	r3, [pc, #28]	@ (80079bc <prvSwitchTimerLists+0xc4>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80079a4:	4b06      	ldr	r3, [pc, #24]	@ (80079c0 <prvSwitchTimerLists+0xc8>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a04      	ldr	r2, [pc, #16]	@ (80079bc <prvSwitchTimerLists+0xc4>)
 80079aa:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80079ac:	4a04      	ldr	r2, [pc, #16]	@ (80079c0 <prvSwitchTimerLists+0xc8>)
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	6013      	str	r3, [r2, #0]
    }
 80079b2:	bf00      	nop
 80079b4:	3718      	adds	r7, #24
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	2000059c 	.word	0x2000059c
 80079c0:	200005a0 	.word	0x200005a0

080079c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80079c4:	b580      	push	{r7, lr}
 80079c6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80079c8:	f000 f968 	bl	8007c9c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80079cc:	4b12      	ldr	r3, [pc, #72]	@ (8007a18 <prvCheckForValidListAndQueue+0x54>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d11d      	bne.n	8007a10 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80079d4:	4811      	ldr	r0, [pc, #68]	@ (8007a1c <prvCheckForValidListAndQueue+0x58>)
 80079d6:	f7fe f8d7 	bl	8005b88 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80079da:	4811      	ldr	r0, [pc, #68]	@ (8007a20 <prvCheckForValidListAndQueue+0x5c>)
 80079dc:	f7fe f8d4 	bl	8005b88 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80079e0:	4b10      	ldr	r3, [pc, #64]	@ (8007a24 <prvCheckForValidListAndQueue+0x60>)
 80079e2:	4a0e      	ldr	r2, [pc, #56]	@ (8007a1c <prvCheckForValidListAndQueue+0x58>)
 80079e4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80079e6:	4b10      	ldr	r3, [pc, #64]	@ (8007a28 <prvCheckForValidListAndQueue+0x64>)
 80079e8:	4a0d      	ldr	r2, [pc, #52]	@ (8007a20 <prvCheckForValidListAndQueue+0x5c>)
 80079ea:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80079ec:	2200      	movs	r2, #0
 80079ee:	210c      	movs	r1, #12
 80079f0:	200a      	movs	r0, #10
 80079f2:	f7fe f9e7 	bl	8005dc4 <xQueueGenericCreate>
 80079f6:	4603      	mov	r3, r0
 80079f8:	4a07      	ldr	r2, [pc, #28]	@ (8007a18 <prvCheckForValidListAndQueue+0x54>)
 80079fa:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80079fc:	4b06      	ldr	r3, [pc, #24]	@ (8007a18 <prvCheckForValidListAndQueue+0x54>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d005      	beq.n	8007a10 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a04:	4b04      	ldr	r3, [pc, #16]	@ (8007a18 <prvCheckForValidListAndQueue+0x54>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4908      	ldr	r1, [pc, #32]	@ (8007a2c <prvCheckForValidListAndQueue+0x68>)
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fe fe02 	bl	8006614 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007a10:	f000 f976 	bl	8007d00 <vPortExitCritical>
    }
 8007a14:	bf00      	nop
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	200005a4 	.word	0x200005a4
 8007a1c:	20000574 	.word	0x20000574
 8007a20:	20000588 	.word	0x20000588
 8007a24:	2000059c 	.word	0x2000059c
 8007a28:	200005a0 	.word	0x200005a0
 8007a2c:	0800c450 	.word	0x0800c450

08007a30 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	3b04      	subs	r3, #4
 8007a40:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007a48:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3b04      	subs	r3, #4
 8007a4e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	f023 0201 	bic.w	r2, r3, #1
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	3b04      	subs	r3, #4
 8007a5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007a60:	4a0c      	ldr	r2, [pc, #48]	@ (8007a94 <pxPortInitialiseStack+0x64>)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	3b14      	subs	r3, #20
 8007a6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	3b04      	subs	r3, #4
 8007a76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f06f 0202 	mvn.w	r2, #2
 8007a7e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	3b20      	subs	r3, #32
 8007a84:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007a86:	68fb      	ldr	r3, [r7, #12]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3714      	adds	r7, #20
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr
 8007a94:	08007a99 	.word	0x08007a99

08007a98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007aa2:	4b13      	ldr	r3, [pc, #76]	@ (8007af0 <prvTaskExitError+0x58>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aaa:	d00b      	beq.n	8007ac4 <prvTaskExitError+0x2c>
        __asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	60fb      	str	r3, [r7, #12]
    }
 8007abe:	bf00      	nop
 8007ac0:	bf00      	nop
 8007ac2:	e7fd      	b.n	8007ac0 <prvTaskExitError+0x28>
        __asm volatile
 8007ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac8:	f383 8811 	msr	BASEPRI, r3
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	60bb      	str	r3, [r7, #8]
    }
 8007ad6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007ad8:	bf00      	nop
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d0fc      	beq.n	8007ada <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007ae0:	bf00      	nop
 8007ae2:	bf00      	nop
 8007ae4:	3714      	adds	r7, #20
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	20000018 	.word	0x20000018
	...

08007b00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007b00:	4b07      	ldr	r3, [pc, #28]	@ (8007b20 <pxCurrentTCBConst2>)
 8007b02:	6819      	ldr	r1, [r3, #0]
 8007b04:	6808      	ldr	r0, [r1, #0]
 8007b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b0a:	f380 8809 	msr	PSP, r0
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	f04f 0000 	mov.w	r0, #0
 8007b16:	f380 8811 	msr	BASEPRI, r0
 8007b1a:	4770      	bx	lr
 8007b1c:	f3af 8000 	nop.w

08007b20 <pxCurrentTCBConst2>:
 8007b20:	20000470 	.word	0x20000470
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007b24:	bf00      	nop
 8007b26:	bf00      	nop

08007b28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007b28:	4808      	ldr	r0, [pc, #32]	@ (8007b4c <prvPortStartFirstTask+0x24>)
 8007b2a:	6800      	ldr	r0, [r0, #0]
 8007b2c:	6800      	ldr	r0, [r0, #0]
 8007b2e:	f380 8808 	msr	MSP, r0
 8007b32:	f04f 0000 	mov.w	r0, #0
 8007b36:	f380 8814 	msr	CONTROL, r0
 8007b3a:	b662      	cpsie	i
 8007b3c:	b661      	cpsie	f
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	df00      	svc	0
 8007b48:	bf00      	nop
 8007b4a:	0000      	.short	0x0000
 8007b4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007b50:	bf00      	nop
 8007b52:	bf00      	nop

08007b54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b086      	sub	sp, #24
 8007b58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007b5a:	4b47      	ldr	r3, [pc, #284]	@ (8007c78 <xPortStartScheduler+0x124>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a47      	ldr	r2, [pc, #284]	@ (8007c7c <xPortStartScheduler+0x128>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d10b      	bne.n	8007b7c <xPortStartScheduler+0x28>
        __asm volatile
 8007b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b68:	f383 8811 	msr	BASEPRI, r3
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	613b      	str	r3, [r7, #16]
    }
 8007b76:	bf00      	nop
 8007b78:	bf00      	nop
 8007b7a:	e7fd      	b.n	8007b78 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007b7c:	4b3e      	ldr	r3, [pc, #248]	@ (8007c78 <xPortStartScheduler+0x124>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a3f      	ldr	r2, [pc, #252]	@ (8007c80 <xPortStartScheduler+0x12c>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d10b      	bne.n	8007b9e <xPortStartScheduler+0x4a>
        __asm volatile
 8007b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b8a:	f383 8811 	msr	BASEPRI, r3
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f3bf 8f4f 	dsb	sy
 8007b96:	60fb      	str	r3, [r7, #12]
    }
 8007b98:	bf00      	nop
 8007b9a:	bf00      	nop
 8007b9c:	e7fd      	b.n	8007b9a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b9e:	4b39      	ldr	r3, [pc, #228]	@ (8007c84 <xPortStartScheduler+0x130>)
 8007ba0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	22ff      	movs	r2, #255	@ 0xff
 8007bae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007bb8:	78fb      	ldrb	r3, [r7, #3]
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	4b31      	ldr	r3, [pc, #196]	@ (8007c88 <xPortStartScheduler+0x134>)
 8007bc4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bc6:	4b31      	ldr	r3, [pc, #196]	@ (8007c8c <xPortStartScheduler+0x138>)
 8007bc8:	2207      	movs	r2, #7
 8007bca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bcc:	e009      	b.n	8007be2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8007bce:	4b2f      	ldr	r3, [pc, #188]	@ (8007c8c <xPortStartScheduler+0x138>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	4a2d      	ldr	r2, [pc, #180]	@ (8007c8c <xPortStartScheduler+0x138>)
 8007bd6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007bd8:	78fb      	ldrb	r3, [r7, #3]
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	005b      	lsls	r3, r3, #1
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007be2:	78fb      	ldrb	r3, [r7, #3]
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bea:	2b80      	cmp	r3, #128	@ 0x80
 8007bec:	d0ef      	beq.n	8007bce <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007bee:	4b27      	ldr	r3, [pc, #156]	@ (8007c8c <xPortStartScheduler+0x138>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f1c3 0307 	rsb	r3, r3, #7
 8007bf6:	2b04      	cmp	r3, #4
 8007bf8:	d00b      	beq.n	8007c12 <xPortStartScheduler+0xbe>
        __asm volatile
 8007bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bfe:	f383 8811 	msr	BASEPRI, r3
 8007c02:	f3bf 8f6f 	isb	sy
 8007c06:	f3bf 8f4f 	dsb	sy
 8007c0a:	60bb      	str	r3, [r7, #8]
    }
 8007c0c:	bf00      	nop
 8007c0e:	bf00      	nop
 8007c10:	e7fd      	b.n	8007c0e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c12:	4b1e      	ldr	r3, [pc, #120]	@ (8007c8c <xPortStartScheduler+0x138>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	021b      	lsls	r3, r3, #8
 8007c18:	4a1c      	ldr	r2, [pc, #112]	@ (8007c8c <xPortStartScheduler+0x138>)
 8007c1a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8007c8c <xPortStartScheduler+0x138>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007c24:	4a19      	ldr	r2, [pc, #100]	@ (8007c8c <xPortStartScheduler+0x138>)
 8007c26:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007c30:	4b17      	ldr	r3, [pc, #92]	@ (8007c90 <xPortStartScheduler+0x13c>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a16      	ldr	r2, [pc, #88]	@ (8007c90 <xPortStartScheduler+0x13c>)
 8007c36:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007c3a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007c3c:	4b14      	ldr	r3, [pc, #80]	@ (8007c90 <xPortStartScheduler+0x13c>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a13      	ldr	r2, [pc, #76]	@ (8007c90 <xPortStartScheduler+0x13c>)
 8007c42:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007c46:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007c48:	f000 f8e0 	bl	8007e0c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007c4c:	4b11      	ldr	r3, [pc, #68]	@ (8007c94 <xPortStartScheduler+0x140>)
 8007c4e:	2200      	movs	r2, #0
 8007c50:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007c52:	f000 f8ff 	bl	8007e54 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c56:	4b10      	ldr	r3, [pc, #64]	@ (8007c98 <xPortStartScheduler+0x144>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8007c98 <xPortStartScheduler+0x144>)
 8007c5c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007c60:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007c62:	f7ff ff61 	bl	8007b28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007c66:	f7ff f877 	bl	8006d58 <vTaskSwitchContext>
    prvTaskExitError();
 8007c6a:	f7ff ff15 	bl	8007a98 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	e000ed00 	.word	0xe000ed00
 8007c7c:	410fc271 	.word	0x410fc271
 8007c80:	410fc270 	.word	0x410fc270
 8007c84:	e000e400 	.word	0xe000e400
 8007c88:	200005b0 	.word	0x200005b0
 8007c8c:	200005b4 	.word	0x200005b4
 8007c90:	e000ed20 	.word	0xe000ed20
 8007c94:	20000018 	.word	0x20000018
 8007c98:	e000ef34 	.word	0xe000ef34

08007c9c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
        __asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca6:	f383 8811 	msr	BASEPRI, r3
 8007caa:	f3bf 8f6f 	isb	sy
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	607b      	str	r3, [r7, #4]
    }
 8007cb4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007cb6:	4b10      	ldr	r3, [pc, #64]	@ (8007cf8 <vPortEnterCritical+0x5c>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	4a0e      	ldr	r2, [pc, #56]	@ (8007cf8 <vPortEnterCritical+0x5c>)
 8007cbe:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf8 <vPortEnterCritical+0x5c>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d110      	bne.n	8007cea <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8007cfc <vPortEnterCritical+0x60>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00b      	beq.n	8007cea <vPortEnterCritical+0x4e>
        __asm volatile
 8007cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	603b      	str	r3, [r7, #0]
    }
 8007ce4:	bf00      	nop
 8007ce6:	bf00      	nop
 8007ce8:	e7fd      	b.n	8007ce6 <vPortEnterCritical+0x4a>
    }
}
 8007cea:	bf00      	nop
 8007cec:	370c      	adds	r7, #12
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	20000018 	.word	0x20000018
 8007cfc:	e000ed04 	.word	0xe000ed04

08007d00 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007d06:	4b12      	ldr	r3, [pc, #72]	@ (8007d50 <vPortExitCritical+0x50>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10b      	bne.n	8007d26 <vPortExitCritical+0x26>
        __asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	607b      	str	r3, [r7, #4]
    }
 8007d20:	bf00      	nop
 8007d22:	bf00      	nop
 8007d24:	e7fd      	b.n	8007d22 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8007d26:	4b0a      	ldr	r3, [pc, #40]	@ (8007d50 <vPortExitCritical+0x50>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	4a08      	ldr	r2, [pc, #32]	@ (8007d50 <vPortExitCritical+0x50>)
 8007d2e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007d30:	4b07      	ldr	r3, [pc, #28]	@ (8007d50 <vPortExitCritical+0x50>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d105      	bne.n	8007d44 <vPortExitCritical+0x44>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	f383 8811 	msr	BASEPRI, r3
    }
 8007d42:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr
 8007d50:	20000018 	.word	0x20000018
	...

08007d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007d60:	f3ef 8009 	mrs	r0, PSP
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	4b15      	ldr	r3, [pc, #84]	@ (8007dc0 <pxCurrentTCBConst>)
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	f01e 0f10 	tst.w	lr, #16
 8007d70:	bf08      	it	eq
 8007d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7a:	6010      	str	r0, [r2, #0]
 8007d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007d84:	f380 8811 	msr	BASEPRI, r0
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f7fe ffe2 	bl	8006d58 <vTaskSwitchContext>
 8007d94:	f04f 0000 	mov.w	r0, #0
 8007d98:	f380 8811 	msr	BASEPRI, r0
 8007d9c:	bc09      	pop	{r0, r3}
 8007d9e:	6819      	ldr	r1, [r3, #0]
 8007da0:	6808      	ldr	r0, [r1, #0]
 8007da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da6:	f01e 0f10 	tst.w	lr, #16
 8007daa:	bf08      	it	eq
 8007dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007db0:	f380 8809 	msr	PSP, r0
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	f3af 8000 	nop.w

08007dc0 <pxCurrentTCBConst>:
 8007dc0:	20000470 	.word	0x20000470
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007dc4:	bf00      	nop
 8007dc6:	bf00      	nop

08007dc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
        __asm volatile
 8007dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd2:	f383 8811 	msr	BASEPRI, r3
 8007dd6:	f3bf 8f6f 	isb	sy
 8007dda:	f3bf 8f4f 	dsb	sy
 8007dde:	607b      	str	r3, [r7, #4]
    }
 8007de0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007de2:	f7fe feff 	bl	8006be4 <xTaskIncrementTick>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007dec:	4b06      	ldr	r3, [pc, #24]	@ (8007e08 <SysTick_Handler+0x40>)
 8007dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	2300      	movs	r3, #0
 8007df6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	f383 8811 	msr	BASEPRI, r3
    }
 8007dfe:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007e00:	bf00      	nop
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	e000ed04 	.word	0xe000ed04

08007e0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e10:	4b0b      	ldr	r3, [pc, #44]	@ (8007e40 <vPortSetupTimerInterrupt+0x34>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e16:	4b0b      	ldr	r3, [pc, #44]	@ (8007e44 <vPortSetupTimerInterrupt+0x38>)
 8007e18:	2200      	movs	r2, #0
 8007e1a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e48 <vPortSetupTimerInterrupt+0x3c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a0a      	ldr	r2, [pc, #40]	@ (8007e4c <vPortSetupTimerInterrupt+0x40>)
 8007e22:	fba2 2303 	umull	r2, r3, r2, r3
 8007e26:	099b      	lsrs	r3, r3, #6
 8007e28:	4a09      	ldr	r2, [pc, #36]	@ (8007e50 <vPortSetupTimerInterrupt+0x44>)
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e2e:	4b04      	ldr	r3, [pc, #16]	@ (8007e40 <vPortSetupTimerInterrupt+0x34>)
 8007e30:	2207      	movs	r2, #7
 8007e32:	601a      	str	r2, [r3, #0]
}
 8007e34:	bf00      	nop
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	e000e010 	.word	0xe000e010
 8007e44:	e000e018 	.word	0xe000e018
 8007e48:	20000008 	.word	0x20000008
 8007e4c:	10624dd3 	.word	0x10624dd3
 8007e50:	e000e014 	.word	0xe000e014

08007e54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007e54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007e64 <vPortEnableVFP+0x10>
 8007e58:	6801      	ldr	r1, [r0, #0]
 8007e5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007e5e:	6001      	str	r1, [r0, #0]
 8007e60:	4770      	bx	lr
 8007e62:	0000      	.short	0x0000
 8007e64:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007e68:	bf00      	nop
 8007e6a:	bf00      	nop

08007e6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007e72:	f3ef 8305 	mrs	r3, IPSR
 8007e76:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2b0f      	cmp	r3, #15
 8007e7c:	d915      	bls.n	8007eaa <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e7e:	4a18      	ldr	r2, [pc, #96]	@ (8007ee0 <vPortValidateInterruptPriority+0x74>)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	4413      	add	r3, r2
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e88:	4b16      	ldr	r3, [pc, #88]	@ (8007ee4 <vPortValidateInterruptPriority+0x78>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	7afa      	ldrb	r2, [r7, #11]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d20b      	bcs.n	8007eaa <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8007e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e96:	f383 8811 	msr	BASEPRI, r3
 8007e9a:	f3bf 8f6f 	isb	sy
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	607b      	str	r3, [r7, #4]
    }
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop
 8007ea8:	e7fd      	b.n	8007ea6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8007ee8 <vPortValidateInterruptPriority+0x7c>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8007eec <vPortValidateInterruptPriority+0x80>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d90b      	bls.n	8007ed2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8007eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ebe:	f383 8811 	msr	BASEPRI, r3
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	f3bf 8f4f 	dsb	sy
 8007eca:	603b      	str	r3, [r7, #0]
    }
 8007ecc:	bf00      	nop
 8007ece:	bf00      	nop
 8007ed0:	e7fd      	b.n	8007ece <vPortValidateInterruptPriority+0x62>
    }
 8007ed2:	bf00      	nop
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	e000e3f0 	.word	0xe000e3f0
 8007ee4:	200005b0 	.word	0x200005b0
 8007ee8:	e000ed0c 	.word	0xe000ed0c
 8007eec:	200005b4 	.word	0x200005b4

08007ef0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b08a      	sub	sp, #40	@ 0x28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007efc:	f7fe fdb6 	bl	8006a6c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007f00:	4b66      	ldr	r3, [pc, #408]	@ (800809c <pvPortMalloc+0x1ac>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d101      	bne.n	8007f0c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007f08:	f000 f938 	bl	800817c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f0c:	4b64      	ldr	r3, [pc, #400]	@ (80080a0 <pvPortMalloc+0x1b0>)
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4013      	ands	r3, r2
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f040 80a9 	bne.w	800806c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d02e      	beq.n	8007f7e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8007f20:	2208      	movs	r2, #8
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d228      	bcs.n	8007f7e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8007f2c:	2208      	movs	r2, #8
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4413      	add	r3, r2
 8007f32:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d022      	beq.n	8007f84 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f023 0307 	bic.w	r3, r3, #7
 8007f44:	3308      	adds	r3, #8
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d215      	bcs.n	8007f78 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f023 0307 	bic.w	r3, r3, #7
 8007f52:	3308      	adds	r3, #8
 8007f54:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f003 0307 	and.w	r3, r3, #7
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d011      	beq.n	8007f84 <pvPortMalloc+0x94>
        __asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	617b      	str	r3, [r7, #20]
    }
 8007f72:	bf00      	nop
 8007f74:	bf00      	nop
 8007f76:	e7fd      	b.n	8007f74 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f7c:	e002      	b.n	8007f84 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	607b      	str	r3, [r7, #4]
 8007f82:	e000      	b.n	8007f86 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f84:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d06f      	beq.n	800806c <pvPortMalloc+0x17c>
 8007f8c:	4b45      	ldr	r3, [pc, #276]	@ (80080a4 <pvPortMalloc+0x1b4>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d86a      	bhi.n	800806c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007f96:	4b44      	ldr	r3, [pc, #272]	@ (80080a8 <pvPortMalloc+0x1b8>)
 8007f98:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007f9a:	4b43      	ldr	r3, [pc, #268]	@ (80080a8 <pvPortMalloc+0x1b8>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fa0:	e004      	b.n	8007fac <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d903      	bls.n	8007fbe <pvPortMalloc+0xce>
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1f1      	bne.n	8007fa2 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007fbe:	4b37      	ldr	r3, [pc, #220]	@ (800809c <pvPortMalloc+0x1ac>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d051      	beq.n	800806c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007fc8:	6a3b      	ldr	r3, [r7, #32]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2208      	movs	r2, #8
 8007fce:	4413      	add	r3, r2
 8007fd0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	6a3b      	ldr	r3, [r7, #32]
 8007fd8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fdc:	685a      	ldr	r2, [r3, #4]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	1ad2      	subs	r2, r2, r3
 8007fe2:	2308      	movs	r3, #8
 8007fe4:	005b      	lsls	r3, r3, #1
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d920      	bls.n	800802c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4413      	add	r3, r2
 8007ff0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	f003 0307 	and.w	r3, r3, #7
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00b      	beq.n	8008014 <pvPortMalloc+0x124>
        __asm volatile
 8007ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008000:	f383 8811 	msr	BASEPRI, r3
 8008004:	f3bf 8f6f 	isb	sy
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	613b      	str	r3, [r7, #16]
    }
 800800e:	bf00      	nop
 8008010:	bf00      	nop
 8008012:	e7fd      	b.n	8008010 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	1ad2      	subs	r2, r2, r3
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008026:	69b8      	ldr	r0, [r7, #24]
 8008028:	f000 f90a 	bl	8008240 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800802c:	4b1d      	ldr	r3, [pc, #116]	@ (80080a4 <pvPortMalloc+0x1b4>)
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	4a1b      	ldr	r2, [pc, #108]	@ (80080a4 <pvPortMalloc+0x1b4>)
 8008038:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800803a:	4b1a      	ldr	r3, [pc, #104]	@ (80080a4 <pvPortMalloc+0x1b4>)
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	4b1b      	ldr	r3, [pc, #108]	@ (80080ac <pvPortMalloc+0x1bc>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	429a      	cmp	r2, r3
 8008044:	d203      	bcs.n	800804e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008046:	4b17      	ldr	r3, [pc, #92]	@ (80080a4 <pvPortMalloc+0x1b4>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a18      	ldr	r2, [pc, #96]	@ (80080ac <pvPortMalloc+0x1bc>)
 800804c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800804e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008050:	685a      	ldr	r2, [r3, #4]
 8008052:	4b13      	ldr	r3, [pc, #76]	@ (80080a0 <pvPortMalloc+0x1b0>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	431a      	orrs	r2, r3
 8008058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800805c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805e:	2200      	movs	r2, #0
 8008060:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008062:	4b13      	ldr	r3, [pc, #76]	@ (80080b0 <pvPortMalloc+0x1c0>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3301      	adds	r3, #1
 8008068:	4a11      	ldr	r2, [pc, #68]	@ (80080b0 <pvPortMalloc+0x1c0>)
 800806a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800806c:	f7fe fd0c 	bl	8006a88 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	f003 0307 	and.w	r3, r3, #7
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00b      	beq.n	8008092 <pvPortMalloc+0x1a2>
        __asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	60fb      	str	r3, [r7, #12]
    }
 800808c:	bf00      	nop
 800808e:	bf00      	nop
 8008090:	e7fd      	b.n	800808e <pvPortMalloc+0x19e>
    return pvReturn;
 8008092:	69fb      	ldr	r3, [r7, #28]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3728      	adds	r7, #40	@ 0x28
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	200131c0 	.word	0x200131c0
 80080a0:	200131d4 	.word	0x200131d4
 80080a4:	200131c4 	.word	0x200131c4
 80080a8:	200131b8 	.word	0x200131b8
 80080ac:	200131c8 	.word	0x200131c8
 80080b0:	200131cc 	.word	0x200131cc

080080b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b086      	sub	sp, #24
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d04f      	beq.n	8008166 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80080c6:	2308      	movs	r3, #8
 80080c8:	425b      	negs	r3, r3
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	4413      	add	r3, r2
 80080ce:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	4b25      	ldr	r3, [pc, #148]	@ (8008170 <vPortFree+0xbc>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4013      	ands	r3, r2
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10b      	bne.n	80080fa <vPortFree+0x46>
        __asm volatile
 80080e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	60fb      	str	r3, [r7, #12]
    }
 80080f4:	bf00      	nop
 80080f6:	bf00      	nop
 80080f8:	e7fd      	b.n	80080f6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00b      	beq.n	800811a <vPortFree+0x66>
        __asm volatile
 8008102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	60bb      	str	r3, [r7, #8]
    }
 8008114:	bf00      	nop
 8008116:	bf00      	nop
 8008118:	e7fd      	b.n	8008116 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	685a      	ldr	r2, [r3, #4]
 800811e:	4b14      	ldr	r3, [pc, #80]	@ (8008170 <vPortFree+0xbc>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4013      	ands	r3, r2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d01e      	beq.n	8008166 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d11a      	bne.n	8008166 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	4b0e      	ldr	r3, [pc, #56]	@ (8008170 <vPortFree+0xbc>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	43db      	mvns	r3, r3
 800813a:	401a      	ands	r2, r3
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8008140:	f7fe fc94 	bl	8006a6c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	685a      	ldr	r2, [r3, #4]
 8008148:	4b0a      	ldr	r3, [pc, #40]	@ (8008174 <vPortFree+0xc0>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4413      	add	r3, r2
 800814e:	4a09      	ldr	r2, [pc, #36]	@ (8008174 <vPortFree+0xc0>)
 8008150:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008152:	6938      	ldr	r0, [r7, #16]
 8008154:	f000 f874 	bl	8008240 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008158:	4b07      	ldr	r3, [pc, #28]	@ (8008178 <vPortFree+0xc4>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3301      	adds	r3, #1
 800815e:	4a06      	ldr	r2, [pc, #24]	@ (8008178 <vPortFree+0xc4>)
 8008160:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008162:	f7fe fc91 	bl	8006a88 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008166:	bf00      	nop
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	200131d4 	.word	0x200131d4
 8008174:	200131c4 	.word	0x200131c4
 8008178:	200131d0 	.word	0x200131d0

0800817c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008182:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8008186:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8008188:	4b27      	ldr	r3, [pc, #156]	@ (8008228 <prvHeapInit+0xac>)
 800818a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f003 0307 	and.w	r3, r3, #7
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00c      	beq.n	80081b0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	3307      	adds	r3, #7
 800819a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f023 0307 	bic.w	r3, r3, #7
 80081a2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	4a1f      	ldr	r2, [pc, #124]	@ (8008228 <prvHeapInit+0xac>)
 80081ac:	4413      	add	r3, r2
 80081ae:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80081b4:	4a1d      	ldr	r2, [pc, #116]	@ (800822c <prvHeapInit+0xb0>)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80081ba:	4b1c      	ldr	r3, [pc, #112]	@ (800822c <prvHeapInit+0xb0>)
 80081bc:	2200      	movs	r2, #0
 80081be:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	4413      	add	r3, r2
 80081c6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80081c8:	2208      	movs	r2, #8
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	1a9b      	subs	r3, r3, r2
 80081ce:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f023 0307 	bic.w	r3, r3, #7
 80081d6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	4a15      	ldr	r2, [pc, #84]	@ (8008230 <prvHeapInit+0xb4>)
 80081dc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80081de:	4b14      	ldr	r3, [pc, #80]	@ (8008230 <prvHeapInit+0xb4>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2200      	movs	r2, #0
 80081e4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80081e6:	4b12      	ldr	r3, [pc, #72]	@ (8008230 <prvHeapInit+0xb4>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2200      	movs	r2, #0
 80081ec:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	1ad2      	subs	r2, r2, r3
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008230 <prvHeapInit+0xb4>)
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	4a0a      	ldr	r2, [pc, #40]	@ (8008234 <prvHeapInit+0xb8>)
 800820a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	4a09      	ldr	r2, [pc, #36]	@ (8008238 <prvHeapInit+0xbc>)
 8008212:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008214:	4b09      	ldr	r3, [pc, #36]	@ (800823c <prvHeapInit+0xc0>)
 8008216:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800821a:	601a      	str	r2, [r3, #0]
}
 800821c:	bf00      	nop
 800821e:	3714      	adds	r7, #20
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr
 8008228:	200005b8 	.word	0x200005b8
 800822c:	200131b8 	.word	0x200131b8
 8008230:	200131c0 	.word	0x200131c0
 8008234:	200131c8 	.word	0x200131c8
 8008238:	200131c4 	.word	0x200131c4
 800823c:	200131d4 	.word	0x200131d4

08008240 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008248:	4b28      	ldr	r3, [pc, #160]	@ (80082ec <prvInsertBlockIntoFreeList+0xac>)
 800824a:	60fb      	str	r3, [r7, #12]
 800824c:	e002      	b.n	8008254 <prvInsertBlockIntoFreeList+0x14>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	60fb      	str	r3, [r7, #12]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	429a      	cmp	r2, r3
 800825c:	d8f7      	bhi.n	800824e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	4413      	add	r3, r2
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	429a      	cmp	r2, r3
 800826e:	d108      	bne.n	8008282 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	685a      	ldr	r2, [r3, #4]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	441a      	add	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	441a      	add	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	429a      	cmp	r2, r3
 8008294:	d118      	bne.n	80082c8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	4b15      	ldr	r3, [pc, #84]	@ (80082f0 <prvInsertBlockIntoFreeList+0xb0>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d00d      	beq.n	80082be <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	685a      	ldr	r2, [r3, #4]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	441a      	add	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	601a      	str	r2, [r3, #0]
 80082bc:	e008      	b.n	80082d0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80082be:	4b0c      	ldr	r3, [pc, #48]	@ (80082f0 <prvInsertBlockIntoFreeList+0xb0>)
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	601a      	str	r2, [r3, #0]
 80082c6:	e003      	b.n	80082d0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d002      	beq.n	80082de <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80082de:	bf00      	nop
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	200131b8 	.word	0x200131b8
 80082f0:	200131c0 	.word	0x200131c0

080082f4 <__cvt>:
 80082f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082f8:	ec57 6b10 	vmov	r6, r7, d0
 80082fc:	2f00      	cmp	r7, #0
 80082fe:	460c      	mov	r4, r1
 8008300:	4619      	mov	r1, r3
 8008302:	463b      	mov	r3, r7
 8008304:	bfbb      	ittet	lt
 8008306:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800830a:	461f      	movlt	r7, r3
 800830c:	2300      	movge	r3, #0
 800830e:	232d      	movlt	r3, #45	@ 0x2d
 8008310:	700b      	strb	r3, [r1, #0]
 8008312:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008314:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008318:	4691      	mov	r9, r2
 800831a:	f023 0820 	bic.w	r8, r3, #32
 800831e:	bfbc      	itt	lt
 8008320:	4632      	movlt	r2, r6
 8008322:	4616      	movlt	r6, r2
 8008324:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008328:	d005      	beq.n	8008336 <__cvt+0x42>
 800832a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800832e:	d100      	bne.n	8008332 <__cvt+0x3e>
 8008330:	3401      	adds	r4, #1
 8008332:	2102      	movs	r1, #2
 8008334:	e000      	b.n	8008338 <__cvt+0x44>
 8008336:	2103      	movs	r1, #3
 8008338:	ab03      	add	r3, sp, #12
 800833a:	9301      	str	r3, [sp, #4]
 800833c:	ab02      	add	r3, sp, #8
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	ec47 6b10 	vmov	d0, r6, r7
 8008344:	4653      	mov	r3, sl
 8008346:	4622      	mov	r2, r4
 8008348:	f000 ff6e 	bl	8009228 <_dtoa_r>
 800834c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008350:	4605      	mov	r5, r0
 8008352:	d119      	bne.n	8008388 <__cvt+0x94>
 8008354:	f019 0f01 	tst.w	r9, #1
 8008358:	d00e      	beq.n	8008378 <__cvt+0x84>
 800835a:	eb00 0904 	add.w	r9, r0, r4
 800835e:	2200      	movs	r2, #0
 8008360:	2300      	movs	r3, #0
 8008362:	4630      	mov	r0, r6
 8008364:	4639      	mov	r1, r7
 8008366:	f7f8 fbcf 	bl	8000b08 <__aeabi_dcmpeq>
 800836a:	b108      	cbz	r0, 8008370 <__cvt+0x7c>
 800836c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008370:	2230      	movs	r2, #48	@ 0x30
 8008372:	9b03      	ldr	r3, [sp, #12]
 8008374:	454b      	cmp	r3, r9
 8008376:	d31e      	bcc.n	80083b6 <__cvt+0xc2>
 8008378:	9b03      	ldr	r3, [sp, #12]
 800837a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800837c:	1b5b      	subs	r3, r3, r5
 800837e:	4628      	mov	r0, r5
 8008380:	6013      	str	r3, [r2, #0]
 8008382:	b004      	add	sp, #16
 8008384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008388:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800838c:	eb00 0904 	add.w	r9, r0, r4
 8008390:	d1e5      	bne.n	800835e <__cvt+0x6a>
 8008392:	7803      	ldrb	r3, [r0, #0]
 8008394:	2b30      	cmp	r3, #48	@ 0x30
 8008396:	d10a      	bne.n	80083ae <__cvt+0xba>
 8008398:	2200      	movs	r2, #0
 800839a:	2300      	movs	r3, #0
 800839c:	4630      	mov	r0, r6
 800839e:	4639      	mov	r1, r7
 80083a0:	f7f8 fbb2 	bl	8000b08 <__aeabi_dcmpeq>
 80083a4:	b918      	cbnz	r0, 80083ae <__cvt+0xba>
 80083a6:	f1c4 0401 	rsb	r4, r4, #1
 80083aa:	f8ca 4000 	str.w	r4, [sl]
 80083ae:	f8da 3000 	ldr.w	r3, [sl]
 80083b2:	4499      	add	r9, r3
 80083b4:	e7d3      	b.n	800835e <__cvt+0x6a>
 80083b6:	1c59      	adds	r1, r3, #1
 80083b8:	9103      	str	r1, [sp, #12]
 80083ba:	701a      	strb	r2, [r3, #0]
 80083bc:	e7d9      	b.n	8008372 <__cvt+0x7e>

080083be <__exponent>:
 80083be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083c0:	2900      	cmp	r1, #0
 80083c2:	bfba      	itte	lt
 80083c4:	4249      	neglt	r1, r1
 80083c6:	232d      	movlt	r3, #45	@ 0x2d
 80083c8:	232b      	movge	r3, #43	@ 0x2b
 80083ca:	2909      	cmp	r1, #9
 80083cc:	7002      	strb	r2, [r0, #0]
 80083ce:	7043      	strb	r3, [r0, #1]
 80083d0:	dd29      	ble.n	8008426 <__exponent+0x68>
 80083d2:	f10d 0307 	add.w	r3, sp, #7
 80083d6:	461d      	mov	r5, r3
 80083d8:	270a      	movs	r7, #10
 80083da:	461a      	mov	r2, r3
 80083dc:	fbb1 f6f7 	udiv	r6, r1, r7
 80083e0:	fb07 1416 	mls	r4, r7, r6, r1
 80083e4:	3430      	adds	r4, #48	@ 0x30
 80083e6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80083ea:	460c      	mov	r4, r1
 80083ec:	2c63      	cmp	r4, #99	@ 0x63
 80083ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80083f2:	4631      	mov	r1, r6
 80083f4:	dcf1      	bgt.n	80083da <__exponent+0x1c>
 80083f6:	3130      	adds	r1, #48	@ 0x30
 80083f8:	1e94      	subs	r4, r2, #2
 80083fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80083fe:	1c41      	adds	r1, r0, #1
 8008400:	4623      	mov	r3, r4
 8008402:	42ab      	cmp	r3, r5
 8008404:	d30a      	bcc.n	800841c <__exponent+0x5e>
 8008406:	f10d 0309 	add.w	r3, sp, #9
 800840a:	1a9b      	subs	r3, r3, r2
 800840c:	42ac      	cmp	r4, r5
 800840e:	bf88      	it	hi
 8008410:	2300      	movhi	r3, #0
 8008412:	3302      	adds	r3, #2
 8008414:	4403      	add	r3, r0
 8008416:	1a18      	subs	r0, r3, r0
 8008418:	b003      	add	sp, #12
 800841a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800841c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008420:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008424:	e7ed      	b.n	8008402 <__exponent+0x44>
 8008426:	2330      	movs	r3, #48	@ 0x30
 8008428:	3130      	adds	r1, #48	@ 0x30
 800842a:	7083      	strb	r3, [r0, #2]
 800842c:	70c1      	strb	r1, [r0, #3]
 800842e:	1d03      	adds	r3, r0, #4
 8008430:	e7f1      	b.n	8008416 <__exponent+0x58>
	...

08008434 <_printf_float>:
 8008434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008438:	b08d      	sub	sp, #52	@ 0x34
 800843a:	460c      	mov	r4, r1
 800843c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008440:	4616      	mov	r6, r2
 8008442:	461f      	mov	r7, r3
 8008444:	4605      	mov	r5, r0
 8008446:	f000 fddf 	bl	8009008 <_localeconv_r>
 800844a:	6803      	ldr	r3, [r0, #0]
 800844c:	9304      	str	r3, [sp, #16]
 800844e:	4618      	mov	r0, r3
 8008450:	f7f7 ff2e 	bl	80002b0 <strlen>
 8008454:	2300      	movs	r3, #0
 8008456:	930a      	str	r3, [sp, #40]	@ 0x28
 8008458:	f8d8 3000 	ldr.w	r3, [r8]
 800845c:	9005      	str	r0, [sp, #20]
 800845e:	3307      	adds	r3, #7
 8008460:	f023 0307 	bic.w	r3, r3, #7
 8008464:	f103 0208 	add.w	r2, r3, #8
 8008468:	f894 a018 	ldrb.w	sl, [r4, #24]
 800846c:	f8d4 b000 	ldr.w	fp, [r4]
 8008470:	f8c8 2000 	str.w	r2, [r8]
 8008474:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008478:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800847c:	9307      	str	r3, [sp, #28]
 800847e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008482:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008486:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800848a:	4b9c      	ldr	r3, [pc, #624]	@ (80086fc <_printf_float+0x2c8>)
 800848c:	f04f 32ff 	mov.w	r2, #4294967295
 8008490:	f7f8 fb6c 	bl	8000b6c <__aeabi_dcmpun>
 8008494:	bb70      	cbnz	r0, 80084f4 <_printf_float+0xc0>
 8008496:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800849a:	4b98      	ldr	r3, [pc, #608]	@ (80086fc <_printf_float+0x2c8>)
 800849c:	f04f 32ff 	mov.w	r2, #4294967295
 80084a0:	f7f8 fb46 	bl	8000b30 <__aeabi_dcmple>
 80084a4:	bb30      	cbnz	r0, 80084f4 <_printf_float+0xc0>
 80084a6:	2200      	movs	r2, #0
 80084a8:	2300      	movs	r3, #0
 80084aa:	4640      	mov	r0, r8
 80084ac:	4649      	mov	r1, r9
 80084ae:	f7f8 fb35 	bl	8000b1c <__aeabi_dcmplt>
 80084b2:	b110      	cbz	r0, 80084ba <_printf_float+0x86>
 80084b4:	232d      	movs	r3, #45	@ 0x2d
 80084b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084ba:	4a91      	ldr	r2, [pc, #580]	@ (8008700 <_printf_float+0x2cc>)
 80084bc:	4b91      	ldr	r3, [pc, #580]	@ (8008704 <_printf_float+0x2d0>)
 80084be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80084c2:	bf94      	ite	ls
 80084c4:	4690      	movls	r8, r2
 80084c6:	4698      	movhi	r8, r3
 80084c8:	2303      	movs	r3, #3
 80084ca:	6123      	str	r3, [r4, #16]
 80084cc:	f02b 0304 	bic.w	r3, fp, #4
 80084d0:	6023      	str	r3, [r4, #0]
 80084d2:	f04f 0900 	mov.w	r9, #0
 80084d6:	9700      	str	r7, [sp, #0]
 80084d8:	4633      	mov	r3, r6
 80084da:	aa0b      	add	r2, sp, #44	@ 0x2c
 80084dc:	4621      	mov	r1, r4
 80084de:	4628      	mov	r0, r5
 80084e0:	f000 f9d2 	bl	8008888 <_printf_common>
 80084e4:	3001      	adds	r0, #1
 80084e6:	f040 808d 	bne.w	8008604 <_printf_float+0x1d0>
 80084ea:	f04f 30ff 	mov.w	r0, #4294967295
 80084ee:	b00d      	add	sp, #52	@ 0x34
 80084f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f4:	4642      	mov	r2, r8
 80084f6:	464b      	mov	r3, r9
 80084f8:	4640      	mov	r0, r8
 80084fa:	4649      	mov	r1, r9
 80084fc:	f7f8 fb36 	bl	8000b6c <__aeabi_dcmpun>
 8008500:	b140      	cbz	r0, 8008514 <_printf_float+0xe0>
 8008502:	464b      	mov	r3, r9
 8008504:	2b00      	cmp	r3, #0
 8008506:	bfbc      	itt	lt
 8008508:	232d      	movlt	r3, #45	@ 0x2d
 800850a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800850e:	4a7e      	ldr	r2, [pc, #504]	@ (8008708 <_printf_float+0x2d4>)
 8008510:	4b7e      	ldr	r3, [pc, #504]	@ (800870c <_printf_float+0x2d8>)
 8008512:	e7d4      	b.n	80084be <_printf_float+0x8a>
 8008514:	6863      	ldr	r3, [r4, #4]
 8008516:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800851a:	9206      	str	r2, [sp, #24]
 800851c:	1c5a      	adds	r2, r3, #1
 800851e:	d13b      	bne.n	8008598 <_printf_float+0x164>
 8008520:	2306      	movs	r3, #6
 8008522:	6063      	str	r3, [r4, #4]
 8008524:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008528:	2300      	movs	r3, #0
 800852a:	6022      	str	r2, [r4, #0]
 800852c:	9303      	str	r3, [sp, #12]
 800852e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008530:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008534:	ab09      	add	r3, sp, #36	@ 0x24
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	6861      	ldr	r1, [r4, #4]
 800853a:	ec49 8b10 	vmov	d0, r8, r9
 800853e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008542:	4628      	mov	r0, r5
 8008544:	f7ff fed6 	bl	80082f4 <__cvt>
 8008548:	9b06      	ldr	r3, [sp, #24]
 800854a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800854c:	2b47      	cmp	r3, #71	@ 0x47
 800854e:	4680      	mov	r8, r0
 8008550:	d129      	bne.n	80085a6 <_printf_float+0x172>
 8008552:	1cc8      	adds	r0, r1, #3
 8008554:	db02      	blt.n	800855c <_printf_float+0x128>
 8008556:	6863      	ldr	r3, [r4, #4]
 8008558:	4299      	cmp	r1, r3
 800855a:	dd41      	ble.n	80085e0 <_printf_float+0x1ac>
 800855c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008560:	fa5f fa8a 	uxtb.w	sl, sl
 8008564:	3901      	subs	r1, #1
 8008566:	4652      	mov	r2, sl
 8008568:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800856c:	9109      	str	r1, [sp, #36]	@ 0x24
 800856e:	f7ff ff26 	bl	80083be <__exponent>
 8008572:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008574:	1813      	adds	r3, r2, r0
 8008576:	2a01      	cmp	r2, #1
 8008578:	4681      	mov	r9, r0
 800857a:	6123      	str	r3, [r4, #16]
 800857c:	dc02      	bgt.n	8008584 <_printf_float+0x150>
 800857e:	6822      	ldr	r2, [r4, #0]
 8008580:	07d2      	lsls	r2, r2, #31
 8008582:	d501      	bpl.n	8008588 <_printf_float+0x154>
 8008584:	3301      	adds	r3, #1
 8008586:	6123      	str	r3, [r4, #16]
 8008588:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800858c:	2b00      	cmp	r3, #0
 800858e:	d0a2      	beq.n	80084d6 <_printf_float+0xa2>
 8008590:	232d      	movs	r3, #45	@ 0x2d
 8008592:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008596:	e79e      	b.n	80084d6 <_printf_float+0xa2>
 8008598:	9a06      	ldr	r2, [sp, #24]
 800859a:	2a47      	cmp	r2, #71	@ 0x47
 800859c:	d1c2      	bne.n	8008524 <_printf_float+0xf0>
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1c0      	bne.n	8008524 <_printf_float+0xf0>
 80085a2:	2301      	movs	r3, #1
 80085a4:	e7bd      	b.n	8008522 <_printf_float+0xee>
 80085a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80085aa:	d9db      	bls.n	8008564 <_printf_float+0x130>
 80085ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80085b0:	d118      	bne.n	80085e4 <_printf_float+0x1b0>
 80085b2:	2900      	cmp	r1, #0
 80085b4:	6863      	ldr	r3, [r4, #4]
 80085b6:	dd0b      	ble.n	80085d0 <_printf_float+0x19c>
 80085b8:	6121      	str	r1, [r4, #16]
 80085ba:	b913      	cbnz	r3, 80085c2 <_printf_float+0x18e>
 80085bc:	6822      	ldr	r2, [r4, #0]
 80085be:	07d0      	lsls	r0, r2, #31
 80085c0:	d502      	bpl.n	80085c8 <_printf_float+0x194>
 80085c2:	3301      	adds	r3, #1
 80085c4:	440b      	add	r3, r1
 80085c6:	6123      	str	r3, [r4, #16]
 80085c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80085ca:	f04f 0900 	mov.w	r9, #0
 80085ce:	e7db      	b.n	8008588 <_printf_float+0x154>
 80085d0:	b913      	cbnz	r3, 80085d8 <_printf_float+0x1a4>
 80085d2:	6822      	ldr	r2, [r4, #0]
 80085d4:	07d2      	lsls	r2, r2, #31
 80085d6:	d501      	bpl.n	80085dc <_printf_float+0x1a8>
 80085d8:	3302      	adds	r3, #2
 80085da:	e7f4      	b.n	80085c6 <_printf_float+0x192>
 80085dc:	2301      	movs	r3, #1
 80085de:	e7f2      	b.n	80085c6 <_printf_float+0x192>
 80085e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80085e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085e6:	4299      	cmp	r1, r3
 80085e8:	db05      	blt.n	80085f6 <_printf_float+0x1c2>
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	6121      	str	r1, [r4, #16]
 80085ee:	07d8      	lsls	r0, r3, #31
 80085f0:	d5ea      	bpl.n	80085c8 <_printf_float+0x194>
 80085f2:	1c4b      	adds	r3, r1, #1
 80085f4:	e7e7      	b.n	80085c6 <_printf_float+0x192>
 80085f6:	2900      	cmp	r1, #0
 80085f8:	bfd4      	ite	le
 80085fa:	f1c1 0202 	rsble	r2, r1, #2
 80085fe:	2201      	movgt	r2, #1
 8008600:	4413      	add	r3, r2
 8008602:	e7e0      	b.n	80085c6 <_printf_float+0x192>
 8008604:	6823      	ldr	r3, [r4, #0]
 8008606:	055a      	lsls	r2, r3, #21
 8008608:	d407      	bmi.n	800861a <_printf_float+0x1e6>
 800860a:	6923      	ldr	r3, [r4, #16]
 800860c:	4642      	mov	r2, r8
 800860e:	4631      	mov	r1, r6
 8008610:	4628      	mov	r0, r5
 8008612:	47b8      	blx	r7
 8008614:	3001      	adds	r0, #1
 8008616:	d12b      	bne.n	8008670 <_printf_float+0x23c>
 8008618:	e767      	b.n	80084ea <_printf_float+0xb6>
 800861a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800861e:	f240 80dd 	bls.w	80087dc <_printf_float+0x3a8>
 8008622:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008626:	2200      	movs	r2, #0
 8008628:	2300      	movs	r3, #0
 800862a:	f7f8 fa6d 	bl	8000b08 <__aeabi_dcmpeq>
 800862e:	2800      	cmp	r0, #0
 8008630:	d033      	beq.n	800869a <_printf_float+0x266>
 8008632:	4a37      	ldr	r2, [pc, #220]	@ (8008710 <_printf_float+0x2dc>)
 8008634:	2301      	movs	r3, #1
 8008636:	4631      	mov	r1, r6
 8008638:	4628      	mov	r0, r5
 800863a:	47b8      	blx	r7
 800863c:	3001      	adds	r0, #1
 800863e:	f43f af54 	beq.w	80084ea <_printf_float+0xb6>
 8008642:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008646:	4543      	cmp	r3, r8
 8008648:	db02      	blt.n	8008650 <_printf_float+0x21c>
 800864a:	6823      	ldr	r3, [r4, #0]
 800864c:	07d8      	lsls	r0, r3, #31
 800864e:	d50f      	bpl.n	8008670 <_printf_float+0x23c>
 8008650:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008654:	4631      	mov	r1, r6
 8008656:	4628      	mov	r0, r5
 8008658:	47b8      	blx	r7
 800865a:	3001      	adds	r0, #1
 800865c:	f43f af45 	beq.w	80084ea <_printf_float+0xb6>
 8008660:	f04f 0900 	mov.w	r9, #0
 8008664:	f108 38ff 	add.w	r8, r8, #4294967295
 8008668:	f104 0a1a 	add.w	sl, r4, #26
 800866c:	45c8      	cmp	r8, r9
 800866e:	dc09      	bgt.n	8008684 <_printf_float+0x250>
 8008670:	6823      	ldr	r3, [r4, #0]
 8008672:	079b      	lsls	r3, r3, #30
 8008674:	f100 8103 	bmi.w	800887e <_printf_float+0x44a>
 8008678:	68e0      	ldr	r0, [r4, #12]
 800867a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800867c:	4298      	cmp	r0, r3
 800867e:	bfb8      	it	lt
 8008680:	4618      	movlt	r0, r3
 8008682:	e734      	b.n	80084ee <_printf_float+0xba>
 8008684:	2301      	movs	r3, #1
 8008686:	4652      	mov	r2, sl
 8008688:	4631      	mov	r1, r6
 800868a:	4628      	mov	r0, r5
 800868c:	47b8      	blx	r7
 800868e:	3001      	adds	r0, #1
 8008690:	f43f af2b 	beq.w	80084ea <_printf_float+0xb6>
 8008694:	f109 0901 	add.w	r9, r9, #1
 8008698:	e7e8      	b.n	800866c <_printf_float+0x238>
 800869a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800869c:	2b00      	cmp	r3, #0
 800869e:	dc39      	bgt.n	8008714 <_printf_float+0x2e0>
 80086a0:	4a1b      	ldr	r2, [pc, #108]	@ (8008710 <_printf_float+0x2dc>)
 80086a2:	2301      	movs	r3, #1
 80086a4:	4631      	mov	r1, r6
 80086a6:	4628      	mov	r0, r5
 80086a8:	47b8      	blx	r7
 80086aa:	3001      	adds	r0, #1
 80086ac:	f43f af1d 	beq.w	80084ea <_printf_float+0xb6>
 80086b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80086b4:	ea59 0303 	orrs.w	r3, r9, r3
 80086b8:	d102      	bne.n	80086c0 <_printf_float+0x28c>
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	07d9      	lsls	r1, r3, #31
 80086be:	d5d7      	bpl.n	8008670 <_printf_float+0x23c>
 80086c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086c4:	4631      	mov	r1, r6
 80086c6:	4628      	mov	r0, r5
 80086c8:	47b8      	blx	r7
 80086ca:	3001      	adds	r0, #1
 80086cc:	f43f af0d 	beq.w	80084ea <_printf_float+0xb6>
 80086d0:	f04f 0a00 	mov.w	sl, #0
 80086d4:	f104 0b1a 	add.w	fp, r4, #26
 80086d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086da:	425b      	negs	r3, r3
 80086dc:	4553      	cmp	r3, sl
 80086de:	dc01      	bgt.n	80086e4 <_printf_float+0x2b0>
 80086e0:	464b      	mov	r3, r9
 80086e2:	e793      	b.n	800860c <_printf_float+0x1d8>
 80086e4:	2301      	movs	r3, #1
 80086e6:	465a      	mov	r2, fp
 80086e8:	4631      	mov	r1, r6
 80086ea:	4628      	mov	r0, r5
 80086ec:	47b8      	blx	r7
 80086ee:	3001      	adds	r0, #1
 80086f0:	f43f aefb 	beq.w	80084ea <_printf_float+0xb6>
 80086f4:	f10a 0a01 	add.w	sl, sl, #1
 80086f8:	e7ee      	b.n	80086d8 <_printf_float+0x2a4>
 80086fa:	bf00      	nop
 80086fc:	7fefffff 	.word	0x7fefffff
 8008700:	0800c470 	.word	0x0800c470
 8008704:	0800c474 	.word	0x0800c474
 8008708:	0800c478 	.word	0x0800c478
 800870c:	0800c47c 	.word	0x0800c47c
 8008710:	0800c480 	.word	0x0800c480
 8008714:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008716:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800871a:	4553      	cmp	r3, sl
 800871c:	bfa8      	it	ge
 800871e:	4653      	movge	r3, sl
 8008720:	2b00      	cmp	r3, #0
 8008722:	4699      	mov	r9, r3
 8008724:	dc36      	bgt.n	8008794 <_printf_float+0x360>
 8008726:	f04f 0b00 	mov.w	fp, #0
 800872a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800872e:	f104 021a 	add.w	r2, r4, #26
 8008732:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008734:	9306      	str	r3, [sp, #24]
 8008736:	eba3 0309 	sub.w	r3, r3, r9
 800873a:	455b      	cmp	r3, fp
 800873c:	dc31      	bgt.n	80087a2 <_printf_float+0x36e>
 800873e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008740:	459a      	cmp	sl, r3
 8008742:	dc3a      	bgt.n	80087ba <_printf_float+0x386>
 8008744:	6823      	ldr	r3, [r4, #0]
 8008746:	07da      	lsls	r2, r3, #31
 8008748:	d437      	bmi.n	80087ba <_printf_float+0x386>
 800874a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800874c:	ebaa 0903 	sub.w	r9, sl, r3
 8008750:	9b06      	ldr	r3, [sp, #24]
 8008752:	ebaa 0303 	sub.w	r3, sl, r3
 8008756:	4599      	cmp	r9, r3
 8008758:	bfa8      	it	ge
 800875a:	4699      	movge	r9, r3
 800875c:	f1b9 0f00 	cmp.w	r9, #0
 8008760:	dc33      	bgt.n	80087ca <_printf_float+0x396>
 8008762:	f04f 0800 	mov.w	r8, #0
 8008766:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800876a:	f104 0b1a 	add.w	fp, r4, #26
 800876e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008770:	ebaa 0303 	sub.w	r3, sl, r3
 8008774:	eba3 0309 	sub.w	r3, r3, r9
 8008778:	4543      	cmp	r3, r8
 800877a:	f77f af79 	ble.w	8008670 <_printf_float+0x23c>
 800877e:	2301      	movs	r3, #1
 8008780:	465a      	mov	r2, fp
 8008782:	4631      	mov	r1, r6
 8008784:	4628      	mov	r0, r5
 8008786:	47b8      	blx	r7
 8008788:	3001      	adds	r0, #1
 800878a:	f43f aeae 	beq.w	80084ea <_printf_float+0xb6>
 800878e:	f108 0801 	add.w	r8, r8, #1
 8008792:	e7ec      	b.n	800876e <_printf_float+0x33a>
 8008794:	4642      	mov	r2, r8
 8008796:	4631      	mov	r1, r6
 8008798:	4628      	mov	r0, r5
 800879a:	47b8      	blx	r7
 800879c:	3001      	adds	r0, #1
 800879e:	d1c2      	bne.n	8008726 <_printf_float+0x2f2>
 80087a0:	e6a3      	b.n	80084ea <_printf_float+0xb6>
 80087a2:	2301      	movs	r3, #1
 80087a4:	4631      	mov	r1, r6
 80087a6:	4628      	mov	r0, r5
 80087a8:	9206      	str	r2, [sp, #24]
 80087aa:	47b8      	blx	r7
 80087ac:	3001      	adds	r0, #1
 80087ae:	f43f ae9c 	beq.w	80084ea <_printf_float+0xb6>
 80087b2:	9a06      	ldr	r2, [sp, #24]
 80087b4:	f10b 0b01 	add.w	fp, fp, #1
 80087b8:	e7bb      	b.n	8008732 <_printf_float+0x2fe>
 80087ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087be:	4631      	mov	r1, r6
 80087c0:	4628      	mov	r0, r5
 80087c2:	47b8      	blx	r7
 80087c4:	3001      	adds	r0, #1
 80087c6:	d1c0      	bne.n	800874a <_printf_float+0x316>
 80087c8:	e68f      	b.n	80084ea <_printf_float+0xb6>
 80087ca:	9a06      	ldr	r2, [sp, #24]
 80087cc:	464b      	mov	r3, r9
 80087ce:	4442      	add	r2, r8
 80087d0:	4631      	mov	r1, r6
 80087d2:	4628      	mov	r0, r5
 80087d4:	47b8      	blx	r7
 80087d6:	3001      	adds	r0, #1
 80087d8:	d1c3      	bne.n	8008762 <_printf_float+0x32e>
 80087da:	e686      	b.n	80084ea <_printf_float+0xb6>
 80087dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80087e0:	f1ba 0f01 	cmp.w	sl, #1
 80087e4:	dc01      	bgt.n	80087ea <_printf_float+0x3b6>
 80087e6:	07db      	lsls	r3, r3, #31
 80087e8:	d536      	bpl.n	8008858 <_printf_float+0x424>
 80087ea:	2301      	movs	r3, #1
 80087ec:	4642      	mov	r2, r8
 80087ee:	4631      	mov	r1, r6
 80087f0:	4628      	mov	r0, r5
 80087f2:	47b8      	blx	r7
 80087f4:	3001      	adds	r0, #1
 80087f6:	f43f ae78 	beq.w	80084ea <_printf_float+0xb6>
 80087fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087fe:	4631      	mov	r1, r6
 8008800:	4628      	mov	r0, r5
 8008802:	47b8      	blx	r7
 8008804:	3001      	adds	r0, #1
 8008806:	f43f ae70 	beq.w	80084ea <_printf_float+0xb6>
 800880a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800880e:	2200      	movs	r2, #0
 8008810:	2300      	movs	r3, #0
 8008812:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008816:	f7f8 f977 	bl	8000b08 <__aeabi_dcmpeq>
 800881a:	b9c0      	cbnz	r0, 800884e <_printf_float+0x41a>
 800881c:	4653      	mov	r3, sl
 800881e:	f108 0201 	add.w	r2, r8, #1
 8008822:	4631      	mov	r1, r6
 8008824:	4628      	mov	r0, r5
 8008826:	47b8      	blx	r7
 8008828:	3001      	adds	r0, #1
 800882a:	d10c      	bne.n	8008846 <_printf_float+0x412>
 800882c:	e65d      	b.n	80084ea <_printf_float+0xb6>
 800882e:	2301      	movs	r3, #1
 8008830:	465a      	mov	r2, fp
 8008832:	4631      	mov	r1, r6
 8008834:	4628      	mov	r0, r5
 8008836:	47b8      	blx	r7
 8008838:	3001      	adds	r0, #1
 800883a:	f43f ae56 	beq.w	80084ea <_printf_float+0xb6>
 800883e:	f108 0801 	add.w	r8, r8, #1
 8008842:	45d0      	cmp	r8, sl
 8008844:	dbf3      	blt.n	800882e <_printf_float+0x3fa>
 8008846:	464b      	mov	r3, r9
 8008848:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800884c:	e6df      	b.n	800860e <_printf_float+0x1da>
 800884e:	f04f 0800 	mov.w	r8, #0
 8008852:	f104 0b1a 	add.w	fp, r4, #26
 8008856:	e7f4      	b.n	8008842 <_printf_float+0x40e>
 8008858:	2301      	movs	r3, #1
 800885a:	4642      	mov	r2, r8
 800885c:	e7e1      	b.n	8008822 <_printf_float+0x3ee>
 800885e:	2301      	movs	r3, #1
 8008860:	464a      	mov	r2, r9
 8008862:	4631      	mov	r1, r6
 8008864:	4628      	mov	r0, r5
 8008866:	47b8      	blx	r7
 8008868:	3001      	adds	r0, #1
 800886a:	f43f ae3e 	beq.w	80084ea <_printf_float+0xb6>
 800886e:	f108 0801 	add.w	r8, r8, #1
 8008872:	68e3      	ldr	r3, [r4, #12]
 8008874:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008876:	1a5b      	subs	r3, r3, r1
 8008878:	4543      	cmp	r3, r8
 800887a:	dcf0      	bgt.n	800885e <_printf_float+0x42a>
 800887c:	e6fc      	b.n	8008678 <_printf_float+0x244>
 800887e:	f04f 0800 	mov.w	r8, #0
 8008882:	f104 0919 	add.w	r9, r4, #25
 8008886:	e7f4      	b.n	8008872 <_printf_float+0x43e>

08008888 <_printf_common>:
 8008888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800888c:	4616      	mov	r6, r2
 800888e:	4698      	mov	r8, r3
 8008890:	688a      	ldr	r2, [r1, #8]
 8008892:	690b      	ldr	r3, [r1, #16]
 8008894:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008898:	4293      	cmp	r3, r2
 800889a:	bfb8      	it	lt
 800889c:	4613      	movlt	r3, r2
 800889e:	6033      	str	r3, [r6, #0]
 80088a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80088a4:	4607      	mov	r7, r0
 80088a6:	460c      	mov	r4, r1
 80088a8:	b10a      	cbz	r2, 80088ae <_printf_common+0x26>
 80088aa:	3301      	adds	r3, #1
 80088ac:	6033      	str	r3, [r6, #0]
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	0699      	lsls	r1, r3, #26
 80088b2:	bf42      	ittt	mi
 80088b4:	6833      	ldrmi	r3, [r6, #0]
 80088b6:	3302      	addmi	r3, #2
 80088b8:	6033      	strmi	r3, [r6, #0]
 80088ba:	6825      	ldr	r5, [r4, #0]
 80088bc:	f015 0506 	ands.w	r5, r5, #6
 80088c0:	d106      	bne.n	80088d0 <_printf_common+0x48>
 80088c2:	f104 0a19 	add.w	sl, r4, #25
 80088c6:	68e3      	ldr	r3, [r4, #12]
 80088c8:	6832      	ldr	r2, [r6, #0]
 80088ca:	1a9b      	subs	r3, r3, r2
 80088cc:	42ab      	cmp	r3, r5
 80088ce:	dc26      	bgt.n	800891e <_printf_common+0x96>
 80088d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80088d4:	6822      	ldr	r2, [r4, #0]
 80088d6:	3b00      	subs	r3, #0
 80088d8:	bf18      	it	ne
 80088da:	2301      	movne	r3, #1
 80088dc:	0692      	lsls	r2, r2, #26
 80088de:	d42b      	bmi.n	8008938 <_printf_common+0xb0>
 80088e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80088e4:	4641      	mov	r1, r8
 80088e6:	4638      	mov	r0, r7
 80088e8:	47c8      	blx	r9
 80088ea:	3001      	adds	r0, #1
 80088ec:	d01e      	beq.n	800892c <_printf_common+0xa4>
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	6922      	ldr	r2, [r4, #16]
 80088f2:	f003 0306 	and.w	r3, r3, #6
 80088f6:	2b04      	cmp	r3, #4
 80088f8:	bf02      	ittt	eq
 80088fa:	68e5      	ldreq	r5, [r4, #12]
 80088fc:	6833      	ldreq	r3, [r6, #0]
 80088fe:	1aed      	subeq	r5, r5, r3
 8008900:	68a3      	ldr	r3, [r4, #8]
 8008902:	bf0c      	ite	eq
 8008904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008908:	2500      	movne	r5, #0
 800890a:	4293      	cmp	r3, r2
 800890c:	bfc4      	itt	gt
 800890e:	1a9b      	subgt	r3, r3, r2
 8008910:	18ed      	addgt	r5, r5, r3
 8008912:	2600      	movs	r6, #0
 8008914:	341a      	adds	r4, #26
 8008916:	42b5      	cmp	r5, r6
 8008918:	d11a      	bne.n	8008950 <_printf_common+0xc8>
 800891a:	2000      	movs	r0, #0
 800891c:	e008      	b.n	8008930 <_printf_common+0xa8>
 800891e:	2301      	movs	r3, #1
 8008920:	4652      	mov	r2, sl
 8008922:	4641      	mov	r1, r8
 8008924:	4638      	mov	r0, r7
 8008926:	47c8      	blx	r9
 8008928:	3001      	adds	r0, #1
 800892a:	d103      	bne.n	8008934 <_printf_common+0xac>
 800892c:	f04f 30ff 	mov.w	r0, #4294967295
 8008930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008934:	3501      	adds	r5, #1
 8008936:	e7c6      	b.n	80088c6 <_printf_common+0x3e>
 8008938:	18e1      	adds	r1, r4, r3
 800893a:	1c5a      	adds	r2, r3, #1
 800893c:	2030      	movs	r0, #48	@ 0x30
 800893e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008942:	4422      	add	r2, r4
 8008944:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008948:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800894c:	3302      	adds	r3, #2
 800894e:	e7c7      	b.n	80088e0 <_printf_common+0x58>
 8008950:	2301      	movs	r3, #1
 8008952:	4622      	mov	r2, r4
 8008954:	4641      	mov	r1, r8
 8008956:	4638      	mov	r0, r7
 8008958:	47c8      	blx	r9
 800895a:	3001      	adds	r0, #1
 800895c:	d0e6      	beq.n	800892c <_printf_common+0xa4>
 800895e:	3601      	adds	r6, #1
 8008960:	e7d9      	b.n	8008916 <_printf_common+0x8e>
	...

08008964 <_printf_i>:
 8008964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008968:	7e0f      	ldrb	r7, [r1, #24]
 800896a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800896c:	2f78      	cmp	r7, #120	@ 0x78
 800896e:	4691      	mov	r9, r2
 8008970:	4680      	mov	r8, r0
 8008972:	460c      	mov	r4, r1
 8008974:	469a      	mov	sl, r3
 8008976:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800897a:	d807      	bhi.n	800898c <_printf_i+0x28>
 800897c:	2f62      	cmp	r7, #98	@ 0x62
 800897e:	d80a      	bhi.n	8008996 <_printf_i+0x32>
 8008980:	2f00      	cmp	r7, #0
 8008982:	f000 80d2 	beq.w	8008b2a <_printf_i+0x1c6>
 8008986:	2f58      	cmp	r7, #88	@ 0x58
 8008988:	f000 80b9 	beq.w	8008afe <_printf_i+0x19a>
 800898c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008990:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008994:	e03a      	b.n	8008a0c <_printf_i+0xa8>
 8008996:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800899a:	2b15      	cmp	r3, #21
 800899c:	d8f6      	bhi.n	800898c <_printf_i+0x28>
 800899e:	a101      	add	r1, pc, #4	@ (adr r1, 80089a4 <_printf_i+0x40>)
 80089a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089a4:	080089fd 	.word	0x080089fd
 80089a8:	08008a11 	.word	0x08008a11
 80089ac:	0800898d 	.word	0x0800898d
 80089b0:	0800898d 	.word	0x0800898d
 80089b4:	0800898d 	.word	0x0800898d
 80089b8:	0800898d 	.word	0x0800898d
 80089bc:	08008a11 	.word	0x08008a11
 80089c0:	0800898d 	.word	0x0800898d
 80089c4:	0800898d 	.word	0x0800898d
 80089c8:	0800898d 	.word	0x0800898d
 80089cc:	0800898d 	.word	0x0800898d
 80089d0:	08008b11 	.word	0x08008b11
 80089d4:	08008a3b 	.word	0x08008a3b
 80089d8:	08008acb 	.word	0x08008acb
 80089dc:	0800898d 	.word	0x0800898d
 80089e0:	0800898d 	.word	0x0800898d
 80089e4:	08008b33 	.word	0x08008b33
 80089e8:	0800898d 	.word	0x0800898d
 80089ec:	08008a3b 	.word	0x08008a3b
 80089f0:	0800898d 	.word	0x0800898d
 80089f4:	0800898d 	.word	0x0800898d
 80089f8:	08008ad3 	.word	0x08008ad3
 80089fc:	6833      	ldr	r3, [r6, #0]
 80089fe:	1d1a      	adds	r2, r3, #4
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	6032      	str	r2, [r6, #0]
 8008a04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e09d      	b.n	8008b4c <_printf_i+0x1e8>
 8008a10:	6833      	ldr	r3, [r6, #0]
 8008a12:	6820      	ldr	r0, [r4, #0]
 8008a14:	1d19      	adds	r1, r3, #4
 8008a16:	6031      	str	r1, [r6, #0]
 8008a18:	0606      	lsls	r6, r0, #24
 8008a1a:	d501      	bpl.n	8008a20 <_printf_i+0xbc>
 8008a1c:	681d      	ldr	r5, [r3, #0]
 8008a1e:	e003      	b.n	8008a28 <_printf_i+0xc4>
 8008a20:	0645      	lsls	r5, r0, #25
 8008a22:	d5fb      	bpl.n	8008a1c <_printf_i+0xb8>
 8008a24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a28:	2d00      	cmp	r5, #0
 8008a2a:	da03      	bge.n	8008a34 <_printf_i+0xd0>
 8008a2c:	232d      	movs	r3, #45	@ 0x2d
 8008a2e:	426d      	negs	r5, r5
 8008a30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a34:	4859      	ldr	r0, [pc, #356]	@ (8008b9c <_printf_i+0x238>)
 8008a36:	230a      	movs	r3, #10
 8008a38:	e011      	b.n	8008a5e <_printf_i+0xfa>
 8008a3a:	6821      	ldr	r1, [r4, #0]
 8008a3c:	6833      	ldr	r3, [r6, #0]
 8008a3e:	0608      	lsls	r0, r1, #24
 8008a40:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a44:	d402      	bmi.n	8008a4c <_printf_i+0xe8>
 8008a46:	0649      	lsls	r1, r1, #25
 8008a48:	bf48      	it	mi
 8008a4a:	b2ad      	uxthmi	r5, r5
 8008a4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a4e:	4853      	ldr	r0, [pc, #332]	@ (8008b9c <_printf_i+0x238>)
 8008a50:	6033      	str	r3, [r6, #0]
 8008a52:	bf14      	ite	ne
 8008a54:	230a      	movne	r3, #10
 8008a56:	2308      	moveq	r3, #8
 8008a58:	2100      	movs	r1, #0
 8008a5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008a5e:	6866      	ldr	r6, [r4, #4]
 8008a60:	60a6      	str	r6, [r4, #8]
 8008a62:	2e00      	cmp	r6, #0
 8008a64:	bfa2      	ittt	ge
 8008a66:	6821      	ldrge	r1, [r4, #0]
 8008a68:	f021 0104 	bicge.w	r1, r1, #4
 8008a6c:	6021      	strge	r1, [r4, #0]
 8008a6e:	b90d      	cbnz	r5, 8008a74 <_printf_i+0x110>
 8008a70:	2e00      	cmp	r6, #0
 8008a72:	d04b      	beq.n	8008b0c <_printf_i+0x1a8>
 8008a74:	4616      	mov	r6, r2
 8008a76:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a7a:	fb03 5711 	mls	r7, r3, r1, r5
 8008a7e:	5dc7      	ldrb	r7, [r0, r7]
 8008a80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a84:	462f      	mov	r7, r5
 8008a86:	42bb      	cmp	r3, r7
 8008a88:	460d      	mov	r5, r1
 8008a8a:	d9f4      	bls.n	8008a76 <_printf_i+0x112>
 8008a8c:	2b08      	cmp	r3, #8
 8008a8e:	d10b      	bne.n	8008aa8 <_printf_i+0x144>
 8008a90:	6823      	ldr	r3, [r4, #0]
 8008a92:	07df      	lsls	r7, r3, #31
 8008a94:	d508      	bpl.n	8008aa8 <_printf_i+0x144>
 8008a96:	6923      	ldr	r3, [r4, #16]
 8008a98:	6861      	ldr	r1, [r4, #4]
 8008a9a:	4299      	cmp	r1, r3
 8008a9c:	bfde      	ittt	le
 8008a9e:	2330      	movle	r3, #48	@ 0x30
 8008aa0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008aa4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008aa8:	1b92      	subs	r2, r2, r6
 8008aaa:	6122      	str	r2, [r4, #16]
 8008aac:	f8cd a000 	str.w	sl, [sp]
 8008ab0:	464b      	mov	r3, r9
 8008ab2:	aa03      	add	r2, sp, #12
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	4640      	mov	r0, r8
 8008ab8:	f7ff fee6 	bl	8008888 <_printf_common>
 8008abc:	3001      	adds	r0, #1
 8008abe:	d14a      	bne.n	8008b56 <_printf_i+0x1f2>
 8008ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac4:	b004      	add	sp, #16
 8008ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	f043 0320 	orr.w	r3, r3, #32
 8008ad0:	6023      	str	r3, [r4, #0]
 8008ad2:	4833      	ldr	r0, [pc, #204]	@ (8008ba0 <_printf_i+0x23c>)
 8008ad4:	2778      	movs	r7, #120	@ 0x78
 8008ad6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ada:	6823      	ldr	r3, [r4, #0]
 8008adc:	6831      	ldr	r1, [r6, #0]
 8008ade:	061f      	lsls	r7, r3, #24
 8008ae0:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ae4:	d402      	bmi.n	8008aec <_printf_i+0x188>
 8008ae6:	065f      	lsls	r7, r3, #25
 8008ae8:	bf48      	it	mi
 8008aea:	b2ad      	uxthmi	r5, r5
 8008aec:	6031      	str	r1, [r6, #0]
 8008aee:	07d9      	lsls	r1, r3, #31
 8008af0:	bf44      	itt	mi
 8008af2:	f043 0320 	orrmi.w	r3, r3, #32
 8008af6:	6023      	strmi	r3, [r4, #0]
 8008af8:	b11d      	cbz	r5, 8008b02 <_printf_i+0x19e>
 8008afa:	2310      	movs	r3, #16
 8008afc:	e7ac      	b.n	8008a58 <_printf_i+0xf4>
 8008afe:	4827      	ldr	r0, [pc, #156]	@ (8008b9c <_printf_i+0x238>)
 8008b00:	e7e9      	b.n	8008ad6 <_printf_i+0x172>
 8008b02:	6823      	ldr	r3, [r4, #0]
 8008b04:	f023 0320 	bic.w	r3, r3, #32
 8008b08:	6023      	str	r3, [r4, #0]
 8008b0a:	e7f6      	b.n	8008afa <_printf_i+0x196>
 8008b0c:	4616      	mov	r6, r2
 8008b0e:	e7bd      	b.n	8008a8c <_printf_i+0x128>
 8008b10:	6833      	ldr	r3, [r6, #0]
 8008b12:	6825      	ldr	r5, [r4, #0]
 8008b14:	6961      	ldr	r1, [r4, #20]
 8008b16:	1d18      	adds	r0, r3, #4
 8008b18:	6030      	str	r0, [r6, #0]
 8008b1a:	062e      	lsls	r6, r5, #24
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	d501      	bpl.n	8008b24 <_printf_i+0x1c0>
 8008b20:	6019      	str	r1, [r3, #0]
 8008b22:	e002      	b.n	8008b2a <_printf_i+0x1c6>
 8008b24:	0668      	lsls	r0, r5, #25
 8008b26:	d5fb      	bpl.n	8008b20 <_printf_i+0x1bc>
 8008b28:	8019      	strh	r1, [r3, #0]
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	6123      	str	r3, [r4, #16]
 8008b2e:	4616      	mov	r6, r2
 8008b30:	e7bc      	b.n	8008aac <_printf_i+0x148>
 8008b32:	6833      	ldr	r3, [r6, #0]
 8008b34:	1d1a      	adds	r2, r3, #4
 8008b36:	6032      	str	r2, [r6, #0]
 8008b38:	681e      	ldr	r6, [r3, #0]
 8008b3a:	6862      	ldr	r2, [r4, #4]
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	4630      	mov	r0, r6
 8008b40:	f7f7 fb66 	bl	8000210 <memchr>
 8008b44:	b108      	cbz	r0, 8008b4a <_printf_i+0x1e6>
 8008b46:	1b80      	subs	r0, r0, r6
 8008b48:	6060      	str	r0, [r4, #4]
 8008b4a:	6863      	ldr	r3, [r4, #4]
 8008b4c:	6123      	str	r3, [r4, #16]
 8008b4e:	2300      	movs	r3, #0
 8008b50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b54:	e7aa      	b.n	8008aac <_printf_i+0x148>
 8008b56:	6923      	ldr	r3, [r4, #16]
 8008b58:	4632      	mov	r2, r6
 8008b5a:	4649      	mov	r1, r9
 8008b5c:	4640      	mov	r0, r8
 8008b5e:	47d0      	blx	sl
 8008b60:	3001      	adds	r0, #1
 8008b62:	d0ad      	beq.n	8008ac0 <_printf_i+0x15c>
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	079b      	lsls	r3, r3, #30
 8008b68:	d413      	bmi.n	8008b92 <_printf_i+0x22e>
 8008b6a:	68e0      	ldr	r0, [r4, #12]
 8008b6c:	9b03      	ldr	r3, [sp, #12]
 8008b6e:	4298      	cmp	r0, r3
 8008b70:	bfb8      	it	lt
 8008b72:	4618      	movlt	r0, r3
 8008b74:	e7a6      	b.n	8008ac4 <_printf_i+0x160>
 8008b76:	2301      	movs	r3, #1
 8008b78:	4632      	mov	r2, r6
 8008b7a:	4649      	mov	r1, r9
 8008b7c:	4640      	mov	r0, r8
 8008b7e:	47d0      	blx	sl
 8008b80:	3001      	adds	r0, #1
 8008b82:	d09d      	beq.n	8008ac0 <_printf_i+0x15c>
 8008b84:	3501      	adds	r5, #1
 8008b86:	68e3      	ldr	r3, [r4, #12]
 8008b88:	9903      	ldr	r1, [sp, #12]
 8008b8a:	1a5b      	subs	r3, r3, r1
 8008b8c:	42ab      	cmp	r3, r5
 8008b8e:	dcf2      	bgt.n	8008b76 <_printf_i+0x212>
 8008b90:	e7eb      	b.n	8008b6a <_printf_i+0x206>
 8008b92:	2500      	movs	r5, #0
 8008b94:	f104 0619 	add.w	r6, r4, #25
 8008b98:	e7f5      	b.n	8008b86 <_printf_i+0x222>
 8008b9a:	bf00      	nop
 8008b9c:	0800c482 	.word	0x0800c482
 8008ba0:	0800c493 	.word	0x0800c493

08008ba4 <std>:
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	b510      	push	{r4, lr}
 8008ba8:	4604      	mov	r4, r0
 8008baa:	e9c0 3300 	strd	r3, r3, [r0]
 8008bae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bb2:	6083      	str	r3, [r0, #8]
 8008bb4:	8181      	strh	r1, [r0, #12]
 8008bb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8008bb8:	81c2      	strh	r2, [r0, #14]
 8008bba:	6183      	str	r3, [r0, #24]
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	2208      	movs	r2, #8
 8008bc0:	305c      	adds	r0, #92	@ 0x5c
 8008bc2:	f000 fa19 	bl	8008ff8 <memset>
 8008bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8008bfc <std+0x58>)
 8008bc8:	6263      	str	r3, [r4, #36]	@ 0x24
 8008bca:	4b0d      	ldr	r3, [pc, #52]	@ (8008c00 <std+0x5c>)
 8008bcc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008bce:	4b0d      	ldr	r3, [pc, #52]	@ (8008c04 <std+0x60>)
 8008bd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008c08 <std+0x64>)
 8008bd4:	6323      	str	r3, [r4, #48]	@ 0x30
 8008bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8008c0c <std+0x68>)
 8008bd8:	6224      	str	r4, [r4, #32]
 8008bda:	429c      	cmp	r4, r3
 8008bdc:	d006      	beq.n	8008bec <std+0x48>
 8008bde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008be2:	4294      	cmp	r4, r2
 8008be4:	d002      	beq.n	8008bec <std+0x48>
 8008be6:	33d0      	adds	r3, #208	@ 0xd0
 8008be8:	429c      	cmp	r4, r3
 8008bea:	d105      	bne.n	8008bf8 <std+0x54>
 8008bec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bf4:	f000 ba7c 	b.w	80090f0 <__retarget_lock_init_recursive>
 8008bf8:	bd10      	pop	{r4, pc}
 8008bfa:	bf00      	nop
 8008bfc:	08008e49 	.word	0x08008e49
 8008c00:	08008e6b 	.word	0x08008e6b
 8008c04:	08008ea3 	.word	0x08008ea3
 8008c08:	08008ec7 	.word	0x08008ec7
 8008c0c:	200131d8 	.word	0x200131d8

08008c10 <stdio_exit_handler>:
 8008c10:	4a02      	ldr	r2, [pc, #8]	@ (8008c1c <stdio_exit_handler+0xc>)
 8008c12:	4903      	ldr	r1, [pc, #12]	@ (8008c20 <stdio_exit_handler+0x10>)
 8008c14:	4803      	ldr	r0, [pc, #12]	@ (8008c24 <stdio_exit_handler+0x14>)
 8008c16:	f000 b869 	b.w	8008cec <_fwalk_sglue>
 8008c1a:	bf00      	nop
 8008c1c:	2000001c 	.word	0x2000001c
 8008c20:	0800acf1 	.word	0x0800acf1
 8008c24:	2000002c 	.word	0x2000002c

08008c28 <cleanup_stdio>:
 8008c28:	6841      	ldr	r1, [r0, #4]
 8008c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8008c5c <cleanup_stdio+0x34>)
 8008c2c:	4299      	cmp	r1, r3
 8008c2e:	b510      	push	{r4, lr}
 8008c30:	4604      	mov	r4, r0
 8008c32:	d001      	beq.n	8008c38 <cleanup_stdio+0x10>
 8008c34:	f002 f85c 	bl	800acf0 <_fflush_r>
 8008c38:	68a1      	ldr	r1, [r4, #8]
 8008c3a:	4b09      	ldr	r3, [pc, #36]	@ (8008c60 <cleanup_stdio+0x38>)
 8008c3c:	4299      	cmp	r1, r3
 8008c3e:	d002      	beq.n	8008c46 <cleanup_stdio+0x1e>
 8008c40:	4620      	mov	r0, r4
 8008c42:	f002 f855 	bl	800acf0 <_fflush_r>
 8008c46:	68e1      	ldr	r1, [r4, #12]
 8008c48:	4b06      	ldr	r3, [pc, #24]	@ (8008c64 <cleanup_stdio+0x3c>)
 8008c4a:	4299      	cmp	r1, r3
 8008c4c:	d004      	beq.n	8008c58 <cleanup_stdio+0x30>
 8008c4e:	4620      	mov	r0, r4
 8008c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c54:	f002 b84c 	b.w	800acf0 <_fflush_r>
 8008c58:	bd10      	pop	{r4, pc}
 8008c5a:	bf00      	nop
 8008c5c:	200131d8 	.word	0x200131d8
 8008c60:	20013240 	.word	0x20013240
 8008c64:	200132a8 	.word	0x200132a8

08008c68 <global_stdio_init.part.0>:
 8008c68:	b510      	push	{r4, lr}
 8008c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8008c98 <global_stdio_init.part.0+0x30>)
 8008c6c:	4c0b      	ldr	r4, [pc, #44]	@ (8008c9c <global_stdio_init.part.0+0x34>)
 8008c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8008ca0 <global_stdio_init.part.0+0x38>)
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	4620      	mov	r0, r4
 8008c74:	2200      	movs	r2, #0
 8008c76:	2104      	movs	r1, #4
 8008c78:	f7ff ff94 	bl	8008ba4 <std>
 8008c7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008c80:	2201      	movs	r2, #1
 8008c82:	2109      	movs	r1, #9
 8008c84:	f7ff ff8e 	bl	8008ba4 <std>
 8008c88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008c8c:	2202      	movs	r2, #2
 8008c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c92:	2112      	movs	r1, #18
 8008c94:	f7ff bf86 	b.w	8008ba4 <std>
 8008c98:	20013310 	.word	0x20013310
 8008c9c:	200131d8 	.word	0x200131d8
 8008ca0:	08008c11 	.word	0x08008c11

08008ca4 <__sfp_lock_acquire>:
 8008ca4:	4801      	ldr	r0, [pc, #4]	@ (8008cac <__sfp_lock_acquire+0x8>)
 8008ca6:	f000 ba24 	b.w	80090f2 <__retarget_lock_acquire_recursive>
 8008caa:	bf00      	nop
 8008cac:	20013319 	.word	0x20013319

08008cb0 <__sfp_lock_release>:
 8008cb0:	4801      	ldr	r0, [pc, #4]	@ (8008cb8 <__sfp_lock_release+0x8>)
 8008cb2:	f000 ba1f 	b.w	80090f4 <__retarget_lock_release_recursive>
 8008cb6:	bf00      	nop
 8008cb8:	20013319 	.word	0x20013319

08008cbc <__sinit>:
 8008cbc:	b510      	push	{r4, lr}
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	f7ff fff0 	bl	8008ca4 <__sfp_lock_acquire>
 8008cc4:	6a23      	ldr	r3, [r4, #32]
 8008cc6:	b11b      	cbz	r3, 8008cd0 <__sinit+0x14>
 8008cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ccc:	f7ff bff0 	b.w	8008cb0 <__sfp_lock_release>
 8008cd0:	4b04      	ldr	r3, [pc, #16]	@ (8008ce4 <__sinit+0x28>)
 8008cd2:	6223      	str	r3, [r4, #32]
 8008cd4:	4b04      	ldr	r3, [pc, #16]	@ (8008ce8 <__sinit+0x2c>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1f5      	bne.n	8008cc8 <__sinit+0xc>
 8008cdc:	f7ff ffc4 	bl	8008c68 <global_stdio_init.part.0>
 8008ce0:	e7f2      	b.n	8008cc8 <__sinit+0xc>
 8008ce2:	bf00      	nop
 8008ce4:	08008c29 	.word	0x08008c29
 8008ce8:	20013310 	.word	0x20013310

08008cec <_fwalk_sglue>:
 8008cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cf0:	4607      	mov	r7, r0
 8008cf2:	4688      	mov	r8, r1
 8008cf4:	4614      	mov	r4, r2
 8008cf6:	2600      	movs	r6, #0
 8008cf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008cfc:	f1b9 0901 	subs.w	r9, r9, #1
 8008d00:	d505      	bpl.n	8008d0e <_fwalk_sglue+0x22>
 8008d02:	6824      	ldr	r4, [r4, #0]
 8008d04:	2c00      	cmp	r4, #0
 8008d06:	d1f7      	bne.n	8008cf8 <_fwalk_sglue+0xc>
 8008d08:	4630      	mov	r0, r6
 8008d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d0e:	89ab      	ldrh	r3, [r5, #12]
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d907      	bls.n	8008d24 <_fwalk_sglue+0x38>
 8008d14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	d003      	beq.n	8008d24 <_fwalk_sglue+0x38>
 8008d1c:	4629      	mov	r1, r5
 8008d1e:	4638      	mov	r0, r7
 8008d20:	47c0      	blx	r8
 8008d22:	4306      	orrs	r6, r0
 8008d24:	3568      	adds	r5, #104	@ 0x68
 8008d26:	e7e9      	b.n	8008cfc <_fwalk_sglue+0x10>

08008d28 <iprintf>:
 8008d28:	b40f      	push	{r0, r1, r2, r3}
 8008d2a:	b507      	push	{r0, r1, r2, lr}
 8008d2c:	4906      	ldr	r1, [pc, #24]	@ (8008d48 <iprintf+0x20>)
 8008d2e:	ab04      	add	r3, sp, #16
 8008d30:	6808      	ldr	r0, [r1, #0]
 8008d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d36:	6881      	ldr	r1, [r0, #8]
 8008d38:	9301      	str	r3, [sp, #4]
 8008d3a:	f001 fe3d 	bl	800a9b8 <_vfiprintf_r>
 8008d3e:	b003      	add	sp, #12
 8008d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d44:	b004      	add	sp, #16
 8008d46:	4770      	bx	lr
 8008d48:	20000028 	.word	0x20000028

08008d4c <_puts_r>:
 8008d4c:	6a03      	ldr	r3, [r0, #32]
 8008d4e:	b570      	push	{r4, r5, r6, lr}
 8008d50:	6884      	ldr	r4, [r0, #8]
 8008d52:	4605      	mov	r5, r0
 8008d54:	460e      	mov	r6, r1
 8008d56:	b90b      	cbnz	r3, 8008d5c <_puts_r+0x10>
 8008d58:	f7ff ffb0 	bl	8008cbc <__sinit>
 8008d5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d5e:	07db      	lsls	r3, r3, #31
 8008d60:	d405      	bmi.n	8008d6e <_puts_r+0x22>
 8008d62:	89a3      	ldrh	r3, [r4, #12]
 8008d64:	0598      	lsls	r0, r3, #22
 8008d66:	d402      	bmi.n	8008d6e <_puts_r+0x22>
 8008d68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d6a:	f000 f9c2 	bl	80090f2 <__retarget_lock_acquire_recursive>
 8008d6e:	89a3      	ldrh	r3, [r4, #12]
 8008d70:	0719      	lsls	r1, r3, #28
 8008d72:	d502      	bpl.n	8008d7a <_puts_r+0x2e>
 8008d74:	6923      	ldr	r3, [r4, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d135      	bne.n	8008de6 <_puts_r+0x9a>
 8008d7a:	4621      	mov	r1, r4
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	f000 f8e5 	bl	8008f4c <__swsetup_r>
 8008d82:	b380      	cbz	r0, 8008de6 <_puts_r+0x9a>
 8008d84:	f04f 35ff 	mov.w	r5, #4294967295
 8008d88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d8a:	07da      	lsls	r2, r3, #31
 8008d8c:	d405      	bmi.n	8008d9a <_puts_r+0x4e>
 8008d8e:	89a3      	ldrh	r3, [r4, #12]
 8008d90:	059b      	lsls	r3, r3, #22
 8008d92:	d402      	bmi.n	8008d9a <_puts_r+0x4e>
 8008d94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d96:	f000 f9ad 	bl	80090f4 <__retarget_lock_release_recursive>
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	bd70      	pop	{r4, r5, r6, pc}
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	da04      	bge.n	8008dac <_puts_r+0x60>
 8008da2:	69a2      	ldr	r2, [r4, #24]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	dc17      	bgt.n	8008dd8 <_puts_r+0x8c>
 8008da8:	290a      	cmp	r1, #10
 8008daa:	d015      	beq.n	8008dd8 <_puts_r+0x8c>
 8008dac:	6823      	ldr	r3, [r4, #0]
 8008dae:	1c5a      	adds	r2, r3, #1
 8008db0:	6022      	str	r2, [r4, #0]
 8008db2:	7019      	strb	r1, [r3, #0]
 8008db4:	68a3      	ldr	r3, [r4, #8]
 8008db6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	60a3      	str	r3, [r4, #8]
 8008dbe:	2900      	cmp	r1, #0
 8008dc0:	d1ed      	bne.n	8008d9e <_puts_r+0x52>
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	da11      	bge.n	8008dea <_puts_r+0x9e>
 8008dc6:	4622      	mov	r2, r4
 8008dc8:	210a      	movs	r1, #10
 8008dca:	4628      	mov	r0, r5
 8008dcc:	f000 f87f 	bl	8008ece <__swbuf_r>
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	d0d7      	beq.n	8008d84 <_puts_r+0x38>
 8008dd4:	250a      	movs	r5, #10
 8008dd6:	e7d7      	b.n	8008d88 <_puts_r+0x3c>
 8008dd8:	4622      	mov	r2, r4
 8008dda:	4628      	mov	r0, r5
 8008ddc:	f000 f877 	bl	8008ece <__swbuf_r>
 8008de0:	3001      	adds	r0, #1
 8008de2:	d1e7      	bne.n	8008db4 <_puts_r+0x68>
 8008de4:	e7ce      	b.n	8008d84 <_puts_r+0x38>
 8008de6:	3e01      	subs	r6, #1
 8008de8:	e7e4      	b.n	8008db4 <_puts_r+0x68>
 8008dea:	6823      	ldr	r3, [r4, #0]
 8008dec:	1c5a      	adds	r2, r3, #1
 8008dee:	6022      	str	r2, [r4, #0]
 8008df0:	220a      	movs	r2, #10
 8008df2:	701a      	strb	r2, [r3, #0]
 8008df4:	e7ee      	b.n	8008dd4 <_puts_r+0x88>
	...

08008df8 <puts>:
 8008df8:	4b02      	ldr	r3, [pc, #8]	@ (8008e04 <puts+0xc>)
 8008dfa:	4601      	mov	r1, r0
 8008dfc:	6818      	ldr	r0, [r3, #0]
 8008dfe:	f7ff bfa5 	b.w	8008d4c <_puts_r>
 8008e02:	bf00      	nop
 8008e04:	20000028 	.word	0x20000028

08008e08 <siprintf>:
 8008e08:	b40e      	push	{r1, r2, r3}
 8008e0a:	b500      	push	{lr}
 8008e0c:	b09c      	sub	sp, #112	@ 0x70
 8008e0e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008e10:	9002      	str	r0, [sp, #8]
 8008e12:	9006      	str	r0, [sp, #24]
 8008e14:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008e18:	4809      	ldr	r0, [pc, #36]	@ (8008e40 <siprintf+0x38>)
 8008e1a:	9107      	str	r1, [sp, #28]
 8008e1c:	9104      	str	r1, [sp, #16]
 8008e1e:	4909      	ldr	r1, [pc, #36]	@ (8008e44 <siprintf+0x3c>)
 8008e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e24:	9105      	str	r1, [sp, #20]
 8008e26:	6800      	ldr	r0, [r0, #0]
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	a902      	add	r1, sp, #8
 8008e2c:	f001 fc9e 	bl	800a76c <_svfiprintf_r>
 8008e30:	9b02      	ldr	r3, [sp, #8]
 8008e32:	2200      	movs	r2, #0
 8008e34:	701a      	strb	r2, [r3, #0]
 8008e36:	b01c      	add	sp, #112	@ 0x70
 8008e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e3c:	b003      	add	sp, #12
 8008e3e:	4770      	bx	lr
 8008e40:	20000028 	.word	0x20000028
 8008e44:	ffff0208 	.word	0xffff0208

08008e48 <__sread>:
 8008e48:	b510      	push	{r4, lr}
 8008e4a:	460c      	mov	r4, r1
 8008e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e50:	f000 f900 	bl	8009054 <_read_r>
 8008e54:	2800      	cmp	r0, #0
 8008e56:	bfab      	itete	ge
 8008e58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008e5a:	89a3      	ldrhlt	r3, [r4, #12]
 8008e5c:	181b      	addge	r3, r3, r0
 8008e5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008e62:	bfac      	ite	ge
 8008e64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008e66:	81a3      	strhlt	r3, [r4, #12]
 8008e68:	bd10      	pop	{r4, pc}

08008e6a <__swrite>:
 8008e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e6e:	461f      	mov	r7, r3
 8008e70:	898b      	ldrh	r3, [r1, #12]
 8008e72:	05db      	lsls	r3, r3, #23
 8008e74:	4605      	mov	r5, r0
 8008e76:	460c      	mov	r4, r1
 8008e78:	4616      	mov	r6, r2
 8008e7a:	d505      	bpl.n	8008e88 <__swrite+0x1e>
 8008e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e80:	2302      	movs	r3, #2
 8008e82:	2200      	movs	r2, #0
 8008e84:	f000 f8d4 	bl	8009030 <_lseek_r>
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e92:	81a3      	strh	r3, [r4, #12]
 8008e94:	4632      	mov	r2, r6
 8008e96:	463b      	mov	r3, r7
 8008e98:	4628      	mov	r0, r5
 8008e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e9e:	f000 b8eb 	b.w	8009078 <_write_r>

08008ea2 <__sseek>:
 8008ea2:	b510      	push	{r4, lr}
 8008ea4:	460c      	mov	r4, r1
 8008ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eaa:	f000 f8c1 	bl	8009030 <_lseek_r>
 8008eae:	1c43      	adds	r3, r0, #1
 8008eb0:	89a3      	ldrh	r3, [r4, #12]
 8008eb2:	bf15      	itete	ne
 8008eb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008eb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008eba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008ebe:	81a3      	strheq	r3, [r4, #12]
 8008ec0:	bf18      	it	ne
 8008ec2:	81a3      	strhne	r3, [r4, #12]
 8008ec4:	bd10      	pop	{r4, pc}

08008ec6 <__sclose>:
 8008ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eca:	f000 b8a1 	b.w	8009010 <_close_r>

08008ece <__swbuf_r>:
 8008ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed0:	460e      	mov	r6, r1
 8008ed2:	4614      	mov	r4, r2
 8008ed4:	4605      	mov	r5, r0
 8008ed6:	b118      	cbz	r0, 8008ee0 <__swbuf_r+0x12>
 8008ed8:	6a03      	ldr	r3, [r0, #32]
 8008eda:	b90b      	cbnz	r3, 8008ee0 <__swbuf_r+0x12>
 8008edc:	f7ff feee 	bl	8008cbc <__sinit>
 8008ee0:	69a3      	ldr	r3, [r4, #24]
 8008ee2:	60a3      	str	r3, [r4, #8]
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	071a      	lsls	r2, r3, #28
 8008ee8:	d501      	bpl.n	8008eee <__swbuf_r+0x20>
 8008eea:	6923      	ldr	r3, [r4, #16]
 8008eec:	b943      	cbnz	r3, 8008f00 <__swbuf_r+0x32>
 8008eee:	4621      	mov	r1, r4
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	f000 f82b 	bl	8008f4c <__swsetup_r>
 8008ef6:	b118      	cbz	r0, 8008f00 <__swbuf_r+0x32>
 8008ef8:	f04f 37ff 	mov.w	r7, #4294967295
 8008efc:	4638      	mov	r0, r7
 8008efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f00:	6823      	ldr	r3, [r4, #0]
 8008f02:	6922      	ldr	r2, [r4, #16]
 8008f04:	1a98      	subs	r0, r3, r2
 8008f06:	6963      	ldr	r3, [r4, #20]
 8008f08:	b2f6      	uxtb	r6, r6
 8008f0a:	4283      	cmp	r3, r0
 8008f0c:	4637      	mov	r7, r6
 8008f0e:	dc05      	bgt.n	8008f1c <__swbuf_r+0x4e>
 8008f10:	4621      	mov	r1, r4
 8008f12:	4628      	mov	r0, r5
 8008f14:	f001 feec 	bl	800acf0 <_fflush_r>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d1ed      	bne.n	8008ef8 <__swbuf_r+0x2a>
 8008f1c:	68a3      	ldr	r3, [r4, #8]
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	60a3      	str	r3, [r4, #8]
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	1c5a      	adds	r2, r3, #1
 8008f26:	6022      	str	r2, [r4, #0]
 8008f28:	701e      	strb	r6, [r3, #0]
 8008f2a:	6962      	ldr	r2, [r4, #20]
 8008f2c:	1c43      	adds	r3, r0, #1
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d004      	beq.n	8008f3c <__swbuf_r+0x6e>
 8008f32:	89a3      	ldrh	r3, [r4, #12]
 8008f34:	07db      	lsls	r3, r3, #31
 8008f36:	d5e1      	bpl.n	8008efc <__swbuf_r+0x2e>
 8008f38:	2e0a      	cmp	r6, #10
 8008f3a:	d1df      	bne.n	8008efc <__swbuf_r+0x2e>
 8008f3c:	4621      	mov	r1, r4
 8008f3e:	4628      	mov	r0, r5
 8008f40:	f001 fed6 	bl	800acf0 <_fflush_r>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	d0d9      	beq.n	8008efc <__swbuf_r+0x2e>
 8008f48:	e7d6      	b.n	8008ef8 <__swbuf_r+0x2a>
	...

08008f4c <__swsetup_r>:
 8008f4c:	b538      	push	{r3, r4, r5, lr}
 8008f4e:	4b29      	ldr	r3, [pc, #164]	@ (8008ff4 <__swsetup_r+0xa8>)
 8008f50:	4605      	mov	r5, r0
 8008f52:	6818      	ldr	r0, [r3, #0]
 8008f54:	460c      	mov	r4, r1
 8008f56:	b118      	cbz	r0, 8008f60 <__swsetup_r+0x14>
 8008f58:	6a03      	ldr	r3, [r0, #32]
 8008f5a:	b90b      	cbnz	r3, 8008f60 <__swsetup_r+0x14>
 8008f5c:	f7ff feae 	bl	8008cbc <__sinit>
 8008f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f64:	0719      	lsls	r1, r3, #28
 8008f66:	d422      	bmi.n	8008fae <__swsetup_r+0x62>
 8008f68:	06da      	lsls	r2, r3, #27
 8008f6a:	d407      	bmi.n	8008f7c <__swsetup_r+0x30>
 8008f6c:	2209      	movs	r2, #9
 8008f6e:	602a      	str	r2, [r5, #0]
 8008f70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f74:	81a3      	strh	r3, [r4, #12]
 8008f76:	f04f 30ff 	mov.w	r0, #4294967295
 8008f7a:	e033      	b.n	8008fe4 <__swsetup_r+0x98>
 8008f7c:	0758      	lsls	r0, r3, #29
 8008f7e:	d512      	bpl.n	8008fa6 <__swsetup_r+0x5a>
 8008f80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f82:	b141      	cbz	r1, 8008f96 <__swsetup_r+0x4a>
 8008f84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f88:	4299      	cmp	r1, r3
 8008f8a:	d002      	beq.n	8008f92 <__swsetup_r+0x46>
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	f000 ff0f 	bl	8009db0 <_free_r>
 8008f92:	2300      	movs	r3, #0
 8008f94:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f96:	89a3      	ldrh	r3, [r4, #12]
 8008f98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f9c:	81a3      	strh	r3, [r4, #12]
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	6063      	str	r3, [r4, #4]
 8008fa2:	6923      	ldr	r3, [r4, #16]
 8008fa4:	6023      	str	r3, [r4, #0]
 8008fa6:	89a3      	ldrh	r3, [r4, #12]
 8008fa8:	f043 0308 	orr.w	r3, r3, #8
 8008fac:	81a3      	strh	r3, [r4, #12]
 8008fae:	6923      	ldr	r3, [r4, #16]
 8008fb0:	b94b      	cbnz	r3, 8008fc6 <__swsetup_r+0x7a>
 8008fb2:	89a3      	ldrh	r3, [r4, #12]
 8008fb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008fb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fbc:	d003      	beq.n	8008fc6 <__swsetup_r+0x7a>
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	f001 fee3 	bl	800ad8c <__smakebuf_r>
 8008fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fca:	f013 0201 	ands.w	r2, r3, #1
 8008fce:	d00a      	beq.n	8008fe6 <__swsetup_r+0x9a>
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	60a2      	str	r2, [r4, #8]
 8008fd4:	6962      	ldr	r2, [r4, #20]
 8008fd6:	4252      	negs	r2, r2
 8008fd8:	61a2      	str	r2, [r4, #24]
 8008fda:	6922      	ldr	r2, [r4, #16]
 8008fdc:	b942      	cbnz	r2, 8008ff0 <__swsetup_r+0xa4>
 8008fde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008fe2:	d1c5      	bne.n	8008f70 <__swsetup_r+0x24>
 8008fe4:	bd38      	pop	{r3, r4, r5, pc}
 8008fe6:	0799      	lsls	r1, r3, #30
 8008fe8:	bf58      	it	pl
 8008fea:	6962      	ldrpl	r2, [r4, #20]
 8008fec:	60a2      	str	r2, [r4, #8]
 8008fee:	e7f4      	b.n	8008fda <__swsetup_r+0x8e>
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	e7f7      	b.n	8008fe4 <__swsetup_r+0x98>
 8008ff4:	20000028 	.word	0x20000028

08008ff8 <memset>:
 8008ff8:	4402      	add	r2, r0
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d100      	bne.n	8009002 <memset+0xa>
 8009000:	4770      	bx	lr
 8009002:	f803 1b01 	strb.w	r1, [r3], #1
 8009006:	e7f9      	b.n	8008ffc <memset+0x4>

08009008 <_localeconv_r>:
 8009008:	4800      	ldr	r0, [pc, #0]	@ (800900c <_localeconv_r+0x4>)
 800900a:	4770      	bx	lr
 800900c:	20000168 	.word	0x20000168

08009010 <_close_r>:
 8009010:	b538      	push	{r3, r4, r5, lr}
 8009012:	4d06      	ldr	r5, [pc, #24]	@ (800902c <_close_r+0x1c>)
 8009014:	2300      	movs	r3, #0
 8009016:	4604      	mov	r4, r0
 8009018:	4608      	mov	r0, r1
 800901a:	602b      	str	r3, [r5, #0]
 800901c:	f7f9 f8ea 	bl	80021f4 <_close>
 8009020:	1c43      	adds	r3, r0, #1
 8009022:	d102      	bne.n	800902a <_close_r+0x1a>
 8009024:	682b      	ldr	r3, [r5, #0]
 8009026:	b103      	cbz	r3, 800902a <_close_r+0x1a>
 8009028:	6023      	str	r3, [r4, #0]
 800902a:	bd38      	pop	{r3, r4, r5, pc}
 800902c:	20013314 	.word	0x20013314

08009030 <_lseek_r>:
 8009030:	b538      	push	{r3, r4, r5, lr}
 8009032:	4d07      	ldr	r5, [pc, #28]	@ (8009050 <_lseek_r+0x20>)
 8009034:	4604      	mov	r4, r0
 8009036:	4608      	mov	r0, r1
 8009038:	4611      	mov	r1, r2
 800903a:	2200      	movs	r2, #0
 800903c:	602a      	str	r2, [r5, #0]
 800903e:	461a      	mov	r2, r3
 8009040:	f7f9 f8ff 	bl	8002242 <_lseek>
 8009044:	1c43      	adds	r3, r0, #1
 8009046:	d102      	bne.n	800904e <_lseek_r+0x1e>
 8009048:	682b      	ldr	r3, [r5, #0]
 800904a:	b103      	cbz	r3, 800904e <_lseek_r+0x1e>
 800904c:	6023      	str	r3, [r4, #0]
 800904e:	bd38      	pop	{r3, r4, r5, pc}
 8009050:	20013314 	.word	0x20013314

08009054 <_read_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	4d07      	ldr	r5, [pc, #28]	@ (8009074 <_read_r+0x20>)
 8009058:	4604      	mov	r4, r0
 800905a:	4608      	mov	r0, r1
 800905c:	4611      	mov	r1, r2
 800905e:	2200      	movs	r2, #0
 8009060:	602a      	str	r2, [r5, #0]
 8009062:	461a      	mov	r2, r3
 8009064:	f7f9 f88d 	bl	8002182 <_read>
 8009068:	1c43      	adds	r3, r0, #1
 800906a:	d102      	bne.n	8009072 <_read_r+0x1e>
 800906c:	682b      	ldr	r3, [r5, #0]
 800906e:	b103      	cbz	r3, 8009072 <_read_r+0x1e>
 8009070:	6023      	str	r3, [r4, #0]
 8009072:	bd38      	pop	{r3, r4, r5, pc}
 8009074:	20013314 	.word	0x20013314

08009078 <_write_r>:
 8009078:	b538      	push	{r3, r4, r5, lr}
 800907a:	4d07      	ldr	r5, [pc, #28]	@ (8009098 <_write_r+0x20>)
 800907c:	4604      	mov	r4, r0
 800907e:	4608      	mov	r0, r1
 8009080:	4611      	mov	r1, r2
 8009082:	2200      	movs	r2, #0
 8009084:	602a      	str	r2, [r5, #0]
 8009086:	461a      	mov	r2, r3
 8009088:	f7f9 f898 	bl	80021bc <_write>
 800908c:	1c43      	adds	r3, r0, #1
 800908e:	d102      	bne.n	8009096 <_write_r+0x1e>
 8009090:	682b      	ldr	r3, [r5, #0]
 8009092:	b103      	cbz	r3, 8009096 <_write_r+0x1e>
 8009094:	6023      	str	r3, [r4, #0]
 8009096:	bd38      	pop	{r3, r4, r5, pc}
 8009098:	20013314 	.word	0x20013314

0800909c <__errno>:
 800909c:	4b01      	ldr	r3, [pc, #4]	@ (80090a4 <__errno+0x8>)
 800909e:	6818      	ldr	r0, [r3, #0]
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	20000028 	.word	0x20000028

080090a8 <__libc_init_array>:
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	4d0d      	ldr	r5, [pc, #52]	@ (80090e0 <__libc_init_array+0x38>)
 80090ac:	4c0d      	ldr	r4, [pc, #52]	@ (80090e4 <__libc_init_array+0x3c>)
 80090ae:	1b64      	subs	r4, r4, r5
 80090b0:	10a4      	asrs	r4, r4, #2
 80090b2:	2600      	movs	r6, #0
 80090b4:	42a6      	cmp	r6, r4
 80090b6:	d109      	bne.n	80090cc <__libc_init_array+0x24>
 80090b8:	4d0b      	ldr	r5, [pc, #44]	@ (80090e8 <__libc_init_array+0x40>)
 80090ba:	4c0c      	ldr	r4, [pc, #48]	@ (80090ec <__libc_init_array+0x44>)
 80090bc:	f003 f906 	bl	800c2cc <_init>
 80090c0:	1b64      	subs	r4, r4, r5
 80090c2:	10a4      	asrs	r4, r4, #2
 80090c4:	2600      	movs	r6, #0
 80090c6:	42a6      	cmp	r6, r4
 80090c8:	d105      	bne.n	80090d6 <__libc_init_array+0x2e>
 80090ca:	bd70      	pop	{r4, r5, r6, pc}
 80090cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80090d0:	4798      	blx	r3
 80090d2:	3601      	adds	r6, #1
 80090d4:	e7ee      	b.n	80090b4 <__libc_init_array+0xc>
 80090d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80090da:	4798      	blx	r3
 80090dc:	3601      	adds	r6, #1
 80090de:	e7f2      	b.n	80090c6 <__libc_init_array+0x1e>
 80090e0:	0800c858 	.word	0x0800c858
 80090e4:	0800c858 	.word	0x0800c858
 80090e8:	0800c858 	.word	0x0800c858
 80090ec:	0800c85c 	.word	0x0800c85c

080090f0 <__retarget_lock_init_recursive>:
 80090f0:	4770      	bx	lr

080090f2 <__retarget_lock_acquire_recursive>:
 80090f2:	4770      	bx	lr

080090f4 <__retarget_lock_release_recursive>:
 80090f4:	4770      	bx	lr

080090f6 <memcpy>:
 80090f6:	440a      	add	r2, r1
 80090f8:	4291      	cmp	r1, r2
 80090fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80090fe:	d100      	bne.n	8009102 <memcpy+0xc>
 8009100:	4770      	bx	lr
 8009102:	b510      	push	{r4, lr}
 8009104:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009108:	f803 4f01 	strb.w	r4, [r3, #1]!
 800910c:	4291      	cmp	r1, r2
 800910e:	d1f9      	bne.n	8009104 <memcpy+0xe>
 8009110:	bd10      	pop	{r4, pc}

08009112 <quorem>:
 8009112:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009116:	6903      	ldr	r3, [r0, #16]
 8009118:	690c      	ldr	r4, [r1, #16]
 800911a:	42a3      	cmp	r3, r4
 800911c:	4607      	mov	r7, r0
 800911e:	db7e      	blt.n	800921e <quorem+0x10c>
 8009120:	3c01      	subs	r4, #1
 8009122:	f101 0814 	add.w	r8, r1, #20
 8009126:	00a3      	lsls	r3, r4, #2
 8009128:	f100 0514 	add.w	r5, r0, #20
 800912c:	9300      	str	r3, [sp, #0]
 800912e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009132:	9301      	str	r3, [sp, #4]
 8009134:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009138:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800913c:	3301      	adds	r3, #1
 800913e:	429a      	cmp	r2, r3
 8009140:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009144:	fbb2 f6f3 	udiv	r6, r2, r3
 8009148:	d32e      	bcc.n	80091a8 <quorem+0x96>
 800914a:	f04f 0a00 	mov.w	sl, #0
 800914e:	46c4      	mov	ip, r8
 8009150:	46ae      	mov	lr, r5
 8009152:	46d3      	mov	fp, sl
 8009154:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009158:	b298      	uxth	r0, r3
 800915a:	fb06 a000 	mla	r0, r6, r0, sl
 800915e:	0c02      	lsrs	r2, r0, #16
 8009160:	0c1b      	lsrs	r3, r3, #16
 8009162:	fb06 2303 	mla	r3, r6, r3, r2
 8009166:	f8de 2000 	ldr.w	r2, [lr]
 800916a:	b280      	uxth	r0, r0
 800916c:	b292      	uxth	r2, r2
 800916e:	1a12      	subs	r2, r2, r0
 8009170:	445a      	add	r2, fp
 8009172:	f8de 0000 	ldr.w	r0, [lr]
 8009176:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800917a:	b29b      	uxth	r3, r3
 800917c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009180:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009184:	b292      	uxth	r2, r2
 8009186:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800918a:	45e1      	cmp	r9, ip
 800918c:	f84e 2b04 	str.w	r2, [lr], #4
 8009190:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009194:	d2de      	bcs.n	8009154 <quorem+0x42>
 8009196:	9b00      	ldr	r3, [sp, #0]
 8009198:	58eb      	ldr	r3, [r5, r3]
 800919a:	b92b      	cbnz	r3, 80091a8 <quorem+0x96>
 800919c:	9b01      	ldr	r3, [sp, #4]
 800919e:	3b04      	subs	r3, #4
 80091a0:	429d      	cmp	r5, r3
 80091a2:	461a      	mov	r2, r3
 80091a4:	d32f      	bcc.n	8009206 <quorem+0xf4>
 80091a6:	613c      	str	r4, [r7, #16]
 80091a8:	4638      	mov	r0, r7
 80091aa:	f001 f97b 	bl	800a4a4 <__mcmp>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	db25      	blt.n	80091fe <quorem+0xec>
 80091b2:	4629      	mov	r1, r5
 80091b4:	2000      	movs	r0, #0
 80091b6:	f858 2b04 	ldr.w	r2, [r8], #4
 80091ba:	f8d1 c000 	ldr.w	ip, [r1]
 80091be:	fa1f fe82 	uxth.w	lr, r2
 80091c2:	fa1f f38c 	uxth.w	r3, ip
 80091c6:	eba3 030e 	sub.w	r3, r3, lr
 80091ca:	4403      	add	r3, r0
 80091cc:	0c12      	lsrs	r2, r2, #16
 80091ce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80091d2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091dc:	45c1      	cmp	r9, r8
 80091de:	f841 3b04 	str.w	r3, [r1], #4
 80091e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80091e6:	d2e6      	bcs.n	80091b6 <quorem+0xa4>
 80091e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091f0:	b922      	cbnz	r2, 80091fc <quorem+0xea>
 80091f2:	3b04      	subs	r3, #4
 80091f4:	429d      	cmp	r5, r3
 80091f6:	461a      	mov	r2, r3
 80091f8:	d30b      	bcc.n	8009212 <quorem+0x100>
 80091fa:	613c      	str	r4, [r7, #16]
 80091fc:	3601      	adds	r6, #1
 80091fe:	4630      	mov	r0, r6
 8009200:	b003      	add	sp, #12
 8009202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009206:	6812      	ldr	r2, [r2, #0]
 8009208:	3b04      	subs	r3, #4
 800920a:	2a00      	cmp	r2, #0
 800920c:	d1cb      	bne.n	80091a6 <quorem+0x94>
 800920e:	3c01      	subs	r4, #1
 8009210:	e7c6      	b.n	80091a0 <quorem+0x8e>
 8009212:	6812      	ldr	r2, [r2, #0]
 8009214:	3b04      	subs	r3, #4
 8009216:	2a00      	cmp	r2, #0
 8009218:	d1ef      	bne.n	80091fa <quorem+0xe8>
 800921a:	3c01      	subs	r4, #1
 800921c:	e7ea      	b.n	80091f4 <quorem+0xe2>
 800921e:	2000      	movs	r0, #0
 8009220:	e7ee      	b.n	8009200 <quorem+0xee>
 8009222:	0000      	movs	r0, r0
 8009224:	0000      	movs	r0, r0
	...

08009228 <_dtoa_r>:
 8009228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800922c:	69c7      	ldr	r7, [r0, #28]
 800922e:	b099      	sub	sp, #100	@ 0x64
 8009230:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009234:	ec55 4b10 	vmov	r4, r5, d0
 8009238:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800923a:	9109      	str	r1, [sp, #36]	@ 0x24
 800923c:	4683      	mov	fp, r0
 800923e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009240:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009242:	b97f      	cbnz	r7, 8009264 <_dtoa_r+0x3c>
 8009244:	2010      	movs	r0, #16
 8009246:	f000 fdfd 	bl	8009e44 <malloc>
 800924a:	4602      	mov	r2, r0
 800924c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009250:	b920      	cbnz	r0, 800925c <_dtoa_r+0x34>
 8009252:	4ba7      	ldr	r3, [pc, #668]	@ (80094f0 <_dtoa_r+0x2c8>)
 8009254:	21ef      	movs	r1, #239	@ 0xef
 8009256:	48a7      	ldr	r0, [pc, #668]	@ (80094f4 <_dtoa_r+0x2cc>)
 8009258:	f001 fe20 	bl	800ae9c <__assert_func>
 800925c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009260:	6007      	str	r7, [r0, #0]
 8009262:	60c7      	str	r7, [r0, #12]
 8009264:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009268:	6819      	ldr	r1, [r3, #0]
 800926a:	b159      	cbz	r1, 8009284 <_dtoa_r+0x5c>
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	604a      	str	r2, [r1, #4]
 8009270:	2301      	movs	r3, #1
 8009272:	4093      	lsls	r3, r2
 8009274:	608b      	str	r3, [r1, #8]
 8009276:	4658      	mov	r0, fp
 8009278:	f000 feda 	bl	800a030 <_Bfree>
 800927c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009280:	2200      	movs	r2, #0
 8009282:	601a      	str	r2, [r3, #0]
 8009284:	1e2b      	subs	r3, r5, #0
 8009286:	bfb9      	ittee	lt
 8009288:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800928c:	9303      	strlt	r3, [sp, #12]
 800928e:	2300      	movge	r3, #0
 8009290:	6033      	strge	r3, [r6, #0]
 8009292:	9f03      	ldr	r7, [sp, #12]
 8009294:	4b98      	ldr	r3, [pc, #608]	@ (80094f8 <_dtoa_r+0x2d0>)
 8009296:	bfbc      	itt	lt
 8009298:	2201      	movlt	r2, #1
 800929a:	6032      	strlt	r2, [r6, #0]
 800929c:	43bb      	bics	r3, r7
 800929e:	d112      	bne.n	80092c6 <_dtoa_r+0x9e>
 80092a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80092a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80092a6:	6013      	str	r3, [r2, #0]
 80092a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80092ac:	4323      	orrs	r3, r4
 80092ae:	f000 854d 	beq.w	8009d4c <_dtoa_r+0xb24>
 80092b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80092b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800950c <_dtoa_r+0x2e4>
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f000 854f 	beq.w	8009d5c <_dtoa_r+0xb34>
 80092be:	f10a 0303 	add.w	r3, sl, #3
 80092c2:	f000 bd49 	b.w	8009d58 <_dtoa_r+0xb30>
 80092c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80092ca:	2200      	movs	r2, #0
 80092cc:	ec51 0b17 	vmov	r0, r1, d7
 80092d0:	2300      	movs	r3, #0
 80092d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80092d6:	f7f7 fc17 	bl	8000b08 <__aeabi_dcmpeq>
 80092da:	4680      	mov	r8, r0
 80092dc:	b158      	cbz	r0, 80092f6 <_dtoa_r+0xce>
 80092de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80092e0:	2301      	movs	r3, #1
 80092e2:	6013      	str	r3, [r2, #0]
 80092e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80092e6:	b113      	cbz	r3, 80092ee <_dtoa_r+0xc6>
 80092e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80092ea:	4b84      	ldr	r3, [pc, #528]	@ (80094fc <_dtoa_r+0x2d4>)
 80092ec:	6013      	str	r3, [r2, #0]
 80092ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009510 <_dtoa_r+0x2e8>
 80092f2:	f000 bd33 	b.w	8009d5c <_dtoa_r+0xb34>
 80092f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80092fa:	aa16      	add	r2, sp, #88	@ 0x58
 80092fc:	a917      	add	r1, sp, #92	@ 0x5c
 80092fe:	4658      	mov	r0, fp
 8009300:	f001 f980 	bl	800a604 <__d2b>
 8009304:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009308:	4681      	mov	r9, r0
 800930a:	2e00      	cmp	r6, #0
 800930c:	d077      	beq.n	80093fe <_dtoa_r+0x1d6>
 800930e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009310:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009314:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009318:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800931c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009320:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009324:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009328:	4619      	mov	r1, r3
 800932a:	2200      	movs	r2, #0
 800932c:	4b74      	ldr	r3, [pc, #464]	@ (8009500 <_dtoa_r+0x2d8>)
 800932e:	f7f6 ffcb 	bl	80002c8 <__aeabi_dsub>
 8009332:	a369      	add	r3, pc, #420	@ (adr r3, 80094d8 <_dtoa_r+0x2b0>)
 8009334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009338:	f7f7 f97e 	bl	8000638 <__aeabi_dmul>
 800933c:	a368      	add	r3, pc, #416	@ (adr r3, 80094e0 <_dtoa_r+0x2b8>)
 800933e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009342:	f7f6 ffc3 	bl	80002cc <__adddf3>
 8009346:	4604      	mov	r4, r0
 8009348:	4630      	mov	r0, r6
 800934a:	460d      	mov	r5, r1
 800934c:	f7f7 f90a 	bl	8000564 <__aeabi_i2d>
 8009350:	a365      	add	r3, pc, #404	@ (adr r3, 80094e8 <_dtoa_r+0x2c0>)
 8009352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009356:	f7f7 f96f 	bl	8000638 <__aeabi_dmul>
 800935a:	4602      	mov	r2, r0
 800935c:	460b      	mov	r3, r1
 800935e:	4620      	mov	r0, r4
 8009360:	4629      	mov	r1, r5
 8009362:	f7f6 ffb3 	bl	80002cc <__adddf3>
 8009366:	4604      	mov	r4, r0
 8009368:	460d      	mov	r5, r1
 800936a:	f7f7 fc15 	bl	8000b98 <__aeabi_d2iz>
 800936e:	2200      	movs	r2, #0
 8009370:	4607      	mov	r7, r0
 8009372:	2300      	movs	r3, #0
 8009374:	4620      	mov	r0, r4
 8009376:	4629      	mov	r1, r5
 8009378:	f7f7 fbd0 	bl	8000b1c <__aeabi_dcmplt>
 800937c:	b140      	cbz	r0, 8009390 <_dtoa_r+0x168>
 800937e:	4638      	mov	r0, r7
 8009380:	f7f7 f8f0 	bl	8000564 <__aeabi_i2d>
 8009384:	4622      	mov	r2, r4
 8009386:	462b      	mov	r3, r5
 8009388:	f7f7 fbbe 	bl	8000b08 <__aeabi_dcmpeq>
 800938c:	b900      	cbnz	r0, 8009390 <_dtoa_r+0x168>
 800938e:	3f01      	subs	r7, #1
 8009390:	2f16      	cmp	r7, #22
 8009392:	d851      	bhi.n	8009438 <_dtoa_r+0x210>
 8009394:	4b5b      	ldr	r3, [pc, #364]	@ (8009504 <_dtoa_r+0x2dc>)
 8009396:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800939a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093a2:	f7f7 fbbb 	bl	8000b1c <__aeabi_dcmplt>
 80093a6:	2800      	cmp	r0, #0
 80093a8:	d048      	beq.n	800943c <_dtoa_r+0x214>
 80093aa:	3f01      	subs	r7, #1
 80093ac:	2300      	movs	r3, #0
 80093ae:	9312      	str	r3, [sp, #72]	@ 0x48
 80093b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80093b2:	1b9b      	subs	r3, r3, r6
 80093b4:	1e5a      	subs	r2, r3, #1
 80093b6:	bf44      	itt	mi
 80093b8:	f1c3 0801 	rsbmi	r8, r3, #1
 80093bc:	2300      	movmi	r3, #0
 80093be:	9208      	str	r2, [sp, #32]
 80093c0:	bf54      	ite	pl
 80093c2:	f04f 0800 	movpl.w	r8, #0
 80093c6:	9308      	strmi	r3, [sp, #32]
 80093c8:	2f00      	cmp	r7, #0
 80093ca:	db39      	blt.n	8009440 <_dtoa_r+0x218>
 80093cc:	9b08      	ldr	r3, [sp, #32]
 80093ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 80093d0:	443b      	add	r3, r7
 80093d2:	9308      	str	r3, [sp, #32]
 80093d4:	2300      	movs	r3, #0
 80093d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80093d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093da:	2b09      	cmp	r3, #9
 80093dc:	d864      	bhi.n	80094a8 <_dtoa_r+0x280>
 80093de:	2b05      	cmp	r3, #5
 80093e0:	bfc4      	itt	gt
 80093e2:	3b04      	subgt	r3, #4
 80093e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80093e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093e8:	f1a3 0302 	sub.w	r3, r3, #2
 80093ec:	bfcc      	ite	gt
 80093ee:	2400      	movgt	r4, #0
 80093f0:	2401      	movle	r4, #1
 80093f2:	2b03      	cmp	r3, #3
 80093f4:	d863      	bhi.n	80094be <_dtoa_r+0x296>
 80093f6:	e8df f003 	tbb	[pc, r3]
 80093fa:	372a      	.short	0x372a
 80093fc:	5535      	.short	0x5535
 80093fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009402:	441e      	add	r6, r3
 8009404:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009408:	2b20      	cmp	r3, #32
 800940a:	bfc1      	itttt	gt
 800940c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009410:	409f      	lslgt	r7, r3
 8009412:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009416:	fa24 f303 	lsrgt.w	r3, r4, r3
 800941a:	bfd6      	itet	le
 800941c:	f1c3 0320 	rsble	r3, r3, #32
 8009420:	ea47 0003 	orrgt.w	r0, r7, r3
 8009424:	fa04 f003 	lslle.w	r0, r4, r3
 8009428:	f7f7 f88c 	bl	8000544 <__aeabi_ui2d>
 800942c:	2201      	movs	r2, #1
 800942e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009432:	3e01      	subs	r6, #1
 8009434:	9214      	str	r2, [sp, #80]	@ 0x50
 8009436:	e777      	b.n	8009328 <_dtoa_r+0x100>
 8009438:	2301      	movs	r3, #1
 800943a:	e7b8      	b.n	80093ae <_dtoa_r+0x186>
 800943c:	9012      	str	r0, [sp, #72]	@ 0x48
 800943e:	e7b7      	b.n	80093b0 <_dtoa_r+0x188>
 8009440:	427b      	negs	r3, r7
 8009442:	930a      	str	r3, [sp, #40]	@ 0x28
 8009444:	2300      	movs	r3, #0
 8009446:	eba8 0807 	sub.w	r8, r8, r7
 800944a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800944c:	e7c4      	b.n	80093d8 <_dtoa_r+0x1b0>
 800944e:	2300      	movs	r3, #0
 8009450:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009452:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009454:	2b00      	cmp	r3, #0
 8009456:	dc35      	bgt.n	80094c4 <_dtoa_r+0x29c>
 8009458:	2301      	movs	r3, #1
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	9307      	str	r3, [sp, #28]
 800945e:	461a      	mov	r2, r3
 8009460:	920e      	str	r2, [sp, #56]	@ 0x38
 8009462:	e00b      	b.n	800947c <_dtoa_r+0x254>
 8009464:	2301      	movs	r3, #1
 8009466:	e7f3      	b.n	8009450 <_dtoa_r+0x228>
 8009468:	2300      	movs	r3, #0
 800946a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800946c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800946e:	18fb      	adds	r3, r7, r3
 8009470:	9300      	str	r3, [sp, #0]
 8009472:	3301      	adds	r3, #1
 8009474:	2b01      	cmp	r3, #1
 8009476:	9307      	str	r3, [sp, #28]
 8009478:	bfb8      	it	lt
 800947a:	2301      	movlt	r3, #1
 800947c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009480:	2100      	movs	r1, #0
 8009482:	2204      	movs	r2, #4
 8009484:	f102 0514 	add.w	r5, r2, #20
 8009488:	429d      	cmp	r5, r3
 800948a:	d91f      	bls.n	80094cc <_dtoa_r+0x2a4>
 800948c:	6041      	str	r1, [r0, #4]
 800948e:	4658      	mov	r0, fp
 8009490:	f000 fd8e 	bl	8009fb0 <_Balloc>
 8009494:	4682      	mov	sl, r0
 8009496:	2800      	cmp	r0, #0
 8009498:	d13c      	bne.n	8009514 <_dtoa_r+0x2ec>
 800949a:	4b1b      	ldr	r3, [pc, #108]	@ (8009508 <_dtoa_r+0x2e0>)
 800949c:	4602      	mov	r2, r0
 800949e:	f240 11af 	movw	r1, #431	@ 0x1af
 80094a2:	e6d8      	b.n	8009256 <_dtoa_r+0x2e>
 80094a4:	2301      	movs	r3, #1
 80094a6:	e7e0      	b.n	800946a <_dtoa_r+0x242>
 80094a8:	2401      	movs	r4, #1
 80094aa:	2300      	movs	r3, #0
 80094ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80094ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 80094b0:	f04f 33ff 	mov.w	r3, #4294967295
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	9307      	str	r3, [sp, #28]
 80094b8:	2200      	movs	r2, #0
 80094ba:	2312      	movs	r3, #18
 80094bc:	e7d0      	b.n	8009460 <_dtoa_r+0x238>
 80094be:	2301      	movs	r3, #1
 80094c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094c2:	e7f5      	b.n	80094b0 <_dtoa_r+0x288>
 80094c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	9307      	str	r3, [sp, #28]
 80094ca:	e7d7      	b.n	800947c <_dtoa_r+0x254>
 80094cc:	3101      	adds	r1, #1
 80094ce:	0052      	lsls	r2, r2, #1
 80094d0:	e7d8      	b.n	8009484 <_dtoa_r+0x25c>
 80094d2:	bf00      	nop
 80094d4:	f3af 8000 	nop.w
 80094d8:	636f4361 	.word	0x636f4361
 80094dc:	3fd287a7 	.word	0x3fd287a7
 80094e0:	8b60c8b3 	.word	0x8b60c8b3
 80094e4:	3fc68a28 	.word	0x3fc68a28
 80094e8:	509f79fb 	.word	0x509f79fb
 80094ec:	3fd34413 	.word	0x3fd34413
 80094f0:	0800c4b1 	.word	0x0800c4b1
 80094f4:	0800c4c8 	.word	0x0800c4c8
 80094f8:	7ff00000 	.word	0x7ff00000
 80094fc:	0800c481 	.word	0x0800c481
 8009500:	3ff80000 	.word	0x3ff80000
 8009504:	0800c5c0 	.word	0x0800c5c0
 8009508:	0800c520 	.word	0x0800c520
 800950c:	0800c4ad 	.word	0x0800c4ad
 8009510:	0800c480 	.word	0x0800c480
 8009514:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009518:	6018      	str	r0, [r3, #0]
 800951a:	9b07      	ldr	r3, [sp, #28]
 800951c:	2b0e      	cmp	r3, #14
 800951e:	f200 80a4 	bhi.w	800966a <_dtoa_r+0x442>
 8009522:	2c00      	cmp	r4, #0
 8009524:	f000 80a1 	beq.w	800966a <_dtoa_r+0x442>
 8009528:	2f00      	cmp	r7, #0
 800952a:	dd33      	ble.n	8009594 <_dtoa_r+0x36c>
 800952c:	4bad      	ldr	r3, [pc, #692]	@ (80097e4 <_dtoa_r+0x5bc>)
 800952e:	f007 020f 	and.w	r2, r7, #15
 8009532:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009536:	ed93 7b00 	vldr	d7, [r3]
 800953a:	05f8      	lsls	r0, r7, #23
 800953c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009540:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009544:	d516      	bpl.n	8009574 <_dtoa_r+0x34c>
 8009546:	4ba8      	ldr	r3, [pc, #672]	@ (80097e8 <_dtoa_r+0x5c0>)
 8009548:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800954c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009550:	f7f7 f99c 	bl	800088c <__aeabi_ddiv>
 8009554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009558:	f004 040f 	and.w	r4, r4, #15
 800955c:	2603      	movs	r6, #3
 800955e:	4da2      	ldr	r5, [pc, #648]	@ (80097e8 <_dtoa_r+0x5c0>)
 8009560:	b954      	cbnz	r4, 8009578 <_dtoa_r+0x350>
 8009562:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009566:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800956a:	f7f7 f98f 	bl	800088c <__aeabi_ddiv>
 800956e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009572:	e028      	b.n	80095c6 <_dtoa_r+0x39e>
 8009574:	2602      	movs	r6, #2
 8009576:	e7f2      	b.n	800955e <_dtoa_r+0x336>
 8009578:	07e1      	lsls	r1, r4, #31
 800957a:	d508      	bpl.n	800958e <_dtoa_r+0x366>
 800957c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009580:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009584:	f7f7 f858 	bl	8000638 <__aeabi_dmul>
 8009588:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800958c:	3601      	adds	r6, #1
 800958e:	1064      	asrs	r4, r4, #1
 8009590:	3508      	adds	r5, #8
 8009592:	e7e5      	b.n	8009560 <_dtoa_r+0x338>
 8009594:	f000 80d2 	beq.w	800973c <_dtoa_r+0x514>
 8009598:	427c      	negs	r4, r7
 800959a:	4b92      	ldr	r3, [pc, #584]	@ (80097e4 <_dtoa_r+0x5bc>)
 800959c:	4d92      	ldr	r5, [pc, #584]	@ (80097e8 <_dtoa_r+0x5c0>)
 800959e:	f004 020f 	and.w	r2, r4, #15
 80095a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095ae:	f7f7 f843 	bl	8000638 <__aeabi_dmul>
 80095b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095b6:	1124      	asrs	r4, r4, #4
 80095b8:	2300      	movs	r3, #0
 80095ba:	2602      	movs	r6, #2
 80095bc:	2c00      	cmp	r4, #0
 80095be:	f040 80b2 	bne.w	8009726 <_dtoa_r+0x4fe>
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d1d3      	bne.n	800956e <_dtoa_r+0x346>
 80095c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80095c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f000 80b7 	beq.w	8009740 <_dtoa_r+0x518>
 80095d2:	4b86      	ldr	r3, [pc, #536]	@ (80097ec <_dtoa_r+0x5c4>)
 80095d4:	2200      	movs	r2, #0
 80095d6:	4620      	mov	r0, r4
 80095d8:	4629      	mov	r1, r5
 80095da:	f7f7 fa9f 	bl	8000b1c <__aeabi_dcmplt>
 80095de:	2800      	cmp	r0, #0
 80095e0:	f000 80ae 	beq.w	8009740 <_dtoa_r+0x518>
 80095e4:	9b07      	ldr	r3, [sp, #28]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f000 80aa 	beq.w	8009740 <_dtoa_r+0x518>
 80095ec:	9b00      	ldr	r3, [sp, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	dd37      	ble.n	8009662 <_dtoa_r+0x43a>
 80095f2:	1e7b      	subs	r3, r7, #1
 80095f4:	9304      	str	r3, [sp, #16]
 80095f6:	4620      	mov	r0, r4
 80095f8:	4b7d      	ldr	r3, [pc, #500]	@ (80097f0 <_dtoa_r+0x5c8>)
 80095fa:	2200      	movs	r2, #0
 80095fc:	4629      	mov	r1, r5
 80095fe:	f7f7 f81b 	bl	8000638 <__aeabi_dmul>
 8009602:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009606:	9c00      	ldr	r4, [sp, #0]
 8009608:	3601      	adds	r6, #1
 800960a:	4630      	mov	r0, r6
 800960c:	f7f6 ffaa 	bl	8000564 <__aeabi_i2d>
 8009610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009614:	f7f7 f810 	bl	8000638 <__aeabi_dmul>
 8009618:	4b76      	ldr	r3, [pc, #472]	@ (80097f4 <_dtoa_r+0x5cc>)
 800961a:	2200      	movs	r2, #0
 800961c:	f7f6 fe56 	bl	80002cc <__adddf3>
 8009620:	4605      	mov	r5, r0
 8009622:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009626:	2c00      	cmp	r4, #0
 8009628:	f040 808d 	bne.w	8009746 <_dtoa_r+0x51e>
 800962c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009630:	4b71      	ldr	r3, [pc, #452]	@ (80097f8 <_dtoa_r+0x5d0>)
 8009632:	2200      	movs	r2, #0
 8009634:	f7f6 fe48 	bl	80002c8 <__aeabi_dsub>
 8009638:	4602      	mov	r2, r0
 800963a:	460b      	mov	r3, r1
 800963c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009640:	462a      	mov	r2, r5
 8009642:	4633      	mov	r3, r6
 8009644:	f7f7 fa88 	bl	8000b58 <__aeabi_dcmpgt>
 8009648:	2800      	cmp	r0, #0
 800964a:	f040 828b 	bne.w	8009b64 <_dtoa_r+0x93c>
 800964e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009652:	462a      	mov	r2, r5
 8009654:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009658:	f7f7 fa60 	bl	8000b1c <__aeabi_dcmplt>
 800965c:	2800      	cmp	r0, #0
 800965e:	f040 8128 	bne.w	80098b2 <_dtoa_r+0x68a>
 8009662:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009666:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800966a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800966c:	2b00      	cmp	r3, #0
 800966e:	f2c0 815a 	blt.w	8009926 <_dtoa_r+0x6fe>
 8009672:	2f0e      	cmp	r7, #14
 8009674:	f300 8157 	bgt.w	8009926 <_dtoa_r+0x6fe>
 8009678:	4b5a      	ldr	r3, [pc, #360]	@ (80097e4 <_dtoa_r+0x5bc>)
 800967a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800967e:	ed93 7b00 	vldr	d7, [r3]
 8009682:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009684:	2b00      	cmp	r3, #0
 8009686:	ed8d 7b00 	vstr	d7, [sp]
 800968a:	da03      	bge.n	8009694 <_dtoa_r+0x46c>
 800968c:	9b07      	ldr	r3, [sp, #28]
 800968e:	2b00      	cmp	r3, #0
 8009690:	f340 8101 	ble.w	8009896 <_dtoa_r+0x66e>
 8009694:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009698:	4656      	mov	r6, sl
 800969a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800969e:	4620      	mov	r0, r4
 80096a0:	4629      	mov	r1, r5
 80096a2:	f7f7 f8f3 	bl	800088c <__aeabi_ddiv>
 80096a6:	f7f7 fa77 	bl	8000b98 <__aeabi_d2iz>
 80096aa:	4680      	mov	r8, r0
 80096ac:	f7f6 ff5a 	bl	8000564 <__aeabi_i2d>
 80096b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096b4:	f7f6 ffc0 	bl	8000638 <__aeabi_dmul>
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	4620      	mov	r0, r4
 80096be:	4629      	mov	r1, r5
 80096c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80096c4:	f7f6 fe00 	bl	80002c8 <__aeabi_dsub>
 80096c8:	f806 4b01 	strb.w	r4, [r6], #1
 80096cc:	9d07      	ldr	r5, [sp, #28]
 80096ce:	eba6 040a 	sub.w	r4, r6, sl
 80096d2:	42a5      	cmp	r5, r4
 80096d4:	4602      	mov	r2, r0
 80096d6:	460b      	mov	r3, r1
 80096d8:	f040 8117 	bne.w	800990a <_dtoa_r+0x6e2>
 80096dc:	f7f6 fdf6 	bl	80002cc <__adddf3>
 80096e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096e4:	4604      	mov	r4, r0
 80096e6:	460d      	mov	r5, r1
 80096e8:	f7f7 fa36 	bl	8000b58 <__aeabi_dcmpgt>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	f040 80f9 	bne.w	80098e4 <_dtoa_r+0x6bc>
 80096f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096f6:	4620      	mov	r0, r4
 80096f8:	4629      	mov	r1, r5
 80096fa:	f7f7 fa05 	bl	8000b08 <__aeabi_dcmpeq>
 80096fe:	b118      	cbz	r0, 8009708 <_dtoa_r+0x4e0>
 8009700:	f018 0f01 	tst.w	r8, #1
 8009704:	f040 80ee 	bne.w	80098e4 <_dtoa_r+0x6bc>
 8009708:	4649      	mov	r1, r9
 800970a:	4658      	mov	r0, fp
 800970c:	f000 fc90 	bl	800a030 <_Bfree>
 8009710:	2300      	movs	r3, #0
 8009712:	7033      	strb	r3, [r6, #0]
 8009714:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009716:	3701      	adds	r7, #1
 8009718:	601f      	str	r7, [r3, #0]
 800971a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800971c:	2b00      	cmp	r3, #0
 800971e:	f000 831d 	beq.w	8009d5c <_dtoa_r+0xb34>
 8009722:	601e      	str	r6, [r3, #0]
 8009724:	e31a      	b.n	8009d5c <_dtoa_r+0xb34>
 8009726:	07e2      	lsls	r2, r4, #31
 8009728:	d505      	bpl.n	8009736 <_dtoa_r+0x50e>
 800972a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800972e:	f7f6 ff83 	bl	8000638 <__aeabi_dmul>
 8009732:	3601      	adds	r6, #1
 8009734:	2301      	movs	r3, #1
 8009736:	1064      	asrs	r4, r4, #1
 8009738:	3508      	adds	r5, #8
 800973a:	e73f      	b.n	80095bc <_dtoa_r+0x394>
 800973c:	2602      	movs	r6, #2
 800973e:	e742      	b.n	80095c6 <_dtoa_r+0x39e>
 8009740:	9c07      	ldr	r4, [sp, #28]
 8009742:	9704      	str	r7, [sp, #16]
 8009744:	e761      	b.n	800960a <_dtoa_r+0x3e2>
 8009746:	4b27      	ldr	r3, [pc, #156]	@ (80097e4 <_dtoa_r+0x5bc>)
 8009748:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800974a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800974e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009752:	4454      	add	r4, sl
 8009754:	2900      	cmp	r1, #0
 8009756:	d053      	beq.n	8009800 <_dtoa_r+0x5d8>
 8009758:	4928      	ldr	r1, [pc, #160]	@ (80097fc <_dtoa_r+0x5d4>)
 800975a:	2000      	movs	r0, #0
 800975c:	f7f7 f896 	bl	800088c <__aeabi_ddiv>
 8009760:	4633      	mov	r3, r6
 8009762:	462a      	mov	r2, r5
 8009764:	f7f6 fdb0 	bl	80002c8 <__aeabi_dsub>
 8009768:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800976c:	4656      	mov	r6, sl
 800976e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009772:	f7f7 fa11 	bl	8000b98 <__aeabi_d2iz>
 8009776:	4605      	mov	r5, r0
 8009778:	f7f6 fef4 	bl	8000564 <__aeabi_i2d>
 800977c:	4602      	mov	r2, r0
 800977e:	460b      	mov	r3, r1
 8009780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009784:	f7f6 fda0 	bl	80002c8 <__aeabi_dsub>
 8009788:	3530      	adds	r5, #48	@ 0x30
 800978a:	4602      	mov	r2, r0
 800978c:	460b      	mov	r3, r1
 800978e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009792:	f806 5b01 	strb.w	r5, [r6], #1
 8009796:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800979a:	f7f7 f9bf 	bl	8000b1c <__aeabi_dcmplt>
 800979e:	2800      	cmp	r0, #0
 80097a0:	d171      	bne.n	8009886 <_dtoa_r+0x65e>
 80097a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097a6:	4911      	ldr	r1, [pc, #68]	@ (80097ec <_dtoa_r+0x5c4>)
 80097a8:	2000      	movs	r0, #0
 80097aa:	f7f6 fd8d 	bl	80002c8 <__aeabi_dsub>
 80097ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80097b2:	f7f7 f9b3 	bl	8000b1c <__aeabi_dcmplt>
 80097b6:	2800      	cmp	r0, #0
 80097b8:	f040 8095 	bne.w	80098e6 <_dtoa_r+0x6be>
 80097bc:	42a6      	cmp	r6, r4
 80097be:	f43f af50 	beq.w	8009662 <_dtoa_r+0x43a>
 80097c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80097c6:	4b0a      	ldr	r3, [pc, #40]	@ (80097f0 <_dtoa_r+0x5c8>)
 80097c8:	2200      	movs	r2, #0
 80097ca:	f7f6 ff35 	bl	8000638 <__aeabi_dmul>
 80097ce:	4b08      	ldr	r3, [pc, #32]	@ (80097f0 <_dtoa_r+0x5c8>)
 80097d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80097d4:	2200      	movs	r2, #0
 80097d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097da:	f7f6 ff2d 	bl	8000638 <__aeabi_dmul>
 80097de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097e2:	e7c4      	b.n	800976e <_dtoa_r+0x546>
 80097e4:	0800c5c0 	.word	0x0800c5c0
 80097e8:	0800c598 	.word	0x0800c598
 80097ec:	3ff00000 	.word	0x3ff00000
 80097f0:	40240000 	.word	0x40240000
 80097f4:	401c0000 	.word	0x401c0000
 80097f8:	40140000 	.word	0x40140000
 80097fc:	3fe00000 	.word	0x3fe00000
 8009800:	4631      	mov	r1, r6
 8009802:	4628      	mov	r0, r5
 8009804:	f7f6 ff18 	bl	8000638 <__aeabi_dmul>
 8009808:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800980c:	9415      	str	r4, [sp, #84]	@ 0x54
 800980e:	4656      	mov	r6, sl
 8009810:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009814:	f7f7 f9c0 	bl	8000b98 <__aeabi_d2iz>
 8009818:	4605      	mov	r5, r0
 800981a:	f7f6 fea3 	bl	8000564 <__aeabi_i2d>
 800981e:	4602      	mov	r2, r0
 8009820:	460b      	mov	r3, r1
 8009822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009826:	f7f6 fd4f 	bl	80002c8 <__aeabi_dsub>
 800982a:	3530      	adds	r5, #48	@ 0x30
 800982c:	f806 5b01 	strb.w	r5, [r6], #1
 8009830:	4602      	mov	r2, r0
 8009832:	460b      	mov	r3, r1
 8009834:	42a6      	cmp	r6, r4
 8009836:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800983a:	f04f 0200 	mov.w	r2, #0
 800983e:	d124      	bne.n	800988a <_dtoa_r+0x662>
 8009840:	4bac      	ldr	r3, [pc, #688]	@ (8009af4 <_dtoa_r+0x8cc>)
 8009842:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009846:	f7f6 fd41 	bl	80002cc <__adddf3>
 800984a:	4602      	mov	r2, r0
 800984c:	460b      	mov	r3, r1
 800984e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009852:	f7f7 f981 	bl	8000b58 <__aeabi_dcmpgt>
 8009856:	2800      	cmp	r0, #0
 8009858:	d145      	bne.n	80098e6 <_dtoa_r+0x6be>
 800985a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800985e:	49a5      	ldr	r1, [pc, #660]	@ (8009af4 <_dtoa_r+0x8cc>)
 8009860:	2000      	movs	r0, #0
 8009862:	f7f6 fd31 	bl	80002c8 <__aeabi_dsub>
 8009866:	4602      	mov	r2, r0
 8009868:	460b      	mov	r3, r1
 800986a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800986e:	f7f7 f955 	bl	8000b1c <__aeabi_dcmplt>
 8009872:	2800      	cmp	r0, #0
 8009874:	f43f aef5 	beq.w	8009662 <_dtoa_r+0x43a>
 8009878:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800987a:	1e73      	subs	r3, r6, #1
 800987c:	9315      	str	r3, [sp, #84]	@ 0x54
 800987e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009882:	2b30      	cmp	r3, #48	@ 0x30
 8009884:	d0f8      	beq.n	8009878 <_dtoa_r+0x650>
 8009886:	9f04      	ldr	r7, [sp, #16]
 8009888:	e73e      	b.n	8009708 <_dtoa_r+0x4e0>
 800988a:	4b9b      	ldr	r3, [pc, #620]	@ (8009af8 <_dtoa_r+0x8d0>)
 800988c:	f7f6 fed4 	bl	8000638 <__aeabi_dmul>
 8009890:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009894:	e7bc      	b.n	8009810 <_dtoa_r+0x5e8>
 8009896:	d10c      	bne.n	80098b2 <_dtoa_r+0x68a>
 8009898:	4b98      	ldr	r3, [pc, #608]	@ (8009afc <_dtoa_r+0x8d4>)
 800989a:	2200      	movs	r2, #0
 800989c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098a0:	f7f6 feca 	bl	8000638 <__aeabi_dmul>
 80098a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098a8:	f7f7 f94c 	bl	8000b44 <__aeabi_dcmpge>
 80098ac:	2800      	cmp	r0, #0
 80098ae:	f000 8157 	beq.w	8009b60 <_dtoa_r+0x938>
 80098b2:	2400      	movs	r4, #0
 80098b4:	4625      	mov	r5, r4
 80098b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098b8:	43db      	mvns	r3, r3
 80098ba:	9304      	str	r3, [sp, #16]
 80098bc:	4656      	mov	r6, sl
 80098be:	2700      	movs	r7, #0
 80098c0:	4621      	mov	r1, r4
 80098c2:	4658      	mov	r0, fp
 80098c4:	f000 fbb4 	bl	800a030 <_Bfree>
 80098c8:	2d00      	cmp	r5, #0
 80098ca:	d0dc      	beq.n	8009886 <_dtoa_r+0x65e>
 80098cc:	b12f      	cbz	r7, 80098da <_dtoa_r+0x6b2>
 80098ce:	42af      	cmp	r7, r5
 80098d0:	d003      	beq.n	80098da <_dtoa_r+0x6b2>
 80098d2:	4639      	mov	r1, r7
 80098d4:	4658      	mov	r0, fp
 80098d6:	f000 fbab 	bl	800a030 <_Bfree>
 80098da:	4629      	mov	r1, r5
 80098dc:	4658      	mov	r0, fp
 80098de:	f000 fba7 	bl	800a030 <_Bfree>
 80098e2:	e7d0      	b.n	8009886 <_dtoa_r+0x65e>
 80098e4:	9704      	str	r7, [sp, #16]
 80098e6:	4633      	mov	r3, r6
 80098e8:	461e      	mov	r6, r3
 80098ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098ee:	2a39      	cmp	r2, #57	@ 0x39
 80098f0:	d107      	bne.n	8009902 <_dtoa_r+0x6da>
 80098f2:	459a      	cmp	sl, r3
 80098f4:	d1f8      	bne.n	80098e8 <_dtoa_r+0x6c0>
 80098f6:	9a04      	ldr	r2, [sp, #16]
 80098f8:	3201      	adds	r2, #1
 80098fa:	9204      	str	r2, [sp, #16]
 80098fc:	2230      	movs	r2, #48	@ 0x30
 80098fe:	f88a 2000 	strb.w	r2, [sl]
 8009902:	781a      	ldrb	r2, [r3, #0]
 8009904:	3201      	adds	r2, #1
 8009906:	701a      	strb	r2, [r3, #0]
 8009908:	e7bd      	b.n	8009886 <_dtoa_r+0x65e>
 800990a:	4b7b      	ldr	r3, [pc, #492]	@ (8009af8 <_dtoa_r+0x8d0>)
 800990c:	2200      	movs	r2, #0
 800990e:	f7f6 fe93 	bl	8000638 <__aeabi_dmul>
 8009912:	2200      	movs	r2, #0
 8009914:	2300      	movs	r3, #0
 8009916:	4604      	mov	r4, r0
 8009918:	460d      	mov	r5, r1
 800991a:	f7f7 f8f5 	bl	8000b08 <__aeabi_dcmpeq>
 800991e:	2800      	cmp	r0, #0
 8009920:	f43f aebb 	beq.w	800969a <_dtoa_r+0x472>
 8009924:	e6f0      	b.n	8009708 <_dtoa_r+0x4e0>
 8009926:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009928:	2a00      	cmp	r2, #0
 800992a:	f000 80db 	beq.w	8009ae4 <_dtoa_r+0x8bc>
 800992e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009930:	2a01      	cmp	r2, #1
 8009932:	f300 80bf 	bgt.w	8009ab4 <_dtoa_r+0x88c>
 8009936:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009938:	2a00      	cmp	r2, #0
 800993a:	f000 80b7 	beq.w	8009aac <_dtoa_r+0x884>
 800993e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009942:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009944:	4646      	mov	r6, r8
 8009946:	9a08      	ldr	r2, [sp, #32]
 8009948:	2101      	movs	r1, #1
 800994a:	441a      	add	r2, r3
 800994c:	4658      	mov	r0, fp
 800994e:	4498      	add	r8, r3
 8009950:	9208      	str	r2, [sp, #32]
 8009952:	f000 fc21 	bl	800a198 <__i2b>
 8009956:	4605      	mov	r5, r0
 8009958:	b15e      	cbz	r6, 8009972 <_dtoa_r+0x74a>
 800995a:	9b08      	ldr	r3, [sp, #32]
 800995c:	2b00      	cmp	r3, #0
 800995e:	dd08      	ble.n	8009972 <_dtoa_r+0x74a>
 8009960:	42b3      	cmp	r3, r6
 8009962:	9a08      	ldr	r2, [sp, #32]
 8009964:	bfa8      	it	ge
 8009966:	4633      	movge	r3, r6
 8009968:	eba8 0803 	sub.w	r8, r8, r3
 800996c:	1af6      	subs	r6, r6, r3
 800996e:	1ad3      	subs	r3, r2, r3
 8009970:	9308      	str	r3, [sp, #32]
 8009972:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009974:	b1f3      	cbz	r3, 80099b4 <_dtoa_r+0x78c>
 8009976:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009978:	2b00      	cmp	r3, #0
 800997a:	f000 80b7 	beq.w	8009aec <_dtoa_r+0x8c4>
 800997e:	b18c      	cbz	r4, 80099a4 <_dtoa_r+0x77c>
 8009980:	4629      	mov	r1, r5
 8009982:	4622      	mov	r2, r4
 8009984:	4658      	mov	r0, fp
 8009986:	f000 fcc7 	bl	800a318 <__pow5mult>
 800998a:	464a      	mov	r2, r9
 800998c:	4601      	mov	r1, r0
 800998e:	4605      	mov	r5, r0
 8009990:	4658      	mov	r0, fp
 8009992:	f000 fc17 	bl	800a1c4 <__multiply>
 8009996:	4649      	mov	r1, r9
 8009998:	9004      	str	r0, [sp, #16]
 800999a:	4658      	mov	r0, fp
 800999c:	f000 fb48 	bl	800a030 <_Bfree>
 80099a0:	9b04      	ldr	r3, [sp, #16]
 80099a2:	4699      	mov	r9, r3
 80099a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099a6:	1b1a      	subs	r2, r3, r4
 80099a8:	d004      	beq.n	80099b4 <_dtoa_r+0x78c>
 80099aa:	4649      	mov	r1, r9
 80099ac:	4658      	mov	r0, fp
 80099ae:	f000 fcb3 	bl	800a318 <__pow5mult>
 80099b2:	4681      	mov	r9, r0
 80099b4:	2101      	movs	r1, #1
 80099b6:	4658      	mov	r0, fp
 80099b8:	f000 fbee 	bl	800a198 <__i2b>
 80099bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099be:	4604      	mov	r4, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f000 81cf 	beq.w	8009d64 <_dtoa_r+0xb3c>
 80099c6:	461a      	mov	r2, r3
 80099c8:	4601      	mov	r1, r0
 80099ca:	4658      	mov	r0, fp
 80099cc:	f000 fca4 	bl	800a318 <__pow5mult>
 80099d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	4604      	mov	r4, r0
 80099d6:	f300 8095 	bgt.w	8009b04 <_dtoa_r+0x8dc>
 80099da:	9b02      	ldr	r3, [sp, #8]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f040 8087 	bne.w	8009af0 <_dtoa_r+0x8c8>
 80099e2:	9b03      	ldr	r3, [sp, #12]
 80099e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f040 8089 	bne.w	8009b00 <_dtoa_r+0x8d8>
 80099ee:	9b03      	ldr	r3, [sp, #12]
 80099f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80099f4:	0d1b      	lsrs	r3, r3, #20
 80099f6:	051b      	lsls	r3, r3, #20
 80099f8:	b12b      	cbz	r3, 8009a06 <_dtoa_r+0x7de>
 80099fa:	9b08      	ldr	r3, [sp, #32]
 80099fc:	3301      	adds	r3, #1
 80099fe:	9308      	str	r3, [sp, #32]
 8009a00:	f108 0801 	add.w	r8, r8, #1
 8009a04:	2301      	movs	r3, #1
 8009a06:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	f000 81b0 	beq.w	8009d70 <_dtoa_r+0xb48>
 8009a10:	6923      	ldr	r3, [r4, #16]
 8009a12:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a16:	6918      	ldr	r0, [r3, #16]
 8009a18:	f000 fb72 	bl	800a100 <__hi0bits>
 8009a1c:	f1c0 0020 	rsb	r0, r0, #32
 8009a20:	9b08      	ldr	r3, [sp, #32]
 8009a22:	4418      	add	r0, r3
 8009a24:	f010 001f 	ands.w	r0, r0, #31
 8009a28:	d077      	beq.n	8009b1a <_dtoa_r+0x8f2>
 8009a2a:	f1c0 0320 	rsb	r3, r0, #32
 8009a2e:	2b04      	cmp	r3, #4
 8009a30:	dd6b      	ble.n	8009b0a <_dtoa_r+0x8e2>
 8009a32:	9b08      	ldr	r3, [sp, #32]
 8009a34:	f1c0 001c 	rsb	r0, r0, #28
 8009a38:	4403      	add	r3, r0
 8009a3a:	4480      	add	r8, r0
 8009a3c:	4406      	add	r6, r0
 8009a3e:	9308      	str	r3, [sp, #32]
 8009a40:	f1b8 0f00 	cmp.w	r8, #0
 8009a44:	dd05      	ble.n	8009a52 <_dtoa_r+0x82a>
 8009a46:	4649      	mov	r1, r9
 8009a48:	4642      	mov	r2, r8
 8009a4a:	4658      	mov	r0, fp
 8009a4c:	f000 fcbe 	bl	800a3cc <__lshift>
 8009a50:	4681      	mov	r9, r0
 8009a52:	9b08      	ldr	r3, [sp, #32]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	dd05      	ble.n	8009a64 <_dtoa_r+0x83c>
 8009a58:	4621      	mov	r1, r4
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	4658      	mov	r0, fp
 8009a5e:	f000 fcb5 	bl	800a3cc <__lshift>
 8009a62:	4604      	mov	r4, r0
 8009a64:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d059      	beq.n	8009b1e <_dtoa_r+0x8f6>
 8009a6a:	4621      	mov	r1, r4
 8009a6c:	4648      	mov	r0, r9
 8009a6e:	f000 fd19 	bl	800a4a4 <__mcmp>
 8009a72:	2800      	cmp	r0, #0
 8009a74:	da53      	bge.n	8009b1e <_dtoa_r+0x8f6>
 8009a76:	1e7b      	subs	r3, r7, #1
 8009a78:	9304      	str	r3, [sp, #16]
 8009a7a:	4649      	mov	r1, r9
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	220a      	movs	r2, #10
 8009a80:	4658      	mov	r0, fp
 8009a82:	f000 faf7 	bl	800a074 <__multadd>
 8009a86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a88:	4681      	mov	r9, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f000 8172 	beq.w	8009d74 <_dtoa_r+0xb4c>
 8009a90:	2300      	movs	r3, #0
 8009a92:	4629      	mov	r1, r5
 8009a94:	220a      	movs	r2, #10
 8009a96:	4658      	mov	r0, fp
 8009a98:	f000 faec 	bl	800a074 <__multadd>
 8009a9c:	9b00      	ldr	r3, [sp, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	4605      	mov	r5, r0
 8009aa2:	dc67      	bgt.n	8009b74 <_dtoa_r+0x94c>
 8009aa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	dc41      	bgt.n	8009b2e <_dtoa_r+0x906>
 8009aaa:	e063      	b.n	8009b74 <_dtoa_r+0x94c>
 8009aac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009aae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009ab2:	e746      	b.n	8009942 <_dtoa_r+0x71a>
 8009ab4:	9b07      	ldr	r3, [sp, #28]
 8009ab6:	1e5c      	subs	r4, r3, #1
 8009ab8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009aba:	42a3      	cmp	r3, r4
 8009abc:	bfbf      	itttt	lt
 8009abe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009ac0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009ac2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009ac4:	1ae3      	sublt	r3, r4, r3
 8009ac6:	bfb4      	ite	lt
 8009ac8:	18d2      	addlt	r2, r2, r3
 8009aca:	1b1c      	subge	r4, r3, r4
 8009acc:	9b07      	ldr	r3, [sp, #28]
 8009ace:	bfbc      	itt	lt
 8009ad0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009ad2:	2400      	movlt	r4, #0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	bfb5      	itete	lt
 8009ad8:	eba8 0603 	sublt.w	r6, r8, r3
 8009adc:	9b07      	ldrge	r3, [sp, #28]
 8009ade:	2300      	movlt	r3, #0
 8009ae0:	4646      	movge	r6, r8
 8009ae2:	e730      	b.n	8009946 <_dtoa_r+0x71e>
 8009ae4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009ae6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009ae8:	4646      	mov	r6, r8
 8009aea:	e735      	b.n	8009958 <_dtoa_r+0x730>
 8009aec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009aee:	e75c      	b.n	80099aa <_dtoa_r+0x782>
 8009af0:	2300      	movs	r3, #0
 8009af2:	e788      	b.n	8009a06 <_dtoa_r+0x7de>
 8009af4:	3fe00000 	.word	0x3fe00000
 8009af8:	40240000 	.word	0x40240000
 8009afc:	40140000 	.word	0x40140000
 8009b00:	9b02      	ldr	r3, [sp, #8]
 8009b02:	e780      	b.n	8009a06 <_dtoa_r+0x7de>
 8009b04:	2300      	movs	r3, #0
 8009b06:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b08:	e782      	b.n	8009a10 <_dtoa_r+0x7e8>
 8009b0a:	d099      	beq.n	8009a40 <_dtoa_r+0x818>
 8009b0c:	9a08      	ldr	r2, [sp, #32]
 8009b0e:	331c      	adds	r3, #28
 8009b10:	441a      	add	r2, r3
 8009b12:	4498      	add	r8, r3
 8009b14:	441e      	add	r6, r3
 8009b16:	9208      	str	r2, [sp, #32]
 8009b18:	e792      	b.n	8009a40 <_dtoa_r+0x818>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	e7f6      	b.n	8009b0c <_dtoa_r+0x8e4>
 8009b1e:	9b07      	ldr	r3, [sp, #28]
 8009b20:	9704      	str	r7, [sp, #16]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	dc20      	bgt.n	8009b68 <_dtoa_r+0x940>
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b2a:	2b02      	cmp	r3, #2
 8009b2c:	dd1e      	ble.n	8009b6c <_dtoa_r+0x944>
 8009b2e:	9b00      	ldr	r3, [sp, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f47f aec0 	bne.w	80098b6 <_dtoa_r+0x68e>
 8009b36:	4621      	mov	r1, r4
 8009b38:	2205      	movs	r2, #5
 8009b3a:	4658      	mov	r0, fp
 8009b3c:	f000 fa9a 	bl	800a074 <__multadd>
 8009b40:	4601      	mov	r1, r0
 8009b42:	4604      	mov	r4, r0
 8009b44:	4648      	mov	r0, r9
 8009b46:	f000 fcad 	bl	800a4a4 <__mcmp>
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	f77f aeb3 	ble.w	80098b6 <_dtoa_r+0x68e>
 8009b50:	4656      	mov	r6, sl
 8009b52:	2331      	movs	r3, #49	@ 0x31
 8009b54:	f806 3b01 	strb.w	r3, [r6], #1
 8009b58:	9b04      	ldr	r3, [sp, #16]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	9304      	str	r3, [sp, #16]
 8009b5e:	e6ae      	b.n	80098be <_dtoa_r+0x696>
 8009b60:	9c07      	ldr	r4, [sp, #28]
 8009b62:	9704      	str	r7, [sp, #16]
 8009b64:	4625      	mov	r5, r4
 8009b66:	e7f3      	b.n	8009b50 <_dtoa_r+0x928>
 8009b68:	9b07      	ldr	r3, [sp, #28]
 8009b6a:	9300      	str	r3, [sp, #0]
 8009b6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	f000 8104 	beq.w	8009d7c <_dtoa_r+0xb54>
 8009b74:	2e00      	cmp	r6, #0
 8009b76:	dd05      	ble.n	8009b84 <_dtoa_r+0x95c>
 8009b78:	4629      	mov	r1, r5
 8009b7a:	4632      	mov	r2, r6
 8009b7c:	4658      	mov	r0, fp
 8009b7e:	f000 fc25 	bl	800a3cc <__lshift>
 8009b82:	4605      	mov	r5, r0
 8009b84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d05a      	beq.n	8009c40 <_dtoa_r+0xa18>
 8009b8a:	6869      	ldr	r1, [r5, #4]
 8009b8c:	4658      	mov	r0, fp
 8009b8e:	f000 fa0f 	bl	8009fb0 <_Balloc>
 8009b92:	4606      	mov	r6, r0
 8009b94:	b928      	cbnz	r0, 8009ba2 <_dtoa_r+0x97a>
 8009b96:	4b84      	ldr	r3, [pc, #528]	@ (8009da8 <_dtoa_r+0xb80>)
 8009b98:	4602      	mov	r2, r0
 8009b9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009b9e:	f7ff bb5a 	b.w	8009256 <_dtoa_r+0x2e>
 8009ba2:	692a      	ldr	r2, [r5, #16]
 8009ba4:	3202      	adds	r2, #2
 8009ba6:	0092      	lsls	r2, r2, #2
 8009ba8:	f105 010c 	add.w	r1, r5, #12
 8009bac:	300c      	adds	r0, #12
 8009bae:	f7ff faa2 	bl	80090f6 <memcpy>
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	4631      	mov	r1, r6
 8009bb6:	4658      	mov	r0, fp
 8009bb8:	f000 fc08 	bl	800a3cc <__lshift>
 8009bbc:	f10a 0301 	add.w	r3, sl, #1
 8009bc0:	9307      	str	r3, [sp, #28]
 8009bc2:	9b00      	ldr	r3, [sp, #0]
 8009bc4:	4453      	add	r3, sl
 8009bc6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bc8:	9b02      	ldr	r3, [sp, #8]
 8009bca:	f003 0301 	and.w	r3, r3, #1
 8009bce:	462f      	mov	r7, r5
 8009bd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bd2:	4605      	mov	r5, r0
 8009bd4:	9b07      	ldr	r3, [sp, #28]
 8009bd6:	4621      	mov	r1, r4
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	4648      	mov	r0, r9
 8009bdc:	9300      	str	r3, [sp, #0]
 8009bde:	f7ff fa98 	bl	8009112 <quorem>
 8009be2:	4639      	mov	r1, r7
 8009be4:	9002      	str	r0, [sp, #8]
 8009be6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009bea:	4648      	mov	r0, r9
 8009bec:	f000 fc5a 	bl	800a4a4 <__mcmp>
 8009bf0:	462a      	mov	r2, r5
 8009bf2:	9008      	str	r0, [sp, #32]
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	4658      	mov	r0, fp
 8009bf8:	f000 fc70 	bl	800a4dc <__mdiff>
 8009bfc:	68c2      	ldr	r2, [r0, #12]
 8009bfe:	4606      	mov	r6, r0
 8009c00:	bb02      	cbnz	r2, 8009c44 <_dtoa_r+0xa1c>
 8009c02:	4601      	mov	r1, r0
 8009c04:	4648      	mov	r0, r9
 8009c06:	f000 fc4d 	bl	800a4a4 <__mcmp>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	4631      	mov	r1, r6
 8009c0e:	4658      	mov	r0, fp
 8009c10:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c12:	f000 fa0d 	bl	800a030 <_Bfree>
 8009c16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c1a:	9e07      	ldr	r6, [sp, #28]
 8009c1c:	ea43 0102 	orr.w	r1, r3, r2
 8009c20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c22:	4319      	orrs	r1, r3
 8009c24:	d110      	bne.n	8009c48 <_dtoa_r+0xa20>
 8009c26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009c2a:	d029      	beq.n	8009c80 <_dtoa_r+0xa58>
 8009c2c:	9b08      	ldr	r3, [sp, #32]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	dd02      	ble.n	8009c38 <_dtoa_r+0xa10>
 8009c32:	9b02      	ldr	r3, [sp, #8]
 8009c34:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009c38:	9b00      	ldr	r3, [sp, #0]
 8009c3a:	f883 8000 	strb.w	r8, [r3]
 8009c3e:	e63f      	b.n	80098c0 <_dtoa_r+0x698>
 8009c40:	4628      	mov	r0, r5
 8009c42:	e7bb      	b.n	8009bbc <_dtoa_r+0x994>
 8009c44:	2201      	movs	r2, #1
 8009c46:	e7e1      	b.n	8009c0c <_dtoa_r+0x9e4>
 8009c48:	9b08      	ldr	r3, [sp, #32]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	db04      	blt.n	8009c58 <_dtoa_r+0xa30>
 8009c4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c50:	430b      	orrs	r3, r1
 8009c52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c54:	430b      	orrs	r3, r1
 8009c56:	d120      	bne.n	8009c9a <_dtoa_r+0xa72>
 8009c58:	2a00      	cmp	r2, #0
 8009c5a:	dded      	ble.n	8009c38 <_dtoa_r+0xa10>
 8009c5c:	4649      	mov	r1, r9
 8009c5e:	2201      	movs	r2, #1
 8009c60:	4658      	mov	r0, fp
 8009c62:	f000 fbb3 	bl	800a3cc <__lshift>
 8009c66:	4621      	mov	r1, r4
 8009c68:	4681      	mov	r9, r0
 8009c6a:	f000 fc1b 	bl	800a4a4 <__mcmp>
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	dc03      	bgt.n	8009c7a <_dtoa_r+0xa52>
 8009c72:	d1e1      	bne.n	8009c38 <_dtoa_r+0xa10>
 8009c74:	f018 0f01 	tst.w	r8, #1
 8009c78:	d0de      	beq.n	8009c38 <_dtoa_r+0xa10>
 8009c7a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009c7e:	d1d8      	bne.n	8009c32 <_dtoa_r+0xa0a>
 8009c80:	9a00      	ldr	r2, [sp, #0]
 8009c82:	2339      	movs	r3, #57	@ 0x39
 8009c84:	7013      	strb	r3, [r2, #0]
 8009c86:	4633      	mov	r3, r6
 8009c88:	461e      	mov	r6, r3
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009c90:	2a39      	cmp	r2, #57	@ 0x39
 8009c92:	d052      	beq.n	8009d3a <_dtoa_r+0xb12>
 8009c94:	3201      	adds	r2, #1
 8009c96:	701a      	strb	r2, [r3, #0]
 8009c98:	e612      	b.n	80098c0 <_dtoa_r+0x698>
 8009c9a:	2a00      	cmp	r2, #0
 8009c9c:	dd07      	ble.n	8009cae <_dtoa_r+0xa86>
 8009c9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009ca2:	d0ed      	beq.n	8009c80 <_dtoa_r+0xa58>
 8009ca4:	9a00      	ldr	r2, [sp, #0]
 8009ca6:	f108 0301 	add.w	r3, r8, #1
 8009caa:	7013      	strb	r3, [r2, #0]
 8009cac:	e608      	b.n	80098c0 <_dtoa_r+0x698>
 8009cae:	9b07      	ldr	r3, [sp, #28]
 8009cb0:	9a07      	ldr	r2, [sp, #28]
 8009cb2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009cb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d028      	beq.n	8009d0e <_dtoa_r+0xae6>
 8009cbc:	4649      	mov	r1, r9
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	220a      	movs	r2, #10
 8009cc2:	4658      	mov	r0, fp
 8009cc4:	f000 f9d6 	bl	800a074 <__multadd>
 8009cc8:	42af      	cmp	r7, r5
 8009cca:	4681      	mov	r9, r0
 8009ccc:	f04f 0300 	mov.w	r3, #0
 8009cd0:	f04f 020a 	mov.w	r2, #10
 8009cd4:	4639      	mov	r1, r7
 8009cd6:	4658      	mov	r0, fp
 8009cd8:	d107      	bne.n	8009cea <_dtoa_r+0xac2>
 8009cda:	f000 f9cb 	bl	800a074 <__multadd>
 8009cde:	4607      	mov	r7, r0
 8009ce0:	4605      	mov	r5, r0
 8009ce2:	9b07      	ldr	r3, [sp, #28]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	9307      	str	r3, [sp, #28]
 8009ce8:	e774      	b.n	8009bd4 <_dtoa_r+0x9ac>
 8009cea:	f000 f9c3 	bl	800a074 <__multadd>
 8009cee:	4629      	mov	r1, r5
 8009cf0:	4607      	mov	r7, r0
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	220a      	movs	r2, #10
 8009cf6:	4658      	mov	r0, fp
 8009cf8:	f000 f9bc 	bl	800a074 <__multadd>
 8009cfc:	4605      	mov	r5, r0
 8009cfe:	e7f0      	b.n	8009ce2 <_dtoa_r+0xaba>
 8009d00:	9b00      	ldr	r3, [sp, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	bfcc      	ite	gt
 8009d06:	461e      	movgt	r6, r3
 8009d08:	2601      	movle	r6, #1
 8009d0a:	4456      	add	r6, sl
 8009d0c:	2700      	movs	r7, #0
 8009d0e:	4649      	mov	r1, r9
 8009d10:	2201      	movs	r2, #1
 8009d12:	4658      	mov	r0, fp
 8009d14:	f000 fb5a 	bl	800a3cc <__lshift>
 8009d18:	4621      	mov	r1, r4
 8009d1a:	4681      	mov	r9, r0
 8009d1c:	f000 fbc2 	bl	800a4a4 <__mcmp>
 8009d20:	2800      	cmp	r0, #0
 8009d22:	dcb0      	bgt.n	8009c86 <_dtoa_r+0xa5e>
 8009d24:	d102      	bne.n	8009d2c <_dtoa_r+0xb04>
 8009d26:	f018 0f01 	tst.w	r8, #1
 8009d2a:	d1ac      	bne.n	8009c86 <_dtoa_r+0xa5e>
 8009d2c:	4633      	mov	r3, r6
 8009d2e:	461e      	mov	r6, r3
 8009d30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d34:	2a30      	cmp	r2, #48	@ 0x30
 8009d36:	d0fa      	beq.n	8009d2e <_dtoa_r+0xb06>
 8009d38:	e5c2      	b.n	80098c0 <_dtoa_r+0x698>
 8009d3a:	459a      	cmp	sl, r3
 8009d3c:	d1a4      	bne.n	8009c88 <_dtoa_r+0xa60>
 8009d3e:	9b04      	ldr	r3, [sp, #16]
 8009d40:	3301      	adds	r3, #1
 8009d42:	9304      	str	r3, [sp, #16]
 8009d44:	2331      	movs	r3, #49	@ 0x31
 8009d46:	f88a 3000 	strb.w	r3, [sl]
 8009d4a:	e5b9      	b.n	80098c0 <_dtoa_r+0x698>
 8009d4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d4e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009dac <_dtoa_r+0xb84>
 8009d52:	b11b      	cbz	r3, 8009d5c <_dtoa_r+0xb34>
 8009d54:	f10a 0308 	add.w	r3, sl, #8
 8009d58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009d5a:	6013      	str	r3, [r2, #0]
 8009d5c:	4650      	mov	r0, sl
 8009d5e:	b019      	add	sp, #100	@ 0x64
 8009d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	f77f ae37 	ble.w	80099da <_dtoa_r+0x7b2>
 8009d6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d70:	2001      	movs	r0, #1
 8009d72:	e655      	b.n	8009a20 <_dtoa_r+0x7f8>
 8009d74:	9b00      	ldr	r3, [sp, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f77f aed6 	ble.w	8009b28 <_dtoa_r+0x900>
 8009d7c:	4656      	mov	r6, sl
 8009d7e:	4621      	mov	r1, r4
 8009d80:	4648      	mov	r0, r9
 8009d82:	f7ff f9c6 	bl	8009112 <quorem>
 8009d86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009d8a:	f806 8b01 	strb.w	r8, [r6], #1
 8009d8e:	9b00      	ldr	r3, [sp, #0]
 8009d90:	eba6 020a 	sub.w	r2, r6, sl
 8009d94:	4293      	cmp	r3, r2
 8009d96:	ddb3      	ble.n	8009d00 <_dtoa_r+0xad8>
 8009d98:	4649      	mov	r1, r9
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	220a      	movs	r2, #10
 8009d9e:	4658      	mov	r0, fp
 8009da0:	f000 f968 	bl	800a074 <__multadd>
 8009da4:	4681      	mov	r9, r0
 8009da6:	e7ea      	b.n	8009d7e <_dtoa_r+0xb56>
 8009da8:	0800c520 	.word	0x0800c520
 8009dac:	0800c4a4 	.word	0x0800c4a4

08009db0 <_free_r>:
 8009db0:	b538      	push	{r3, r4, r5, lr}
 8009db2:	4605      	mov	r5, r0
 8009db4:	2900      	cmp	r1, #0
 8009db6:	d041      	beq.n	8009e3c <_free_r+0x8c>
 8009db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dbc:	1f0c      	subs	r4, r1, #4
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	bfb8      	it	lt
 8009dc2:	18e4      	addlt	r4, r4, r3
 8009dc4:	f000 f8e8 	bl	8009f98 <__malloc_lock>
 8009dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8009e40 <_free_r+0x90>)
 8009dca:	6813      	ldr	r3, [r2, #0]
 8009dcc:	b933      	cbnz	r3, 8009ddc <_free_r+0x2c>
 8009dce:	6063      	str	r3, [r4, #4]
 8009dd0:	6014      	str	r4, [r2, #0]
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dd8:	f000 b8e4 	b.w	8009fa4 <__malloc_unlock>
 8009ddc:	42a3      	cmp	r3, r4
 8009dde:	d908      	bls.n	8009df2 <_free_r+0x42>
 8009de0:	6820      	ldr	r0, [r4, #0]
 8009de2:	1821      	adds	r1, r4, r0
 8009de4:	428b      	cmp	r3, r1
 8009de6:	bf01      	itttt	eq
 8009de8:	6819      	ldreq	r1, [r3, #0]
 8009dea:	685b      	ldreq	r3, [r3, #4]
 8009dec:	1809      	addeq	r1, r1, r0
 8009dee:	6021      	streq	r1, [r4, #0]
 8009df0:	e7ed      	b.n	8009dce <_free_r+0x1e>
 8009df2:	461a      	mov	r2, r3
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	b10b      	cbz	r3, 8009dfc <_free_r+0x4c>
 8009df8:	42a3      	cmp	r3, r4
 8009dfa:	d9fa      	bls.n	8009df2 <_free_r+0x42>
 8009dfc:	6811      	ldr	r1, [r2, #0]
 8009dfe:	1850      	adds	r0, r2, r1
 8009e00:	42a0      	cmp	r0, r4
 8009e02:	d10b      	bne.n	8009e1c <_free_r+0x6c>
 8009e04:	6820      	ldr	r0, [r4, #0]
 8009e06:	4401      	add	r1, r0
 8009e08:	1850      	adds	r0, r2, r1
 8009e0a:	4283      	cmp	r3, r0
 8009e0c:	6011      	str	r1, [r2, #0]
 8009e0e:	d1e0      	bne.n	8009dd2 <_free_r+0x22>
 8009e10:	6818      	ldr	r0, [r3, #0]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	6053      	str	r3, [r2, #4]
 8009e16:	4408      	add	r0, r1
 8009e18:	6010      	str	r0, [r2, #0]
 8009e1a:	e7da      	b.n	8009dd2 <_free_r+0x22>
 8009e1c:	d902      	bls.n	8009e24 <_free_r+0x74>
 8009e1e:	230c      	movs	r3, #12
 8009e20:	602b      	str	r3, [r5, #0]
 8009e22:	e7d6      	b.n	8009dd2 <_free_r+0x22>
 8009e24:	6820      	ldr	r0, [r4, #0]
 8009e26:	1821      	adds	r1, r4, r0
 8009e28:	428b      	cmp	r3, r1
 8009e2a:	bf04      	itt	eq
 8009e2c:	6819      	ldreq	r1, [r3, #0]
 8009e2e:	685b      	ldreq	r3, [r3, #4]
 8009e30:	6063      	str	r3, [r4, #4]
 8009e32:	bf04      	itt	eq
 8009e34:	1809      	addeq	r1, r1, r0
 8009e36:	6021      	streq	r1, [r4, #0]
 8009e38:	6054      	str	r4, [r2, #4]
 8009e3a:	e7ca      	b.n	8009dd2 <_free_r+0x22>
 8009e3c:	bd38      	pop	{r3, r4, r5, pc}
 8009e3e:	bf00      	nop
 8009e40:	20013320 	.word	0x20013320

08009e44 <malloc>:
 8009e44:	4b02      	ldr	r3, [pc, #8]	@ (8009e50 <malloc+0xc>)
 8009e46:	4601      	mov	r1, r0
 8009e48:	6818      	ldr	r0, [r3, #0]
 8009e4a:	f000 b825 	b.w	8009e98 <_malloc_r>
 8009e4e:	bf00      	nop
 8009e50:	20000028 	.word	0x20000028

08009e54 <sbrk_aligned>:
 8009e54:	b570      	push	{r4, r5, r6, lr}
 8009e56:	4e0f      	ldr	r6, [pc, #60]	@ (8009e94 <sbrk_aligned+0x40>)
 8009e58:	460c      	mov	r4, r1
 8009e5a:	6831      	ldr	r1, [r6, #0]
 8009e5c:	4605      	mov	r5, r0
 8009e5e:	b911      	cbnz	r1, 8009e66 <sbrk_aligned+0x12>
 8009e60:	f001 f80c 	bl	800ae7c <_sbrk_r>
 8009e64:	6030      	str	r0, [r6, #0]
 8009e66:	4621      	mov	r1, r4
 8009e68:	4628      	mov	r0, r5
 8009e6a:	f001 f807 	bl	800ae7c <_sbrk_r>
 8009e6e:	1c43      	adds	r3, r0, #1
 8009e70:	d103      	bne.n	8009e7a <sbrk_aligned+0x26>
 8009e72:	f04f 34ff 	mov.w	r4, #4294967295
 8009e76:	4620      	mov	r0, r4
 8009e78:	bd70      	pop	{r4, r5, r6, pc}
 8009e7a:	1cc4      	adds	r4, r0, #3
 8009e7c:	f024 0403 	bic.w	r4, r4, #3
 8009e80:	42a0      	cmp	r0, r4
 8009e82:	d0f8      	beq.n	8009e76 <sbrk_aligned+0x22>
 8009e84:	1a21      	subs	r1, r4, r0
 8009e86:	4628      	mov	r0, r5
 8009e88:	f000 fff8 	bl	800ae7c <_sbrk_r>
 8009e8c:	3001      	adds	r0, #1
 8009e8e:	d1f2      	bne.n	8009e76 <sbrk_aligned+0x22>
 8009e90:	e7ef      	b.n	8009e72 <sbrk_aligned+0x1e>
 8009e92:	bf00      	nop
 8009e94:	2001331c 	.word	0x2001331c

08009e98 <_malloc_r>:
 8009e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e9c:	1ccd      	adds	r5, r1, #3
 8009e9e:	f025 0503 	bic.w	r5, r5, #3
 8009ea2:	3508      	adds	r5, #8
 8009ea4:	2d0c      	cmp	r5, #12
 8009ea6:	bf38      	it	cc
 8009ea8:	250c      	movcc	r5, #12
 8009eaa:	2d00      	cmp	r5, #0
 8009eac:	4606      	mov	r6, r0
 8009eae:	db01      	blt.n	8009eb4 <_malloc_r+0x1c>
 8009eb0:	42a9      	cmp	r1, r5
 8009eb2:	d904      	bls.n	8009ebe <_malloc_r+0x26>
 8009eb4:	230c      	movs	r3, #12
 8009eb6:	6033      	str	r3, [r6, #0]
 8009eb8:	2000      	movs	r0, #0
 8009eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ebe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009f94 <_malloc_r+0xfc>
 8009ec2:	f000 f869 	bl	8009f98 <__malloc_lock>
 8009ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8009eca:	461c      	mov	r4, r3
 8009ecc:	bb44      	cbnz	r4, 8009f20 <_malloc_r+0x88>
 8009ece:	4629      	mov	r1, r5
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	f7ff ffbf 	bl	8009e54 <sbrk_aligned>
 8009ed6:	1c43      	adds	r3, r0, #1
 8009ed8:	4604      	mov	r4, r0
 8009eda:	d158      	bne.n	8009f8e <_malloc_r+0xf6>
 8009edc:	f8d8 4000 	ldr.w	r4, [r8]
 8009ee0:	4627      	mov	r7, r4
 8009ee2:	2f00      	cmp	r7, #0
 8009ee4:	d143      	bne.n	8009f6e <_malloc_r+0xd6>
 8009ee6:	2c00      	cmp	r4, #0
 8009ee8:	d04b      	beq.n	8009f82 <_malloc_r+0xea>
 8009eea:	6823      	ldr	r3, [r4, #0]
 8009eec:	4639      	mov	r1, r7
 8009eee:	4630      	mov	r0, r6
 8009ef0:	eb04 0903 	add.w	r9, r4, r3
 8009ef4:	f000 ffc2 	bl	800ae7c <_sbrk_r>
 8009ef8:	4581      	cmp	r9, r0
 8009efa:	d142      	bne.n	8009f82 <_malloc_r+0xea>
 8009efc:	6821      	ldr	r1, [r4, #0]
 8009efe:	1a6d      	subs	r5, r5, r1
 8009f00:	4629      	mov	r1, r5
 8009f02:	4630      	mov	r0, r6
 8009f04:	f7ff ffa6 	bl	8009e54 <sbrk_aligned>
 8009f08:	3001      	adds	r0, #1
 8009f0a:	d03a      	beq.n	8009f82 <_malloc_r+0xea>
 8009f0c:	6823      	ldr	r3, [r4, #0]
 8009f0e:	442b      	add	r3, r5
 8009f10:	6023      	str	r3, [r4, #0]
 8009f12:	f8d8 3000 	ldr.w	r3, [r8]
 8009f16:	685a      	ldr	r2, [r3, #4]
 8009f18:	bb62      	cbnz	r2, 8009f74 <_malloc_r+0xdc>
 8009f1a:	f8c8 7000 	str.w	r7, [r8]
 8009f1e:	e00f      	b.n	8009f40 <_malloc_r+0xa8>
 8009f20:	6822      	ldr	r2, [r4, #0]
 8009f22:	1b52      	subs	r2, r2, r5
 8009f24:	d420      	bmi.n	8009f68 <_malloc_r+0xd0>
 8009f26:	2a0b      	cmp	r2, #11
 8009f28:	d917      	bls.n	8009f5a <_malloc_r+0xc2>
 8009f2a:	1961      	adds	r1, r4, r5
 8009f2c:	42a3      	cmp	r3, r4
 8009f2e:	6025      	str	r5, [r4, #0]
 8009f30:	bf18      	it	ne
 8009f32:	6059      	strne	r1, [r3, #4]
 8009f34:	6863      	ldr	r3, [r4, #4]
 8009f36:	bf08      	it	eq
 8009f38:	f8c8 1000 	streq.w	r1, [r8]
 8009f3c:	5162      	str	r2, [r4, r5]
 8009f3e:	604b      	str	r3, [r1, #4]
 8009f40:	4630      	mov	r0, r6
 8009f42:	f000 f82f 	bl	8009fa4 <__malloc_unlock>
 8009f46:	f104 000b 	add.w	r0, r4, #11
 8009f4a:	1d23      	adds	r3, r4, #4
 8009f4c:	f020 0007 	bic.w	r0, r0, #7
 8009f50:	1ac2      	subs	r2, r0, r3
 8009f52:	bf1c      	itt	ne
 8009f54:	1a1b      	subne	r3, r3, r0
 8009f56:	50a3      	strne	r3, [r4, r2]
 8009f58:	e7af      	b.n	8009eba <_malloc_r+0x22>
 8009f5a:	6862      	ldr	r2, [r4, #4]
 8009f5c:	42a3      	cmp	r3, r4
 8009f5e:	bf0c      	ite	eq
 8009f60:	f8c8 2000 	streq.w	r2, [r8]
 8009f64:	605a      	strne	r2, [r3, #4]
 8009f66:	e7eb      	b.n	8009f40 <_malloc_r+0xa8>
 8009f68:	4623      	mov	r3, r4
 8009f6a:	6864      	ldr	r4, [r4, #4]
 8009f6c:	e7ae      	b.n	8009ecc <_malloc_r+0x34>
 8009f6e:	463c      	mov	r4, r7
 8009f70:	687f      	ldr	r7, [r7, #4]
 8009f72:	e7b6      	b.n	8009ee2 <_malloc_r+0x4a>
 8009f74:	461a      	mov	r2, r3
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	42a3      	cmp	r3, r4
 8009f7a:	d1fb      	bne.n	8009f74 <_malloc_r+0xdc>
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	6053      	str	r3, [r2, #4]
 8009f80:	e7de      	b.n	8009f40 <_malloc_r+0xa8>
 8009f82:	230c      	movs	r3, #12
 8009f84:	6033      	str	r3, [r6, #0]
 8009f86:	4630      	mov	r0, r6
 8009f88:	f000 f80c 	bl	8009fa4 <__malloc_unlock>
 8009f8c:	e794      	b.n	8009eb8 <_malloc_r+0x20>
 8009f8e:	6005      	str	r5, [r0, #0]
 8009f90:	e7d6      	b.n	8009f40 <_malloc_r+0xa8>
 8009f92:	bf00      	nop
 8009f94:	20013320 	.word	0x20013320

08009f98 <__malloc_lock>:
 8009f98:	4801      	ldr	r0, [pc, #4]	@ (8009fa0 <__malloc_lock+0x8>)
 8009f9a:	f7ff b8aa 	b.w	80090f2 <__retarget_lock_acquire_recursive>
 8009f9e:	bf00      	nop
 8009fa0:	20013318 	.word	0x20013318

08009fa4 <__malloc_unlock>:
 8009fa4:	4801      	ldr	r0, [pc, #4]	@ (8009fac <__malloc_unlock+0x8>)
 8009fa6:	f7ff b8a5 	b.w	80090f4 <__retarget_lock_release_recursive>
 8009faa:	bf00      	nop
 8009fac:	20013318 	.word	0x20013318

08009fb0 <_Balloc>:
 8009fb0:	b570      	push	{r4, r5, r6, lr}
 8009fb2:	69c6      	ldr	r6, [r0, #28]
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	460d      	mov	r5, r1
 8009fb8:	b976      	cbnz	r6, 8009fd8 <_Balloc+0x28>
 8009fba:	2010      	movs	r0, #16
 8009fbc:	f7ff ff42 	bl	8009e44 <malloc>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	61e0      	str	r0, [r4, #28]
 8009fc4:	b920      	cbnz	r0, 8009fd0 <_Balloc+0x20>
 8009fc6:	4b18      	ldr	r3, [pc, #96]	@ (800a028 <_Balloc+0x78>)
 8009fc8:	4818      	ldr	r0, [pc, #96]	@ (800a02c <_Balloc+0x7c>)
 8009fca:	216b      	movs	r1, #107	@ 0x6b
 8009fcc:	f000 ff66 	bl	800ae9c <__assert_func>
 8009fd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fd4:	6006      	str	r6, [r0, #0]
 8009fd6:	60c6      	str	r6, [r0, #12]
 8009fd8:	69e6      	ldr	r6, [r4, #28]
 8009fda:	68f3      	ldr	r3, [r6, #12]
 8009fdc:	b183      	cbz	r3, 800a000 <_Balloc+0x50>
 8009fde:	69e3      	ldr	r3, [r4, #28]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009fe6:	b9b8      	cbnz	r0, 800a018 <_Balloc+0x68>
 8009fe8:	2101      	movs	r1, #1
 8009fea:	fa01 f605 	lsl.w	r6, r1, r5
 8009fee:	1d72      	adds	r2, r6, #5
 8009ff0:	0092      	lsls	r2, r2, #2
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f000 ff70 	bl	800aed8 <_calloc_r>
 8009ff8:	b160      	cbz	r0, 800a014 <_Balloc+0x64>
 8009ffa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ffe:	e00e      	b.n	800a01e <_Balloc+0x6e>
 800a000:	2221      	movs	r2, #33	@ 0x21
 800a002:	2104      	movs	r1, #4
 800a004:	4620      	mov	r0, r4
 800a006:	f000 ff67 	bl	800aed8 <_calloc_r>
 800a00a:	69e3      	ldr	r3, [r4, #28]
 800a00c:	60f0      	str	r0, [r6, #12]
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d1e4      	bne.n	8009fde <_Balloc+0x2e>
 800a014:	2000      	movs	r0, #0
 800a016:	bd70      	pop	{r4, r5, r6, pc}
 800a018:	6802      	ldr	r2, [r0, #0]
 800a01a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a01e:	2300      	movs	r3, #0
 800a020:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a024:	e7f7      	b.n	800a016 <_Balloc+0x66>
 800a026:	bf00      	nop
 800a028:	0800c4b1 	.word	0x0800c4b1
 800a02c:	0800c531 	.word	0x0800c531

0800a030 <_Bfree>:
 800a030:	b570      	push	{r4, r5, r6, lr}
 800a032:	69c6      	ldr	r6, [r0, #28]
 800a034:	4605      	mov	r5, r0
 800a036:	460c      	mov	r4, r1
 800a038:	b976      	cbnz	r6, 800a058 <_Bfree+0x28>
 800a03a:	2010      	movs	r0, #16
 800a03c:	f7ff ff02 	bl	8009e44 <malloc>
 800a040:	4602      	mov	r2, r0
 800a042:	61e8      	str	r0, [r5, #28]
 800a044:	b920      	cbnz	r0, 800a050 <_Bfree+0x20>
 800a046:	4b09      	ldr	r3, [pc, #36]	@ (800a06c <_Bfree+0x3c>)
 800a048:	4809      	ldr	r0, [pc, #36]	@ (800a070 <_Bfree+0x40>)
 800a04a:	218f      	movs	r1, #143	@ 0x8f
 800a04c:	f000 ff26 	bl	800ae9c <__assert_func>
 800a050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a054:	6006      	str	r6, [r0, #0]
 800a056:	60c6      	str	r6, [r0, #12]
 800a058:	b13c      	cbz	r4, 800a06a <_Bfree+0x3a>
 800a05a:	69eb      	ldr	r3, [r5, #28]
 800a05c:	6862      	ldr	r2, [r4, #4]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a064:	6021      	str	r1, [r4, #0]
 800a066:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a06a:	bd70      	pop	{r4, r5, r6, pc}
 800a06c:	0800c4b1 	.word	0x0800c4b1
 800a070:	0800c531 	.word	0x0800c531

0800a074 <__multadd>:
 800a074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a078:	690d      	ldr	r5, [r1, #16]
 800a07a:	4607      	mov	r7, r0
 800a07c:	460c      	mov	r4, r1
 800a07e:	461e      	mov	r6, r3
 800a080:	f101 0c14 	add.w	ip, r1, #20
 800a084:	2000      	movs	r0, #0
 800a086:	f8dc 3000 	ldr.w	r3, [ip]
 800a08a:	b299      	uxth	r1, r3
 800a08c:	fb02 6101 	mla	r1, r2, r1, r6
 800a090:	0c1e      	lsrs	r6, r3, #16
 800a092:	0c0b      	lsrs	r3, r1, #16
 800a094:	fb02 3306 	mla	r3, r2, r6, r3
 800a098:	b289      	uxth	r1, r1
 800a09a:	3001      	adds	r0, #1
 800a09c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a0a0:	4285      	cmp	r5, r0
 800a0a2:	f84c 1b04 	str.w	r1, [ip], #4
 800a0a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a0aa:	dcec      	bgt.n	800a086 <__multadd+0x12>
 800a0ac:	b30e      	cbz	r6, 800a0f2 <__multadd+0x7e>
 800a0ae:	68a3      	ldr	r3, [r4, #8]
 800a0b0:	42ab      	cmp	r3, r5
 800a0b2:	dc19      	bgt.n	800a0e8 <__multadd+0x74>
 800a0b4:	6861      	ldr	r1, [r4, #4]
 800a0b6:	4638      	mov	r0, r7
 800a0b8:	3101      	adds	r1, #1
 800a0ba:	f7ff ff79 	bl	8009fb0 <_Balloc>
 800a0be:	4680      	mov	r8, r0
 800a0c0:	b928      	cbnz	r0, 800a0ce <__multadd+0x5a>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a0f8 <__multadd+0x84>)
 800a0c6:	480d      	ldr	r0, [pc, #52]	@ (800a0fc <__multadd+0x88>)
 800a0c8:	21ba      	movs	r1, #186	@ 0xba
 800a0ca:	f000 fee7 	bl	800ae9c <__assert_func>
 800a0ce:	6922      	ldr	r2, [r4, #16]
 800a0d0:	3202      	adds	r2, #2
 800a0d2:	f104 010c 	add.w	r1, r4, #12
 800a0d6:	0092      	lsls	r2, r2, #2
 800a0d8:	300c      	adds	r0, #12
 800a0da:	f7ff f80c 	bl	80090f6 <memcpy>
 800a0de:	4621      	mov	r1, r4
 800a0e0:	4638      	mov	r0, r7
 800a0e2:	f7ff ffa5 	bl	800a030 <_Bfree>
 800a0e6:	4644      	mov	r4, r8
 800a0e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a0ec:	3501      	adds	r5, #1
 800a0ee:	615e      	str	r6, [r3, #20]
 800a0f0:	6125      	str	r5, [r4, #16]
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0f8:	0800c520 	.word	0x0800c520
 800a0fc:	0800c531 	.word	0x0800c531

0800a100 <__hi0bits>:
 800a100:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a104:	4603      	mov	r3, r0
 800a106:	bf36      	itet	cc
 800a108:	0403      	lslcc	r3, r0, #16
 800a10a:	2000      	movcs	r0, #0
 800a10c:	2010      	movcc	r0, #16
 800a10e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a112:	bf3c      	itt	cc
 800a114:	021b      	lslcc	r3, r3, #8
 800a116:	3008      	addcc	r0, #8
 800a118:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a11c:	bf3c      	itt	cc
 800a11e:	011b      	lslcc	r3, r3, #4
 800a120:	3004      	addcc	r0, #4
 800a122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a126:	bf3c      	itt	cc
 800a128:	009b      	lslcc	r3, r3, #2
 800a12a:	3002      	addcc	r0, #2
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	db05      	blt.n	800a13c <__hi0bits+0x3c>
 800a130:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a134:	f100 0001 	add.w	r0, r0, #1
 800a138:	bf08      	it	eq
 800a13a:	2020      	moveq	r0, #32
 800a13c:	4770      	bx	lr

0800a13e <__lo0bits>:
 800a13e:	6803      	ldr	r3, [r0, #0]
 800a140:	4602      	mov	r2, r0
 800a142:	f013 0007 	ands.w	r0, r3, #7
 800a146:	d00b      	beq.n	800a160 <__lo0bits+0x22>
 800a148:	07d9      	lsls	r1, r3, #31
 800a14a:	d421      	bmi.n	800a190 <__lo0bits+0x52>
 800a14c:	0798      	lsls	r0, r3, #30
 800a14e:	bf49      	itett	mi
 800a150:	085b      	lsrmi	r3, r3, #1
 800a152:	089b      	lsrpl	r3, r3, #2
 800a154:	2001      	movmi	r0, #1
 800a156:	6013      	strmi	r3, [r2, #0]
 800a158:	bf5c      	itt	pl
 800a15a:	6013      	strpl	r3, [r2, #0]
 800a15c:	2002      	movpl	r0, #2
 800a15e:	4770      	bx	lr
 800a160:	b299      	uxth	r1, r3
 800a162:	b909      	cbnz	r1, 800a168 <__lo0bits+0x2a>
 800a164:	0c1b      	lsrs	r3, r3, #16
 800a166:	2010      	movs	r0, #16
 800a168:	b2d9      	uxtb	r1, r3
 800a16a:	b909      	cbnz	r1, 800a170 <__lo0bits+0x32>
 800a16c:	3008      	adds	r0, #8
 800a16e:	0a1b      	lsrs	r3, r3, #8
 800a170:	0719      	lsls	r1, r3, #28
 800a172:	bf04      	itt	eq
 800a174:	091b      	lsreq	r3, r3, #4
 800a176:	3004      	addeq	r0, #4
 800a178:	0799      	lsls	r1, r3, #30
 800a17a:	bf04      	itt	eq
 800a17c:	089b      	lsreq	r3, r3, #2
 800a17e:	3002      	addeq	r0, #2
 800a180:	07d9      	lsls	r1, r3, #31
 800a182:	d403      	bmi.n	800a18c <__lo0bits+0x4e>
 800a184:	085b      	lsrs	r3, r3, #1
 800a186:	f100 0001 	add.w	r0, r0, #1
 800a18a:	d003      	beq.n	800a194 <__lo0bits+0x56>
 800a18c:	6013      	str	r3, [r2, #0]
 800a18e:	4770      	bx	lr
 800a190:	2000      	movs	r0, #0
 800a192:	4770      	bx	lr
 800a194:	2020      	movs	r0, #32
 800a196:	4770      	bx	lr

0800a198 <__i2b>:
 800a198:	b510      	push	{r4, lr}
 800a19a:	460c      	mov	r4, r1
 800a19c:	2101      	movs	r1, #1
 800a19e:	f7ff ff07 	bl	8009fb0 <_Balloc>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	b928      	cbnz	r0, 800a1b2 <__i2b+0x1a>
 800a1a6:	4b05      	ldr	r3, [pc, #20]	@ (800a1bc <__i2b+0x24>)
 800a1a8:	4805      	ldr	r0, [pc, #20]	@ (800a1c0 <__i2b+0x28>)
 800a1aa:	f240 1145 	movw	r1, #325	@ 0x145
 800a1ae:	f000 fe75 	bl	800ae9c <__assert_func>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	6144      	str	r4, [r0, #20]
 800a1b6:	6103      	str	r3, [r0, #16]
 800a1b8:	bd10      	pop	{r4, pc}
 800a1ba:	bf00      	nop
 800a1bc:	0800c520 	.word	0x0800c520
 800a1c0:	0800c531 	.word	0x0800c531

0800a1c4 <__multiply>:
 800a1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c8:	4614      	mov	r4, r2
 800a1ca:	690a      	ldr	r2, [r1, #16]
 800a1cc:	6923      	ldr	r3, [r4, #16]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	bfa8      	it	ge
 800a1d2:	4623      	movge	r3, r4
 800a1d4:	460f      	mov	r7, r1
 800a1d6:	bfa4      	itt	ge
 800a1d8:	460c      	movge	r4, r1
 800a1da:	461f      	movge	r7, r3
 800a1dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a1e0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a1e4:	68a3      	ldr	r3, [r4, #8]
 800a1e6:	6861      	ldr	r1, [r4, #4]
 800a1e8:	eb0a 0609 	add.w	r6, sl, r9
 800a1ec:	42b3      	cmp	r3, r6
 800a1ee:	b085      	sub	sp, #20
 800a1f0:	bfb8      	it	lt
 800a1f2:	3101      	addlt	r1, #1
 800a1f4:	f7ff fedc 	bl	8009fb0 <_Balloc>
 800a1f8:	b930      	cbnz	r0, 800a208 <__multiply+0x44>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	4b44      	ldr	r3, [pc, #272]	@ (800a310 <__multiply+0x14c>)
 800a1fe:	4845      	ldr	r0, [pc, #276]	@ (800a314 <__multiply+0x150>)
 800a200:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a204:	f000 fe4a 	bl	800ae9c <__assert_func>
 800a208:	f100 0514 	add.w	r5, r0, #20
 800a20c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a210:	462b      	mov	r3, r5
 800a212:	2200      	movs	r2, #0
 800a214:	4543      	cmp	r3, r8
 800a216:	d321      	bcc.n	800a25c <__multiply+0x98>
 800a218:	f107 0114 	add.w	r1, r7, #20
 800a21c:	f104 0214 	add.w	r2, r4, #20
 800a220:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a224:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a228:	9302      	str	r3, [sp, #8]
 800a22a:	1b13      	subs	r3, r2, r4
 800a22c:	3b15      	subs	r3, #21
 800a22e:	f023 0303 	bic.w	r3, r3, #3
 800a232:	3304      	adds	r3, #4
 800a234:	f104 0715 	add.w	r7, r4, #21
 800a238:	42ba      	cmp	r2, r7
 800a23a:	bf38      	it	cc
 800a23c:	2304      	movcc	r3, #4
 800a23e:	9301      	str	r3, [sp, #4]
 800a240:	9b02      	ldr	r3, [sp, #8]
 800a242:	9103      	str	r1, [sp, #12]
 800a244:	428b      	cmp	r3, r1
 800a246:	d80c      	bhi.n	800a262 <__multiply+0x9e>
 800a248:	2e00      	cmp	r6, #0
 800a24a:	dd03      	ble.n	800a254 <__multiply+0x90>
 800a24c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a250:	2b00      	cmp	r3, #0
 800a252:	d05b      	beq.n	800a30c <__multiply+0x148>
 800a254:	6106      	str	r6, [r0, #16]
 800a256:	b005      	add	sp, #20
 800a258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25c:	f843 2b04 	str.w	r2, [r3], #4
 800a260:	e7d8      	b.n	800a214 <__multiply+0x50>
 800a262:	f8b1 a000 	ldrh.w	sl, [r1]
 800a266:	f1ba 0f00 	cmp.w	sl, #0
 800a26a:	d024      	beq.n	800a2b6 <__multiply+0xf2>
 800a26c:	f104 0e14 	add.w	lr, r4, #20
 800a270:	46a9      	mov	r9, r5
 800a272:	f04f 0c00 	mov.w	ip, #0
 800a276:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a27a:	f8d9 3000 	ldr.w	r3, [r9]
 800a27e:	fa1f fb87 	uxth.w	fp, r7
 800a282:	b29b      	uxth	r3, r3
 800a284:	fb0a 330b 	mla	r3, sl, fp, r3
 800a288:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a28c:	f8d9 7000 	ldr.w	r7, [r9]
 800a290:	4463      	add	r3, ip
 800a292:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a296:	fb0a c70b 	mla	r7, sl, fp, ip
 800a29a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a2a4:	4572      	cmp	r2, lr
 800a2a6:	f849 3b04 	str.w	r3, [r9], #4
 800a2aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a2ae:	d8e2      	bhi.n	800a276 <__multiply+0xb2>
 800a2b0:	9b01      	ldr	r3, [sp, #4]
 800a2b2:	f845 c003 	str.w	ip, [r5, r3]
 800a2b6:	9b03      	ldr	r3, [sp, #12]
 800a2b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a2bc:	3104      	adds	r1, #4
 800a2be:	f1b9 0f00 	cmp.w	r9, #0
 800a2c2:	d021      	beq.n	800a308 <__multiply+0x144>
 800a2c4:	682b      	ldr	r3, [r5, #0]
 800a2c6:	f104 0c14 	add.w	ip, r4, #20
 800a2ca:	46ae      	mov	lr, r5
 800a2cc:	f04f 0a00 	mov.w	sl, #0
 800a2d0:	f8bc b000 	ldrh.w	fp, [ip]
 800a2d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a2d8:	fb09 770b 	mla	r7, r9, fp, r7
 800a2dc:	4457      	add	r7, sl
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a2e4:	f84e 3b04 	str.w	r3, [lr], #4
 800a2e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a2ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a2f0:	f8be 3000 	ldrh.w	r3, [lr]
 800a2f4:	fb09 330a 	mla	r3, r9, sl, r3
 800a2f8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a2fc:	4562      	cmp	r2, ip
 800a2fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a302:	d8e5      	bhi.n	800a2d0 <__multiply+0x10c>
 800a304:	9f01      	ldr	r7, [sp, #4]
 800a306:	51eb      	str	r3, [r5, r7]
 800a308:	3504      	adds	r5, #4
 800a30a:	e799      	b.n	800a240 <__multiply+0x7c>
 800a30c:	3e01      	subs	r6, #1
 800a30e:	e79b      	b.n	800a248 <__multiply+0x84>
 800a310:	0800c520 	.word	0x0800c520
 800a314:	0800c531 	.word	0x0800c531

0800a318 <__pow5mult>:
 800a318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a31c:	4615      	mov	r5, r2
 800a31e:	f012 0203 	ands.w	r2, r2, #3
 800a322:	4607      	mov	r7, r0
 800a324:	460e      	mov	r6, r1
 800a326:	d007      	beq.n	800a338 <__pow5mult+0x20>
 800a328:	4c25      	ldr	r4, [pc, #148]	@ (800a3c0 <__pow5mult+0xa8>)
 800a32a:	3a01      	subs	r2, #1
 800a32c:	2300      	movs	r3, #0
 800a32e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a332:	f7ff fe9f 	bl	800a074 <__multadd>
 800a336:	4606      	mov	r6, r0
 800a338:	10ad      	asrs	r5, r5, #2
 800a33a:	d03d      	beq.n	800a3b8 <__pow5mult+0xa0>
 800a33c:	69fc      	ldr	r4, [r7, #28]
 800a33e:	b97c      	cbnz	r4, 800a360 <__pow5mult+0x48>
 800a340:	2010      	movs	r0, #16
 800a342:	f7ff fd7f 	bl	8009e44 <malloc>
 800a346:	4602      	mov	r2, r0
 800a348:	61f8      	str	r0, [r7, #28]
 800a34a:	b928      	cbnz	r0, 800a358 <__pow5mult+0x40>
 800a34c:	4b1d      	ldr	r3, [pc, #116]	@ (800a3c4 <__pow5mult+0xac>)
 800a34e:	481e      	ldr	r0, [pc, #120]	@ (800a3c8 <__pow5mult+0xb0>)
 800a350:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a354:	f000 fda2 	bl	800ae9c <__assert_func>
 800a358:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a35c:	6004      	str	r4, [r0, #0]
 800a35e:	60c4      	str	r4, [r0, #12]
 800a360:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a364:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a368:	b94c      	cbnz	r4, 800a37e <__pow5mult+0x66>
 800a36a:	f240 2171 	movw	r1, #625	@ 0x271
 800a36e:	4638      	mov	r0, r7
 800a370:	f7ff ff12 	bl	800a198 <__i2b>
 800a374:	2300      	movs	r3, #0
 800a376:	f8c8 0008 	str.w	r0, [r8, #8]
 800a37a:	4604      	mov	r4, r0
 800a37c:	6003      	str	r3, [r0, #0]
 800a37e:	f04f 0900 	mov.w	r9, #0
 800a382:	07eb      	lsls	r3, r5, #31
 800a384:	d50a      	bpl.n	800a39c <__pow5mult+0x84>
 800a386:	4631      	mov	r1, r6
 800a388:	4622      	mov	r2, r4
 800a38a:	4638      	mov	r0, r7
 800a38c:	f7ff ff1a 	bl	800a1c4 <__multiply>
 800a390:	4631      	mov	r1, r6
 800a392:	4680      	mov	r8, r0
 800a394:	4638      	mov	r0, r7
 800a396:	f7ff fe4b 	bl	800a030 <_Bfree>
 800a39a:	4646      	mov	r6, r8
 800a39c:	106d      	asrs	r5, r5, #1
 800a39e:	d00b      	beq.n	800a3b8 <__pow5mult+0xa0>
 800a3a0:	6820      	ldr	r0, [r4, #0]
 800a3a2:	b938      	cbnz	r0, 800a3b4 <__pow5mult+0x9c>
 800a3a4:	4622      	mov	r2, r4
 800a3a6:	4621      	mov	r1, r4
 800a3a8:	4638      	mov	r0, r7
 800a3aa:	f7ff ff0b 	bl	800a1c4 <__multiply>
 800a3ae:	6020      	str	r0, [r4, #0]
 800a3b0:	f8c0 9000 	str.w	r9, [r0]
 800a3b4:	4604      	mov	r4, r0
 800a3b6:	e7e4      	b.n	800a382 <__pow5mult+0x6a>
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3be:	bf00      	nop
 800a3c0:	0800c58c 	.word	0x0800c58c
 800a3c4:	0800c4b1 	.word	0x0800c4b1
 800a3c8:	0800c531 	.word	0x0800c531

0800a3cc <__lshift>:
 800a3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3d0:	460c      	mov	r4, r1
 800a3d2:	6849      	ldr	r1, [r1, #4]
 800a3d4:	6923      	ldr	r3, [r4, #16]
 800a3d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a3da:	68a3      	ldr	r3, [r4, #8]
 800a3dc:	4607      	mov	r7, r0
 800a3de:	4691      	mov	r9, r2
 800a3e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a3e4:	f108 0601 	add.w	r6, r8, #1
 800a3e8:	42b3      	cmp	r3, r6
 800a3ea:	db0b      	blt.n	800a404 <__lshift+0x38>
 800a3ec:	4638      	mov	r0, r7
 800a3ee:	f7ff fddf 	bl	8009fb0 <_Balloc>
 800a3f2:	4605      	mov	r5, r0
 800a3f4:	b948      	cbnz	r0, 800a40a <__lshift+0x3e>
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	4b28      	ldr	r3, [pc, #160]	@ (800a49c <__lshift+0xd0>)
 800a3fa:	4829      	ldr	r0, [pc, #164]	@ (800a4a0 <__lshift+0xd4>)
 800a3fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a400:	f000 fd4c 	bl	800ae9c <__assert_func>
 800a404:	3101      	adds	r1, #1
 800a406:	005b      	lsls	r3, r3, #1
 800a408:	e7ee      	b.n	800a3e8 <__lshift+0x1c>
 800a40a:	2300      	movs	r3, #0
 800a40c:	f100 0114 	add.w	r1, r0, #20
 800a410:	f100 0210 	add.w	r2, r0, #16
 800a414:	4618      	mov	r0, r3
 800a416:	4553      	cmp	r3, sl
 800a418:	db33      	blt.n	800a482 <__lshift+0xb6>
 800a41a:	6920      	ldr	r0, [r4, #16]
 800a41c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a420:	f104 0314 	add.w	r3, r4, #20
 800a424:	f019 091f 	ands.w	r9, r9, #31
 800a428:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a42c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a430:	d02b      	beq.n	800a48a <__lshift+0xbe>
 800a432:	f1c9 0e20 	rsb	lr, r9, #32
 800a436:	468a      	mov	sl, r1
 800a438:	2200      	movs	r2, #0
 800a43a:	6818      	ldr	r0, [r3, #0]
 800a43c:	fa00 f009 	lsl.w	r0, r0, r9
 800a440:	4310      	orrs	r0, r2
 800a442:	f84a 0b04 	str.w	r0, [sl], #4
 800a446:	f853 2b04 	ldr.w	r2, [r3], #4
 800a44a:	459c      	cmp	ip, r3
 800a44c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a450:	d8f3      	bhi.n	800a43a <__lshift+0x6e>
 800a452:	ebac 0304 	sub.w	r3, ip, r4
 800a456:	3b15      	subs	r3, #21
 800a458:	f023 0303 	bic.w	r3, r3, #3
 800a45c:	3304      	adds	r3, #4
 800a45e:	f104 0015 	add.w	r0, r4, #21
 800a462:	4584      	cmp	ip, r0
 800a464:	bf38      	it	cc
 800a466:	2304      	movcc	r3, #4
 800a468:	50ca      	str	r2, [r1, r3]
 800a46a:	b10a      	cbz	r2, 800a470 <__lshift+0xa4>
 800a46c:	f108 0602 	add.w	r6, r8, #2
 800a470:	3e01      	subs	r6, #1
 800a472:	4638      	mov	r0, r7
 800a474:	612e      	str	r6, [r5, #16]
 800a476:	4621      	mov	r1, r4
 800a478:	f7ff fdda 	bl	800a030 <_Bfree>
 800a47c:	4628      	mov	r0, r5
 800a47e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a482:	f842 0f04 	str.w	r0, [r2, #4]!
 800a486:	3301      	adds	r3, #1
 800a488:	e7c5      	b.n	800a416 <__lshift+0x4a>
 800a48a:	3904      	subs	r1, #4
 800a48c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a490:	f841 2f04 	str.w	r2, [r1, #4]!
 800a494:	459c      	cmp	ip, r3
 800a496:	d8f9      	bhi.n	800a48c <__lshift+0xc0>
 800a498:	e7ea      	b.n	800a470 <__lshift+0xa4>
 800a49a:	bf00      	nop
 800a49c:	0800c520 	.word	0x0800c520
 800a4a0:	0800c531 	.word	0x0800c531

0800a4a4 <__mcmp>:
 800a4a4:	690a      	ldr	r2, [r1, #16]
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	6900      	ldr	r0, [r0, #16]
 800a4aa:	1a80      	subs	r0, r0, r2
 800a4ac:	b530      	push	{r4, r5, lr}
 800a4ae:	d10e      	bne.n	800a4ce <__mcmp+0x2a>
 800a4b0:	3314      	adds	r3, #20
 800a4b2:	3114      	adds	r1, #20
 800a4b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a4b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a4bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a4c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a4c4:	4295      	cmp	r5, r2
 800a4c6:	d003      	beq.n	800a4d0 <__mcmp+0x2c>
 800a4c8:	d205      	bcs.n	800a4d6 <__mcmp+0x32>
 800a4ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ce:	bd30      	pop	{r4, r5, pc}
 800a4d0:	42a3      	cmp	r3, r4
 800a4d2:	d3f3      	bcc.n	800a4bc <__mcmp+0x18>
 800a4d4:	e7fb      	b.n	800a4ce <__mcmp+0x2a>
 800a4d6:	2001      	movs	r0, #1
 800a4d8:	e7f9      	b.n	800a4ce <__mcmp+0x2a>
	...

0800a4dc <__mdiff>:
 800a4dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e0:	4689      	mov	r9, r1
 800a4e2:	4606      	mov	r6, r0
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	4648      	mov	r0, r9
 800a4e8:	4614      	mov	r4, r2
 800a4ea:	f7ff ffdb 	bl	800a4a4 <__mcmp>
 800a4ee:	1e05      	subs	r5, r0, #0
 800a4f0:	d112      	bne.n	800a518 <__mdiff+0x3c>
 800a4f2:	4629      	mov	r1, r5
 800a4f4:	4630      	mov	r0, r6
 800a4f6:	f7ff fd5b 	bl	8009fb0 <_Balloc>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	b928      	cbnz	r0, 800a50a <__mdiff+0x2e>
 800a4fe:	4b3f      	ldr	r3, [pc, #252]	@ (800a5fc <__mdiff+0x120>)
 800a500:	f240 2137 	movw	r1, #567	@ 0x237
 800a504:	483e      	ldr	r0, [pc, #248]	@ (800a600 <__mdiff+0x124>)
 800a506:	f000 fcc9 	bl	800ae9c <__assert_func>
 800a50a:	2301      	movs	r3, #1
 800a50c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a510:	4610      	mov	r0, r2
 800a512:	b003      	add	sp, #12
 800a514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a518:	bfbc      	itt	lt
 800a51a:	464b      	movlt	r3, r9
 800a51c:	46a1      	movlt	r9, r4
 800a51e:	4630      	mov	r0, r6
 800a520:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a524:	bfba      	itte	lt
 800a526:	461c      	movlt	r4, r3
 800a528:	2501      	movlt	r5, #1
 800a52a:	2500      	movge	r5, #0
 800a52c:	f7ff fd40 	bl	8009fb0 <_Balloc>
 800a530:	4602      	mov	r2, r0
 800a532:	b918      	cbnz	r0, 800a53c <__mdiff+0x60>
 800a534:	4b31      	ldr	r3, [pc, #196]	@ (800a5fc <__mdiff+0x120>)
 800a536:	f240 2145 	movw	r1, #581	@ 0x245
 800a53a:	e7e3      	b.n	800a504 <__mdiff+0x28>
 800a53c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a540:	6926      	ldr	r6, [r4, #16]
 800a542:	60c5      	str	r5, [r0, #12]
 800a544:	f109 0310 	add.w	r3, r9, #16
 800a548:	f109 0514 	add.w	r5, r9, #20
 800a54c:	f104 0e14 	add.w	lr, r4, #20
 800a550:	f100 0b14 	add.w	fp, r0, #20
 800a554:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a558:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a55c:	9301      	str	r3, [sp, #4]
 800a55e:	46d9      	mov	r9, fp
 800a560:	f04f 0c00 	mov.w	ip, #0
 800a564:	9b01      	ldr	r3, [sp, #4]
 800a566:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a56a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a56e:	9301      	str	r3, [sp, #4]
 800a570:	fa1f f38a 	uxth.w	r3, sl
 800a574:	4619      	mov	r1, r3
 800a576:	b283      	uxth	r3, r0
 800a578:	1acb      	subs	r3, r1, r3
 800a57a:	0c00      	lsrs	r0, r0, #16
 800a57c:	4463      	add	r3, ip
 800a57e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a582:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a586:	b29b      	uxth	r3, r3
 800a588:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a58c:	4576      	cmp	r6, lr
 800a58e:	f849 3b04 	str.w	r3, [r9], #4
 800a592:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a596:	d8e5      	bhi.n	800a564 <__mdiff+0x88>
 800a598:	1b33      	subs	r3, r6, r4
 800a59a:	3b15      	subs	r3, #21
 800a59c:	f023 0303 	bic.w	r3, r3, #3
 800a5a0:	3415      	adds	r4, #21
 800a5a2:	3304      	adds	r3, #4
 800a5a4:	42a6      	cmp	r6, r4
 800a5a6:	bf38      	it	cc
 800a5a8:	2304      	movcc	r3, #4
 800a5aa:	441d      	add	r5, r3
 800a5ac:	445b      	add	r3, fp
 800a5ae:	461e      	mov	r6, r3
 800a5b0:	462c      	mov	r4, r5
 800a5b2:	4544      	cmp	r4, r8
 800a5b4:	d30e      	bcc.n	800a5d4 <__mdiff+0xf8>
 800a5b6:	f108 0103 	add.w	r1, r8, #3
 800a5ba:	1b49      	subs	r1, r1, r5
 800a5bc:	f021 0103 	bic.w	r1, r1, #3
 800a5c0:	3d03      	subs	r5, #3
 800a5c2:	45a8      	cmp	r8, r5
 800a5c4:	bf38      	it	cc
 800a5c6:	2100      	movcc	r1, #0
 800a5c8:	440b      	add	r3, r1
 800a5ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a5ce:	b191      	cbz	r1, 800a5f6 <__mdiff+0x11a>
 800a5d0:	6117      	str	r7, [r2, #16]
 800a5d2:	e79d      	b.n	800a510 <__mdiff+0x34>
 800a5d4:	f854 1b04 	ldr.w	r1, [r4], #4
 800a5d8:	46e6      	mov	lr, ip
 800a5da:	0c08      	lsrs	r0, r1, #16
 800a5dc:	fa1c fc81 	uxtah	ip, ip, r1
 800a5e0:	4471      	add	r1, lr
 800a5e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a5e6:	b289      	uxth	r1, r1
 800a5e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a5ec:	f846 1b04 	str.w	r1, [r6], #4
 800a5f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a5f4:	e7dd      	b.n	800a5b2 <__mdiff+0xd6>
 800a5f6:	3f01      	subs	r7, #1
 800a5f8:	e7e7      	b.n	800a5ca <__mdiff+0xee>
 800a5fa:	bf00      	nop
 800a5fc:	0800c520 	.word	0x0800c520
 800a600:	0800c531 	.word	0x0800c531

0800a604 <__d2b>:
 800a604:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a608:	460f      	mov	r7, r1
 800a60a:	2101      	movs	r1, #1
 800a60c:	ec59 8b10 	vmov	r8, r9, d0
 800a610:	4616      	mov	r6, r2
 800a612:	f7ff fccd 	bl	8009fb0 <_Balloc>
 800a616:	4604      	mov	r4, r0
 800a618:	b930      	cbnz	r0, 800a628 <__d2b+0x24>
 800a61a:	4602      	mov	r2, r0
 800a61c:	4b23      	ldr	r3, [pc, #140]	@ (800a6ac <__d2b+0xa8>)
 800a61e:	4824      	ldr	r0, [pc, #144]	@ (800a6b0 <__d2b+0xac>)
 800a620:	f240 310f 	movw	r1, #783	@ 0x30f
 800a624:	f000 fc3a 	bl	800ae9c <__assert_func>
 800a628:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a62c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a630:	b10d      	cbz	r5, 800a636 <__d2b+0x32>
 800a632:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a636:	9301      	str	r3, [sp, #4]
 800a638:	f1b8 0300 	subs.w	r3, r8, #0
 800a63c:	d023      	beq.n	800a686 <__d2b+0x82>
 800a63e:	4668      	mov	r0, sp
 800a640:	9300      	str	r3, [sp, #0]
 800a642:	f7ff fd7c 	bl	800a13e <__lo0bits>
 800a646:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a64a:	b1d0      	cbz	r0, 800a682 <__d2b+0x7e>
 800a64c:	f1c0 0320 	rsb	r3, r0, #32
 800a650:	fa02 f303 	lsl.w	r3, r2, r3
 800a654:	430b      	orrs	r3, r1
 800a656:	40c2      	lsrs	r2, r0
 800a658:	6163      	str	r3, [r4, #20]
 800a65a:	9201      	str	r2, [sp, #4]
 800a65c:	9b01      	ldr	r3, [sp, #4]
 800a65e:	61a3      	str	r3, [r4, #24]
 800a660:	2b00      	cmp	r3, #0
 800a662:	bf0c      	ite	eq
 800a664:	2201      	moveq	r2, #1
 800a666:	2202      	movne	r2, #2
 800a668:	6122      	str	r2, [r4, #16]
 800a66a:	b1a5      	cbz	r5, 800a696 <__d2b+0x92>
 800a66c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a670:	4405      	add	r5, r0
 800a672:	603d      	str	r5, [r7, #0]
 800a674:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a678:	6030      	str	r0, [r6, #0]
 800a67a:	4620      	mov	r0, r4
 800a67c:	b003      	add	sp, #12
 800a67e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a682:	6161      	str	r1, [r4, #20]
 800a684:	e7ea      	b.n	800a65c <__d2b+0x58>
 800a686:	a801      	add	r0, sp, #4
 800a688:	f7ff fd59 	bl	800a13e <__lo0bits>
 800a68c:	9b01      	ldr	r3, [sp, #4]
 800a68e:	6163      	str	r3, [r4, #20]
 800a690:	3020      	adds	r0, #32
 800a692:	2201      	movs	r2, #1
 800a694:	e7e8      	b.n	800a668 <__d2b+0x64>
 800a696:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a69a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a69e:	6038      	str	r0, [r7, #0]
 800a6a0:	6918      	ldr	r0, [r3, #16]
 800a6a2:	f7ff fd2d 	bl	800a100 <__hi0bits>
 800a6a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6aa:	e7e5      	b.n	800a678 <__d2b+0x74>
 800a6ac:	0800c520 	.word	0x0800c520
 800a6b0:	0800c531 	.word	0x0800c531

0800a6b4 <__ssputs_r>:
 800a6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b8:	688e      	ldr	r6, [r1, #8]
 800a6ba:	461f      	mov	r7, r3
 800a6bc:	42be      	cmp	r6, r7
 800a6be:	680b      	ldr	r3, [r1, #0]
 800a6c0:	4682      	mov	sl, r0
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	4690      	mov	r8, r2
 800a6c6:	d82d      	bhi.n	800a724 <__ssputs_r+0x70>
 800a6c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a6d0:	d026      	beq.n	800a720 <__ssputs_r+0x6c>
 800a6d2:	6965      	ldr	r5, [r4, #20]
 800a6d4:	6909      	ldr	r1, [r1, #16]
 800a6d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6da:	eba3 0901 	sub.w	r9, r3, r1
 800a6de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6e2:	1c7b      	adds	r3, r7, #1
 800a6e4:	444b      	add	r3, r9
 800a6e6:	106d      	asrs	r5, r5, #1
 800a6e8:	429d      	cmp	r5, r3
 800a6ea:	bf38      	it	cc
 800a6ec:	461d      	movcc	r5, r3
 800a6ee:	0553      	lsls	r3, r2, #21
 800a6f0:	d527      	bpl.n	800a742 <__ssputs_r+0x8e>
 800a6f2:	4629      	mov	r1, r5
 800a6f4:	f7ff fbd0 	bl	8009e98 <_malloc_r>
 800a6f8:	4606      	mov	r6, r0
 800a6fa:	b360      	cbz	r0, 800a756 <__ssputs_r+0xa2>
 800a6fc:	6921      	ldr	r1, [r4, #16]
 800a6fe:	464a      	mov	r2, r9
 800a700:	f7fe fcf9 	bl	80090f6 <memcpy>
 800a704:	89a3      	ldrh	r3, [r4, #12]
 800a706:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a70a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a70e:	81a3      	strh	r3, [r4, #12]
 800a710:	6126      	str	r6, [r4, #16]
 800a712:	6165      	str	r5, [r4, #20]
 800a714:	444e      	add	r6, r9
 800a716:	eba5 0509 	sub.w	r5, r5, r9
 800a71a:	6026      	str	r6, [r4, #0]
 800a71c:	60a5      	str	r5, [r4, #8]
 800a71e:	463e      	mov	r6, r7
 800a720:	42be      	cmp	r6, r7
 800a722:	d900      	bls.n	800a726 <__ssputs_r+0x72>
 800a724:	463e      	mov	r6, r7
 800a726:	6820      	ldr	r0, [r4, #0]
 800a728:	4632      	mov	r2, r6
 800a72a:	4641      	mov	r1, r8
 800a72c:	f000 fb6a 	bl	800ae04 <memmove>
 800a730:	68a3      	ldr	r3, [r4, #8]
 800a732:	1b9b      	subs	r3, r3, r6
 800a734:	60a3      	str	r3, [r4, #8]
 800a736:	6823      	ldr	r3, [r4, #0]
 800a738:	4433      	add	r3, r6
 800a73a:	6023      	str	r3, [r4, #0]
 800a73c:	2000      	movs	r0, #0
 800a73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a742:	462a      	mov	r2, r5
 800a744:	f000 fbee 	bl	800af24 <_realloc_r>
 800a748:	4606      	mov	r6, r0
 800a74a:	2800      	cmp	r0, #0
 800a74c:	d1e0      	bne.n	800a710 <__ssputs_r+0x5c>
 800a74e:	6921      	ldr	r1, [r4, #16]
 800a750:	4650      	mov	r0, sl
 800a752:	f7ff fb2d 	bl	8009db0 <_free_r>
 800a756:	230c      	movs	r3, #12
 800a758:	f8ca 3000 	str.w	r3, [sl]
 800a75c:	89a3      	ldrh	r3, [r4, #12]
 800a75e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a762:	81a3      	strh	r3, [r4, #12]
 800a764:	f04f 30ff 	mov.w	r0, #4294967295
 800a768:	e7e9      	b.n	800a73e <__ssputs_r+0x8a>
	...

0800a76c <_svfiprintf_r>:
 800a76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a770:	4698      	mov	r8, r3
 800a772:	898b      	ldrh	r3, [r1, #12]
 800a774:	061b      	lsls	r3, r3, #24
 800a776:	b09d      	sub	sp, #116	@ 0x74
 800a778:	4607      	mov	r7, r0
 800a77a:	460d      	mov	r5, r1
 800a77c:	4614      	mov	r4, r2
 800a77e:	d510      	bpl.n	800a7a2 <_svfiprintf_r+0x36>
 800a780:	690b      	ldr	r3, [r1, #16]
 800a782:	b973      	cbnz	r3, 800a7a2 <_svfiprintf_r+0x36>
 800a784:	2140      	movs	r1, #64	@ 0x40
 800a786:	f7ff fb87 	bl	8009e98 <_malloc_r>
 800a78a:	6028      	str	r0, [r5, #0]
 800a78c:	6128      	str	r0, [r5, #16]
 800a78e:	b930      	cbnz	r0, 800a79e <_svfiprintf_r+0x32>
 800a790:	230c      	movs	r3, #12
 800a792:	603b      	str	r3, [r7, #0]
 800a794:	f04f 30ff 	mov.w	r0, #4294967295
 800a798:	b01d      	add	sp, #116	@ 0x74
 800a79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a79e:	2340      	movs	r3, #64	@ 0x40
 800a7a0:	616b      	str	r3, [r5, #20]
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7a6:	2320      	movs	r3, #32
 800a7a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a7ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7b0:	2330      	movs	r3, #48	@ 0x30
 800a7b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a950 <_svfiprintf_r+0x1e4>
 800a7b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a7ba:	f04f 0901 	mov.w	r9, #1
 800a7be:	4623      	mov	r3, r4
 800a7c0:	469a      	mov	sl, r3
 800a7c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7c6:	b10a      	cbz	r2, 800a7cc <_svfiprintf_r+0x60>
 800a7c8:	2a25      	cmp	r2, #37	@ 0x25
 800a7ca:	d1f9      	bne.n	800a7c0 <_svfiprintf_r+0x54>
 800a7cc:	ebba 0b04 	subs.w	fp, sl, r4
 800a7d0:	d00b      	beq.n	800a7ea <_svfiprintf_r+0x7e>
 800a7d2:	465b      	mov	r3, fp
 800a7d4:	4622      	mov	r2, r4
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	4638      	mov	r0, r7
 800a7da:	f7ff ff6b 	bl	800a6b4 <__ssputs_r>
 800a7de:	3001      	adds	r0, #1
 800a7e0:	f000 80a7 	beq.w	800a932 <_svfiprintf_r+0x1c6>
 800a7e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7e6:	445a      	add	r2, fp
 800a7e8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a7ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f000 809f 	beq.w	800a932 <_svfiprintf_r+0x1c6>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7fe:	f10a 0a01 	add.w	sl, sl, #1
 800a802:	9304      	str	r3, [sp, #16]
 800a804:	9307      	str	r3, [sp, #28]
 800a806:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a80a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a80c:	4654      	mov	r4, sl
 800a80e:	2205      	movs	r2, #5
 800a810:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a814:	484e      	ldr	r0, [pc, #312]	@ (800a950 <_svfiprintf_r+0x1e4>)
 800a816:	f7f5 fcfb 	bl	8000210 <memchr>
 800a81a:	9a04      	ldr	r2, [sp, #16]
 800a81c:	b9d8      	cbnz	r0, 800a856 <_svfiprintf_r+0xea>
 800a81e:	06d0      	lsls	r0, r2, #27
 800a820:	bf44      	itt	mi
 800a822:	2320      	movmi	r3, #32
 800a824:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a828:	0711      	lsls	r1, r2, #28
 800a82a:	bf44      	itt	mi
 800a82c:	232b      	movmi	r3, #43	@ 0x2b
 800a82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a832:	f89a 3000 	ldrb.w	r3, [sl]
 800a836:	2b2a      	cmp	r3, #42	@ 0x2a
 800a838:	d015      	beq.n	800a866 <_svfiprintf_r+0xfa>
 800a83a:	9a07      	ldr	r2, [sp, #28]
 800a83c:	4654      	mov	r4, sl
 800a83e:	2000      	movs	r0, #0
 800a840:	f04f 0c0a 	mov.w	ip, #10
 800a844:	4621      	mov	r1, r4
 800a846:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a84a:	3b30      	subs	r3, #48	@ 0x30
 800a84c:	2b09      	cmp	r3, #9
 800a84e:	d94b      	bls.n	800a8e8 <_svfiprintf_r+0x17c>
 800a850:	b1b0      	cbz	r0, 800a880 <_svfiprintf_r+0x114>
 800a852:	9207      	str	r2, [sp, #28]
 800a854:	e014      	b.n	800a880 <_svfiprintf_r+0x114>
 800a856:	eba0 0308 	sub.w	r3, r0, r8
 800a85a:	fa09 f303 	lsl.w	r3, r9, r3
 800a85e:	4313      	orrs	r3, r2
 800a860:	9304      	str	r3, [sp, #16]
 800a862:	46a2      	mov	sl, r4
 800a864:	e7d2      	b.n	800a80c <_svfiprintf_r+0xa0>
 800a866:	9b03      	ldr	r3, [sp, #12]
 800a868:	1d19      	adds	r1, r3, #4
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	9103      	str	r1, [sp, #12]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	bfbb      	ittet	lt
 800a872:	425b      	neglt	r3, r3
 800a874:	f042 0202 	orrlt.w	r2, r2, #2
 800a878:	9307      	strge	r3, [sp, #28]
 800a87a:	9307      	strlt	r3, [sp, #28]
 800a87c:	bfb8      	it	lt
 800a87e:	9204      	strlt	r2, [sp, #16]
 800a880:	7823      	ldrb	r3, [r4, #0]
 800a882:	2b2e      	cmp	r3, #46	@ 0x2e
 800a884:	d10a      	bne.n	800a89c <_svfiprintf_r+0x130>
 800a886:	7863      	ldrb	r3, [r4, #1]
 800a888:	2b2a      	cmp	r3, #42	@ 0x2a
 800a88a:	d132      	bne.n	800a8f2 <_svfiprintf_r+0x186>
 800a88c:	9b03      	ldr	r3, [sp, #12]
 800a88e:	1d1a      	adds	r2, r3, #4
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	9203      	str	r2, [sp, #12]
 800a894:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a898:	3402      	adds	r4, #2
 800a89a:	9305      	str	r3, [sp, #20]
 800a89c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a960 <_svfiprintf_r+0x1f4>
 800a8a0:	7821      	ldrb	r1, [r4, #0]
 800a8a2:	2203      	movs	r2, #3
 800a8a4:	4650      	mov	r0, sl
 800a8a6:	f7f5 fcb3 	bl	8000210 <memchr>
 800a8aa:	b138      	cbz	r0, 800a8bc <_svfiprintf_r+0x150>
 800a8ac:	9b04      	ldr	r3, [sp, #16]
 800a8ae:	eba0 000a 	sub.w	r0, r0, sl
 800a8b2:	2240      	movs	r2, #64	@ 0x40
 800a8b4:	4082      	lsls	r2, r0
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	3401      	adds	r4, #1
 800a8ba:	9304      	str	r3, [sp, #16]
 800a8bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8c0:	4824      	ldr	r0, [pc, #144]	@ (800a954 <_svfiprintf_r+0x1e8>)
 800a8c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a8c6:	2206      	movs	r2, #6
 800a8c8:	f7f5 fca2 	bl	8000210 <memchr>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	d036      	beq.n	800a93e <_svfiprintf_r+0x1d2>
 800a8d0:	4b21      	ldr	r3, [pc, #132]	@ (800a958 <_svfiprintf_r+0x1ec>)
 800a8d2:	bb1b      	cbnz	r3, 800a91c <_svfiprintf_r+0x1b0>
 800a8d4:	9b03      	ldr	r3, [sp, #12]
 800a8d6:	3307      	adds	r3, #7
 800a8d8:	f023 0307 	bic.w	r3, r3, #7
 800a8dc:	3308      	adds	r3, #8
 800a8de:	9303      	str	r3, [sp, #12]
 800a8e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8e2:	4433      	add	r3, r6
 800a8e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8e6:	e76a      	b.n	800a7be <_svfiprintf_r+0x52>
 800a8e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8ec:	460c      	mov	r4, r1
 800a8ee:	2001      	movs	r0, #1
 800a8f0:	e7a8      	b.n	800a844 <_svfiprintf_r+0xd8>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	3401      	adds	r4, #1
 800a8f6:	9305      	str	r3, [sp, #20]
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	f04f 0c0a 	mov.w	ip, #10
 800a8fe:	4620      	mov	r0, r4
 800a900:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a904:	3a30      	subs	r2, #48	@ 0x30
 800a906:	2a09      	cmp	r2, #9
 800a908:	d903      	bls.n	800a912 <_svfiprintf_r+0x1a6>
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d0c6      	beq.n	800a89c <_svfiprintf_r+0x130>
 800a90e:	9105      	str	r1, [sp, #20]
 800a910:	e7c4      	b.n	800a89c <_svfiprintf_r+0x130>
 800a912:	fb0c 2101 	mla	r1, ip, r1, r2
 800a916:	4604      	mov	r4, r0
 800a918:	2301      	movs	r3, #1
 800a91a:	e7f0      	b.n	800a8fe <_svfiprintf_r+0x192>
 800a91c:	ab03      	add	r3, sp, #12
 800a91e:	9300      	str	r3, [sp, #0]
 800a920:	462a      	mov	r2, r5
 800a922:	4b0e      	ldr	r3, [pc, #56]	@ (800a95c <_svfiprintf_r+0x1f0>)
 800a924:	a904      	add	r1, sp, #16
 800a926:	4638      	mov	r0, r7
 800a928:	f7fd fd84 	bl	8008434 <_printf_float>
 800a92c:	1c42      	adds	r2, r0, #1
 800a92e:	4606      	mov	r6, r0
 800a930:	d1d6      	bne.n	800a8e0 <_svfiprintf_r+0x174>
 800a932:	89ab      	ldrh	r3, [r5, #12]
 800a934:	065b      	lsls	r3, r3, #25
 800a936:	f53f af2d 	bmi.w	800a794 <_svfiprintf_r+0x28>
 800a93a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a93c:	e72c      	b.n	800a798 <_svfiprintf_r+0x2c>
 800a93e:	ab03      	add	r3, sp, #12
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	462a      	mov	r2, r5
 800a944:	4b05      	ldr	r3, [pc, #20]	@ (800a95c <_svfiprintf_r+0x1f0>)
 800a946:	a904      	add	r1, sp, #16
 800a948:	4638      	mov	r0, r7
 800a94a:	f7fe f80b 	bl	8008964 <_printf_i>
 800a94e:	e7ed      	b.n	800a92c <_svfiprintf_r+0x1c0>
 800a950:	0800c688 	.word	0x0800c688
 800a954:	0800c692 	.word	0x0800c692
 800a958:	08008435 	.word	0x08008435
 800a95c:	0800a6b5 	.word	0x0800a6b5
 800a960:	0800c68e 	.word	0x0800c68e

0800a964 <__sfputc_r>:
 800a964:	6893      	ldr	r3, [r2, #8]
 800a966:	3b01      	subs	r3, #1
 800a968:	2b00      	cmp	r3, #0
 800a96a:	b410      	push	{r4}
 800a96c:	6093      	str	r3, [r2, #8]
 800a96e:	da08      	bge.n	800a982 <__sfputc_r+0x1e>
 800a970:	6994      	ldr	r4, [r2, #24]
 800a972:	42a3      	cmp	r3, r4
 800a974:	db01      	blt.n	800a97a <__sfputc_r+0x16>
 800a976:	290a      	cmp	r1, #10
 800a978:	d103      	bne.n	800a982 <__sfputc_r+0x1e>
 800a97a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a97e:	f7fe baa6 	b.w	8008ece <__swbuf_r>
 800a982:	6813      	ldr	r3, [r2, #0]
 800a984:	1c58      	adds	r0, r3, #1
 800a986:	6010      	str	r0, [r2, #0]
 800a988:	7019      	strb	r1, [r3, #0]
 800a98a:	4608      	mov	r0, r1
 800a98c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a990:	4770      	bx	lr

0800a992 <__sfputs_r>:
 800a992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a994:	4606      	mov	r6, r0
 800a996:	460f      	mov	r7, r1
 800a998:	4614      	mov	r4, r2
 800a99a:	18d5      	adds	r5, r2, r3
 800a99c:	42ac      	cmp	r4, r5
 800a99e:	d101      	bne.n	800a9a4 <__sfputs_r+0x12>
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	e007      	b.n	800a9b4 <__sfputs_r+0x22>
 800a9a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9a8:	463a      	mov	r2, r7
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	f7ff ffda 	bl	800a964 <__sfputc_r>
 800a9b0:	1c43      	adds	r3, r0, #1
 800a9b2:	d1f3      	bne.n	800a99c <__sfputs_r+0xa>
 800a9b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9b8 <_vfiprintf_r>:
 800a9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9bc:	460d      	mov	r5, r1
 800a9be:	b09d      	sub	sp, #116	@ 0x74
 800a9c0:	4614      	mov	r4, r2
 800a9c2:	4698      	mov	r8, r3
 800a9c4:	4606      	mov	r6, r0
 800a9c6:	b118      	cbz	r0, 800a9d0 <_vfiprintf_r+0x18>
 800a9c8:	6a03      	ldr	r3, [r0, #32]
 800a9ca:	b90b      	cbnz	r3, 800a9d0 <_vfiprintf_r+0x18>
 800a9cc:	f7fe f976 	bl	8008cbc <__sinit>
 800a9d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9d2:	07d9      	lsls	r1, r3, #31
 800a9d4:	d405      	bmi.n	800a9e2 <_vfiprintf_r+0x2a>
 800a9d6:	89ab      	ldrh	r3, [r5, #12]
 800a9d8:	059a      	lsls	r2, r3, #22
 800a9da:	d402      	bmi.n	800a9e2 <_vfiprintf_r+0x2a>
 800a9dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9de:	f7fe fb88 	bl	80090f2 <__retarget_lock_acquire_recursive>
 800a9e2:	89ab      	ldrh	r3, [r5, #12]
 800a9e4:	071b      	lsls	r3, r3, #28
 800a9e6:	d501      	bpl.n	800a9ec <_vfiprintf_r+0x34>
 800a9e8:	692b      	ldr	r3, [r5, #16]
 800a9ea:	b99b      	cbnz	r3, 800aa14 <_vfiprintf_r+0x5c>
 800a9ec:	4629      	mov	r1, r5
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	f7fe faac 	bl	8008f4c <__swsetup_r>
 800a9f4:	b170      	cbz	r0, 800aa14 <_vfiprintf_r+0x5c>
 800a9f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9f8:	07dc      	lsls	r4, r3, #31
 800a9fa:	d504      	bpl.n	800aa06 <_vfiprintf_r+0x4e>
 800a9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800aa00:	b01d      	add	sp, #116	@ 0x74
 800aa02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa06:	89ab      	ldrh	r3, [r5, #12]
 800aa08:	0598      	lsls	r0, r3, #22
 800aa0a:	d4f7      	bmi.n	800a9fc <_vfiprintf_r+0x44>
 800aa0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa0e:	f7fe fb71 	bl	80090f4 <__retarget_lock_release_recursive>
 800aa12:	e7f3      	b.n	800a9fc <_vfiprintf_r+0x44>
 800aa14:	2300      	movs	r3, #0
 800aa16:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa18:	2320      	movs	r3, #32
 800aa1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa22:	2330      	movs	r3, #48	@ 0x30
 800aa24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800abd4 <_vfiprintf_r+0x21c>
 800aa28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa2c:	f04f 0901 	mov.w	r9, #1
 800aa30:	4623      	mov	r3, r4
 800aa32:	469a      	mov	sl, r3
 800aa34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa38:	b10a      	cbz	r2, 800aa3e <_vfiprintf_r+0x86>
 800aa3a:	2a25      	cmp	r2, #37	@ 0x25
 800aa3c:	d1f9      	bne.n	800aa32 <_vfiprintf_r+0x7a>
 800aa3e:	ebba 0b04 	subs.w	fp, sl, r4
 800aa42:	d00b      	beq.n	800aa5c <_vfiprintf_r+0xa4>
 800aa44:	465b      	mov	r3, fp
 800aa46:	4622      	mov	r2, r4
 800aa48:	4629      	mov	r1, r5
 800aa4a:	4630      	mov	r0, r6
 800aa4c:	f7ff ffa1 	bl	800a992 <__sfputs_r>
 800aa50:	3001      	adds	r0, #1
 800aa52:	f000 80a7 	beq.w	800aba4 <_vfiprintf_r+0x1ec>
 800aa56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa58:	445a      	add	r2, fp
 800aa5a:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa5c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f000 809f 	beq.w	800aba4 <_vfiprintf_r+0x1ec>
 800aa66:	2300      	movs	r3, #0
 800aa68:	f04f 32ff 	mov.w	r2, #4294967295
 800aa6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa70:	f10a 0a01 	add.w	sl, sl, #1
 800aa74:	9304      	str	r3, [sp, #16]
 800aa76:	9307      	str	r3, [sp, #28]
 800aa78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa7c:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa7e:	4654      	mov	r4, sl
 800aa80:	2205      	movs	r2, #5
 800aa82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa86:	4853      	ldr	r0, [pc, #332]	@ (800abd4 <_vfiprintf_r+0x21c>)
 800aa88:	f7f5 fbc2 	bl	8000210 <memchr>
 800aa8c:	9a04      	ldr	r2, [sp, #16]
 800aa8e:	b9d8      	cbnz	r0, 800aac8 <_vfiprintf_r+0x110>
 800aa90:	06d1      	lsls	r1, r2, #27
 800aa92:	bf44      	itt	mi
 800aa94:	2320      	movmi	r3, #32
 800aa96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa9a:	0713      	lsls	r3, r2, #28
 800aa9c:	bf44      	itt	mi
 800aa9e:	232b      	movmi	r3, #43	@ 0x2b
 800aaa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aaa4:	f89a 3000 	ldrb.w	r3, [sl]
 800aaa8:	2b2a      	cmp	r3, #42	@ 0x2a
 800aaaa:	d015      	beq.n	800aad8 <_vfiprintf_r+0x120>
 800aaac:	9a07      	ldr	r2, [sp, #28]
 800aaae:	4654      	mov	r4, sl
 800aab0:	2000      	movs	r0, #0
 800aab2:	f04f 0c0a 	mov.w	ip, #10
 800aab6:	4621      	mov	r1, r4
 800aab8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aabc:	3b30      	subs	r3, #48	@ 0x30
 800aabe:	2b09      	cmp	r3, #9
 800aac0:	d94b      	bls.n	800ab5a <_vfiprintf_r+0x1a2>
 800aac2:	b1b0      	cbz	r0, 800aaf2 <_vfiprintf_r+0x13a>
 800aac4:	9207      	str	r2, [sp, #28]
 800aac6:	e014      	b.n	800aaf2 <_vfiprintf_r+0x13a>
 800aac8:	eba0 0308 	sub.w	r3, r0, r8
 800aacc:	fa09 f303 	lsl.w	r3, r9, r3
 800aad0:	4313      	orrs	r3, r2
 800aad2:	9304      	str	r3, [sp, #16]
 800aad4:	46a2      	mov	sl, r4
 800aad6:	e7d2      	b.n	800aa7e <_vfiprintf_r+0xc6>
 800aad8:	9b03      	ldr	r3, [sp, #12]
 800aada:	1d19      	adds	r1, r3, #4
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	9103      	str	r1, [sp, #12]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	bfbb      	ittet	lt
 800aae4:	425b      	neglt	r3, r3
 800aae6:	f042 0202 	orrlt.w	r2, r2, #2
 800aaea:	9307      	strge	r3, [sp, #28]
 800aaec:	9307      	strlt	r3, [sp, #28]
 800aaee:	bfb8      	it	lt
 800aaf0:	9204      	strlt	r2, [sp, #16]
 800aaf2:	7823      	ldrb	r3, [r4, #0]
 800aaf4:	2b2e      	cmp	r3, #46	@ 0x2e
 800aaf6:	d10a      	bne.n	800ab0e <_vfiprintf_r+0x156>
 800aaf8:	7863      	ldrb	r3, [r4, #1]
 800aafa:	2b2a      	cmp	r3, #42	@ 0x2a
 800aafc:	d132      	bne.n	800ab64 <_vfiprintf_r+0x1ac>
 800aafe:	9b03      	ldr	r3, [sp, #12]
 800ab00:	1d1a      	adds	r2, r3, #4
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	9203      	str	r2, [sp, #12]
 800ab06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab0a:	3402      	adds	r4, #2
 800ab0c:	9305      	str	r3, [sp, #20]
 800ab0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800abe4 <_vfiprintf_r+0x22c>
 800ab12:	7821      	ldrb	r1, [r4, #0]
 800ab14:	2203      	movs	r2, #3
 800ab16:	4650      	mov	r0, sl
 800ab18:	f7f5 fb7a 	bl	8000210 <memchr>
 800ab1c:	b138      	cbz	r0, 800ab2e <_vfiprintf_r+0x176>
 800ab1e:	9b04      	ldr	r3, [sp, #16]
 800ab20:	eba0 000a 	sub.w	r0, r0, sl
 800ab24:	2240      	movs	r2, #64	@ 0x40
 800ab26:	4082      	lsls	r2, r0
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	3401      	adds	r4, #1
 800ab2c:	9304      	str	r3, [sp, #16]
 800ab2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab32:	4829      	ldr	r0, [pc, #164]	@ (800abd8 <_vfiprintf_r+0x220>)
 800ab34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab38:	2206      	movs	r2, #6
 800ab3a:	f7f5 fb69 	bl	8000210 <memchr>
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	d03f      	beq.n	800abc2 <_vfiprintf_r+0x20a>
 800ab42:	4b26      	ldr	r3, [pc, #152]	@ (800abdc <_vfiprintf_r+0x224>)
 800ab44:	bb1b      	cbnz	r3, 800ab8e <_vfiprintf_r+0x1d6>
 800ab46:	9b03      	ldr	r3, [sp, #12]
 800ab48:	3307      	adds	r3, #7
 800ab4a:	f023 0307 	bic.w	r3, r3, #7
 800ab4e:	3308      	adds	r3, #8
 800ab50:	9303      	str	r3, [sp, #12]
 800ab52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab54:	443b      	add	r3, r7
 800ab56:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab58:	e76a      	b.n	800aa30 <_vfiprintf_r+0x78>
 800ab5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab5e:	460c      	mov	r4, r1
 800ab60:	2001      	movs	r0, #1
 800ab62:	e7a8      	b.n	800aab6 <_vfiprintf_r+0xfe>
 800ab64:	2300      	movs	r3, #0
 800ab66:	3401      	adds	r4, #1
 800ab68:	9305      	str	r3, [sp, #20]
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	f04f 0c0a 	mov.w	ip, #10
 800ab70:	4620      	mov	r0, r4
 800ab72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab76:	3a30      	subs	r2, #48	@ 0x30
 800ab78:	2a09      	cmp	r2, #9
 800ab7a:	d903      	bls.n	800ab84 <_vfiprintf_r+0x1cc>
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d0c6      	beq.n	800ab0e <_vfiprintf_r+0x156>
 800ab80:	9105      	str	r1, [sp, #20]
 800ab82:	e7c4      	b.n	800ab0e <_vfiprintf_r+0x156>
 800ab84:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab88:	4604      	mov	r4, r0
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e7f0      	b.n	800ab70 <_vfiprintf_r+0x1b8>
 800ab8e:	ab03      	add	r3, sp, #12
 800ab90:	9300      	str	r3, [sp, #0]
 800ab92:	462a      	mov	r2, r5
 800ab94:	4b12      	ldr	r3, [pc, #72]	@ (800abe0 <_vfiprintf_r+0x228>)
 800ab96:	a904      	add	r1, sp, #16
 800ab98:	4630      	mov	r0, r6
 800ab9a:	f7fd fc4b 	bl	8008434 <_printf_float>
 800ab9e:	4607      	mov	r7, r0
 800aba0:	1c78      	adds	r0, r7, #1
 800aba2:	d1d6      	bne.n	800ab52 <_vfiprintf_r+0x19a>
 800aba4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aba6:	07d9      	lsls	r1, r3, #31
 800aba8:	d405      	bmi.n	800abb6 <_vfiprintf_r+0x1fe>
 800abaa:	89ab      	ldrh	r3, [r5, #12]
 800abac:	059a      	lsls	r2, r3, #22
 800abae:	d402      	bmi.n	800abb6 <_vfiprintf_r+0x1fe>
 800abb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abb2:	f7fe fa9f 	bl	80090f4 <__retarget_lock_release_recursive>
 800abb6:	89ab      	ldrh	r3, [r5, #12]
 800abb8:	065b      	lsls	r3, r3, #25
 800abba:	f53f af1f 	bmi.w	800a9fc <_vfiprintf_r+0x44>
 800abbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abc0:	e71e      	b.n	800aa00 <_vfiprintf_r+0x48>
 800abc2:	ab03      	add	r3, sp, #12
 800abc4:	9300      	str	r3, [sp, #0]
 800abc6:	462a      	mov	r2, r5
 800abc8:	4b05      	ldr	r3, [pc, #20]	@ (800abe0 <_vfiprintf_r+0x228>)
 800abca:	a904      	add	r1, sp, #16
 800abcc:	4630      	mov	r0, r6
 800abce:	f7fd fec9 	bl	8008964 <_printf_i>
 800abd2:	e7e4      	b.n	800ab9e <_vfiprintf_r+0x1e6>
 800abd4:	0800c688 	.word	0x0800c688
 800abd8:	0800c692 	.word	0x0800c692
 800abdc:	08008435 	.word	0x08008435
 800abe0:	0800a993 	.word	0x0800a993
 800abe4:	0800c68e 	.word	0x0800c68e

0800abe8 <__sflush_r>:
 800abe8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800abec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abf0:	0716      	lsls	r6, r2, #28
 800abf2:	4605      	mov	r5, r0
 800abf4:	460c      	mov	r4, r1
 800abf6:	d454      	bmi.n	800aca2 <__sflush_r+0xba>
 800abf8:	684b      	ldr	r3, [r1, #4]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	dc02      	bgt.n	800ac04 <__sflush_r+0x1c>
 800abfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	dd48      	ble.n	800ac96 <__sflush_r+0xae>
 800ac04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac06:	2e00      	cmp	r6, #0
 800ac08:	d045      	beq.n	800ac96 <__sflush_r+0xae>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ac10:	682f      	ldr	r7, [r5, #0]
 800ac12:	6a21      	ldr	r1, [r4, #32]
 800ac14:	602b      	str	r3, [r5, #0]
 800ac16:	d030      	beq.n	800ac7a <__sflush_r+0x92>
 800ac18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac1a:	89a3      	ldrh	r3, [r4, #12]
 800ac1c:	0759      	lsls	r1, r3, #29
 800ac1e:	d505      	bpl.n	800ac2c <__sflush_r+0x44>
 800ac20:	6863      	ldr	r3, [r4, #4]
 800ac22:	1ad2      	subs	r2, r2, r3
 800ac24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac26:	b10b      	cbz	r3, 800ac2c <__sflush_r+0x44>
 800ac28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac2a:	1ad2      	subs	r2, r2, r3
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac30:	6a21      	ldr	r1, [r4, #32]
 800ac32:	4628      	mov	r0, r5
 800ac34:	47b0      	blx	r6
 800ac36:	1c43      	adds	r3, r0, #1
 800ac38:	89a3      	ldrh	r3, [r4, #12]
 800ac3a:	d106      	bne.n	800ac4a <__sflush_r+0x62>
 800ac3c:	6829      	ldr	r1, [r5, #0]
 800ac3e:	291d      	cmp	r1, #29
 800ac40:	d82b      	bhi.n	800ac9a <__sflush_r+0xb2>
 800ac42:	4a2a      	ldr	r2, [pc, #168]	@ (800acec <__sflush_r+0x104>)
 800ac44:	410a      	asrs	r2, r1
 800ac46:	07d6      	lsls	r6, r2, #31
 800ac48:	d427      	bmi.n	800ac9a <__sflush_r+0xb2>
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	6062      	str	r2, [r4, #4]
 800ac4e:	04d9      	lsls	r1, r3, #19
 800ac50:	6922      	ldr	r2, [r4, #16]
 800ac52:	6022      	str	r2, [r4, #0]
 800ac54:	d504      	bpl.n	800ac60 <__sflush_r+0x78>
 800ac56:	1c42      	adds	r2, r0, #1
 800ac58:	d101      	bne.n	800ac5e <__sflush_r+0x76>
 800ac5a:	682b      	ldr	r3, [r5, #0]
 800ac5c:	b903      	cbnz	r3, 800ac60 <__sflush_r+0x78>
 800ac5e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ac60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac62:	602f      	str	r7, [r5, #0]
 800ac64:	b1b9      	cbz	r1, 800ac96 <__sflush_r+0xae>
 800ac66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac6a:	4299      	cmp	r1, r3
 800ac6c:	d002      	beq.n	800ac74 <__sflush_r+0x8c>
 800ac6e:	4628      	mov	r0, r5
 800ac70:	f7ff f89e 	bl	8009db0 <_free_r>
 800ac74:	2300      	movs	r3, #0
 800ac76:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac78:	e00d      	b.n	800ac96 <__sflush_r+0xae>
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	47b0      	blx	r6
 800ac80:	4602      	mov	r2, r0
 800ac82:	1c50      	adds	r0, r2, #1
 800ac84:	d1c9      	bne.n	800ac1a <__sflush_r+0x32>
 800ac86:	682b      	ldr	r3, [r5, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d0c6      	beq.n	800ac1a <__sflush_r+0x32>
 800ac8c:	2b1d      	cmp	r3, #29
 800ac8e:	d001      	beq.n	800ac94 <__sflush_r+0xac>
 800ac90:	2b16      	cmp	r3, #22
 800ac92:	d11e      	bne.n	800acd2 <__sflush_r+0xea>
 800ac94:	602f      	str	r7, [r5, #0]
 800ac96:	2000      	movs	r0, #0
 800ac98:	e022      	b.n	800ace0 <__sflush_r+0xf8>
 800ac9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac9e:	b21b      	sxth	r3, r3
 800aca0:	e01b      	b.n	800acda <__sflush_r+0xf2>
 800aca2:	690f      	ldr	r7, [r1, #16]
 800aca4:	2f00      	cmp	r7, #0
 800aca6:	d0f6      	beq.n	800ac96 <__sflush_r+0xae>
 800aca8:	0793      	lsls	r3, r2, #30
 800acaa:	680e      	ldr	r6, [r1, #0]
 800acac:	bf08      	it	eq
 800acae:	694b      	ldreq	r3, [r1, #20]
 800acb0:	600f      	str	r7, [r1, #0]
 800acb2:	bf18      	it	ne
 800acb4:	2300      	movne	r3, #0
 800acb6:	eba6 0807 	sub.w	r8, r6, r7
 800acba:	608b      	str	r3, [r1, #8]
 800acbc:	f1b8 0f00 	cmp.w	r8, #0
 800acc0:	dde9      	ble.n	800ac96 <__sflush_r+0xae>
 800acc2:	6a21      	ldr	r1, [r4, #32]
 800acc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800acc6:	4643      	mov	r3, r8
 800acc8:	463a      	mov	r2, r7
 800acca:	4628      	mov	r0, r5
 800accc:	47b0      	blx	r6
 800acce:	2800      	cmp	r0, #0
 800acd0:	dc08      	bgt.n	800ace4 <__sflush_r+0xfc>
 800acd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acda:	81a3      	strh	r3, [r4, #12]
 800acdc:	f04f 30ff 	mov.w	r0, #4294967295
 800ace0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ace4:	4407      	add	r7, r0
 800ace6:	eba8 0800 	sub.w	r8, r8, r0
 800acea:	e7e7      	b.n	800acbc <__sflush_r+0xd4>
 800acec:	dfbffffe 	.word	0xdfbffffe

0800acf0 <_fflush_r>:
 800acf0:	b538      	push	{r3, r4, r5, lr}
 800acf2:	690b      	ldr	r3, [r1, #16]
 800acf4:	4605      	mov	r5, r0
 800acf6:	460c      	mov	r4, r1
 800acf8:	b913      	cbnz	r3, 800ad00 <_fflush_r+0x10>
 800acfa:	2500      	movs	r5, #0
 800acfc:	4628      	mov	r0, r5
 800acfe:	bd38      	pop	{r3, r4, r5, pc}
 800ad00:	b118      	cbz	r0, 800ad0a <_fflush_r+0x1a>
 800ad02:	6a03      	ldr	r3, [r0, #32]
 800ad04:	b90b      	cbnz	r3, 800ad0a <_fflush_r+0x1a>
 800ad06:	f7fd ffd9 	bl	8008cbc <__sinit>
 800ad0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d0f3      	beq.n	800acfa <_fflush_r+0xa>
 800ad12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad14:	07d0      	lsls	r0, r2, #31
 800ad16:	d404      	bmi.n	800ad22 <_fflush_r+0x32>
 800ad18:	0599      	lsls	r1, r3, #22
 800ad1a:	d402      	bmi.n	800ad22 <_fflush_r+0x32>
 800ad1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad1e:	f7fe f9e8 	bl	80090f2 <__retarget_lock_acquire_recursive>
 800ad22:	4628      	mov	r0, r5
 800ad24:	4621      	mov	r1, r4
 800ad26:	f7ff ff5f 	bl	800abe8 <__sflush_r>
 800ad2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad2c:	07da      	lsls	r2, r3, #31
 800ad2e:	4605      	mov	r5, r0
 800ad30:	d4e4      	bmi.n	800acfc <_fflush_r+0xc>
 800ad32:	89a3      	ldrh	r3, [r4, #12]
 800ad34:	059b      	lsls	r3, r3, #22
 800ad36:	d4e1      	bmi.n	800acfc <_fflush_r+0xc>
 800ad38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad3a:	f7fe f9db 	bl	80090f4 <__retarget_lock_release_recursive>
 800ad3e:	e7dd      	b.n	800acfc <_fflush_r+0xc>

0800ad40 <__swhatbuf_r>:
 800ad40:	b570      	push	{r4, r5, r6, lr}
 800ad42:	460c      	mov	r4, r1
 800ad44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad48:	2900      	cmp	r1, #0
 800ad4a:	b096      	sub	sp, #88	@ 0x58
 800ad4c:	4615      	mov	r5, r2
 800ad4e:	461e      	mov	r6, r3
 800ad50:	da0d      	bge.n	800ad6e <__swhatbuf_r+0x2e>
 800ad52:	89a3      	ldrh	r3, [r4, #12]
 800ad54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ad58:	f04f 0100 	mov.w	r1, #0
 800ad5c:	bf14      	ite	ne
 800ad5e:	2340      	movne	r3, #64	@ 0x40
 800ad60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ad64:	2000      	movs	r0, #0
 800ad66:	6031      	str	r1, [r6, #0]
 800ad68:	602b      	str	r3, [r5, #0]
 800ad6a:	b016      	add	sp, #88	@ 0x58
 800ad6c:	bd70      	pop	{r4, r5, r6, pc}
 800ad6e:	466a      	mov	r2, sp
 800ad70:	f000 f862 	bl	800ae38 <_fstat_r>
 800ad74:	2800      	cmp	r0, #0
 800ad76:	dbec      	blt.n	800ad52 <__swhatbuf_r+0x12>
 800ad78:	9901      	ldr	r1, [sp, #4]
 800ad7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ad7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ad82:	4259      	negs	r1, r3
 800ad84:	4159      	adcs	r1, r3
 800ad86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad8a:	e7eb      	b.n	800ad64 <__swhatbuf_r+0x24>

0800ad8c <__smakebuf_r>:
 800ad8c:	898b      	ldrh	r3, [r1, #12]
 800ad8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad90:	079d      	lsls	r5, r3, #30
 800ad92:	4606      	mov	r6, r0
 800ad94:	460c      	mov	r4, r1
 800ad96:	d507      	bpl.n	800ada8 <__smakebuf_r+0x1c>
 800ad98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ad9c:	6023      	str	r3, [r4, #0]
 800ad9e:	6123      	str	r3, [r4, #16]
 800ada0:	2301      	movs	r3, #1
 800ada2:	6163      	str	r3, [r4, #20]
 800ada4:	b003      	add	sp, #12
 800ada6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ada8:	ab01      	add	r3, sp, #4
 800adaa:	466a      	mov	r2, sp
 800adac:	f7ff ffc8 	bl	800ad40 <__swhatbuf_r>
 800adb0:	9f00      	ldr	r7, [sp, #0]
 800adb2:	4605      	mov	r5, r0
 800adb4:	4639      	mov	r1, r7
 800adb6:	4630      	mov	r0, r6
 800adb8:	f7ff f86e 	bl	8009e98 <_malloc_r>
 800adbc:	b948      	cbnz	r0, 800add2 <__smakebuf_r+0x46>
 800adbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adc2:	059a      	lsls	r2, r3, #22
 800adc4:	d4ee      	bmi.n	800ada4 <__smakebuf_r+0x18>
 800adc6:	f023 0303 	bic.w	r3, r3, #3
 800adca:	f043 0302 	orr.w	r3, r3, #2
 800adce:	81a3      	strh	r3, [r4, #12]
 800add0:	e7e2      	b.n	800ad98 <__smakebuf_r+0xc>
 800add2:	89a3      	ldrh	r3, [r4, #12]
 800add4:	6020      	str	r0, [r4, #0]
 800add6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adda:	81a3      	strh	r3, [r4, #12]
 800addc:	9b01      	ldr	r3, [sp, #4]
 800adde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ade2:	b15b      	cbz	r3, 800adfc <__smakebuf_r+0x70>
 800ade4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ade8:	4630      	mov	r0, r6
 800adea:	f000 f837 	bl	800ae5c <_isatty_r>
 800adee:	b128      	cbz	r0, 800adfc <__smakebuf_r+0x70>
 800adf0:	89a3      	ldrh	r3, [r4, #12]
 800adf2:	f023 0303 	bic.w	r3, r3, #3
 800adf6:	f043 0301 	orr.w	r3, r3, #1
 800adfa:	81a3      	strh	r3, [r4, #12]
 800adfc:	89a3      	ldrh	r3, [r4, #12]
 800adfe:	431d      	orrs	r5, r3
 800ae00:	81a5      	strh	r5, [r4, #12]
 800ae02:	e7cf      	b.n	800ada4 <__smakebuf_r+0x18>

0800ae04 <memmove>:
 800ae04:	4288      	cmp	r0, r1
 800ae06:	b510      	push	{r4, lr}
 800ae08:	eb01 0402 	add.w	r4, r1, r2
 800ae0c:	d902      	bls.n	800ae14 <memmove+0x10>
 800ae0e:	4284      	cmp	r4, r0
 800ae10:	4623      	mov	r3, r4
 800ae12:	d807      	bhi.n	800ae24 <memmove+0x20>
 800ae14:	1e43      	subs	r3, r0, #1
 800ae16:	42a1      	cmp	r1, r4
 800ae18:	d008      	beq.n	800ae2c <memmove+0x28>
 800ae1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae22:	e7f8      	b.n	800ae16 <memmove+0x12>
 800ae24:	4402      	add	r2, r0
 800ae26:	4601      	mov	r1, r0
 800ae28:	428a      	cmp	r2, r1
 800ae2a:	d100      	bne.n	800ae2e <memmove+0x2a>
 800ae2c:	bd10      	pop	{r4, pc}
 800ae2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae36:	e7f7      	b.n	800ae28 <memmove+0x24>

0800ae38 <_fstat_r>:
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	4d07      	ldr	r5, [pc, #28]	@ (800ae58 <_fstat_r+0x20>)
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	4604      	mov	r4, r0
 800ae40:	4608      	mov	r0, r1
 800ae42:	4611      	mov	r1, r2
 800ae44:	602b      	str	r3, [r5, #0]
 800ae46:	f7f7 f9e1 	bl	800220c <_fstat>
 800ae4a:	1c43      	adds	r3, r0, #1
 800ae4c:	d102      	bne.n	800ae54 <_fstat_r+0x1c>
 800ae4e:	682b      	ldr	r3, [r5, #0]
 800ae50:	b103      	cbz	r3, 800ae54 <_fstat_r+0x1c>
 800ae52:	6023      	str	r3, [r4, #0]
 800ae54:	bd38      	pop	{r3, r4, r5, pc}
 800ae56:	bf00      	nop
 800ae58:	20013314 	.word	0x20013314

0800ae5c <_isatty_r>:
 800ae5c:	b538      	push	{r3, r4, r5, lr}
 800ae5e:	4d06      	ldr	r5, [pc, #24]	@ (800ae78 <_isatty_r+0x1c>)
 800ae60:	2300      	movs	r3, #0
 800ae62:	4604      	mov	r4, r0
 800ae64:	4608      	mov	r0, r1
 800ae66:	602b      	str	r3, [r5, #0]
 800ae68:	f7f7 f9e0 	bl	800222c <_isatty>
 800ae6c:	1c43      	adds	r3, r0, #1
 800ae6e:	d102      	bne.n	800ae76 <_isatty_r+0x1a>
 800ae70:	682b      	ldr	r3, [r5, #0]
 800ae72:	b103      	cbz	r3, 800ae76 <_isatty_r+0x1a>
 800ae74:	6023      	str	r3, [r4, #0]
 800ae76:	bd38      	pop	{r3, r4, r5, pc}
 800ae78:	20013314 	.word	0x20013314

0800ae7c <_sbrk_r>:
 800ae7c:	b538      	push	{r3, r4, r5, lr}
 800ae7e:	4d06      	ldr	r5, [pc, #24]	@ (800ae98 <_sbrk_r+0x1c>)
 800ae80:	2300      	movs	r3, #0
 800ae82:	4604      	mov	r4, r0
 800ae84:	4608      	mov	r0, r1
 800ae86:	602b      	str	r3, [r5, #0]
 800ae88:	f001 fa12 	bl	800c2b0 <_sbrk>
 800ae8c:	1c43      	adds	r3, r0, #1
 800ae8e:	d102      	bne.n	800ae96 <_sbrk_r+0x1a>
 800ae90:	682b      	ldr	r3, [r5, #0]
 800ae92:	b103      	cbz	r3, 800ae96 <_sbrk_r+0x1a>
 800ae94:	6023      	str	r3, [r4, #0]
 800ae96:	bd38      	pop	{r3, r4, r5, pc}
 800ae98:	20013314 	.word	0x20013314

0800ae9c <__assert_func>:
 800ae9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae9e:	4614      	mov	r4, r2
 800aea0:	461a      	mov	r2, r3
 800aea2:	4b09      	ldr	r3, [pc, #36]	@ (800aec8 <__assert_func+0x2c>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4605      	mov	r5, r0
 800aea8:	68d8      	ldr	r0, [r3, #12]
 800aeaa:	b954      	cbnz	r4, 800aec2 <__assert_func+0x26>
 800aeac:	4b07      	ldr	r3, [pc, #28]	@ (800aecc <__assert_func+0x30>)
 800aeae:	461c      	mov	r4, r3
 800aeb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aeb4:	9100      	str	r1, [sp, #0]
 800aeb6:	462b      	mov	r3, r5
 800aeb8:	4905      	ldr	r1, [pc, #20]	@ (800aed0 <__assert_func+0x34>)
 800aeba:	f000 f86f 	bl	800af9c <fiprintf>
 800aebe:	f000 f87f 	bl	800afc0 <abort>
 800aec2:	4b04      	ldr	r3, [pc, #16]	@ (800aed4 <__assert_func+0x38>)
 800aec4:	e7f4      	b.n	800aeb0 <__assert_func+0x14>
 800aec6:	bf00      	nop
 800aec8:	20000028 	.word	0x20000028
 800aecc:	0800c6de 	.word	0x0800c6de
 800aed0:	0800c6b0 	.word	0x0800c6b0
 800aed4:	0800c6a3 	.word	0x0800c6a3

0800aed8 <_calloc_r>:
 800aed8:	b570      	push	{r4, r5, r6, lr}
 800aeda:	fba1 5402 	umull	r5, r4, r1, r2
 800aede:	b93c      	cbnz	r4, 800aef0 <_calloc_r+0x18>
 800aee0:	4629      	mov	r1, r5
 800aee2:	f7fe ffd9 	bl	8009e98 <_malloc_r>
 800aee6:	4606      	mov	r6, r0
 800aee8:	b928      	cbnz	r0, 800aef6 <_calloc_r+0x1e>
 800aeea:	2600      	movs	r6, #0
 800aeec:	4630      	mov	r0, r6
 800aeee:	bd70      	pop	{r4, r5, r6, pc}
 800aef0:	220c      	movs	r2, #12
 800aef2:	6002      	str	r2, [r0, #0]
 800aef4:	e7f9      	b.n	800aeea <_calloc_r+0x12>
 800aef6:	462a      	mov	r2, r5
 800aef8:	4621      	mov	r1, r4
 800aefa:	f7fe f87d 	bl	8008ff8 <memset>
 800aefe:	e7f5      	b.n	800aeec <_calloc_r+0x14>

0800af00 <__ascii_mbtowc>:
 800af00:	b082      	sub	sp, #8
 800af02:	b901      	cbnz	r1, 800af06 <__ascii_mbtowc+0x6>
 800af04:	a901      	add	r1, sp, #4
 800af06:	b142      	cbz	r2, 800af1a <__ascii_mbtowc+0x1a>
 800af08:	b14b      	cbz	r3, 800af1e <__ascii_mbtowc+0x1e>
 800af0a:	7813      	ldrb	r3, [r2, #0]
 800af0c:	600b      	str	r3, [r1, #0]
 800af0e:	7812      	ldrb	r2, [r2, #0]
 800af10:	1e10      	subs	r0, r2, #0
 800af12:	bf18      	it	ne
 800af14:	2001      	movne	r0, #1
 800af16:	b002      	add	sp, #8
 800af18:	4770      	bx	lr
 800af1a:	4610      	mov	r0, r2
 800af1c:	e7fb      	b.n	800af16 <__ascii_mbtowc+0x16>
 800af1e:	f06f 0001 	mvn.w	r0, #1
 800af22:	e7f8      	b.n	800af16 <__ascii_mbtowc+0x16>

0800af24 <_realloc_r>:
 800af24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af28:	4680      	mov	r8, r0
 800af2a:	4615      	mov	r5, r2
 800af2c:	460c      	mov	r4, r1
 800af2e:	b921      	cbnz	r1, 800af3a <_realloc_r+0x16>
 800af30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af34:	4611      	mov	r1, r2
 800af36:	f7fe bfaf 	b.w	8009e98 <_malloc_r>
 800af3a:	b92a      	cbnz	r2, 800af48 <_realloc_r+0x24>
 800af3c:	f7fe ff38 	bl	8009db0 <_free_r>
 800af40:	2400      	movs	r4, #0
 800af42:	4620      	mov	r0, r4
 800af44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af48:	f000 f841 	bl	800afce <_malloc_usable_size_r>
 800af4c:	4285      	cmp	r5, r0
 800af4e:	4606      	mov	r6, r0
 800af50:	d802      	bhi.n	800af58 <_realloc_r+0x34>
 800af52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800af56:	d8f4      	bhi.n	800af42 <_realloc_r+0x1e>
 800af58:	4629      	mov	r1, r5
 800af5a:	4640      	mov	r0, r8
 800af5c:	f7fe ff9c 	bl	8009e98 <_malloc_r>
 800af60:	4607      	mov	r7, r0
 800af62:	2800      	cmp	r0, #0
 800af64:	d0ec      	beq.n	800af40 <_realloc_r+0x1c>
 800af66:	42b5      	cmp	r5, r6
 800af68:	462a      	mov	r2, r5
 800af6a:	4621      	mov	r1, r4
 800af6c:	bf28      	it	cs
 800af6e:	4632      	movcs	r2, r6
 800af70:	f7fe f8c1 	bl	80090f6 <memcpy>
 800af74:	4621      	mov	r1, r4
 800af76:	4640      	mov	r0, r8
 800af78:	f7fe ff1a 	bl	8009db0 <_free_r>
 800af7c:	463c      	mov	r4, r7
 800af7e:	e7e0      	b.n	800af42 <_realloc_r+0x1e>

0800af80 <__ascii_wctomb>:
 800af80:	4603      	mov	r3, r0
 800af82:	4608      	mov	r0, r1
 800af84:	b141      	cbz	r1, 800af98 <__ascii_wctomb+0x18>
 800af86:	2aff      	cmp	r2, #255	@ 0xff
 800af88:	d904      	bls.n	800af94 <__ascii_wctomb+0x14>
 800af8a:	228a      	movs	r2, #138	@ 0x8a
 800af8c:	601a      	str	r2, [r3, #0]
 800af8e:	f04f 30ff 	mov.w	r0, #4294967295
 800af92:	4770      	bx	lr
 800af94:	700a      	strb	r2, [r1, #0]
 800af96:	2001      	movs	r0, #1
 800af98:	4770      	bx	lr
	...

0800af9c <fiprintf>:
 800af9c:	b40e      	push	{r1, r2, r3}
 800af9e:	b503      	push	{r0, r1, lr}
 800afa0:	4601      	mov	r1, r0
 800afa2:	ab03      	add	r3, sp, #12
 800afa4:	4805      	ldr	r0, [pc, #20]	@ (800afbc <fiprintf+0x20>)
 800afa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800afaa:	6800      	ldr	r0, [r0, #0]
 800afac:	9301      	str	r3, [sp, #4]
 800afae:	f7ff fd03 	bl	800a9b8 <_vfiprintf_r>
 800afb2:	b002      	add	sp, #8
 800afb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800afb8:	b003      	add	sp, #12
 800afba:	4770      	bx	lr
 800afbc:	20000028 	.word	0x20000028

0800afc0 <abort>:
 800afc0:	b508      	push	{r3, lr}
 800afc2:	2006      	movs	r0, #6
 800afc4:	f000 f834 	bl	800b030 <raise>
 800afc8:	2001      	movs	r0, #1
 800afca:	f7f7 f8cf 	bl	800216c <_exit>

0800afce <_malloc_usable_size_r>:
 800afce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afd2:	1f18      	subs	r0, r3, #4
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	bfbc      	itt	lt
 800afd8:	580b      	ldrlt	r3, [r1, r0]
 800afda:	18c0      	addlt	r0, r0, r3
 800afdc:	4770      	bx	lr

0800afde <_raise_r>:
 800afde:	291f      	cmp	r1, #31
 800afe0:	b538      	push	{r3, r4, r5, lr}
 800afe2:	4605      	mov	r5, r0
 800afe4:	460c      	mov	r4, r1
 800afe6:	d904      	bls.n	800aff2 <_raise_r+0x14>
 800afe8:	2316      	movs	r3, #22
 800afea:	6003      	str	r3, [r0, #0]
 800afec:	f04f 30ff 	mov.w	r0, #4294967295
 800aff0:	bd38      	pop	{r3, r4, r5, pc}
 800aff2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aff4:	b112      	cbz	r2, 800affc <_raise_r+0x1e>
 800aff6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800affa:	b94b      	cbnz	r3, 800b010 <_raise_r+0x32>
 800affc:	4628      	mov	r0, r5
 800affe:	f000 f831 	bl	800b064 <_getpid_r>
 800b002:	4622      	mov	r2, r4
 800b004:	4601      	mov	r1, r0
 800b006:	4628      	mov	r0, r5
 800b008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b00c:	f000 b818 	b.w	800b040 <_kill_r>
 800b010:	2b01      	cmp	r3, #1
 800b012:	d00a      	beq.n	800b02a <_raise_r+0x4c>
 800b014:	1c59      	adds	r1, r3, #1
 800b016:	d103      	bne.n	800b020 <_raise_r+0x42>
 800b018:	2316      	movs	r3, #22
 800b01a:	6003      	str	r3, [r0, #0]
 800b01c:	2001      	movs	r0, #1
 800b01e:	e7e7      	b.n	800aff0 <_raise_r+0x12>
 800b020:	2100      	movs	r1, #0
 800b022:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b026:	4620      	mov	r0, r4
 800b028:	4798      	blx	r3
 800b02a:	2000      	movs	r0, #0
 800b02c:	e7e0      	b.n	800aff0 <_raise_r+0x12>
	...

0800b030 <raise>:
 800b030:	4b02      	ldr	r3, [pc, #8]	@ (800b03c <raise+0xc>)
 800b032:	4601      	mov	r1, r0
 800b034:	6818      	ldr	r0, [r3, #0]
 800b036:	f7ff bfd2 	b.w	800afde <_raise_r>
 800b03a:	bf00      	nop
 800b03c:	20000028 	.word	0x20000028

0800b040 <_kill_r>:
 800b040:	b538      	push	{r3, r4, r5, lr}
 800b042:	4d07      	ldr	r5, [pc, #28]	@ (800b060 <_kill_r+0x20>)
 800b044:	2300      	movs	r3, #0
 800b046:	4604      	mov	r4, r0
 800b048:	4608      	mov	r0, r1
 800b04a:	4611      	mov	r1, r2
 800b04c:	602b      	str	r3, [r5, #0]
 800b04e:	f7f7 f87d 	bl	800214c <_kill>
 800b052:	1c43      	adds	r3, r0, #1
 800b054:	d102      	bne.n	800b05c <_kill_r+0x1c>
 800b056:	682b      	ldr	r3, [r5, #0]
 800b058:	b103      	cbz	r3, 800b05c <_kill_r+0x1c>
 800b05a:	6023      	str	r3, [r4, #0]
 800b05c:	bd38      	pop	{r3, r4, r5, pc}
 800b05e:	bf00      	nop
 800b060:	20013314 	.word	0x20013314

0800b064 <_getpid_r>:
 800b064:	f7f7 b86a 	b.w	800213c <_getpid>

0800b068 <pow>:
 800b068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b06a:	ed2d 8b02 	vpush	{d8}
 800b06e:	eeb0 8a40 	vmov.f32	s16, s0
 800b072:	eef0 8a60 	vmov.f32	s17, s1
 800b076:	ec55 4b11 	vmov	r4, r5, d1
 800b07a:	f000 fb19 	bl	800b6b0 <__ieee754_pow>
 800b07e:	4622      	mov	r2, r4
 800b080:	462b      	mov	r3, r5
 800b082:	4620      	mov	r0, r4
 800b084:	4629      	mov	r1, r5
 800b086:	ec57 6b10 	vmov	r6, r7, d0
 800b08a:	f7f5 fd6f 	bl	8000b6c <__aeabi_dcmpun>
 800b08e:	2800      	cmp	r0, #0
 800b090:	d13b      	bne.n	800b10a <pow+0xa2>
 800b092:	ec51 0b18 	vmov	r0, r1, d8
 800b096:	2200      	movs	r2, #0
 800b098:	2300      	movs	r3, #0
 800b09a:	f7f5 fd35 	bl	8000b08 <__aeabi_dcmpeq>
 800b09e:	b1b8      	cbz	r0, 800b0d0 <pow+0x68>
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	4629      	mov	r1, r5
 800b0a8:	f7f5 fd2e 	bl	8000b08 <__aeabi_dcmpeq>
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	d146      	bne.n	800b13e <pow+0xd6>
 800b0b0:	ec45 4b10 	vmov	d0, r4, r5
 800b0b4:	f000 fa14 	bl	800b4e0 <finite>
 800b0b8:	b338      	cbz	r0, 800b10a <pow+0xa2>
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	2300      	movs	r3, #0
 800b0be:	4620      	mov	r0, r4
 800b0c0:	4629      	mov	r1, r5
 800b0c2:	f7f5 fd2b 	bl	8000b1c <__aeabi_dcmplt>
 800b0c6:	b300      	cbz	r0, 800b10a <pow+0xa2>
 800b0c8:	f7fd ffe8 	bl	800909c <__errno>
 800b0cc:	2322      	movs	r3, #34	@ 0x22
 800b0ce:	e01b      	b.n	800b108 <pow+0xa0>
 800b0d0:	ec47 6b10 	vmov	d0, r6, r7
 800b0d4:	f000 fa04 	bl	800b4e0 <finite>
 800b0d8:	b9e0      	cbnz	r0, 800b114 <pow+0xac>
 800b0da:	eeb0 0a48 	vmov.f32	s0, s16
 800b0de:	eef0 0a68 	vmov.f32	s1, s17
 800b0e2:	f000 f9fd 	bl	800b4e0 <finite>
 800b0e6:	b1a8      	cbz	r0, 800b114 <pow+0xac>
 800b0e8:	ec45 4b10 	vmov	d0, r4, r5
 800b0ec:	f000 f9f8 	bl	800b4e0 <finite>
 800b0f0:	b180      	cbz	r0, 800b114 <pow+0xac>
 800b0f2:	4632      	mov	r2, r6
 800b0f4:	463b      	mov	r3, r7
 800b0f6:	4630      	mov	r0, r6
 800b0f8:	4639      	mov	r1, r7
 800b0fa:	f7f5 fd37 	bl	8000b6c <__aeabi_dcmpun>
 800b0fe:	2800      	cmp	r0, #0
 800b100:	d0e2      	beq.n	800b0c8 <pow+0x60>
 800b102:	f7fd ffcb 	bl	800909c <__errno>
 800b106:	2321      	movs	r3, #33	@ 0x21
 800b108:	6003      	str	r3, [r0, #0]
 800b10a:	ecbd 8b02 	vpop	{d8}
 800b10e:	ec47 6b10 	vmov	d0, r6, r7
 800b112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b114:	2200      	movs	r2, #0
 800b116:	2300      	movs	r3, #0
 800b118:	4630      	mov	r0, r6
 800b11a:	4639      	mov	r1, r7
 800b11c:	f7f5 fcf4 	bl	8000b08 <__aeabi_dcmpeq>
 800b120:	2800      	cmp	r0, #0
 800b122:	d0f2      	beq.n	800b10a <pow+0xa2>
 800b124:	eeb0 0a48 	vmov.f32	s0, s16
 800b128:	eef0 0a68 	vmov.f32	s1, s17
 800b12c:	f000 f9d8 	bl	800b4e0 <finite>
 800b130:	2800      	cmp	r0, #0
 800b132:	d0ea      	beq.n	800b10a <pow+0xa2>
 800b134:	ec45 4b10 	vmov	d0, r4, r5
 800b138:	f000 f9d2 	bl	800b4e0 <finite>
 800b13c:	e7c3      	b.n	800b0c6 <pow+0x5e>
 800b13e:	4f01      	ldr	r7, [pc, #4]	@ (800b144 <pow+0xdc>)
 800b140:	2600      	movs	r6, #0
 800b142:	e7e2      	b.n	800b10a <pow+0xa2>
 800b144:	3ff00000 	.word	0x3ff00000

0800b148 <sqrt>:
 800b148:	b538      	push	{r3, r4, r5, lr}
 800b14a:	ed2d 8b02 	vpush	{d8}
 800b14e:	ec55 4b10 	vmov	r4, r5, d0
 800b152:	f000 f9d1 	bl	800b4f8 <__ieee754_sqrt>
 800b156:	4622      	mov	r2, r4
 800b158:	462b      	mov	r3, r5
 800b15a:	4620      	mov	r0, r4
 800b15c:	4629      	mov	r1, r5
 800b15e:	eeb0 8a40 	vmov.f32	s16, s0
 800b162:	eef0 8a60 	vmov.f32	s17, s1
 800b166:	f7f5 fd01 	bl	8000b6c <__aeabi_dcmpun>
 800b16a:	b990      	cbnz	r0, 800b192 <sqrt+0x4a>
 800b16c:	2200      	movs	r2, #0
 800b16e:	2300      	movs	r3, #0
 800b170:	4620      	mov	r0, r4
 800b172:	4629      	mov	r1, r5
 800b174:	f7f5 fcd2 	bl	8000b1c <__aeabi_dcmplt>
 800b178:	b158      	cbz	r0, 800b192 <sqrt+0x4a>
 800b17a:	f7fd ff8f 	bl	800909c <__errno>
 800b17e:	2321      	movs	r3, #33	@ 0x21
 800b180:	6003      	str	r3, [r0, #0]
 800b182:	2200      	movs	r2, #0
 800b184:	2300      	movs	r3, #0
 800b186:	4610      	mov	r0, r2
 800b188:	4619      	mov	r1, r3
 800b18a:	f7f5 fb7f 	bl	800088c <__aeabi_ddiv>
 800b18e:	ec41 0b18 	vmov	d8, r0, r1
 800b192:	eeb0 0a48 	vmov.f32	s0, s16
 800b196:	eef0 0a68 	vmov.f32	s1, s17
 800b19a:	ecbd 8b02 	vpop	{d8}
 800b19e:	bd38      	pop	{r3, r4, r5, pc}

0800b1a0 <atan>:
 800b1a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a4:	ec55 4b10 	vmov	r4, r5, d0
 800b1a8:	4bbf      	ldr	r3, [pc, #764]	@ (800b4a8 <atan+0x308>)
 800b1aa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800b1ae:	429e      	cmp	r6, r3
 800b1b0:	46ab      	mov	fp, r5
 800b1b2:	d918      	bls.n	800b1e6 <atan+0x46>
 800b1b4:	4bbd      	ldr	r3, [pc, #756]	@ (800b4ac <atan+0x30c>)
 800b1b6:	429e      	cmp	r6, r3
 800b1b8:	d801      	bhi.n	800b1be <atan+0x1e>
 800b1ba:	d109      	bne.n	800b1d0 <atan+0x30>
 800b1bc:	b144      	cbz	r4, 800b1d0 <atan+0x30>
 800b1be:	4622      	mov	r2, r4
 800b1c0:	462b      	mov	r3, r5
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	4629      	mov	r1, r5
 800b1c6:	f7f5 f881 	bl	80002cc <__adddf3>
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	460d      	mov	r5, r1
 800b1ce:	e006      	b.n	800b1de <atan+0x3e>
 800b1d0:	f1bb 0f00 	cmp.w	fp, #0
 800b1d4:	f340 812b 	ble.w	800b42e <atan+0x28e>
 800b1d8:	a597      	add	r5, pc, #604	@ (adr r5, 800b438 <atan+0x298>)
 800b1da:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b1de:	ec45 4b10 	vmov	d0, r4, r5
 800b1e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e6:	4bb2      	ldr	r3, [pc, #712]	@ (800b4b0 <atan+0x310>)
 800b1e8:	429e      	cmp	r6, r3
 800b1ea:	d813      	bhi.n	800b214 <atan+0x74>
 800b1ec:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800b1f0:	429e      	cmp	r6, r3
 800b1f2:	d80c      	bhi.n	800b20e <atan+0x6e>
 800b1f4:	a392      	add	r3, pc, #584	@ (adr r3, 800b440 <atan+0x2a0>)
 800b1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	4629      	mov	r1, r5
 800b1fe:	f7f5 f865 	bl	80002cc <__adddf3>
 800b202:	4bac      	ldr	r3, [pc, #688]	@ (800b4b4 <atan+0x314>)
 800b204:	2200      	movs	r2, #0
 800b206:	f7f5 fca7 	bl	8000b58 <__aeabi_dcmpgt>
 800b20a:	2800      	cmp	r0, #0
 800b20c:	d1e7      	bne.n	800b1de <atan+0x3e>
 800b20e:	f04f 3aff 	mov.w	sl, #4294967295
 800b212:	e029      	b.n	800b268 <atan+0xc8>
 800b214:	f000 f95c 	bl	800b4d0 <fabs>
 800b218:	4ba7      	ldr	r3, [pc, #668]	@ (800b4b8 <atan+0x318>)
 800b21a:	429e      	cmp	r6, r3
 800b21c:	ec55 4b10 	vmov	r4, r5, d0
 800b220:	f200 80bc 	bhi.w	800b39c <atan+0x1fc>
 800b224:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800b228:	429e      	cmp	r6, r3
 800b22a:	f200 809e 	bhi.w	800b36a <atan+0x1ca>
 800b22e:	4622      	mov	r2, r4
 800b230:	462b      	mov	r3, r5
 800b232:	4620      	mov	r0, r4
 800b234:	4629      	mov	r1, r5
 800b236:	f7f5 f849 	bl	80002cc <__adddf3>
 800b23a:	4b9e      	ldr	r3, [pc, #632]	@ (800b4b4 <atan+0x314>)
 800b23c:	2200      	movs	r2, #0
 800b23e:	f7f5 f843 	bl	80002c8 <__aeabi_dsub>
 800b242:	2200      	movs	r2, #0
 800b244:	4606      	mov	r6, r0
 800b246:	460f      	mov	r7, r1
 800b248:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b24c:	4620      	mov	r0, r4
 800b24e:	4629      	mov	r1, r5
 800b250:	f7f5 f83c 	bl	80002cc <__adddf3>
 800b254:	4602      	mov	r2, r0
 800b256:	460b      	mov	r3, r1
 800b258:	4630      	mov	r0, r6
 800b25a:	4639      	mov	r1, r7
 800b25c:	f7f5 fb16 	bl	800088c <__aeabi_ddiv>
 800b260:	f04f 0a00 	mov.w	sl, #0
 800b264:	4604      	mov	r4, r0
 800b266:	460d      	mov	r5, r1
 800b268:	4622      	mov	r2, r4
 800b26a:	462b      	mov	r3, r5
 800b26c:	4620      	mov	r0, r4
 800b26e:	4629      	mov	r1, r5
 800b270:	f7f5 f9e2 	bl	8000638 <__aeabi_dmul>
 800b274:	4602      	mov	r2, r0
 800b276:	460b      	mov	r3, r1
 800b278:	4680      	mov	r8, r0
 800b27a:	4689      	mov	r9, r1
 800b27c:	f7f5 f9dc 	bl	8000638 <__aeabi_dmul>
 800b280:	a371      	add	r3, pc, #452	@ (adr r3, 800b448 <atan+0x2a8>)
 800b282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b286:	4606      	mov	r6, r0
 800b288:	460f      	mov	r7, r1
 800b28a:	f7f5 f9d5 	bl	8000638 <__aeabi_dmul>
 800b28e:	a370      	add	r3, pc, #448	@ (adr r3, 800b450 <atan+0x2b0>)
 800b290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b294:	f7f5 f81a 	bl	80002cc <__adddf3>
 800b298:	4632      	mov	r2, r6
 800b29a:	463b      	mov	r3, r7
 800b29c:	f7f5 f9cc 	bl	8000638 <__aeabi_dmul>
 800b2a0:	a36d      	add	r3, pc, #436	@ (adr r3, 800b458 <atan+0x2b8>)
 800b2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a6:	f7f5 f811 	bl	80002cc <__adddf3>
 800b2aa:	4632      	mov	r2, r6
 800b2ac:	463b      	mov	r3, r7
 800b2ae:	f7f5 f9c3 	bl	8000638 <__aeabi_dmul>
 800b2b2:	a36b      	add	r3, pc, #428	@ (adr r3, 800b460 <atan+0x2c0>)
 800b2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b8:	f7f5 f808 	bl	80002cc <__adddf3>
 800b2bc:	4632      	mov	r2, r6
 800b2be:	463b      	mov	r3, r7
 800b2c0:	f7f5 f9ba 	bl	8000638 <__aeabi_dmul>
 800b2c4:	a368      	add	r3, pc, #416	@ (adr r3, 800b468 <atan+0x2c8>)
 800b2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ca:	f7f4 ffff 	bl	80002cc <__adddf3>
 800b2ce:	4632      	mov	r2, r6
 800b2d0:	463b      	mov	r3, r7
 800b2d2:	f7f5 f9b1 	bl	8000638 <__aeabi_dmul>
 800b2d6:	a366      	add	r3, pc, #408	@ (adr r3, 800b470 <atan+0x2d0>)
 800b2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2dc:	f7f4 fff6 	bl	80002cc <__adddf3>
 800b2e0:	4642      	mov	r2, r8
 800b2e2:	464b      	mov	r3, r9
 800b2e4:	f7f5 f9a8 	bl	8000638 <__aeabi_dmul>
 800b2e8:	a363      	add	r3, pc, #396	@ (adr r3, 800b478 <atan+0x2d8>)
 800b2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ee:	4680      	mov	r8, r0
 800b2f0:	4689      	mov	r9, r1
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	4639      	mov	r1, r7
 800b2f6:	f7f5 f99f 	bl	8000638 <__aeabi_dmul>
 800b2fa:	a361      	add	r3, pc, #388	@ (adr r3, 800b480 <atan+0x2e0>)
 800b2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b300:	f7f4 ffe2 	bl	80002c8 <__aeabi_dsub>
 800b304:	4632      	mov	r2, r6
 800b306:	463b      	mov	r3, r7
 800b308:	f7f5 f996 	bl	8000638 <__aeabi_dmul>
 800b30c:	a35e      	add	r3, pc, #376	@ (adr r3, 800b488 <atan+0x2e8>)
 800b30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b312:	f7f4 ffd9 	bl	80002c8 <__aeabi_dsub>
 800b316:	4632      	mov	r2, r6
 800b318:	463b      	mov	r3, r7
 800b31a:	f7f5 f98d 	bl	8000638 <__aeabi_dmul>
 800b31e:	a35c      	add	r3, pc, #368	@ (adr r3, 800b490 <atan+0x2f0>)
 800b320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b324:	f7f4 ffd0 	bl	80002c8 <__aeabi_dsub>
 800b328:	4632      	mov	r2, r6
 800b32a:	463b      	mov	r3, r7
 800b32c:	f7f5 f984 	bl	8000638 <__aeabi_dmul>
 800b330:	a359      	add	r3, pc, #356	@ (adr r3, 800b498 <atan+0x2f8>)
 800b332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b336:	f7f4 ffc7 	bl	80002c8 <__aeabi_dsub>
 800b33a:	4632      	mov	r2, r6
 800b33c:	463b      	mov	r3, r7
 800b33e:	f7f5 f97b 	bl	8000638 <__aeabi_dmul>
 800b342:	4602      	mov	r2, r0
 800b344:	460b      	mov	r3, r1
 800b346:	4640      	mov	r0, r8
 800b348:	4649      	mov	r1, r9
 800b34a:	f7f4 ffbf 	bl	80002cc <__adddf3>
 800b34e:	4622      	mov	r2, r4
 800b350:	462b      	mov	r3, r5
 800b352:	f7f5 f971 	bl	8000638 <__aeabi_dmul>
 800b356:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b35a:	4602      	mov	r2, r0
 800b35c:	460b      	mov	r3, r1
 800b35e:	d148      	bne.n	800b3f2 <atan+0x252>
 800b360:	4620      	mov	r0, r4
 800b362:	4629      	mov	r1, r5
 800b364:	f7f4 ffb0 	bl	80002c8 <__aeabi_dsub>
 800b368:	e72f      	b.n	800b1ca <atan+0x2a>
 800b36a:	4b52      	ldr	r3, [pc, #328]	@ (800b4b4 <atan+0x314>)
 800b36c:	2200      	movs	r2, #0
 800b36e:	4620      	mov	r0, r4
 800b370:	4629      	mov	r1, r5
 800b372:	f7f4 ffa9 	bl	80002c8 <__aeabi_dsub>
 800b376:	4b4f      	ldr	r3, [pc, #316]	@ (800b4b4 <atan+0x314>)
 800b378:	4606      	mov	r6, r0
 800b37a:	460f      	mov	r7, r1
 800b37c:	2200      	movs	r2, #0
 800b37e:	4620      	mov	r0, r4
 800b380:	4629      	mov	r1, r5
 800b382:	f7f4 ffa3 	bl	80002cc <__adddf3>
 800b386:	4602      	mov	r2, r0
 800b388:	460b      	mov	r3, r1
 800b38a:	4630      	mov	r0, r6
 800b38c:	4639      	mov	r1, r7
 800b38e:	f7f5 fa7d 	bl	800088c <__aeabi_ddiv>
 800b392:	f04f 0a01 	mov.w	sl, #1
 800b396:	4604      	mov	r4, r0
 800b398:	460d      	mov	r5, r1
 800b39a:	e765      	b.n	800b268 <atan+0xc8>
 800b39c:	4b47      	ldr	r3, [pc, #284]	@ (800b4bc <atan+0x31c>)
 800b39e:	429e      	cmp	r6, r3
 800b3a0:	d21c      	bcs.n	800b3dc <atan+0x23c>
 800b3a2:	4b47      	ldr	r3, [pc, #284]	@ (800b4c0 <atan+0x320>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	4629      	mov	r1, r5
 800b3aa:	f7f4 ff8d 	bl	80002c8 <__aeabi_dsub>
 800b3ae:	4b44      	ldr	r3, [pc, #272]	@ (800b4c0 <atan+0x320>)
 800b3b0:	4606      	mov	r6, r0
 800b3b2:	460f      	mov	r7, r1
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	4629      	mov	r1, r5
 800b3ba:	f7f5 f93d 	bl	8000638 <__aeabi_dmul>
 800b3be:	4b3d      	ldr	r3, [pc, #244]	@ (800b4b4 <atan+0x314>)
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	f7f4 ff83 	bl	80002cc <__adddf3>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	4639      	mov	r1, r7
 800b3ce:	f7f5 fa5d 	bl	800088c <__aeabi_ddiv>
 800b3d2:	f04f 0a02 	mov.w	sl, #2
 800b3d6:	4604      	mov	r4, r0
 800b3d8:	460d      	mov	r5, r1
 800b3da:	e745      	b.n	800b268 <atan+0xc8>
 800b3dc:	4622      	mov	r2, r4
 800b3de:	462b      	mov	r3, r5
 800b3e0:	4938      	ldr	r1, [pc, #224]	@ (800b4c4 <atan+0x324>)
 800b3e2:	2000      	movs	r0, #0
 800b3e4:	f7f5 fa52 	bl	800088c <__aeabi_ddiv>
 800b3e8:	f04f 0a03 	mov.w	sl, #3
 800b3ec:	4604      	mov	r4, r0
 800b3ee:	460d      	mov	r5, r1
 800b3f0:	e73a      	b.n	800b268 <atan+0xc8>
 800b3f2:	4b35      	ldr	r3, [pc, #212]	@ (800b4c8 <atan+0x328>)
 800b3f4:	4e35      	ldr	r6, [pc, #212]	@ (800b4cc <atan+0x32c>)
 800b3f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fe:	f7f4 ff63 	bl	80002c8 <__aeabi_dsub>
 800b402:	4622      	mov	r2, r4
 800b404:	462b      	mov	r3, r5
 800b406:	f7f4 ff5f 	bl	80002c8 <__aeabi_dsub>
 800b40a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b40e:	4602      	mov	r2, r0
 800b410:	460b      	mov	r3, r1
 800b412:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b416:	f7f4 ff57 	bl	80002c8 <__aeabi_dsub>
 800b41a:	f1bb 0f00 	cmp.w	fp, #0
 800b41e:	4604      	mov	r4, r0
 800b420:	460d      	mov	r5, r1
 800b422:	f6bf aedc 	bge.w	800b1de <atan+0x3e>
 800b426:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b42a:	461d      	mov	r5, r3
 800b42c:	e6d7      	b.n	800b1de <atan+0x3e>
 800b42e:	a51c      	add	r5, pc, #112	@ (adr r5, 800b4a0 <atan+0x300>)
 800b430:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b434:	e6d3      	b.n	800b1de <atan+0x3e>
 800b436:	bf00      	nop
 800b438:	54442d18 	.word	0x54442d18
 800b43c:	3ff921fb 	.word	0x3ff921fb
 800b440:	8800759c 	.word	0x8800759c
 800b444:	7e37e43c 	.word	0x7e37e43c
 800b448:	e322da11 	.word	0xe322da11
 800b44c:	3f90ad3a 	.word	0x3f90ad3a
 800b450:	24760deb 	.word	0x24760deb
 800b454:	3fa97b4b 	.word	0x3fa97b4b
 800b458:	a0d03d51 	.word	0xa0d03d51
 800b45c:	3fb10d66 	.word	0x3fb10d66
 800b460:	c54c206e 	.word	0xc54c206e
 800b464:	3fb745cd 	.word	0x3fb745cd
 800b468:	920083ff 	.word	0x920083ff
 800b46c:	3fc24924 	.word	0x3fc24924
 800b470:	5555550d 	.word	0x5555550d
 800b474:	3fd55555 	.word	0x3fd55555
 800b478:	2c6a6c2f 	.word	0x2c6a6c2f
 800b47c:	bfa2b444 	.word	0xbfa2b444
 800b480:	52defd9a 	.word	0x52defd9a
 800b484:	3fadde2d 	.word	0x3fadde2d
 800b488:	af749a6d 	.word	0xaf749a6d
 800b48c:	3fb3b0f2 	.word	0x3fb3b0f2
 800b490:	fe231671 	.word	0xfe231671
 800b494:	3fbc71c6 	.word	0x3fbc71c6
 800b498:	9998ebc4 	.word	0x9998ebc4
 800b49c:	3fc99999 	.word	0x3fc99999
 800b4a0:	54442d18 	.word	0x54442d18
 800b4a4:	bff921fb 	.word	0xbff921fb
 800b4a8:	440fffff 	.word	0x440fffff
 800b4ac:	7ff00000 	.word	0x7ff00000
 800b4b0:	3fdbffff 	.word	0x3fdbffff
 800b4b4:	3ff00000 	.word	0x3ff00000
 800b4b8:	3ff2ffff 	.word	0x3ff2ffff
 800b4bc:	40038000 	.word	0x40038000
 800b4c0:	3ff80000 	.word	0x3ff80000
 800b4c4:	bff00000 	.word	0xbff00000
 800b4c8:	0800c7e0 	.word	0x0800c7e0
 800b4cc:	0800c800 	.word	0x0800c800

0800b4d0 <fabs>:
 800b4d0:	ec51 0b10 	vmov	r0, r1, d0
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b4da:	ec43 2b10 	vmov	d0, r2, r3
 800b4de:	4770      	bx	lr

0800b4e0 <finite>:
 800b4e0:	b082      	sub	sp, #8
 800b4e2:	ed8d 0b00 	vstr	d0, [sp]
 800b4e6:	9801      	ldr	r0, [sp, #4]
 800b4e8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800b4ec:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b4f0:	0fc0      	lsrs	r0, r0, #31
 800b4f2:	b002      	add	sp, #8
 800b4f4:	4770      	bx	lr
	...

0800b4f8 <__ieee754_sqrt>:
 800b4f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4fc:	4a68      	ldr	r2, [pc, #416]	@ (800b6a0 <__ieee754_sqrt+0x1a8>)
 800b4fe:	ec55 4b10 	vmov	r4, r5, d0
 800b502:	43aa      	bics	r2, r5
 800b504:	462b      	mov	r3, r5
 800b506:	4621      	mov	r1, r4
 800b508:	d110      	bne.n	800b52c <__ieee754_sqrt+0x34>
 800b50a:	4622      	mov	r2, r4
 800b50c:	4620      	mov	r0, r4
 800b50e:	4629      	mov	r1, r5
 800b510:	f7f5 f892 	bl	8000638 <__aeabi_dmul>
 800b514:	4602      	mov	r2, r0
 800b516:	460b      	mov	r3, r1
 800b518:	4620      	mov	r0, r4
 800b51a:	4629      	mov	r1, r5
 800b51c:	f7f4 fed6 	bl	80002cc <__adddf3>
 800b520:	4604      	mov	r4, r0
 800b522:	460d      	mov	r5, r1
 800b524:	ec45 4b10 	vmov	d0, r4, r5
 800b528:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b52c:	2d00      	cmp	r5, #0
 800b52e:	dc0e      	bgt.n	800b54e <__ieee754_sqrt+0x56>
 800b530:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b534:	4322      	orrs	r2, r4
 800b536:	d0f5      	beq.n	800b524 <__ieee754_sqrt+0x2c>
 800b538:	b19d      	cbz	r5, 800b562 <__ieee754_sqrt+0x6a>
 800b53a:	4622      	mov	r2, r4
 800b53c:	4620      	mov	r0, r4
 800b53e:	4629      	mov	r1, r5
 800b540:	f7f4 fec2 	bl	80002c8 <__aeabi_dsub>
 800b544:	4602      	mov	r2, r0
 800b546:	460b      	mov	r3, r1
 800b548:	f7f5 f9a0 	bl	800088c <__aeabi_ddiv>
 800b54c:	e7e8      	b.n	800b520 <__ieee754_sqrt+0x28>
 800b54e:	152a      	asrs	r2, r5, #20
 800b550:	d115      	bne.n	800b57e <__ieee754_sqrt+0x86>
 800b552:	2000      	movs	r0, #0
 800b554:	e009      	b.n	800b56a <__ieee754_sqrt+0x72>
 800b556:	0acb      	lsrs	r3, r1, #11
 800b558:	3a15      	subs	r2, #21
 800b55a:	0549      	lsls	r1, r1, #21
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d0fa      	beq.n	800b556 <__ieee754_sqrt+0x5e>
 800b560:	e7f7      	b.n	800b552 <__ieee754_sqrt+0x5a>
 800b562:	462a      	mov	r2, r5
 800b564:	e7fa      	b.n	800b55c <__ieee754_sqrt+0x64>
 800b566:	005b      	lsls	r3, r3, #1
 800b568:	3001      	adds	r0, #1
 800b56a:	02dc      	lsls	r4, r3, #11
 800b56c:	d5fb      	bpl.n	800b566 <__ieee754_sqrt+0x6e>
 800b56e:	1e44      	subs	r4, r0, #1
 800b570:	1b12      	subs	r2, r2, r4
 800b572:	f1c0 0420 	rsb	r4, r0, #32
 800b576:	fa21 f404 	lsr.w	r4, r1, r4
 800b57a:	4323      	orrs	r3, r4
 800b57c:	4081      	lsls	r1, r0
 800b57e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b582:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800b586:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b58a:	07d2      	lsls	r2, r2, #31
 800b58c:	bf5c      	itt	pl
 800b58e:	005b      	lslpl	r3, r3, #1
 800b590:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b594:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b598:	bf58      	it	pl
 800b59a:	0049      	lslpl	r1, r1, #1
 800b59c:	2600      	movs	r6, #0
 800b59e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b5a2:	106d      	asrs	r5, r5, #1
 800b5a4:	0049      	lsls	r1, r1, #1
 800b5a6:	2016      	movs	r0, #22
 800b5a8:	4632      	mov	r2, r6
 800b5aa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b5ae:	1917      	adds	r7, r2, r4
 800b5b0:	429f      	cmp	r7, r3
 800b5b2:	bfde      	ittt	le
 800b5b4:	193a      	addle	r2, r7, r4
 800b5b6:	1bdb      	suble	r3, r3, r7
 800b5b8:	1936      	addle	r6, r6, r4
 800b5ba:	0fcf      	lsrs	r7, r1, #31
 800b5bc:	3801      	subs	r0, #1
 800b5be:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800b5c2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b5c6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b5ca:	d1f0      	bne.n	800b5ae <__ieee754_sqrt+0xb6>
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	2720      	movs	r7, #32
 800b5d0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	eb00 0e0c 	add.w	lr, r0, ip
 800b5da:	db02      	blt.n	800b5e2 <__ieee754_sqrt+0xea>
 800b5dc:	d113      	bne.n	800b606 <__ieee754_sqrt+0x10e>
 800b5de:	458e      	cmp	lr, r1
 800b5e0:	d811      	bhi.n	800b606 <__ieee754_sqrt+0x10e>
 800b5e2:	f1be 0f00 	cmp.w	lr, #0
 800b5e6:	eb0e 000c 	add.w	r0, lr, ip
 800b5ea:	da42      	bge.n	800b672 <__ieee754_sqrt+0x17a>
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	db40      	blt.n	800b672 <__ieee754_sqrt+0x17a>
 800b5f0:	f102 0801 	add.w	r8, r2, #1
 800b5f4:	1a9b      	subs	r3, r3, r2
 800b5f6:	458e      	cmp	lr, r1
 800b5f8:	bf88      	it	hi
 800b5fa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b5fe:	eba1 010e 	sub.w	r1, r1, lr
 800b602:	4464      	add	r4, ip
 800b604:	4642      	mov	r2, r8
 800b606:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b60a:	3f01      	subs	r7, #1
 800b60c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b610:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b614:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b618:	d1dc      	bne.n	800b5d4 <__ieee754_sqrt+0xdc>
 800b61a:	4319      	orrs	r1, r3
 800b61c:	d01b      	beq.n	800b656 <__ieee754_sqrt+0x15e>
 800b61e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800b6a4 <__ieee754_sqrt+0x1ac>
 800b622:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800b6a8 <__ieee754_sqrt+0x1b0>
 800b626:	e9da 0100 	ldrd	r0, r1, [sl]
 800b62a:	e9db 2300 	ldrd	r2, r3, [fp]
 800b62e:	f7f4 fe4b 	bl	80002c8 <__aeabi_dsub>
 800b632:	e9da 8900 	ldrd	r8, r9, [sl]
 800b636:	4602      	mov	r2, r0
 800b638:	460b      	mov	r3, r1
 800b63a:	4640      	mov	r0, r8
 800b63c:	4649      	mov	r1, r9
 800b63e:	f7f5 fa77 	bl	8000b30 <__aeabi_dcmple>
 800b642:	b140      	cbz	r0, 800b656 <__ieee754_sqrt+0x15e>
 800b644:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b648:	e9da 0100 	ldrd	r0, r1, [sl]
 800b64c:	e9db 2300 	ldrd	r2, r3, [fp]
 800b650:	d111      	bne.n	800b676 <__ieee754_sqrt+0x17e>
 800b652:	3601      	adds	r6, #1
 800b654:	463c      	mov	r4, r7
 800b656:	1072      	asrs	r2, r6, #1
 800b658:	0863      	lsrs	r3, r4, #1
 800b65a:	07f1      	lsls	r1, r6, #31
 800b65c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b660:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b664:	bf48      	it	mi
 800b666:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b66a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800b66e:	4618      	mov	r0, r3
 800b670:	e756      	b.n	800b520 <__ieee754_sqrt+0x28>
 800b672:	4690      	mov	r8, r2
 800b674:	e7be      	b.n	800b5f4 <__ieee754_sqrt+0xfc>
 800b676:	f7f4 fe29 	bl	80002cc <__adddf3>
 800b67a:	e9da 8900 	ldrd	r8, r9, [sl]
 800b67e:	4602      	mov	r2, r0
 800b680:	460b      	mov	r3, r1
 800b682:	4640      	mov	r0, r8
 800b684:	4649      	mov	r1, r9
 800b686:	f7f5 fa49 	bl	8000b1c <__aeabi_dcmplt>
 800b68a:	b120      	cbz	r0, 800b696 <__ieee754_sqrt+0x19e>
 800b68c:	1ca0      	adds	r0, r4, #2
 800b68e:	bf08      	it	eq
 800b690:	3601      	addeq	r6, #1
 800b692:	3402      	adds	r4, #2
 800b694:	e7df      	b.n	800b656 <__ieee754_sqrt+0x15e>
 800b696:	1c63      	adds	r3, r4, #1
 800b698:	f023 0401 	bic.w	r4, r3, #1
 800b69c:	e7db      	b.n	800b656 <__ieee754_sqrt+0x15e>
 800b69e:	bf00      	nop
 800b6a0:	7ff00000 	.word	0x7ff00000
 800b6a4:	200001f0 	.word	0x200001f0
 800b6a8:	200001e8 	.word	0x200001e8
 800b6ac:	00000000 	.word	0x00000000

0800b6b0 <__ieee754_pow>:
 800b6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b4:	b091      	sub	sp, #68	@ 0x44
 800b6b6:	ed8d 1b00 	vstr	d1, [sp]
 800b6ba:	e9dd 1900 	ldrd	r1, r9, [sp]
 800b6be:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800b6c2:	ea5a 0001 	orrs.w	r0, sl, r1
 800b6c6:	ec57 6b10 	vmov	r6, r7, d0
 800b6ca:	d113      	bne.n	800b6f4 <__ieee754_pow+0x44>
 800b6cc:	19b3      	adds	r3, r6, r6
 800b6ce:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800b6d2:	4152      	adcs	r2, r2
 800b6d4:	4298      	cmp	r0, r3
 800b6d6:	4b98      	ldr	r3, [pc, #608]	@ (800b938 <__ieee754_pow+0x288>)
 800b6d8:	4193      	sbcs	r3, r2
 800b6da:	f080 84ea 	bcs.w	800c0b2 <__ieee754_pow+0xa02>
 800b6de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	4639      	mov	r1, r7
 800b6e6:	f7f4 fdf1 	bl	80002cc <__adddf3>
 800b6ea:	ec41 0b10 	vmov	d0, r0, r1
 800b6ee:	b011      	add	sp, #68	@ 0x44
 800b6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f4:	4a91      	ldr	r2, [pc, #580]	@ (800b93c <__ieee754_pow+0x28c>)
 800b6f6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b6fa:	4590      	cmp	r8, r2
 800b6fc:	463d      	mov	r5, r7
 800b6fe:	4633      	mov	r3, r6
 800b700:	d806      	bhi.n	800b710 <__ieee754_pow+0x60>
 800b702:	d101      	bne.n	800b708 <__ieee754_pow+0x58>
 800b704:	2e00      	cmp	r6, #0
 800b706:	d1ea      	bne.n	800b6de <__ieee754_pow+0x2e>
 800b708:	4592      	cmp	sl, r2
 800b70a:	d801      	bhi.n	800b710 <__ieee754_pow+0x60>
 800b70c:	d10e      	bne.n	800b72c <__ieee754_pow+0x7c>
 800b70e:	b169      	cbz	r1, 800b72c <__ieee754_pow+0x7c>
 800b710:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800b714:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800b718:	431d      	orrs	r5, r3
 800b71a:	d1e0      	bne.n	800b6de <__ieee754_pow+0x2e>
 800b71c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b720:	18db      	adds	r3, r3, r3
 800b722:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800b726:	4152      	adcs	r2, r2
 800b728:	429d      	cmp	r5, r3
 800b72a:	e7d4      	b.n	800b6d6 <__ieee754_pow+0x26>
 800b72c:	2d00      	cmp	r5, #0
 800b72e:	46c3      	mov	fp, r8
 800b730:	da3a      	bge.n	800b7a8 <__ieee754_pow+0xf8>
 800b732:	4a83      	ldr	r2, [pc, #524]	@ (800b940 <__ieee754_pow+0x290>)
 800b734:	4592      	cmp	sl, r2
 800b736:	d84d      	bhi.n	800b7d4 <__ieee754_pow+0x124>
 800b738:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b73c:	4592      	cmp	sl, r2
 800b73e:	f240 84c7 	bls.w	800c0d0 <__ieee754_pow+0xa20>
 800b742:	ea4f 522a 	mov.w	r2, sl, asr #20
 800b746:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b74a:	2a14      	cmp	r2, #20
 800b74c:	dd0f      	ble.n	800b76e <__ieee754_pow+0xbe>
 800b74e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b752:	fa21 f402 	lsr.w	r4, r1, r2
 800b756:	fa04 f202 	lsl.w	r2, r4, r2
 800b75a:	428a      	cmp	r2, r1
 800b75c:	f040 84b8 	bne.w	800c0d0 <__ieee754_pow+0xa20>
 800b760:	f004 0401 	and.w	r4, r4, #1
 800b764:	f1c4 0402 	rsb	r4, r4, #2
 800b768:	2900      	cmp	r1, #0
 800b76a:	d158      	bne.n	800b81e <__ieee754_pow+0x16e>
 800b76c:	e00e      	b.n	800b78c <__ieee754_pow+0xdc>
 800b76e:	2900      	cmp	r1, #0
 800b770:	d154      	bne.n	800b81c <__ieee754_pow+0x16c>
 800b772:	f1c2 0214 	rsb	r2, r2, #20
 800b776:	fa4a f402 	asr.w	r4, sl, r2
 800b77a:	fa04 f202 	lsl.w	r2, r4, r2
 800b77e:	4552      	cmp	r2, sl
 800b780:	f040 84a3 	bne.w	800c0ca <__ieee754_pow+0xa1a>
 800b784:	f004 0401 	and.w	r4, r4, #1
 800b788:	f1c4 0402 	rsb	r4, r4, #2
 800b78c:	4a6d      	ldr	r2, [pc, #436]	@ (800b944 <__ieee754_pow+0x294>)
 800b78e:	4592      	cmp	sl, r2
 800b790:	d12e      	bne.n	800b7f0 <__ieee754_pow+0x140>
 800b792:	f1b9 0f00 	cmp.w	r9, #0
 800b796:	f280 8494 	bge.w	800c0c2 <__ieee754_pow+0xa12>
 800b79a:	496a      	ldr	r1, [pc, #424]	@ (800b944 <__ieee754_pow+0x294>)
 800b79c:	4632      	mov	r2, r6
 800b79e:	463b      	mov	r3, r7
 800b7a0:	2000      	movs	r0, #0
 800b7a2:	f7f5 f873 	bl	800088c <__aeabi_ddiv>
 800b7a6:	e7a0      	b.n	800b6ea <__ieee754_pow+0x3a>
 800b7a8:	2400      	movs	r4, #0
 800b7aa:	bbc1      	cbnz	r1, 800b81e <__ieee754_pow+0x16e>
 800b7ac:	4a63      	ldr	r2, [pc, #396]	@ (800b93c <__ieee754_pow+0x28c>)
 800b7ae:	4592      	cmp	sl, r2
 800b7b0:	d1ec      	bne.n	800b78c <__ieee754_pow+0xdc>
 800b7b2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800b7b6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800b7ba:	431a      	orrs	r2, r3
 800b7bc:	f000 8479 	beq.w	800c0b2 <__ieee754_pow+0xa02>
 800b7c0:	4b61      	ldr	r3, [pc, #388]	@ (800b948 <__ieee754_pow+0x298>)
 800b7c2:	4598      	cmp	r8, r3
 800b7c4:	d908      	bls.n	800b7d8 <__ieee754_pow+0x128>
 800b7c6:	f1b9 0f00 	cmp.w	r9, #0
 800b7ca:	f2c0 8476 	blt.w	800c0ba <__ieee754_pow+0xa0a>
 800b7ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7d2:	e78a      	b.n	800b6ea <__ieee754_pow+0x3a>
 800b7d4:	2402      	movs	r4, #2
 800b7d6:	e7e8      	b.n	800b7aa <__ieee754_pow+0xfa>
 800b7d8:	f1b9 0f00 	cmp.w	r9, #0
 800b7dc:	f04f 0000 	mov.w	r0, #0
 800b7e0:	f04f 0100 	mov.w	r1, #0
 800b7e4:	da81      	bge.n	800b6ea <__ieee754_pow+0x3a>
 800b7e6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b7ea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b7ee:	e77c      	b.n	800b6ea <__ieee754_pow+0x3a>
 800b7f0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800b7f4:	d106      	bne.n	800b804 <__ieee754_pow+0x154>
 800b7f6:	4632      	mov	r2, r6
 800b7f8:	463b      	mov	r3, r7
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	4639      	mov	r1, r7
 800b7fe:	f7f4 ff1b 	bl	8000638 <__aeabi_dmul>
 800b802:	e772      	b.n	800b6ea <__ieee754_pow+0x3a>
 800b804:	4a51      	ldr	r2, [pc, #324]	@ (800b94c <__ieee754_pow+0x29c>)
 800b806:	4591      	cmp	r9, r2
 800b808:	d109      	bne.n	800b81e <__ieee754_pow+0x16e>
 800b80a:	2d00      	cmp	r5, #0
 800b80c:	db07      	blt.n	800b81e <__ieee754_pow+0x16e>
 800b80e:	ec47 6b10 	vmov	d0, r6, r7
 800b812:	b011      	add	sp, #68	@ 0x44
 800b814:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b818:	f7ff be6e 	b.w	800b4f8 <__ieee754_sqrt>
 800b81c:	2400      	movs	r4, #0
 800b81e:	ec47 6b10 	vmov	d0, r6, r7
 800b822:	9302      	str	r3, [sp, #8]
 800b824:	f7ff fe54 	bl	800b4d0 <fabs>
 800b828:	9b02      	ldr	r3, [sp, #8]
 800b82a:	ec51 0b10 	vmov	r0, r1, d0
 800b82e:	bb53      	cbnz	r3, 800b886 <__ieee754_pow+0x1d6>
 800b830:	4b44      	ldr	r3, [pc, #272]	@ (800b944 <__ieee754_pow+0x294>)
 800b832:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800b836:	429a      	cmp	r2, r3
 800b838:	d002      	beq.n	800b840 <__ieee754_pow+0x190>
 800b83a:	f1b8 0f00 	cmp.w	r8, #0
 800b83e:	d122      	bne.n	800b886 <__ieee754_pow+0x1d6>
 800b840:	f1b9 0f00 	cmp.w	r9, #0
 800b844:	da05      	bge.n	800b852 <__ieee754_pow+0x1a2>
 800b846:	4602      	mov	r2, r0
 800b848:	460b      	mov	r3, r1
 800b84a:	2000      	movs	r0, #0
 800b84c:	493d      	ldr	r1, [pc, #244]	@ (800b944 <__ieee754_pow+0x294>)
 800b84e:	f7f5 f81d 	bl	800088c <__aeabi_ddiv>
 800b852:	2d00      	cmp	r5, #0
 800b854:	f6bf af49 	bge.w	800b6ea <__ieee754_pow+0x3a>
 800b858:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800b85c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800b860:	ea58 0804 	orrs.w	r8, r8, r4
 800b864:	d108      	bne.n	800b878 <__ieee754_pow+0x1c8>
 800b866:	4602      	mov	r2, r0
 800b868:	460b      	mov	r3, r1
 800b86a:	4610      	mov	r0, r2
 800b86c:	4619      	mov	r1, r3
 800b86e:	f7f4 fd2b 	bl	80002c8 <__aeabi_dsub>
 800b872:	4602      	mov	r2, r0
 800b874:	460b      	mov	r3, r1
 800b876:	e794      	b.n	800b7a2 <__ieee754_pow+0xf2>
 800b878:	2c01      	cmp	r4, #1
 800b87a:	f47f af36 	bne.w	800b6ea <__ieee754_pow+0x3a>
 800b87e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b882:	4619      	mov	r1, r3
 800b884:	e731      	b.n	800b6ea <__ieee754_pow+0x3a>
 800b886:	0feb      	lsrs	r3, r5, #31
 800b888:	3b01      	subs	r3, #1
 800b88a:	ea53 0204 	orrs.w	r2, r3, r4
 800b88e:	d102      	bne.n	800b896 <__ieee754_pow+0x1e6>
 800b890:	4632      	mov	r2, r6
 800b892:	463b      	mov	r3, r7
 800b894:	e7e9      	b.n	800b86a <__ieee754_pow+0x1ba>
 800b896:	3c01      	subs	r4, #1
 800b898:	431c      	orrs	r4, r3
 800b89a:	d016      	beq.n	800b8ca <__ieee754_pow+0x21a>
 800b89c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800b928 <__ieee754_pow+0x278>
 800b8a0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800b8a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b8a8:	f240 8112 	bls.w	800bad0 <__ieee754_pow+0x420>
 800b8ac:	4b28      	ldr	r3, [pc, #160]	@ (800b950 <__ieee754_pow+0x2a0>)
 800b8ae:	459a      	cmp	sl, r3
 800b8b0:	4b25      	ldr	r3, [pc, #148]	@ (800b948 <__ieee754_pow+0x298>)
 800b8b2:	d916      	bls.n	800b8e2 <__ieee754_pow+0x232>
 800b8b4:	4598      	cmp	r8, r3
 800b8b6:	d80b      	bhi.n	800b8d0 <__ieee754_pow+0x220>
 800b8b8:	f1b9 0f00 	cmp.w	r9, #0
 800b8bc:	da0b      	bge.n	800b8d6 <__ieee754_pow+0x226>
 800b8be:	2000      	movs	r0, #0
 800b8c0:	b011      	add	sp, #68	@ 0x44
 800b8c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c6:	f000 bceb 	b.w	800c2a0 <__math_oflow>
 800b8ca:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800b930 <__ieee754_pow+0x280>
 800b8ce:	e7e7      	b.n	800b8a0 <__ieee754_pow+0x1f0>
 800b8d0:	f1b9 0f00 	cmp.w	r9, #0
 800b8d4:	dcf3      	bgt.n	800b8be <__ieee754_pow+0x20e>
 800b8d6:	2000      	movs	r0, #0
 800b8d8:	b011      	add	sp, #68	@ 0x44
 800b8da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8de:	f000 bcd7 	b.w	800c290 <__math_uflow>
 800b8e2:	4598      	cmp	r8, r3
 800b8e4:	d20c      	bcs.n	800b900 <__ieee754_pow+0x250>
 800b8e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	f7f5 f915 	bl	8000b1c <__aeabi_dcmplt>
 800b8f2:	3800      	subs	r0, #0
 800b8f4:	bf18      	it	ne
 800b8f6:	2001      	movne	r0, #1
 800b8f8:	f1b9 0f00 	cmp.w	r9, #0
 800b8fc:	daec      	bge.n	800b8d8 <__ieee754_pow+0x228>
 800b8fe:	e7df      	b.n	800b8c0 <__ieee754_pow+0x210>
 800b900:	4b10      	ldr	r3, [pc, #64]	@ (800b944 <__ieee754_pow+0x294>)
 800b902:	4598      	cmp	r8, r3
 800b904:	f04f 0200 	mov.w	r2, #0
 800b908:	d924      	bls.n	800b954 <__ieee754_pow+0x2a4>
 800b90a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b90e:	2300      	movs	r3, #0
 800b910:	f7f5 f904 	bl	8000b1c <__aeabi_dcmplt>
 800b914:	3800      	subs	r0, #0
 800b916:	bf18      	it	ne
 800b918:	2001      	movne	r0, #1
 800b91a:	f1b9 0f00 	cmp.w	r9, #0
 800b91e:	dccf      	bgt.n	800b8c0 <__ieee754_pow+0x210>
 800b920:	e7da      	b.n	800b8d8 <__ieee754_pow+0x228>
 800b922:	bf00      	nop
 800b924:	f3af 8000 	nop.w
 800b928:	00000000 	.word	0x00000000
 800b92c:	3ff00000 	.word	0x3ff00000
 800b930:	00000000 	.word	0x00000000
 800b934:	bff00000 	.word	0xbff00000
 800b938:	fff00000 	.word	0xfff00000
 800b93c:	7ff00000 	.word	0x7ff00000
 800b940:	433fffff 	.word	0x433fffff
 800b944:	3ff00000 	.word	0x3ff00000
 800b948:	3fefffff 	.word	0x3fefffff
 800b94c:	3fe00000 	.word	0x3fe00000
 800b950:	43f00000 	.word	0x43f00000
 800b954:	4b5a      	ldr	r3, [pc, #360]	@ (800bac0 <__ieee754_pow+0x410>)
 800b956:	f7f4 fcb7 	bl	80002c8 <__aeabi_dsub>
 800b95a:	a351      	add	r3, pc, #324	@ (adr r3, 800baa0 <__ieee754_pow+0x3f0>)
 800b95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b960:	4604      	mov	r4, r0
 800b962:	460d      	mov	r5, r1
 800b964:	f7f4 fe68 	bl	8000638 <__aeabi_dmul>
 800b968:	a34f      	add	r3, pc, #316	@ (adr r3, 800baa8 <__ieee754_pow+0x3f8>)
 800b96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96e:	4606      	mov	r6, r0
 800b970:	460f      	mov	r7, r1
 800b972:	4620      	mov	r0, r4
 800b974:	4629      	mov	r1, r5
 800b976:	f7f4 fe5f 	bl	8000638 <__aeabi_dmul>
 800b97a:	4b52      	ldr	r3, [pc, #328]	@ (800bac4 <__ieee754_pow+0x414>)
 800b97c:	4682      	mov	sl, r0
 800b97e:	468b      	mov	fp, r1
 800b980:	2200      	movs	r2, #0
 800b982:	4620      	mov	r0, r4
 800b984:	4629      	mov	r1, r5
 800b986:	f7f4 fe57 	bl	8000638 <__aeabi_dmul>
 800b98a:	4602      	mov	r2, r0
 800b98c:	460b      	mov	r3, r1
 800b98e:	a148      	add	r1, pc, #288	@ (adr r1, 800bab0 <__ieee754_pow+0x400>)
 800b990:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b994:	f7f4 fc98 	bl	80002c8 <__aeabi_dsub>
 800b998:	4622      	mov	r2, r4
 800b99a:	462b      	mov	r3, r5
 800b99c:	f7f4 fe4c 	bl	8000638 <__aeabi_dmul>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	2000      	movs	r0, #0
 800b9a6:	4948      	ldr	r1, [pc, #288]	@ (800bac8 <__ieee754_pow+0x418>)
 800b9a8:	f7f4 fc8e 	bl	80002c8 <__aeabi_dsub>
 800b9ac:	4622      	mov	r2, r4
 800b9ae:	4680      	mov	r8, r0
 800b9b0:	4689      	mov	r9, r1
 800b9b2:	462b      	mov	r3, r5
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	4629      	mov	r1, r5
 800b9b8:	f7f4 fe3e 	bl	8000638 <__aeabi_dmul>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	460b      	mov	r3, r1
 800b9c0:	4640      	mov	r0, r8
 800b9c2:	4649      	mov	r1, r9
 800b9c4:	f7f4 fe38 	bl	8000638 <__aeabi_dmul>
 800b9c8:	a33b      	add	r3, pc, #236	@ (adr r3, 800bab8 <__ieee754_pow+0x408>)
 800b9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ce:	f7f4 fe33 	bl	8000638 <__aeabi_dmul>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	4650      	mov	r0, sl
 800b9d8:	4659      	mov	r1, fp
 800b9da:	f7f4 fc75 	bl	80002c8 <__aeabi_dsub>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	4680      	mov	r8, r0
 800b9e4:	4689      	mov	r9, r1
 800b9e6:	4630      	mov	r0, r6
 800b9e8:	4639      	mov	r1, r7
 800b9ea:	f7f4 fc6f 	bl	80002cc <__adddf3>
 800b9ee:	2400      	movs	r4, #0
 800b9f0:	4632      	mov	r2, r6
 800b9f2:	463b      	mov	r3, r7
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	460d      	mov	r5, r1
 800b9f8:	f7f4 fc66 	bl	80002c8 <__aeabi_dsub>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	460b      	mov	r3, r1
 800ba00:	4640      	mov	r0, r8
 800ba02:	4649      	mov	r1, r9
 800ba04:	f7f4 fc60 	bl	80002c8 <__aeabi_dsub>
 800ba08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ba10:	2300      	movs	r3, #0
 800ba12:	9304      	str	r3, [sp, #16]
 800ba14:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ba18:	4606      	mov	r6, r0
 800ba1a:	460f      	mov	r7, r1
 800ba1c:	4652      	mov	r2, sl
 800ba1e:	465b      	mov	r3, fp
 800ba20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba24:	f7f4 fc50 	bl	80002c8 <__aeabi_dsub>
 800ba28:	4622      	mov	r2, r4
 800ba2a:	462b      	mov	r3, r5
 800ba2c:	f7f4 fe04 	bl	8000638 <__aeabi_dmul>
 800ba30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba34:	4680      	mov	r8, r0
 800ba36:	4689      	mov	r9, r1
 800ba38:	4630      	mov	r0, r6
 800ba3a:	4639      	mov	r1, r7
 800ba3c:	f7f4 fdfc 	bl	8000638 <__aeabi_dmul>
 800ba40:	4602      	mov	r2, r0
 800ba42:	460b      	mov	r3, r1
 800ba44:	4640      	mov	r0, r8
 800ba46:	4649      	mov	r1, r9
 800ba48:	f7f4 fc40 	bl	80002cc <__adddf3>
 800ba4c:	4652      	mov	r2, sl
 800ba4e:	465b      	mov	r3, fp
 800ba50:	4606      	mov	r6, r0
 800ba52:	460f      	mov	r7, r1
 800ba54:	4620      	mov	r0, r4
 800ba56:	4629      	mov	r1, r5
 800ba58:	f7f4 fdee 	bl	8000638 <__aeabi_dmul>
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	4602      	mov	r2, r0
 800ba60:	4680      	mov	r8, r0
 800ba62:	4689      	mov	r9, r1
 800ba64:	4630      	mov	r0, r6
 800ba66:	4639      	mov	r1, r7
 800ba68:	f7f4 fc30 	bl	80002cc <__adddf3>
 800ba6c:	4b17      	ldr	r3, [pc, #92]	@ (800bacc <__ieee754_pow+0x41c>)
 800ba6e:	4299      	cmp	r1, r3
 800ba70:	4604      	mov	r4, r0
 800ba72:	460d      	mov	r5, r1
 800ba74:	468a      	mov	sl, r1
 800ba76:	468b      	mov	fp, r1
 800ba78:	f340 82ef 	ble.w	800c05a <__ieee754_pow+0x9aa>
 800ba7c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800ba80:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800ba84:	4303      	orrs	r3, r0
 800ba86:	f000 81e8 	beq.w	800be5a <__ieee754_pow+0x7aa>
 800ba8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	2300      	movs	r3, #0
 800ba92:	f7f5 f843 	bl	8000b1c <__aeabi_dcmplt>
 800ba96:	3800      	subs	r0, #0
 800ba98:	bf18      	it	ne
 800ba9a:	2001      	movne	r0, #1
 800ba9c:	e710      	b.n	800b8c0 <__ieee754_pow+0x210>
 800ba9e:	bf00      	nop
 800baa0:	60000000 	.word	0x60000000
 800baa4:	3ff71547 	.word	0x3ff71547
 800baa8:	f85ddf44 	.word	0xf85ddf44
 800baac:	3e54ae0b 	.word	0x3e54ae0b
 800bab0:	55555555 	.word	0x55555555
 800bab4:	3fd55555 	.word	0x3fd55555
 800bab8:	652b82fe 	.word	0x652b82fe
 800babc:	3ff71547 	.word	0x3ff71547
 800bac0:	3ff00000 	.word	0x3ff00000
 800bac4:	3fd00000 	.word	0x3fd00000
 800bac8:	3fe00000 	.word	0x3fe00000
 800bacc:	408fffff 	.word	0x408fffff
 800bad0:	4bd5      	ldr	r3, [pc, #852]	@ (800be28 <__ieee754_pow+0x778>)
 800bad2:	402b      	ands	r3, r5
 800bad4:	2200      	movs	r2, #0
 800bad6:	b92b      	cbnz	r3, 800bae4 <__ieee754_pow+0x434>
 800bad8:	4bd4      	ldr	r3, [pc, #848]	@ (800be2c <__ieee754_pow+0x77c>)
 800bada:	f7f4 fdad 	bl	8000638 <__aeabi_dmul>
 800bade:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800bae2:	468b      	mov	fp, r1
 800bae4:	ea4f 532b 	mov.w	r3, fp, asr #20
 800bae8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800baec:	4413      	add	r3, r2
 800baee:	930a      	str	r3, [sp, #40]	@ 0x28
 800baf0:	4bcf      	ldr	r3, [pc, #828]	@ (800be30 <__ieee754_pow+0x780>)
 800baf2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800baf6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800bafa:	459b      	cmp	fp, r3
 800bafc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bb00:	dd08      	ble.n	800bb14 <__ieee754_pow+0x464>
 800bb02:	4bcc      	ldr	r3, [pc, #816]	@ (800be34 <__ieee754_pow+0x784>)
 800bb04:	459b      	cmp	fp, r3
 800bb06:	f340 81a5 	ble.w	800be54 <__ieee754_pow+0x7a4>
 800bb0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb10:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800bb14:	f04f 0a00 	mov.w	sl, #0
 800bb18:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800bb1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb1e:	4bc6      	ldr	r3, [pc, #792]	@ (800be38 <__ieee754_pow+0x788>)
 800bb20:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bb24:	ed93 7b00 	vldr	d7, [r3]
 800bb28:	4629      	mov	r1, r5
 800bb2a:	ec53 2b17 	vmov	r2, r3, d7
 800bb2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bb32:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bb36:	f7f4 fbc7 	bl	80002c8 <__aeabi_dsub>
 800bb3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bb3e:	4606      	mov	r6, r0
 800bb40:	460f      	mov	r7, r1
 800bb42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb46:	f7f4 fbc1 	bl	80002cc <__adddf3>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	2000      	movs	r0, #0
 800bb50:	49ba      	ldr	r1, [pc, #744]	@ (800be3c <__ieee754_pow+0x78c>)
 800bb52:	f7f4 fe9b 	bl	800088c <__aeabi_ddiv>
 800bb56:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	4630      	mov	r0, r6
 800bb60:	4639      	mov	r1, r7
 800bb62:	f7f4 fd69 	bl	8000638 <__aeabi_dmul>
 800bb66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb6a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800bb6e:	106d      	asrs	r5, r5, #1
 800bb70:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800bb74:	f04f 0b00 	mov.w	fp, #0
 800bb78:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800bb7c:	4661      	mov	r1, ip
 800bb7e:	2200      	movs	r2, #0
 800bb80:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800bb84:	4658      	mov	r0, fp
 800bb86:	46e1      	mov	r9, ip
 800bb88:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800bb8c:	4614      	mov	r4, r2
 800bb8e:	461d      	mov	r5, r3
 800bb90:	f7f4 fd52 	bl	8000638 <__aeabi_dmul>
 800bb94:	4602      	mov	r2, r0
 800bb96:	460b      	mov	r3, r1
 800bb98:	4630      	mov	r0, r6
 800bb9a:	4639      	mov	r1, r7
 800bb9c:	f7f4 fb94 	bl	80002c8 <__aeabi_dsub>
 800bba0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bba4:	4606      	mov	r6, r0
 800bba6:	460f      	mov	r7, r1
 800bba8:	4620      	mov	r0, r4
 800bbaa:	4629      	mov	r1, r5
 800bbac:	f7f4 fb8c 	bl	80002c8 <__aeabi_dsub>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bbb8:	f7f4 fb86 	bl	80002c8 <__aeabi_dsub>
 800bbbc:	465a      	mov	r2, fp
 800bbbe:	464b      	mov	r3, r9
 800bbc0:	f7f4 fd3a 	bl	8000638 <__aeabi_dmul>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	4630      	mov	r0, r6
 800bbca:	4639      	mov	r1, r7
 800bbcc:	f7f4 fb7c 	bl	80002c8 <__aeabi_dsub>
 800bbd0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bbd4:	f7f4 fd30 	bl	8000638 <__aeabi_dmul>
 800bbd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbdc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bbe0:	4610      	mov	r0, r2
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	f7f4 fd28 	bl	8000638 <__aeabi_dmul>
 800bbe8:	a37d      	add	r3, pc, #500	@ (adr r3, 800bde0 <__ieee754_pow+0x730>)
 800bbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbee:	4604      	mov	r4, r0
 800bbf0:	460d      	mov	r5, r1
 800bbf2:	f7f4 fd21 	bl	8000638 <__aeabi_dmul>
 800bbf6:	a37c      	add	r3, pc, #496	@ (adr r3, 800bde8 <__ieee754_pow+0x738>)
 800bbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfc:	f7f4 fb66 	bl	80002cc <__adddf3>
 800bc00:	4622      	mov	r2, r4
 800bc02:	462b      	mov	r3, r5
 800bc04:	f7f4 fd18 	bl	8000638 <__aeabi_dmul>
 800bc08:	a379      	add	r3, pc, #484	@ (adr r3, 800bdf0 <__ieee754_pow+0x740>)
 800bc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0e:	f7f4 fb5d 	bl	80002cc <__adddf3>
 800bc12:	4622      	mov	r2, r4
 800bc14:	462b      	mov	r3, r5
 800bc16:	f7f4 fd0f 	bl	8000638 <__aeabi_dmul>
 800bc1a:	a377      	add	r3, pc, #476	@ (adr r3, 800bdf8 <__ieee754_pow+0x748>)
 800bc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc20:	f7f4 fb54 	bl	80002cc <__adddf3>
 800bc24:	4622      	mov	r2, r4
 800bc26:	462b      	mov	r3, r5
 800bc28:	f7f4 fd06 	bl	8000638 <__aeabi_dmul>
 800bc2c:	a374      	add	r3, pc, #464	@ (adr r3, 800be00 <__ieee754_pow+0x750>)
 800bc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc32:	f7f4 fb4b 	bl	80002cc <__adddf3>
 800bc36:	4622      	mov	r2, r4
 800bc38:	462b      	mov	r3, r5
 800bc3a:	f7f4 fcfd 	bl	8000638 <__aeabi_dmul>
 800bc3e:	a372      	add	r3, pc, #456	@ (adr r3, 800be08 <__ieee754_pow+0x758>)
 800bc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc44:	f7f4 fb42 	bl	80002cc <__adddf3>
 800bc48:	4622      	mov	r2, r4
 800bc4a:	4606      	mov	r6, r0
 800bc4c:	460f      	mov	r7, r1
 800bc4e:	462b      	mov	r3, r5
 800bc50:	4620      	mov	r0, r4
 800bc52:	4629      	mov	r1, r5
 800bc54:	f7f4 fcf0 	bl	8000638 <__aeabi_dmul>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	4639      	mov	r1, r7
 800bc60:	f7f4 fcea 	bl	8000638 <__aeabi_dmul>
 800bc64:	465a      	mov	r2, fp
 800bc66:	4604      	mov	r4, r0
 800bc68:	460d      	mov	r5, r1
 800bc6a:	464b      	mov	r3, r9
 800bc6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc70:	f7f4 fb2c 	bl	80002cc <__adddf3>
 800bc74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc78:	f7f4 fcde 	bl	8000638 <__aeabi_dmul>
 800bc7c:	4622      	mov	r2, r4
 800bc7e:	462b      	mov	r3, r5
 800bc80:	f7f4 fb24 	bl	80002cc <__adddf3>
 800bc84:	465a      	mov	r2, fp
 800bc86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bc8a:	464b      	mov	r3, r9
 800bc8c:	4658      	mov	r0, fp
 800bc8e:	4649      	mov	r1, r9
 800bc90:	f7f4 fcd2 	bl	8000638 <__aeabi_dmul>
 800bc94:	4b6a      	ldr	r3, [pc, #424]	@ (800be40 <__ieee754_pow+0x790>)
 800bc96:	2200      	movs	r2, #0
 800bc98:	4606      	mov	r6, r0
 800bc9a:	460f      	mov	r7, r1
 800bc9c:	f7f4 fb16 	bl	80002cc <__adddf3>
 800bca0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bca4:	f7f4 fb12 	bl	80002cc <__adddf3>
 800bca8:	46d8      	mov	r8, fp
 800bcaa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800bcae:	460d      	mov	r5, r1
 800bcb0:	465a      	mov	r2, fp
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	4640      	mov	r0, r8
 800bcb6:	4649      	mov	r1, r9
 800bcb8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800bcbc:	f7f4 fcbc 	bl	8000638 <__aeabi_dmul>
 800bcc0:	465c      	mov	r4, fp
 800bcc2:	4680      	mov	r8, r0
 800bcc4:	4689      	mov	r9, r1
 800bcc6:	4b5e      	ldr	r3, [pc, #376]	@ (800be40 <__ieee754_pow+0x790>)
 800bcc8:	2200      	movs	r2, #0
 800bcca:	4620      	mov	r0, r4
 800bccc:	4629      	mov	r1, r5
 800bcce:	f7f4 fafb 	bl	80002c8 <__aeabi_dsub>
 800bcd2:	4632      	mov	r2, r6
 800bcd4:	463b      	mov	r3, r7
 800bcd6:	f7f4 faf7 	bl	80002c8 <__aeabi_dsub>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	460b      	mov	r3, r1
 800bcde:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bce2:	f7f4 faf1 	bl	80002c8 <__aeabi_dsub>
 800bce6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcea:	f7f4 fca5 	bl	8000638 <__aeabi_dmul>
 800bcee:	4622      	mov	r2, r4
 800bcf0:	4606      	mov	r6, r0
 800bcf2:	460f      	mov	r7, r1
 800bcf4:	462b      	mov	r3, r5
 800bcf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcfa:	f7f4 fc9d 	bl	8000638 <__aeabi_dmul>
 800bcfe:	4602      	mov	r2, r0
 800bd00:	460b      	mov	r3, r1
 800bd02:	4630      	mov	r0, r6
 800bd04:	4639      	mov	r1, r7
 800bd06:	f7f4 fae1 	bl	80002cc <__adddf3>
 800bd0a:	4606      	mov	r6, r0
 800bd0c:	460f      	mov	r7, r1
 800bd0e:	4602      	mov	r2, r0
 800bd10:	460b      	mov	r3, r1
 800bd12:	4640      	mov	r0, r8
 800bd14:	4649      	mov	r1, r9
 800bd16:	f7f4 fad9 	bl	80002cc <__adddf3>
 800bd1a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800bd1e:	a33c      	add	r3, pc, #240	@ (adr r3, 800be10 <__ieee754_pow+0x760>)
 800bd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd24:	4658      	mov	r0, fp
 800bd26:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800bd2a:	460d      	mov	r5, r1
 800bd2c:	f7f4 fc84 	bl	8000638 <__aeabi_dmul>
 800bd30:	465c      	mov	r4, fp
 800bd32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd36:	4642      	mov	r2, r8
 800bd38:	464b      	mov	r3, r9
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	4629      	mov	r1, r5
 800bd3e:	f7f4 fac3 	bl	80002c8 <__aeabi_dsub>
 800bd42:	4602      	mov	r2, r0
 800bd44:	460b      	mov	r3, r1
 800bd46:	4630      	mov	r0, r6
 800bd48:	4639      	mov	r1, r7
 800bd4a:	f7f4 fabd 	bl	80002c8 <__aeabi_dsub>
 800bd4e:	a332      	add	r3, pc, #200	@ (adr r3, 800be18 <__ieee754_pow+0x768>)
 800bd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd54:	f7f4 fc70 	bl	8000638 <__aeabi_dmul>
 800bd58:	a331      	add	r3, pc, #196	@ (adr r3, 800be20 <__ieee754_pow+0x770>)
 800bd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5e:	4606      	mov	r6, r0
 800bd60:	460f      	mov	r7, r1
 800bd62:	4620      	mov	r0, r4
 800bd64:	4629      	mov	r1, r5
 800bd66:	f7f4 fc67 	bl	8000638 <__aeabi_dmul>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	4630      	mov	r0, r6
 800bd70:	4639      	mov	r1, r7
 800bd72:	f7f4 faab 	bl	80002cc <__adddf3>
 800bd76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bd78:	4b32      	ldr	r3, [pc, #200]	@ (800be44 <__ieee754_pow+0x794>)
 800bd7a:	4413      	add	r3, r2
 800bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd80:	f7f4 faa4 	bl	80002cc <__adddf3>
 800bd84:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bd88:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bd8a:	f7f4 fbeb 	bl	8000564 <__aeabi_i2d>
 800bd8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bd90:	4b2d      	ldr	r3, [pc, #180]	@ (800be48 <__ieee754_pow+0x798>)
 800bd92:	4413      	add	r3, r2
 800bd94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd98:	4606      	mov	r6, r0
 800bd9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd9e:	460f      	mov	r7, r1
 800bda0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bda4:	f7f4 fa92 	bl	80002cc <__adddf3>
 800bda8:	4642      	mov	r2, r8
 800bdaa:	464b      	mov	r3, r9
 800bdac:	f7f4 fa8e 	bl	80002cc <__adddf3>
 800bdb0:	4632      	mov	r2, r6
 800bdb2:	463b      	mov	r3, r7
 800bdb4:	f7f4 fa8a 	bl	80002cc <__adddf3>
 800bdb8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800bdbc:	4632      	mov	r2, r6
 800bdbe:	463b      	mov	r3, r7
 800bdc0:	4658      	mov	r0, fp
 800bdc2:	460d      	mov	r5, r1
 800bdc4:	f7f4 fa80 	bl	80002c8 <__aeabi_dsub>
 800bdc8:	4642      	mov	r2, r8
 800bdca:	464b      	mov	r3, r9
 800bdcc:	f7f4 fa7c 	bl	80002c8 <__aeabi_dsub>
 800bdd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdd4:	f7f4 fa78 	bl	80002c8 <__aeabi_dsub>
 800bdd8:	465c      	mov	r4, fp
 800bdda:	4602      	mov	r2, r0
 800bddc:	e036      	b.n	800be4c <__ieee754_pow+0x79c>
 800bdde:	bf00      	nop
 800bde0:	4a454eef 	.word	0x4a454eef
 800bde4:	3fca7e28 	.word	0x3fca7e28
 800bde8:	93c9db65 	.word	0x93c9db65
 800bdec:	3fcd864a 	.word	0x3fcd864a
 800bdf0:	a91d4101 	.word	0xa91d4101
 800bdf4:	3fd17460 	.word	0x3fd17460
 800bdf8:	518f264d 	.word	0x518f264d
 800bdfc:	3fd55555 	.word	0x3fd55555
 800be00:	db6fabff 	.word	0xdb6fabff
 800be04:	3fdb6db6 	.word	0x3fdb6db6
 800be08:	33333303 	.word	0x33333303
 800be0c:	3fe33333 	.word	0x3fe33333
 800be10:	e0000000 	.word	0xe0000000
 800be14:	3feec709 	.word	0x3feec709
 800be18:	dc3a03fd 	.word	0xdc3a03fd
 800be1c:	3feec709 	.word	0x3feec709
 800be20:	145b01f5 	.word	0x145b01f5
 800be24:	be3e2fe0 	.word	0xbe3e2fe0
 800be28:	7ff00000 	.word	0x7ff00000
 800be2c:	43400000 	.word	0x43400000
 800be30:	0003988e 	.word	0x0003988e
 800be34:	000bb679 	.word	0x000bb679
 800be38:	0800c840 	.word	0x0800c840
 800be3c:	3ff00000 	.word	0x3ff00000
 800be40:	40080000 	.word	0x40080000
 800be44:	0800c820 	.word	0x0800c820
 800be48:	0800c830 	.word	0x0800c830
 800be4c:	460b      	mov	r3, r1
 800be4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be52:	e5d7      	b.n	800ba04 <__ieee754_pow+0x354>
 800be54:	f04f 0a01 	mov.w	sl, #1
 800be58:	e65e      	b.n	800bb18 <__ieee754_pow+0x468>
 800be5a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800c12c <__ieee754_pow+0xa7c>)
 800be5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be60:	4630      	mov	r0, r6
 800be62:	4639      	mov	r1, r7
 800be64:	f7f4 fa32 	bl	80002cc <__adddf3>
 800be68:	4642      	mov	r2, r8
 800be6a:	e9cd 0100 	strd	r0, r1, [sp]
 800be6e:	464b      	mov	r3, r9
 800be70:	4620      	mov	r0, r4
 800be72:	4629      	mov	r1, r5
 800be74:	f7f4 fa28 	bl	80002c8 <__aeabi_dsub>
 800be78:	4602      	mov	r2, r0
 800be7a:	460b      	mov	r3, r1
 800be7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be80:	f7f4 fe6a 	bl	8000b58 <__aeabi_dcmpgt>
 800be84:	2800      	cmp	r0, #0
 800be86:	f47f ae00 	bne.w	800ba8a <__ieee754_pow+0x3da>
 800be8a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800be8e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800be92:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800be96:	fa43 fa0a 	asr.w	sl, r3, sl
 800be9a:	44da      	add	sl, fp
 800be9c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800bea0:	489d      	ldr	r0, [pc, #628]	@ (800c118 <__ieee754_pow+0xa68>)
 800bea2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800bea6:	4108      	asrs	r0, r1
 800bea8:	ea00 030a 	and.w	r3, r0, sl
 800beac:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800beb0:	f1c1 0114 	rsb	r1, r1, #20
 800beb4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800beb8:	fa4a fa01 	asr.w	sl, sl, r1
 800bebc:	f1bb 0f00 	cmp.w	fp, #0
 800bec0:	4640      	mov	r0, r8
 800bec2:	4649      	mov	r1, r9
 800bec4:	f04f 0200 	mov.w	r2, #0
 800bec8:	bfb8      	it	lt
 800beca:	f1ca 0a00 	rsblt	sl, sl, #0
 800bece:	f7f4 f9fb 	bl	80002c8 <__aeabi_dsub>
 800bed2:	4680      	mov	r8, r0
 800bed4:	4689      	mov	r9, r1
 800bed6:	4632      	mov	r2, r6
 800bed8:	463b      	mov	r3, r7
 800beda:	4640      	mov	r0, r8
 800bedc:	4649      	mov	r1, r9
 800bede:	f7f4 f9f5 	bl	80002cc <__adddf3>
 800bee2:	2400      	movs	r4, #0
 800bee4:	a37c      	add	r3, pc, #496	@ (adr r3, 800c0d8 <__ieee754_pow+0xa28>)
 800bee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beea:	4620      	mov	r0, r4
 800beec:	460d      	mov	r5, r1
 800beee:	f7f4 fba3 	bl	8000638 <__aeabi_dmul>
 800bef2:	4642      	mov	r2, r8
 800bef4:	e9cd 0100 	strd	r0, r1, [sp]
 800bef8:	464b      	mov	r3, r9
 800befa:	4620      	mov	r0, r4
 800befc:	4629      	mov	r1, r5
 800befe:	f7f4 f9e3 	bl	80002c8 <__aeabi_dsub>
 800bf02:	4602      	mov	r2, r0
 800bf04:	460b      	mov	r3, r1
 800bf06:	4630      	mov	r0, r6
 800bf08:	4639      	mov	r1, r7
 800bf0a:	f7f4 f9dd 	bl	80002c8 <__aeabi_dsub>
 800bf0e:	a374      	add	r3, pc, #464	@ (adr r3, 800c0e0 <__ieee754_pow+0xa30>)
 800bf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf14:	f7f4 fb90 	bl	8000638 <__aeabi_dmul>
 800bf18:	a373      	add	r3, pc, #460	@ (adr r3, 800c0e8 <__ieee754_pow+0xa38>)
 800bf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1e:	4680      	mov	r8, r0
 800bf20:	4689      	mov	r9, r1
 800bf22:	4620      	mov	r0, r4
 800bf24:	4629      	mov	r1, r5
 800bf26:	f7f4 fb87 	bl	8000638 <__aeabi_dmul>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	4640      	mov	r0, r8
 800bf30:	4649      	mov	r1, r9
 800bf32:	f7f4 f9cb 	bl	80002cc <__adddf3>
 800bf36:	4604      	mov	r4, r0
 800bf38:	460d      	mov	r5, r1
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf42:	f7f4 f9c3 	bl	80002cc <__adddf3>
 800bf46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf4a:	4680      	mov	r8, r0
 800bf4c:	4689      	mov	r9, r1
 800bf4e:	f7f4 f9bb 	bl	80002c8 <__aeabi_dsub>
 800bf52:	4602      	mov	r2, r0
 800bf54:	460b      	mov	r3, r1
 800bf56:	4620      	mov	r0, r4
 800bf58:	4629      	mov	r1, r5
 800bf5a:	f7f4 f9b5 	bl	80002c8 <__aeabi_dsub>
 800bf5e:	4642      	mov	r2, r8
 800bf60:	4606      	mov	r6, r0
 800bf62:	460f      	mov	r7, r1
 800bf64:	464b      	mov	r3, r9
 800bf66:	4640      	mov	r0, r8
 800bf68:	4649      	mov	r1, r9
 800bf6a:	f7f4 fb65 	bl	8000638 <__aeabi_dmul>
 800bf6e:	a360      	add	r3, pc, #384	@ (adr r3, 800c0f0 <__ieee754_pow+0xa40>)
 800bf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf74:	4604      	mov	r4, r0
 800bf76:	460d      	mov	r5, r1
 800bf78:	f7f4 fb5e 	bl	8000638 <__aeabi_dmul>
 800bf7c:	a35e      	add	r3, pc, #376	@ (adr r3, 800c0f8 <__ieee754_pow+0xa48>)
 800bf7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf82:	f7f4 f9a1 	bl	80002c8 <__aeabi_dsub>
 800bf86:	4622      	mov	r2, r4
 800bf88:	462b      	mov	r3, r5
 800bf8a:	f7f4 fb55 	bl	8000638 <__aeabi_dmul>
 800bf8e:	a35c      	add	r3, pc, #368	@ (adr r3, 800c100 <__ieee754_pow+0xa50>)
 800bf90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf94:	f7f4 f99a 	bl	80002cc <__adddf3>
 800bf98:	4622      	mov	r2, r4
 800bf9a:	462b      	mov	r3, r5
 800bf9c:	f7f4 fb4c 	bl	8000638 <__aeabi_dmul>
 800bfa0:	a359      	add	r3, pc, #356	@ (adr r3, 800c108 <__ieee754_pow+0xa58>)
 800bfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa6:	f7f4 f98f 	bl	80002c8 <__aeabi_dsub>
 800bfaa:	4622      	mov	r2, r4
 800bfac:	462b      	mov	r3, r5
 800bfae:	f7f4 fb43 	bl	8000638 <__aeabi_dmul>
 800bfb2:	a357      	add	r3, pc, #348	@ (adr r3, 800c110 <__ieee754_pow+0xa60>)
 800bfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb8:	f7f4 f988 	bl	80002cc <__adddf3>
 800bfbc:	4622      	mov	r2, r4
 800bfbe:	462b      	mov	r3, r5
 800bfc0:	f7f4 fb3a 	bl	8000638 <__aeabi_dmul>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	4640      	mov	r0, r8
 800bfca:	4649      	mov	r1, r9
 800bfcc:	f7f4 f97c 	bl	80002c8 <__aeabi_dsub>
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	460d      	mov	r5, r1
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	460b      	mov	r3, r1
 800bfd8:	4640      	mov	r0, r8
 800bfda:	4649      	mov	r1, r9
 800bfdc:	f7f4 fb2c 	bl	8000638 <__aeabi_dmul>
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	e9cd 0100 	strd	r0, r1, [sp]
 800bfe6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bfea:	4620      	mov	r0, r4
 800bfec:	4629      	mov	r1, r5
 800bfee:	f7f4 f96b 	bl	80002c8 <__aeabi_dsub>
 800bff2:	4602      	mov	r2, r0
 800bff4:	460b      	mov	r3, r1
 800bff6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bffa:	f7f4 fc47 	bl	800088c <__aeabi_ddiv>
 800bffe:	4632      	mov	r2, r6
 800c000:	4604      	mov	r4, r0
 800c002:	460d      	mov	r5, r1
 800c004:	463b      	mov	r3, r7
 800c006:	4640      	mov	r0, r8
 800c008:	4649      	mov	r1, r9
 800c00a:	f7f4 fb15 	bl	8000638 <__aeabi_dmul>
 800c00e:	4632      	mov	r2, r6
 800c010:	463b      	mov	r3, r7
 800c012:	f7f4 f95b 	bl	80002cc <__adddf3>
 800c016:	4602      	mov	r2, r0
 800c018:	460b      	mov	r3, r1
 800c01a:	4620      	mov	r0, r4
 800c01c:	4629      	mov	r1, r5
 800c01e:	f7f4 f953 	bl	80002c8 <__aeabi_dsub>
 800c022:	4642      	mov	r2, r8
 800c024:	464b      	mov	r3, r9
 800c026:	f7f4 f94f 	bl	80002c8 <__aeabi_dsub>
 800c02a:	460b      	mov	r3, r1
 800c02c:	4602      	mov	r2, r0
 800c02e:	493b      	ldr	r1, [pc, #236]	@ (800c11c <__ieee754_pow+0xa6c>)
 800c030:	2000      	movs	r0, #0
 800c032:	f7f4 f949 	bl	80002c8 <__aeabi_dsub>
 800c036:	ec41 0b10 	vmov	d0, r0, r1
 800c03a:	ee10 3a90 	vmov	r3, s1
 800c03e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c042:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c046:	da30      	bge.n	800c0aa <__ieee754_pow+0x9fa>
 800c048:	4650      	mov	r0, sl
 800c04a:	f000 f875 	bl	800c138 <scalbn>
 800c04e:	ec51 0b10 	vmov	r0, r1, d0
 800c052:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c056:	f7ff bbd2 	b.w	800b7fe <__ieee754_pow+0x14e>
 800c05a:	4c31      	ldr	r4, [pc, #196]	@ (800c120 <__ieee754_pow+0xa70>)
 800c05c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c060:	42a3      	cmp	r3, r4
 800c062:	d91a      	bls.n	800c09a <__ieee754_pow+0x9ea>
 800c064:	4b2f      	ldr	r3, [pc, #188]	@ (800c124 <__ieee754_pow+0xa74>)
 800c066:	440b      	add	r3, r1
 800c068:	4303      	orrs	r3, r0
 800c06a:	d009      	beq.n	800c080 <__ieee754_pow+0x9d0>
 800c06c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c070:	2200      	movs	r2, #0
 800c072:	2300      	movs	r3, #0
 800c074:	f7f4 fd52 	bl	8000b1c <__aeabi_dcmplt>
 800c078:	3800      	subs	r0, #0
 800c07a:	bf18      	it	ne
 800c07c:	2001      	movne	r0, #1
 800c07e:	e42b      	b.n	800b8d8 <__ieee754_pow+0x228>
 800c080:	4642      	mov	r2, r8
 800c082:	464b      	mov	r3, r9
 800c084:	f7f4 f920 	bl	80002c8 <__aeabi_dsub>
 800c088:	4632      	mov	r2, r6
 800c08a:	463b      	mov	r3, r7
 800c08c:	f7f4 fd5a 	bl	8000b44 <__aeabi_dcmpge>
 800c090:	2800      	cmp	r0, #0
 800c092:	d1eb      	bne.n	800c06c <__ieee754_pow+0x9bc>
 800c094:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800c134 <__ieee754_pow+0xa84>
 800c098:	e6f7      	b.n	800be8a <__ieee754_pow+0x7da>
 800c09a:	469a      	mov	sl, r3
 800c09c:	4b22      	ldr	r3, [pc, #136]	@ (800c128 <__ieee754_pow+0xa78>)
 800c09e:	459a      	cmp	sl, r3
 800c0a0:	f63f aef3 	bhi.w	800be8a <__ieee754_pow+0x7da>
 800c0a4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c0a8:	e715      	b.n	800bed6 <__ieee754_pow+0x826>
 800c0aa:	ec51 0b10 	vmov	r0, r1, d0
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	e7cf      	b.n	800c052 <__ieee754_pow+0x9a2>
 800c0b2:	491a      	ldr	r1, [pc, #104]	@ (800c11c <__ieee754_pow+0xa6c>)
 800c0b4:	2000      	movs	r0, #0
 800c0b6:	f7ff bb18 	b.w	800b6ea <__ieee754_pow+0x3a>
 800c0ba:	2000      	movs	r0, #0
 800c0bc:	2100      	movs	r1, #0
 800c0be:	f7ff bb14 	b.w	800b6ea <__ieee754_pow+0x3a>
 800c0c2:	4630      	mov	r0, r6
 800c0c4:	4639      	mov	r1, r7
 800c0c6:	f7ff bb10 	b.w	800b6ea <__ieee754_pow+0x3a>
 800c0ca:	460c      	mov	r4, r1
 800c0cc:	f7ff bb5e 	b.w	800b78c <__ieee754_pow+0xdc>
 800c0d0:	2400      	movs	r4, #0
 800c0d2:	f7ff bb49 	b.w	800b768 <__ieee754_pow+0xb8>
 800c0d6:	bf00      	nop
 800c0d8:	00000000 	.word	0x00000000
 800c0dc:	3fe62e43 	.word	0x3fe62e43
 800c0e0:	fefa39ef 	.word	0xfefa39ef
 800c0e4:	3fe62e42 	.word	0x3fe62e42
 800c0e8:	0ca86c39 	.word	0x0ca86c39
 800c0ec:	be205c61 	.word	0xbe205c61
 800c0f0:	72bea4d0 	.word	0x72bea4d0
 800c0f4:	3e663769 	.word	0x3e663769
 800c0f8:	c5d26bf1 	.word	0xc5d26bf1
 800c0fc:	3ebbbd41 	.word	0x3ebbbd41
 800c100:	af25de2c 	.word	0xaf25de2c
 800c104:	3f11566a 	.word	0x3f11566a
 800c108:	16bebd93 	.word	0x16bebd93
 800c10c:	3f66c16c 	.word	0x3f66c16c
 800c110:	5555553e 	.word	0x5555553e
 800c114:	3fc55555 	.word	0x3fc55555
 800c118:	fff00000 	.word	0xfff00000
 800c11c:	3ff00000 	.word	0x3ff00000
 800c120:	4090cbff 	.word	0x4090cbff
 800c124:	3f6f3400 	.word	0x3f6f3400
 800c128:	3fe00000 	.word	0x3fe00000
 800c12c:	652b82fe 	.word	0x652b82fe
 800c130:	3c971547 	.word	0x3c971547
 800c134:	4090cc00 	.word	0x4090cc00

0800c138 <scalbn>:
 800c138:	b570      	push	{r4, r5, r6, lr}
 800c13a:	ec55 4b10 	vmov	r4, r5, d0
 800c13e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c142:	4606      	mov	r6, r0
 800c144:	462b      	mov	r3, r5
 800c146:	b991      	cbnz	r1, 800c16e <scalbn+0x36>
 800c148:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c14c:	4323      	orrs	r3, r4
 800c14e:	d03d      	beq.n	800c1cc <scalbn+0x94>
 800c150:	4b35      	ldr	r3, [pc, #212]	@ (800c228 <scalbn+0xf0>)
 800c152:	4620      	mov	r0, r4
 800c154:	4629      	mov	r1, r5
 800c156:	2200      	movs	r2, #0
 800c158:	f7f4 fa6e 	bl	8000638 <__aeabi_dmul>
 800c15c:	4b33      	ldr	r3, [pc, #204]	@ (800c22c <scalbn+0xf4>)
 800c15e:	429e      	cmp	r6, r3
 800c160:	4604      	mov	r4, r0
 800c162:	460d      	mov	r5, r1
 800c164:	da0f      	bge.n	800c186 <scalbn+0x4e>
 800c166:	a328      	add	r3, pc, #160	@ (adr r3, 800c208 <scalbn+0xd0>)
 800c168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16c:	e01e      	b.n	800c1ac <scalbn+0x74>
 800c16e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c172:	4291      	cmp	r1, r2
 800c174:	d10b      	bne.n	800c18e <scalbn+0x56>
 800c176:	4622      	mov	r2, r4
 800c178:	4620      	mov	r0, r4
 800c17a:	4629      	mov	r1, r5
 800c17c:	f7f4 f8a6 	bl	80002cc <__adddf3>
 800c180:	4604      	mov	r4, r0
 800c182:	460d      	mov	r5, r1
 800c184:	e022      	b.n	800c1cc <scalbn+0x94>
 800c186:	460b      	mov	r3, r1
 800c188:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c18c:	3936      	subs	r1, #54	@ 0x36
 800c18e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c192:	4296      	cmp	r6, r2
 800c194:	dd0d      	ble.n	800c1b2 <scalbn+0x7a>
 800c196:	2d00      	cmp	r5, #0
 800c198:	a11d      	add	r1, pc, #116	@ (adr r1, 800c210 <scalbn+0xd8>)
 800c19a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c19e:	da02      	bge.n	800c1a6 <scalbn+0x6e>
 800c1a0:	a11d      	add	r1, pc, #116	@ (adr r1, 800c218 <scalbn+0xe0>)
 800c1a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1a6:	a31a      	add	r3, pc, #104	@ (adr r3, 800c210 <scalbn+0xd8>)
 800c1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ac:	f7f4 fa44 	bl	8000638 <__aeabi_dmul>
 800c1b0:	e7e6      	b.n	800c180 <scalbn+0x48>
 800c1b2:	1872      	adds	r2, r6, r1
 800c1b4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c1b8:	428a      	cmp	r2, r1
 800c1ba:	dcec      	bgt.n	800c196 <scalbn+0x5e>
 800c1bc:	2a00      	cmp	r2, #0
 800c1be:	dd08      	ble.n	800c1d2 <scalbn+0x9a>
 800c1c0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c1c4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c1c8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c1cc:	ec45 4b10 	vmov	d0, r4, r5
 800c1d0:	bd70      	pop	{r4, r5, r6, pc}
 800c1d2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c1d6:	da08      	bge.n	800c1ea <scalbn+0xb2>
 800c1d8:	2d00      	cmp	r5, #0
 800c1da:	a10b      	add	r1, pc, #44	@ (adr r1, 800c208 <scalbn+0xd0>)
 800c1dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1e0:	dac1      	bge.n	800c166 <scalbn+0x2e>
 800c1e2:	a10f      	add	r1, pc, #60	@ (adr r1, 800c220 <scalbn+0xe8>)
 800c1e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1e8:	e7bd      	b.n	800c166 <scalbn+0x2e>
 800c1ea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c1ee:	3236      	adds	r2, #54	@ 0x36
 800c1f0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c1f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	4b0d      	ldr	r3, [pc, #52]	@ (800c230 <scalbn+0xf8>)
 800c1fc:	4629      	mov	r1, r5
 800c1fe:	2200      	movs	r2, #0
 800c200:	e7d4      	b.n	800c1ac <scalbn+0x74>
 800c202:	bf00      	nop
 800c204:	f3af 8000 	nop.w
 800c208:	c2f8f359 	.word	0xc2f8f359
 800c20c:	01a56e1f 	.word	0x01a56e1f
 800c210:	8800759c 	.word	0x8800759c
 800c214:	7e37e43c 	.word	0x7e37e43c
 800c218:	8800759c 	.word	0x8800759c
 800c21c:	fe37e43c 	.word	0xfe37e43c
 800c220:	c2f8f359 	.word	0xc2f8f359
 800c224:	81a56e1f 	.word	0x81a56e1f
 800c228:	43500000 	.word	0x43500000
 800c22c:	ffff3cb0 	.word	0xffff3cb0
 800c230:	3c900000 	.word	0x3c900000

0800c234 <with_errno>:
 800c234:	b510      	push	{r4, lr}
 800c236:	ed2d 8b02 	vpush	{d8}
 800c23a:	eeb0 8a40 	vmov.f32	s16, s0
 800c23e:	eef0 8a60 	vmov.f32	s17, s1
 800c242:	4604      	mov	r4, r0
 800c244:	f7fc ff2a 	bl	800909c <__errno>
 800c248:	eeb0 0a48 	vmov.f32	s0, s16
 800c24c:	eef0 0a68 	vmov.f32	s1, s17
 800c250:	ecbd 8b02 	vpop	{d8}
 800c254:	6004      	str	r4, [r0, #0]
 800c256:	bd10      	pop	{r4, pc}

0800c258 <xflow>:
 800c258:	4603      	mov	r3, r0
 800c25a:	b507      	push	{r0, r1, r2, lr}
 800c25c:	ec51 0b10 	vmov	r0, r1, d0
 800c260:	b183      	cbz	r3, 800c284 <xflow+0x2c>
 800c262:	4602      	mov	r2, r0
 800c264:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c268:	e9cd 2300 	strd	r2, r3, [sp]
 800c26c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c270:	f7f4 f9e2 	bl	8000638 <__aeabi_dmul>
 800c274:	ec41 0b10 	vmov	d0, r0, r1
 800c278:	2022      	movs	r0, #34	@ 0x22
 800c27a:	b003      	add	sp, #12
 800c27c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c280:	f7ff bfd8 	b.w	800c234 <with_errno>
 800c284:	4602      	mov	r2, r0
 800c286:	460b      	mov	r3, r1
 800c288:	e7ee      	b.n	800c268 <xflow+0x10>
 800c28a:	0000      	movs	r0, r0
 800c28c:	0000      	movs	r0, r0
	...

0800c290 <__math_uflow>:
 800c290:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c298 <__math_uflow+0x8>
 800c294:	f7ff bfe0 	b.w	800c258 <xflow>
 800c298:	00000000 	.word	0x00000000
 800c29c:	10000000 	.word	0x10000000

0800c2a0 <__math_oflow>:
 800c2a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c2a8 <__math_oflow+0x8>
 800c2a4:	f7ff bfd8 	b.w	800c258 <xflow>
 800c2a8:	00000000 	.word	0x00000000
 800c2ac:	70000000 	.word	0x70000000

0800c2b0 <_sbrk>:
 800c2b0:	4a04      	ldr	r2, [pc, #16]	@ (800c2c4 <_sbrk+0x14>)
 800c2b2:	6811      	ldr	r1, [r2, #0]
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	b909      	cbnz	r1, 800c2bc <_sbrk+0xc>
 800c2b8:	4903      	ldr	r1, [pc, #12]	@ (800c2c8 <_sbrk+0x18>)
 800c2ba:	6011      	str	r1, [r2, #0]
 800c2bc:	6810      	ldr	r0, [r2, #0]
 800c2be:	4403      	add	r3, r0
 800c2c0:	6013      	str	r3, [r2, #0]
 800c2c2:	4770      	bx	lr
 800c2c4:	20013324 	.word	0x20013324
 800c2c8:	20013328 	.word	0x20013328

0800c2cc <_init>:
 800c2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ce:	bf00      	nop
 800c2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2d2:	bc08      	pop	{r3}
 800c2d4:	469e      	mov	lr, r3
 800c2d6:	4770      	bx	lr

0800c2d8 <_fini>:
 800c2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2da:	bf00      	nop
 800c2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2de:	bc08      	pop	{r3}
 800c2e0:	469e      	mov	lr, r3
 800c2e2:	4770      	bx	lr
