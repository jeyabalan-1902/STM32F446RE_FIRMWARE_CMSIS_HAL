
17_TIMER_INT_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dd4  080081c4  080081c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08008f98  08008f98  00001f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fb0  08008fb0  0000205c  2**0
                  CONTENTS
  4 .ARM          00000000  08008fb0  08008fb0  0000205c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008fb0  08008fb0  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fb0  08008fb0  00001fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008fb4  08008fb4  00001fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008fb8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08009014  0000205c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08009014  000021c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001889  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000068a  00000000  00000000  00003915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000198  00000000  00000000  00003fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000115  00000000  00000000  00004138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8eb  00000000  00000000  0000424d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000022e8  00000000  00000000  0001eb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000913ba  00000000  00000000  00020e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b21da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b38  00000000  00000000  000b2220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  000b2d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081c4 <__do_global_dtors_aux>:
 80081c4:	b510      	push	{r4, lr}
 80081c6:	4c05      	ldr	r4, [pc, #20]	@ (80081dc <__do_global_dtors_aux+0x18>)
 80081c8:	7823      	ldrb	r3, [r4, #0]
 80081ca:	b933      	cbnz	r3, 80081da <__do_global_dtors_aux+0x16>
 80081cc:	4b04      	ldr	r3, [pc, #16]	@ (80081e0 <__do_global_dtors_aux+0x1c>)
 80081ce:	b113      	cbz	r3, 80081d6 <__do_global_dtors_aux+0x12>
 80081d0:	4804      	ldr	r0, [pc, #16]	@ (80081e4 <__do_global_dtors_aux+0x20>)
 80081d2:	f3af 8000 	nop.w
 80081d6:	2301      	movs	r3, #1
 80081d8:	7023      	strb	r3, [r4, #0]
 80081da:	bd10      	pop	{r4, pc}
 80081dc:	2000005c 	.word	0x2000005c
 80081e0:	00000000 	.word	0x00000000
 80081e4:	08008f80 	.word	0x08008f80

080081e8 <frame_dummy>:
 80081e8:	b508      	push	{r3, lr}
 80081ea:	4b03      	ldr	r3, [pc, #12]	@ (80081f8 <frame_dummy+0x10>)
 80081ec:	b11b      	cbz	r3, 80081f6 <frame_dummy+0xe>
 80081ee:	4903      	ldr	r1, [pc, #12]	@ (80081fc <frame_dummy+0x14>)
 80081f0:	4803      	ldr	r0, [pc, #12]	@ (8008200 <frame_dummy+0x18>)
 80081f2:	f3af 8000 	nop.w
 80081f6:	bd08      	pop	{r3, pc}
 80081f8:	00000000 	.word	0x00000000
 80081fc:	20000060 	.word	0x20000060
 8008200:	08008f80 	.word	0x08008f80

08008204 <__io_putchar>:
#define LED     PIN5

char data;

int __io_putchar(int ch)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
	UART2_Transmit(ch);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f933 	bl	8008478 <UART2_Transmit>
	return ch;
 8008212:	687b      	ldr	r3, [r7, #4]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <main>:

int main(void)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAEN;
 8008220:	4b0b      	ldr	r3, [pc, #44]	@ (8008250 <main+0x34>)
 8008222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008224:	4a0a      	ldr	r2, [pc, #40]	@ (8008250 <main+0x34>)
 8008226:	f043 0301 	orr.w	r3, r3, #1
 800822a:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |= (1U << 10);
 800822c:	4b09      	ldr	r3, [pc, #36]	@ (8008254 <main+0x38>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a08      	ldr	r2, [pc, #32]	@ (8008254 <main+0x38>)
 8008232:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008236:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U << 11);
 8008238:	4b06      	ldr	r3, [pc, #24]	@ (8008254 <main+0x38>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a05      	ldr	r2, [pc, #20]	@ (8008254 <main+0x38>)
 800823e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008242:	6013      	str	r3, [r2, #0]
	UART2_Init();
 8008244:	f000 f930 	bl	80084a8 <UART2_Init>
	tim2_1Hz_interrupt_init();
 8008248:	f000 f8e8 	bl	800841c <tim2_1Hz_interrupt_init>

	while(1)
 800824c:	bf00      	nop
 800824e:	e7fd      	b.n	800824c <main+0x30>
 8008250:	40023800 	.word	0x40023800
 8008254:	40020000 	.word	0x40020000

08008258 <tim2_callback>:

	}
}

static void tim2_callback(void)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= LED;
 800825c:	4b05      	ldr	r3, [pc, #20]	@ (8008274 <tim2_callback+0x1c>)
 800825e:	695b      	ldr	r3, [r3, #20]
 8008260:	4a04      	ldr	r2, [pc, #16]	@ (8008274 <tim2_callback+0x1c>)
 8008262:	f083 0320 	eor.w	r3, r3, #32
 8008266:	6153      	str	r3, [r2, #20]
	printf("TIM2 interrupt 1 sec\r\n");
 8008268:	4803      	ldr	r0, [pc, #12]	@ (8008278 <tim2_callback+0x20>)
 800826a:	f000 faf5 	bl	8008858 <puts>
}
 800826e:	bf00      	nop
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	40020000 	.word	0x40020000
 8008278:	08008f98 	.word	0x08008f98

0800827c <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	af00      	add	r7, sp, #0
	/*clear the interuupt flag*/
	TIM2->SR &= ~(SR_UIF);
 8008280:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800828a:	f023 0301 	bic.w	r3, r3, #1
 800828e:	6113      	str	r3, [r2, #16]
	tim2_callback();
 8008290:	f7ff ffe2 	bl	8008258 <tim2_callback>
}
 8008294:	bf00      	nop
 8008296:	bd80      	pop	{r7, pc}

08008298 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80082a4:	2300      	movs	r3, #0
 80082a6:	617b      	str	r3, [r7, #20]
 80082a8:	e00a      	b.n	80082c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80082aa:	f3af 8000 	nop.w
 80082ae:	4601      	mov	r1, r0
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	1c5a      	adds	r2, r3, #1
 80082b4:	60ba      	str	r2, [r7, #8]
 80082b6:	b2ca      	uxtb	r2, r1
 80082b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	3301      	adds	r3, #1
 80082be:	617b      	str	r3, [r7, #20]
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	dbf0      	blt.n	80082aa <_read+0x12>
  }

  return len;
 80082c8:	687b      	ldr	r3, [r7, #4]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3718      	adds	r7, #24
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b086      	sub	sp, #24
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80082de:	2300      	movs	r3, #0
 80082e0:	617b      	str	r3, [r7, #20]
 80082e2:	e009      	b.n	80082f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	1c5a      	adds	r2, r3, #1
 80082e8:	60ba      	str	r2, [r7, #8]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7ff ff89 	bl	8008204 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	3301      	adds	r3, #1
 80082f6:	617b      	str	r3, [r7, #20]
 80082f8:	697a      	ldr	r2, [r7, #20]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	dbf1      	blt.n	80082e4 <_write+0x12>
  }
  return len;
 8008300:	687b      	ldr	r3, [r7, #4]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3718      	adds	r7, #24
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <_close>:

int _close(int file)
{
 800830a:	b480      	push	{r7}
 800830c:	b083      	sub	sp, #12
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008312:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008316:	4618      	mov	r0, r3
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr

08008322 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008322:	b480      	push	{r7}
 8008324:	b083      	sub	sp, #12
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008332:	605a      	str	r2, [r3, #4]
  return 0;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <_isatty>:

int _isatty(int file)
{
 8008342:	b480      	push	{r7}
 8008344:	b083      	sub	sp, #12
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800834a:	2301      	movs	r3, #1
}
 800834c:	4618      	mov	r0, r3
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
	...

08008374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800837c:	4a14      	ldr	r2, [pc, #80]	@ (80083d0 <_sbrk+0x5c>)
 800837e:	4b15      	ldr	r3, [pc, #84]	@ (80083d4 <_sbrk+0x60>)
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008388:	4b13      	ldr	r3, [pc, #76]	@ (80083d8 <_sbrk+0x64>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d102      	bne.n	8008396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008390:	4b11      	ldr	r3, [pc, #68]	@ (80083d8 <_sbrk+0x64>)
 8008392:	4a12      	ldr	r2, [pc, #72]	@ (80083dc <_sbrk+0x68>)
 8008394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008396:	4b10      	ldr	r3, [pc, #64]	@ (80083d8 <_sbrk+0x64>)
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4413      	add	r3, r2
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d207      	bcs.n	80083b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80083a4:	f000 fb86 	bl	8008ab4 <__errno>
 80083a8:	4603      	mov	r3, r0
 80083aa:	220c      	movs	r2, #12
 80083ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80083ae:	f04f 33ff 	mov.w	r3, #4294967295
 80083b2:	e009      	b.n	80083c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80083b4:	4b08      	ldr	r3, [pc, #32]	@ (80083d8 <_sbrk+0x64>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80083ba:	4b07      	ldr	r3, [pc, #28]	@ (80083d8 <_sbrk+0x64>)
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4413      	add	r3, r2
 80083c2:	4a05      	ldr	r2, [pc, #20]	@ (80083d8 <_sbrk+0x64>)
 80083c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80083c6:	68fb      	ldr	r3, [r7, #12]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3718      	adds	r7, #24
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	20020000 	.word	0x20020000
 80083d4:	00000400 	.word	0x00000400
 80083d8:	20000078 	.word	0x20000078
 80083dc:	200001c8 	.word	0x200001c8

080083e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	4603      	mov	r3, r0
 80083e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	db0b      	blt.n	800840a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083f2:	79fb      	ldrb	r3, [r7, #7]
 80083f4:	f003 021f 	and.w	r2, r3, #31
 80083f8:	4907      	ldr	r1, [pc, #28]	@ (8008418 <__NVIC_EnableIRQ+0x38>)
 80083fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083fe:	095b      	lsrs	r3, r3, #5
 8008400:	2001      	movs	r0, #1
 8008402:	fa00 f202 	lsl.w	r2, r0, r2
 8008406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800840a:	bf00      	nop
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	e000e100 	.word	0xe000e100

0800841c <tim2_1Hz_interrupt_init>:
	/*enable timer*/
	TIM2->CR1 |= CR1_CEN;
}

void tim2_1Hz_interrupt_init(void)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	af00      	add	r7, sp, #0
	/* enabling apb1 clock access for timer 2*/
	RCC->APB1ENR |= TIM2EN;
 8008420:	4b14      	ldr	r3, [pc, #80]	@ (8008474 <tim2_1Hz_interrupt_init+0x58>)
 8008422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008424:	4a13      	ldr	r2, [pc, #76]	@ (8008474 <tim2_1Hz_interrupt_init+0x58>)
 8008426:	f043 0301 	orr.w	r3, r3, #1
 800842a:	6413      	str	r3, [r2, #64]	@ 0x40
	/* set prescaler value*/
	TIM2->PSC = 16000 - 1;    //16000000 / 16000 = 1000
 800842c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008430:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8008434:	629a      	str	r2, [r3, #40]	@ 0x28
	/*set auto reload value*/
	TIM2->ARR = 1000 - 1;    // 1000 / 1000 = 1
 8008436:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800843a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800843e:	62da      	str	r2, [r3, #44]	@ 0x2c
	/*clear counter*/
	TIM2->CNT = 0;
 8008440:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008444:	2200      	movs	r2, #0
 8008446:	625a      	str	r2, [r3, #36]	@ 0x24
	/*enable timer*/
	TIM2->CR1 |= CR1_CEN;
 8008448:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008452:	f043 0301 	orr.w	r3, r3, #1
 8008456:	6013      	str	r3, [r2, #0]

	/*enable tim2 interrupt */
	TIM2->DIER |= DIER_UIE;
 8008458:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008462:	f043 0301 	orr.w	r3, r3, #1
 8008466:	60d3      	str	r3, [r2, #12]
	/*enable tim2 interuupt in NVIC*/
	NVIC_EnableIRQ(TIM2_IRQn);
 8008468:	201c      	movs	r0, #28
 800846a:	f7ff ffb9 	bl	80083e0 <__NVIC_EnableIRQ>
}
 800846e:	bf00      	nop
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	40023800 	.word	0x40023800

08008478 <UART2_Transmit>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate);
void UART2_Transmit(int ch);


void UART2_Transmit(int ch)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & SR_TXE)){}
 8008480:	bf00      	nop
 8008482:	4b08      	ldr	r3, [pc, #32]	@ (80084a4 <UART2_Transmit+0x2c>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800848a:	2b00      	cmp	r3, #0
 800848c:	d0f9      	beq.n	8008482 <UART2_Transmit+0xa>
	USART2->DR = (ch & 0xFF);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a04      	ldr	r2, [pc, #16]	@ (80084a4 <UART2_Transmit+0x2c>)
 8008492:	b2db      	uxtb	r3, r3
 8008494:	6053      	str	r3, [r2, #4]
}
 8008496:	bf00      	nop
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	40004400 	.word	0x40004400

080084a8 <UART2_Init>:

void UART2_Init(void)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAEN;    //Enabling AHB1 clock for PORT A, because UART 2 uses PA2 - TX and PA3 - RX
 80084ac:	4b32      	ldr	r3, [pc, #200]	@ (8008578 <UART2_Init+0xd0>)
 80084ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084b0:	4a31      	ldr	r2, [pc, #196]	@ (8008578 <UART2_Init+0xd0>)
 80084b2:	f043 0301 	orr.w	r3, r3, #1
 80084b6:	6313      	str	r3, [r2, #48]	@ 0x30

	/* setting PA2 - TX as alternate function mode by using set 1 bit 4 and 5 as configuration 1:0*/
	GPIOA->MODER &= ~(1U << 4);
 80084b8:	4b30      	ldr	r3, [pc, #192]	@ (800857c <UART2_Init+0xd4>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a2f      	ldr	r2, [pc, #188]	@ (800857c <UART2_Init+0xd4>)
 80084be:	f023 0310 	bic.w	r3, r3, #16
 80084c2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 5);
 80084c4:	4b2d      	ldr	r3, [pc, #180]	@ (800857c <UART2_Init+0xd4>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a2c      	ldr	r2, [pc, #176]	@ (800857c <UART2_Init+0xd4>)
 80084ca:	f043 0320 	orr.w	r3, r3, #32
 80084ce:	6013      	str	r3, [r2, #0]

	/* setting PA3 - RX as alternate function mode by using set as configuration 1:0*/
	GPIOA->MODER &= ~(1U << 6);
 80084d0:	4b2a      	ldr	r3, [pc, #168]	@ (800857c <UART2_Init+0xd4>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a29      	ldr	r2, [pc, #164]	@ (800857c <UART2_Init+0xd4>)
 80084d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084da:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 7);
 80084dc:	4b27      	ldr	r3, [pc, #156]	@ (800857c <UART2_Init+0xd4>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a26      	ldr	r2, [pc, #152]	@ (800857c <UART2_Init+0xd4>)
 80084e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084e6:	6013      	str	r3, [r2, #0]
	 * PA2 is a AF7 in alternate function mapping register.
	 * PA2 comes under alternate function low register because first 8 pins on any port it comes under AFRL, next 8 pins comes under the AFRH register
	 * for enabling AF7 we need to set bit formation as 0111 to the particular alternate function pin register.
	 * Alternate function register, each pin have 4 bits.
	 */
	GPIOA->AFR[0] |= (1U << 8);   //1
 80084e8:	4b24      	ldr	r3, [pc, #144]	@ (800857c <UART2_Init+0xd4>)
 80084ea:	6a1b      	ldr	r3, [r3, #32]
 80084ec:	4a23      	ldr	r2, [pc, #140]	@ (800857c <UART2_Init+0xd4>)
 80084ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084f2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 9);   //1
 80084f4:	4b21      	ldr	r3, [pc, #132]	@ (800857c <UART2_Init+0xd4>)
 80084f6:	6a1b      	ldr	r3, [r3, #32]
 80084f8:	4a20      	ldr	r2, [pc, #128]	@ (800857c <UART2_Init+0xd4>)
 80084fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80084fe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 10);  //1
 8008500:	4b1e      	ldr	r3, [pc, #120]	@ (800857c <UART2_Init+0xd4>)
 8008502:	6a1b      	ldr	r3, [r3, #32]
 8008504:	4a1d      	ldr	r2, [pc, #116]	@ (800857c <UART2_Init+0xd4>)
 8008506:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800850a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 11);  //0
 800850c:	4b1b      	ldr	r3, [pc, #108]	@ (800857c <UART2_Init+0xd4>)
 800850e:	6a1b      	ldr	r3, [r3, #32]
 8008510:	4a1a      	ldr	r2, [pc, #104]	@ (800857c <UART2_Init+0xd4>)
 8008512:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008516:	6213      	str	r3, [r2, #32]

	/* Setting PA3 alternate function type*/
	GPIOA->AFR[0] |= (1U << 12);   //1
 8008518:	4b18      	ldr	r3, [pc, #96]	@ (800857c <UART2_Init+0xd4>)
 800851a:	6a1b      	ldr	r3, [r3, #32]
 800851c:	4a17      	ldr	r2, [pc, #92]	@ (800857c <UART2_Init+0xd4>)
 800851e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008522:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 13);   //1
 8008524:	4b15      	ldr	r3, [pc, #84]	@ (800857c <UART2_Init+0xd4>)
 8008526:	6a1b      	ldr	r3, [r3, #32]
 8008528:	4a14      	ldr	r2, [pc, #80]	@ (800857c <UART2_Init+0xd4>)
 800852a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800852e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 14);  //1
 8008530:	4b12      	ldr	r3, [pc, #72]	@ (800857c <UART2_Init+0xd4>)
 8008532:	6a1b      	ldr	r3, [r3, #32]
 8008534:	4a11      	ldr	r2, [pc, #68]	@ (800857c <UART2_Init+0xd4>)
 8008536:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800853a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 15);  //0
 800853c:	4b0f      	ldr	r3, [pc, #60]	@ (800857c <UART2_Init+0xd4>)
 800853e:	6a1b      	ldr	r3, [r3, #32]
 8008540:	4a0e      	ldr	r2, [pc, #56]	@ (800857c <UART2_Init+0xd4>)
 8008542:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008546:	6213      	str	r3, [r2, #32]

	RCC->APB1ENR |= UART2EN;    //Enabling APB1 clock for UART2
 8008548:	4b0b      	ldr	r3, [pc, #44]	@ (8008578 <UART2_Init+0xd0>)
 800854a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800854c:	4a0a      	ldr	r2, [pc, #40]	@ (8008578 <UART2_Init+0xd0>)
 800854e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008552:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure baud rate*/
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8008554:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008558:	4909      	ldr	r1, [pc, #36]	@ (8008580 <UART2_Init+0xd8>)
 800855a:	480a      	ldr	r0, [pc, #40]	@ (8008584 <UART2_Init+0xdc>)
 800855c:	f000 f814 	bl	8008588 <uart_set_baudrate>

	/*configure the transfer direction like rx or tx*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8008560:	4b08      	ldr	r3, [pc, #32]	@ (8008584 <UART2_Init+0xdc>)
 8008562:	220c      	movs	r2, #12
 8008564:	60da      	str	r2, [r3, #12]

	/*enabling the uart module*/
	USART2->CR1 |= CR1_UE;
 8008566:	4b07      	ldr	r3, [pc, #28]	@ (8008584 <UART2_Init+0xdc>)
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	4a06      	ldr	r2, [pc, #24]	@ (8008584 <UART2_Init+0xdc>)
 800856c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008570:	60d3      	str	r3, [r2, #12]
}
 8008572:	bf00      	nop
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	40023800 	.word	0x40023800
 800857c:	40020000 	.word	0x40020000
 8008580:	00f42400 	.word	0x00f42400
 8008584:	40004400 	.word	0x40004400

08008588 <uart_set_baudrate>:
	while(!(USART2->SR & SR_RXNE)){}
	return USART2->DR;
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 8008594:	6879      	ldr	r1, [r7, #4]
 8008596:	68b8      	ldr	r0, [r7, #8]
 8008598:	f000 f808 	bl	80085ac <compute_uart_bd>
 800859c:	4603      	mov	r3, r0
 800859e:	461a      	mov	r2, r3
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	609a      	str	r2, [r3, #8]
}
 80085a4:	bf00      	nop
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <compute_uart_bd>:


static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	085a      	lsrs	r2, r3, #1
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	441a      	add	r2, r3
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80085c4:	b29b      	uxth	r3, r3
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
	...

080085d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80085d4:	480d      	ldr	r0, [pc, #52]	@ (800860c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80085d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80085d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80085dc:	480c      	ldr	r0, [pc, #48]	@ (8008610 <LoopForever+0x6>)
  ldr r1, =_edata
 80085de:	490d      	ldr	r1, [pc, #52]	@ (8008614 <LoopForever+0xa>)
  ldr r2, =_sidata
 80085e0:	4a0d      	ldr	r2, [pc, #52]	@ (8008618 <LoopForever+0xe>)
  movs r3, #0
 80085e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80085e4:	e002      	b.n	80085ec <LoopCopyDataInit>

080085e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80085e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80085e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80085ea:	3304      	adds	r3, #4

080085ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80085ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80085ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80085f0:	d3f9      	bcc.n	80085e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80085f2:	4a0a      	ldr	r2, [pc, #40]	@ (800861c <LoopForever+0x12>)
  ldr r4, =_ebss
 80085f4:	4c0a      	ldr	r4, [pc, #40]	@ (8008620 <LoopForever+0x16>)
  movs r3, #0
 80085f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80085f8:	e001      	b.n	80085fe <LoopFillZerobss>

080085fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80085fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80085fc:	3204      	adds	r2, #4

080085fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80085fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008600:	d3fb      	bcc.n	80085fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008602:	f000 fa5d 	bl	8008ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008606:	f7ff fe09 	bl	800821c <main>

0800860a <LoopForever>:

LoopForever:
  b LoopForever
 800860a:	e7fe      	b.n	800860a <LoopForever>
  ldr   r0, =_estack
 800860c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008614:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8008618:	08008fb8 	.word	0x08008fb8
  ldr r2, =_sbss
 800861c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8008620:	200001c8 	.word	0x200001c8

08008624 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008624:	e7fe      	b.n	8008624 <ADC_IRQHandler>
	...

08008628 <std>:
 8008628:	2300      	movs	r3, #0
 800862a:	b510      	push	{r4, lr}
 800862c:	4604      	mov	r4, r0
 800862e:	e9c0 3300 	strd	r3, r3, [r0]
 8008632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008636:	6083      	str	r3, [r0, #8]
 8008638:	8181      	strh	r1, [r0, #12]
 800863a:	6643      	str	r3, [r0, #100]	@ 0x64
 800863c:	81c2      	strh	r2, [r0, #14]
 800863e:	6183      	str	r3, [r0, #24]
 8008640:	4619      	mov	r1, r3
 8008642:	2208      	movs	r2, #8
 8008644:	305c      	adds	r0, #92	@ 0x5c
 8008646:	f000 f9e7 	bl	8008a18 <memset>
 800864a:	4b0d      	ldr	r3, [pc, #52]	@ (8008680 <std+0x58>)
 800864c:	6263      	str	r3, [r4, #36]	@ 0x24
 800864e:	4b0d      	ldr	r3, [pc, #52]	@ (8008684 <std+0x5c>)
 8008650:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008652:	4b0d      	ldr	r3, [pc, #52]	@ (8008688 <std+0x60>)
 8008654:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008656:	4b0d      	ldr	r3, [pc, #52]	@ (800868c <std+0x64>)
 8008658:	6323      	str	r3, [r4, #48]	@ 0x30
 800865a:	4b0d      	ldr	r3, [pc, #52]	@ (8008690 <std+0x68>)
 800865c:	6224      	str	r4, [r4, #32]
 800865e:	429c      	cmp	r4, r3
 8008660:	d006      	beq.n	8008670 <std+0x48>
 8008662:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008666:	4294      	cmp	r4, r2
 8008668:	d002      	beq.n	8008670 <std+0x48>
 800866a:	33d0      	adds	r3, #208	@ 0xd0
 800866c:	429c      	cmp	r4, r3
 800866e:	d105      	bne.n	800867c <std+0x54>
 8008670:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008678:	f000 ba46 	b.w	8008b08 <__retarget_lock_init_recursive>
 800867c:	bd10      	pop	{r4, pc}
 800867e:	bf00      	nop
 8008680:	08008869 	.word	0x08008869
 8008684:	0800888b 	.word	0x0800888b
 8008688:	080088c3 	.word	0x080088c3
 800868c:	080088e7 	.word	0x080088e7
 8008690:	2000007c 	.word	0x2000007c

08008694 <stdio_exit_handler>:
 8008694:	4a02      	ldr	r2, [pc, #8]	@ (80086a0 <stdio_exit_handler+0xc>)
 8008696:	4903      	ldr	r1, [pc, #12]	@ (80086a4 <stdio_exit_handler+0x10>)
 8008698:	4803      	ldr	r0, [pc, #12]	@ (80086a8 <stdio_exit_handler+0x14>)
 800869a:	f000 b869 	b.w	8008770 <_fwalk_sglue>
 800869e:	bf00      	nop
 80086a0:	20000000 	.word	0x20000000
 80086a4:	08008e09 	.word	0x08008e09
 80086a8:	20000010 	.word	0x20000010

080086ac <cleanup_stdio>:
 80086ac:	6841      	ldr	r1, [r0, #4]
 80086ae:	4b0c      	ldr	r3, [pc, #48]	@ (80086e0 <cleanup_stdio+0x34>)
 80086b0:	4299      	cmp	r1, r3
 80086b2:	b510      	push	{r4, lr}
 80086b4:	4604      	mov	r4, r0
 80086b6:	d001      	beq.n	80086bc <cleanup_stdio+0x10>
 80086b8:	f000 fba6 	bl	8008e08 <_fflush_r>
 80086bc:	68a1      	ldr	r1, [r4, #8]
 80086be:	4b09      	ldr	r3, [pc, #36]	@ (80086e4 <cleanup_stdio+0x38>)
 80086c0:	4299      	cmp	r1, r3
 80086c2:	d002      	beq.n	80086ca <cleanup_stdio+0x1e>
 80086c4:	4620      	mov	r0, r4
 80086c6:	f000 fb9f 	bl	8008e08 <_fflush_r>
 80086ca:	68e1      	ldr	r1, [r4, #12]
 80086cc:	4b06      	ldr	r3, [pc, #24]	@ (80086e8 <cleanup_stdio+0x3c>)
 80086ce:	4299      	cmp	r1, r3
 80086d0:	d004      	beq.n	80086dc <cleanup_stdio+0x30>
 80086d2:	4620      	mov	r0, r4
 80086d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086d8:	f000 bb96 	b.w	8008e08 <_fflush_r>
 80086dc:	bd10      	pop	{r4, pc}
 80086de:	bf00      	nop
 80086e0:	2000007c 	.word	0x2000007c
 80086e4:	200000e4 	.word	0x200000e4
 80086e8:	2000014c 	.word	0x2000014c

080086ec <global_stdio_init.part.0>:
 80086ec:	b510      	push	{r4, lr}
 80086ee:	4b0b      	ldr	r3, [pc, #44]	@ (800871c <global_stdio_init.part.0+0x30>)
 80086f0:	4c0b      	ldr	r4, [pc, #44]	@ (8008720 <global_stdio_init.part.0+0x34>)
 80086f2:	4a0c      	ldr	r2, [pc, #48]	@ (8008724 <global_stdio_init.part.0+0x38>)
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	4620      	mov	r0, r4
 80086f8:	2200      	movs	r2, #0
 80086fa:	2104      	movs	r1, #4
 80086fc:	f7ff ff94 	bl	8008628 <std>
 8008700:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008704:	2201      	movs	r2, #1
 8008706:	2109      	movs	r1, #9
 8008708:	f7ff ff8e 	bl	8008628 <std>
 800870c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008710:	2202      	movs	r2, #2
 8008712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008716:	2112      	movs	r1, #18
 8008718:	f7ff bf86 	b.w	8008628 <std>
 800871c:	200001b4 	.word	0x200001b4
 8008720:	2000007c 	.word	0x2000007c
 8008724:	08008695 	.word	0x08008695

08008728 <__sfp_lock_acquire>:
 8008728:	4801      	ldr	r0, [pc, #4]	@ (8008730 <__sfp_lock_acquire+0x8>)
 800872a:	f000 b9ee 	b.w	8008b0a <__retarget_lock_acquire_recursive>
 800872e:	bf00      	nop
 8008730:	200001bd 	.word	0x200001bd

08008734 <__sfp_lock_release>:
 8008734:	4801      	ldr	r0, [pc, #4]	@ (800873c <__sfp_lock_release+0x8>)
 8008736:	f000 b9e9 	b.w	8008b0c <__retarget_lock_release_recursive>
 800873a:	bf00      	nop
 800873c:	200001bd 	.word	0x200001bd

08008740 <__sinit>:
 8008740:	b510      	push	{r4, lr}
 8008742:	4604      	mov	r4, r0
 8008744:	f7ff fff0 	bl	8008728 <__sfp_lock_acquire>
 8008748:	6a23      	ldr	r3, [r4, #32]
 800874a:	b11b      	cbz	r3, 8008754 <__sinit+0x14>
 800874c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008750:	f7ff bff0 	b.w	8008734 <__sfp_lock_release>
 8008754:	4b04      	ldr	r3, [pc, #16]	@ (8008768 <__sinit+0x28>)
 8008756:	6223      	str	r3, [r4, #32]
 8008758:	4b04      	ldr	r3, [pc, #16]	@ (800876c <__sinit+0x2c>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1f5      	bne.n	800874c <__sinit+0xc>
 8008760:	f7ff ffc4 	bl	80086ec <global_stdio_init.part.0>
 8008764:	e7f2      	b.n	800874c <__sinit+0xc>
 8008766:	bf00      	nop
 8008768:	080086ad 	.word	0x080086ad
 800876c:	200001b4 	.word	0x200001b4

08008770 <_fwalk_sglue>:
 8008770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008774:	4607      	mov	r7, r0
 8008776:	4688      	mov	r8, r1
 8008778:	4614      	mov	r4, r2
 800877a:	2600      	movs	r6, #0
 800877c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008780:	f1b9 0901 	subs.w	r9, r9, #1
 8008784:	d505      	bpl.n	8008792 <_fwalk_sglue+0x22>
 8008786:	6824      	ldr	r4, [r4, #0]
 8008788:	2c00      	cmp	r4, #0
 800878a:	d1f7      	bne.n	800877c <_fwalk_sglue+0xc>
 800878c:	4630      	mov	r0, r6
 800878e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008792:	89ab      	ldrh	r3, [r5, #12]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d907      	bls.n	80087a8 <_fwalk_sglue+0x38>
 8008798:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800879c:	3301      	adds	r3, #1
 800879e:	d003      	beq.n	80087a8 <_fwalk_sglue+0x38>
 80087a0:	4629      	mov	r1, r5
 80087a2:	4638      	mov	r0, r7
 80087a4:	47c0      	blx	r8
 80087a6:	4306      	orrs	r6, r0
 80087a8:	3568      	adds	r5, #104	@ 0x68
 80087aa:	e7e9      	b.n	8008780 <_fwalk_sglue+0x10>

080087ac <_puts_r>:
 80087ac:	6a03      	ldr	r3, [r0, #32]
 80087ae:	b570      	push	{r4, r5, r6, lr}
 80087b0:	6884      	ldr	r4, [r0, #8]
 80087b2:	4605      	mov	r5, r0
 80087b4:	460e      	mov	r6, r1
 80087b6:	b90b      	cbnz	r3, 80087bc <_puts_r+0x10>
 80087b8:	f7ff ffc2 	bl	8008740 <__sinit>
 80087bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087be:	07db      	lsls	r3, r3, #31
 80087c0:	d405      	bmi.n	80087ce <_puts_r+0x22>
 80087c2:	89a3      	ldrh	r3, [r4, #12]
 80087c4:	0598      	lsls	r0, r3, #22
 80087c6:	d402      	bmi.n	80087ce <_puts_r+0x22>
 80087c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087ca:	f000 f99e 	bl	8008b0a <__retarget_lock_acquire_recursive>
 80087ce:	89a3      	ldrh	r3, [r4, #12]
 80087d0:	0719      	lsls	r1, r3, #28
 80087d2:	d502      	bpl.n	80087da <_puts_r+0x2e>
 80087d4:	6923      	ldr	r3, [r4, #16]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d135      	bne.n	8008846 <_puts_r+0x9a>
 80087da:	4621      	mov	r1, r4
 80087dc:	4628      	mov	r0, r5
 80087de:	f000 f8c5 	bl	800896c <__swsetup_r>
 80087e2:	b380      	cbz	r0, 8008846 <_puts_r+0x9a>
 80087e4:	f04f 35ff 	mov.w	r5, #4294967295
 80087e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087ea:	07da      	lsls	r2, r3, #31
 80087ec:	d405      	bmi.n	80087fa <_puts_r+0x4e>
 80087ee:	89a3      	ldrh	r3, [r4, #12]
 80087f0:	059b      	lsls	r3, r3, #22
 80087f2:	d402      	bmi.n	80087fa <_puts_r+0x4e>
 80087f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087f6:	f000 f989 	bl	8008b0c <__retarget_lock_release_recursive>
 80087fa:	4628      	mov	r0, r5
 80087fc:	bd70      	pop	{r4, r5, r6, pc}
 80087fe:	2b00      	cmp	r3, #0
 8008800:	da04      	bge.n	800880c <_puts_r+0x60>
 8008802:	69a2      	ldr	r2, [r4, #24]
 8008804:	429a      	cmp	r2, r3
 8008806:	dc17      	bgt.n	8008838 <_puts_r+0x8c>
 8008808:	290a      	cmp	r1, #10
 800880a:	d015      	beq.n	8008838 <_puts_r+0x8c>
 800880c:	6823      	ldr	r3, [r4, #0]
 800880e:	1c5a      	adds	r2, r3, #1
 8008810:	6022      	str	r2, [r4, #0]
 8008812:	7019      	strb	r1, [r3, #0]
 8008814:	68a3      	ldr	r3, [r4, #8]
 8008816:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800881a:	3b01      	subs	r3, #1
 800881c:	60a3      	str	r3, [r4, #8]
 800881e:	2900      	cmp	r1, #0
 8008820:	d1ed      	bne.n	80087fe <_puts_r+0x52>
 8008822:	2b00      	cmp	r3, #0
 8008824:	da11      	bge.n	800884a <_puts_r+0x9e>
 8008826:	4622      	mov	r2, r4
 8008828:	210a      	movs	r1, #10
 800882a:	4628      	mov	r0, r5
 800882c:	f000 f85f 	bl	80088ee <__swbuf_r>
 8008830:	3001      	adds	r0, #1
 8008832:	d0d7      	beq.n	80087e4 <_puts_r+0x38>
 8008834:	250a      	movs	r5, #10
 8008836:	e7d7      	b.n	80087e8 <_puts_r+0x3c>
 8008838:	4622      	mov	r2, r4
 800883a:	4628      	mov	r0, r5
 800883c:	f000 f857 	bl	80088ee <__swbuf_r>
 8008840:	3001      	adds	r0, #1
 8008842:	d1e7      	bne.n	8008814 <_puts_r+0x68>
 8008844:	e7ce      	b.n	80087e4 <_puts_r+0x38>
 8008846:	3e01      	subs	r6, #1
 8008848:	e7e4      	b.n	8008814 <_puts_r+0x68>
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	1c5a      	adds	r2, r3, #1
 800884e:	6022      	str	r2, [r4, #0]
 8008850:	220a      	movs	r2, #10
 8008852:	701a      	strb	r2, [r3, #0]
 8008854:	e7ee      	b.n	8008834 <_puts_r+0x88>
	...

08008858 <puts>:
 8008858:	4b02      	ldr	r3, [pc, #8]	@ (8008864 <puts+0xc>)
 800885a:	4601      	mov	r1, r0
 800885c:	6818      	ldr	r0, [r3, #0]
 800885e:	f7ff bfa5 	b.w	80087ac <_puts_r>
 8008862:	bf00      	nop
 8008864:	2000000c 	.word	0x2000000c

08008868 <__sread>:
 8008868:	b510      	push	{r4, lr}
 800886a:	460c      	mov	r4, r1
 800886c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008870:	f000 f8fc 	bl	8008a6c <_read_r>
 8008874:	2800      	cmp	r0, #0
 8008876:	bfab      	itete	ge
 8008878:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800887a:	89a3      	ldrhlt	r3, [r4, #12]
 800887c:	181b      	addge	r3, r3, r0
 800887e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008882:	bfac      	ite	ge
 8008884:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008886:	81a3      	strhlt	r3, [r4, #12]
 8008888:	bd10      	pop	{r4, pc}

0800888a <__swrite>:
 800888a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800888e:	461f      	mov	r7, r3
 8008890:	898b      	ldrh	r3, [r1, #12]
 8008892:	05db      	lsls	r3, r3, #23
 8008894:	4605      	mov	r5, r0
 8008896:	460c      	mov	r4, r1
 8008898:	4616      	mov	r6, r2
 800889a:	d505      	bpl.n	80088a8 <__swrite+0x1e>
 800889c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a0:	2302      	movs	r3, #2
 80088a2:	2200      	movs	r2, #0
 80088a4:	f000 f8d0 	bl	8008a48 <_lseek_r>
 80088a8:	89a3      	ldrh	r3, [r4, #12]
 80088aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088b2:	81a3      	strh	r3, [r4, #12]
 80088b4:	4632      	mov	r2, r6
 80088b6:	463b      	mov	r3, r7
 80088b8:	4628      	mov	r0, r5
 80088ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088be:	f000 b8e7 	b.w	8008a90 <_write_r>

080088c2 <__sseek>:
 80088c2:	b510      	push	{r4, lr}
 80088c4:	460c      	mov	r4, r1
 80088c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ca:	f000 f8bd 	bl	8008a48 <_lseek_r>
 80088ce:	1c43      	adds	r3, r0, #1
 80088d0:	89a3      	ldrh	r3, [r4, #12]
 80088d2:	bf15      	itete	ne
 80088d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80088d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80088da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80088de:	81a3      	strheq	r3, [r4, #12]
 80088e0:	bf18      	it	ne
 80088e2:	81a3      	strhne	r3, [r4, #12]
 80088e4:	bd10      	pop	{r4, pc}

080088e6 <__sclose>:
 80088e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ea:	f000 b89d 	b.w	8008a28 <_close_r>

080088ee <__swbuf_r>:
 80088ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f0:	460e      	mov	r6, r1
 80088f2:	4614      	mov	r4, r2
 80088f4:	4605      	mov	r5, r0
 80088f6:	b118      	cbz	r0, 8008900 <__swbuf_r+0x12>
 80088f8:	6a03      	ldr	r3, [r0, #32]
 80088fa:	b90b      	cbnz	r3, 8008900 <__swbuf_r+0x12>
 80088fc:	f7ff ff20 	bl	8008740 <__sinit>
 8008900:	69a3      	ldr	r3, [r4, #24]
 8008902:	60a3      	str	r3, [r4, #8]
 8008904:	89a3      	ldrh	r3, [r4, #12]
 8008906:	071a      	lsls	r2, r3, #28
 8008908:	d501      	bpl.n	800890e <__swbuf_r+0x20>
 800890a:	6923      	ldr	r3, [r4, #16]
 800890c:	b943      	cbnz	r3, 8008920 <__swbuf_r+0x32>
 800890e:	4621      	mov	r1, r4
 8008910:	4628      	mov	r0, r5
 8008912:	f000 f82b 	bl	800896c <__swsetup_r>
 8008916:	b118      	cbz	r0, 8008920 <__swbuf_r+0x32>
 8008918:	f04f 37ff 	mov.w	r7, #4294967295
 800891c:	4638      	mov	r0, r7
 800891e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008920:	6823      	ldr	r3, [r4, #0]
 8008922:	6922      	ldr	r2, [r4, #16]
 8008924:	1a98      	subs	r0, r3, r2
 8008926:	6963      	ldr	r3, [r4, #20]
 8008928:	b2f6      	uxtb	r6, r6
 800892a:	4283      	cmp	r3, r0
 800892c:	4637      	mov	r7, r6
 800892e:	dc05      	bgt.n	800893c <__swbuf_r+0x4e>
 8008930:	4621      	mov	r1, r4
 8008932:	4628      	mov	r0, r5
 8008934:	f000 fa68 	bl	8008e08 <_fflush_r>
 8008938:	2800      	cmp	r0, #0
 800893a:	d1ed      	bne.n	8008918 <__swbuf_r+0x2a>
 800893c:	68a3      	ldr	r3, [r4, #8]
 800893e:	3b01      	subs	r3, #1
 8008940:	60a3      	str	r3, [r4, #8]
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	1c5a      	adds	r2, r3, #1
 8008946:	6022      	str	r2, [r4, #0]
 8008948:	701e      	strb	r6, [r3, #0]
 800894a:	6962      	ldr	r2, [r4, #20]
 800894c:	1c43      	adds	r3, r0, #1
 800894e:	429a      	cmp	r2, r3
 8008950:	d004      	beq.n	800895c <__swbuf_r+0x6e>
 8008952:	89a3      	ldrh	r3, [r4, #12]
 8008954:	07db      	lsls	r3, r3, #31
 8008956:	d5e1      	bpl.n	800891c <__swbuf_r+0x2e>
 8008958:	2e0a      	cmp	r6, #10
 800895a:	d1df      	bne.n	800891c <__swbuf_r+0x2e>
 800895c:	4621      	mov	r1, r4
 800895e:	4628      	mov	r0, r5
 8008960:	f000 fa52 	bl	8008e08 <_fflush_r>
 8008964:	2800      	cmp	r0, #0
 8008966:	d0d9      	beq.n	800891c <__swbuf_r+0x2e>
 8008968:	e7d6      	b.n	8008918 <__swbuf_r+0x2a>
	...

0800896c <__swsetup_r>:
 800896c:	b538      	push	{r3, r4, r5, lr}
 800896e:	4b29      	ldr	r3, [pc, #164]	@ (8008a14 <__swsetup_r+0xa8>)
 8008970:	4605      	mov	r5, r0
 8008972:	6818      	ldr	r0, [r3, #0]
 8008974:	460c      	mov	r4, r1
 8008976:	b118      	cbz	r0, 8008980 <__swsetup_r+0x14>
 8008978:	6a03      	ldr	r3, [r0, #32]
 800897a:	b90b      	cbnz	r3, 8008980 <__swsetup_r+0x14>
 800897c:	f7ff fee0 	bl	8008740 <__sinit>
 8008980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008984:	0719      	lsls	r1, r3, #28
 8008986:	d422      	bmi.n	80089ce <__swsetup_r+0x62>
 8008988:	06da      	lsls	r2, r3, #27
 800898a:	d407      	bmi.n	800899c <__swsetup_r+0x30>
 800898c:	2209      	movs	r2, #9
 800898e:	602a      	str	r2, [r5, #0]
 8008990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008994:	81a3      	strh	r3, [r4, #12]
 8008996:	f04f 30ff 	mov.w	r0, #4294967295
 800899a:	e033      	b.n	8008a04 <__swsetup_r+0x98>
 800899c:	0758      	lsls	r0, r3, #29
 800899e:	d512      	bpl.n	80089c6 <__swsetup_r+0x5a>
 80089a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089a2:	b141      	cbz	r1, 80089b6 <__swsetup_r+0x4a>
 80089a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089a8:	4299      	cmp	r1, r3
 80089aa:	d002      	beq.n	80089b2 <__swsetup_r+0x46>
 80089ac:	4628      	mov	r0, r5
 80089ae:	f000 f8af 	bl	8008b10 <_free_r>
 80089b2:	2300      	movs	r3, #0
 80089b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80089b6:	89a3      	ldrh	r3, [r4, #12]
 80089b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80089bc:	81a3      	strh	r3, [r4, #12]
 80089be:	2300      	movs	r3, #0
 80089c0:	6063      	str	r3, [r4, #4]
 80089c2:	6923      	ldr	r3, [r4, #16]
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	89a3      	ldrh	r3, [r4, #12]
 80089c8:	f043 0308 	orr.w	r3, r3, #8
 80089cc:	81a3      	strh	r3, [r4, #12]
 80089ce:	6923      	ldr	r3, [r4, #16]
 80089d0:	b94b      	cbnz	r3, 80089e6 <__swsetup_r+0x7a>
 80089d2:	89a3      	ldrh	r3, [r4, #12]
 80089d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80089d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089dc:	d003      	beq.n	80089e6 <__swsetup_r+0x7a>
 80089de:	4621      	mov	r1, r4
 80089e0:	4628      	mov	r0, r5
 80089e2:	f000 fa5f 	bl	8008ea4 <__smakebuf_r>
 80089e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ea:	f013 0201 	ands.w	r2, r3, #1
 80089ee:	d00a      	beq.n	8008a06 <__swsetup_r+0x9a>
 80089f0:	2200      	movs	r2, #0
 80089f2:	60a2      	str	r2, [r4, #8]
 80089f4:	6962      	ldr	r2, [r4, #20]
 80089f6:	4252      	negs	r2, r2
 80089f8:	61a2      	str	r2, [r4, #24]
 80089fa:	6922      	ldr	r2, [r4, #16]
 80089fc:	b942      	cbnz	r2, 8008a10 <__swsetup_r+0xa4>
 80089fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a02:	d1c5      	bne.n	8008990 <__swsetup_r+0x24>
 8008a04:	bd38      	pop	{r3, r4, r5, pc}
 8008a06:	0799      	lsls	r1, r3, #30
 8008a08:	bf58      	it	pl
 8008a0a:	6962      	ldrpl	r2, [r4, #20]
 8008a0c:	60a2      	str	r2, [r4, #8]
 8008a0e:	e7f4      	b.n	80089fa <__swsetup_r+0x8e>
 8008a10:	2000      	movs	r0, #0
 8008a12:	e7f7      	b.n	8008a04 <__swsetup_r+0x98>
 8008a14:	2000000c 	.word	0x2000000c

08008a18 <memset>:
 8008a18:	4402      	add	r2, r0
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d100      	bne.n	8008a22 <memset+0xa>
 8008a20:	4770      	bx	lr
 8008a22:	f803 1b01 	strb.w	r1, [r3], #1
 8008a26:	e7f9      	b.n	8008a1c <memset+0x4>

08008a28 <_close_r>:
 8008a28:	b538      	push	{r3, r4, r5, lr}
 8008a2a:	4d06      	ldr	r5, [pc, #24]	@ (8008a44 <_close_r+0x1c>)
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	4604      	mov	r4, r0
 8008a30:	4608      	mov	r0, r1
 8008a32:	602b      	str	r3, [r5, #0]
 8008a34:	f7ff fc69 	bl	800830a <_close>
 8008a38:	1c43      	adds	r3, r0, #1
 8008a3a:	d102      	bne.n	8008a42 <_close_r+0x1a>
 8008a3c:	682b      	ldr	r3, [r5, #0]
 8008a3e:	b103      	cbz	r3, 8008a42 <_close_r+0x1a>
 8008a40:	6023      	str	r3, [r4, #0]
 8008a42:	bd38      	pop	{r3, r4, r5, pc}
 8008a44:	200001b8 	.word	0x200001b8

08008a48 <_lseek_r>:
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	4d07      	ldr	r5, [pc, #28]	@ (8008a68 <_lseek_r+0x20>)
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	4608      	mov	r0, r1
 8008a50:	4611      	mov	r1, r2
 8008a52:	2200      	movs	r2, #0
 8008a54:	602a      	str	r2, [r5, #0]
 8008a56:	461a      	mov	r2, r3
 8008a58:	f7ff fc7e 	bl	8008358 <_lseek>
 8008a5c:	1c43      	adds	r3, r0, #1
 8008a5e:	d102      	bne.n	8008a66 <_lseek_r+0x1e>
 8008a60:	682b      	ldr	r3, [r5, #0]
 8008a62:	b103      	cbz	r3, 8008a66 <_lseek_r+0x1e>
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	bd38      	pop	{r3, r4, r5, pc}
 8008a68:	200001b8 	.word	0x200001b8

08008a6c <_read_r>:
 8008a6c:	b538      	push	{r3, r4, r5, lr}
 8008a6e:	4d07      	ldr	r5, [pc, #28]	@ (8008a8c <_read_r+0x20>)
 8008a70:	4604      	mov	r4, r0
 8008a72:	4608      	mov	r0, r1
 8008a74:	4611      	mov	r1, r2
 8008a76:	2200      	movs	r2, #0
 8008a78:	602a      	str	r2, [r5, #0]
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	f7ff fc0c 	bl	8008298 <_read>
 8008a80:	1c43      	adds	r3, r0, #1
 8008a82:	d102      	bne.n	8008a8a <_read_r+0x1e>
 8008a84:	682b      	ldr	r3, [r5, #0]
 8008a86:	b103      	cbz	r3, 8008a8a <_read_r+0x1e>
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	bd38      	pop	{r3, r4, r5, pc}
 8008a8c:	200001b8 	.word	0x200001b8

08008a90 <_write_r>:
 8008a90:	b538      	push	{r3, r4, r5, lr}
 8008a92:	4d07      	ldr	r5, [pc, #28]	@ (8008ab0 <_write_r+0x20>)
 8008a94:	4604      	mov	r4, r0
 8008a96:	4608      	mov	r0, r1
 8008a98:	4611      	mov	r1, r2
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	602a      	str	r2, [r5, #0]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	f7ff fc17 	bl	80082d2 <_write>
 8008aa4:	1c43      	adds	r3, r0, #1
 8008aa6:	d102      	bne.n	8008aae <_write_r+0x1e>
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	b103      	cbz	r3, 8008aae <_write_r+0x1e>
 8008aac:	6023      	str	r3, [r4, #0]
 8008aae:	bd38      	pop	{r3, r4, r5, pc}
 8008ab0:	200001b8 	.word	0x200001b8

08008ab4 <__errno>:
 8008ab4:	4b01      	ldr	r3, [pc, #4]	@ (8008abc <__errno+0x8>)
 8008ab6:	6818      	ldr	r0, [r3, #0]
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	2000000c 	.word	0x2000000c

08008ac0 <__libc_init_array>:
 8008ac0:	b570      	push	{r4, r5, r6, lr}
 8008ac2:	4d0d      	ldr	r5, [pc, #52]	@ (8008af8 <__libc_init_array+0x38>)
 8008ac4:	4c0d      	ldr	r4, [pc, #52]	@ (8008afc <__libc_init_array+0x3c>)
 8008ac6:	1b64      	subs	r4, r4, r5
 8008ac8:	10a4      	asrs	r4, r4, #2
 8008aca:	2600      	movs	r6, #0
 8008acc:	42a6      	cmp	r6, r4
 8008ace:	d109      	bne.n	8008ae4 <__libc_init_array+0x24>
 8008ad0:	4d0b      	ldr	r5, [pc, #44]	@ (8008b00 <__libc_init_array+0x40>)
 8008ad2:	4c0c      	ldr	r4, [pc, #48]	@ (8008b04 <__libc_init_array+0x44>)
 8008ad4:	f000 fa54 	bl	8008f80 <_init>
 8008ad8:	1b64      	subs	r4, r4, r5
 8008ada:	10a4      	asrs	r4, r4, #2
 8008adc:	2600      	movs	r6, #0
 8008ade:	42a6      	cmp	r6, r4
 8008ae0:	d105      	bne.n	8008aee <__libc_init_array+0x2e>
 8008ae2:	bd70      	pop	{r4, r5, r6, pc}
 8008ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ae8:	4798      	blx	r3
 8008aea:	3601      	adds	r6, #1
 8008aec:	e7ee      	b.n	8008acc <__libc_init_array+0xc>
 8008aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8008af2:	4798      	blx	r3
 8008af4:	3601      	adds	r6, #1
 8008af6:	e7f2      	b.n	8008ade <__libc_init_array+0x1e>
 8008af8:	08008fb0 	.word	0x08008fb0
 8008afc:	08008fb0 	.word	0x08008fb0
 8008b00:	08008fb0 	.word	0x08008fb0
 8008b04:	08008fb4 	.word	0x08008fb4

08008b08 <__retarget_lock_init_recursive>:
 8008b08:	4770      	bx	lr

08008b0a <__retarget_lock_acquire_recursive>:
 8008b0a:	4770      	bx	lr

08008b0c <__retarget_lock_release_recursive>:
 8008b0c:	4770      	bx	lr
	...

08008b10 <_free_r>:
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	4605      	mov	r5, r0
 8008b14:	2900      	cmp	r1, #0
 8008b16:	d041      	beq.n	8008b9c <_free_r+0x8c>
 8008b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b1c:	1f0c      	subs	r4, r1, #4
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	bfb8      	it	lt
 8008b22:	18e4      	addlt	r4, r4, r3
 8008b24:	f000 f8e0 	bl	8008ce8 <__malloc_lock>
 8008b28:	4a1d      	ldr	r2, [pc, #116]	@ (8008ba0 <_free_r+0x90>)
 8008b2a:	6813      	ldr	r3, [r2, #0]
 8008b2c:	b933      	cbnz	r3, 8008b3c <_free_r+0x2c>
 8008b2e:	6063      	str	r3, [r4, #4]
 8008b30:	6014      	str	r4, [r2, #0]
 8008b32:	4628      	mov	r0, r5
 8008b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b38:	f000 b8dc 	b.w	8008cf4 <__malloc_unlock>
 8008b3c:	42a3      	cmp	r3, r4
 8008b3e:	d908      	bls.n	8008b52 <_free_r+0x42>
 8008b40:	6820      	ldr	r0, [r4, #0]
 8008b42:	1821      	adds	r1, r4, r0
 8008b44:	428b      	cmp	r3, r1
 8008b46:	bf01      	itttt	eq
 8008b48:	6819      	ldreq	r1, [r3, #0]
 8008b4a:	685b      	ldreq	r3, [r3, #4]
 8008b4c:	1809      	addeq	r1, r1, r0
 8008b4e:	6021      	streq	r1, [r4, #0]
 8008b50:	e7ed      	b.n	8008b2e <_free_r+0x1e>
 8008b52:	461a      	mov	r2, r3
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	b10b      	cbz	r3, 8008b5c <_free_r+0x4c>
 8008b58:	42a3      	cmp	r3, r4
 8008b5a:	d9fa      	bls.n	8008b52 <_free_r+0x42>
 8008b5c:	6811      	ldr	r1, [r2, #0]
 8008b5e:	1850      	adds	r0, r2, r1
 8008b60:	42a0      	cmp	r0, r4
 8008b62:	d10b      	bne.n	8008b7c <_free_r+0x6c>
 8008b64:	6820      	ldr	r0, [r4, #0]
 8008b66:	4401      	add	r1, r0
 8008b68:	1850      	adds	r0, r2, r1
 8008b6a:	4283      	cmp	r3, r0
 8008b6c:	6011      	str	r1, [r2, #0]
 8008b6e:	d1e0      	bne.n	8008b32 <_free_r+0x22>
 8008b70:	6818      	ldr	r0, [r3, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	6053      	str	r3, [r2, #4]
 8008b76:	4408      	add	r0, r1
 8008b78:	6010      	str	r0, [r2, #0]
 8008b7a:	e7da      	b.n	8008b32 <_free_r+0x22>
 8008b7c:	d902      	bls.n	8008b84 <_free_r+0x74>
 8008b7e:	230c      	movs	r3, #12
 8008b80:	602b      	str	r3, [r5, #0]
 8008b82:	e7d6      	b.n	8008b32 <_free_r+0x22>
 8008b84:	6820      	ldr	r0, [r4, #0]
 8008b86:	1821      	adds	r1, r4, r0
 8008b88:	428b      	cmp	r3, r1
 8008b8a:	bf04      	itt	eq
 8008b8c:	6819      	ldreq	r1, [r3, #0]
 8008b8e:	685b      	ldreq	r3, [r3, #4]
 8008b90:	6063      	str	r3, [r4, #4]
 8008b92:	bf04      	itt	eq
 8008b94:	1809      	addeq	r1, r1, r0
 8008b96:	6021      	streq	r1, [r4, #0]
 8008b98:	6054      	str	r4, [r2, #4]
 8008b9a:	e7ca      	b.n	8008b32 <_free_r+0x22>
 8008b9c:	bd38      	pop	{r3, r4, r5, pc}
 8008b9e:	bf00      	nop
 8008ba0:	200001c4 	.word	0x200001c4

08008ba4 <sbrk_aligned>:
 8008ba4:	b570      	push	{r4, r5, r6, lr}
 8008ba6:	4e0f      	ldr	r6, [pc, #60]	@ (8008be4 <sbrk_aligned+0x40>)
 8008ba8:	460c      	mov	r4, r1
 8008baa:	6831      	ldr	r1, [r6, #0]
 8008bac:	4605      	mov	r5, r0
 8008bae:	b911      	cbnz	r1, 8008bb6 <sbrk_aligned+0x12>
 8008bb0:	f000 f9d6 	bl	8008f60 <_sbrk_r>
 8008bb4:	6030      	str	r0, [r6, #0]
 8008bb6:	4621      	mov	r1, r4
 8008bb8:	4628      	mov	r0, r5
 8008bba:	f000 f9d1 	bl	8008f60 <_sbrk_r>
 8008bbe:	1c43      	adds	r3, r0, #1
 8008bc0:	d103      	bne.n	8008bca <sbrk_aligned+0x26>
 8008bc2:	f04f 34ff 	mov.w	r4, #4294967295
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	bd70      	pop	{r4, r5, r6, pc}
 8008bca:	1cc4      	adds	r4, r0, #3
 8008bcc:	f024 0403 	bic.w	r4, r4, #3
 8008bd0:	42a0      	cmp	r0, r4
 8008bd2:	d0f8      	beq.n	8008bc6 <sbrk_aligned+0x22>
 8008bd4:	1a21      	subs	r1, r4, r0
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	f000 f9c2 	bl	8008f60 <_sbrk_r>
 8008bdc:	3001      	adds	r0, #1
 8008bde:	d1f2      	bne.n	8008bc6 <sbrk_aligned+0x22>
 8008be0:	e7ef      	b.n	8008bc2 <sbrk_aligned+0x1e>
 8008be2:	bf00      	nop
 8008be4:	200001c0 	.word	0x200001c0

08008be8 <_malloc_r>:
 8008be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bec:	1ccd      	adds	r5, r1, #3
 8008bee:	f025 0503 	bic.w	r5, r5, #3
 8008bf2:	3508      	adds	r5, #8
 8008bf4:	2d0c      	cmp	r5, #12
 8008bf6:	bf38      	it	cc
 8008bf8:	250c      	movcc	r5, #12
 8008bfa:	2d00      	cmp	r5, #0
 8008bfc:	4606      	mov	r6, r0
 8008bfe:	db01      	blt.n	8008c04 <_malloc_r+0x1c>
 8008c00:	42a9      	cmp	r1, r5
 8008c02:	d904      	bls.n	8008c0e <_malloc_r+0x26>
 8008c04:	230c      	movs	r3, #12
 8008c06:	6033      	str	r3, [r6, #0]
 8008c08:	2000      	movs	r0, #0
 8008c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ce4 <_malloc_r+0xfc>
 8008c12:	f000 f869 	bl	8008ce8 <__malloc_lock>
 8008c16:	f8d8 3000 	ldr.w	r3, [r8]
 8008c1a:	461c      	mov	r4, r3
 8008c1c:	bb44      	cbnz	r4, 8008c70 <_malloc_r+0x88>
 8008c1e:	4629      	mov	r1, r5
 8008c20:	4630      	mov	r0, r6
 8008c22:	f7ff ffbf 	bl	8008ba4 <sbrk_aligned>
 8008c26:	1c43      	adds	r3, r0, #1
 8008c28:	4604      	mov	r4, r0
 8008c2a:	d158      	bne.n	8008cde <_malloc_r+0xf6>
 8008c2c:	f8d8 4000 	ldr.w	r4, [r8]
 8008c30:	4627      	mov	r7, r4
 8008c32:	2f00      	cmp	r7, #0
 8008c34:	d143      	bne.n	8008cbe <_malloc_r+0xd6>
 8008c36:	2c00      	cmp	r4, #0
 8008c38:	d04b      	beq.n	8008cd2 <_malloc_r+0xea>
 8008c3a:	6823      	ldr	r3, [r4, #0]
 8008c3c:	4639      	mov	r1, r7
 8008c3e:	4630      	mov	r0, r6
 8008c40:	eb04 0903 	add.w	r9, r4, r3
 8008c44:	f000 f98c 	bl	8008f60 <_sbrk_r>
 8008c48:	4581      	cmp	r9, r0
 8008c4a:	d142      	bne.n	8008cd2 <_malloc_r+0xea>
 8008c4c:	6821      	ldr	r1, [r4, #0]
 8008c4e:	1a6d      	subs	r5, r5, r1
 8008c50:	4629      	mov	r1, r5
 8008c52:	4630      	mov	r0, r6
 8008c54:	f7ff ffa6 	bl	8008ba4 <sbrk_aligned>
 8008c58:	3001      	adds	r0, #1
 8008c5a:	d03a      	beq.n	8008cd2 <_malloc_r+0xea>
 8008c5c:	6823      	ldr	r3, [r4, #0]
 8008c5e:	442b      	add	r3, r5
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	f8d8 3000 	ldr.w	r3, [r8]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	bb62      	cbnz	r2, 8008cc4 <_malloc_r+0xdc>
 8008c6a:	f8c8 7000 	str.w	r7, [r8]
 8008c6e:	e00f      	b.n	8008c90 <_malloc_r+0xa8>
 8008c70:	6822      	ldr	r2, [r4, #0]
 8008c72:	1b52      	subs	r2, r2, r5
 8008c74:	d420      	bmi.n	8008cb8 <_malloc_r+0xd0>
 8008c76:	2a0b      	cmp	r2, #11
 8008c78:	d917      	bls.n	8008caa <_malloc_r+0xc2>
 8008c7a:	1961      	adds	r1, r4, r5
 8008c7c:	42a3      	cmp	r3, r4
 8008c7e:	6025      	str	r5, [r4, #0]
 8008c80:	bf18      	it	ne
 8008c82:	6059      	strne	r1, [r3, #4]
 8008c84:	6863      	ldr	r3, [r4, #4]
 8008c86:	bf08      	it	eq
 8008c88:	f8c8 1000 	streq.w	r1, [r8]
 8008c8c:	5162      	str	r2, [r4, r5]
 8008c8e:	604b      	str	r3, [r1, #4]
 8008c90:	4630      	mov	r0, r6
 8008c92:	f000 f82f 	bl	8008cf4 <__malloc_unlock>
 8008c96:	f104 000b 	add.w	r0, r4, #11
 8008c9a:	1d23      	adds	r3, r4, #4
 8008c9c:	f020 0007 	bic.w	r0, r0, #7
 8008ca0:	1ac2      	subs	r2, r0, r3
 8008ca2:	bf1c      	itt	ne
 8008ca4:	1a1b      	subne	r3, r3, r0
 8008ca6:	50a3      	strne	r3, [r4, r2]
 8008ca8:	e7af      	b.n	8008c0a <_malloc_r+0x22>
 8008caa:	6862      	ldr	r2, [r4, #4]
 8008cac:	42a3      	cmp	r3, r4
 8008cae:	bf0c      	ite	eq
 8008cb0:	f8c8 2000 	streq.w	r2, [r8]
 8008cb4:	605a      	strne	r2, [r3, #4]
 8008cb6:	e7eb      	b.n	8008c90 <_malloc_r+0xa8>
 8008cb8:	4623      	mov	r3, r4
 8008cba:	6864      	ldr	r4, [r4, #4]
 8008cbc:	e7ae      	b.n	8008c1c <_malloc_r+0x34>
 8008cbe:	463c      	mov	r4, r7
 8008cc0:	687f      	ldr	r7, [r7, #4]
 8008cc2:	e7b6      	b.n	8008c32 <_malloc_r+0x4a>
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	42a3      	cmp	r3, r4
 8008cca:	d1fb      	bne.n	8008cc4 <_malloc_r+0xdc>
 8008ccc:	2300      	movs	r3, #0
 8008cce:	6053      	str	r3, [r2, #4]
 8008cd0:	e7de      	b.n	8008c90 <_malloc_r+0xa8>
 8008cd2:	230c      	movs	r3, #12
 8008cd4:	6033      	str	r3, [r6, #0]
 8008cd6:	4630      	mov	r0, r6
 8008cd8:	f000 f80c 	bl	8008cf4 <__malloc_unlock>
 8008cdc:	e794      	b.n	8008c08 <_malloc_r+0x20>
 8008cde:	6005      	str	r5, [r0, #0]
 8008ce0:	e7d6      	b.n	8008c90 <_malloc_r+0xa8>
 8008ce2:	bf00      	nop
 8008ce4:	200001c4 	.word	0x200001c4

08008ce8 <__malloc_lock>:
 8008ce8:	4801      	ldr	r0, [pc, #4]	@ (8008cf0 <__malloc_lock+0x8>)
 8008cea:	f7ff bf0e 	b.w	8008b0a <__retarget_lock_acquire_recursive>
 8008cee:	bf00      	nop
 8008cf0:	200001bc 	.word	0x200001bc

08008cf4 <__malloc_unlock>:
 8008cf4:	4801      	ldr	r0, [pc, #4]	@ (8008cfc <__malloc_unlock+0x8>)
 8008cf6:	f7ff bf09 	b.w	8008b0c <__retarget_lock_release_recursive>
 8008cfa:	bf00      	nop
 8008cfc:	200001bc 	.word	0x200001bc

08008d00 <__sflush_r>:
 8008d00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d08:	0716      	lsls	r6, r2, #28
 8008d0a:	4605      	mov	r5, r0
 8008d0c:	460c      	mov	r4, r1
 8008d0e:	d454      	bmi.n	8008dba <__sflush_r+0xba>
 8008d10:	684b      	ldr	r3, [r1, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	dc02      	bgt.n	8008d1c <__sflush_r+0x1c>
 8008d16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	dd48      	ble.n	8008dae <__sflush_r+0xae>
 8008d1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d1e:	2e00      	cmp	r6, #0
 8008d20:	d045      	beq.n	8008dae <__sflush_r+0xae>
 8008d22:	2300      	movs	r3, #0
 8008d24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008d28:	682f      	ldr	r7, [r5, #0]
 8008d2a:	6a21      	ldr	r1, [r4, #32]
 8008d2c:	602b      	str	r3, [r5, #0]
 8008d2e:	d030      	beq.n	8008d92 <__sflush_r+0x92>
 8008d30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008d32:	89a3      	ldrh	r3, [r4, #12]
 8008d34:	0759      	lsls	r1, r3, #29
 8008d36:	d505      	bpl.n	8008d44 <__sflush_r+0x44>
 8008d38:	6863      	ldr	r3, [r4, #4]
 8008d3a:	1ad2      	subs	r2, r2, r3
 8008d3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008d3e:	b10b      	cbz	r3, 8008d44 <__sflush_r+0x44>
 8008d40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008d42:	1ad2      	subs	r2, r2, r3
 8008d44:	2300      	movs	r3, #0
 8008d46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d48:	6a21      	ldr	r1, [r4, #32]
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	47b0      	blx	r6
 8008d4e:	1c43      	adds	r3, r0, #1
 8008d50:	89a3      	ldrh	r3, [r4, #12]
 8008d52:	d106      	bne.n	8008d62 <__sflush_r+0x62>
 8008d54:	6829      	ldr	r1, [r5, #0]
 8008d56:	291d      	cmp	r1, #29
 8008d58:	d82b      	bhi.n	8008db2 <__sflush_r+0xb2>
 8008d5a:	4a2a      	ldr	r2, [pc, #168]	@ (8008e04 <__sflush_r+0x104>)
 8008d5c:	410a      	asrs	r2, r1
 8008d5e:	07d6      	lsls	r6, r2, #31
 8008d60:	d427      	bmi.n	8008db2 <__sflush_r+0xb2>
 8008d62:	2200      	movs	r2, #0
 8008d64:	6062      	str	r2, [r4, #4]
 8008d66:	04d9      	lsls	r1, r3, #19
 8008d68:	6922      	ldr	r2, [r4, #16]
 8008d6a:	6022      	str	r2, [r4, #0]
 8008d6c:	d504      	bpl.n	8008d78 <__sflush_r+0x78>
 8008d6e:	1c42      	adds	r2, r0, #1
 8008d70:	d101      	bne.n	8008d76 <__sflush_r+0x76>
 8008d72:	682b      	ldr	r3, [r5, #0]
 8008d74:	b903      	cbnz	r3, 8008d78 <__sflush_r+0x78>
 8008d76:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d7a:	602f      	str	r7, [r5, #0]
 8008d7c:	b1b9      	cbz	r1, 8008dae <__sflush_r+0xae>
 8008d7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d82:	4299      	cmp	r1, r3
 8008d84:	d002      	beq.n	8008d8c <__sflush_r+0x8c>
 8008d86:	4628      	mov	r0, r5
 8008d88:	f7ff fec2 	bl	8008b10 <_free_r>
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d90:	e00d      	b.n	8008dae <__sflush_r+0xae>
 8008d92:	2301      	movs	r3, #1
 8008d94:	4628      	mov	r0, r5
 8008d96:	47b0      	blx	r6
 8008d98:	4602      	mov	r2, r0
 8008d9a:	1c50      	adds	r0, r2, #1
 8008d9c:	d1c9      	bne.n	8008d32 <__sflush_r+0x32>
 8008d9e:	682b      	ldr	r3, [r5, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d0c6      	beq.n	8008d32 <__sflush_r+0x32>
 8008da4:	2b1d      	cmp	r3, #29
 8008da6:	d001      	beq.n	8008dac <__sflush_r+0xac>
 8008da8:	2b16      	cmp	r3, #22
 8008daa:	d11e      	bne.n	8008dea <__sflush_r+0xea>
 8008dac:	602f      	str	r7, [r5, #0]
 8008dae:	2000      	movs	r0, #0
 8008db0:	e022      	b.n	8008df8 <__sflush_r+0xf8>
 8008db2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008db6:	b21b      	sxth	r3, r3
 8008db8:	e01b      	b.n	8008df2 <__sflush_r+0xf2>
 8008dba:	690f      	ldr	r7, [r1, #16]
 8008dbc:	2f00      	cmp	r7, #0
 8008dbe:	d0f6      	beq.n	8008dae <__sflush_r+0xae>
 8008dc0:	0793      	lsls	r3, r2, #30
 8008dc2:	680e      	ldr	r6, [r1, #0]
 8008dc4:	bf08      	it	eq
 8008dc6:	694b      	ldreq	r3, [r1, #20]
 8008dc8:	600f      	str	r7, [r1, #0]
 8008dca:	bf18      	it	ne
 8008dcc:	2300      	movne	r3, #0
 8008dce:	eba6 0807 	sub.w	r8, r6, r7
 8008dd2:	608b      	str	r3, [r1, #8]
 8008dd4:	f1b8 0f00 	cmp.w	r8, #0
 8008dd8:	dde9      	ble.n	8008dae <__sflush_r+0xae>
 8008dda:	6a21      	ldr	r1, [r4, #32]
 8008ddc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008dde:	4643      	mov	r3, r8
 8008de0:	463a      	mov	r2, r7
 8008de2:	4628      	mov	r0, r5
 8008de4:	47b0      	blx	r6
 8008de6:	2800      	cmp	r0, #0
 8008de8:	dc08      	bgt.n	8008dfc <__sflush_r+0xfc>
 8008dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008df2:	81a3      	strh	r3, [r4, #12]
 8008df4:	f04f 30ff 	mov.w	r0, #4294967295
 8008df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dfc:	4407      	add	r7, r0
 8008dfe:	eba8 0800 	sub.w	r8, r8, r0
 8008e02:	e7e7      	b.n	8008dd4 <__sflush_r+0xd4>
 8008e04:	dfbffffe 	.word	0xdfbffffe

08008e08 <_fflush_r>:
 8008e08:	b538      	push	{r3, r4, r5, lr}
 8008e0a:	690b      	ldr	r3, [r1, #16]
 8008e0c:	4605      	mov	r5, r0
 8008e0e:	460c      	mov	r4, r1
 8008e10:	b913      	cbnz	r3, 8008e18 <_fflush_r+0x10>
 8008e12:	2500      	movs	r5, #0
 8008e14:	4628      	mov	r0, r5
 8008e16:	bd38      	pop	{r3, r4, r5, pc}
 8008e18:	b118      	cbz	r0, 8008e22 <_fflush_r+0x1a>
 8008e1a:	6a03      	ldr	r3, [r0, #32]
 8008e1c:	b90b      	cbnz	r3, 8008e22 <_fflush_r+0x1a>
 8008e1e:	f7ff fc8f 	bl	8008740 <__sinit>
 8008e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d0f3      	beq.n	8008e12 <_fflush_r+0xa>
 8008e2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008e2c:	07d0      	lsls	r0, r2, #31
 8008e2e:	d404      	bmi.n	8008e3a <_fflush_r+0x32>
 8008e30:	0599      	lsls	r1, r3, #22
 8008e32:	d402      	bmi.n	8008e3a <_fflush_r+0x32>
 8008e34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e36:	f7ff fe68 	bl	8008b0a <__retarget_lock_acquire_recursive>
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	4621      	mov	r1, r4
 8008e3e:	f7ff ff5f 	bl	8008d00 <__sflush_r>
 8008e42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e44:	07da      	lsls	r2, r3, #31
 8008e46:	4605      	mov	r5, r0
 8008e48:	d4e4      	bmi.n	8008e14 <_fflush_r+0xc>
 8008e4a:	89a3      	ldrh	r3, [r4, #12]
 8008e4c:	059b      	lsls	r3, r3, #22
 8008e4e:	d4e1      	bmi.n	8008e14 <_fflush_r+0xc>
 8008e50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e52:	f7ff fe5b 	bl	8008b0c <__retarget_lock_release_recursive>
 8008e56:	e7dd      	b.n	8008e14 <_fflush_r+0xc>

08008e58 <__swhatbuf_r>:
 8008e58:	b570      	push	{r4, r5, r6, lr}
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e60:	2900      	cmp	r1, #0
 8008e62:	b096      	sub	sp, #88	@ 0x58
 8008e64:	4615      	mov	r5, r2
 8008e66:	461e      	mov	r6, r3
 8008e68:	da0d      	bge.n	8008e86 <__swhatbuf_r+0x2e>
 8008e6a:	89a3      	ldrh	r3, [r4, #12]
 8008e6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e70:	f04f 0100 	mov.w	r1, #0
 8008e74:	bf14      	ite	ne
 8008e76:	2340      	movne	r3, #64	@ 0x40
 8008e78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	6031      	str	r1, [r6, #0]
 8008e80:	602b      	str	r3, [r5, #0]
 8008e82:	b016      	add	sp, #88	@ 0x58
 8008e84:	bd70      	pop	{r4, r5, r6, pc}
 8008e86:	466a      	mov	r2, sp
 8008e88:	f000 f848 	bl	8008f1c <_fstat_r>
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	dbec      	blt.n	8008e6a <__swhatbuf_r+0x12>
 8008e90:	9901      	ldr	r1, [sp, #4]
 8008e92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e9a:	4259      	negs	r1, r3
 8008e9c:	4159      	adcs	r1, r3
 8008e9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ea2:	e7eb      	b.n	8008e7c <__swhatbuf_r+0x24>

08008ea4 <__smakebuf_r>:
 8008ea4:	898b      	ldrh	r3, [r1, #12]
 8008ea6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ea8:	079d      	lsls	r5, r3, #30
 8008eaa:	4606      	mov	r6, r0
 8008eac:	460c      	mov	r4, r1
 8008eae:	d507      	bpl.n	8008ec0 <__smakebuf_r+0x1c>
 8008eb0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008eb4:	6023      	str	r3, [r4, #0]
 8008eb6:	6123      	str	r3, [r4, #16]
 8008eb8:	2301      	movs	r3, #1
 8008eba:	6163      	str	r3, [r4, #20]
 8008ebc:	b003      	add	sp, #12
 8008ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ec0:	ab01      	add	r3, sp, #4
 8008ec2:	466a      	mov	r2, sp
 8008ec4:	f7ff ffc8 	bl	8008e58 <__swhatbuf_r>
 8008ec8:	9f00      	ldr	r7, [sp, #0]
 8008eca:	4605      	mov	r5, r0
 8008ecc:	4639      	mov	r1, r7
 8008ece:	4630      	mov	r0, r6
 8008ed0:	f7ff fe8a 	bl	8008be8 <_malloc_r>
 8008ed4:	b948      	cbnz	r0, 8008eea <__smakebuf_r+0x46>
 8008ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eda:	059a      	lsls	r2, r3, #22
 8008edc:	d4ee      	bmi.n	8008ebc <__smakebuf_r+0x18>
 8008ede:	f023 0303 	bic.w	r3, r3, #3
 8008ee2:	f043 0302 	orr.w	r3, r3, #2
 8008ee6:	81a3      	strh	r3, [r4, #12]
 8008ee8:	e7e2      	b.n	8008eb0 <__smakebuf_r+0xc>
 8008eea:	89a3      	ldrh	r3, [r4, #12]
 8008eec:	6020      	str	r0, [r4, #0]
 8008eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ef2:	81a3      	strh	r3, [r4, #12]
 8008ef4:	9b01      	ldr	r3, [sp, #4]
 8008ef6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008efa:	b15b      	cbz	r3, 8008f14 <__smakebuf_r+0x70>
 8008efc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f00:	4630      	mov	r0, r6
 8008f02:	f000 f81d 	bl	8008f40 <_isatty_r>
 8008f06:	b128      	cbz	r0, 8008f14 <__smakebuf_r+0x70>
 8008f08:	89a3      	ldrh	r3, [r4, #12]
 8008f0a:	f023 0303 	bic.w	r3, r3, #3
 8008f0e:	f043 0301 	orr.w	r3, r3, #1
 8008f12:	81a3      	strh	r3, [r4, #12]
 8008f14:	89a3      	ldrh	r3, [r4, #12]
 8008f16:	431d      	orrs	r5, r3
 8008f18:	81a5      	strh	r5, [r4, #12]
 8008f1a:	e7cf      	b.n	8008ebc <__smakebuf_r+0x18>

08008f1c <_fstat_r>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	4d07      	ldr	r5, [pc, #28]	@ (8008f3c <_fstat_r+0x20>)
 8008f20:	2300      	movs	r3, #0
 8008f22:	4604      	mov	r4, r0
 8008f24:	4608      	mov	r0, r1
 8008f26:	4611      	mov	r1, r2
 8008f28:	602b      	str	r3, [r5, #0]
 8008f2a:	f7ff f9fa 	bl	8008322 <_fstat>
 8008f2e:	1c43      	adds	r3, r0, #1
 8008f30:	d102      	bne.n	8008f38 <_fstat_r+0x1c>
 8008f32:	682b      	ldr	r3, [r5, #0]
 8008f34:	b103      	cbz	r3, 8008f38 <_fstat_r+0x1c>
 8008f36:	6023      	str	r3, [r4, #0]
 8008f38:	bd38      	pop	{r3, r4, r5, pc}
 8008f3a:	bf00      	nop
 8008f3c:	200001b8 	.word	0x200001b8

08008f40 <_isatty_r>:
 8008f40:	b538      	push	{r3, r4, r5, lr}
 8008f42:	4d06      	ldr	r5, [pc, #24]	@ (8008f5c <_isatty_r+0x1c>)
 8008f44:	2300      	movs	r3, #0
 8008f46:	4604      	mov	r4, r0
 8008f48:	4608      	mov	r0, r1
 8008f4a:	602b      	str	r3, [r5, #0]
 8008f4c:	f7ff f9f9 	bl	8008342 <_isatty>
 8008f50:	1c43      	adds	r3, r0, #1
 8008f52:	d102      	bne.n	8008f5a <_isatty_r+0x1a>
 8008f54:	682b      	ldr	r3, [r5, #0]
 8008f56:	b103      	cbz	r3, 8008f5a <_isatty_r+0x1a>
 8008f58:	6023      	str	r3, [r4, #0]
 8008f5a:	bd38      	pop	{r3, r4, r5, pc}
 8008f5c:	200001b8 	.word	0x200001b8

08008f60 <_sbrk_r>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	4d06      	ldr	r5, [pc, #24]	@ (8008f7c <_sbrk_r+0x1c>)
 8008f64:	2300      	movs	r3, #0
 8008f66:	4604      	mov	r4, r0
 8008f68:	4608      	mov	r0, r1
 8008f6a:	602b      	str	r3, [r5, #0]
 8008f6c:	f7ff fa02 	bl	8008374 <_sbrk>
 8008f70:	1c43      	adds	r3, r0, #1
 8008f72:	d102      	bne.n	8008f7a <_sbrk_r+0x1a>
 8008f74:	682b      	ldr	r3, [r5, #0]
 8008f76:	b103      	cbz	r3, 8008f7a <_sbrk_r+0x1a>
 8008f78:	6023      	str	r3, [r4, #0]
 8008f7a:	bd38      	pop	{r3, r4, r5, pc}
 8008f7c:	200001b8 	.word	0x200001b8

08008f80 <_init>:
 8008f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f82:	bf00      	nop
 8008f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f86:	bc08      	pop	{r3}
 8008f88:	469e      	mov	lr, r3
 8008f8a:	4770      	bx	lr

08008f8c <_fini>:
 8008f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8e:	bf00      	nop
 8008f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f92:	bc08      	pop	{r3}
 8008f94:	469e      	mov	lr, r3
 8008f96:	4770      	bx	lr
