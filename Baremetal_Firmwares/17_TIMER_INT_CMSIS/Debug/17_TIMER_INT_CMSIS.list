
17_TIMER_INT_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dd4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000f98  08000f98  00001f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fb0  08000fb0  0000205c  2**0
                  CONTENTS
  4 .ARM          00000000  08000fb0  08000fb0  0000205c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fb0  08000fb0  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fb0  08000fb0  00001fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000fb4  08000fb4  00001fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08000fb8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001014  0000205c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001014  000021c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001889  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000068a  00000000  00000000  00003915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000198  00000000  00000000  00003fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000115  00000000  00000000  00004138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8eb  00000000  00000000  0000424d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000022e8  00000000  00000000  0001eb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009141e  00000000  00000000  00020e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b223e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b38  00000000  00000000  000b2284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000b2dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000f80 	.word	0x08000f80

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000060 	.word	0x20000060
 8000200:	08000f80 	.word	0x08000f80

08000204 <__io_putchar>:
#define LED     PIN5

char data;

int __io_putchar(int ch)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	UART2_Transmit(ch);
 800020c:	6878      	ldr	r0, [r7, #4]
 800020e:	f000 f933 	bl	8000478 <UART2_Transmit>
	return ch;
 8000212:	687b      	ldr	r3, [r7, #4]
}
 8000214:	4618      	mov	r0, r3
 8000216:	3708      	adds	r7, #8
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}

0800021c <main>:

int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAEN;
 8000220:	4b0b      	ldr	r3, [pc, #44]	@ (8000250 <main+0x34>)
 8000222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000224:	4a0a      	ldr	r2, [pc, #40]	@ (8000250 <main+0x34>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |= (1U << 10);
 800022c:	4b09      	ldr	r3, [pc, #36]	@ (8000254 <main+0x38>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a08      	ldr	r2, [pc, #32]	@ (8000254 <main+0x38>)
 8000232:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000236:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U << 11);
 8000238:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <main+0x38>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a05      	ldr	r2, [pc, #20]	@ (8000254 <main+0x38>)
 800023e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000242:	6013      	str	r3, [r2, #0]
	UART2_Init();
 8000244:	f000 f930 	bl	80004a8 <UART2_Init>
	tim2_1Hz_interrupt_init();
 8000248:	f000 f8e8 	bl	800041c <tim2_1Hz_interrupt_init>

	while(1)
 800024c:	bf00      	nop
 800024e:	e7fd      	b.n	800024c <main+0x30>
 8000250:	40023800 	.word	0x40023800
 8000254:	40020000 	.word	0x40020000

08000258 <tim2_callback>:

	}
}

static void tim2_callback(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= LED;
 800025c:	4b05      	ldr	r3, [pc, #20]	@ (8000274 <tim2_callback+0x1c>)
 800025e:	695b      	ldr	r3, [r3, #20]
 8000260:	4a04      	ldr	r2, [pc, #16]	@ (8000274 <tim2_callback+0x1c>)
 8000262:	f083 0320 	eor.w	r3, r3, #32
 8000266:	6153      	str	r3, [r2, #20]
	printf("TIM2 interrupt 1 sec\r\n");
 8000268:	4803      	ldr	r0, [pc, #12]	@ (8000278 <tim2_callback+0x20>)
 800026a:	f000 faf5 	bl	8000858 <puts>
}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40020000 	.word	0x40020000
 8000278:	08000f98 	.word	0x08000f98

0800027c <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	/*clear the interuupt flag*/
	TIM2->SR &= ~(SR_UIF);
 8000280:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000284:	691b      	ldr	r3, [r3, #16]
 8000286:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800028a:	f023 0301 	bic.w	r3, r3, #1
 800028e:	6113      	str	r3, [r2, #16]
	tim2_callback();
 8000290:	f7ff ffe2 	bl	8000258 <tim2_callback>
}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}

08000298 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b086      	sub	sp, #24
 800029c:	af00      	add	r7, sp, #0
 800029e:	60f8      	str	r0, [r7, #12]
 80002a0:	60b9      	str	r1, [r7, #8]
 80002a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]
 80002a8:	e00a      	b.n	80002c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80002aa:	f3af 8000 	nop.w
 80002ae:	4601      	mov	r1, r0
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	1c5a      	adds	r2, r3, #1
 80002b4:	60ba      	str	r2, [r7, #8]
 80002b6:	b2ca      	uxtb	r2, r1
 80002b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	3301      	adds	r3, #1
 80002be:	617b      	str	r3, [r7, #20]
 80002c0:	697a      	ldr	r2, [r7, #20]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	dbf0      	blt.n	80002aa <_read+0x12>
  }

  return len;
 80002c8:	687b      	ldr	r3, [r7, #4]
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	3718      	adds	r7, #24
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}

080002d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002d2:	b580      	push	{r7, lr}
 80002d4:	b086      	sub	sp, #24
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	60f8      	str	r0, [r7, #12]
 80002da:	60b9      	str	r1, [r7, #8]
 80002dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002de:	2300      	movs	r3, #0
 80002e0:	617b      	str	r3, [r7, #20]
 80002e2:	e009      	b.n	80002f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	1c5a      	adds	r2, r3, #1
 80002e8:	60ba      	str	r2, [r7, #8]
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	4618      	mov	r0, r3
 80002ee:	f7ff ff89 	bl	8000204 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	3301      	adds	r3, #1
 80002f6:	617b      	str	r3, [r7, #20]
 80002f8:	697a      	ldr	r2, [r7, #20]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	dbf1      	blt.n	80002e4 <_write+0x12>
  }
  return len;
 8000300:	687b      	ldr	r3, [r7, #4]
}
 8000302:	4618      	mov	r0, r3
 8000304:	3718      	adds	r7, #24
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}

0800030a <_close>:

int _close(int file)
{
 800030a:	b480      	push	{r7}
 800030c:	b083      	sub	sp, #12
 800030e:	af00      	add	r7, sp, #0
 8000310:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000312:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000316:	4618      	mov	r0, r3
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr

08000322 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000322:	b480      	push	{r7}
 8000324:	b083      	sub	sp, #12
 8000326:	af00      	add	r7, sp, #0
 8000328:	6078      	str	r0, [r7, #4]
 800032a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000332:	605a      	str	r2, [r3, #4]
  return 0;
 8000334:	2300      	movs	r3, #0
}
 8000336:	4618      	mov	r0, r3
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr

08000342 <_isatty>:

int _isatty(int file)
{
 8000342:	b480      	push	{r7}
 8000344:	b083      	sub	sp, #12
 8000346:	af00      	add	r7, sp, #0
 8000348:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800034a:	2301      	movs	r3, #1
}
 800034c:	4618      	mov	r0, r3
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
 800035e:	60f8      	str	r0, [r7, #12]
 8000360:	60b9      	str	r1, [r7, #8]
 8000362:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000364:	2300      	movs	r3, #0
}
 8000366:	4618      	mov	r0, r3
 8000368:	3714      	adds	r7, #20
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
	...

08000374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800037c:	4a14      	ldr	r2, [pc, #80]	@ (80003d0 <_sbrk+0x5c>)
 800037e:	4b15      	ldr	r3, [pc, #84]	@ (80003d4 <_sbrk+0x60>)
 8000380:	1ad3      	subs	r3, r2, r3
 8000382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000388:	4b13      	ldr	r3, [pc, #76]	@ (80003d8 <_sbrk+0x64>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d102      	bne.n	8000396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000390:	4b11      	ldr	r3, [pc, #68]	@ (80003d8 <_sbrk+0x64>)
 8000392:	4a12      	ldr	r2, [pc, #72]	@ (80003dc <_sbrk+0x68>)
 8000394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000396:	4b10      	ldr	r3, [pc, #64]	@ (80003d8 <_sbrk+0x64>)
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4413      	add	r3, r2
 800039e:	693a      	ldr	r2, [r7, #16]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	d207      	bcs.n	80003b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003a4:	f000 fb86 	bl	8000ab4 <__errno>
 80003a8:	4603      	mov	r3, r0
 80003aa:	220c      	movs	r2, #12
 80003ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003ae:	f04f 33ff 	mov.w	r3, #4294967295
 80003b2:	e009      	b.n	80003c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003b4:	4b08      	ldr	r3, [pc, #32]	@ (80003d8 <_sbrk+0x64>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003ba:	4b07      	ldr	r3, [pc, #28]	@ (80003d8 <_sbrk+0x64>)
 80003bc:	681a      	ldr	r2, [r3, #0]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4413      	add	r3, r2
 80003c2:	4a05      	ldr	r2, [pc, #20]	@ (80003d8 <_sbrk+0x64>)
 80003c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003c6:	68fb      	ldr	r3, [r7, #12]
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	3718      	adds	r7, #24
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20020000 	.word	0x20020000
 80003d4:	00000400 	.word	0x00000400
 80003d8:	20000078 	.word	0x20000078
 80003dc:	200001c8 	.word	0x200001c8

080003e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	4603      	mov	r3, r0
 80003e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	db0b      	blt.n	800040a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	f003 021f 	and.w	r2, r3, #31
 80003f8:	4907      	ldr	r1, [pc, #28]	@ (8000418 <__NVIC_EnableIRQ+0x38>)
 80003fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fe:	095b      	lsrs	r3, r3, #5
 8000400:	2001      	movs	r0, #1
 8000402:	fa00 f202 	lsl.w	r2, r0, r2
 8000406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800040a:	bf00      	nop
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	e000e100 	.word	0xe000e100

0800041c <tim2_1Hz_interrupt_init>:
	/*enable timer*/
	TIM2->CR1 |= CR1_CEN;
}

void tim2_1Hz_interrupt_init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	/* enabling apb1 clock access for timer 2*/
	RCC->APB1ENR |= TIM2EN;
 8000420:	4b14      	ldr	r3, [pc, #80]	@ (8000474 <tim2_1Hz_interrupt_init+0x58>)
 8000422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000424:	4a13      	ldr	r2, [pc, #76]	@ (8000474 <tim2_1Hz_interrupt_init+0x58>)
 8000426:	f043 0301 	orr.w	r3, r3, #1
 800042a:	6413      	str	r3, [r2, #64]	@ 0x40
	/* set prescaler value*/
	TIM2->PSC = 16000 - 1;    //16000000 / 16000 = 1000
 800042c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000430:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000434:	629a      	str	r2, [r3, #40]	@ 0x28
	/*set auto reload value*/
	TIM2->ARR = 1000 - 1;    // 1000 / 1000 = 1
 8000436:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800043a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800043e:	62da      	str	r2, [r3, #44]	@ 0x2c
	/*clear counter*/
	TIM2->CNT = 0;
 8000440:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000444:	2200      	movs	r2, #0
 8000446:	625a      	str	r2, [r3, #36]	@ 0x24
	/*enable timer*/
	TIM2->CR1 |= CR1_CEN;
 8000448:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000452:	f043 0301 	orr.w	r3, r3, #1
 8000456:	6013      	str	r3, [r2, #0]

	/*enable tim2 interrupt */
	TIM2->DIER |= DIER_UIE;
 8000458:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800045c:	68db      	ldr	r3, [r3, #12]
 800045e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000462:	f043 0301 	orr.w	r3, r3, #1
 8000466:	60d3      	str	r3, [r2, #12]
	/*enable tim2 interuupt in NVIC*/
	NVIC_EnableIRQ(TIM2_IRQn);
 8000468:	201c      	movs	r0, #28
 800046a:	f7ff ffb9 	bl	80003e0 <__NVIC_EnableIRQ>
}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40023800 	.word	0x40023800

08000478 <UART2_Transmit>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate);
void UART2_Transmit(int ch);


void UART2_Transmit(int ch)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & SR_TXE)){}
 8000480:	bf00      	nop
 8000482:	4b08      	ldr	r3, [pc, #32]	@ (80004a4 <UART2_Transmit+0x2c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800048a:	2b00      	cmp	r3, #0
 800048c:	d0f9      	beq.n	8000482 <UART2_Transmit+0xa>
	USART2->DR = (ch & 0xFF);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4a04      	ldr	r2, [pc, #16]	@ (80004a4 <UART2_Transmit+0x2c>)
 8000492:	b2db      	uxtb	r3, r3
 8000494:	6053      	str	r3, [r2, #4]
}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40004400 	.word	0x40004400

080004a8 <UART2_Init>:

void UART2_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAEN;    //Enabling AHB1 clock for PORT A, because UART 2 uses PA2 - TX and PA3 - RX
 80004ac:	4b32      	ldr	r3, [pc, #200]	@ (8000578 <UART2_Init+0xd0>)
 80004ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004b0:	4a31      	ldr	r2, [pc, #196]	@ (8000578 <UART2_Init+0xd0>)
 80004b2:	f043 0301 	orr.w	r3, r3, #1
 80004b6:	6313      	str	r3, [r2, #48]	@ 0x30

	/* setting PA2 - TX as alternate function mode by using set 1 bit 4 and 5 as configuration 1:0*/
	GPIOA->MODER &= ~(1U << 4);
 80004b8:	4b30      	ldr	r3, [pc, #192]	@ (800057c <UART2_Init+0xd4>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a2f      	ldr	r2, [pc, #188]	@ (800057c <UART2_Init+0xd4>)
 80004be:	f023 0310 	bic.w	r3, r3, #16
 80004c2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 5);
 80004c4:	4b2d      	ldr	r3, [pc, #180]	@ (800057c <UART2_Init+0xd4>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a2c      	ldr	r2, [pc, #176]	@ (800057c <UART2_Init+0xd4>)
 80004ca:	f043 0320 	orr.w	r3, r3, #32
 80004ce:	6013      	str	r3, [r2, #0]

	/* setting PA3 - RX as alternate function mode by using set as configuration 1:0*/
	GPIOA->MODER &= ~(1U << 6);
 80004d0:	4b2a      	ldr	r3, [pc, #168]	@ (800057c <UART2_Init+0xd4>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a29      	ldr	r2, [pc, #164]	@ (800057c <UART2_Init+0xd4>)
 80004d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004da:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 7);
 80004dc:	4b27      	ldr	r3, [pc, #156]	@ (800057c <UART2_Init+0xd4>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a26      	ldr	r2, [pc, #152]	@ (800057c <UART2_Init+0xd4>)
 80004e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004e6:	6013      	str	r3, [r2, #0]
	 * PA2 is a AF7 in alternate function mapping register.
	 * PA2 comes under alternate function low register because first 8 pins on any port it comes under AFRL, next 8 pins comes under the AFRH register
	 * for enabling AF7 we need to set bit formation as 0111 to the particular alternate function pin register.
	 * Alternate function register, each pin have 4 bits.
	 */
	GPIOA->AFR[0] |= (1U << 8);   //1
 80004e8:	4b24      	ldr	r3, [pc, #144]	@ (800057c <UART2_Init+0xd4>)
 80004ea:	6a1b      	ldr	r3, [r3, #32]
 80004ec:	4a23      	ldr	r2, [pc, #140]	@ (800057c <UART2_Init+0xd4>)
 80004ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004f2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 9);   //1
 80004f4:	4b21      	ldr	r3, [pc, #132]	@ (800057c <UART2_Init+0xd4>)
 80004f6:	6a1b      	ldr	r3, [r3, #32]
 80004f8:	4a20      	ldr	r2, [pc, #128]	@ (800057c <UART2_Init+0xd4>)
 80004fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004fe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 10);  //1
 8000500:	4b1e      	ldr	r3, [pc, #120]	@ (800057c <UART2_Init+0xd4>)
 8000502:	6a1b      	ldr	r3, [r3, #32]
 8000504:	4a1d      	ldr	r2, [pc, #116]	@ (800057c <UART2_Init+0xd4>)
 8000506:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800050a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 11);  //0
 800050c:	4b1b      	ldr	r3, [pc, #108]	@ (800057c <UART2_Init+0xd4>)
 800050e:	6a1b      	ldr	r3, [r3, #32]
 8000510:	4a1a      	ldr	r2, [pc, #104]	@ (800057c <UART2_Init+0xd4>)
 8000512:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000516:	6213      	str	r3, [r2, #32]

	/* Setting PA3 alternate function type*/
	GPIOA->AFR[0] |= (1U << 12);   //1
 8000518:	4b18      	ldr	r3, [pc, #96]	@ (800057c <UART2_Init+0xd4>)
 800051a:	6a1b      	ldr	r3, [r3, #32]
 800051c:	4a17      	ldr	r2, [pc, #92]	@ (800057c <UART2_Init+0xd4>)
 800051e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000522:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 13);   //1
 8000524:	4b15      	ldr	r3, [pc, #84]	@ (800057c <UART2_Init+0xd4>)
 8000526:	6a1b      	ldr	r3, [r3, #32]
 8000528:	4a14      	ldr	r2, [pc, #80]	@ (800057c <UART2_Init+0xd4>)
 800052a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800052e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 14);  //1
 8000530:	4b12      	ldr	r3, [pc, #72]	@ (800057c <UART2_Init+0xd4>)
 8000532:	6a1b      	ldr	r3, [r3, #32]
 8000534:	4a11      	ldr	r2, [pc, #68]	@ (800057c <UART2_Init+0xd4>)
 8000536:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800053a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 15);  //0
 800053c:	4b0f      	ldr	r3, [pc, #60]	@ (800057c <UART2_Init+0xd4>)
 800053e:	6a1b      	ldr	r3, [r3, #32]
 8000540:	4a0e      	ldr	r2, [pc, #56]	@ (800057c <UART2_Init+0xd4>)
 8000542:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000546:	6213      	str	r3, [r2, #32]

	RCC->APB1ENR |= UART2EN;    //Enabling APB1 clock for UART2
 8000548:	4b0b      	ldr	r3, [pc, #44]	@ (8000578 <UART2_Init+0xd0>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800054c:	4a0a      	ldr	r2, [pc, #40]	@ (8000578 <UART2_Init+0xd0>)
 800054e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000552:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure baud rate*/
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000554:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000558:	4909      	ldr	r1, [pc, #36]	@ (8000580 <UART2_Init+0xd8>)
 800055a:	480a      	ldr	r0, [pc, #40]	@ (8000584 <UART2_Init+0xdc>)
 800055c:	f000 f814 	bl	8000588 <uart_set_baudrate>

	/*configure the transfer direction like rx or tx*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000560:	4b08      	ldr	r3, [pc, #32]	@ (8000584 <UART2_Init+0xdc>)
 8000562:	220c      	movs	r2, #12
 8000564:	60da      	str	r2, [r3, #12]

	/*enabling the uart module*/
	USART2->CR1 |= CR1_UE;
 8000566:	4b07      	ldr	r3, [pc, #28]	@ (8000584 <UART2_Init+0xdc>)
 8000568:	68db      	ldr	r3, [r3, #12]
 800056a:	4a06      	ldr	r2, [pc, #24]	@ (8000584 <UART2_Init+0xdc>)
 800056c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000570:	60d3      	str	r3, [r2, #12]
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40023800 	.word	0x40023800
 800057c:	40020000 	.word	0x40020000
 8000580:	00f42400 	.word	0x00f42400
 8000584:	40004400 	.word	0x40004400

08000588 <uart_set_baudrate>:
	while(!(USART2->SR & SR_RXNE)){}
	return USART2->DR;
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 8000594:	6879      	ldr	r1, [r7, #4]
 8000596:	68b8      	ldr	r0, [r7, #8]
 8000598:	f000 f808 	bl	80005ac <compute_uart_bd>
 800059c:	4603      	mov	r3, r0
 800059e:	461a      	mov	r2, r3
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	609a      	str	r2, [r3, #8]
}
 80005a4:	bf00      	nop
 80005a6:	3710      	adds	r7, #16
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <compute_uart_bd>:


static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	085a      	lsrs	r2, r3, #1
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	441a      	add	r2, r3
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c4:	b29b      	uxth	r3, r3
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <Reset_Handler>:
 80005d4:	480d      	ldr	r0, [pc, #52]	@ (800060c <LoopForever+0x2>)
 80005d6:	4685      	mov	sp, r0
 80005d8:	f3af 8000 	nop.w
 80005dc:	480c      	ldr	r0, [pc, #48]	@ (8000610 <LoopForever+0x6>)
 80005de:	490d      	ldr	r1, [pc, #52]	@ (8000614 <LoopForever+0xa>)
 80005e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000618 <LoopForever+0xe>)
 80005e2:	2300      	movs	r3, #0
 80005e4:	e002      	b.n	80005ec <LoopCopyDataInit>

080005e6 <CopyDataInit>:
 80005e6:	58d4      	ldr	r4, [r2, r3]
 80005e8:	50c4      	str	r4, [r0, r3]
 80005ea:	3304      	adds	r3, #4

080005ec <LoopCopyDataInit>:
 80005ec:	18c4      	adds	r4, r0, r3
 80005ee:	428c      	cmp	r4, r1
 80005f0:	d3f9      	bcc.n	80005e6 <CopyDataInit>
 80005f2:	4a0a      	ldr	r2, [pc, #40]	@ (800061c <LoopForever+0x12>)
 80005f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000620 <LoopForever+0x16>)
 80005f6:	2300      	movs	r3, #0
 80005f8:	e001      	b.n	80005fe <LoopFillZerobss>

080005fa <FillZerobss>:
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	3204      	adds	r2, #4

080005fe <LoopFillZerobss>:
 80005fe:	42a2      	cmp	r2, r4
 8000600:	d3fb      	bcc.n	80005fa <FillZerobss>
 8000602:	f000 fa5d 	bl	8000ac0 <__libc_init_array>
 8000606:	f7ff fe09 	bl	800021c <main>

0800060a <LoopForever>:
 800060a:	e7fe      	b.n	800060a <LoopForever>
 800060c:	20020000 	.word	0x20020000
 8000610:	20000000 	.word	0x20000000
 8000614:	2000005c 	.word	0x2000005c
 8000618:	08000fb8 	.word	0x08000fb8
 800061c:	2000005c 	.word	0x2000005c
 8000620:	200001c8 	.word	0x200001c8

08000624 <ADC_IRQHandler>:
 8000624:	e7fe      	b.n	8000624 <ADC_IRQHandler>
	...

08000628 <std>:
 8000628:	2300      	movs	r3, #0
 800062a:	b510      	push	{r4, lr}
 800062c:	4604      	mov	r4, r0
 800062e:	e9c0 3300 	strd	r3, r3, [r0]
 8000632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000636:	6083      	str	r3, [r0, #8]
 8000638:	8181      	strh	r1, [r0, #12]
 800063a:	6643      	str	r3, [r0, #100]	@ 0x64
 800063c:	81c2      	strh	r2, [r0, #14]
 800063e:	6183      	str	r3, [r0, #24]
 8000640:	4619      	mov	r1, r3
 8000642:	2208      	movs	r2, #8
 8000644:	305c      	adds	r0, #92	@ 0x5c
 8000646:	f000 f9e7 	bl	8000a18 <memset>
 800064a:	4b0d      	ldr	r3, [pc, #52]	@ (8000680 <std+0x58>)
 800064c:	6263      	str	r3, [r4, #36]	@ 0x24
 800064e:	4b0d      	ldr	r3, [pc, #52]	@ (8000684 <std+0x5c>)
 8000650:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000652:	4b0d      	ldr	r3, [pc, #52]	@ (8000688 <std+0x60>)
 8000654:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <std+0x64>)
 8000658:	6323      	str	r3, [r4, #48]	@ 0x30
 800065a:	4b0d      	ldr	r3, [pc, #52]	@ (8000690 <std+0x68>)
 800065c:	6224      	str	r4, [r4, #32]
 800065e:	429c      	cmp	r4, r3
 8000660:	d006      	beq.n	8000670 <std+0x48>
 8000662:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000666:	4294      	cmp	r4, r2
 8000668:	d002      	beq.n	8000670 <std+0x48>
 800066a:	33d0      	adds	r3, #208	@ 0xd0
 800066c:	429c      	cmp	r4, r3
 800066e:	d105      	bne.n	800067c <std+0x54>
 8000670:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000678:	f000 ba46 	b.w	8000b08 <__retarget_lock_init_recursive>
 800067c:	bd10      	pop	{r4, pc}
 800067e:	bf00      	nop
 8000680:	08000869 	.word	0x08000869
 8000684:	0800088b 	.word	0x0800088b
 8000688:	080008c3 	.word	0x080008c3
 800068c:	080008e7 	.word	0x080008e7
 8000690:	2000007c 	.word	0x2000007c

08000694 <stdio_exit_handler>:
 8000694:	4a02      	ldr	r2, [pc, #8]	@ (80006a0 <stdio_exit_handler+0xc>)
 8000696:	4903      	ldr	r1, [pc, #12]	@ (80006a4 <stdio_exit_handler+0x10>)
 8000698:	4803      	ldr	r0, [pc, #12]	@ (80006a8 <stdio_exit_handler+0x14>)
 800069a:	f000 b869 	b.w	8000770 <_fwalk_sglue>
 800069e:	bf00      	nop
 80006a0:	20000000 	.word	0x20000000
 80006a4:	08000e09 	.word	0x08000e09
 80006a8:	20000010 	.word	0x20000010

080006ac <cleanup_stdio>:
 80006ac:	6841      	ldr	r1, [r0, #4]
 80006ae:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <cleanup_stdio+0x34>)
 80006b0:	4299      	cmp	r1, r3
 80006b2:	b510      	push	{r4, lr}
 80006b4:	4604      	mov	r4, r0
 80006b6:	d001      	beq.n	80006bc <cleanup_stdio+0x10>
 80006b8:	f000 fba6 	bl	8000e08 <_fflush_r>
 80006bc:	68a1      	ldr	r1, [r4, #8]
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <cleanup_stdio+0x38>)
 80006c0:	4299      	cmp	r1, r3
 80006c2:	d002      	beq.n	80006ca <cleanup_stdio+0x1e>
 80006c4:	4620      	mov	r0, r4
 80006c6:	f000 fb9f 	bl	8000e08 <_fflush_r>
 80006ca:	68e1      	ldr	r1, [r4, #12]
 80006cc:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <cleanup_stdio+0x3c>)
 80006ce:	4299      	cmp	r1, r3
 80006d0:	d004      	beq.n	80006dc <cleanup_stdio+0x30>
 80006d2:	4620      	mov	r0, r4
 80006d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006d8:	f000 bb96 	b.w	8000e08 <_fflush_r>
 80006dc:	bd10      	pop	{r4, pc}
 80006de:	bf00      	nop
 80006e0:	2000007c 	.word	0x2000007c
 80006e4:	200000e4 	.word	0x200000e4
 80006e8:	2000014c 	.word	0x2000014c

080006ec <global_stdio_init.part.0>:
 80006ec:	b510      	push	{r4, lr}
 80006ee:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <global_stdio_init.part.0+0x30>)
 80006f0:	4c0b      	ldr	r4, [pc, #44]	@ (8000720 <global_stdio_init.part.0+0x34>)
 80006f2:	4a0c      	ldr	r2, [pc, #48]	@ (8000724 <global_stdio_init.part.0+0x38>)
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	4620      	mov	r0, r4
 80006f8:	2200      	movs	r2, #0
 80006fa:	2104      	movs	r1, #4
 80006fc:	f7ff ff94 	bl	8000628 <std>
 8000700:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000704:	2201      	movs	r2, #1
 8000706:	2109      	movs	r1, #9
 8000708:	f7ff ff8e 	bl	8000628 <std>
 800070c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000710:	2202      	movs	r2, #2
 8000712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000716:	2112      	movs	r1, #18
 8000718:	f7ff bf86 	b.w	8000628 <std>
 800071c:	200001b4 	.word	0x200001b4
 8000720:	2000007c 	.word	0x2000007c
 8000724:	08000695 	.word	0x08000695

08000728 <__sfp_lock_acquire>:
 8000728:	4801      	ldr	r0, [pc, #4]	@ (8000730 <__sfp_lock_acquire+0x8>)
 800072a:	f000 b9ee 	b.w	8000b0a <__retarget_lock_acquire_recursive>
 800072e:	bf00      	nop
 8000730:	200001bd 	.word	0x200001bd

08000734 <__sfp_lock_release>:
 8000734:	4801      	ldr	r0, [pc, #4]	@ (800073c <__sfp_lock_release+0x8>)
 8000736:	f000 b9e9 	b.w	8000b0c <__retarget_lock_release_recursive>
 800073a:	bf00      	nop
 800073c:	200001bd 	.word	0x200001bd

08000740 <__sinit>:
 8000740:	b510      	push	{r4, lr}
 8000742:	4604      	mov	r4, r0
 8000744:	f7ff fff0 	bl	8000728 <__sfp_lock_acquire>
 8000748:	6a23      	ldr	r3, [r4, #32]
 800074a:	b11b      	cbz	r3, 8000754 <__sinit+0x14>
 800074c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000750:	f7ff bff0 	b.w	8000734 <__sfp_lock_release>
 8000754:	4b04      	ldr	r3, [pc, #16]	@ (8000768 <__sinit+0x28>)
 8000756:	6223      	str	r3, [r4, #32]
 8000758:	4b04      	ldr	r3, [pc, #16]	@ (800076c <__sinit+0x2c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1f5      	bne.n	800074c <__sinit+0xc>
 8000760:	f7ff ffc4 	bl	80006ec <global_stdio_init.part.0>
 8000764:	e7f2      	b.n	800074c <__sinit+0xc>
 8000766:	bf00      	nop
 8000768:	080006ad 	.word	0x080006ad
 800076c:	200001b4 	.word	0x200001b4

08000770 <_fwalk_sglue>:
 8000770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000774:	4607      	mov	r7, r0
 8000776:	4688      	mov	r8, r1
 8000778:	4614      	mov	r4, r2
 800077a:	2600      	movs	r6, #0
 800077c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000780:	f1b9 0901 	subs.w	r9, r9, #1
 8000784:	d505      	bpl.n	8000792 <_fwalk_sglue+0x22>
 8000786:	6824      	ldr	r4, [r4, #0]
 8000788:	2c00      	cmp	r4, #0
 800078a:	d1f7      	bne.n	800077c <_fwalk_sglue+0xc>
 800078c:	4630      	mov	r0, r6
 800078e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000792:	89ab      	ldrh	r3, [r5, #12]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d907      	bls.n	80007a8 <_fwalk_sglue+0x38>
 8000798:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800079c:	3301      	adds	r3, #1
 800079e:	d003      	beq.n	80007a8 <_fwalk_sglue+0x38>
 80007a0:	4629      	mov	r1, r5
 80007a2:	4638      	mov	r0, r7
 80007a4:	47c0      	blx	r8
 80007a6:	4306      	orrs	r6, r0
 80007a8:	3568      	adds	r5, #104	@ 0x68
 80007aa:	e7e9      	b.n	8000780 <_fwalk_sglue+0x10>

080007ac <_puts_r>:
 80007ac:	6a03      	ldr	r3, [r0, #32]
 80007ae:	b570      	push	{r4, r5, r6, lr}
 80007b0:	6884      	ldr	r4, [r0, #8]
 80007b2:	4605      	mov	r5, r0
 80007b4:	460e      	mov	r6, r1
 80007b6:	b90b      	cbnz	r3, 80007bc <_puts_r+0x10>
 80007b8:	f7ff ffc2 	bl	8000740 <__sinit>
 80007bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80007be:	07db      	lsls	r3, r3, #31
 80007c0:	d405      	bmi.n	80007ce <_puts_r+0x22>
 80007c2:	89a3      	ldrh	r3, [r4, #12]
 80007c4:	0598      	lsls	r0, r3, #22
 80007c6:	d402      	bmi.n	80007ce <_puts_r+0x22>
 80007c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007ca:	f000 f99e 	bl	8000b0a <__retarget_lock_acquire_recursive>
 80007ce:	89a3      	ldrh	r3, [r4, #12]
 80007d0:	0719      	lsls	r1, r3, #28
 80007d2:	d502      	bpl.n	80007da <_puts_r+0x2e>
 80007d4:	6923      	ldr	r3, [r4, #16]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d135      	bne.n	8000846 <_puts_r+0x9a>
 80007da:	4621      	mov	r1, r4
 80007dc:	4628      	mov	r0, r5
 80007de:	f000 f8c5 	bl	800096c <__swsetup_r>
 80007e2:	b380      	cbz	r0, 8000846 <_puts_r+0x9a>
 80007e4:	f04f 35ff 	mov.w	r5, #4294967295
 80007e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80007ea:	07da      	lsls	r2, r3, #31
 80007ec:	d405      	bmi.n	80007fa <_puts_r+0x4e>
 80007ee:	89a3      	ldrh	r3, [r4, #12]
 80007f0:	059b      	lsls	r3, r3, #22
 80007f2:	d402      	bmi.n	80007fa <_puts_r+0x4e>
 80007f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007f6:	f000 f989 	bl	8000b0c <__retarget_lock_release_recursive>
 80007fa:	4628      	mov	r0, r5
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	2b00      	cmp	r3, #0
 8000800:	da04      	bge.n	800080c <_puts_r+0x60>
 8000802:	69a2      	ldr	r2, [r4, #24]
 8000804:	429a      	cmp	r2, r3
 8000806:	dc17      	bgt.n	8000838 <_puts_r+0x8c>
 8000808:	290a      	cmp	r1, #10
 800080a:	d015      	beq.n	8000838 <_puts_r+0x8c>
 800080c:	6823      	ldr	r3, [r4, #0]
 800080e:	1c5a      	adds	r2, r3, #1
 8000810:	6022      	str	r2, [r4, #0]
 8000812:	7019      	strb	r1, [r3, #0]
 8000814:	68a3      	ldr	r3, [r4, #8]
 8000816:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800081a:	3b01      	subs	r3, #1
 800081c:	60a3      	str	r3, [r4, #8]
 800081e:	2900      	cmp	r1, #0
 8000820:	d1ed      	bne.n	80007fe <_puts_r+0x52>
 8000822:	2b00      	cmp	r3, #0
 8000824:	da11      	bge.n	800084a <_puts_r+0x9e>
 8000826:	4622      	mov	r2, r4
 8000828:	210a      	movs	r1, #10
 800082a:	4628      	mov	r0, r5
 800082c:	f000 f85f 	bl	80008ee <__swbuf_r>
 8000830:	3001      	adds	r0, #1
 8000832:	d0d7      	beq.n	80007e4 <_puts_r+0x38>
 8000834:	250a      	movs	r5, #10
 8000836:	e7d7      	b.n	80007e8 <_puts_r+0x3c>
 8000838:	4622      	mov	r2, r4
 800083a:	4628      	mov	r0, r5
 800083c:	f000 f857 	bl	80008ee <__swbuf_r>
 8000840:	3001      	adds	r0, #1
 8000842:	d1e7      	bne.n	8000814 <_puts_r+0x68>
 8000844:	e7ce      	b.n	80007e4 <_puts_r+0x38>
 8000846:	3e01      	subs	r6, #1
 8000848:	e7e4      	b.n	8000814 <_puts_r+0x68>
 800084a:	6823      	ldr	r3, [r4, #0]
 800084c:	1c5a      	adds	r2, r3, #1
 800084e:	6022      	str	r2, [r4, #0]
 8000850:	220a      	movs	r2, #10
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	e7ee      	b.n	8000834 <_puts_r+0x88>
	...

08000858 <puts>:
 8000858:	4b02      	ldr	r3, [pc, #8]	@ (8000864 <puts+0xc>)
 800085a:	4601      	mov	r1, r0
 800085c:	6818      	ldr	r0, [r3, #0]
 800085e:	f7ff bfa5 	b.w	80007ac <_puts_r>
 8000862:	bf00      	nop
 8000864:	2000000c 	.word	0x2000000c

08000868 <__sread>:
 8000868:	b510      	push	{r4, lr}
 800086a:	460c      	mov	r4, r1
 800086c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000870:	f000 f8fc 	bl	8000a6c <_read_r>
 8000874:	2800      	cmp	r0, #0
 8000876:	bfab      	itete	ge
 8000878:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800087a:	89a3      	ldrhlt	r3, [r4, #12]
 800087c:	181b      	addge	r3, r3, r0
 800087e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000882:	bfac      	ite	ge
 8000884:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000886:	81a3      	strhlt	r3, [r4, #12]
 8000888:	bd10      	pop	{r4, pc}

0800088a <__swrite>:
 800088a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800088e:	461f      	mov	r7, r3
 8000890:	898b      	ldrh	r3, [r1, #12]
 8000892:	05db      	lsls	r3, r3, #23
 8000894:	4605      	mov	r5, r0
 8000896:	460c      	mov	r4, r1
 8000898:	4616      	mov	r6, r2
 800089a:	d505      	bpl.n	80008a8 <__swrite+0x1e>
 800089c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008a0:	2302      	movs	r3, #2
 80008a2:	2200      	movs	r2, #0
 80008a4:	f000 f8d0 	bl	8000a48 <_lseek_r>
 80008a8:	89a3      	ldrh	r3, [r4, #12]
 80008aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008b2:	81a3      	strh	r3, [r4, #12]
 80008b4:	4632      	mov	r2, r6
 80008b6:	463b      	mov	r3, r7
 80008b8:	4628      	mov	r0, r5
 80008ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008be:	f000 b8e7 	b.w	8000a90 <_write_r>

080008c2 <__sseek>:
 80008c2:	b510      	push	{r4, lr}
 80008c4:	460c      	mov	r4, r1
 80008c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008ca:	f000 f8bd 	bl	8000a48 <_lseek_r>
 80008ce:	1c43      	adds	r3, r0, #1
 80008d0:	89a3      	ldrh	r3, [r4, #12]
 80008d2:	bf15      	itete	ne
 80008d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80008d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80008da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80008de:	81a3      	strheq	r3, [r4, #12]
 80008e0:	bf18      	it	ne
 80008e2:	81a3      	strhne	r3, [r4, #12]
 80008e4:	bd10      	pop	{r4, pc}

080008e6 <__sclose>:
 80008e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008ea:	f000 b89d 	b.w	8000a28 <_close_r>

080008ee <__swbuf_r>:
 80008ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008f0:	460e      	mov	r6, r1
 80008f2:	4614      	mov	r4, r2
 80008f4:	4605      	mov	r5, r0
 80008f6:	b118      	cbz	r0, 8000900 <__swbuf_r+0x12>
 80008f8:	6a03      	ldr	r3, [r0, #32]
 80008fa:	b90b      	cbnz	r3, 8000900 <__swbuf_r+0x12>
 80008fc:	f7ff ff20 	bl	8000740 <__sinit>
 8000900:	69a3      	ldr	r3, [r4, #24]
 8000902:	60a3      	str	r3, [r4, #8]
 8000904:	89a3      	ldrh	r3, [r4, #12]
 8000906:	071a      	lsls	r2, r3, #28
 8000908:	d501      	bpl.n	800090e <__swbuf_r+0x20>
 800090a:	6923      	ldr	r3, [r4, #16]
 800090c:	b943      	cbnz	r3, 8000920 <__swbuf_r+0x32>
 800090e:	4621      	mov	r1, r4
 8000910:	4628      	mov	r0, r5
 8000912:	f000 f82b 	bl	800096c <__swsetup_r>
 8000916:	b118      	cbz	r0, 8000920 <__swbuf_r+0x32>
 8000918:	f04f 37ff 	mov.w	r7, #4294967295
 800091c:	4638      	mov	r0, r7
 800091e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000920:	6823      	ldr	r3, [r4, #0]
 8000922:	6922      	ldr	r2, [r4, #16]
 8000924:	1a98      	subs	r0, r3, r2
 8000926:	6963      	ldr	r3, [r4, #20]
 8000928:	b2f6      	uxtb	r6, r6
 800092a:	4283      	cmp	r3, r0
 800092c:	4637      	mov	r7, r6
 800092e:	dc05      	bgt.n	800093c <__swbuf_r+0x4e>
 8000930:	4621      	mov	r1, r4
 8000932:	4628      	mov	r0, r5
 8000934:	f000 fa68 	bl	8000e08 <_fflush_r>
 8000938:	2800      	cmp	r0, #0
 800093a:	d1ed      	bne.n	8000918 <__swbuf_r+0x2a>
 800093c:	68a3      	ldr	r3, [r4, #8]
 800093e:	3b01      	subs	r3, #1
 8000940:	60a3      	str	r3, [r4, #8]
 8000942:	6823      	ldr	r3, [r4, #0]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	6022      	str	r2, [r4, #0]
 8000948:	701e      	strb	r6, [r3, #0]
 800094a:	6962      	ldr	r2, [r4, #20]
 800094c:	1c43      	adds	r3, r0, #1
 800094e:	429a      	cmp	r2, r3
 8000950:	d004      	beq.n	800095c <__swbuf_r+0x6e>
 8000952:	89a3      	ldrh	r3, [r4, #12]
 8000954:	07db      	lsls	r3, r3, #31
 8000956:	d5e1      	bpl.n	800091c <__swbuf_r+0x2e>
 8000958:	2e0a      	cmp	r6, #10
 800095a:	d1df      	bne.n	800091c <__swbuf_r+0x2e>
 800095c:	4621      	mov	r1, r4
 800095e:	4628      	mov	r0, r5
 8000960:	f000 fa52 	bl	8000e08 <_fflush_r>
 8000964:	2800      	cmp	r0, #0
 8000966:	d0d9      	beq.n	800091c <__swbuf_r+0x2e>
 8000968:	e7d6      	b.n	8000918 <__swbuf_r+0x2a>
	...

0800096c <__swsetup_r>:
 800096c:	b538      	push	{r3, r4, r5, lr}
 800096e:	4b29      	ldr	r3, [pc, #164]	@ (8000a14 <__swsetup_r+0xa8>)
 8000970:	4605      	mov	r5, r0
 8000972:	6818      	ldr	r0, [r3, #0]
 8000974:	460c      	mov	r4, r1
 8000976:	b118      	cbz	r0, 8000980 <__swsetup_r+0x14>
 8000978:	6a03      	ldr	r3, [r0, #32]
 800097a:	b90b      	cbnz	r3, 8000980 <__swsetup_r+0x14>
 800097c:	f7ff fee0 	bl	8000740 <__sinit>
 8000980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000984:	0719      	lsls	r1, r3, #28
 8000986:	d422      	bmi.n	80009ce <__swsetup_r+0x62>
 8000988:	06da      	lsls	r2, r3, #27
 800098a:	d407      	bmi.n	800099c <__swsetup_r+0x30>
 800098c:	2209      	movs	r2, #9
 800098e:	602a      	str	r2, [r5, #0]
 8000990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000994:	81a3      	strh	r3, [r4, #12]
 8000996:	f04f 30ff 	mov.w	r0, #4294967295
 800099a:	e033      	b.n	8000a04 <__swsetup_r+0x98>
 800099c:	0758      	lsls	r0, r3, #29
 800099e:	d512      	bpl.n	80009c6 <__swsetup_r+0x5a>
 80009a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80009a2:	b141      	cbz	r1, 80009b6 <__swsetup_r+0x4a>
 80009a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80009a8:	4299      	cmp	r1, r3
 80009aa:	d002      	beq.n	80009b2 <__swsetup_r+0x46>
 80009ac:	4628      	mov	r0, r5
 80009ae:	f000 f8af 	bl	8000b10 <_free_r>
 80009b2:	2300      	movs	r3, #0
 80009b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80009b6:	89a3      	ldrh	r3, [r4, #12]
 80009b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80009bc:	81a3      	strh	r3, [r4, #12]
 80009be:	2300      	movs	r3, #0
 80009c0:	6063      	str	r3, [r4, #4]
 80009c2:	6923      	ldr	r3, [r4, #16]
 80009c4:	6023      	str	r3, [r4, #0]
 80009c6:	89a3      	ldrh	r3, [r4, #12]
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	81a3      	strh	r3, [r4, #12]
 80009ce:	6923      	ldr	r3, [r4, #16]
 80009d0:	b94b      	cbnz	r3, 80009e6 <__swsetup_r+0x7a>
 80009d2:	89a3      	ldrh	r3, [r4, #12]
 80009d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80009d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80009dc:	d003      	beq.n	80009e6 <__swsetup_r+0x7a>
 80009de:	4621      	mov	r1, r4
 80009e0:	4628      	mov	r0, r5
 80009e2:	f000 fa5f 	bl	8000ea4 <__smakebuf_r>
 80009e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009ea:	f013 0201 	ands.w	r2, r3, #1
 80009ee:	d00a      	beq.n	8000a06 <__swsetup_r+0x9a>
 80009f0:	2200      	movs	r2, #0
 80009f2:	60a2      	str	r2, [r4, #8]
 80009f4:	6962      	ldr	r2, [r4, #20]
 80009f6:	4252      	negs	r2, r2
 80009f8:	61a2      	str	r2, [r4, #24]
 80009fa:	6922      	ldr	r2, [r4, #16]
 80009fc:	b942      	cbnz	r2, 8000a10 <__swsetup_r+0xa4>
 80009fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000a02:	d1c5      	bne.n	8000990 <__swsetup_r+0x24>
 8000a04:	bd38      	pop	{r3, r4, r5, pc}
 8000a06:	0799      	lsls	r1, r3, #30
 8000a08:	bf58      	it	pl
 8000a0a:	6962      	ldrpl	r2, [r4, #20]
 8000a0c:	60a2      	str	r2, [r4, #8]
 8000a0e:	e7f4      	b.n	80009fa <__swsetup_r+0x8e>
 8000a10:	2000      	movs	r0, #0
 8000a12:	e7f7      	b.n	8000a04 <__swsetup_r+0x98>
 8000a14:	2000000c 	.word	0x2000000c

08000a18 <memset>:
 8000a18:	4402      	add	r2, r0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d100      	bne.n	8000a22 <memset+0xa>
 8000a20:	4770      	bx	lr
 8000a22:	f803 1b01 	strb.w	r1, [r3], #1
 8000a26:	e7f9      	b.n	8000a1c <memset+0x4>

08000a28 <_close_r>:
 8000a28:	b538      	push	{r3, r4, r5, lr}
 8000a2a:	4d06      	ldr	r5, [pc, #24]	@ (8000a44 <_close_r+0x1c>)
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	4604      	mov	r4, r0
 8000a30:	4608      	mov	r0, r1
 8000a32:	602b      	str	r3, [r5, #0]
 8000a34:	f7ff fc69 	bl	800030a <_close>
 8000a38:	1c43      	adds	r3, r0, #1
 8000a3a:	d102      	bne.n	8000a42 <_close_r+0x1a>
 8000a3c:	682b      	ldr	r3, [r5, #0]
 8000a3e:	b103      	cbz	r3, 8000a42 <_close_r+0x1a>
 8000a40:	6023      	str	r3, [r4, #0]
 8000a42:	bd38      	pop	{r3, r4, r5, pc}
 8000a44:	200001b8 	.word	0x200001b8

08000a48 <_lseek_r>:
 8000a48:	b538      	push	{r3, r4, r5, lr}
 8000a4a:	4d07      	ldr	r5, [pc, #28]	@ (8000a68 <_lseek_r+0x20>)
 8000a4c:	4604      	mov	r4, r0
 8000a4e:	4608      	mov	r0, r1
 8000a50:	4611      	mov	r1, r2
 8000a52:	2200      	movs	r2, #0
 8000a54:	602a      	str	r2, [r5, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	f7ff fc7e 	bl	8000358 <_lseek>
 8000a5c:	1c43      	adds	r3, r0, #1
 8000a5e:	d102      	bne.n	8000a66 <_lseek_r+0x1e>
 8000a60:	682b      	ldr	r3, [r5, #0]
 8000a62:	b103      	cbz	r3, 8000a66 <_lseek_r+0x1e>
 8000a64:	6023      	str	r3, [r4, #0]
 8000a66:	bd38      	pop	{r3, r4, r5, pc}
 8000a68:	200001b8 	.word	0x200001b8

08000a6c <_read_r>:
 8000a6c:	b538      	push	{r3, r4, r5, lr}
 8000a6e:	4d07      	ldr	r5, [pc, #28]	@ (8000a8c <_read_r+0x20>)
 8000a70:	4604      	mov	r4, r0
 8000a72:	4608      	mov	r0, r1
 8000a74:	4611      	mov	r1, r2
 8000a76:	2200      	movs	r2, #0
 8000a78:	602a      	str	r2, [r5, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	f7ff fc0c 	bl	8000298 <_read>
 8000a80:	1c43      	adds	r3, r0, #1
 8000a82:	d102      	bne.n	8000a8a <_read_r+0x1e>
 8000a84:	682b      	ldr	r3, [r5, #0]
 8000a86:	b103      	cbz	r3, 8000a8a <_read_r+0x1e>
 8000a88:	6023      	str	r3, [r4, #0]
 8000a8a:	bd38      	pop	{r3, r4, r5, pc}
 8000a8c:	200001b8 	.word	0x200001b8

08000a90 <_write_r>:
 8000a90:	b538      	push	{r3, r4, r5, lr}
 8000a92:	4d07      	ldr	r5, [pc, #28]	@ (8000ab0 <_write_r+0x20>)
 8000a94:	4604      	mov	r4, r0
 8000a96:	4608      	mov	r0, r1
 8000a98:	4611      	mov	r1, r2
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	602a      	str	r2, [r5, #0]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	f7ff fc17 	bl	80002d2 <_write>
 8000aa4:	1c43      	adds	r3, r0, #1
 8000aa6:	d102      	bne.n	8000aae <_write_r+0x1e>
 8000aa8:	682b      	ldr	r3, [r5, #0]
 8000aaa:	b103      	cbz	r3, 8000aae <_write_r+0x1e>
 8000aac:	6023      	str	r3, [r4, #0]
 8000aae:	bd38      	pop	{r3, r4, r5, pc}
 8000ab0:	200001b8 	.word	0x200001b8

08000ab4 <__errno>:
 8000ab4:	4b01      	ldr	r3, [pc, #4]	@ (8000abc <__errno+0x8>)
 8000ab6:	6818      	ldr	r0, [r3, #0]
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	2000000c 	.word	0x2000000c

08000ac0 <__libc_init_array>:
 8000ac0:	b570      	push	{r4, r5, r6, lr}
 8000ac2:	4d0d      	ldr	r5, [pc, #52]	@ (8000af8 <__libc_init_array+0x38>)
 8000ac4:	4c0d      	ldr	r4, [pc, #52]	@ (8000afc <__libc_init_array+0x3c>)
 8000ac6:	1b64      	subs	r4, r4, r5
 8000ac8:	10a4      	asrs	r4, r4, #2
 8000aca:	2600      	movs	r6, #0
 8000acc:	42a6      	cmp	r6, r4
 8000ace:	d109      	bne.n	8000ae4 <__libc_init_array+0x24>
 8000ad0:	4d0b      	ldr	r5, [pc, #44]	@ (8000b00 <__libc_init_array+0x40>)
 8000ad2:	4c0c      	ldr	r4, [pc, #48]	@ (8000b04 <__libc_init_array+0x44>)
 8000ad4:	f000 fa54 	bl	8000f80 <_init>
 8000ad8:	1b64      	subs	r4, r4, r5
 8000ada:	10a4      	asrs	r4, r4, #2
 8000adc:	2600      	movs	r6, #0
 8000ade:	42a6      	cmp	r6, r4
 8000ae0:	d105      	bne.n	8000aee <__libc_init_array+0x2e>
 8000ae2:	bd70      	pop	{r4, r5, r6, pc}
 8000ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae8:	4798      	blx	r3
 8000aea:	3601      	adds	r6, #1
 8000aec:	e7ee      	b.n	8000acc <__libc_init_array+0xc>
 8000aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8000af2:	4798      	blx	r3
 8000af4:	3601      	adds	r6, #1
 8000af6:	e7f2      	b.n	8000ade <__libc_init_array+0x1e>
 8000af8:	08000fb0 	.word	0x08000fb0
 8000afc:	08000fb0 	.word	0x08000fb0
 8000b00:	08000fb0 	.word	0x08000fb0
 8000b04:	08000fb4 	.word	0x08000fb4

08000b08 <__retarget_lock_init_recursive>:
 8000b08:	4770      	bx	lr

08000b0a <__retarget_lock_acquire_recursive>:
 8000b0a:	4770      	bx	lr

08000b0c <__retarget_lock_release_recursive>:
 8000b0c:	4770      	bx	lr
	...

08000b10 <_free_r>:
 8000b10:	b538      	push	{r3, r4, r5, lr}
 8000b12:	4605      	mov	r5, r0
 8000b14:	2900      	cmp	r1, #0
 8000b16:	d041      	beq.n	8000b9c <_free_r+0x8c>
 8000b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b1c:	1f0c      	subs	r4, r1, #4
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	bfb8      	it	lt
 8000b22:	18e4      	addlt	r4, r4, r3
 8000b24:	f000 f8e0 	bl	8000ce8 <__malloc_lock>
 8000b28:	4a1d      	ldr	r2, [pc, #116]	@ (8000ba0 <_free_r+0x90>)
 8000b2a:	6813      	ldr	r3, [r2, #0]
 8000b2c:	b933      	cbnz	r3, 8000b3c <_free_r+0x2c>
 8000b2e:	6063      	str	r3, [r4, #4]
 8000b30:	6014      	str	r4, [r2, #0]
 8000b32:	4628      	mov	r0, r5
 8000b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b38:	f000 b8dc 	b.w	8000cf4 <__malloc_unlock>
 8000b3c:	42a3      	cmp	r3, r4
 8000b3e:	d908      	bls.n	8000b52 <_free_r+0x42>
 8000b40:	6820      	ldr	r0, [r4, #0]
 8000b42:	1821      	adds	r1, r4, r0
 8000b44:	428b      	cmp	r3, r1
 8000b46:	bf01      	itttt	eq
 8000b48:	6819      	ldreq	r1, [r3, #0]
 8000b4a:	685b      	ldreq	r3, [r3, #4]
 8000b4c:	1809      	addeq	r1, r1, r0
 8000b4e:	6021      	streq	r1, [r4, #0]
 8000b50:	e7ed      	b.n	8000b2e <_free_r+0x1e>
 8000b52:	461a      	mov	r2, r3
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	b10b      	cbz	r3, 8000b5c <_free_r+0x4c>
 8000b58:	42a3      	cmp	r3, r4
 8000b5a:	d9fa      	bls.n	8000b52 <_free_r+0x42>
 8000b5c:	6811      	ldr	r1, [r2, #0]
 8000b5e:	1850      	adds	r0, r2, r1
 8000b60:	42a0      	cmp	r0, r4
 8000b62:	d10b      	bne.n	8000b7c <_free_r+0x6c>
 8000b64:	6820      	ldr	r0, [r4, #0]
 8000b66:	4401      	add	r1, r0
 8000b68:	1850      	adds	r0, r2, r1
 8000b6a:	4283      	cmp	r3, r0
 8000b6c:	6011      	str	r1, [r2, #0]
 8000b6e:	d1e0      	bne.n	8000b32 <_free_r+0x22>
 8000b70:	6818      	ldr	r0, [r3, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	6053      	str	r3, [r2, #4]
 8000b76:	4408      	add	r0, r1
 8000b78:	6010      	str	r0, [r2, #0]
 8000b7a:	e7da      	b.n	8000b32 <_free_r+0x22>
 8000b7c:	d902      	bls.n	8000b84 <_free_r+0x74>
 8000b7e:	230c      	movs	r3, #12
 8000b80:	602b      	str	r3, [r5, #0]
 8000b82:	e7d6      	b.n	8000b32 <_free_r+0x22>
 8000b84:	6820      	ldr	r0, [r4, #0]
 8000b86:	1821      	adds	r1, r4, r0
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	bf04      	itt	eq
 8000b8c:	6819      	ldreq	r1, [r3, #0]
 8000b8e:	685b      	ldreq	r3, [r3, #4]
 8000b90:	6063      	str	r3, [r4, #4]
 8000b92:	bf04      	itt	eq
 8000b94:	1809      	addeq	r1, r1, r0
 8000b96:	6021      	streq	r1, [r4, #0]
 8000b98:	6054      	str	r4, [r2, #4]
 8000b9a:	e7ca      	b.n	8000b32 <_free_r+0x22>
 8000b9c:	bd38      	pop	{r3, r4, r5, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200001c4 	.word	0x200001c4

08000ba4 <sbrk_aligned>:
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	4e0f      	ldr	r6, [pc, #60]	@ (8000be4 <sbrk_aligned+0x40>)
 8000ba8:	460c      	mov	r4, r1
 8000baa:	6831      	ldr	r1, [r6, #0]
 8000bac:	4605      	mov	r5, r0
 8000bae:	b911      	cbnz	r1, 8000bb6 <sbrk_aligned+0x12>
 8000bb0:	f000 f9d6 	bl	8000f60 <_sbrk_r>
 8000bb4:	6030      	str	r0, [r6, #0]
 8000bb6:	4621      	mov	r1, r4
 8000bb8:	4628      	mov	r0, r5
 8000bba:	f000 f9d1 	bl	8000f60 <_sbrk_r>
 8000bbe:	1c43      	adds	r3, r0, #1
 8000bc0:	d103      	bne.n	8000bca <sbrk_aligned+0x26>
 8000bc2:	f04f 34ff 	mov.w	r4, #4294967295
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	bd70      	pop	{r4, r5, r6, pc}
 8000bca:	1cc4      	adds	r4, r0, #3
 8000bcc:	f024 0403 	bic.w	r4, r4, #3
 8000bd0:	42a0      	cmp	r0, r4
 8000bd2:	d0f8      	beq.n	8000bc6 <sbrk_aligned+0x22>
 8000bd4:	1a21      	subs	r1, r4, r0
 8000bd6:	4628      	mov	r0, r5
 8000bd8:	f000 f9c2 	bl	8000f60 <_sbrk_r>
 8000bdc:	3001      	adds	r0, #1
 8000bde:	d1f2      	bne.n	8000bc6 <sbrk_aligned+0x22>
 8000be0:	e7ef      	b.n	8000bc2 <sbrk_aligned+0x1e>
 8000be2:	bf00      	nop
 8000be4:	200001c0 	.word	0x200001c0

08000be8 <_malloc_r>:
 8000be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bec:	1ccd      	adds	r5, r1, #3
 8000bee:	f025 0503 	bic.w	r5, r5, #3
 8000bf2:	3508      	adds	r5, #8
 8000bf4:	2d0c      	cmp	r5, #12
 8000bf6:	bf38      	it	cc
 8000bf8:	250c      	movcc	r5, #12
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	4606      	mov	r6, r0
 8000bfe:	db01      	blt.n	8000c04 <_malloc_r+0x1c>
 8000c00:	42a9      	cmp	r1, r5
 8000c02:	d904      	bls.n	8000c0e <_malloc_r+0x26>
 8000c04:	230c      	movs	r3, #12
 8000c06:	6033      	str	r3, [r6, #0]
 8000c08:	2000      	movs	r0, #0
 8000c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000ce4 <_malloc_r+0xfc>
 8000c12:	f000 f869 	bl	8000ce8 <__malloc_lock>
 8000c16:	f8d8 3000 	ldr.w	r3, [r8]
 8000c1a:	461c      	mov	r4, r3
 8000c1c:	bb44      	cbnz	r4, 8000c70 <_malloc_r+0x88>
 8000c1e:	4629      	mov	r1, r5
 8000c20:	4630      	mov	r0, r6
 8000c22:	f7ff ffbf 	bl	8000ba4 <sbrk_aligned>
 8000c26:	1c43      	adds	r3, r0, #1
 8000c28:	4604      	mov	r4, r0
 8000c2a:	d158      	bne.n	8000cde <_malloc_r+0xf6>
 8000c2c:	f8d8 4000 	ldr.w	r4, [r8]
 8000c30:	4627      	mov	r7, r4
 8000c32:	2f00      	cmp	r7, #0
 8000c34:	d143      	bne.n	8000cbe <_malloc_r+0xd6>
 8000c36:	2c00      	cmp	r4, #0
 8000c38:	d04b      	beq.n	8000cd2 <_malloc_r+0xea>
 8000c3a:	6823      	ldr	r3, [r4, #0]
 8000c3c:	4639      	mov	r1, r7
 8000c3e:	4630      	mov	r0, r6
 8000c40:	eb04 0903 	add.w	r9, r4, r3
 8000c44:	f000 f98c 	bl	8000f60 <_sbrk_r>
 8000c48:	4581      	cmp	r9, r0
 8000c4a:	d142      	bne.n	8000cd2 <_malloc_r+0xea>
 8000c4c:	6821      	ldr	r1, [r4, #0]
 8000c4e:	1a6d      	subs	r5, r5, r1
 8000c50:	4629      	mov	r1, r5
 8000c52:	4630      	mov	r0, r6
 8000c54:	f7ff ffa6 	bl	8000ba4 <sbrk_aligned>
 8000c58:	3001      	adds	r0, #1
 8000c5a:	d03a      	beq.n	8000cd2 <_malloc_r+0xea>
 8000c5c:	6823      	ldr	r3, [r4, #0]
 8000c5e:	442b      	add	r3, r5
 8000c60:	6023      	str	r3, [r4, #0]
 8000c62:	f8d8 3000 	ldr.w	r3, [r8]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	bb62      	cbnz	r2, 8000cc4 <_malloc_r+0xdc>
 8000c6a:	f8c8 7000 	str.w	r7, [r8]
 8000c6e:	e00f      	b.n	8000c90 <_malloc_r+0xa8>
 8000c70:	6822      	ldr	r2, [r4, #0]
 8000c72:	1b52      	subs	r2, r2, r5
 8000c74:	d420      	bmi.n	8000cb8 <_malloc_r+0xd0>
 8000c76:	2a0b      	cmp	r2, #11
 8000c78:	d917      	bls.n	8000caa <_malloc_r+0xc2>
 8000c7a:	1961      	adds	r1, r4, r5
 8000c7c:	42a3      	cmp	r3, r4
 8000c7e:	6025      	str	r5, [r4, #0]
 8000c80:	bf18      	it	ne
 8000c82:	6059      	strne	r1, [r3, #4]
 8000c84:	6863      	ldr	r3, [r4, #4]
 8000c86:	bf08      	it	eq
 8000c88:	f8c8 1000 	streq.w	r1, [r8]
 8000c8c:	5162      	str	r2, [r4, r5]
 8000c8e:	604b      	str	r3, [r1, #4]
 8000c90:	4630      	mov	r0, r6
 8000c92:	f000 f82f 	bl	8000cf4 <__malloc_unlock>
 8000c96:	f104 000b 	add.w	r0, r4, #11
 8000c9a:	1d23      	adds	r3, r4, #4
 8000c9c:	f020 0007 	bic.w	r0, r0, #7
 8000ca0:	1ac2      	subs	r2, r0, r3
 8000ca2:	bf1c      	itt	ne
 8000ca4:	1a1b      	subne	r3, r3, r0
 8000ca6:	50a3      	strne	r3, [r4, r2]
 8000ca8:	e7af      	b.n	8000c0a <_malloc_r+0x22>
 8000caa:	6862      	ldr	r2, [r4, #4]
 8000cac:	42a3      	cmp	r3, r4
 8000cae:	bf0c      	ite	eq
 8000cb0:	f8c8 2000 	streq.w	r2, [r8]
 8000cb4:	605a      	strne	r2, [r3, #4]
 8000cb6:	e7eb      	b.n	8000c90 <_malloc_r+0xa8>
 8000cb8:	4623      	mov	r3, r4
 8000cba:	6864      	ldr	r4, [r4, #4]
 8000cbc:	e7ae      	b.n	8000c1c <_malloc_r+0x34>
 8000cbe:	463c      	mov	r4, r7
 8000cc0:	687f      	ldr	r7, [r7, #4]
 8000cc2:	e7b6      	b.n	8000c32 <_malloc_r+0x4a>
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	42a3      	cmp	r3, r4
 8000cca:	d1fb      	bne.n	8000cc4 <_malloc_r+0xdc>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	6053      	str	r3, [r2, #4]
 8000cd0:	e7de      	b.n	8000c90 <_malloc_r+0xa8>
 8000cd2:	230c      	movs	r3, #12
 8000cd4:	6033      	str	r3, [r6, #0]
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	f000 f80c 	bl	8000cf4 <__malloc_unlock>
 8000cdc:	e794      	b.n	8000c08 <_malloc_r+0x20>
 8000cde:	6005      	str	r5, [r0, #0]
 8000ce0:	e7d6      	b.n	8000c90 <_malloc_r+0xa8>
 8000ce2:	bf00      	nop
 8000ce4:	200001c4 	.word	0x200001c4

08000ce8 <__malloc_lock>:
 8000ce8:	4801      	ldr	r0, [pc, #4]	@ (8000cf0 <__malloc_lock+0x8>)
 8000cea:	f7ff bf0e 	b.w	8000b0a <__retarget_lock_acquire_recursive>
 8000cee:	bf00      	nop
 8000cf0:	200001bc 	.word	0x200001bc

08000cf4 <__malloc_unlock>:
 8000cf4:	4801      	ldr	r0, [pc, #4]	@ (8000cfc <__malloc_unlock+0x8>)
 8000cf6:	f7ff bf09 	b.w	8000b0c <__retarget_lock_release_recursive>
 8000cfa:	bf00      	nop
 8000cfc:	200001bc 	.word	0x200001bc

08000d00 <__sflush_r>:
 8000d00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d08:	0716      	lsls	r6, r2, #28
 8000d0a:	4605      	mov	r5, r0
 8000d0c:	460c      	mov	r4, r1
 8000d0e:	d454      	bmi.n	8000dba <__sflush_r+0xba>
 8000d10:	684b      	ldr	r3, [r1, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dc02      	bgt.n	8000d1c <__sflush_r+0x1c>
 8000d16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	dd48      	ble.n	8000dae <__sflush_r+0xae>
 8000d1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d045      	beq.n	8000dae <__sflush_r+0xae>
 8000d22:	2300      	movs	r3, #0
 8000d24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000d28:	682f      	ldr	r7, [r5, #0]
 8000d2a:	6a21      	ldr	r1, [r4, #32]
 8000d2c:	602b      	str	r3, [r5, #0]
 8000d2e:	d030      	beq.n	8000d92 <__sflush_r+0x92>
 8000d30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000d32:	89a3      	ldrh	r3, [r4, #12]
 8000d34:	0759      	lsls	r1, r3, #29
 8000d36:	d505      	bpl.n	8000d44 <__sflush_r+0x44>
 8000d38:	6863      	ldr	r3, [r4, #4]
 8000d3a:	1ad2      	subs	r2, r2, r3
 8000d3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000d3e:	b10b      	cbz	r3, 8000d44 <__sflush_r+0x44>
 8000d40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000d42:	1ad2      	subs	r2, r2, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000d48:	6a21      	ldr	r1, [r4, #32]
 8000d4a:	4628      	mov	r0, r5
 8000d4c:	47b0      	blx	r6
 8000d4e:	1c43      	adds	r3, r0, #1
 8000d50:	89a3      	ldrh	r3, [r4, #12]
 8000d52:	d106      	bne.n	8000d62 <__sflush_r+0x62>
 8000d54:	6829      	ldr	r1, [r5, #0]
 8000d56:	291d      	cmp	r1, #29
 8000d58:	d82b      	bhi.n	8000db2 <__sflush_r+0xb2>
 8000d5a:	4a2a      	ldr	r2, [pc, #168]	@ (8000e04 <__sflush_r+0x104>)
 8000d5c:	410a      	asrs	r2, r1
 8000d5e:	07d6      	lsls	r6, r2, #31
 8000d60:	d427      	bmi.n	8000db2 <__sflush_r+0xb2>
 8000d62:	2200      	movs	r2, #0
 8000d64:	6062      	str	r2, [r4, #4]
 8000d66:	04d9      	lsls	r1, r3, #19
 8000d68:	6922      	ldr	r2, [r4, #16]
 8000d6a:	6022      	str	r2, [r4, #0]
 8000d6c:	d504      	bpl.n	8000d78 <__sflush_r+0x78>
 8000d6e:	1c42      	adds	r2, r0, #1
 8000d70:	d101      	bne.n	8000d76 <__sflush_r+0x76>
 8000d72:	682b      	ldr	r3, [r5, #0]
 8000d74:	b903      	cbnz	r3, 8000d78 <__sflush_r+0x78>
 8000d76:	6560      	str	r0, [r4, #84]	@ 0x54
 8000d78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000d7a:	602f      	str	r7, [r5, #0]
 8000d7c:	b1b9      	cbz	r1, 8000dae <__sflush_r+0xae>
 8000d7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d002      	beq.n	8000d8c <__sflush_r+0x8c>
 8000d86:	4628      	mov	r0, r5
 8000d88:	f7ff fec2 	bl	8000b10 <_free_r>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8000d90:	e00d      	b.n	8000dae <__sflush_r+0xae>
 8000d92:	2301      	movs	r3, #1
 8000d94:	4628      	mov	r0, r5
 8000d96:	47b0      	blx	r6
 8000d98:	4602      	mov	r2, r0
 8000d9a:	1c50      	adds	r0, r2, #1
 8000d9c:	d1c9      	bne.n	8000d32 <__sflush_r+0x32>
 8000d9e:	682b      	ldr	r3, [r5, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0c6      	beq.n	8000d32 <__sflush_r+0x32>
 8000da4:	2b1d      	cmp	r3, #29
 8000da6:	d001      	beq.n	8000dac <__sflush_r+0xac>
 8000da8:	2b16      	cmp	r3, #22
 8000daa:	d11e      	bne.n	8000dea <__sflush_r+0xea>
 8000dac:	602f      	str	r7, [r5, #0]
 8000dae:	2000      	movs	r0, #0
 8000db0:	e022      	b.n	8000df8 <__sflush_r+0xf8>
 8000db2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	e01b      	b.n	8000df2 <__sflush_r+0xf2>
 8000dba:	690f      	ldr	r7, [r1, #16]
 8000dbc:	2f00      	cmp	r7, #0
 8000dbe:	d0f6      	beq.n	8000dae <__sflush_r+0xae>
 8000dc0:	0793      	lsls	r3, r2, #30
 8000dc2:	680e      	ldr	r6, [r1, #0]
 8000dc4:	bf08      	it	eq
 8000dc6:	694b      	ldreq	r3, [r1, #20]
 8000dc8:	600f      	str	r7, [r1, #0]
 8000dca:	bf18      	it	ne
 8000dcc:	2300      	movne	r3, #0
 8000dce:	eba6 0807 	sub.w	r8, r6, r7
 8000dd2:	608b      	str	r3, [r1, #8]
 8000dd4:	f1b8 0f00 	cmp.w	r8, #0
 8000dd8:	dde9      	ble.n	8000dae <__sflush_r+0xae>
 8000dda:	6a21      	ldr	r1, [r4, #32]
 8000ddc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000dde:	4643      	mov	r3, r8
 8000de0:	463a      	mov	r2, r7
 8000de2:	4628      	mov	r0, r5
 8000de4:	47b0      	blx	r6
 8000de6:	2800      	cmp	r0, #0
 8000de8:	dc08      	bgt.n	8000dfc <__sflush_r+0xfc>
 8000dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000df2:	81a3      	strh	r3, [r4, #12]
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295
 8000df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dfc:	4407      	add	r7, r0
 8000dfe:	eba8 0800 	sub.w	r8, r8, r0
 8000e02:	e7e7      	b.n	8000dd4 <__sflush_r+0xd4>
 8000e04:	dfbffffe 	.word	0xdfbffffe

08000e08 <_fflush_r>:
 8000e08:	b538      	push	{r3, r4, r5, lr}
 8000e0a:	690b      	ldr	r3, [r1, #16]
 8000e0c:	4605      	mov	r5, r0
 8000e0e:	460c      	mov	r4, r1
 8000e10:	b913      	cbnz	r3, 8000e18 <_fflush_r+0x10>
 8000e12:	2500      	movs	r5, #0
 8000e14:	4628      	mov	r0, r5
 8000e16:	bd38      	pop	{r3, r4, r5, pc}
 8000e18:	b118      	cbz	r0, 8000e22 <_fflush_r+0x1a>
 8000e1a:	6a03      	ldr	r3, [r0, #32]
 8000e1c:	b90b      	cbnz	r3, 8000e22 <_fflush_r+0x1a>
 8000e1e:	f7ff fc8f 	bl	8000740 <__sinit>
 8000e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d0f3      	beq.n	8000e12 <_fflush_r+0xa>
 8000e2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000e2c:	07d0      	lsls	r0, r2, #31
 8000e2e:	d404      	bmi.n	8000e3a <_fflush_r+0x32>
 8000e30:	0599      	lsls	r1, r3, #22
 8000e32:	d402      	bmi.n	8000e3a <_fflush_r+0x32>
 8000e34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000e36:	f7ff fe68 	bl	8000b0a <__retarget_lock_acquire_recursive>
 8000e3a:	4628      	mov	r0, r5
 8000e3c:	4621      	mov	r1, r4
 8000e3e:	f7ff ff5f 	bl	8000d00 <__sflush_r>
 8000e42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000e44:	07da      	lsls	r2, r3, #31
 8000e46:	4605      	mov	r5, r0
 8000e48:	d4e4      	bmi.n	8000e14 <_fflush_r+0xc>
 8000e4a:	89a3      	ldrh	r3, [r4, #12]
 8000e4c:	059b      	lsls	r3, r3, #22
 8000e4e:	d4e1      	bmi.n	8000e14 <_fflush_r+0xc>
 8000e50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000e52:	f7ff fe5b 	bl	8000b0c <__retarget_lock_release_recursive>
 8000e56:	e7dd      	b.n	8000e14 <_fflush_r+0xc>

08000e58 <__swhatbuf_r>:
 8000e58:	b570      	push	{r4, r5, r6, lr}
 8000e5a:	460c      	mov	r4, r1
 8000e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e60:	2900      	cmp	r1, #0
 8000e62:	b096      	sub	sp, #88	@ 0x58
 8000e64:	4615      	mov	r5, r2
 8000e66:	461e      	mov	r6, r3
 8000e68:	da0d      	bge.n	8000e86 <__swhatbuf_r+0x2e>
 8000e6a:	89a3      	ldrh	r3, [r4, #12]
 8000e6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000e70:	f04f 0100 	mov.w	r1, #0
 8000e74:	bf14      	ite	ne
 8000e76:	2340      	movne	r3, #64	@ 0x40
 8000e78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	6031      	str	r1, [r6, #0]
 8000e80:	602b      	str	r3, [r5, #0]
 8000e82:	b016      	add	sp, #88	@ 0x58
 8000e84:	bd70      	pop	{r4, r5, r6, pc}
 8000e86:	466a      	mov	r2, sp
 8000e88:	f000 f848 	bl	8000f1c <_fstat_r>
 8000e8c:	2800      	cmp	r0, #0
 8000e8e:	dbec      	blt.n	8000e6a <__swhatbuf_r+0x12>
 8000e90:	9901      	ldr	r1, [sp, #4]
 8000e92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000e96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000e9a:	4259      	negs	r1, r3
 8000e9c:	4159      	adcs	r1, r3
 8000e9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ea2:	e7eb      	b.n	8000e7c <__swhatbuf_r+0x24>

08000ea4 <__smakebuf_r>:
 8000ea4:	898b      	ldrh	r3, [r1, #12]
 8000ea6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000ea8:	079d      	lsls	r5, r3, #30
 8000eaa:	4606      	mov	r6, r0
 8000eac:	460c      	mov	r4, r1
 8000eae:	d507      	bpl.n	8000ec0 <__smakebuf_r+0x1c>
 8000eb0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000eb4:	6023      	str	r3, [r4, #0]
 8000eb6:	6123      	str	r3, [r4, #16]
 8000eb8:	2301      	movs	r3, #1
 8000eba:	6163      	str	r3, [r4, #20]
 8000ebc:	b003      	add	sp, #12
 8000ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ec0:	ab01      	add	r3, sp, #4
 8000ec2:	466a      	mov	r2, sp
 8000ec4:	f7ff ffc8 	bl	8000e58 <__swhatbuf_r>
 8000ec8:	9f00      	ldr	r7, [sp, #0]
 8000eca:	4605      	mov	r5, r0
 8000ecc:	4639      	mov	r1, r7
 8000ece:	4630      	mov	r0, r6
 8000ed0:	f7ff fe8a 	bl	8000be8 <_malloc_r>
 8000ed4:	b948      	cbnz	r0, 8000eea <__smakebuf_r+0x46>
 8000ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000eda:	059a      	lsls	r2, r3, #22
 8000edc:	d4ee      	bmi.n	8000ebc <__smakebuf_r+0x18>
 8000ede:	f023 0303 	bic.w	r3, r3, #3
 8000ee2:	f043 0302 	orr.w	r3, r3, #2
 8000ee6:	81a3      	strh	r3, [r4, #12]
 8000ee8:	e7e2      	b.n	8000eb0 <__smakebuf_r+0xc>
 8000eea:	89a3      	ldrh	r3, [r4, #12]
 8000eec:	6020      	str	r0, [r4, #0]
 8000eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ef2:	81a3      	strh	r3, [r4, #12]
 8000ef4:	9b01      	ldr	r3, [sp, #4]
 8000ef6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000efa:	b15b      	cbz	r3, 8000f14 <__smakebuf_r+0x70>
 8000efc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f00:	4630      	mov	r0, r6
 8000f02:	f000 f81d 	bl	8000f40 <_isatty_r>
 8000f06:	b128      	cbz	r0, 8000f14 <__smakebuf_r+0x70>
 8000f08:	89a3      	ldrh	r3, [r4, #12]
 8000f0a:	f023 0303 	bic.w	r3, r3, #3
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	81a3      	strh	r3, [r4, #12]
 8000f14:	89a3      	ldrh	r3, [r4, #12]
 8000f16:	431d      	orrs	r5, r3
 8000f18:	81a5      	strh	r5, [r4, #12]
 8000f1a:	e7cf      	b.n	8000ebc <__smakebuf_r+0x18>

08000f1c <_fstat_r>:
 8000f1c:	b538      	push	{r3, r4, r5, lr}
 8000f1e:	4d07      	ldr	r5, [pc, #28]	@ (8000f3c <_fstat_r+0x20>)
 8000f20:	2300      	movs	r3, #0
 8000f22:	4604      	mov	r4, r0
 8000f24:	4608      	mov	r0, r1
 8000f26:	4611      	mov	r1, r2
 8000f28:	602b      	str	r3, [r5, #0]
 8000f2a:	f7ff f9fa 	bl	8000322 <_fstat>
 8000f2e:	1c43      	adds	r3, r0, #1
 8000f30:	d102      	bne.n	8000f38 <_fstat_r+0x1c>
 8000f32:	682b      	ldr	r3, [r5, #0]
 8000f34:	b103      	cbz	r3, 8000f38 <_fstat_r+0x1c>
 8000f36:	6023      	str	r3, [r4, #0]
 8000f38:	bd38      	pop	{r3, r4, r5, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200001b8 	.word	0x200001b8

08000f40 <_isatty_r>:
 8000f40:	b538      	push	{r3, r4, r5, lr}
 8000f42:	4d06      	ldr	r5, [pc, #24]	@ (8000f5c <_isatty_r+0x1c>)
 8000f44:	2300      	movs	r3, #0
 8000f46:	4604      	mov	r4, r0
 8000f48:	4608      	mov	r0, r1
 8000f4a:	602b      	str	r3, [r5, #0]
 8000f4c:	f7ff f9f9 	bl	8000342 <_isatty>
 8000f50:	1c43      	adds	r3, r0, #1
 8000f52:	d102      	bne.n	8000f5a <_isatty_r+0x1a>
 8000f54:	682b      	ldr	r3, [r5, #0]
 8000f56:	b103      	cbz	r3, 8000f5a <_isatty_r+0x1a>
 8000f58:	6023      	str	r3, [r4, #0]
 8000f5a:	bd38      	pop	{r3, r4, r5, pc}
 8000f5c:	200001b8 	.word	0x200001b8

08000f60 <_sbrk_r>:
 8000f60:	b538      	push	{r3, r4, r5, lr}
 8000f62:	4d06      	ldr	r5, [pc, #24]	@ (8000f7c <_sbrk_r+0x1c>)
 8000f64:	2300      	movs	r3, #0
 8000f66:	4604      	mov	r4, r0
 8000f68:	4608      	mov	r0, r1
 8000f6a:	602b      	str	r3, [r5, #0]
 8000f6c:	f7ff fa02 	bl	8000374 <_sbrk>
 8000f70:	1c43      	adds	r3, r0, #1
 8000f72:	d102      	bne.n	8000f7a <_sbrk_r+0x1a>
 8000f74:	682b      	ldr	r3, [r5, #0]
 8000f76:	b103      	cbz	r3, 8000f7a <_sbrk_r+0x1a>
 8000f78:	6023      	str	r3, [r4, #0]
 8000f7a:	bd38      	pop	{r3, r4, r5, pc}
 8000f7c:	200001b8 	.word	0x200001b8

08000f80 <_init>:
 8000f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f82:	bf00      	nop
 8000f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f86:	bc08      	pop	{r3}
 8000f88:	469e      	mov	lr, r3
 8000f8a:	4770      	bx	lr

08000f8c <_fini>:
 8000f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f8e:	bf00      	nop
 8000f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f92:	bc08      	pop	{r3}
 8000f94:	469e      	mov	lr, r3
 8000f96:	4770      	bx	lr
