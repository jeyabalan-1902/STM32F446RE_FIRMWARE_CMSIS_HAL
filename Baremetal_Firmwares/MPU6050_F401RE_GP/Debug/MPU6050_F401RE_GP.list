
MPU6050_F401RE_GP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c230  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  0800c3d0  0800c3d0  0000d3d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca00  0800ca00  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca00  0800ca00  0000da00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca08  0800ca08  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca08  0800ca08  0000da08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ca0c  0800ca0c  0000da0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800ca10  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d0c  200001d8  0800cbe8  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ee4  0800cbe8  0000eee4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c9be  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ecd  00000000  00000000  0002abc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001900  00000000  00000000  0002ea98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001373  00000000  00000000  00030398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004ee6  00000000  00000000  0003170b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d432  00000000  00000000  000365f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d795  00000000  00000000  00053a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f11b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dbc  00000000  00000000  000f11fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  000f8fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c3b8 	.word	0x0800c3b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800c3b8 	.word	0x0800c3b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <HMC5883L_initialize>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L_initialize() {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
    devAddr = HMC5883L_DEFAULT_ADDRESS;
 8000f4c:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <HMC5883L_initialize+0x28>)
 8000f4e:	221e      	movs	r2, #30
 8000f50:	701a      	strb	r2, [r3, #0]
    // write CONFIG_A register
    I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_A,
 8000f52:	4b07      	ldr	r3, [pc, #28]	@ (8000f70 <HMC5883L_initialize+0x28>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2270      	movs	r2, #112	@ 0x70
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f8c4 	bl	80010e8 <I2Cdev_writeByte>
        (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
        (HMC5883L_RATE_15     << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
        (HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1)));

    // write CONFIG_B register
    HMC5883L_setGain(HMC5883L_GAIN_1090);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f000 f807 	bl	8000f74 <HMC5883L_setGain>

    // write MODE register
    HMC5883L_setMode(HMC5883L_MODE_SINGLE);
 8000f66:	2001      	movs	r0, #1
 8000f68:	f000 f818 	bl	8000f9c <HMC5883L_setMode>
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200001f4 	.word	0x200001f4

08000f74 <HMC5883L_setGain>:
 * @see getGain()
 * @see HMC5883L_RA_CONFIG_B
 * @see HMC5883L_CRB_GAIN_BIT
 * @see HMC5883L_CRB_GAIN_LENGTH
 */
void HMC5883L_setGain(uint8_t gain) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 4-0 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    I2Cdev_writeByte(devAddr, HMC5883L_RA_CONFIG_B, gain << (HMC5883L_CRB_GAIN_BIT - HMC5883L_CRB_GAIN_LENGTH + 1));
 8000f7e:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <HMC5883L_setGain+0x24>)
 8000f80:	7818      	ldrb	r0, [r3, #0]
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	015b      	lsls	r3, r3, #5
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	461a      	mov	r2, r3
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	f000 f8ac 	bl	80010e8 <I2Cdev_writeByte>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200001f4 	.word	0x200001f4

08000f9c <HMC5883L_setMode>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L_setMode(uint8_t newMode) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
    // use this method to guarantee that bits 7-2 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, newMode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
 8000fa6:	4b07      	ldr	r3, [pc, #28]	@ (8000fc4 <HMC5883L_setMode+0x28>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	79fa      	ldrb	r2, [r7, #7]
 8000fac:	2102      	movs	r1, #2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f89a 	bl	80010e8 <I2Cdev_writeByte>
    mode = newMode; // track to tell if we have to clear bit 7 after a read
 8000fb4:	4a04      	ldr	r2, [pc, #16]	@ (8000fc8 <HMC5883L_setMode+0x2c>)
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	7013      	strb	r3, [r2, #0]
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200001f4 	.word	0x200001f4
 8000fc8:	200001fe 	.word	0x200001fe

08000fcc <HMC5883L_getHeading>:
 * @param x 16-bit signed integer container for X-axis heading
 * @param y 16-bit signed integer container for Y-axis heading
 * @param z 16-bit signed integer container for Z-axis heading
 * @see HMC5883L_RA_DATAX_H
 */
void HMC5883L_getHeading(int16_t *x, int16_t *y, int16_t *z) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
    I2Cdev_readBytes(devAddr, HMC5883L_RA_DATAX_H, 6, buffer, 0);
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <HMC5883L_getHeading+0x80>)
 8000fda:	7818      	ldrb	r0, [r3, #0]
 8000fdc:	2300      	movs	r3, #0
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8001050 <HMC5883L_getHeading+0x84>)
 8000fe2:	2206      	movs	r2, #6
 8000fe4:	2103      	movs	r1, #3
 8000fe6:	f000 f847 	bl	8001078 <I2Cdev_readBytes>
    if (mode == HMC5883L_MODE_SINGLE) I2Cdev_writeByte(devAddr, HMC5883L_RA_MODE, HMC5883L_MODE_SINGLE << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
 8000fea:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <HMC5883L_getHeading+0x88>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d106      	bne.n	8001000 <HMC5883L_getHeading+0x34>
 8000ff2:	4b16      	ldr	r3, [pc, #88]	@ (800104c <HMC5883L_getHeading+0x80>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f874 	bl	80010e8 <I2Cdev_writeByte>
    *x = (((int16_t)buffer[0]) << 8) | buffer[1];
 8001000:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <HMC5883L_getHeading+0x84>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	b21a      	sxth	r2, r3
 8001008:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <HMC5883L_getHeading+0x84>)
 800100a:	785b      	ldrb	r3, [r3, #1]
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b21a      	sxth	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[4]) << 8) | buffer[5];
 8001016:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <HMC5883L_getHeading+0x84>)
 8001018:	791b      	ldrb	r3, [r3, #4]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	b21a      	sxth	r2, r3
 800101e:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <HMC5883L_getHeading+0x84>)
 8001020:	795b      	ldrb	r3, [r3, #5]
 8001022:	b21b      	sxth	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	b21a      	sxth	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[2]) << 8) | buffer[3];
 800102c:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <HMC5883L_getHeading+0x84>)
 800102e:	789b      	ldrb	r3, [r3, #2]
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	b21a      	sxth	r2, r3
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HMC5883L_getHeading+0x84>)
 8001036:	78db      	ldrb	r3, [r3, #3]
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b21a      	sxth	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	801a      	strh	r2, [r3, #0]
}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001f4 	.word	0x200001f4
 8001050:	200001f8 	.word	0x200001f8
 8001054:	200001fe 	.word	0x200001fe

08001058 <I2Cdev_init>:
uint16_t I2Cdev_readTimeout = I2CDEV_DEFAULT_READ_TIMEOUT;

/** Sets device handle to use for communications
 * You can call this function and set any other device at any moment
 */
void I2Cdev_init(I2C_HandleTypeDef * hi2c){
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	I2Cdev_hi2c = hi2c;
 8001060:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <I2Cdev_init+0x1c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6013      	str	r3, [r2, #0]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000200 	.word	0x20000200

08001078 <I2Cdev_readBytes>:
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
uint8_t I2Cdev_readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af02      	add	r7, sp, #8
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	4603      	mov	r3, r0
 8001082:	71fb      	strb	r3, [r7, #7]
 8001084:	460b      	mov	r3, r1
 8001086:	71bb      	strb	r3, [r7, #6]
 8001088:	4613      	mov	r3, r2
 800108a:	717b      	strb	r3, [r7, #5]
    uint16_t tout = timeout > 0 ? timeout : I2CDEV_DEFAULT_READ_TIMEOUT;
 800108c:	8b3b      	ldrh	r3, [r7, #24]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <I2Cdev_readBytes+0x1e>
 8001092:	8b3b      	ldrh	r3, [r7, #24]
 8001094:	e001      	b.n	800109a <I2Cdev_readBytes+0x22>
 8001096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109a:	81fb      	strh	r3, [r7, #14]

    HAL_I2C_Master_Transmit(I2Cdev_hi2c, devAddr << 1, &regAddr, 1, tout);
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <I2Cdev_readBytes+0x6c>)
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	b299      	uxth	r1, r3
 80010a8:	89fb      	ldrh	r3, [r7, #14]
 80010aa:	1dba      	adds	r2, r7, #6
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2301      	movs	r3, #1
 80010b0:	f001 fa6e 	bl	8002590 <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(I2Cdev_hi2c, devAddr << 1, data, length, tout) == HAL_OK) return length;
 80010b4:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <I2Cdev_readBytes+0x6c>)
 80010b6:	6818      	ldr	r0, [r3, #0]
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	b299      	uxth	r1, r3
 80010c0:	797b      	ldrb	r3, [r7, #5]
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	89fb      	ldrh	r3, [r7, #14]
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	4613      	mov	r3, r2
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	f001 fb5e 	bl	800278c <HAL_I2C_Master_Receive>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <I2Cdev_readBytes+0x62>
 80010d6:	797b      	ldrb	r3, [r7, #5]
 80010d8:	e000      	b.n	80010dc <I2Cdev_readBytes+0x64>
    return -1;
 80010da:	23ff      	movs	r3, #255	@ 0xff
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000200 	.word	0x20000200

080010e8 <I2Cdev_writeByte>:
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
 80010f2:	460b      	mov	r3, r1
 80010f4:	71bb      	strb	r3, [r7, #6]
 80010f6:	4613      	mov	r3, r2
 80010f8:	717b      	strb	r3, [r7, #5]
    return I2Cdev_writeBytes(devAddr, regAddr, 1, &data);
 80010fa:	1d7b      	adds	r3, r7, #5
 80010fc:	79b9      	ldrb	r1, [r7, #6]
 80010fe:	79f8      	ldrb	r0, [r7, #7]
 8001100:	2201      	movs	r2, #1
 8001102:	f000 f805 	bl	8001110 <I2Cdev_writeBytes>
 8001106:	4603      	mov	r3, r0
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <I2Cdev_writeBytes>:
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* pData)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b089      	sub	sp, #36	@ 0x24
 8001114:	af04      	add	r7, sp, #16
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	4603      	mov	r3, r0
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	460b      	mov	r3, r1
 800111e:	71bb      	strb	r3, [r7, #6]
 8001120:	4613      	mov	r3, r2
 8001122:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(I2Cdev_hi2c, devAddr << 1, regAddr, I2C_MEMADD_SIZE_8BIT, pData, length, 1000);
 8001124:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <I2Cdev_writeBytes+0x54>)
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	b29b      	uxth	r3, r3
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	b299      	uxth	r1, r3
 8001130:	79bb      	ldrb	r3, [r7, #6]
 8001132:	b29a      	uxth	r2, r3
 8001134:	797b      	ldrb	r3, [r7, #5]
 8001136:	b29b      	uxth	r3, r3
 8001138:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 800113c:	9402      	str	r4, [sp, #8]
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2301      	movs	r3, #1
 8001146:	f001 fd53 	bl	8002bf0 <HAL_I2C_Mem_Write>
 800114a:	4603      	mov	r3, r0
 800114c:	73fb      	strb	r3, [r7, #15]
    return status == HAL_OK;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	2b00      	cmp	r3, #0
 8001152:	bf0c      	ite	eq
 8001154:	2301      	moveq	r3, #1
 8001156:	2300      	movne	r3, #0
 8001158:	b2db      	uxtb	r3, r3
}
 800115a:	4618      	mov	r0, r3
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	bd90      	pop	{r4, r7, pc}
 8001162:	bf00      	nop
 8001164:	20000200 	.word	0x20000200

08001168 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <MX_GPIO_Init+0x70>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	4a14      	ldr	r2, [pc, #80]	@ (80011d8 <MX_GPIO_Init+0x70>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6313      	str	r3, [r2, #48]	@ 0x30
 800118e:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <MX_GPIO_Init+0x70>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <MX_GPIO_Init+0x70>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	4a0d      	ldr	r2, [pc, #52]	@ (80011d8 <MX_GPIO_Init+0x70>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011aa:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <MX_GPIO_Init+0x70>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011b6:	2320      	movs	r3, #32
 80011b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c2:	f107 030c 	add.w	r3, r7, #12
 80011c6:	4619      	mov	r1, r3
 80011c8:	4804      	ldr	r0, [pc, #16]	@ (80011dc <MX_GPIO_Init+0x74>)
 80011ca:	f000 ff19 	bl	8002000 <HAL_GPIO_Init>

}
 80011ce:	bf00      	nop
 80011d0:	3720      	adds	r7, #32
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020400 	.word	0x40020400

080011e0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <MX_I2C1_Init+0x50>)
 80011e6:	4a13      	ldr	r2, [pc, #76]	@ (8001234 <MX_I2C1_Init+0x54>)
 80011e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <MX_I2C1_Init+0x50>)
 80011ec:	4a12      	ldr	r2, [pc, #72]	@ (8001238 <MX_I2C1_Init+0x58>)
 80011ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <MX_I2C1_Init+0x50>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <MX_I2C1_Init+0x50>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <MX_I2C1_Init+0x50>)
 80011fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001202:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001204:	4b0a      	ldr	r3, [pc, #40]	@ (8001230 <MX_I2C1_Init+0x50>)
 8001206:	2200      	movs	r2, #0
 8001208:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800120a:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <MX_I2C1_Init+0x50>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001210:	4b07      	ldr	r3, [pc, #28]	@ (8001230 <MX_I2C1_Init+0x50>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001216:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <MX_I2C1_Init+0x50>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800121c:	4804      	ldr	r0, [pc, #16]	@ (8001230 <MX_I2C1_Init+0x50>)
 800121e:	f001 f873 	bl	8002308 <HAL_I2C_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001228:	f000 fb2a 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000204 	.word	0x20000204
 8001234:	40005400 	.word	0x40005400
 8001238:	00061a80 	.word	0x00061a80

0800123c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001240:	4b12      	ldr	r3, [pc, #72]	@ (800128c <MX_I2C2_Init+0x50>)
 8001242:	4a13      	ldr	r2, [pc, #76]	@ (8001290 <MX_I2C2_Init+0x54>)
 8001244:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001246:	4b11      	ldr	r3, [pc, #68]	@ (800128c <MX_I2C2_Init+0x50>)
 8001248:	4a12      	ldr	r2, [pc, #72]	@ (8001294 <MX_I2C2_Init+0x58>)
 800124a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800124c:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <MX_I2C2_Init+0x50>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001252:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <MX_I2C2_Init+0x50>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001258:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <MX_I2C2_Init+0x50>)
 800125a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800125e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001260:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <MX_I2C2_Init+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001266:	4b09      	ldr	r3, [pc, #36]	@ (800128c <MX_I2C2_Init+0x50>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800126c:	4b07      	ldr	r3, [pc, #28]	@ (800128c <MX_I2C2_Init+0x50>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001272:	4b06      	ldr	r3, [pc, #24]	@ (800128c <MX_I2C2_Init+0x50>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001278:	4804      	ldr	r0, [pc, #16]	@ (800128c <MX_I2C2_Init+0x50>)
 800127a:	f001 f845 	bl	8002308 <HAL_I2C_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001284:	f000 fafc 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000258 	.word	0x20000258
 8001290:	40005800 	.word	0x40005800
 8001294:	000186a0 	.word	0x000186a0

08001298 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	@ 0x30
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a3a      	ldr	r2, [pc, #232]	@ (80013a0 <HAL_I2C_MspInit+0x108>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d12c      	bne.n	8001314 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
 80012be:	4b39      	ldr	r3, [pc, #228]	@ (80013a4 <HAL_I2C_MspInit+0x10c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a38      	ldr	r2, [pc, #224]	@ (80013a4 <HAL_I2C_MspInit+0x10c>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b36      	ldr	r3, [pc, #216]	@ (80013a4 <HAL_I2C_MspInit+0x10c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	61bb      	str	r3, [r7, #24]
 80012d4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012d6:	23c0      	movs	r3, #192	@ 0xc0
 80012d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012da:	2312      	movs	r3, #18
 80012dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e2:	2303      	movs	r3, #3
 80012e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012e6:	2304      	movs	r3, #4
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	482d      	ldr	r0, [pc, #180]	@ (80013a8 <HAL_I2C_MspInit+0x110>)
 80012f2:	f000 fe85 	bl	8002000 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	4b2a      	ldr	r3, [pc, #168]	@ (80013a4 <HAL_I2C_MspInit+0x10c>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	4a29      	ldr	r2, [pc, #164]	@ (80013a4 <HAL_I2C_MspInit+0x10c>)
 8001300:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001304:	6413      	str	r3, [r2, #64]	@ 0x40
 8001306:	4b27      	ldr	r3, [pc, #156]	@ (80013a4 <HAL_I2C_MspInit+0x10c>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001312:	e041      	b.n	8001398 <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a24      	ldr	r2, [pc, #144]	@ (80013ac <HAL_I2C_MspInit+0x114>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d13c      	bne.n	8001398 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	4b20      	ldr	r3, [pc, #128]	@ (80013a4 <HAL_I2C_MspInit+0x10c>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a1f      	ldr	r2, [pc, #124]	@ (80013a4 <HAL_I2C_MspInit+0x10c>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b1d      	ldr	r3, [pc, #116]	@ (80013a4 <HAL_I2C_MspInit+0x10c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800133a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800133e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001340:	2312      	movs	r3, #18
 8001342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800134c:	2304      	movs	r3, #4
 800134e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001350:	f107 031c 	add.w	r3, r7, #28
 8001354:	4619      	mov	r1, r3
 8001356:	4814      	ldr	r0, [pc, #80]	@ (80013a8 <HAL_I2C_MspInit+0x110>)
 8001358:	f000 fe52 	bl	8002000 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800135c:	2308      	movs	r3, #8
 800135e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001360:	2312      	movs	r3, #18
 8001362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800136c:	2309      	movs	r3, #9
 800136e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	4619      	mov	r1, r3
 8001376:	480c      	ldr	r0, [pc, #48]	@ (80013a8 <HAL_I2C_MspInit+0x110>)
 8001378:	f000 fe42 	bl	8002000 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <HAL_I2C_MspInit+0x10c>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001384:	4a07      	ldr	r2, [pc, #28]	@ (80013a4 <HAL_I2C_MspInit+0x10c>)
 8001386:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800138a:	6413      	str	r3, [r2, #64]	@ 0x40
 800138c:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <HAL_I2C_MspInit+0x10c>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001390:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]
}
 8001398:	bf00      	nop
 800139a:	3730      	adds	r7, #48	@ 0x30
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40005400 	.word	0x40005400
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020400 	.word	0x40020400
 80013ac:	40005800 	.word	0x40005800

080013b0 <HMC5883L_Task>:
		}
    }
}

void HMC5883L_Task(void *argument)
{
 80013b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013b4:	b098      	sub	sp, #96	@ 0x60
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
	char buffer[64];
	HMC5883L_initialize();
 80013ba:	f7ff fdc5 	bl	8000f48 <HMC5883L_initialize>
	osDelay(100);
 80013be:	2064      	movs	r0, #100	@ 0x64
 80013c0:	f003 fd56 	bl	8004e70 <osDelay>
    while (1) {
    	HMC5883L_getHeading(&mx, &my, &mz);
 80013c4:	4aba      	ldr	r2, [pc, #744]	@ (80016b0 <HMC5883L_Task+0x300>)
 80013c6:	49bb      	ldr	r1, [pc, #748]	@ (80016b4 <HMC5883L_Task+0x304>)
 80013c8:	48bb      	ldr	r0, [pc, #748]	@ (80016b8 <HMC5883L_Task+0x308>)
 80013ca:	f7ff fdff 	bl	8000fcc <HMC5883L_getHeading>
		float fx = (float)mx;
 80013ce:	4bba      	ldr	r3, [pc, #744]	@ (80016b8 <HMC5883L_Task+0x308>)
 80013d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d4:	ee07 3a90 	vmov	s15, r3
 80013d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013dc:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		float fy = (float)my;
 80013e0:	4bb4      	ldr	r3, [pc, #720]	@ (80016b4 <HMC5883L_Task+0x304>)
 80013e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ee:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		float fz = (float)mz;
 80013f2:	4baf      	ldr	r3, [pc, #700]	@ (80016b0 <HMC5883L_Task+0x300>)
 80013f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f8:	ee07 3a90 	vmov	s15, r3
 80013fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001400:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		float pitchRad = pitch * M_PI / 180.0;
 8001404:	4bad      	ldr	r3, [pc, #692]	@ (80016bc <HMC5883L_Task+0x30c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f8a5 	bl	8000558 <__aeabi_f2d>
 800140e:	a3a6      	add	r3, pc, #664	@ (adr r3, 80016a8 <HMC5883L_Task+0x2f8>)
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	f7ff f8f8 	bl	8000608 <__aeabi_dmul>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	4ba6      	ldr	r3, [pc, #664]	@ (80016c0 <HMC5883L_Task+0x310>)
 8001426:	f7ff fa19 	bl	800085c <__aeabi_ddiv>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	f7ff fbc1 	bl	8000bb8 <__aeabi_d2f>
 8001436:	4603      	mov	r3, r0
 8001438:	653b      	str	r3, [r7, #80]	@ 0x50
		float rollRad  = roll  * M_PI / 180.0;
 800143a:	4ba2      	ldr	r3, [pc, #648]	@ (80016c4 <HMC5883L_Task+0x314>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f88a 	bl	8000558 <__aeabi_f2d>
 8001444:	a398      	add	r3, pc, #608	@ (adr r3, 80016a8 <HMC5883L_Task+0x2f8>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7ff f8dd 	bl	8000608 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	4b99      	ldr	r3, [pc, #612]	@ (80016c0 <HMC5883L_Task+0x310>)
 800145c:	f7ff f9fe 	bl	800085c <__aeabi_ddiv>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	f7ff fba6 	bl	8000bb8 <__aeabi_d2f>
 800146c:	4603      	mov	r3, r0
 800146e:	64fb      	str	r3, [r7, #76]	@ 0x4c

		mx_comp = fx * cos(pitchRad) + fz * sin(pitchRad);
 8001470:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001472:	f7ff f871 	bl	8000558 <__aeabi_f2d>
 8001476:	4604      	mov	r4, r0
 8001478:	460d      	mov	r5, r1
 800147a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800147c:	f7ff f86c 	bl	8000558 <__aeabi_f2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	ec43 2b10 	vmov	d0, r2, r3
 8001488:	f009 fe4a 	bl	800b120 <cos>
 800148c:	ec53 2b10 	vmov	r2, r3, d0
 8001490:	4620      	mov	r0, r4
 8001492:	4629      	mov	r1, r5
 8001494:	f7ff f8b8 	bl	8000608 <__aeabi_dmul>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4690      	mov	r8, r2
 800149e:	4699      	mov	r9, r3
 80014a0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80014a2:	f7ff f859 	bl	8000558 <__aeabi_f2d>
 80014a6:	4604      	mov	r4, r0
 80014a8:	460d      	mov	r5, r1
 80014aa:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80014ac:	f7ff f854 	bl	8000558 <__aeabi_f2d>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	ec43 2b10 	vmov	d0, r2, r3
 80014b8:	f009 fe8e 	bl	800b1d8 <sin>
 80014bc:	ec53 2b10 	vmov	r2, r3, d0
 80014c0:	4620      	mov	r0, r4
 80014c2:	4629      	mov	r1, r5
 80014c4:	f7ff f8a0 	bl	8000608 <__aeabi_dmul>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4640      	mov	r0, r8
 80014ce:	4649      	mov	r1, r9
 80014d0:	f7fe fee4 	bl	800029c <__adddf3>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4610      	mov	r0, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	f7ff fb6c 	bl	8000bb8 <__aeabi_d2f>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4a79      	ldr	r2, [pc, #484]	@ (80016c8 <HMC5883L_Task+0x318>)
 80014e4:	6013      	str	r3, [r2, #0]
		my_comp = fx * sin(rollRad) * sin(pitchRad) + fy * cos(rollRad) - fz * sin(rollRad) * cos(pitchRad);
 80014e6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80014e8:	f7ff f836 	bl	8000558 <__aeabi_f2d>
 80014ec:	4604      	mov	r4, r0
 80014ee:	460d      	mov	r5, r1
 80014f0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80014f2:	f7ff f831 	bl	8000558 <__aeabi_f2d>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	ec43 2b10 	vmov	d0, r2, r3
 80014fe:	f009 fe6b 	bl	800b1d8 <sin>
 8001502:	ec53 2b10 	vmov	r2, r3, d0
 8001506:	4620      	mov	r0, r4
 8001508:	4629      	mov	r1, r5
 800150a:	f7ff f87d 	bl	8000608 <__aeabi_dmul>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4614      	mov	r4, r2
 8001514:	461d      	mov	r5, r3
 8001516:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001518:	f7ff f81e 	bl	8000558 <__aeabi_f2d>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	ec43 2b10 	vmov	d0, r2, r3
 8001524:	f009 fe58 	bl	800b1d8 <sin>
 8001528:	ec53 2b10 	vmov	r2, r3, d0
 800152c:	4620      	mov	r0, r4
 800152e:	4629      	mov	r1, r5
 8001530:	f7ff f86a 	bl	8000608 <__aeabi_dmul>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4690      	mov	r8, r2
 800153a:	4699      	mov	r9, r3
 800153c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800153e:	f7ff f80b 	bl	8000558 <__aeabi_f2d>
 8001542:	4604      	mov	r4, r0
 8001544:	460d      	mov	r5, r1
 8001546:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001548:	f7ff f806 	bl	8000558 <__aeabi_f2d>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	ec43 2b10 	vmov	d0, r2, r3
 8001554:	f009 fde4 	bl	800b120 <cos>
 8001558:	ec53 2b10 	vmov	r2, r3, d0
 800155c:	4620      	mov	r0, r4
 800155e:	4629      	mov	r1, r5
 8001560:	f7ff f852 	bl	8000608 <__aeabi_dmul>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4640      	mov	r0, r8
 800156a:	4649      	mov	r1, r9
 800156c:	f7fe fe96 	bl	800029c <__adddf3>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4690      	mov	r8, r2
 8001576:	4699      	mov	r9, r3
 8001578:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800157a:	f7fe ffed 	bl	8000558 <__aeabi_f2d>
 800157e:	4604      	mov	r4, r0
 8001580:	460d      	mov	r5, r1
 8001582:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001584:	f7fe ffe8 	bl	8000558 <__aeabi_f2d>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	ec43 2b10 	vmov	d0, r2, r3
 8001590:	f009 fe22 	bl	800b1d8 <sin>
 8001594:	ec53 2b10 	vmov	r2, r3, d0
 8001598:	4620      	mov	r0, r4
 800159a:	4629      	mov	r1, r5
 800159c:	f7ff f834 	bl	8000608 <__aeabi_dmul>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4614      	mov	r4, r2
 80015a6:	461d      	mov	r5, r3
 80015a8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80015aa:	f7fe ffd5 	bl	8000558 <__aeabi_f2d>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	ec43 2b10 	vmov	d0, r2, r3
 80015b6:	f009 fdb3 	bl	800b120 <cos>
 80015ba:	ec53 2b10 	vmov	r2, r3, d0
 80015be:	4620      	mov	r0, r4
 80015c0:	4629      	mov	r1, r5
 80015c2:	f7ff f821 	bl	8000608 <__aeabi_dmul>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4640      	mov	r0, r8
 80015cc:	4649      	mov	r1, r9
 80015ce:	f7fe fe63 	bl	8000298 <__aeabi_dsub>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f7ff faed 	bl	8000bb8 <__aeabi_d2f>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a3a      	ldr	r2, [pc, #232]	@ (80016cc <HMC5883L_Task+0x31c>)
 80015e2:	6013      	str	r3, [r2, #0]

		yaw = atan2(my_comp, mx_comp) * 180.0 / M_PI;
 80015e4:	4b39      	ldr	r3, [pc, #228]	@ (80016cc <HMC5883L_Task+0x31c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ffb5 	bl	8000558 <__aeabi_f2d>
 80015ee:	4604      	mov	r4, r0
 80015f0:	460d      	mov	r5, r1
 80015f2:	4b35      	ldr	r3, [pc, #212]	@ (80016c8 <HMC5883L_Task+0x318>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ffae 	bl	8000558 <__aeabi_f2d>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	ec43 2b11 	vmov	d1, r2, r3
 8001604:	ec45 4b10 	vmov	d0, r4, r5
 8001608:	f009 fbee 	bl	800ade8 <atan2>
 800160c:	ec51 0b10 	vmov	r0, r1, d0
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	4b2a      	ldr	r3, [pc, #168]	@ (80016c0 <HMC5883L_Task+0x310>)
 8001616:	f7fe fff7 	bl	8000608 <__aeabi_dmul>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	a321      	add	r3, pc, #132	@ (adr r3, 80016a8 <HMC5883L_Task+0x2f8>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7ff f918 	bl	800085c <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fac0 	bl	8000bb8 <__aeabi_d2f>
 8001638:	4603      	mov	r3, r0
 800163a:	4a25      	ldr	r2, [pc, #148]	@ (80016d0 <HMC5883L_Task+0x320>)
 800163c:	6013      	str	r3, [r2, #0]

		if (yaw < 0)
 800163e:	4b24      	ldr	r3, [pc, #144]	@ (80016d0 <HMC5883L_Task+0x320>)
 8001640:	edd3 7a00 	vldr	s15, [r3]
 8001644:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164c:	d509      	bpl.n	8001662 <HMC5883L_Task+0x2b2>
			yaw += 360;
 800164e:	4b20      	ldr	r3, [pc, #128]	@ (80016d0 <HMC5883L_Task+0x320>)
 8001650:	edd3 7a00 	vldr	s15, [r3]
 8001654:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80016d4 <HMC5883L_Task+0x324>
 8001658:	ee77 7a87 	vadd.f32	s15, s15, s14
 800165c:	4b1c      	ldr	r3, [pc, #112]	@ (80016d0 <HMC5883L_Task+0x320>)
 800165e:	edc3 7a00 	vstr	s15, [r3]
    	sprintf(buffer, "HMC5883L Yaw: %.2f°\r\n", yaw);
 8001662:	4b1b      	ldr	r3, [pc, #108]	@ (80016d0 <HMC5883L_Task+0x320>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff76 	bl	8000558 <__aeabi_f2d>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	f107 000c 	add.w	r0, r7, #12
 8001674:	4918      	ldr	r1, [pc, #96]	@ (80016d8 <HMC5883L_Task+0x328>)
 8001676:	f007 fa33 	bl	8008ae0 <siprintf>
    	osMutexAcquire(uart2MutexHandle, osWaitForever);
 800167a:	4b18      	ldr	r3, [pc, #96]	@ (80016dc <HMC5883L_Task+0x32c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f04f 31ff 	mov.w	r1, #4294967295
 8001682:	4618      	mov	r0, r3
 8001684:	f003 fc95 	bl	8004fb2 <osMutexAcquire>
    	//HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    	printf("%s", buffer);
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	4619      	mov	r1, r3
 800168e:	4814      	ldr	r0, [pc, #80]	@ (80016e0 <HMC5883L_Task+0x330>)
 8001690:	f007 fa14 	bl	8008abc <iprintf>
    	osMutexRelease(uart2MutexHandle);
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <HMC5883L_Task+0x32c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f003 fcd5 	bl	8005048 <osMutexRelease>
        osDelay(10);
 800169e:	200a      	movs	r0, #10
 80016a0:	f003 fbe6 	bl	8004e70 <osDelay>
    while (1) {
 80016a4:	e68e      	b.n	80013c4 <HMC5883L_Task+0x14>
 80016a6:	bf00      	nop
 80016a8:	54442d18 	.word	0x54442d18
 80016ac:	400921fb 	.word	0x400921fb
 80016b0:	200002b0 	.word	0x200002b0
 80016b4:	200002ae 	.word	0x200002ae
 80016b8:	200002ac 	.word	0x200002ac
 80016bc:	200002b4 	.word	0x200002b4
 80016c0:	40668000 	.word	0x40668000
 80016c4:	200002b8 	.word	0x200002b8
 80016c8:	200002bc 	.word	0x200002bc
 80016cc:	200002c0 	.word	0x200002c0
 80016d0:	200002c4 	.word	0x200002c4
 80016d4:	43b40000 	.word	0x43b40000
 80016d8:	0800c3ec 	.word	0x0800c3ec
 80016dc:	200002cc 	.word	0x200002cc
 80016e0:	0800c404 	.word	0x0800c404

080016e4 <__io_putchar>:


#ifdef __GNUC__
#define UART_printf   int __io_putchar(int ch)
UART_printf
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80016ec:	1d39      	adds	r1, r7, #4
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	2201      	movs	r2, #1
 80016f4:	4803      	ldr	r0, [pc, #12]	@ (8001704 <__io_putchar+0x20>)
 80016f6:	f002 fedf 	bl	80044b8 <HAL_UART_Transmit>
	return ch;
 80016fa:	687b      	ldr	r3, [r7, #4]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000364 	.word	0x20000364

08001708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	@ 0x28
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800170e:	f000 fb53 	bl	8001db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001712:	f000 f839 	bl	8001788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001716:	f7ff fd27 	bl	8001168 <MX_GPIO_Init>
  MX_I2C1_Init();
 800171a:	f7ff fd61 	bl	80011e0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800171e:	f000 fa7b 	bl	8001c18 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001722:	f000 fa4f 	bl	8001bc4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001726:	f7ff fd89 	bl	800123c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  I2Cdev_init(&hi2c2);
 800172a:	4812      	ldr	r0, [pc, #72]	@ (8001774 <main+0x6c>)
 800172c:	f7ff fc94 	bl	8001058 <I2Cdev_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001730:	f003 fac2 	bl	8004cb8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */


  uart2MutexHandle = osMutexNew(NULL);
 8001734:	2000      	movs	r0, #0
 8001736:	f003 fbb6 	bl	8004ea6 <osMutexNew>
 800173a:	4603      	mov	r3, r0
 800173c:	4a0e      	ldr	r2, [pc, #56]	@ (8001778 <main+0x70>)
 800173e:	6013      	str	r3, [r2, #0]
//    .priority = (osPriority_t) osPriorityAboveNormal,
//    .stack_size = 128 * 4
//  };
//  mpu6050_Handler = osThreadNew(MPU6050_Task, NULL, &mpu6050Task_attributes);

  const osThreadAttr_t hmc5883lTask_attributes = {
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2224      	movs	r2, #36	@ 0x24
 8001744:	2100      	movs	r1, #0
 8001746:	4618      	mov	r0, r3
 8001748:	f007 fa2d 	bl	8008ba6 <memset>
 800174c:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <main+0x74>)
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001754:	61bb      	str	r3, [r7, #24]
 8001756:	2321      	movs	r3, #33	@ 0x21
 8001758:	61fb      	str	r3, [r7, #28]
	.name = "HMC5883L",
	.priority = (osPriority_t) osPriorityAboveNormal1,
	.stack_size = 128 * 4
  };
  HMC5883L_Handler = osThreadNew(HMC5883L_Task, NULL, &hmc5883lTask_attributes);
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	461a      	mov	r2, r3
 800175e:	2100      	movs	r1, #0
 8001760:	4807      	ldr	r0, [pc, #28]	@ (8001780 <main+0x78>)
 8001762:	f003 faf3 	bl	8004d4c <osThreadNew>
 8001766:	4603      	mov	r3, r0
 8001768:	4a06      	ldr	r2, [pc, #24]	@ (8001784 <main+0x7c>)
 800176a:	6013      	str	r3, [r2, #0]
  /* Start scheduler */
  osKernelStart();
 800176c:	f003 fac8 	bl	8004d00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <main+0x68>
 8001774:	20000258 	.word	0x20000258
 8001778:	200002cc 	.word	0x200002cc
 800177c:	0800c408 	.word	0x0800c408
 8001780:	080013b1 	.word	0x080013b1
 8001784:	200002c8 	.word	0x200002c8

08001788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b094      	sub	sp, #80	@ 0x50
 800178c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178e:	f107 0320 	add.w	r3, r7, #32
 8001792:	2230      	movs	r2, #48	@ 0x30
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f007 fa05 	bl	8008ba6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	4b28      	ldr	r3, [pc, #160]	@ (8001854 <SystemClock_Config+0xcc>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b4:	4a27      	ldr	r2, [pc, #156]	@ (8001854 <SystemClock_Config+0xcc>)
 80017b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80017bc:	4b25      	ldr	r3, [pc, #148]	@ (8001854 <SystemClock_Config+0xcc>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	4b22      	ldr	r3, [pc, #136]	@ (8001858 <SystemClock_Config+0xd0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80017d4:	4a20      	ldr	r2, [pc, #128]	@ (8001858 <SystemClock_Config+0xd0>)
 80017d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001858 <SystemClock_Config+0xd0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017e8:	2302      	movs	r3, #2
 80017ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ec:	2301      	movs	r3, #1
 80017ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017f0:	2310      	movs	r3, #16
 80017f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f4:	2302      	movs	r3, #2
 80017f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017f8:	2300      	movs	r3, #0
 80017fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017fc:	2308      	movs	r3, #8
 80017fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001800:	2360      	movs	r3, #96	@ 0x60
 8001802:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001804:	2304      	movs	r3, #4
 8001806:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001808:	2304      	movs	r3, #4
 800180a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180c:	f107 0320 	add.w	r3, r7, #32
 8001810:	4618      	mov	r0, r3
 8001812:	f001 ff03 	bl	800361c <HAL_RCC_OscConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800181c:	f000 f830 	bl	8001880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001820:	230f      	movs	r3, #15
 8001822:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001824:	2302      	movs	r3, #2
 8001826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800182c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001830:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	2101      	movs	r1, #1
 800183c:	4618      	mov	r0, r3
 800183e:	f002 f965 	bl	8003b0c <HAL_RCC_ClockConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001848:	f000 f81a 	bl	8001880 <Error_Handler>
  }
}
 800184c:	bf00      	nop
 800184e:	3750      	adds	r7, #80	@ 0x50
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800
 8001858:	40007000 	.word	0x40007000

0800185c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a04      	ldr	r2, [pc, #16]	@ (800187c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d101      	bne.n	8001872 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800186e:	f000 fac5 	bl	8001dfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40010000 	.word	0x40010000

08001880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001884:	b672      	cpsid	i
}
 8001886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <Error_Handler+0x8>

0800188c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <HAL_MspInit+0x54>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189a:	4a11      	ldr	r2, [pc, #68]	@ (80018e0 <HAL_MspInit+0x54>)
 800189c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018a2:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <HAL_MspInit+0x54>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <HAL_MspInit+0x54>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	4a0a      	ldr	r2, [pc, #40]	@ (80018e0 <HAL_MspInit+0x54>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018be:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <HAL_MspInit+0x54>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	210f      	movs	r1, #15
 80018ce:	f06f 0001 	mvn.w	r0, #1
 80018d2:	f000 fb6b 	bl	8001fac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800

080018e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08c      	sub	sp, #48	@ 0x30
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80018f4:	2300      	movs	r3, #0
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	4b2e      	ldr	r3, [pc, #184]	@ (80019b4 <HAL_InitTick+0xd0>)
 80018fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fc:	4a2d      	ldr	r2, [pc, #180]	@ (80019b4 <HAL_InitTick+0xd0>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6453      	str	r3, [r2, #68]	@ 0x44
 8001904:	4b2b      	ldr	r3, [pc, #172]	@ (80019b4 <HAL_InitTick+0xd0>)
 8001906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001910:	f107 020c 	add.w	r2, r7, #12
 8001914:	f107 0310 	add.w	r3, r7, #16
 8001918:	4611      	mov	r1, r2
 800191a:	4618      	mov	r0, r3
 800191c:	f002 fad6 	bl	8003ecc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001920:	f002 fac0 	bl	8003ea4 <HAL_RCC_GetPCLK2Freq>
 8001924:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001928:	4a23      	ldr	r2, [pc, #140]	@ (80019b8 <HAL_InitTick+0xd4>)
 800192a:	fba2 2303 	umull	r2, r3, r2, r3
 800192e:	0c9b      	lsrs	r3, r3, #18
 8001930:	3b01      	subs	r3, #1
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001934:	4b21      	ldr	r3, [pc, #132]	@ (80019bc <HAL_InitTick+0xd8>)
 8001936:	4a22      	ldr	r2, [pc, #136]	@ (80019c0 <HAL_InitTick+0xdc>)
 8001938:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800193a:	4b20      	ldr	r3, [pc, #128]	@ (80019bc <HAL_InitTick+0xd8>)
 800193c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001940:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001942:	4a1e      	ldr	r2, [pc, #120]	@ (80019bc <HAL_InitTick+0xd8>)
 8001944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001946:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001948:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <HAL_InitTick+0xd8>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194e:	4b1b      	ldr	r3, [pc, #108]	@ (80019bc <HAL_InitTick+0xd8>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001954:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <HAL_InitTick+0xd8>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800195a:	4818      	ldr	r0, [pc, #96]	@ (80019bc <HAL_InitTick+0xd8>)
 800195c:	f002 fae8 	bl	8003f30 <HAL_TIM_Base_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001966:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800196a:	2b00      	cmp	r3, #0
 800196c:	d11b      	bne.n	80019a6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800196e:	4813      	ldr	r0, [pc, #76]	@ (80019bc <HAL_InitTick+0xd8>)
 8001970:	f002 fb38 	bl	8003fe4 <HAL_TIM_Base_Start_IT>
 8001974:	4603      	mov	r3, r0
 8001976:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800197a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800197e:	2b00      	cmp	r3, #0
 8001980:	d111      	bne.n	80019a6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001982:	2019      	movs	r0, #25
 8001984:	f000 fb2e 	bl	8001fe4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b0f      	cmp	r3, #15
 800198c:	d808      	bhi.n	80019a0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800198e:	2200      	movs	r2, #0
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	2019      	movs	r0, #25
 8001994:	f000 fb0a 	bl	8001fac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001998:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <HAL_InitTick+0xe0>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e002      	b.n	80019a6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80019a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3730      	adds	r7, #48	@ 0x30
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	431bde83 	.word	0x431bde83
 80019bc:	200002d0 	.word	0x200002d0
 80019c0:	40010000 	.word	0x40010000
 80019c4:	20000004 	.word	0x20000004

080019c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <NMI_Handler+0x4>

080019d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <HardFault_Handler+0x4>

080019d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <MemManage_Handler+0x4>

080019e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <BusFault_Handler+0x4>

080019e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <UsageFault_Handler+0x4>

080019f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a04:	4802      	ldr	r0, [pc, #8]	@ (8001a10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a06:	f002 fb4f 	bl	80040a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200002d0 	.word	0x200002d0

08001a14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return 1;
 8001a18:	2301      	movs	r3, #1
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <_kill>:

int _kill(int pid, int sig)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a2e:	f007 f963 	bl	8008cf8 <__errno>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2216      	movs	r2, #22
 8001a36:	601a      	str	r2, [r3, #0]
  return -1;
 8001a38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <_exit>:

void _exit (int status)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ffe7 	bl	8001a24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a56:	bf00      	nop
 8001a58:	e7fd      	b.n	8001a56 <_exit+0x12>

08001a5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	e00a      	b.n	8001a82 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a6c:	f3af 8000 	nop.w
 8001a70:	4601      	mov	r1, r0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	60ba      	str	r2, [r7, #8]
 8001a78:	b2ca      	uxtb	r2, r1
 8001a7a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	dbf0      	blt.n	8001a6c <_read+0x12>
  }

  return len;
 8001a8a:	687b      	ldr	r3, [r7, #4]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	e009      	b.n	8001aba <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	60ba      	str	r2, [r7, #8]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fe18 	bl	80016e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	dbf1      	blt.n	8001aa6 <_write+0x12>
  }
  return len;
 8001ac2:	687b      	ldr	r3, [r7, #4]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <_close>:

int _close(int file)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ad4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001af4:	605a      	str	r2, [r3, #4]
  return 0;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <_isatty>:

int _isatty(int file)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b0c:	2301      	movs	r3, #1
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b085      	sub	sp, #20
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b3c:	4a14      	ldr	r2, [pc, #80]	@ (8001b90 <_sbrk+0x5c>)
 8001b3e:	4b15      	ldr	r3, [pc, #84]	@ (8001b94 <_sbrk+0x60>)
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b48:	4b13      	ldr	r3, [pc, #76]	@ (8001b98 <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b50:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <_sbrk+0x64>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	@ (8001b9c <_sbrk+0x68>)
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b56:	4b10      	ldr	r3, [pc, #64]	@ (8001b98 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d207      	bcs.n	8001b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b64:	f007 f8c8 	bl	8008cf8 <__errno>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	e009      	b.n	8001b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b74:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	@ (8001b98 <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	4a05      	ldr	r2, [pc, #20]	@ (8001b98 <_sbrk+0x64>)
 8001b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b86:	68fb      	ldr	r3, [r7, #12]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20018000 	.word	0x20018000
 8001b94:	00000400 	.word	0x00000400
 8001b98:	20000318 	.word	0x20000318
 8001b9c:	20004ee8 	.word	0x20004ee8

08001ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba4:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <SystemInit+0x20>)
 8001ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001baa:	4a05      	ldr	r2, [pc, #20]	@ (8001bc0 <SystemInit+0x20>)
 8001bac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001bca:	4a12      	ldr	r2, [pc, #72]	@ (8001c14 <MX_USART1_UART_Init+0x50>)
 8001bcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bce:	4b10      	ldr	r3, [pc, #64]	@ (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001bd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001be2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001be8:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001bea:	220c      	movs	r2, #12
 8001bec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bee:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bfa:	4805      	ldr	r0, [pc, #20]	@ (8001c10 <MX_USART1_UART_Init+0x4c>)
 8001bfc:	f002 fc0c 	bl	8004418 <HAL_UART_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c06:	f7ff fe3b 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	2000031c 	.word	0x2000031c
 8001c14:	40011000 	.word	0x40011000

08001c18 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c1c:	4b11      	ldr	r3, [pc, #68]	@ (8001c64 <MX_USART2_UART_Init+0x4c>)
 8001c1e:	4a12      	ldr	r2, [pc, #72]	@ (8001c68 <MX_USART2_UART_Init+0x50>)
 8001c20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c22:	4b10      	ldr	r3, [pc, #64]	@ (8001c64 <MX_USART2_UART_Init+0x4c>)
 8001c24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c64 <MX_USART2_UART_Init+0x4c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c30:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <MX_USART2_UART_Init+0x4c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c36:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <MX_USART2_UART_Init+0x4c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c3c:	4b09      	ldr	r3, [pc, #36]	@ (8001c64 <MX_USART2_UART_Init+0x4c>)
 8001c3e:	220c      	movs	r2, #12
 8001c40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c42:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <MX_USART2_UART_Init+0x4c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <MX_USART2_UART_Init+0x4c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c4e:	4805      	ldr	r0, [pc, #20]	@ (8001c64 <MX_USART2_UART_Init+0x4c>)
 8001c50:	f002 fbe2 	bl	8004418 <HAL_UART_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c5a:	f7ff fe11 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000364 	.word	0x20000364
 8001c68:	40004400 	.word	0x40004400

08001c6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08c      	sub	sp, #48	@ 0x30
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 031c 	add.w	r3, r7, #28
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a32      	ldr	r2, [pc, #200]	@ (8001d54 <HAL_UART_MspInit+0xe8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d12d      	bne.n	8001cea <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	4b31      	ldr	r3, [pc, #196]	@ (8001d58 <HAL_UART_MspInit+0xec>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c96:	4a30      	ldr	r2, [pc, #192]	@ (8001d58 <HAL_UART_MspInit+0xec>)
 8001c98:	f043 0310 	orr.w	r3, r3, #16
 8001c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001d58 <HAL_UART_MspInit+0xec>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	61bb      	str	r3, [r7, #24]
 8001ca8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	4b2a      	ldr	r3, [pc, #168]	@ (8001d58 <HAL_UART_MspInit+0xec>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	4a29      	ldr	r2, [pc, #164]	@ (8001d58 <HAL_UART_MspInit+0xec>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cba:	4b27      	ldr	r3, [pc, #156]	@ (8001d58 <HAL_UART_MspInit+0xec>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cc6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cd8:	2307      	movs	r3, #7
 8001cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cdc:	f107 031c 	add.w	r3, r7, #28
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	481e      	ldr	r0, [pc, #120]	@ (8001d5c <HAL_UART_MspInit+0xf0>)
 8001ce4:	f000 f98c 	bl	8002000 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ce8:	e030      	b.n	8001d4c <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a1c      	ldr	r2, [pc, #112]	@ (8001d60 <HAL_UART_MspInit+0xf4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d12b      	bne.n	8001d4c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <HAL_UART_MspInit+0xec>)
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfc:	4a16      	ldr	r2, [pc, #88]	@ (8001d58 <HAL_UART_MspInit+0xec>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d02:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d04:	4b14      	ldr	r3, [pc, #80]	@ (8001d58 <HAL_UART_MspInit+0xec>)
 8001d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <HAL_UART_MspInit+0xec>)
 8001d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d18:	4a0f      	ldr	r2, [pc, #60]	@ (8001d58 <HAL_UART_MspInit+0xec>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d20:	4b0d      	ldr	r3, [pc, #52]	@ (8001d58 <HAL_UART_MspInit+0xec>)
 8001d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d2c:	230c      	movs	r3, #12
 8001d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d3c:	2307      	movs	r3, #7
 8001d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	4619      	mov	r1, r3
 8001d46:	4805      	ldr	r0, [pc, #20]	@ (8001d5c <HAL_UART_MspInit+0xf0>)
 8001d48:	f000 f95a 	bl	8002000 <HAL_GPIO_Init>
}
 8001d4c:	bf00      	nop
 8001d4e:	3730      	adds	r7, #48	@ 0x30
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40011000 	.word	0x40011000
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40020000 	.word	0x40020000
 8001d60:	40004400 	.word	0x40004400

08001d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d68:	f7ff ff1a 	bl	8001ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d6c:	480c      	ldr	r0, [pc, #48]	@ (8001da0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d6e:	490d      	ldr	r1, [pc, #52]	@ (8001da4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d70:	4a0d      	ldr	r2, [pc, #52]	@ (8001da8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d74:	e002      	b.n	8001d7c <LoopCopyDataInit>

08001d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7a:	3304      	adds	r3, #4

08001d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d80:	d3f9      	bcc.n	8001d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d82:	4a0a      	ldr	r2, [pc, #40]	@ (8001dac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d84:	4c0a      	ldr	r4, [pc, #40]	@ (8001db0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d88:	e001      	b.n	8001d8e <LoopFillZerobss>

08001d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d8c:	3204      	adds	r2, #4

08001d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d90:	d3fb      	bcc.n	8001d8a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001d92:	f006 ffb7 	bl	8008d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d96:	f7ff fcb7 	bl	8001708 <main>
  bx  lr    
 8001d9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001da8:	0800ca10 	.word	0x0800ca10
  ldr r2, =_sbss
 8001dac:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001db0:	20004ee4 	.word	0x20004ee4

08001db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db4:	e7fe      	b.n	8001db4 <ADC_IRQHandler>
	...

08001db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001df8 <HAL_Init+0x40>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001df8 <HAL_Init+0x40>)
 8001dc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <HAL_Init+0x40>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8001df8 <HAL_Init+0x40>)
 8001dce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd4:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <HAL_Init+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a07      	ldr	r2, [pc, #28]	@ (8001df8 <HAL_Init+0x40>)
 8001dda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de0:	2003      	movs	r0, #3
 8001de2:	f000 f8d8 	bl	8001f96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001de6:	200f      	movs	r0, #15
 8001de8:	f7ff fd7c 	bl	80018e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dec:	f7ff fd4e 	bl	800188c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40023c00 	.word	0x40023c00

08001dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e00:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <HAL_IncTick+0x20>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <HAL_IncTick+0x24>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	4a04      	ldr	r2, [pc, #16]	@ (8001e20 <HAL_IncTick+0x24>)
 8001e0e:	6013      	str	r3, [r2, #0]
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000008 	.word	0x20000008
 8001e20:	200003ac 	.word	0x200003ac

08001e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;
 8001e28:	4b03      	ldr	r3, [pc, #12]	@ (8001e38 <HAL_GetTick+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	200003ac 	.word	0x200003ac

08001e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e80 <__NVIC_SetPriorityGrouping+0x44>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6e:	4a04      	ldr	r2, [pc, #16]	@ (8001e80 <__NVIC_SetPriorityGrouping+0x44>)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	60d3      	str	r3, [r2, #12]
}
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e88:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <__NVIC_GetPriorityGrouping+0x18>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	f003 0307 	and.w	r3, r3, #7
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	db0b      	blt.n	8001eca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	f003 021f 	and.w	r2, r3, #31
 8001eb8:	4907      	ldr	r1, [pc, #28]	@ (8001ed8 <__NVIC_EnableIRQ+0x38>)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000e100 	.word	0xe000e100

08001edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	db0a      	blt.n	8001f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	490c      	ldr	r1, [pc, #48]	@ (8001f28 <__NVIC_SetPriority+0x4c>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	0112      	lsls	r2, r2, #4
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	440b      	add	r3, r1
 8001f00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f04:	e00a      	b.n	8001f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4908      	ldr	r1, [pc, #32]	@ (8001f2c <__NVIC_SetPriority+0x50>)
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	3b04      	subs	r3, #4
 8001f14:	0112      	lsls	r2, r2, #4
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	440b      	add	r3, r1
 8001f1a:	761a      	strb	r2, [r3, #24]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000e100 	.word	0xe000e100
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	@ 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f1c3 0307 	rsb	r3, r3, #7
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	bf28      	it	cs
 8001f4e:	2304      	movcs	r3, #4
 8001f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3304      	adds	r3, #4
 8001f56:	2b06      	cmp	r3, #6
 8001f58:	d902      	bls.n	8001f60 <NVIC_EncodePriority+0x30>
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3b03      	subs	r3, #3
 8001f5e:	e000      	b.n	8001f62 <NVIC_EncodePriority+0x32>
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	f04f 32ff 	mov.w	r2, #4294967295
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	401a      	ands	r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f78:	f04f 31ff 	mov.w	r1, #4294967295
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f82:	43d9      	mvns	r1, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	4313      	orrs	r3, r2
         );
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3724      	adds	r7, #36	@ 0x24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ff4c 	bl	8001e3c <__NVIC_SetPriorityGrouping>
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fbe:	f7ff ff61 	bl	8001e84 <__NVIC_GetPriorityGrouping>
 8001fc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	68b9      	ldr	r1, [r7, #8]
 8001fc8:	6978      	ldr	r0, [r7, #20]
 8001fca:	f7ff ffb1 	bl	8001f30 <NVIC_EncodePriority>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff80 	bl	8001edc <__NVIC_SetPriority>
}
 8001fdc:	bf00      	nop
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ff54 	bl	8001ea0 <__NVIC_EnableIRQ>
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	@ 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	e159      	b.n	80022d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800201c:	2201      	movs	r2, #1
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	429a      	cmp	r2, r3
 8002036:	f040 8148 	bne.w	80022ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	2b01      	cmp	r3, #1
 8002044:	d005      	beq.n	8002052 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800204e:	2b02      	cmp	r3, #2
 8002050:	d130      	bne.n	80020b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	2203      	movs	r2, #3
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002088:	2201      	movs	r2, #1
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 0201 	and.w	r2, r3, #1
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d017      	beq.n	80020f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	2203      	movs	r2, #3
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d123      	bne.n	8002144 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	08da      	lsrs	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3208      	adds	r2, #8
 8002104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	220f      	movs	r2, #15
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	08da      	lsrs	r2, r3, #3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3208      	adds	r2, #8
 800213e:	69b9      	ldr	r1, [r7, #24]
 8002140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	2203      	movs	r2, #3
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0203 	and.w	r2, r3, #3
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80a2 	beq.w	80022ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	4b57      	ldr	r3, [pc, #348]	@ (80022e8 <HAL_GPIO_Init+0x2e8>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218e:	4a56      	ldr	r2, [pc, #344]	@ (80022e8 <HAL_GPIO_Init+0x2e8>)
 8002190:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002194:	6453      	str	r3, [r2, #68]	@ 0x44
 8002196:	4b54      	ldr	r3, [pc, #336]	@ (80022e8 <HAL_GPIO_Init+0x2e8>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021a2:	4a52      	ldr	r2, [pc, #328]	@ (80022ec <HAL_GPIO_Init+0x2ec>)
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	3302      	adds	r3, #2
 80021aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	220f      	movs	r2, #15
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a49      	ldr	r2, [pc, #292]	@ (80022f0 <HAL_GPIO_Init+0x2f0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d019      	beq.n	8002202 <HAL_GPIO_Init+0x202>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a48      	ldr	r2, [pc, #288]	@ (80022f4 <HAL_GPIO_Init+0x2f4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d013      	beq.n	80021fe <HAL_GPIO_Init+0x1fe>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a47      	ldr	r2, [pc, #284]	@ (80022f8 <HAL_GPIO_Init+0x2f8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00d      	beq.n	80021fa <HAL_GPIO_Init+0x1fa>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a46      	ldr	r2, [pc, #280]	@ (80022fc <HAL_GPIO_Init+0x2fc>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d007      	beq.n	80021f6 <HAL_GPIO_Init+0x1f6>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a45      	ldr	r2, [pc, #276]	@ (8002300 <HAL_GPIO_Init+0x300>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d101      	bne.n	80021f2 <HAL_GPIO_Init+0x1f2>
 80021ee:	2304      	movs	r3, #4
 80021f0:	e008      	b.n	8002204 <HAL_GPIO_Init+0x204>
 80021f2:	2307      	movs	r3, #7
 80021f4:	e006      	b.n	8002204 <HAL_GPIO_Init+0x204>
 80021f6:	2303      	movs	r3, #3
 80021f8:	e004      	b.n	8002204 <HAL_GPIO_Init+0x204>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e002      	b.n	8002204 <HAL_GPIO_Init+0x204>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <HAL_GPIO_Init+0x204>
 8002202:	2300      	movs	r3, #0
 8002204:	69fa      	ldr	r2, [r7, #28]
 8002206:	f002 0203 	and.w	r2, r2, #3
 800220a:	0092      	lsls	r2, r2, #2
 800220c:	4093      	lsls	r3, r2
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002214:	4935      	ldr	r1, [pc, #212]	@ (80022ec <HAL_GPIO_Init+0x2ec>)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	089b      	lsrs	r3, r3, #2
 800221a:	3302      	adds	r3, #2
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002222:	4b38      	ldr	r3, [pc, #224]	@ (8002304 <HAL_GPIO_Init+0x304>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002246:	4a2f      	ldr	r2, [pc, #188]	@ (8002304 <HAL_GPIO_Init+0x304>)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800224c:	4b2d      	ldr	r3, [pc, #180]	@ (8002304 <HAL_GPIO_Init+0x304>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002270:	4a24      	ldr	r2, [pc, #144]	@ (8002304 <HAL_GPIO_Init+0x304>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002276:	4b23      	ldr	r3, [pc, #140]	@ (8002304 <HAL_GPIO_Init+0x304>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800229a:	4a1a      	ldr	r2, [pc, #104]	@ (8002304 <HAL_GPIO_Init+0x304>)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022a0:	4b18      	ldr	r3, [pc, #96]	@ (8002304 <HAL_GPIO_Init+0x304>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002304 <HAL_GPIO_Init+0x304>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3301      	adds	r3, #1
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	2b0f      	cmp	r3, #15
 80022d4:	f67f aea2 	bls.w	800201c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	3724      	adds	r7, #36	@ 0x24
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40013800 	.word	0x40013800
 80022f0:	40020000 	.word	0x40020000
 80022f4:	40020400 	.word	0x40020400
 80022f8:	40020800 	.word	0x40020800
 80022fc:	40020c00 	.word	0x40020c00
 8002300:	40021000 	.word	0x40021000
 8002304:	40013c00 	.word	0x40013c00

08002308 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e12b      	b.n	8002572 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7fe ffb2 	bl	8001298 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2224      	movs	r2, #36	@ 0x24
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0201 	bic.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800235a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800236a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800236c:	f001 fd86 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
 8002370:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4a81      	ldr	r2, [pc, #516]	@ (800257c <HAL_I2C_Init+0x274>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d807      	bhi.n	800238c <HAL_I2C_Init+0x84>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4a80      	ldr	r2, [pc, #512]	@ (8002580 <HAL_I2C_Init+0x278>)
 8002380:	4293      	cmp	r3, r2
 8002382:	bf94      	ite	ls
 8002384:	2301      	movls	r3, #1
 8002386:	2300      	movhi	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	e006      	b.n	800239a <HAL_I2C_Init+0x92>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4a7d      	ldr	r2, [pc, #500]	@ (8002584 <HAL_I2C_Init+0x27c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	bf94      	ite	ls
 8002394:	2301      	movls	r3, #1
 8002396:	2300      	movhi	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e0e7      	b.n	8002572 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4a78      	ldr	r2, [pc, #480]	@ (8002588 <HAL_I2C_Init+0x280>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	0c9b      	lsrs	r3, r3, #18
 80023ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	430a      	orrs	r2, r1
 80023c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	4a6a      	ldr	r2, [pc, #424]	@ (800257c <HAL_I2C_Init+0x274>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d802      	bhi.n	80023dc <HAL_I2C_Init+0xd4>
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	3301      	adds	r3, #1
 80023da:	e009      	b.n	80023f0 <HAL_I2C_Init+0xe8>
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80023e2:	fb02 f303 	mul.w	r3, r2, r3
 80023e6:	4a69      	ldr	r2, [pc, #420]	@ (800258c <HAL_I2C_Init+0x284>)
 80023e8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ec:	099b      	lsrs	r3, r3, #6
 80023ee:	3301      	adds	r3, #1
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	430b      	orrs	r3, r1
 80023f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002402:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	495c      	ldr	r1, [pc, #368]	@ (800257c <HAL_I2C_Init+0x274>)
 800240c:	428b      	cmp	r3, r1
 800240e:	d819      	bhi.n	8002444 <HAL_I2C_Init+0x13c>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	1e59      	subs	r1, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	fbb1 f3f3 	udiv	r3, r1, r3
 800241e:	1c59      	adds	r1, r3, #1
 8002420:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002424:	400b      	ands	r3, r1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00a      	beq.n	8002440 <HAL_I2C_Init+0x138>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1e59      	subs	r1, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	fbb1 f3f3 	udiv	r3, r1, r3
 8002438:	3301      	adds	r3, #1
 800243a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800243e:	e051      	b.n	80024e4 <HAL_I2C_Init+0x1dc>
 8002440:	2304      	movs	r3, #4
 8002442:	e04f      	b.n	80024e4 <HAL_I2C_Init+0x1dc>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d111      	bne.n	8002470 <HAL_I2C_Init+0x168>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1e58      	subs	r0, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6859      	ldr	r1, [r3, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	440b      	add	r3, r1
 800245a:	fbb0 f3f3 	udiv	r3, r0, r3
 800245e:	3301      	adds	r3, #1
 8002460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002464:	2b00      	cmp	r3, #0
 8002466:	bf0c      	ite	eq
 8002468:	2301      	moveq	r3, #1
 800246a:	2300      	movne	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	e012      	b.n	8002496 <HAL_I2C_Init+0x18e>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1e58      	subs	r0, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	0099      	lsls	r1, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	fbb0 f3f3 	udiv	r3, r0, r3
 8002486:	3301      	adds	r3, #1
 8002488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800248c:	2b00      	cmp	r3, #0
 800248e:	bf0c      	ite	eq
 8002490:	2301      	moveq	r3, #1
 8002492:	2300      	movne	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_I2C_Init+0x196>
 800249a:	2301      	movs	r3, #1
 800249c:	e022      	b.n	80024e4 <HAL_I2C_Init+0x1dc>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10e      	bne.n	80024c4 <HAL_I2C_Init+0x1bc>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1e58      	subs	r0, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6859      	ldr	r1, [r3, #4]
 80024ae:	460b      	mov	r3, r1
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	440b      	add	r3, r1
 80024b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80024b8:	3301      	adds	r3, #1
 80024ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024c2:	e00f      	b.n	80024e4 <HAL_I2C_Init+0x1dc>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1e58      	subs	r0, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6859      	ldr	r1, [r3, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	0099      	lsls	r1, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024da:	3301      	adds	r3, #1
 80024dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	6809      	ldr	r1, [r1, #0]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69da      	ldr	r2, [r3, #28]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002512:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6911      	ldr	r1, [r2, #16]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68d2      	ldr	r2, [r2, #12]
 800251e:	4311      	orrs	r1, r2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	430b      	orrs	r3, r1
 8002526:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695a      	ldr	r2, [r3, #20]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2220      	movs	r2, #32
 800255e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	000186a0 	.word	0x000186a0
 8002580:	001e847f 	.word	0x001e847f
 8002584:	003d08ff 	.word	0x003d08ff
 8002588:	431bde83 	.word	0x431bde83
 800258c:	10624dd3 	.word	0x10624dd3

08002590 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af02      	add	r7, sp, #8
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	461a      	mov	r2, r3
 800259c:	460b      	mov	r3, r1
 800259e:	817b      	strh	r3, [r7, #10]
 80025a0:	4613      	mov	r3, r2
 80025a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025a4:	f7ff fc3e 	bl	8001e24 <HAL_GetTick>
 80025a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b20      	cmp	r3, #32
 80025b4:	f040 80e0 	bne.w	8002778 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	2319      	movs	r3, #25
 80025be:	2201      	movs	r2, #1
 80025c0:	4970      	ldr	r1, [pc, #448]	@ (8002784 <HAL_I2C_Master_Transmit+0x1f4>)
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 fdf4 	bl	80031b0 <I2C_WaitOnFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025ce:	2302      	movs	r3, #2
 80025d0:	e0d3      	b.n	800277a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_I2C_Master_Transmit+0x50>
 80025dc:	2302      	movs	r3, #2
 80025de:	e0cc      	b.n	800277a <HAL_I2C_Master_Transmit+0x1ea>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d007      	beq.n	8002606 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0201 	orr.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002614:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2221      	movs	r2, #33	@ 0x21
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2210      	movs	r2, #16
 8002622:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	893a      	ldrh	r2, [r7, #8]
 8002636:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4a50      	ldr	r2, [pc, #320]	@ (8002788 <HAL_I2C_Master_Transmit+0x1f8>)
 8002646:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002648:	8979      	ldrh	r1, [r7, #10]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	6a3a      	ldr	r2, [r7, #32]
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 fbc8 	bl	8002de4 <I2C_MasterRequestWrite>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e08d      	b.n	800277a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002674:	e066      	b.n	8002744 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	6a39      	ldr	r1, [r7, #32]
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 feb2 	bl	80033e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00d      	beq.n	80026a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	2b04      	cmp	r3, #4
 800268c:	d107      	bne.n	800269e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800269c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e06b      	b.n	800277a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a6:	781a      	ldrb	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d11b      	bne.n	8002718 <HAL_I2C_Master_Transmit+0x188>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d017      	beq.n	8002718 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ec:	781a      	ldrb	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002702:	b29b      	uxth	r3, r3
 8002704:	3b01      	subs	r3, #1
 8002706:	b29a      	uxth	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	6a39      	ldr	r1, [r7, #32]
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 fea9 	bl	8003474 <I2C_WaitOnBTFFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00d      	beq.n	8002744 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272c:	2b04      	cmp	r3, #4
 800272e:	d107      	bne.n	8002740 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800273e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e01a      	b.n	800277a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002748:	2b00      	cmp	r3, #0
 800274a:	d194      	bne.n	8002676 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800275a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	e000      	b.n	800277a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002778:	2302      	movs	r3, #2
  }
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	00100002 	.word	0x00100002
 8002788:	ffff0000 	.word	0xffff0000

0800278c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08c      	sub	sp, #48	@ 0x30
 8002790:	af02      	add	r7, sp, #8
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	461a      	mov	r2, r3
 8002798:	460b      	mov	r3, r1
 800279a:	817b      	strh	r3, [r7, #10]
 800279c:	4613      	mov	r3, r2
 800279e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027a0:	f7ff fb40 	bl	8001e24 <HAL_GetTick>
 80027a4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b20      	cmp	r3, #32
 80027b0:	f040 8217 	bne.w	8002be2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	2319      	movs	r3, #25
 80027ba:	2201      	movs	r2, #1
 80027bc:	497c      	ldr	r1, [pc, #496]	@ (80029b0 <HAL_I2C_Master_Receive+0x224>)
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 fcf6 	bl	80031b0 <I2C_WaitOnFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80027ca:	2302      	movs	r3, #2
 80027cc:	e20a      	b.n	8002be4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_I2C_Master_Receive+0x50>
 80027d8:	2302      	movs	r3, #2
 80027da:	e203      	b.n	8002be4 <HAL_I2C_Master_Receive+0x458>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d007      	beq.n	8002802 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0201 	orr.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002810:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2222      	movs	r2, #34	@ 0x22
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2210      	movs	r2, #16
 800281e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	893a      	ldrh	r2, [r7, #8]
 8002832:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4a5c      	ldr	r2, [pc, #368]	@ (80029b4 <HAL_I2C_Master_Receive+0x228>)
 8002842:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002844:	8979      	ldrh	r1, [r7, #10]
 8002846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002848:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 fb4c 	bl	8002ee8 <I2C_MasterRequestRead>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e1c4      	b.n	8002be4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285e:	2b00      	cmp	r3, #0
 8002860:	d113      	bne.n	800288a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002862:	2300      	movs	r3, #0
 8002864:	623b      	str	r3, [r7, #32]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	623b      	str	r3, [r7, #32]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	623b      	str	r3, [r7, #32]
 8002876:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	e198      	b.n	8002bbc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800288e:	2b01      	cmp	r3, #1
 8002890:	d11b      	bne.n	80028ca <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	e178      	b.n	8002bbc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d11b      	bne.n	800290a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f2:	2300      	movs	r3, #0
 80028f4:	61bb      	str	r3, [r7, #24]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	61bb      	str	r3, [r7, #24]
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	e158      	b.n	8002bbc <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002918:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002930:	e144      	b.n	8002bbc <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002936:	2b03      	cmp	r3, #3
 8002938:	f200 80f1 	bhi.w	8002b1e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002940:	2b01      	cmp	r3, #1
 8002942:	d123      	bne.n	800298c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002946:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 fddb 	bl	8003504 <I2C_WaitOnRXNEFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e145      	b.n	8002be4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800298a:	e117      	b.n	8002bbc <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002990:	2b02      	cmp	r3, #2
 8002992:	d14e      	bne.n	8002a32 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299a:	2200      	movs	r2, #0
 800299c:	4906      	ldr	r1, [pc, #24]	@ (80029b8 <HAL_I2C_Master_Receive+0x22c>)
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 fc06 	bl	80031b0 <I2C_WaitOnFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d008      	beq.n	80029bc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e11a      	b.n	8002be4 <HAL_I2C_Master_Receive+0x458>
 80029ae:	bf00      	nop
 80029b0:	00100002 	.word	0x00100002
 80029b4:	ffff0000 	.word	0xffff0000
 80029b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a30:	e0c4      	b.n	8002bbc <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a38:	2200      	movs	r2, #0
 8002a3a:	496c      	ldr	r1, [pc, #432]	@ (8002bec <HAL_I2C_Master_Receive+0x460>)
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 fbb7 	bl	80031b0 <I2C_WaitOnFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0cb      	b.n	8002be4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a94:	2200      	movs	r2, #0
 8002a96:	4955      	ldr	r1, [pc, #340]	@ (8002bec <HAL_I2C_Master_Receive+0x460>)
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 fb89 	bl	80031b0 <I2C_WaitOnFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e09d      	b.n	8002be4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ab6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691a      	ldr	r2, [r3, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b1c:	e04e      	b.n	8002bbc <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b20:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fcee 	bl	8003504 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e058      	b.n	8002be4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d124      	bne.n	8002bbc <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	d107      	bne.n	8002b8a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b88:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f47f aeb6 	bne.w	8002932 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e000      	b.n	8002be4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002be2:	2302      	movs	r3, #2
  }
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3728      	adds	r7, #40	@ 0x28
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	00010004 	.word	0x00010004

08002bf0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	4608      	mov	r0, r1
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4603      	mov	r3, r0
 8002c00:	817b      	strh	r3, [r7, #10]
 8002c02:	460b      	mov	r3, r1
 8002c04:	813b      	strh	r3, [r7, #8]
 8002c06:	4613      	mov	r3, r2
 8002c08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c0a:	f7ff f90b 	bl	8001e24 <HAL_GetTick>
 8002c0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	f040 80d9 	bne.w	8002dd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	2319      	movs	r3, #25
 8002c24:	2201      	movs	r2, #1
 8002c26:	496d      	ldr	r1, [pc, #436]	@ (8002ddc <HAL_I2C_Mem_Write+0x1ec>)
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 fac1 	bl	80031b0 <I2C_WaitOnFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c34:	2302      	movs	r3, #2
 8002c36:	e0cc      	b.n	8002dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_I2C_Mem_Write+0x56>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e0c5      	b.n	8002dd2 <HAL_I2C_Mem_Write+0x1e2>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d007      	beq.n	8002c6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2221      	movs	r2, #33	@ 0x21
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2240      	movs	r2, #64	@ 0x40
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a3a      	ldr	r2, [r7, #32]
 8002c96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4a4d      	ldr	r2, [pc, #308]	@ (8002de0 <HAL_I2C_Mem_Write+0x1f0>)
 8002cac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cae:	88f8      	ldrh	r0, [r7, #6]
 8002cb0:	893a      	ldrh	r2, [r7, #8]
 8002cb2:	8979      	ldrh	r1, [r7, #10]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	9301      	str	r3, [sp, #4]
 8002cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f9e0 	bl	8003084 <I2C_RequestMemoryWrite>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d052      	beq.n	8002d70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e081      	b.n	8002dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 fb86 	bl	80033e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00d      	beq.n	8002cfa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d107      	bne.n	8002cf6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e06b      	b.n	8002dd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfe:	781a      	ldrb	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d11b      	bne.n	8002d70 <HAL_I2C_Mem_Write+0x180>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d017      	beq.n	8002d70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d44:	781a      	ldrb	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1aa      	bne.n	8002cce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 fb79 	bl	8003474 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00d      	beq.n	8002da4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d107      	bne.n	8002da0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e016      	b.n	8002dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	e000      	b.n	8002dd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002dd0:	2302      	movs	r3, #2
  }
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	00100002 	.word	0x00100002
 8002de0:	ffff0000 	.word	0xffff0000

08002de4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	603b      	str	r3, [r7, #0]
 8002df0:	460b      	mov	r3, r1
 8002df2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d006      	beq.n	8002e0e <I2C_MasterRequestWrite+0x2a>
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d003      	beq.n	8002e0e <I2C_MasterRequestWrite+0x2a>
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e0c:	d108      	bne.n	8002e20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e00b      	b.n	8002e38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e24:	2b12      	cmp	r3, #18
 8002e26:	d107      	bne.n	8002e38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 f9b3 	bl	80031b0 <I2C_WaitOnFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00d      	beq.n	8002e6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e5e:	d103      	bne.n	8002e68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e035      	b.n	8002ed8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e74:	d108      	bne.n	8002e88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e76:	897b      	ldrh	r3, [r7, #10]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e84:	611a      	str	r2, [r3, #16]
 8002e86:	e01b      	b.n	8002ec0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e88:	897b      	ldrh	r3, [r7, #10]
 8002e8a:	11db      	asrs	r3, r3, #7
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	f003 0306 	and.w	r3, r3, #6
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	f063 030f 	orn	r3, r3, #15
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	490e      	ldr	r1, [pc, #56]	@ (8002ee0 <I2C_MasterRequestWrite+0xfc>)
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 f9fc 	bl	80032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e010      	b.n	8002ed8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002eb6:	897b      	ldrh	r3, [r7, #10]
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4907      	ldr	r1, [pc, #28]	@ (8002ee4 <I2C_MasterRequestWrite+0x100>)
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f9ec 	bl	80032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	00010008 	.word	0x00010008
 8002ee4:	00010002 	.word	0x00010002

08002ee8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f0c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d006      	beq.n	8002f22 <I2C_MasterRequestRead+0x3a>
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d003      	beq.n	8002f22 <I2C_MasterRequestRead+0x3a>
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f20:	d108      	bne.n	8002f34 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	e00b      	b.n	8002f4c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f38:	2b11      	cmp	r3, #17
 8002f3a:	d107      	bne.n	8002f4c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f929 	bl	80031b0 <I2C_WaitOnFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00d      	beq.n	8002f80 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f72:	d103      	bne.n	8002f7c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e079      	b.n	8003074 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f88:	d108      	bne.n	8002f9c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f8a:	897b      	ldrh	r3, [r7, #10]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	611a      	str	r2, [r3, #16]
 8002f9a:	e05f      	b.n	800305c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f9c:	897b      	ldrh	r3, [r7, #10]
 8002f9e:	11db      	asrs	r3, r3, #7
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	f003 0306 	and.w	r3, r3, #6
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	f063 030f 	orn	r3, r3, #15
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	4930      	ldr	r1, [pc, #192]	@ (800307c <I2C_MasterRequestRead+0x194>)
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f972 	bl	80032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e054      	b.n	8003074 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fca:	897b      	ldrh	r3, [r7, #10]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	4929      	ldr	r1, [pc, #164]	@ (8003080 <I2C_MasterRequestRead+0x198>)
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f962 	bl	80032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e044      	b.n	8003074 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fea:	2300      	movs	r3, #0
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800300e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f8c7 	bl	80031b0 <I2C_WaitOnFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00d      	beq.n	8003044 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003032:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003036:	d103      	bne.n	8003040 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800303e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e017      	b.n	8003074 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003044:	897b      	ldrh	r3, [r7, #10]
 8003046:	11db      	asrs	r3, r3, #7
 8003048:	b2db      	uxtb	r3, r3
 800304a:	f003 0306 	and.w	r3, r3, #6
 800304e:	b2db      	uxtb	r3, r3
 8003050:	f063 030e 	orn	r3, r3, #14
 8003054:	b2da      	uxtb	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	4907      	ldr	r1, [pc, #28]	@ (8003080 <I2C_MasterRequestRead+0x198>)
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f91e 	bl	80032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	00010008 	.word	0x00010008
 8003080:	00010002 	.word	0x00010002

08003084 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af02      	add	r7, sp, #8
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	4608      	mov	r0, r1
 800308e:	4611      	mov	r1, r2
 8003090:	461a      	mov	r2, r3
 8003092:	4603      	mov	r3, r0
 8003094:	817b      	strh	r3, [r7, #10]
 8003096:	460b      	mov	r3, r1
 8003098:	813b      	strh	r3, [r7, #8]
 800309a:	4613      	mov	r3, r2
 800309c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f878 	bl	80031b0 <I2C_WaitOnFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00d      	beq.n	80030e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030d4:	d103      	bne.n	80030de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e05f      	b.n	80031a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030e2:	897b      	ldrh	r3, [r7, #10]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	461a      	mov	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f4:	6a3a      	ldr	r2, [r7, #32]
 80030f6:	492d      	ldr	r1, [pc, #180]	@ (80031ac <I2C_RequestMemoryWrite+0x128>)
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 f8d3 	bl	80032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e04c      	b.n	80031a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800311e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003120:	6a39      	ldr	r1, [r7, #32]
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f95e 	bl	80033e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00d      	beq.n	800314a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003132:	2b04      	cmp	r3, #4
 8003134:	d107      	bne.n	8003146 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003144:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e02b      	b.n	80031a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d105      	bne.n	800315c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003150:	893b      	ldrh	r3, [r7, #8]
 8003152:	b2da      	uxtb	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	611a      	str	r2, [r3, #16]
 800315a:	e021      	b.n	80031a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800315c:	893b      	ldrh	r3, [r7, #8]
 800315e:	0a1b      	lsrs	r3, r3, #8
 8003160:	b29b      	uxth	r3, r3
 8003162:	b2da      	uxtb	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800316a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800316c:	6a39      	ldr	r1, [r7, #32]
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f938 	bl	80033e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00d      	beq.n	8003196 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	2b04      	cmp	r3, #4
 8003180:	d107      	bne.n	8003192 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003190:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e005      	b.n	80031a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003196:	893b      	ldrh	r3, [r7, #8]
 8003198:	b2da      	uxtb	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	00010002 	.word	0x00010002

080031b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	4613      	mov	r3, r2
 80031be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031c0:	e048      	b.n	8003254 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c8:	d044      	beq.n	8003254 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ca:	f7fe fe2b 	bl	8001e24 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d302      	bcc.n	80031e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d139      	bne.n	8003254 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	0c1b      	lsrs	r3, r3, #16
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d10d      	bne.n	8003206 <I2C_WaitOnFlagUntilTimeout+0x56>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	43da      	mvns	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	4013      	ands	r3, r2
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf0c      	ite	eq
 80031fc:	2301      	moveq	r3, #1
 80031fe:	2300      	movne	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	461a      	mov	r2, r3
 8003204:	e00c      	b.n	8003220 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	43da      	mvns	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	4013      	ands	r3, r2
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	bf0c      	ite	eq
 8003218:	2301      	moveq	r3, #1
 800321a:	2300      	movne	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	461a      	mov	r2, r3
 8003220:	79fb      	ldrb	r3, [r7, #7]
 8003222:	429a      	cmp	r2, r3
 8003224:	d116      	bne.n	8003254 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	f043 0220 	orr.w	r2, r3, #32
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e023      	b.n	800329c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	0c1b      	lsrs	r3, r3, #16
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b01      	cmp	r3, #1
 800325c:	d10d      	bne.n	800327a <I2C_WaitOnFlagUntilTimeout+0xca>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	43da      	mvns	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4013      	ands	r3, r2
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	bf0c      	ite	eq
 8003270:	2301      	moveq	r3, #1
 8003272:	2300      	movne	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	461a      	mov	r2, r3
 8003278:	e00c      	b.n	8003294 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	43da      	mvns	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	4013      	ands	r3, r2
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	bf0c      	ite	eq
 800328c:	2301      	moveq	r3, #1
 800328e:	2300      	movne	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	429a      	cmp	r2, r3
 8003298:	d093      	beq.n	80031c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
 80032b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032b2:	e071      	b.n	8003398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c2:	d123      	bne.n	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f8:	f043 0204 	orr.w	r2, r3, #4
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e067      	b.n	80033dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003312:	d041      	beq.n	8003398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003314:	f7fe fd86 	bl	8001e24 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	429a      	cmp	r2, r3
 8003322:	d302      	bcc.n	800332a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d136      	bne.n	8003398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	0c1b      	lsrs	r3, r3, #16
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	d10c      	bne.n	800334e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	43da      	mvns	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4013      	ands	r3, r2
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	bf14      	ite	ne
 8003346:	2301      	movne	r3, #1
 8003348:	2300      	moveq	r3, #0
 800334a:	b2db      	uxtb	r3, r3
 800334c:	e00b      	b.n	8003366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	43da      	mvns	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	4013      	ands	r3, r2
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	bf14      	ite	ne
 8003360:	2301      	movne	r3, #1
 8003362:	2300      	moveq	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d016      	beq.n	8003398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	f043 0220 	orr.w	r2, r3, #32
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e021      	b.n	80033dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	0c1b      	lsrs	r3, r3, #16
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d10c      	bne.n	80033bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	43da      	mvns	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	4013      	ands	r3, r2
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf14      	ite	ne
 80033b4:	2301      	movne	r3, #1
 80033b6:	2300      	moveq	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	e00b      	b.n	80033d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	43da      	mvns	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4013      	ands	r3, r2
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	bf14      	ite	ne
 80033ce:	2301      	movne	r3, #1
 80033d0:	2300      	moveq	r3, #0
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f47f af6d 	bne.w	80032b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033f0:	e034      	b.n	800345c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f8e3 	bl	80035be <I2C_IsAcknowledgeFailed>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e034      	b.n	800346c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003408:	d028      	beq.n	800345c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340a:	f7fe fd0b 	bl	8001e24 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	429a      	cmp	r2, r3
 8003418:	d302      	bcc.n	8003420 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d11d      	bne.n	800345c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800342a:	2b80      	cmp	r3, #128	@ 0x80
 800342c:	d016      	beq.n	800345c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003448:	f043 0220 	orr.w	r2, r3, #32
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e007      	b.n	800346c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003466:	2b80      	cmp	r3, #128	@ 0x80
 8003468:	d1c3      	bne.n	80033f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003480:	e034      	b.n	80034ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f89b 	bl	80035be <I2C_IsAcknowledgeFailed>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e034      	b.n	80034fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003498:	d028      	beq.n	80034ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349a:	f7fe fcc3 	bl	8001e24 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d302      	bcc.n	80034b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d11d      	bne.n	80034ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d016      	beq.n	80034ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d8:	f043 0220 	orr.w	r2, r3, #32
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e007      	b.n	80034fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d1c3      	bne.n	8003482 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003510:	e049      	b.n	80035a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b10      	cmp	r3, #16
 800351e:	d119      	bne.n	8003554 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0210 	mvn.w	r2, #16
 8003528:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e030      	b.n	80035b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003554:	f7fe fc66 	bl	8001e24 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	429a      	cmp	r2, r3
 8003562:	d302      	bcc.n	800356a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d11d      	bne.n	80035a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003574:	2b40      	cmp	r3, #64	@ 0x40
 8003576:	d016      	beq.n	80035a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003592:	f043 0220 	orr.w	r2, r3, #32
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e007      	b.n	80035b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b0:	2b40      	cmp	r3, #64	@ 0x40
 80035b2:	d1ae      	bne.n	8003512 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035d4:	d11b      	bne.n	800360e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	f043 0204 	orr.w	r2, r3, #4
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e267      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d075      	beq.n	8003726 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800363a:	4b88      	ldr	r3, [pc, #544]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
 8003642:	2b04      	cmp	r3, #4
 8003644:	d00c      	beq.n	8003660 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003646:	4b85      	ldr	r3, [pc, #532]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800364e:	2b08      	cmp	r3, #8
 8003650:	d112      	bne.n	8003678 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003652:	4b82      	ldr	r3, [pc, #520]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800365a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800365e:	d10b      	bne.n	8003678 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003660:	4b7e      	ldr	r3, [pc, #504]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d05b      	beq.n	8003724 <HAL_RCC_OscConfig+0x108>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d157      	bne.n	8003724 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e242      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003680:	d106      	bne.n	8003690 <HAL_RCC_OscConfig+0x74>
 8003682:	4b76      	ldr	r3, [pc, #472]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a75      	ldr	r2, [pc, #468]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	e01d      	b.n	80036cc <HAL_RCC_OscConfig+0xb0>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003698:	d10c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x98>
 800369a:	4b70      	ldr	r3, [pc, #448]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a6f      	ldr	r2, [pc, #444]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80036a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	4b6d      	ldr	r3, [pc, #436]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a6c      	ldr	r2, [pc, #432]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80036ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	e00b      	b.n	80036cc <HAL_RCC_OscConfig+0xb0>
 80036b4:	4b69      	ldr	r3, [pc, #420]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a68      	ldr	r2, [pc, #416]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80036ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	4b66      	ldr	r3, [pc, #408]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a65      	ldr	r2, [pc, #404]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80036c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d013      	beq.n	80036fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d4:	f7fe fba6 	bl	8001e24 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036dc:	f7fe fba2 	bl	8001e24 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b64      	cmp	r3, #100	@ 0x64
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e207      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ee:	4b5b      	ldr	r3, [pc, #364]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0xc0>
 80036fa:	e014      	b.n	8003726 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7fe fb92 	bl	8001e24 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003704:	f7fe fb8e 	bl	8001e24 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b64      	cmp	r3, #100	@ 0x64
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e1f3      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003716:	4b51      	ldr	r3, [pc, #324]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0xe8>
 8003722:	e000      	b.n	8003726 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d063      	beq.n	80037fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003732:	4b4a      	ldr	r3, [pc, #296]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00b      	beq.n	8003756 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800373e:	4b47      	ldr	r3, [pc, #284]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003746:	2b08      	cmp	r3, #8
 8003748:	d11c      	bne.n	8003784 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800374a:	4b44      	ldr	r3, [pc, #272]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d116      	bne.n	8003784 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003756:	4b41      	ldr	r3, [pc, #260]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d005      	beq.n	800376e <HAL_RCC_OscConfig+0x152>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d001      	beq.n	800376e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e1c7      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376e:	4b3b      	ldr	r3, [pc, #236]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	4937      	ldr	r1, [pc, #220]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 800377e:	4313      	orrs	r3, r2
 8003780:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003782:	e03a      	b.n	80037fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d020      	beq.n	80037ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800378c:	4b34      	ldr	r3, [pc, #208]	@ (8003860 <HAL_RCC_OscConfig+0x244>)
 800378e:	2201      	movs	r2, #1
 8003790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003792:	f7fe fb47 	bl	8001e24 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800379a:	f7fe fb43 	bl	8001e24 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e1a8      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ac:	4b2b      	ldr	r3, [pc, #172]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f0      	beq.n	800379a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b8:	4b28      	ldr	r3, [pc, #160]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	4925      	ldr	r1, [pc, #148]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	600b      	str	r3, [r1, #0]
 80037cc:	e015      	b.n	80037fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ce:	4b24      	ldr	r3, [pc, #144]	@ (8003860 <HAL_RCC_OscConfig+0x244>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fe fb26 	bl	8001e24 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037dc:	f7fe fb22 	bl	8001e24 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e187      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ee:	4b1b      	ldr	r3, [pc, #108]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d036      	beq.n	8003874 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d016      	beq.n	800383c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800380e:	4b15      	ldr	r3, [pc, #84]	@ (8003864 <HAL_RCC_OscConfig+0x248>)
 8003810:	2201      	movs	r2, #1
 8003812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003814:	f7fe fb06 	bl	8001e24 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800381c:	f7fe fb02 	bl	8001e24 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e167      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800382e:	4b0b      	ldr	r3, [pc, #44]	@ (800385c <HAL_RCC_OscConfig+0x240>)
 8003830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0f0      	beq.n	800381c <HAL_RCC_OscConfig+0x200>
 800383a:	e01b      	b.n	8003874 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800383c:	4b09      	ldr	r3, [pc, #36]	@ (8003864 <HAL_RCC_OscConfig+0x248>)
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003842:	f7fe faef 	bl	8001e24 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003848:	e00e      	b.n	8003868 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800384a:	f7fe faeb 	bl	8001e24 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d907      	bls.n	8003868 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e150      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
 800385c:	40023800 	.word	0x40023800
 8003860:	42470000 	.word	0x42470000
 8003864:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003868:	4b88      	ldr	r3, [pc, #544]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 800386a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1ea      	bne.n	800384a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 8097 	beq.w	80039b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003882:	2300      	movs	r3, #0
 8003884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003886:	4b81      	ldr	r3, [pc, #516]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10f      	bne.n	80038b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	4b7d      	ldr	r3, [pc, #500]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	4a7c      	ldr	r2, [pc, #496]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 800389c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80038a2:	4b7a      	ldr	r3, [pc, #488]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038aa:	60bb      	str	r3, [r7, #8]
 80038ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ae:	2301      	movs	r3, #1
 80038b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b2:	4b77      	ldr	r3, [pc, #476]	@ (8003a90 <HAL_RCC_OscConfig+0x474>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d118      	bne.n	80038f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038be:	4b74      	ldr	r3, [pc, #464]	@ (8003a90 <HAL_RCC_OscConfig+0x474>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a73      	ldr	r2, [pc, #460]	@ (8003a90 <HAL_RCC_OscConfig+0x474>)
 80038c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ca:	f7fe faab 	bl	8001e24 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d2:	f7fe faa7 	bl	8001e24 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e10c      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003a90 <HAL_RCC_OscConfig+0x474>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0f0      	beq.n	80038d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d106      	bne.n	8003906 <HAL_RCC_OscConfig+0x2ea>
 80038f8:	4b64      	ldr	r3, [pc, #400]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 80038fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fc:	4a63      	ldr	r2, [pc, #396]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	6713      	str	r3, [r2, #112]	@ 0x70
 8003904:	e01c      	b.n	8003940 <HAL_RCC_OscConfig+0x324>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2b05      	cmp	r3, #5
 800390c:	d10c      	bne.n	8003928 <HAL_RCC_OscConfig+0x30c>
 800390e:	4b5f      	ldr	r3, [pc, #380]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003912:	4a5e      	ldr	r2, [pc, #376]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003914:	f043 0304 	orr.w	r3, r3, #4
 8003918:	6713      	str	r3, [r2, #112]	@ 0x70
 800391a:	4b5c      	ldr	r3, [pc, #368]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 800391c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391e:	4a5b      	ldr	r2, [pc, #364]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	6713      	str	r3, [r2, #112]	@ 0x70
 8003926:	e00b      	b.n	8003940 <HAL_RCC_OscConfig+0x324>
 8003928:	4b58      	ldr	r3, [pc, #352]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 800392a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392c:	4a57      	ldr	r2, [pc, #348]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 800392e:	f023 0301 	bic.w	r3, r3, #1
 8003932:	6713      	str	r3, [r2, #112]	@ 0x70
 8003934:	4b55      	ldr	r3, [pc, #340]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003938:	4a54      	ldr	r2, [pc, #336]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 800393a:	f023 0304 	bic.w	r3, r3, #4
 800393e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d015      	beq.n	8003974 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003948:	f7fe fa6c 	bl	8001e24 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394e:	e00a      	b.n	8003966 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003950:	f7fe fa68 	bl	8001e24 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e0cb      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003966:	4b49      	ldr	r3, [pc, #292]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0ee      	beq.n	8003950 <HAL_RCC_OscConfig+0x334>
 8003972:	e014      	b.n	800399e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003974:	f7fe fa56 	bl	8001e24 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800397a:	e00a      	b.n	8003992 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397c:	f7fe fa52 	bl	8001e24 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800398a:	4293      	cmp	r3, r2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e0b5      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003992:	4b3e      	ldr	r3, [pc, #248]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1ee      	bne.n	800397c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800399e:	7dfb      	ldrb	r3, [r7, #23]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d105      	bne.n	80039b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a4:	4b39      	ldr	r3, [pc, #228]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 80039a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a8:	4a38      	ldr	r2, [pc, #224]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 80039aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 80a1 	beq.w	8003afc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039ba:	4b34      	ldr	r3, [pc, #208]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d05c      	beq.n	8003a80 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d141      	bne.n	8003a52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ce:	4b31      	ldr	r3, [pc, #196]	@ (8003a94 <HAL_RCC_OscConfig+0x478>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d4:	f7fe fa26 	bl	8001e24 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039dc:	f7fe fa22 	bl	8001e24 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e087      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ee:	4b27      	ldr	r3, [pc, #156]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69da      	ldr	r2, [r3, #28]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	019b      	lsls	r3, r3, #6
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a10:	085b      	lsrs	r3, r3, #1
 8003a12:	3b01      	subs	r3, #1
 8003a14:	041b      	lsls	r3, r3, #16
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1c:	061b      	lsls	r3, r3, #24
 8003a1e:	491b      	ldr	r1, [pc, #108]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a24:	4b1b      	ldr	r3, [pc, #108]	@ (8003a94 <HAL_RCC_OscConfig+0x478>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2a:	f7fe f9fb 	bl	8001e24 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a32:	f7fe f9f7 	bl	8001e24 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e05c      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a44:	4b11      	ldr	r3, [pc, #68]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x416>
 8003a50:	e054      	b.n	8003afc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a52:	4b10      	ldr	r3, [pc, #64]	@ (8003a94 <HAL_RCC_OscConfig+0x478>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7fe f9e4 	bl	8001e24 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a60:	f7fe f9e0 	bl	8001e24 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e045      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a72:	4b06      	ldr	r3, [pc, #24]	@ (8003a8c <HAL_RCC_OscConfig+0x470>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0x444>
 8003a7e:	e03d      	b.n	8003afc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d107      	bne.n	8003a98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e038      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	40007000 	.word	0x40007000
 8003a94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a98:	4b1b      	ldr	r3, [pc, #108]	@ (8003b08 <HAL_RCC_OscConfig+0x4ec>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d028      	beq.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d121      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d11a      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ac8:	4013      	ands	r3, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ace:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d111      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ade:	085b      	lsrs	r3, r3, #1
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d107      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d001      	beq.n	8003afc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40023800 	.word	0x40023800

08003b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0cc      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b20:	4b68      	ldr	r3, [pc, #416]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d90c      	bls.n	8003b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2e:	4b65      	ldr	r3, [pc, #404]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b63      	ldr	r3, [pc, #396]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0b8      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d020      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b60:	4b59      	ldr	r3, [pc, #356]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4a58      	ldr	r2, [pc, #352]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b78:	4b53      	ldr	r3, [pc, #332]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	4a52      	ldr	r2, [pc, #328]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b84:	4b50      	ldr	r3, [pc, #320]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	494d      	ldr	r1, [pc, #308]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d044      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d107      	bne.n	8003bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003baa:	4b47      	ldr	r3, [pc, #284]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d119      	bne.n	8003bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e07f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d003      	beq.n	8003bca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d107      	bne.n	8003bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bca:	4b3f      	ldr	r3, [pc, #252]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e06f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bda:	4b3b      	ldr	r3, [pc, #236]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e067      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bea:	4b37      	ldr	r3, [pc, #220]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f023 0203 	bic.w	r2, r3, #3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4934      	ldr	r1, [pc, #208]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bfc:	f7fe f912 	bl	8001e24 <HAL_GetTick>
 8003c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c02:	e00a      	b.n	8003c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c04:	f7fe f90e 	bl	8001e24 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e04f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1a:	4b2b      	ldr	r3, [pc, #172]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 020c 	and.w	r2, r3, #12
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d1eb      	bne.n	8003c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c2c:	4b25      	ldr	r3, [pc, #148]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d20c      	bcs.n	8003c54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3a:	4b22      	ldr	r3, [pc, #136]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c42:	4b20      	ldr	r3, [pc, #128]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e032      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c60:	4b19      	ldr	r3, [pc, #100]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4916      	ldr	r1, [pc, #88]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c7e:	4b12      	ldr	r3, [pc, #72]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	490e      	ldr	r1, [pc, #56]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c92:	f000 f821 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8003c96:	4602      	mov	r2, r0
 8003c98:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	490a      	ldr	r1, [pc, #40]	@ (8003ccc <HAL_RCC_ClockConfig+0x1c0>)
 8003ca4:	5ccb      	ldrb	r3, [r1, r3]
 8003ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8003caa:	4a09      	ldr	r2, [pc, #36]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003cae:	4b09      	ldr	r3, [pc, #36]	@ (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fd fe16 	bl	80018e4 <HAL_InitTick>

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40023c00 	.word	0x40023c00
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	0800c42c 	.word	0x0800c42c
 8003cd0:	20000000 	.word	0x20000000
 8003cd4:	20000004 	.word	0x20000004

08003cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cdc:	b090      	sub	sp, #64	@ 0x40
 8003cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cf0:	4b59      	ldr	r3, [pc, #356]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 030c 	and.w	r3, r3, #12
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d00d      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0x40>
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	f200 80a1 	bhi.w	8003e44 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <HAL_RCC_GetSysClockFreq+0x34>
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d003      	beq.n	8003d12 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d0a:	e09b      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d0c:	4b53      	ldr	r3, [pc, #332]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x184>)
 8003d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d10:	e09b      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d12:	4b53      	ldr	r3, [pc, #332]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d16:	e098      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d18:	4b4f      	ldr	r3, [pc, #316]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d20:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d22:	4b4d      	ldr	r3, [pc, #308]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d028      	beq.n	8003d80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d2e:	4b4a      	ldr	r3, [pc, #296]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	099b      	lsrs	r3, r3, #6
 8003d34:	2200      	movs	r2, #0
 8003d36:	623b      	str	r3, [r7, #32]
 8003d38:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d40:	2100      	movs	r1, #0
 8003d42:	4b47      	ldr	r3, [pc, #284]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d44:	fb03 f201 	mul.w	r2, r3, r1
 8003d48:	2300      	movs	r3, #0
 8003d4a:	fb00 f303 	mul.w	r3, r0, r3
 8003d4e:	4413      	add	r3, r2
 8003d50:	4a43      	ldr	r2, [pc, #268]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d52:	fba0 1202 	umull	r1, r2, r0, r2
 8003d56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d58:	460a      	mov	r2, r1
 8003d5a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003d5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d5e:	4413      	add	r3, r2
 8003d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d64:	2200      	movs	r2, #0
 8003d66:	61bb      	str	r3, [r7, #24]
 8003d68:	61fa      	str	r2, [r7, #28]
 8003d6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003d72:	f7fc ff71 	bl	8000c58 <__aeabi_uldivmod>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d7e:	e053      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d80:	4b35      	ldr	r3, [pc, #212]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	099b      	lsrs	r3, r3, #6
 8003d86:	2200      	movs	r2, #0
 8003d88:	613b      	str	r3, [r7, #16]
 8003d8a:	617a      	str	r2, [r7, #20]
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d92:	f04f 0b00 	mov.w	fp, #0
 8003d96:	4652      	mov	r2, sl
 8003d98:	465b      	mov	r3, fp
 8003d9a:	f04f 0000 	mov.w	r0, #0
 8003d9e:	f04f 0100 	mov.w	r1, #0
 8003da2:	0159      	lsls	r1, r3, #5
 8003da4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003da8:	0150      	lsls	r0, r2, #5
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	ebb2 080a 	subs.w	r8, r2, sl
 8003db2:	eb63 090b 	sbc.w	r9, r3, fp
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003dc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003dc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003dca:	ebb2 0408 	subs.w	r4, r2, r8
 8003dce:	eb63 0509 	sbc.w	r5, r3, r9
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	00eb      	lsls	r3, r5, #3
 8003ddc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003de0:	00e2      	lsls	r2, r4, #3
 8003de2:	4614      	mov	r4, r2
 8003de4:	461d      	mov	r5, r3
 8003de6:	eb14 030a 	adds.w	r3, r4, sl
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	eb45 030b 	adc.w	r3, r5, fp
 8003df0:	607b      	str	r3, [r7, #4]
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dfe:	4629      	mov	r1, r5
 8003e00:	028b      	lsls	r3, r1, #10
 8003e02:	4621      	mov	r1, r4
 8003e04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e08:	4621      	mov	r1, r4
 8003e0a:	028a      	lsls	r2, r1, #10
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	4619      	mov	r1, r3
 8003e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e12:	2200      	movs	r2, #0
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	60fa      	str	r2, [r7, #12]
 8003e18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e1c:	f7fc ff1c 	bl	8000c58 <__aeabi_uldivmod>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4613      	mov	r3, r2
 8003e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003e28:	4b0b      	ldr	r3, [pc, #44]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	0c1b      	lsrs	r3, r3, #16
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	3301      	adds	r3, #1
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003e38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e42:	e002      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e44:	4b05      	ldr	r3, [pc, #20]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x184>)
 8003e46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3740      	adds	r7, #64	@ 0x40
 8003e50:	46bd      	mov	sp, r7
 8003e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e56:	bf00      	nop
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	00f42400 	.word	0x00f42400
 8003e60:	017d7840 	.word	0x017d7840

08003e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e68:	4b03      	ldr	r3, [pc, #12]	@ (8003e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	20000000 	.word	0x20000000

08003e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e80:	f7ff fff0 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8003e84:	4602      	mov	r2, r0
 8003e86:	4b05      	ldr	r3, [pc, #20]	@ (8003e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	0a9b      	lsrs	r3, r3, #10
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	4903      	ldr	r1, [pc, #12]	@ (8003ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e92:	5ccb      	ldrb	r3, [r1, r3]
 8003e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	0800c43c 	.word	0x0800c43c

08003ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ea8:	f7ff ffdc 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8003eac:	4602      	mov	r2, r0
 8003eae:	4b05      	ldr	r3, [pc, #20]	@ (8003ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	0b5b      	lsrs	r3, r3, #13
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	4903      	ldr	r1, [pc, #12]	@ (8003ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eba:	5ccb      	ldrb	r3, [r1, r3]
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	0800c43c 	.word	0x0800c43c

08003ecc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	220f      	movs	r2, #15
 8003eda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003edc:	4b12      	ldr	r3, [pc, #72]	@ (8003f28 <HAL_RCC_GetClockConfig+0x5c>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 0203 	and.w	r2, r3, #3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8003f28 <HAL_RCC_GetClockConfig+0x5c>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8003f28 <HAL_RCC_GetClockConfig+0x5c>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f00:	4b09      	ldr	r3, [pc, #36]	@ (8003f28 <HAL_RCC_GetClockConfig+0x5c>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	08db      	lsrs	r3, r3, #3
 8003f06:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f0e:	4b07      	ldr	r3, [pc, #28]	@ (8003f2c <HAL_RCC_GetClockConfig+0x60>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0207 	and.w	r2, r3, #7
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	601a      	str	r2, [r3, #0]
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	40023c00 	.word	0x40023c00

08003f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e041      	b.n	8003fc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f839 	bl	8003fce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4610      	mov	r0, r2
 8003f70:	f000 f9b2 	bl	80042d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
	...

08003fe4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d001      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e044      	b.n	8004086 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0201 	orr.w	r2, r2, #1
 8004012:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a1e      	ldr	r2, [pc, #120]	@ (8004094 <HAL_TIM_Base_Start_IT+0xb0>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d018      	beq.n	8004050 <HAL_TIM_Base_Start_IT+0x6c>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004026:	d013      	beq.n	8004050 <HAL_TIM_Base_Start_IT+0x6c>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a1a      	ldr	r2, [pc, #104]	@ (8004098 <HAL_TIM_Base_Start_IT+0xb4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00e      	beq.n	8004050 <HAL_TIM_Base_Start_IT+0x6c>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a19      	ldr	r2, [pc, #100]	@ (800409c <HAL_TIM_Base_Start_IT+0xb8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d009      	beq.n	8004050 <HAL_TIM_Base_Start_IT+0x6c>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a17      	ldr	r2, [pc, #92]	@ (80040a0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d004      	beq.n	8004050 <HAL_TIM_Base_Start_IT+0x6c>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a16      	ldr	r2, [pc, #88]	@ (80040a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d111      	bne.n	8004074 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b06      	cmp	r3, #6
 8004060:	d010      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0201 	orr.w	r2, r2, #1
 8004070:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004072:	e007      	b.n	8004084 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	40010000 	.word	0x40010000
 8004098:	40000400 	.word	0x40000400
 800409c:	40000800 	.word	0x40000800
 80040a0:	40000c00 	.word	0x40000c00
 80040a4:	40014000 	.word	0x40014000

080040a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d020      	beq.n	800410c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01b      	beq.n	800410c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f06f 0202 	mvn.w	r2, #2
 80040dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f8d2 	bl	800429c <HAL_TIM_IC_CaptureCallback>
 80040f8:	e005      	b.n	8004106 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f8c4 	bl	8004288 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f8d5 	bl	80042b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b00      	cmp	r3, #0
 8004114:	d020      	beq.n	8004158 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01b      	beq.n	8004158 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0204 	mvn.w	r2, #4
 8004128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2202      	movs	r2, #2
 800412e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f8ac 	bl	800429c <HAL_TIM_IC_CaptureCallback>
 8004144:	e005      	b.n	8004152 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f89e 	bl	8004288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f8af 	bl	80042b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d020      	beq.n	80041a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01b      	beq.n	80041a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0208 	mvn.w	r2, #8
 8004174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2204      	movs	r2, #4
 800417a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f886 	bl	800429c <HAL_TIM_IC_CaptureCallback>
 8004190:	e005      	b.n	800419e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f878 	bl	8004288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f889 	bl	80042b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d020      	beq.n	80041f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f003 0310 	and.w	r3, r3, #16
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d01b      	beq.n	80041f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f06f 0210 	mvn.w	r2, #16
 80041c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2208      	movs	r2, #8
 80041c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f860 	bl	800429c <HAL_TIM_IC_CaptureCallback>
 80041dc:	e005      	b.n	80041ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f852 	bl	8004288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f863 	bl	80042b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00c      	beq.n	8004214 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d007      	beq.n	8004214 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0201 	mvn.w	r2, #1
 800420c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fd fb24 	bl	800185c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00c      	beq.n	8004238 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004224:	2b00      	cmp	r3, #0
 8004226:	d007      	beq.n	8004238 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f8e6 	bl	8004404 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00c      	beq.n	800425c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004248:	2b00      	cmp	r3, #0
 800424a:	d007      	beq.n	800425c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f834 	bl	80042c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00c      	beq.n	8004280 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b00      	cmp	r3, #0
 800426e:	d007      	beq.n	8004280 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0220 	mvn.w	r2, #32
 8004278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f8b8 	bl	80043f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004280:	bf00      	nop
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a3a      	ldr	r2, [pc, #232]	@ (80043d4 <TIM_Base_SetConfig+0xfc>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00f      	beq.n	8004310 <TIM_Base_SetConfig+0x38>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f6:	d00b      	beq.n	8004310 <TIM_Base_SetConfig+0x38>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a37      	ldr	r2, [pc, #220]	@ (80043d8 <TIM_Base_SetConfig+0x100>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d007      	beq.n	8004310 <TIM_Base_SetConfig+0x38>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a36      	ldr	r2, [pc, #216]	@ (80043dc <TIM_Base_SetConfig+0x104>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d003      	beq.n	8004310 <TIM_Base_SetConfig+0x38>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a35      	ldr	r2, [pc, #212]	@ (80043e0 <TIM_Base_SetConfig+0x108>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d108      	bne.n	8004322 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a2b      	ldr	r2, [pc, #172]	@ (80043d4 <TIM_Base_SetConfig+0xfc>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d01b      	beq.n	8004362 <TIM_Base_SetConfig+0x8a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004330:	d017      	beq.n	8004362 <TIM_Base_SetConfig+0x8a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a28      	ldr	r2, [pc, #160]	@ (80043d8 <TIM_Base_SetConfig+0x100>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d013      	beq.n	8004362 <TIM_Base_SetConfig+0x8a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a27      	ldr	r2, [pc, #156]	@ (80043dc <TIM_Base_SetConfig+0x104>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d00f      	beq.n	8004362 <TIM_Base_SetConfig+0x8a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a26      	ldr	r2, [pc, #152]	@ (80043e0 <TIM_Base_SetConfig+0x108>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00b      	beq.n	8004362 <TIM_Base_SetConfig+0x8a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a25      	ldr	r2, [pc, #148]	@ (80043e4 <TIM_Base_SetConfig+0x10c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d007      	beq.n	8004362 <TIM_Base_SetConfig+0x8a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a24      	ldr	r2, [pc, #144]	@ (80043e8 <TIM_Base_SetConfig+0x110>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d003      	beq.n	8004362 <TIM_Base_SetConfig+0x8a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a23      	ldr	r2, [pc, #140]	@ (80043ec <TIM_Base_SetConfig+0x114>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d108      	bne.n	8004374 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a0e      	ldr	r2, [pc, #56]	@ (80043d4 <TIM_Base_SetConfig+0xfc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d103      	bne.n	80043a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d105      	bne.n	80043c6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f023 0201 	bic.w	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	611a      	str	r2, [r3, #16]
  }
}
 80043c6:	bf00      	nop
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40010000 	.word	0x40010000
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40000800 	.word	0x40000800
 80043e0:	40000c00 	.word	0x40000c00
 80043e4:	40014000 	.word	0x40014000
 80043e8:	40014400 	.word	0x40014400
 80043ec:	40014800 	.word	0x40014800

080043f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e042      	b.n	80044b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fd fc14 	bl	8001c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2224      	movs	r2, #36	@ 0x24
 8004448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800445a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f973 	bl	8004748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695a      	ldr	r2, [r3, #20]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68da      	ldr	r2, [r3, #12]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08a      	sub	sp, #40	@ 0x28
 80044bc:	af02      	add	r7, sp, #8
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	4613      	mov	r3, r2
 80044c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	d175      	bne.n	80045c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_UART_Transmit+0x2c>
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e06e      	b.n	80045c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2221      	movs	r2, #33	@ 0x21
 80044f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044f6:	f7fd fc95 	bl	8001e24 <HAL_GetTick>
 80044fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	88fa      	ldrh	r2, [r7, #6]
 8004500:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	88fa      	ldrh	r2, [r7, #6]
 8004506:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004510:	d108      	bne.n	8004524 <HAL_UART_Transmit+0x6c>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d104      	bne.n	8004524 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800451a:	2300      	movs	r3, #0
 800451c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	e003      	b.n	800452c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004528:	2300      	movs	r3, #0
 800452a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800452c:	e02e      	b.n	800458c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2200      	movs	r2, #0
 8004536:	2180      	movs	r1, #128	@ 0x80
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f848 	bl	80045ce <UART_WaitOnFlagUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d005      	beq.n	8004550 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e03a      	b.n	80045c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10b      	bne.n	800456e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004564:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	3302      	adds	r3, #2
 800456a:	61bb      	str	r3, [r7, #24]
 800456c:	e007      	b.n	800457e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	781a      	ldrb	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	3301      	adds	r3, #1
 800457c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1cb      	bne.n	800452e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2200      	movs	r2, #0
 800459e:	2140      	movs	r1, #64	@ 0x40
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 f814 	bl	80045ce <UART_WaitOnFlagUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e006      	b.n	80045c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	e000      	b.n	80045c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80045c4:	2302      	movs	r3, #2
  }
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3720      	adds	r7, #32
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b086      	sub	sp, #24
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	603b      	str	r3, [r7, #0]
 80045da:	4613      	mov	r3, r2
 80045dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045de:	e03b      	b.n	8004658 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e6:	d037      	beq.n	8004658 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e8:	f7fd fc1c 	bl	8001e24 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	6a3a      	ldr	r2, [r7, #32]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d302      	bcc.n	80045fe <UART_WaitOnFlagUntilTimeout+0x30>
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e03a      	b.n	8004678 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d023      	beq.n	8004658 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b80      	cmp	r3, #128	@ 0x80
 8004614:	d020      	beq.n	8004658 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b40      	cmp	r3, #64	@ 0x40
 800461a:	d01d      	beq.n	8004658 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b08      	cmp	r3, #8
 8004628:	d116      	bne.n	8004658 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 f81d 	bl	8004680 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2208      	movs	r2, #8
 800464a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e00f      	b.n	8004678 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4013      	ands	r3, r2
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	429a      	cmp	r2, r3
 8004666:	bf0c      	ite	eq
 8004668:	2301      	moveq	r3, #1
 800466a:	2300      	movne	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	461a      	mov	r2, r3
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	429a      	cmp	r2, r3
 8004674:	d0b4      	beq.n	80045e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004680:	b480      	push	{r7}
 8004682:	b095      	sub	sp, #84	@ 0x54
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	330c      	adds	r3, #12
 800468e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004692:	e853 3f00 	ldrex	r3, [r3]
 8004696:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800469e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	330c      	adds	r3, #12
 80046a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80046aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046b0:	e841 2300 	strex	r3, r2, [r1]
 80046b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e5      	bne.n	8004688 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3314      	adds	r3, #20
 80046c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	e853 3f00 	ldrex	r3, [r3]
 80046ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	f023 0301 	bic.w	r3, r3, #1
 80046d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3314      	adds	r3, #20
 80046da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046e4:	e841 2300 	strex	r3, r2, [r1]
 80046e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e5      	bne.n	80046bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d119      	bne.n	800472c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	330c      	adds	r3, #12
 80046fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	60bb      	str	r3, [r7, #8]
   return(result);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f023 0310 	bic.w	r3, r3, #16
 800470e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004718:	61ba      	str	r2, [r7, #24]
 800471a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	6979      	ldr	r1, [r7, #20]
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	e841 2300 	strex	r3, r2, [r1]
 8004724:	613b      	str	r3, [r7, #16]
   return(result);
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e5      	bne.n	80046f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800473a:	bf00      	nop
 800473c:	3754      	adds	r7, #84	@ 0x54
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800474c:	b0c0      	sub	sp, #256	@ 0x100
 800474e:	af00      	add	r7, sp, #0
 8004750:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004764:	68d9      	ldr	r1, [r3, #12]
 8004766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	ea40 0301 	orr.w	r3, r0, r1
 8004770:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	431a      	orrs	r2, r3
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	431a      	orrs	r2, r3
 8004788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80047a0:	f021 010c 	bic.w	r1, r1, #12
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80047ae:	430b      	orrs	r3, r1
 80047b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80047be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c2:	6999      	ldr	r1, [r3, #24]
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	ea40 0301 	orr.w	r3, r0, r1
 80047ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	4b8f      	ldr	r3, [pc, #572]	@ (8004a14 <UART_SetConfig+0x2cc>)
 80047d8:	429a      	cmp	r2, r3
 80047da:	d005      	beq.n	80047e8 <UART_SetConfig+0xa0>
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4b8d      	ldr	r3, [pc, #564]	@ (8004a18 <UART_SetConfig+0x2d0>)
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d104      	bne.n	80047f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047e8:	f7ff fb5c 	bl	8003ea4 <HAL_RCC_GetPCLK2Freq>
 80047ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80047f0:	e003      	b.n	80047fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047f2:	f7ff fb43 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
 80047f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004804:	f040 810c 	bne.w	8004a20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800480c:	2200      	movs	r2, #0
 800480e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004812:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004816:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800481a:	4622      	mov	r2, r4
 800481c:	462b      	mov	r3, r5
 800481e:	1891      	adds	r1, r2, r2
 8004820:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004822:	415b      	adcs	r3, r3
 8004824:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004826:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800482a:	4621      	mov	r1, r4
 800482c:	eb12 0801 	adds.w	r8, r2, r1
 8004830:	4629      	mov	r1, r5
 8004832:	eb43 0901 	adc.w	r9, r3, r1
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004842:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004846:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800484a:	4690      	mov	r8, r2
 800484c:	4699      	mov	r9, r3
 800484e:	4623      	mov	r3, r4
 8004850:	eb18 0303 	adds.w	r3, r8, r3
 8004854:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004858:	462b      	mov	r3, r5
 800485a:	eb49 0303 	adc.w	r3, r9, r3
 800485e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800486e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004872:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004876:	460b      	mov	r3, r1
 8004878:	18db      	adds	r3, r3, r3
 800487a:	653b      	str	r3, [r7, #80]	@ 0x50
 800487c:	4613      	mov	r3, r2
 800487e:	eb42 0303 	adc.w	r3, r2, r3
 8004882:	657b      	str	r3, [r7, #84]	@ 0x54
 8004884:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004888:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800488c:	f7fc f9e4 	bl	8000c58 <__aeabi_uldivmod>
 8004890:	4602      	mov	r2, r0
 8004892:	460b      	mov	r3, r1
 8004894:	4b61      	ldr	r3, [pc, #388]	@ (8004a1c <UART_SetConfig+0x2d4>)
 8004896:	fba3 2302 	umull	r2, r3, r3, r2
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	011c      	lsls	r4, r3, #4
 800489e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048a2:	2200      	movs	r2, #0
 80048a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80048ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80048b0:	4642      	mov	r2, r8
 80048b2:	464b      	mov	r3, r9
 80048b4:	1891      	adds	r1, r2, r2
 80048b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80048b8:	415b      	adcs	r3, r3
 80048ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80048c0:	4641      	mov	r1, r8
 80048c2:	eb12 0a01 	adds.w	sl, r2, r1
 80048c6:	4649      	mov	r1, r9
 80048c8:	eb43 0b01 	adc.w	fp, r3, r1
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048e0:	4692      	mov	sl, r2
 80048e2:	469b      	mov	fp, r3
 80048e4:	4643      	mov	r3, r8
 80048e6:	eb1a 0303 	adds.w	r3, sl, r3
 80048ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048ee:	464b      	mov	r3, r9
 80048f0:	eb4b 0303 	adc.w	r3, fp, r3
 80048f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004904:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004908:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800490c:	460b      	mov	r3, r1
 800490e:	18db      	adds	r3, r3, r3
 8004910:	643b      	str	r3, [r7, #64]	@ 0x40
 8004912:	4613      	mov	r3, r2
 8004914:	eb42 0303 	adc.w	r3, r2, r3
 8004918:	647b      	str	r3, [r7, #68]	@ 0x44
 800491a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800491e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004922:	f7fc f999 	bl	8000c58 <__aeabi_uldivmod>
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	4611      	mov	r1, r2
 800492c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a1c <UART_SetConfig+0x2d4>)
 800492e:	fba3 2301 	umull	r2, r3, r3, r1
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	2264      	movs	r2, #100	@ 0x64
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	1acb      	subs	r3, r1, r3
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004942:	4b36      	ldr	r3, [pc, #216]	@ (8004a1c <UART_SetConfig+0x2d4>)
 8004944:	fba3 2302 	umull	r2, r3, r3, r2
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004950:	441c      	add	r4, r3
 8004952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004956:	2200      	movs	r2, #0
 8004958:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800495c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004960:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004964:	4642      	mov	r2, r8
 8004966:	464b      	mov	r3, r9
 8004968:	1891      	adds	r1, r2, r2
 800496a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800496c:	415b      	adcs	r3, r3
 800496e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004970:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004974:	4641      	mov	r1, r8
 8004976:	1851      	adds	r1, r2, r1
 8004978:	6339      	str	r1, [r7, #48]	@ 0x30
 800497a:	4649      	mov	r1, r9
 800497c:	414b      	adcs	r3, r1
 800497e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800498c:	4659      	mov	r1, fp
 800498e:	00cb      	lsls	r3, r1, #3
 8004990:	4651      	mov	r1, sl
 8004992:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004996:	4651      	mov	r1, sl
 8004998:	00ca      	lsls	r2, r1, #3
 800499a:	4610      	mov	r0, r2
 800499c:	4619      	mov	r1, r3
 800499e:	4603      	mov	r3, r0
 80049a0:	4642      	mov	r2, r8
 80049a2:	189b      	adds	r3, r3, r2
 80049a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049a8:	464b      	mov	r3, r9
 80049aa:	460a      	mov	r2, r1
 80049ac:	eb42 0303 	adc.w	r3, r2, r3
 80049b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80049c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80049c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80049c8:	460b      	mov	r3, r1
 80049ca:	18db      	adds	r3, r3, r3
 80049cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049ce:	4613      	mov	r3, r2
 80049d0:	eb42 0303 	adc.w	r3, r2, r3
 80049d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80049de:	f7fc f93b 	bl	8000c58 <__aeabi_uldivmod>
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	4b0d      	ldr	r3, [pc, #52]	@ (8004a1c <UART_SetConfig+0x2d4>)
 80049e8:	fba3 1302 	umull	r1, r3, r3, r2
 80049ec:	095b      	lsrs	r3, r3, #5
 80049ee:	2164      	movs	r1, #100	@ 0x64
 80049f0:	fb01 f303 	mul.w	r3, r1, r3
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	3332      	adds	r3, #50	@ 0x32
 80049fa:	4a08      	ldr	r2, [pc, #32]	@ (8004a1c <UART_SetConfig+0x2d4>)
 80049fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004a00:	095b      	lsrs	r3, r3, #5
 8004a02:	f003 0207 	and.w	r2, r3, #7
 8004a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4422      	add	r2, r4
 8004a0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a10:	e106      	b.n	8004c20 <UART_SetConfig+0x4d8>
 8004a12:	bf00      	nop
 8004a14:	40011000 	.word	0x40011000
 8004a18:	40011400 	.word	0x40011400
 8004a1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a24:	2200      	movs	r2, #0
 8004a26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a2a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a32:	4642      	mov	r2, r8
 8004a34:	464b      	mov	r3, r9
 8004a36:	1891      	adds	r1, r2, r2
 8004a38:	6239      	str	r1, [r7, #32]
 8004a3a:	415b      	adcs	r3, r3
 8004a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a42:	4641      	mov	r1, r8
 8004a44:	1854      	adds	r4, r2, r1
 8004a46:	4649      	mov	r1, r9
 8004a48:	eb43 0501 	adc.w	r5, r3, r1
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	00eb      	lsls	r3, r5, #3
 8004a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a5a:	00e2      	lsls	r2, r4, #3
 8004a5c:	4614      	mov	r4, r2
 8004a5e:	461d      	mov	r5, r3
 8004a60:	4643      	mov	r3, r8
 8004a62:	18e3      	adds	r3, r4, r3
 8004a64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a68:	464b      	mov	r3, r9
 8004a6a:	eb45 0303 	adc.w	r3, r5, r3
 8004a6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a8e:	4629      	mov	r1, r5
 8004a90:	008b      	lsls	r3, r1, #2
 8004a92:	4621      	mov	r1, r4
 8004a94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a98:	4621      	mov	r1, r4
 8004a9a:	008a      	lsls	r2, r1, #2
 8004a9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004aa0:	f7fc f8da 	bl	8000c58 <__aeabi_uldivmod>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4b60      	ldr	r3, [pc, #384]	@ (8004c2c <UART_SetConfig+0x4e4>)
 8004aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	011c      	lsls	r4, r3, #4
 8004ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004abc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ac0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ac4:	4642      	mov	r2, r8
 8004ac6:	464b      	mov	r3, r9
 8004ac8:	1891      	adds	r1, r2, r2
 8004aca:	61b9      	str	r1, [r7, #24]
 8004acc:	415b      	adcs	r3, r3
 8004ace:	61fb      	str	r3, [r7, #28]
 8004ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ad4:	4641      	mov	r1, r8
 8004ad6:	1851      	adds	r1, r2, r1
 8004ad8:	6139      	str	r1, [r7, #16]
 8004ada:	4649      	mov	r1, r9
 8004adc:	414b      	adcs	r3, r1
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004aec:	4659      	mov	r1, fp
 8004aee:	00cb      	lsls	r3, r1, #3
 8004af0:	4651      	mov	r1, sl
 8004af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004af6:	4651      	mov	r1, sl
 8004af8:	00ca      	lsls	r2, r1, #3
 8004afa:	4610      	mov	r0, r2
 8004afc:	4619      	mov	r1, r3
 8004afe:	4603      	mov	r3, r0
 8004b00:	4642      	mov	r2, r8
 8004b02:	189b      	adds	r3, r3, r2
 8004b04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b08:	464b      	mov	r3, r9
 8004b0a:	460a      	mov	r2, r1
 8004b0c:	eb42 0303 	adc.w	r3, r2, r3
 8004b10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b1e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b2c:	4649      	mov	r1, r9
 8004b2e:	008b      	lsls	r3, r1, #2
 8004b30:	4641      	mov	r1, r8
 8004b32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b36:	4641      	mov	r1, r8
 8004b38:	008a      	lsls	r2, r1, #2
 8004b3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b3e:	f7fc f88b 	bl	8000c58 <__aeabi_uldivmod>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	4611      	mov	r1, r2
 8004b48:	4b38      	ldr	r3, [pc, #224]	@ (8004c2c <UART_SetConfig+0x4e4>)
 8004b4a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	2264      	movs	r2, #100	@ 0x64
 8004b52:	fb02 f303 	mul.w	r3, r2, r3
 8004b56:	1acb      	subs	r3, r1, r3
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	3332      	adds	r3, #50	@ 0x32
 8004b5c:	4a33      	ldr	r2, [pc, #204]	@ (8004c2c <UART_SetConfig+0x4e4>)
 8004b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b62:	095b      	lsrs	r3, r3, #5
 8004b64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b68:	441c      	add	r4, r3
 8004b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b6e:	2200      	movs	r2, #0
 8004b70:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b72:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b78:	4642      	mov	r2, r8
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	1891      	adds	r1, r2, r2
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	415b      	adcs	r3, r3
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b88:	4641      	mov	r1, r8
 8004b8a:	1851      	adds	r1, r2, r1
 8004b8c:	6039      	str	r1, [r7, #0]
 8004b8e:	4649      	mov	r1, r9
 8004b90:	414b      	adcs	r3, r1
 8004b92:	607b      	str	r3, [r7, #4]
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ba0:	4659      	mov	r1, fp
 8004ba2:	00cb      	lsls	r3, r1, #3
 8004ba4:	4651      	mov	r1, sl
 8004ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004baa:	4651      	mov	r1, sl
 8004bac:	00ca      	lsls	r2, r1, #3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	4642      	mov	r2, r8
 8004bb6:	189b      	adds	r3, r3, r2
 8004bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bba:	464b      	mov	r3, r9
 8004bbc:	460a      	mov	r2, r1
 8004bbe:	eb42 0303 	adc.w	r3, r2, r3
 8004bc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bce:	667a      	str	r2, [r7, #100]	@ 0x64
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004bdc:	4649      	mov	r1, r9
 8004bde:	008b      	lsls	r3, r1, #2
 8004be0:	4641      	mov	r1, r8
 8004be2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004be6:	4641      	mov	r1, r8
 8004be8:	008a      	lsls	r2, r1, #2
 8004bea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004bee:	f7fc f833 	bl	8000c58 <__aeabi_uldivmod>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8004c2c <UART_SetConfig+0x4e4>)
 8004bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bfc:	095b      	lsrs	r3, r3, #5
 8004bfe:	2164      	movs	r1, #100	@ 0x64
 8004c00:	fb01 f303 	mul.w	r3, r1, r3
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	3332      	adds	r3, #50	@ 0x32
 8004c0a:	4a08      	ldr	r2, [pc, #32]	@ (8004c2c <UART_SetConfig+0x4e4>)
 8004c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c10:	095b      	lsrs	r3, r3, #5
 8004c12:	f003 020f 	and.w	r2, r3, #15
 8004c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4422      	add	r2, r4
 8004c1e:	609a      	str	r2, [r3, #8]
}
 8004c20:	bf00      	nop
 8004c22:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c26:	46bd      	mov	sp, r7
 8004c28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c2c:	51eb851f 	.word	0x51eb851f

08004c30 <__NVIC_SetPriority>:
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	6039      	str	r1, [r7, #0]
 8004c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	db0a      	blt.n	8004c5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	490c      	ldr	r1, [pc, #48]	@ (8004c7c <__NVIC_SetPriority+0x4c>)
 8004c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4e:	0112      	lsls	r2, r2, #4
 8004c50:	b2d2      	uxtb	r2, r2
 8004c52:	440b      	add	r3, r1
 8004c54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004c58:	e00a      	b.n	8004c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	4908      	ldr	r1, [pc, #32]	@ (8004c80 <__NVIC_SetPriority+0x50>)
 8004c60:	79fb      	ldrb	r3, [r7, #7]
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	3b04      	subs	r3, #4
 8004c68:	0112      	lsls	r2, r2, #4
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	761a      	strb	r2, [r3, #24]
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	e000e100 	.word	0xe000e100
 8004c80:	e000ed00 	.word	0xe000ed00

08004c84 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004c88:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <SysTick_Handler+0x1c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004c8c:	f002 f880 	bl	8006d90 <xTaskGetSchedulerState>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d001      	beq.n	8004c9a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004c96:	f002 ff77 	bl	8007b88 <xPortSysTickHandler>
  }
}
 8004c9a:	bf00      	nop
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	e000e010 	.word	0xe000e010

08004ca4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004ca8:	2100      	movs	r1, #0
 8004caa:	f06f 0004 	mvn.w	r0, #4
 8004cae:	f7ff ffbf 	bl	8004c30 <__NVIC_SetPriority>
#endif
}
 8004cb2:	bf00      	nop
 8004cb4:	bd80      	pop	{r7, pc}
	...

08004cb8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cbe:	f3ef 8305 	mrs	r3, IPSR
 8004cc2:	603b      	str	r3, [r7, #0]
  return(result);
 8004cc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004cca:	f06f 0305 	mvn.w	r3, #5
 8004cce:	607b      	str	r3, [r7, #4]
 8004cd0:	e00c      	b.n	8004cec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004cfc <osKernelInitialize+0x44>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d105      	bne.n	8004ce6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004cda:	4b08      	ldr	r3, [pc, #32]	@ (8004cfc <osKernelInitialize+0x44>)
 8004cdc:	2201      	movs	r2, #1
 8004cde:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	607b      	str	r3, [r7, #4]
 8004ce4:	e002      	b.n	8004cec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004cec:	687b      	ldr	r3, [r7, #4]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	200003b0 	.word	0x200003b0

08004d00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d06:	f3ef 8305 	mrs	r3, IPSR
 8004d0a:	603b      	str	r3, [r7, #0]
  return(result);
 8004d0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004d12:	f06f 0305 	mvn.w	r3, #5
 8004d16:	607b      	str	r3, [r7, #4]
 8004d18:	e010      	b.n	8004d3c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d48 <osKernelStart+0x48>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d109      	bne.n	8004d36 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004d22:	f7ff ffbf 	bl	8004ca4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004d26:	4b08      	ldr	r3, [pc, #32]	@ (8004d48 <osKernelStart+0x48>)
 8004d28:	2202      	movs	r2, #2
 8004d2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004d2c:	f001 fbbc 	bl	80064a8 <vTaskStartScheduler>
      stat = osOK;
 8004d30:	2300      	movs	r3, #0
 8004d32:	607b      	str	r3, [r7, #4]
 8004d34:	e002      	b.n	8004d3c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004d36:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d3c:	687b      	ldr	r3, [r7, #4]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	200003b0 	.word	0x200003b0

08004d4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08e      	sub	sp, #56	@ 0x38
 8004d50:	af04      	add	r7, sp, #16
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d5c:	f3ef 8305 	mrs	r3, IPSR
 8004d60:	617b      	str	r3, [r7, #20]
  return(result);
 8004d62:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d17e      	bne.n	8004e66 <osThreadNew+0x11a>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d07b      	beq.n	8004e66 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004d6e:	2380      	movs	r3, #128	@ 0x80
 8004d70:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004d72:	2318      	movs	r3, #24
 8004d74:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d7e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d045      	beq.n	8004e12 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <osThreadNew+0x48>
        name = attr->name;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d008      	beq.n	8004dba <osThreadNew+0x6e>
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	2b38      	cmp	r3, #56	@ 0x38
 8004dac:	d805      	bhi.n	8004dba <osThreadNew+0x6e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <osThreadNew+0x72>
        return (NULL);
 8004dba:	2300      	movs	r3, #0
 8004dbc:	e054      	b.n	8004e68 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	089b      	lsrs	r3, r3, #2
 8004dcc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00e      	beq.n	8004df4 <osThreadNew+0xa8>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	2ba7      	cmp	r3, #167	@ 0xa7
 8004ddc:	d90a      	bls.n	8004df4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d006      	beq.n	8004df4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <osThreadNew+0xa8>
        mem = 1;
 8004dee:	2301      	movs	r3, #1
 8004df0:	61bb      	str	r3, [r7, #24]
 8004df2:	e010      	b.n	8004e16 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10c      	bne.n	8004e16 <osThreadNew+0xca>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d108      	bne.n	8004e16 <osThreadNew+0xca>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d104      	bne.n	8004e16 <osThreadNew+0xca>
          mem = 0;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	61bb      	str	r3, [r7, #24]
 8004e10:	e001      	b.n	8004e16 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004e12:	2300      	movs	r3, #0
 8004e14:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d110      	bne.n	8004e3e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e24:	9202      	str	r2, [sp, #8]
 8004e26:	9301      	str	r3, [sp, #4]
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	6a3a      	ldr	r2, [r7, #32]
 8004e30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f001 f944 	bl	80060c0 <xTaskCreateStatic>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	613b      	str	r3, [r7, #16]
 8004e3c:	e013      	b.n	8004e66 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d110      	bne.n	8004e66 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	f107 0310 	add.w	r3, r7, #16
 8004e4c:	9301      	str	r3, [sp, #4]
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f001 f992 	bl	8006180 <xTaskCreate>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d001      	beq.n	8004e66 <osThreadNew+0x11a>
            hTask = NULL;
 8004e62:	2300      	movs	r3, #0
 8004e64:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e66:	693b      	ldr	r3, [r7, #16]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3728      	adds	r7, #40	@ 0x28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e78:	f3ef 8305 	mrs	r3, IPSR
 8004e7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e7e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d003      	beq.n	8004e8c <osDelay+0x1c>
    stat = osErrorISR;
 8004e84:	f06f 0305 	mvn.w	r3, #5
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	e007      	b.n	8004e9c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f001 fad0 	bl	800643c <vTaskDelay>
    }
  }

  return (stat);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b088      	sub	sp, #32
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eb2:	f3ef 8305 	mrs	r3, IPSR
 8004eb6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004eb8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d174      	bne.n	8004fa8 <osMutexNew+0x102>
    if (attr != NULL) {
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <osMutexNew+0x26>
      type = attr->attr_bits;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	61bb      	str	r3, [r7, #24]
 8004eca:	e001      	b.n	8004ed0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <osMutexNew+0x3a>
      rmtx = 1U;
 8004eda:	2301      	movs	r3, #1
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	e001      	b.n	8004ee4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d15c      	bne.n	8004fa8 <osMutexNew+0x102>
      mem = -1;
 8004eee:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d015      	beq.n	8004f26 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d006      	beq.n	8004f10 <osMutexNew+0x6a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	2b4f      	cmp	r3, #79	@ 0x4f
 8004f08:	d902      	bls.n	8004f10 <osMutexNew+0x6a>
          mem = 1;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	e00c      	b.n	8004f2a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d108      	bne.n	8004f2a <osMutexNew+0x84>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d104      	bne.n	8004f2a <osMutexNew+0x84>
            mem = 0;
 8004f20:	2300      	movs	r3, #0
 8004f22:	613b      	str	r3, [r7, #16]
 8004f24:	e001      	b.n	8004f2a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004f26:	2300      	movs	r3, #0
 8004f28:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d112      	bne.n	8004f56 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d007      	beq.n	8004f46 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	2004      	movs	r0, #4
 8004f3e:	f000 fb20 	bl	8005582 <xQueueCreateMutexStatic>
 8004f42:	61f8      	str	r0, [r7, #28]
 8004f44:	e016      	b.n	8004f74 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	2001      	movs	r0, #1
 8004f4e:	f000 fb18 	bl	8005582 <xQueueCreateMutexStatic>
 8004f52:	61f8      	str	r0, [r7, #28]
 8004f54:	e00e      	b.n	8004f74 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10b      	bne.n	8004f74 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d004      	beq.n	8004f6c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004f62:	2004      	movs	r0, #4
 8004f64:	f000 faf5 	bl	8005552 <xQueueCreateMutex>
 8004f68:	61f8      	str	r0, [r7, #28]
 8004f6a:	e003      	b.n	8004f74 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004f6c:	2001      	movs	r0, #1
 8004f6e:	f000 faf0 	bl	8005552 <xQueueCreateMutex>
 8004f72:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00c      	beq.n	8004f94 <osMutexNew+0xee>
        if (attr != NULL) {
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <osMutexNew+0xe2>
          name = attr->name;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	e001      	b.n	8004f8c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004f8c:	68f9      	ldr	r1, [r7, #12]
 8004f8e:	69f8      	ldr	r0, [r7, #28]
 8004f90:	f001 f838 	bl	8006004 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d006      	beq.n	8004fa8 <osMutexNew+0x102>
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	f043 0301 	orr.w	r3, r3, #1
 8004fa6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004fa8:	69fb      	ldr	r3, [r7, #28]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3720      	adds	r7, #32
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b086      	sub	sp, #24
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f023 0301 	bic.w	r3, r3, #1
 8004fc2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fd0:	f3ef 8305 	mrs	r3, IPSR
 8004fd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fd6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004fdc:	f06f 0305 	mvn.w	r3, #5
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	e02c      	b.n	800503e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d103      	bne.n	8004ff2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004fea:	f06f 0303 	mvn.w	r3, #3
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	e025      	b.n	800503e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d011      	beq.n	800501c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004ff8:	6839      	ldr	r1, [r7, #0]
 8004ffa:	6938      	ldr	r0, [r7, #16]
 8004ffc:	f000 fb11 	bl	8005622 <xQueueTakeMutexRecursive>
 8005000:	4603      	mov	r3, r0
 8005002:	2b01      	cmp	r3, #1
 8005004:	d01b      	beq.n	800503e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800500c:	f06f 0301 	mvn.w	r3, #1
 8005010:	617b      	str	r3, [r7, #20]
 8005012:	e014      	b.n	800503e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005014:	f06f 0302 	mvn.w	r3, #2
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	e010      	b.n	800503e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800501c:	6839      	ldr	r1, [r7, #0]
 800501e:	6938      	ldr	r0, [r7, #16]
 8005020:	f000 fdb8 	bl	8005b94 <xQueueSemaphoreTake>
 8005024:	4603      	mov	r3, r0
 8005026:	2b01      	cmp	r3, #1
 8005028:	d009      	beq.n	800503e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005030:	f06f 0301 	mvn.w	r3, #1
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	e002      	b.n	800503e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005038:	f06f 0302 	mvn.w	r3, #2
 800503c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800503e:	697b      	ldr	r3, [r7, #20]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f023 0301 	bic.w	r3, r3, #1
 8005056:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005060:	2300      	movs	r3, #0
 8005062:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005064:	f3ef 8305 	mrs	r3, IPSR
 8005068:	60bb      	str	r3, [r7, #8]
  return(result);
 800506a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005070:	f06f 0305 	mvn.w	r3, #5
 8005074:	617b      	str	r3, [r7, #20]
 8005076:	e01f      	b.n	80050b8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d103      	bne.n	8005086 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800507e:	f06f 0303 	mvn.w	r3, #3
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	e018      	b.n	80050b8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d009      	beq.n	80050a0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800508c:	6938      	ldr	r0, [r7, #16]
 800508e:	f000 fa93 	bl	80055b8 <xQueueGiveMutexRecursive>
 8005092:	4603      	mov	r3, r0
 8005094:	2b01      	cmp	r3, #1
 8005096:	d00f      	beq.n	80050b8 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005098:	f06f 0302 	mvn.w	r3, #2
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	e00b      	b.n	80050b8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80050a0:	2300      	movs	r3, #0
 80050a2:	2200      	movs	r2, #0
 80050a4:	2100      	movs	r1, #0
 80050a6:	6938      	ldr	r0, [r7, #16]
 80050a8:	f000 faf2 	bl	8005690 <xQueueGenericSend>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d002      	beq.n	80050b8 <osMutexRelease+0x70>
        stat = osErrorResource;
 80050b2:	f06f 0302 	mvn.w	r3, #2
 80050b6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80050b8:	697b      	ldr	r3, [r7, #20]
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3718      	adds	r7, #24
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
	...

080050c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4a07      	ldr	r2, [pc, #28]	@ (80050f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80050d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	4a06      	ldr	r2, [pc, #24]	@ (80050f4 <vApplicationGetIdleTaskMemory+0x30>)
 80050da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2280      	movs	r2, #128	@ 0x80
 80050e0:	601a      	str	r2, [r3, #0]
}
 80050e2:	bf00      	nop
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	200003b4 	.word	0x200003b4
 80050f4:	2000045c 	.word	0x2000045c

080050f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4a07      	ldr	r2, [pc, #28]	@ (8005124 <vApplicationGetTimerTaskMemory+0x2c>)
 8005108:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	4a06      	ldr	r2, [pc, #24]	@ (8005128 <vApplicationGetTimerTaskMemory+0x30>)
 800510e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005116:	601a      	str	r2, [r3, #0]
}
 8005118:	bf00      	nop
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	2000065c 	.word	0x2000065c
 8005128:	20000704 	.word	0x20000704

0800512c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f103 0208 	add.w	r2, r3, #8
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f04f 32ff 	mov.w	r2, #4294967295
 8005144:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f103 0208 	add.w	r2, r3, #8
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f103 0208 	add.w	r2, r3, #8
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005186:	b480      	push	{r7}
 8005188:	b085      	sub	sp, #20
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	601a      	str	r2, [r3, #0]
}
 80051c2:	bf00      	nop
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051ce:	b480      	push	{r7}
 80051d0:	b085      	sub	sp, #20
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e4:	d103      	bne.n	80051ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	60fb      	str	r3, [r7, #12]
 80051ec:	e00c      	b.n	8005208 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	3308      	adds	r3, #8
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	e002      	b.n	80051fc <vListInsert+0x2e>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	429a      	cmp	r2, r3
 8005206:	d2f6      	bcs.n	80051f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	601a      	str	r2, [r3, #0]
}
 8005234:	bf00      	nop
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6892      	ldr	r2, [r2, #8]
 8005256:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6852      	ldr	r2, [r2, #4]
 8005260:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	429a      	cmp	r2, r3
 800526a:	d103      	bne.n	8005274 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	1e5a      	subs	r2, r3, #1
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10b      	bne.n	80052c0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80052ba:	bf00      	nop
 80052bc:	bf00      	nop
 80052be:	e7fd      	b.n	80052bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80052c0:	f002 fbd2 	bl	8007a68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052cc:	68f9      	ldr	r1, [r7, #12]
 80052ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80052d0:	fb01 f303 	mul.w	r3, r1, r3
 80052d4:	441a      	add	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f0:	3b01      	subs	r3, #1
 80052f2:	68f9      	ldr	r1, [r7, #12]
 80052f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80052f6:	fb01 f303 	mul.w	r3, r1, r3
 80052fa:	441a      	add	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	22ff      	movs	r2, #255	@ 0xff
 8005304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	22ff      	movs	r2, #255	@ 0xff
 800530c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d114      	bne.n	8005340 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d01a      	beq.n	8005354 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3310      	adds	r3, #16
 8005322:	4618      	mov	r0, r3
 8005324:	f001 fb5e 	bl	80069e4 <xTaskRemoveFromEventList>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d012      	beq.n	8005354 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800532e:	4b0d      	ldr	r3, [pc, #52]	@ (8005364 <xQueueGenericReset+0xd0>)
 8005330:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	f3bf 8f6f 	isb	sy
 800533e:	e009      	b.n	8005354 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	3310      	adds	r3, #16
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff fef1 	bl	800512c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	3324      	adds	r3, #36	@ 0x24
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff feec 	bl	800512c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005354:	f002 fbba 	bl	8007acc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005358:	2301      	movs	r3, #1
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	e000ed04 	.word	0xe000ed04

08005368 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08e      	sub	sp, #56	@ 0x38
 800536c:	af02      	add	r7, sp, #8
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10b      	bne.n	8005394 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800537c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800538e:	bf00      	nop
 8005390:	bf00      	nop
 8005392:	e7fd      	b.n	8005390 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10b      	bne.n	80053b2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800539a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80053ac:	bf00      	nop
 80053ae:	bf00      	nop
 80053b0:	e7fd      	b.n	80053ae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <xQueueGenericCreateStatic+0x56>
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <xQueueGenericCreateStatic+0x5a>
 80053be:	2301      	movs	r3, #1
 80053c0:	e000      	b.n	80053c4 <xQueueGenericCreateStatic+0x5c>
 80053c2:	2300      	movs	r3, #0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10b      	bne.n	80053e0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	623b      	str	r3, [r7, #32]
}
 80053da:	bf00      	nop
 80053dc:	bf00      	nop
 80053de:	e7fd      	b.n	80053dc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d102      	bne.n	80053ec <xQueueGenericCreateStatic+0x84>
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <xQueueGenericCreateStatic+0x88>
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <xQueueGenericCreateStatic+0x8a>
 80053f0:	2300      	movs	r3, #0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10b      	bne.n	800540e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80053f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	61fb      	str	r3, [r7, #28]
}
 8005408:	bf00      	nop
 800540a:	bf00      	nop
 800540c:	e7fd      	b.n	800540a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800540e:	2350      	movs	r3, #80	@ 0x50
 8005410:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	2b50      	cmp	r3, #80	@ 0x50
 8005416:	d00b      	beq.n	8005430 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	61bb      	str	r3, [r7, #24]
}
 800542a:	bf00      	nop
 800542c:	bf00      	nop
 800542e:	e7fd      	b.n	800542c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005430:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00d      	beq.n	8005458 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800543c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005444:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	4613      	mov	r3, r2
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	68b9      	ldr	r1, [r7, #8]
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 f840 	bl	80054d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800545a:	4618      	mov	r0, r3
 800545c:	3730      	adds	r7, #48	@ 0x30
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005462:	b580      	push	{r7, lr}
 8005464:	b08a      	sub	sp, #40	@ 0x28
 8005466:	af02      	add	r7, sp, #8
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	4613      	mov	r3, r2
 800546e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10b      	bne.n	800548e <xQueueGenericCreate+0x2c>
	__asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547a:	f383 8811 	msr	BASEPRI, r3
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	613b      	str	r3, [r7, #16]
}
 8005488:	bf00      	nop
 800548a:	bf00      	nop
 800548c:	e7fd      	b.n	800548a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	fb02 f303 	mul.w	r3, r2, r3
 8005496:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	3350      	adds	r3, #80	@ 0x50
 800549c:	4618      	mov	r0, r3
 800549e:	f002 fc05 	bl	8007cac <pvPortMalloc>
 80054a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d011      	beq.n	80054ce <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	3350      	adds	r3, #80	@ 0x50
 80054b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054bc:	79fa      	ldrb	r2, [r7, #7]
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	4613      	mov	r3, r2
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	68b9      	ldr	r1, [r7, #8]
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 f805 	bl	80054d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80054ce:	69bb      	ldr	r3, [r7, #24]
	}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3720      	adds	r7, #32
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
 80054e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d103      	bne.n	80054f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	e002      	b.n	80054fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005506:	2101      	movs	r1, #1
 8005508:	69b8      	ldr	r0, [r7, #24]
 800550a:	f7ff fec3 	bl	8005294 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	78fa      	ldrb	r2, [r7, #3]
 8005512:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005516:	bf00      	nop
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00e      	beq.n	800554a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800553e:	2300      	movs	r3, #0
 8005540:	2200      	movs	r2, #0
 8005542:	2100      	movs	r1, #0
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f8a3 	bl	8005690 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800554a:	bf00      	nop
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005552:	b580      	push	{r7, lr}
 8005554:	b086      	sub	sp, #24
 8005556:	af00      	add	r7, sp, #0
 8005558:	4603      	mov	r3, r0
 800555a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800555c:	2301      	movs	r3, #1
 800555e:	617b      	str	r3, [r7, #20]
 8005560:	2300      	movs	r3, #0
 8005562:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005564:	79fb      	ldrb	r3, [r7, #7]
 8005566:	461a      	mov	r2, r3
 8005568:	6939      	ldr	r1, [r7, #16]
 800556a:	6978      	ldr	r0, [r7, #20]
 800556c:	f7ff ff79 	bl	8005462 <xQueueGenericCreate>
 8005570:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f7ff ffd3 	bl	800551e <prvInitialiseMutex>

		return xNewQueue;
 8005578:	68fb      	ldr	r3, [r7, #12]
	}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005582:	b580      	push	{r7, lr}
 8005584:	b088      	sub	sp, #32
 8005586:	af02      	add	r7, sp, #8
 8005588:	4603      	mov	r3, r0
 800558a:	6039      	str	r1, [r7, #0]
 800558c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800558e:	2301      	movs	r3, #1
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	2300      	movs	r3, #0
 8005594:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2200      	movs	r2, #0
 800559e:	6939      	ldr	r1, [r7, #16]
 80055a0:	6978      	ldr	r0, [r7, #20]
 80055a2:	f7ff fee1 	bl	8005368 <xQueueGenericCreateStatic>
 80055a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f7ff ffb8 	bl	800551e <prvInitialiseMutex>

		return xNewQueue;
 80055ae:	68fb      	ldr	r3, [r7, #12]
	}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3718      	adds	r7, #24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80055b8:	b590      	push	{r4, r7, lr}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10b      	bne.n	80055e2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80055ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	60fb      	str	r3, [r7, #12]
}
 80055dc:	bf00      	nop
 80055de:	bf00      	nop
 80055e0:	e7fd      	b.n	80055de <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	689c      	ldr	r4, [r3, #8]
 80055e6:	f001 fbc3 	bl	8006d70 <xTaskGetCurrentTaskHandle>
 80055ea:	4603      	mov	r3, r0
 80055ec:	429c      	cmp	r4, r3
 80055ee:	d111      	bne.n	8005614 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	1e5a      	subs	r2, r3, #1
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d105      	bne.n	800560e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005602:	2300      	movs	r3, #0
 8005604:	2200      	movs	r2, #0
 8005606:	2100      	movs	r1, #0
 8005608:	6938      	ldr	r0, [r7, #16]
 800560a:	f000 f841 	bl	8005690 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800560e:	2301      	movs	r3, #1
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	e001      	b.n	8005618 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005614:	2300      	movs	r3, #0
 8005616:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005618:	697b      	ldr	r3, [r7, #20]
	}
 800561a:	4618      	mov	r0, r3
 800561c:	371c      	adds	r7, #28
 800561e:	46bd      	mov	sp, r7
 8005620:	bd90      	pop	{r4, r7, pc}

08005622 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005622:	b590      	push	{r4, r7, lr}
 8005624:	b087      	sub	sp, #28
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10b      	bne.n	800564e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8005636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	60fb      	str	r3, [r7, #12]
}
 8005648:	bf00      	nop
 800564a:	bf00      	nop
 800564c:	e7fd      	b.n	800564a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	689c      	ldr	r4, [r3, #8]
 8005652:	f001 fb8d 	bl	8006d70 <xTaskGetCurrentTaskHandle>
 8005656:	4603      	mov	r3, r0
 8005658:	429c      	cmp	r4, r3
 800565a:	d107      	bne.n	800566c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005666:	2301      	movs	r3, #1
 8005668:	617b      	str	r3, [r7, #20]
 800566a:	e00c      	b.n	8005686 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800566c:	6839      	ldr	r1, [r7, #0]
 800566e:	6938      	ldr	r0, [r7, #16]
 8005670:	f000 fa90 	bl	8005b94 <xQueueSemaphoreTake>
 8005674:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d004      	beq.n	8005686 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005686:	697b      	ldr	r3, [r7, #20]
	}
 8005688:	4618      	mov	r0, r3
 800568a:	371c      	adds	r7, #28
 800568c:	46bd      	mov	sp, r7
 800568e:	bd90      	pop	{r4, r7, pc}

08005690 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08e      	sub	sp, #56	@ 0x38
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800569e:	2300      	movs	r3, #0
 80056a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80056a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10b      	bne.n	80056c4 <xQueueGenericSend+0x34>
	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80056be:	bf00      	nop
 80056c0:	bf00      	nop
 80056c2:	e7fd      	b.n	80056c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d103      	bne.n	80056d2 <xQueueGenericSend+0x42>
 80056ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <xQueueGenericSend+0x46>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e000      	b.n	80056d8 <xQueueGenericSend+0x48>
 80056d6:	2300      	movs	r3, #0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10b      	bne.n	80056f4 <xQueueGenericSend+0x64>
	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80056ee:	bf00      	nop
 80056f0:	bf00      	nop
 80056f2:	e7fd      	b.n	80056f0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d103      	bne.n	8005702 <xQueueGenericSend+0x72>
 80056fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d101      	bne.n	8005706 <xQueueGenericSend+0x76>
 8005702:	2301      	movs	r3, #1
 8005704:	e000      	b.n	8005708 <xQueueGenericSend+0x78>
 8005706:	2300      	movs	r3, #0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10b      	bne.n	8005724 <xQueueGenericSend+0x94>
	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	623b      	str	r3, [r7, #32]
}
 800571e:	bf00      	nop
 8005720:	bf00      	nop
 8005722:	e7fd      	b.n	8005720 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005724:	f001 fb34 	bl	8006d90 <xTaskGetSchedulerState>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d102      	bne.n	8005734 <xQueueGenericSend+0xa4>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <xQueueGenericSend+0xa8>
 8005734:	2301      	movs	r3, #1
 8005736:	e000      	b.n	800573a <xQueueGenericSend+0xaa>
 8005738:	2300      	movs	r3, #0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10b      	bne.n	8005756 <xQueueGenericSend+0xc6>
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	61fb      	str	r3, [r7, #28]
}
 8005750:	bf00      	nop
 8005752:	bf00      	nop
 8005754:	e7fd      	b.n	8005752 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005756:	f002 f987 	bl	8007a68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800575a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800575e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005762:	429a      	cmp	r2, r3
 8005764:	d302      	bcc.n	800576c <xQueueGenericSend+0xdc>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b02      	cmp	r3, #2
 800576a:	d129      	bne.n	80057c0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	68b9      	ldr	r1, [r7, #8]
 8005770:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005772:	f000 fb37 	bl	8005de4 <prvCopyDataToQueue>
 8005776:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577c:	2b00      	cmp	r3, #0
 800577e:	d010      	beq.n	80057a2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005782:	3324      	adds	r3, #36	@ 0x24
 8005784:	4618      	mov	r0, r3
 8005786:	f001 f92d 	bl	80069e4 <xTaskRemoveFromEventList>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d013      	beq.n	80057b8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005790:	4b3f      	ldr	r3, [pc, #252]	@ (8005890 <xQueueGenericSend+0x200>)
 8005792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	e00a      	b.n	80057b8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d007      	beq.n	80057b8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057a8:	4b39      	ldr	r3, [pc, #228]	@ (8005890 <xQueueGenericSend+0x200>)
 80057aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057b8:	f002 f988 	bl	8007acc <vPortExitCritical>
				return pdPASS;
 80057bc:	2301      	movs	r3, #1
 80057be:	e063      	b.n	8005888 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d103      	bne.n	80057ce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057c6:	f002 f981 	bl	8007acc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057ca:	2300      	movs	r3, #0
 80057cc:	e05c      	b.n	8005888 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d106      	bne.n	80057e2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057d4:	f107 0314 	add.w	r3, r7, #20
 80057d8:	4618      	mov	r0, r3
 80057da:	f001 f967 	bl	8006aac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057de:	2301      	movs	r3, #1
 80057e0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057e2:	f002 f973 	bl	8007acc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057e6:	f000 fecf 	bl	8006588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057ea:	f002 f93d 	bl	8007a68 <vPortEnterCritical>
 80057ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057f4:	b25b      	sxtb	r3, r3
 80057f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fa:	d103      	bne.n	8005804 <xQueueGenericSend+0x174>
 80057fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005806:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800580a:	b25b      	sxtb	r3, r3
 800580c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005810:	d103      	bne.n	800581a <xQueueGenericSend+0x18a>
 8005812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800581a:	f002 f957 	bl	8007acc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800581e:	1d3a      	adds	r2, r7, #4
 8005820:	f107 0314 	add.w	r3, r7, #20
 8005824:	4611      	mov	r1, r2
 8005826:	4618      	mov	r0, r3
 8005828:	f001 f956 	bl	8006ad8 <xTaskCheckForTimeOut>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d124      	bne.n	800587c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005832:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005834:	f000 fbce 	bl	8005fd4 <prvIsQueueFull>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d018      	beq.n	8005870 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800583e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005840:	3310      	adds	r3, #16
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	4611      	mov	r1, r2
 8005846:	4618      	mov	r0, r3
 8005848:	f001 f87a 	bl	8006940 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800584c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800584e:	f000 fb59 	bl	8005f04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005852:	f000 fea7 	bl	80065a4 <xTaskResumeAll>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	f47f af7c 	bne.w	8005756 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800585e:	4b0c      	ldr	r3, [pc, #48]	@ (8005890 <xQueueGenericSend+0x200>)
 8005860:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	e772      	b.n	8005756 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005870:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005872:	f000 fb47 	bl	8005f04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005876:	f000 fe95 	bl	80065a4 <xTaskResumeAll>
 800587a:	e76c      	b.n	8005756 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800587c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800587e:	f000 fb41 	bl	8005f04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005882:	f000 fe8f 	bl	80065a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005886:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005888:	4618      	mov	r0, r3
 800588a:	3738      	adds	r7, #56	@ 0x38
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	e000ed04 	.word	0xe000ed04

08005894 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b090      	sub	sp, #64	@ 0x40
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80058a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10b      	bne.n	80058c4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80058be:	bf00      	nop
 80058c0:	bf00      	nop
 80058c2:	e7fd      	b.n	80058c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d103      	bne.n	80058d2 <xQueueGenericSendFromISR+0x3e>
 80058ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <xQueueGenericSendFromISR+0x42>
 80058d2:	2301      	movs	r3, #1
 80058d4:	e000      	b.n	80058d8 <xQueueGenericSendFromISR+0x44>
 80058d6:	2300      	movs	r3, #0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10b      	bne.n	80058f4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80058ee:	bf00      	nop
 80058f0:	bf00      	nop
 80058f2:	e7fd      	b.n	80058f0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d103      	bne.n	8005902 <xQueueGenericSendFromISR+0x6e>
 80058fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <xQueueGenericSendFromISR+0x72>
 8005902:	2301      	movs	r3, #1
 8005904:	e000      	b.n	8005908 <xQueueGenericSendFromISR+0x74>
 8005906:	2300      	movs	r3, #0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10b      	bne.n	8005924 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800590c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	623b      	str	r3, [r7, #32]
}
 800591e:	bf00      	nop
 8005920:	bf00      	nop
 8005922:	e7fd      	b.n	8005920 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005924:	f002 f980 	bl	8007c28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005928:	f3ef 8211 	mrs	r2, BASEPRI
 800592c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	61fa      	str	r2, [r7, #28]
 800593e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005940:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005942:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005946:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800594c:	429a      	cmp	r2, r3
 800594e:	d302      	bcc.n	8005956 <xQueueGenericSendFromISR+0xc2>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2b02      	cmp	r3, #2
 8005954:	d12f      	bne.n	80059b6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005958:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800595c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005964:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800596c:	f000 fa3a 	bl	8005de4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005970:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005978:	d112      	bne.n	80059a0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800597a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800597c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597e:	2b00      	cmp	r3, #0
 8005980:	d016      	beq.n	80059b0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005984:	3324      	adds	r3, #36	@ 0x24
 8005986:	4618      	mov	r0, r3
 8005988:	f001 f82c 	bl	80069e4 <xTaskRemoveFromEventList>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00e      	beq.n	80059b0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00b      	beq.n	80059b0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	e007      	b.n	80059b0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80059a4:	3301      	adds	r3, #1
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	b25a      	sxtb	r2, r3
 80059aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80059b0:	2301      	movs	r3, #1
 80059b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80059b4:	e001      	b.n	80059ba <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059b6:	2300      	movs	r3, #0
 80059b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059bc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3740      	adds	r7, #64	@ 0x40
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08c      	sub	sp, #48	@ 0x30
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059dc:	2300      	movs	r3, #0
 80059de:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10b      	bne.n	8005a02 <xQueueReceive+0x32>
	__asm volatile
 80059ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	623b      	str	r3, [r7, #32]
}
 80059fc:	bf00      	nop
 80059fe:	bf00      	nop
 8005a00:	e7fd      	b.n	80059fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d103      	bne.n	8005a10 <xQueueReceive+0x40>
 8005a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <xQueueReceive+0x44>
 8005a10:	2301      	movs	r3, #1
 8005a12:	e000      	b.n	8005a16 <xQueueReceive+0x46>
 8005a14:	2300      	movs	r3, #0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10b      	bne.n	8005a32 <xQueueReceive+0x62>
	__asm volatile
 8005a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	61fb      	str	r3, [r7, #28]
}
 8005a2c:	bf00      	nop
 8005a2e:	bf00      	nop
 8005a30:	e7fd      	b.n	8005a2e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a32:	f001 f9ad 	bl	8006d90 <xTaskGetSchedulerState>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d102      	bne.n	8005a42 <xQueueReceive+0x72>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <xQueueReceive+0x76>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <xQueueReceive+0x78>
 8005a46:	2300      	movs	r3, #0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10b      	bne.n	8005a64 <xQueueReceive+0x94>
	__asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	61bb      	str	r3, [r7, #24]
}
 8005a5e:	bf00      	nop
 8005a60:	bf00      	nop
 8005a62:	e7fd      	b.n	8005a60 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a64:	f002 f800 	bl	8007a68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a6c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01f      	beq.n	8005ab4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a74:	68b9      	ldr	r1, [r7, #8]
 8005a76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a78:	f000 fa1e 	bl	8005eb8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7e:	1e5a      	subs	r2, r3, #1
 8005a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a82:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00f      	beq.n	8005aac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8e:	3310      	adds	r3, #16
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 ffa7 	bl	80069e4 <xTaskRemoveFromEventList>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d007      	beq.n	8005aac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a9c:	4b3c      	ldr	r3, [pc, #240]	@ (8005b90 <xQueueReceive+0x1c0>)
 8005a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005aac:	f002 f80e 	bl	8007acc <vPortExitCritical>
				return pdPASS;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e069      	b.n	8005b88 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d103      	bne.n	8005ac2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005aba:	f002 f807 	bl	8007acc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	e062      	b.n	8005b88 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d106      	bne.n	8005ad6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ac8:	f107 0310 	add.w	r3, r7, #16
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 ffed 	bl	8006aac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ad6:	f001 fff9 	bl	8007acc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ada:	f000 fd55 	bl	8006588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ade:	f001 ffc3 	bl	8007a68 <vPortEnterCritical>
 8005ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ae8:	b25b      	sxtb	r3, r3
 8005aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aee:	d103      	bne.n	8005af8 <xQueueReceive+0x128>
 8005af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005afe:	b25b      	sxtb	r3, r3
 8005b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b04:	d103      	bne.n	8005b0e <xQueueReceive+0x13e>
 8005b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b0e:	f001 ffdd 	bl	8007acc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b12:	1d3a      	adds	r2, r7, #4
 8005b14:	f107 0310 	add.w	r3, r7, #16
 8005b18:	4611      	mov	r1, r2
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 ffdc 	bl	8006ad8 <xTaskCheckForTimeOut>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d123      	bne.n	8005b6e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b28:	f000 fa3e 	bl	8005fa8 <prvIsQueueEmpty>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d017      	beq.n	8005b62 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b34:	3324      	adds	r3, #36	@ 0x24
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	4611      	mov	r1, r2
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 ff00 	bl	8006940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b42:	f000 f9df 	bl	8005f04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b46:	f000 fd2d 	bl	80065a4 <xTaskResumeAll>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d189      	bne.n	8005a64 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005b50:	4b0f      	ldr	r3, [pc, #60]	@ (8005b90 <xQueueReceive+0x1c0>)
 8005b52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	e780      	b.n	8005a64 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b64:	f000 f9ce 	bl	8005f04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b68:	f000 fd1c 	bl	80065a4 <xTaskResumeAll>
 8005b6c:	e77a      	b.n	8005a64 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b70:	f000 f9c8 	bl	8005f04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b74:	f000 fd16 	bl	80065a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b7a:	f000 fa15 	bl	8005fa8 <prvIsQueueEmpty>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f43f af6f 	beq.w	8005a64 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b86:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3730      	adds	r7, #48	@ 0x30
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	e000ed04 	.word	0xe000ed04

08005b94 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08e      	sub	sp, #56	@ 0x38
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10b      	bne.n	8005bc8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb4:	f383 8811 	msr	BASEPRI, r3
 8005bb8:	f3bf 8f6f 	isb	sy
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	623b      	str	r3, [r7, #32]
}
 8005bc2:	bf00      	nop
 8005bc4:	bf00      	nop
 8005bc6:	e7fd      	b.n	8005bc4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00b      	beq.n	8005be8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	61fb      	str	r3, [r7, #28]
}
 8005be2:	bf00      	nop
 8005be4:	bf00      	nop
 8005be6:	e7fd      	b.n	8005be4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005be8:	f001 f8d2 	bl	8006d90 <xTaskGetSchedulerState>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d102      	bne.n	8005bf8 <xQueueSemaphoreTake+0x64>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <xQueueSemaphoreTake+0x68>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e000      	b.n	8005bfe <xQueueSemaphoreTake+0x6a>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10b      	bne.n	8005c1a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	61bb      	str	r3, [r7, #24]
}
 8005c14:	bf00      	nop
 8005c16:	bf00      	nop
 8005c18:	e7fd      	b.n	8005c16 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c1a:	f001 ff25 	bl	8007a68 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c22:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d024      	beq.n	8005c74 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2c:	1e5a      	subs	r2, r3, #1
 8005c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c30:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d104      	bne.n	8005c44 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005c3a:	f001 fa23 	bl	8007084 <pvTaskIncrementMutexHeldCount>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c42:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00f      	beq.n	8005c6c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c4e:	3310      	adds	r3, #16
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 fec7 	bl	80069e4 <xTaskRemoveFromEventList>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d007      	beq.n	8005c6c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c5c:	4b54      	ldr	r3, [pc, #336]	@ (8005db0 <xQueueSemaphoreTake+0x21c>)
 8005c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c6c:	f001 ff2e 	bl	8007acc <vPortExitCritical>
				return pdPASS;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e098      	b.n	8005da6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d112      	bne.n	8005ca0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00b      	beq.n	8005c98 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	617b      	str	r3, [r7, #20]
}
 8005c92:	bf00      	nop
 8005c94:	bf00      	nop
 8005c96:	e7fd      	b.n	8005c94 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005c98:	f001 ff18 	bl	8007acc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	e082      	b.n	8005da6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d106      	bne.n	8005cb4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ca6:	f107 030c 	add.w	r3, r7, #12
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 fefe 	bl	8006aac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cb4:	f001 ff0a 	bl	8007acc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cb8:	f000 fc66 	bl	8006588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cbc:	f001 fed4 	bl	8007a68 <vPortEnterCritical>
 8005cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005cc6:	b25b      	sxtb	r3, r3
 8005cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ccc:	d103      	bne.n	8005cd6 <xQueueSemaphoreTake+0x142>
 8005cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cdc:	b25b      	sxtb	r3, r3
 8005cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce2:	d103      	bne.n	8005cec <xQueueSemaphoreTake+0x158>
 8005ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cec:	f001 feee 	bl	8007acc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cf0:	463a      	mov	r2, r7
 8005cf2:	f107 030c 	add.w	r3, r7, #12
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 feed 	bl	8006ad8 <xTaskCheckForTimeOut>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d132      	bne.n	8005d6a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d06:	f000 f94f 	bl	8005fa8 <prvIsQueueEmpty>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d026      	beq.n	8005d5e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d109      	bne.n	8005d2c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005d18:	f001 fea6 	bl	8007a68 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f001 f853 	bl	8006dcc <xTaskPriorityInherit>
 8005d26:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005d28:	f001 fed0 	bl	8007acc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d2e:	3324      	adds	r3, #36	@ 0x24
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	4611      	mov	r1, r2
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 fe03 	bl	8006940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d3c:	f000 f8e2 	bl	8005f04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d40:	f000 fc30 	bl	80065a4 <xTaskResumeAll>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f47f af67 	bne.w	8005c1a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005d4c:	4b18      	ldr	r3, [pc, #96]	@ (8005db0 <xQueueSemaphoreTake+0x21c>)
 8005d4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	e75d      	b.n	8005c1a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005d5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d60:	f000 f8d0 	bl	8005f04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d64:	f000 fc1e 	bl	80065a4 <xTaskResumeAll>
 8005d68:	e757      	b.n	8005c1a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005d6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d6c:	f000 f8ca 	bl	8005f04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d70:	f000 fc18 	bl	80065a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d76:	f000 f917 	bl	8005fa8 <prvIsQueueEmpty>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f43f af4c 	beq.w	8005c1a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00d      	beq.n	8005da4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005d88:	f001 fe6e 	bl	8007a68 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005d8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d8e:	f000 f811 	bl	8005db4 <prvGetDisinheritPriorityAfterTimeout>
 8005d92:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f001 f8ee 	bl	8006f7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005da0:	f001 fe94 	bl	8007acc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005da4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3738      	adds	r7, #56	@ 0x38
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	e000ed04 	.word	0xe000ed04

08005db4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d006      	beq.n	8005dd2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	e001      	b.n	8005dd6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
	}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3714      	adds	r7, #20
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005df0:	2300      	movs	r3, #0
 8005df2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10d      	bne.n	8005e1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d14d      	bne.n	8005ea6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f001 f844 	bl	8006e9c <xTaskPriorityDisinherit>
 8005e14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	609a      	str	r2, [r3, #8]
 8005e1c:	e043      	b.n	8005ea6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d119      	bne.n	8005e58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6858      	ldr	r0, [r3, #4]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	68b9      	ldr	r1, [r7, #8]
 8005e30:	f002 ff8f 	bl	8008d52 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3c:	441a      	add	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d32b      	bcc.n	8005ea6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	605a      	str	r2, [r3, #4]
 8005e56:	e026      	b.n	8005ea6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	68d8      	ldr	r0, [r3, #12]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e60:	461a      	mov	r2, r3
 8005e62:	68b9      	ldr	r1, [r7, #8]
 8005e64:	f002 ff75 	bl	8008d52 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	68da      	ldr	r2, [r3, #12]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e70:	425b      	negs	r3, r3
 8005e72:	441a      	add	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	68da      	ldr	r2, [r3, #12]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d207      	bcs.n	8005e94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8c:	425b      	negs	r3, r3
 8005e8e:	441a      	add	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d105      	bne.n	8005ea6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d002      	beq.n	8005ea6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005eae:	697b      	ldr	r3, [r7, #20]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d018      	beq.n	8005efc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed2:	441a      	add	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d303      	bcc.n	8005eec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68d9      	ldr	r1, [r3, #12]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	6838      	ldr	r0, [r7, #0]
 8005ef8:	f002 ff2b 	bl	8008d52 <memcpy>
	}
}
 8005efc:	bf00      	nop
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f0c:	f001 fdac 	bl	8007a68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f18:	e011      	b.n	8005f3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d012      	beq.n	8005f48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	3324      	adds	r3, #36	@ 0x24
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 fd5c 	bl	80069e4 <xTaskRemoveFromEventList>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f32:	f000 fe35 	bl	8006ba0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	dce9      	bgt.n	8005f1a <prvUnlockQueue+0x16>
 8005f46:	e000      	b.n	8005f4a <prvUnlockQueue+0x46>
					break;
 8005f48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	22ff      	movs	r2, #255	@ 0xff
 8005f4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005f52:	f001 fdbb 	bl	8007acc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f56:	f001 fd87 	bl	8007a68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f62:	e011      	b.n	8005f88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d012      	beq.n	8005f92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3310      	adds	r3, #16
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 fd37 	bl	80069e4 <xTaskRemoveFromEventList>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f7c:	f000 fe10 	bl	8006ba0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f80:	7bbb      	ldrb	r3, [r7, #14]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	dce9      	bgt.n	8005f64 <prvUnlockQueue+0x60>
 8005f90:	e000      	b.n	8005f94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	22ff      	movs	r2, #255	@ 0xff
 8005f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005f9c:	f001 fd96 	bl	8007acc <vPortExitCritical>
}
 8005fa0:	bf00      	nop
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fb0:	f001 fd5a 	bl	8007a68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d102      	bne.n	8005fc2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	e001      	b.n	8005fc6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fc6:	f001 fd81 	bl	8007acc <vPortExitCritical>

	return xReturn;
 8005fca:	68fb      	ldr	r3, [r7, #12]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fdc:	f001 fd44 	bl	8007a68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d102      	bne.n	8005ff2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005fec:	2301      	movs	r3, #1
 8005fee:	60fb      	str	r3, [r7, #12]
 8005ff0:	e001      	b.n	8005ff6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ff6:	f001 fd69 	bl	8007acc <vPortExitCritical>

	return xReturn;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800600e:	2300      	movs	r3, #0
 8006010:	60fb      	str	r3, [r7, #12]
 8006012:	e014      	b.n	800603e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006014:	4a0f      	ldr	r2, [pc, #60]	@ (8006054 <vQueueAddToRegistry+0x50>)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10b      	bne.n	8006038 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006020:	490c      	ldr	r1, [pc, #48]	@ (8006054 <vQueueAddToRegistry+0x50>)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800602a:	4a0a      	ldr	r2, [pc, #40]	@ (8006054 <vQueueAddToRegistry+0x50>)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	4413      	add	r3, r2
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006036:	e006      	b.n	8006046 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	3301      	adds	r3, #1
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b07      	cmp	r3, #7
 8006042:	d9e7      	bls.n	8006014 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006044:	bf00      	nop
 8006046:	bf00      	nop
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	20000b04 	.word	0x20000b04

08006058 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006068:	f001 fcfe 	bl	8007a68 <vPortEnterCritical>
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006072:	b25b      	sxtb	r3, r3
 8006074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006078:	d103      	bne.n	8006082 <vQueueWaitForMessageRestricted+0x2a>
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006088:	b25b      	sxtb	r3, r3
 800608a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608e:	d103      	bne.n	8006098 <vQueueWaitForMessageRestricted+0x40>
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006098:	f001 fd18 	bl	8007acc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d106      	bne.n	80060b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	3324      	adds	r3, #36	@ 0x24
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	68b9      	ldr	r1, [r7, #8]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f000 fc6d 	bl	800698c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80060b2:	6978      	ldr	r0, [r7, #20]
 80060b4:	f7ff ff26 	bl	8005f04 <prvUnlockQueue>
	}
 80060b8:	bf00      	nop
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08e      	sub	sp, #56	@ 0x38
 80060c4:	af04      	add	r7, sp, #16
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80060ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10b      	bne.n	80060ec <xTaskCreateStatic+0x2c>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	623b      	str	r3, [r7, #32]
}
 80060e6:	bf00      	nop
 80060e8:	bf00      	nop
 80060ea:	e7fd      	b.n	80060e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80060ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10b      	bne.n	800610a <xTaskCreateStatic+0x4a>
	__asm volatile
 80060f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	61fb      	str	r3, [r7, #28]
}
 8006104:	bf00      	nop
 8006106:	bf00      	nop
 8006108:	e7fd      	b.n	8006106 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800610a:	23a8      	movs	r3, #168	@ 0xa8
 800610c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	2ba8      	cmp	r3, #168	@ 0xa8
 8006112:	d00b      	beq.n	800612c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	61bb      	str	r3, [r7, #24]
}
 8006126:	bf00      	nop
 8006128:	bf00      	nop
 800612a:	e7fd      	b.n	8006128 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800612c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800612e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006130:	2b00      	cmp	r3, #0
 8006132:	d01e      	beq.n	8006172 <xTaskCreateStatic+0xb2>
 8006134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006136:	2b00      	cmp	r3, #0
 8006138:	d01b      	beq.n	8006172 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800613a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800613c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800613e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006140:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006142:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006146:	2202      	movs	r2, #2
 8006148:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800614c:	2300      	movs	r3, #0
 800614e:	9303      	str	r3, [sp, #12]
 8006150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006152:	9302      	str	r3, [sp, #8]
 8006154:	f107 0314 	add.w	r3, r7, #20
 8006158:	9301      	str	r3, [sp, #4]
 800615a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	68b9      	ldr	r1, [r7, #8]
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 f851 	bl	800620c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800616a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800616c:	f000 f8f6 	bl	800635c <prvAddNewTaskToReadyList>
 8006170:	e001      	b.n	8006176 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006172:	2300      	movs	r3, #0
 8006174:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006176:	697b      	ldr	r3, [r7, #20]
	}
 8006178:	4618      	mov	r0, r3
 800617a:	3728      	adds	r7, #40	@ 0x28
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006180:	b580      	push	{r7, lr}
 8006182:	b08c      	sub	sp, #48	@ 0x30
 8006184:	af04      	add	r7, sp, #16
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	603b      	str	r3, [r7, #0]
 800618c:	4613      	mov	r3, r2
 800618e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006190:	88fb      	ldrh	r3, [r7, #6]
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4618      	mov	r0, r3
 8006196:	f001 fd89 	bl	8007cac <pvPortMalloc>
 800619a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00e      	beq.n	80061c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80061a2:	20a8      	movs	r0, #168	@ 0xa8
 80061a4:	f001 fd82 	bl	8007cac <pvPortMalloc>
 80061a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d003      	beq.n	80061b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80061b6:	e005      	b.n	80061c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80061b8:	6978      	ldr	r0, [r7, #20]
 80061ba:	f001 fe45 	bl	8007e48 <vPortFree>
 80061be:	e001      	b.n	80061c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061c0:	2300      	movs	r3, #0
 80061c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d017      	beq.n	80061fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061d2:	88fa      	ldrh	r2, [r7, #6]
 80061d4:	2300      	movs	r3, #0
 80061d6:	9303      	str	r3, [sp, #12]
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	9302      	str	r3, [sp, #8]
 80061dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061de:	9301      	str	r3, [sp, #4]
 80061e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	68b9      	ldr	r1, [r7, #8]
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 f80f 	bl	800620c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061ee:	69f8      	ldr	r0, [r7, #28]
 80061f0:	f000 f8b4 	bl	800635c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061f4:	2301      	movs	r3, #1
 80061f6:	61bb      	str	r3, [r7, #24]
 80061f8:	e002      	b.n	8006200 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061fa:	f04f 33ff 	mov.w	r3, #4294967295
 80061fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006200:	69bb      	ldr	r3, [r7, #24]
	}
 8006202:	4618      	mov	r0, r3
 8006204:	3720      	adds	r7, #32
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
	...

0800620c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b088      	sub	sp, #32
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800621a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	461a      	mov	r2, r3
 8006224:	21a5      	movs	r1, #165	@ 0xa5
 8006226:	f002 fcbe 	bl	8008ba6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800622a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006234:	3b01      	subs	r3, #1
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	f023 0307 	bic.w	r3, r3, #7
 8006242:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	f003 0307 	and.w	r3, r3, #7
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00b      	beq.n	8006266 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	617b      	str	r3, [r7, #20]
}
 8006260:	bf00      	nop
 8006262:	bf00      	nop
 8006264:	e7fd      	b.n	8006262 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01f      	beq.n	80062ac <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800626c:	2300      	movs	r3, #0
 800626e:	61fb      	str	r3, [r7, #28]
 8006270:	e012      	b.n	8006298 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	4413      	add	r3, r2
 8006278:	7819      	ldrb	r1, [r3, #0]
 800627a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	4413      	add	r3, r2
 8006280:	3334      	adds	r3, #52	@ 0x34
 8006282:	460a      	mov	r2, r1
 8006284:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	4413      	add	r3, r2
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d006      	beq.n	80062a0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	3301      	adds	r3, #1
 8006296:	61fb      	str	r3, [r7, #28]
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	2b0f      	cmp	r3, #15
 800629c:	d9e9      	bls.n	8006272 <prvInitialiseNewTask+0x66>
 800629e:	e000      	b.n	80062a2 <prvInitialiseNewTask+0x96>
			{
				break;
 80062a0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80062aa:	e003      	b.n	80062b4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80062ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b6:	2b37      	cmp	r3, #55	@ 0x37
 80062b8:	d901      	bls.n	80062be <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062ba:	2337      	movs	r3, #55	@ 0x37
 80062bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80062be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062c8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80062ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062cc:	2200      	movs	r2, #0
 80062ce:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d2:	3304      	adds	r3, #4
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fe ff49 	bl	800516c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80062da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062dc:	3318      	adds	r3, #24
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fe ff44 	bl	800516c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80062f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062f8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fc:	2200      	movs	r2, #0
 80062fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006304:	2200      	movs	r2, #0
 8006306:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800630a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630c:	3354      	adds	r3, #84	@ 0x54
 800630e:	224c      	movs	r2, #76	@ 0x4c
 8006310:	2100      	movs	r1, #0
 8006312:	4618      	mov	r0, r3
 8006314:	f002 fc47 	bl	8008ba6 <memset>
 8006318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631a:	4a0d      	ldr	r2, [pc, #52]	@ (8006350 <prvInitialiseNewTask+0x144>)
 800631c:	659a      	str	r2, [r3, #88]	@ 0x58
 800631e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006320:	4a0c      	ldr	r2, [pc, #48]	@ (8006354 <prvInitialiseNewTask+0x148>)
 8006322:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006326:	4a0c      	ldr	r2, [pc, #48]	@ (8006358 <prvInitialiseNewTask+0x14c>)
 8006328:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	68f9      	ldr	r1, [r7, #12]
 800632e:	69b8      	ldr	r0, [r7, #24]
 8006330:	f001 fa6a 	bl	8007808 <pxPortInitialiseStack>
 8006334:	4602      	mov	r2, r0
 8006336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006338:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800633a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006346:	bf00      	nop
 8006348:	3720      	adds	r7, #32
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	20004d98 	.word	0x20004d98
 8006354:	20004e00 	.word	0x20004e00
 8006358:	20004e68 	.word	0x20004e68

0800635c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006364:	f001 fb80 	bl	8007a68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006368:	4b2d      	ldr	r3, [pc, #180]	@ (8006420 <prvAddNewTaskToReadyList+0xc4>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	3301      	adds	r3, #1
 800636e:	4a2c      	ldr	r2, [pc, #176]	@ (8006420 <prvAddNewTaskToReadyList+0xc4>)
 8006370:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006372:	4b2c      	ldr	r3, [pc, #176]	@ (8006424 <prvAddNewTaskToReadyList+0xc8>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d109      	bne.n	800638e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800637a:	4a2a      	ldr	r2, [pc, #168]	@ (8006424 <prvAddNewTaskToReadyList+0xc8>)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006380:	4b27      	ldr	r3, [pc, #156]	@ (8006420 <prvAddNewTaskToReadyList+0xc4>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d110      	bne.n	80063aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006388:	f000 fc2e 	bl	8006be8 <prvInitialiseTaskLists>
 800638c:	e00d      	b.n	80063aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800638e:	4b26      	ldr	r3, [pc, #152]	@ (8006428 <prvAddNewTaskToReadyList+0xcc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d109      	bne.n	80063aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006396:	4b23      	ldr	r3, [pc, #140]	@ (8006424 <prvAddNewTaskToReadyList+0xc8>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d802      	bhi.n	80063aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063a4:	4a1f      	ldr	r2, [pc, #124]	@ (8006424 <prvAddNewTaskToReadyList+0xc8>)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063aa:	4b20      	ldr	r3, [pc, #128]	@ (800642c <prvAddNewTaskToReadyList+0xd0>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3301      	adds	r3, #1
 80063b0:	4a1e      	ldr	r2, [pc, #120]	@ (800642c <prvAddNewTaskToReadyList+0xd0>)
 80063b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80063b4:	4b1d      	ldr	r3, [pc, #116]	@ (800642c <prvAddNewTaskToReadyList+0xd0>)
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006430 <prvAddNewTaskToReadyList+0xd4>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d903      	bls.n	80063d0 <prvAddNewTaskToReadyList+0x74>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063cc:	4a18      	ldr	r2, [pc, #96]	@ (8006430 <prvAddNewTaskToReadyList+0xd4>)
 80063ce:	6013      	str	r3, [r2, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063d4:	4613      	mov	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4a15      	ldr	r2, [pc, #84]	@ (8006434 <prvAddNewTaskToReadyList+0xd8>)
 80063de:	441a      	add	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	3304      	adds	r3, #4
 80063e4:	4619      	mov	r1, r3
 80063e6:	4610      	mov	r0, r2
 80063e8:	f7fe fecd 	bl	8005186 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80063ec:	f001 fb6e 	bl	8007acc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063f0:	4b0d      	ldr	r3, [pc, #52]	@ (8006428 <prvAddNewTaskToReadyList+0xcc>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00e      	beq.n	8006416 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80063f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006424 <prvAddNewTaskToReadyList+0xc8>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006402:	429a      	cmp	r2, r3
 8006404:	d207      	bcs.n	8006416 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006406:	4b0c      	ldr	r3, [pc, #48]	@ (8006438 <prvAddNewTaskToReadyList+0xdc>)
 8006408:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006416:	bf00      	nop
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	20001018 	.word	0x20001018
 8006424:	20000b44 	.word	0x20000b44
 8006428:	20001024 	.word	0x20001024
 800642c:	20001034 	.word	0x20001034
 8006430:	20001020 	.word	0x20001020
 8006434:	20000b48 	.word	0x20000b48
 8006438:	e000ed04 	.word	0xe000ed04

0800643c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006444:	2300      	movs	r3, #0
 8006446:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d018      	beq.n	8006480 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800644e:	4b14      	ldr	r3, [pc, #80]	@ (80064a0 <vTaskDelay+0x64>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00b      	beq.n	800646e <vTaskDelay+0x32>
	__asm volatile
 8006456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	60bb      	str	r3, [r7, #8]
}
 8006468:	bf00      	nop
 800646a:	bf00      	nop
 800646c:	e7fd      	b.n	800646a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800646e:	f000 f88b 	bl	8006588 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006472:	2100      	movs	r1, #0
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fe19 	bl	80070ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800647a:	f000 f893 	bl	80065a4 <xTaskResumeAll>
 800647e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d107      	bne.n	8006496 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006486:	4b07      	ldr	r3, [pc, #28]	@ (80064a4 <vTaskDelay+0x68>)
 8006488:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006496:	bf00      	nop
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	20001040 	.word	0x20001040
 80064a4:	e000ed04 	.word	0xe000ed04

080064a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08a      	sub	sp, #40	@ 0x28
 80064ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80064b2:	2300      	movs	r3, #0
 80064b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064b6:	463a      	mov	r2, r7
 80064b8:	1d39      	adds	r1, r7, #4
 80064ba:	f107 0308 	add.w	r3, r7, #8
 80064be:	4618      	mov	r0, r3
 80064c0:	f7fe fe00 	bl	80050c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064c4:	6839      	ldr	r1, [r7, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	9202      	str	r2, [sp, #8]
 80064cc:	9301      	str	r3, [sp, #4]
 80064ce:	2300      	movs	r3, #0
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	2300      	movs	r3, #0
 80064d4:	460a      	mov	r2, r1
 80064d6:	4924      	ldr	r1, [pc, #144]	@ (8006568 <vTaskStartScheduler+0xc0>)
 80064d8:	4824      	ldr	r0, [pc, #144]	@ (800656c <vTaskStartScheduler+0xc4>)
 80064da:	f7ff fdf1 	bl	80060c0 <xTaskCreateStatic>
 80064de:	4603      	mov	r3, r0
 80064e0:	4a23      	ldr	r2, [pc, #140]	@ (8006570 <vTaskStartScheduler+0xc8>)
 80064e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80064e4:	4b22      	ldr	r3, [pc, #136]	@ (8006570 <vTaskStartScheduler+0xc8>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80064ec:	2301      	movs	r3, #1
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	e001      	b.n	80064f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80064f2:	2300      	movs	r3, #0
 80064f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d102      	bne.n	8006502 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80064fc:	f000 fe2a 	bl	8007154 <xTimerCreateTimerTask>
 8006500:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d11b      	bne.n	8006540 <vTaskStartScheduler+0x98>
	__asm volatile
 8006508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800650c:	f383 8811 	msr	BASEPRI, r3
 8006510:	f3bf 8f6f 	isb	sy
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	613b      	str	r3, [r7, #16]
}
 800651a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800651c:	4b15      	ldr	r3, [pc, #84]	@ (8006574 <vTaskStartScheduler+0xcc>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	3354      	adds	r3, #84	@ 0x54
 8006522:	4a15      	ldr	r2, [pc, #84]	@ (8006578 <vTaskStartScheduler+0xd0>)
 8006524:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006526:	4b15      	ldr	r3, [pc, #84]	@ (800657c <vTaskStartScheduler+0xd4>)
 8006528:	f04f 32ff 	mov.w	r2, #4294967295
 800652c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800652e:	4b14      	ldr	r3, [pc, #80]	@ (8006580 <vTaskStartScheduler+0xd8>)
 8006530:	2201      	movs	r2, #1
 8006532:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006534:	4b13      	ldr	r3, [pc, #76]	@ (8006584 <vTaskStartScheduler+0xdc>)
 8006536:	2200      	movs	r2, #0
 8006538:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800653a:	f001 f9f1 	bl	8007920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800653e:	e00f      	b.n	8006560 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006546:	d10b      	bne.n	8006560 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	60fb      	str	r3, [r7, #12]
}
 800655a:	bf00      	nop
 800655c:	bf00      	nop
 800655e:	e7fd      	b.n	800655c <vTaskStartScheduler+0xb4>
}
 8006560:	bf00      	nop
 8006562:	3718      	adds	r7, #24
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	0800c414 	.word	0x0800c414
 800656c:	08006bb9 	.word	0x08006bb9
 8006570:	2000103c 	.word	0x2000103c
 8006574:	20000b44 	.word	0x20000b44
 8006578:	2000001c 	.word	0x2000001c
 800657c:	20001038 	.word	0x20001038
 8006580:	20001024 	.word	0x20001024
 8006584:	2000101c 	.word	0x2000101c

08006588 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800658c:	4b04      	ldr	r3, [pc, #16]	@ (80065a0 <vTaskSuspendAll+0x18>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3301      	adds	r3, #1
 8006592:	4a03      	ldr	r2, [pc, #12]	@ (80065a0 <vTaskSuspendAll+0x18>)
 8006594:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006596:	bf00      	nop
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	20001040 	.word	0x20001040

080065a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065aa:	2300      	movs	r3, #0
 80065ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065b2:	4b42      	ldr	r3, [pc, #264]	@ (80066bc <xTaskResumeAll+0x118>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10b      	bne.n	80065d2 <xTaskResumeAll+0x2e>
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	603b      	str	r3, [r7, #0]
}
 80065cc:	bf00      	nop
 80065ce:	bf00      	nop
 80065d0:	e7fd      	b.n	80065ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065d2:	f001 fa49 	bl	8007a68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065d6:	4b39      	ldr	r3, [pc, #228]	@ (80066bc <xTaskResumeAll+0x118>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3b01      	subs	r3, #1
 80065dc:	4a37      	ldr	r2, [pc, #220]	@ (80066bc <xTaskResumeAll+0x118>)
 80065de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065e0:	4b36      	ldr	r3, [pc, #216]	@ (80066bc <xTaskResumeAll+0x118>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d162      	bne.n	80066ae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065e8:	4b35      	ldr	r3, [pc, #212]	@ (80066c0 <xTaskResumeAll+0x11c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d05e      	beq.n	80066ae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065f0:	e02f      	b.n	8006652 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065f2:	4b34      	ldr	r3, [pc, #208]	@ (80066c4 <xTaskResumeAll+0x120>)
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	3318      	adds	r3, #24
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fe fe1e 	bl	8005240 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3304      	adds	r3, #4
 8006608:	4618      	mov	r0, r3
 800660a:	f7fe fe19 	bl	8005240 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006612:	4b2d      	ldr	r3, [pc, #180]	@ (80066c8 <xTaskResumeAll+0x124>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	429a      	cmp	r2, r3
 8006618:	d903      	bls.n	8006622 <xTaskResumeAll+0x7e>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661e:	4a2a      	ldr	r2, [pc, #168]	@ (80066c8 <xTaskResumeAll+0x124>)
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006626:	4613      	mov	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4a27      	ldr	r2, [pc, #156]	@ (80066cc <xTaskResumeAll+0x128>)
 8006630:	441a      	add	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3304      	adds	r3, #4
 8006636:	4619      	mov	r1, r3
 8006638:	4610      	mov	r0, r2
 800663a:	f7fe fda4 	bl	8005186 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006642:	4b23      	ldr	r3, [pc, #140]	@ (80066d0 <xTaskResumeAll+0x12c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006648:	429a      	cmp	r2, r3
 800664a:	d302      	bcc.n	8006652 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800664c:	4b21      	ldr	r3, [pc, #132]	@ (80066d4 <xTaskResumeAll+0x130>)
 800664e:	2201      	movs	r2, #1
 8006650:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006652:	4b1c      	ldr	r3, [pc, #112]	@ (80066c4 <xTaskResumeAll+0x120>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1cb      	bne.n	80065f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006660:	f000 fb66 	bl	8006d30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006664:	4b1c      	ldr	r3, [pc, #112]	@ (80066d8 <xTaskResumeAll+0x134>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d010      	beq.n	8006692 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006670:	f000 f846 	bl	8006700 <xTaskIncrementTick>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d002      	beq.n	8006680 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800667a:	4b16      	ldr	r3, [pc, #88]	@ (80066d4 <xTaskResumeAll+0x130>)
 800667c:	2201      	movs	r2, #1
 800667e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	3b01      	subs	r3, #1
 8006684:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1f1      	bne.n	8006670 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800668c:	4b12      	ldr	r3, [pc, #72]	@ (80066d8 <xTaskResumeAll+0x134>)
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006692:	4b10      	ldr	r3, [pc, #64]	@ (80066d4 <xTaskResumeAll+0x130>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d009      	beq.n	80066ae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800669a:	2301      	movs	r3, #1
 800669c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800669e:	4b0f      	ldr	r3, [pc, #60]	@ (80066dc <xTaskResumeAll+0x138>)
 80066a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066ae:	f001 fa0d 	bl	8007acc <vPortExitCritical>

	return xAlreadyYielded;
 80066b2:	68bb      	ldr	r3, [r7, #8]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	20001040 	.word	0x20001040
 80066c0:	20001018 	.word	0x20001018
 80066c4:	20000fd8 	.word	0x20000fd8
 80066c8:	20001020 	.word	0x20001020
 80066cc:	20000b48 	.word	0x20000b48
 80066d0:	20000b44 	.word	0x20000b44
 80066d4:	2000102c 	.word	0x2000102c
 80066d8:	20001028 	.word	0x20001028
 80066dc:	e000ed04 	.word	0xe000ed04

080066e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80066e6:	4b05      	ldr	r3, [pc, #20]	@ (80066fc <xTaskGetTickCount+0x1c>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80066ec:	687b      	ldr	r3, [r7, #4]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	2000101c 	.word	0x2000101c

08006700 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006706:	2300      	movs	r3, #0
 8006708:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800670a:	4b4f      	ldr	r3, [pc, #316]	@ (8006848 <xTaskIncrementTick+0x148>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	f040 8090 	bne.w	8006834 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006714:	4b4d      	ldr	r3, [pc, #308]	@ (800684c <xTaskIncrementTick+0x14c>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3301      	adds	r3, #1
 800671a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800671c:	4a4b      	ldr	r2, [pc, #300]	@ (800684c <xTaskIncrementTick+0x14c>)
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d121      	bne.n	800676c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006728:	4b49      	ldr	r3, [pc, #292]	@ (8006850 <xTaskIncrementTick+0x150>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00b      	beq.n	800674a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	603b      	str	r3, [r7, #0]
}
 8006744:	bf00      	nop
 8006746:	bf00      	nop
 8006748:	e7fd      	b.n	8006746 <xTaskIncrementTick+0x46>
 800674a:	4b41      	ldr	r3, [pc, #260]	@ (8006850 <xTaskIncrementTick+0x150>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	60fb      	str	r3, [r7, #12]
 8006750:	4b40      	ldr	r3, [pc, #256]	@ (8006854 <xTaskIncrementTick+0x154>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a3e      	ldr	r2, [pc, #248]	@ (8006850 <xTaskIncrementTick+0x150>)
 8006756:	6013      	str	r3, [r2, #0]
 8006758:	4a3e      	ldr	r2, [pc, #248]	@ (8006854 <xTaskIncrementTick+0x154>)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	4b3e      	ldr	r3, [pc, #248]	@ (8006858 <xTaskIncrementTick+0x158>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3301      	adds	r3, #1
 8006764:	4a3c      	ldr	r2, [pc, #240]	@ (8006858 <xTaskIncrementTick+0x158>)
 8006766:	6013      	str	r3, [r2, #0]
 8006768:	f000 fae2 	bl	8006d30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800676c:	4b3b      	ldr	r3, [pc, #236]	@ (800685c <xTaskIncrementTick+0x15c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	429a      	cmp	r2, r3
 8006774:	d349      	bcc.n	800680a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006776:	4b36      	ldr	r3, [pc, #216]	@ (8006850 <xTaskIncrementTick+0x150>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d104      	bne.n	800678a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006780:	4b36      	ldr	r3, [pc, #216]	@ (800685c <xTaskIncrementTick+0x15c>)
 8006782:	f04f 32ff 	mov.w	r2, #4294967295
 8006786:	601a      	str	r2, [r3, #0]
					break;
 8006788:	e03f      	b.n	800680a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800678a:	4b31      	ldr	r3, [pc, #196]	@ (8006850 <xTaskIncrementTick+0x150>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d203      	bcs.n	80067aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067a2:	4a2e      	ldr	r2, [pc, #184]	@ (800685c <xTaskIncrementTick+0x15c>)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067a8:	e02f      	b.n	800680a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	3304      	adds	r3, #4
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fe fd46 	bl	8005240 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d004      	beq.n	80067c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	3318      	adds	r3, #24
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7fe fd3d 	bl	8005240 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ca:	4b25      	ldr	r3, [pc, #148]	@ (8006860 <xTaskIncrementTick+0x160>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d903      	bls.n	80067da <xTaskIncrementTick+0xda>
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d6:	4a22      	ldr	r2, [pc, #136]	@ (8006860 <xTaskIncrementTick+0x160>)
 80067d8:	6013      	str	r3, [r2, #0]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067de:	4613      	mov	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4a1f      	ldr	r2, [pc, #124]	@ (8006864 <xTaskIncrementTick+0x164>)
 80067e8:	441a      	add	r2, r3
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	3304      	adds	r3, #4
 80067ee:	4619      	mov	r1, r3
 80067f0:	4610      	mov	r0, r2
 80067f2:	f7fe fcc8 	bl	8005186 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067fa:	4b1b      	ldr	r3, [pc, #108]	@ (8006868 <xTaskIncrementTick+0x168>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006800:	429a      	cmp	r2, r3
 8006802:	d3b8      	bcc.n	8006776 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006804:	2301      	movs	r3, #1
 8006806:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006808:	e7b5      	b.n	8006776 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800680a:	4b17      	ldr	r3, [pc, #92]	@ (8006868 <xTaskIncrementTick+0x168>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006810:	4914      	ldr	r1, [pc, #80]	@ (8006864 <xTaskIncrementTick+0x164>)
 8006812:	4613      	mov	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	440b      	add	r3, r1
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d901      	bls.n	8006826 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006822:	2301      	movs	r3, #1
 8006824:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006826:	4b11      	ldr	r3, [pc, #68]	@ (800686c <xTaskIncrementTick+0x16c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d007      	beq.n	800683e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800682e:	2301      	movs	r3, #1
 8006830:	617b      	str	r3, [r7, #20]
 8006832:	e004      	b.n	800683e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006834:	4b0e      	ldr	r3, [pc, #56]	@ (8006870 <xTaskIncrementTick+0x170>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	3301      	adds	r3, #1
 800683a:	4a0d      	ldr	r2, [pc, #52]	@ (8006870 <xTaskIncrementTick+0x170>)
 800683c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800683e:	697b      	ldr	r3, [r7, #20]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3718      	adds	r7, #24
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	20001040 	.word	0x20001040
 800684c:	2000101c 	.word	0x2000101c
 8006850:	20000fd0 	.word	0x20000fd0
 8006854:	20000fd4 	.word	0x20000fd4
 8006858:	20001030 	.word	0x20001030
 800685c:	20001038 	.word	0x20001038
 8006860:	20001020 	.word	0x20001020
 8006864:	20000b48 	.word	0x20000b48
 8006868:	20000b44 	.word	0x20000b44
 800686c:	2000102c 	.word	0x2000102c
 8006870:	20001028 	.word	0x20001028

08006874 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800687a:	4b2b      	ldr	r3, [pc, #172]	@ (8006928 <vTaskSwitchContext+0xb4>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006882:	4b2a      	ldr	r3, [pc, #168]	@ (800692c <vTaskSwitchContext+0xb8>)
 8006884:	2201      	movs	r2, #1
 8006886:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006888:	e047      	b.n	800691a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800688a:	4b28      	ldr	r3, [pc, #160]	@ (800692c <vTaskSwitchContext+0xb8>)
 800688c:	2200      	movs	r2, #0
 800688e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006890:	4b27      	ldr	r3, [pc, #156]	@ (8006930 <vTaskSwitchContext+0xbc>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	60fb      	str	r3, [r7, #12]
 8006896:	e011      	b.n	80068bc <vTaskSwitchContext+0x48>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10b      	bne.n	80068b6 <vTaskSwitchContext+0x42>
	__asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	607b      	str	r3, [r7, #4]
}
 80068b0:	bf00      	nop
 80068b2:	bf00      	nop
 80068b4:	e7fd      	b.n	80068b2 <vTaskSwitchContext+0x3e>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	3b01      	subs	r3, #1
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	491d      	ldr	r1, [pc, #116]	@ (8006934 <vTaskSwitchContext+0xc0>)
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	4613      	mov	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	440b      	add	r3, r1
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0e3      	beq.n	8006898 <vTaskSwitchContext+0x24>
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4a16      	ldr	r2, [pc, #88]	@ (8006934 <vTaskSwitchContext+0xc0>)
 80068dc:	4413      	add	r3, r2
 80068de:	60bb      	str	r3, [r7, #8]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	605a      	str	r2, [r3, #4]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	3308      	adds	r3, #8
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d104      	bne.n	8006900 <vTaskSwitchContext+0x8c>
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	605a      	str	r2, [r3, #4]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	4a0c      	ldr	r2, [pc, #48]	@ (8006938 <vTaskSwitchContext+0xc4>)
 8006908:	6013      	str	r3, [r2, #0]
 800690a:	4a09      	ldr	r2, [pc, #36]	@ (8006930 <vTaskSwitchContext+0xbc>)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006910:	4b09      	ldr	r3, [pc, #36]	@ (8006938 <vTaskSwitchContext+0xc4>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3354      	adds	r3, #84	@ 0x54
 8006916:	4a09      	ldr	r2, [pc, #36]	@ (800693c <vTaskSwitchContext+0xc8>)
 8006918:	6013      	str	r3, [r2, #0]
}
 800691a:	bf00      	nop
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	20001040 	.word	0x20001040
 800692c:	2000102c 	.word	0x2000102c
 8006930:	20001020 	.word	0x20001020
 8006934:	20000b48 	.word	0x20000b48
 8006938:	20000b44 	.word	0x20000b44
 800693c:	2000001c 	.word	0x2000001c

08006940 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10b      	bne.n	8006968 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	60fb      	str	r3, [r7, #12]
}
 8006962:	bf00      	nop
 8006964:	bf00      	nop
 8006966:	e7fd      	b.n	8006964 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006968:	4b07      	ldr	r3, [pc, #28]	@ (8006988 <vTaskPlaceOnEventList+0x48>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3318      	adds	r3, #24
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7fe fc2c 	bl	80051ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006976:	2101      	movs	r1, #1
 8006978:	6838      	ldr	r0, [r7, #0]
 800697a:	f000 fb97 	bl	80070ac <prvAddCurrentTaskToDelayedList>
}
 800697e:	bf00      	nop
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	20000b44 	.word	0x20000b44

0800698c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10b      	bne.n	80069b6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	617b      	str	r3, [r7, #20]
}
 80069b0:	bf00      	nop
 80069b2:	bf00      	nop
 80069b4:	e7fd      	b.n	80069b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069b6:	4b0a      	ldr	r3, [pc, #40]	@ (80069e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3318      	adds	r3, #24
 80069bc:	4619      	mov	r1, r3
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f7fe fbe1 	bl	8005186 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d002      	beq.n	80069d0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80069ca:	f04f 33ff 	mov.w	r3, #4294967295
 80069ce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80069d0:	6879      	ldr	r1, [r7, #4]
 80069d2:	68b8      	ldr	r0, [r7, #8]
 80069d4:	f000 fb6a 	bl	80070ac <prvAddCurrentTaskToDelayedList>
	}
 80069d8:	bf00      	nop
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	20000b44 	.word	0x20000b44

080069e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10b      	bne.n	8006a12 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	60fb      	str	r3, [r7, #12]
}
 8006a0c:	bf00      	nop
 8006a0e:	bf00      	nop
 8006a10:	e7fd      	b.n	8006a0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	3318      	adds	r3, #24
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7fe fc12 	bl	8005240 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8006a94 <xTaskRemoveFromEventList+0xb0>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d11d      	bne.n	8006a60 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	3304      	adds	r3, #4
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7fe fc09 	bl	8005240 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a32:	4b19      	ldr	r3, [pc, #100]	@ (8006a98 <xTaskRemoveFromEventList+0xb4>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d903      	bls.n	8006a42 <xTaskRemoveFromEventList+0x5e>
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3e:	4a16      	ldr	r2, [pc, #88]	@ (8006a98 <xTaskRemoveFromEventList+0xb4>)
 8006a40:	6013      	str	r3, [r2, #0]
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a46:	4613      	mov	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4a13      	ldr	r2, [pc, #76]	@ (8006a9c <xTaskRemoveFromEventList+0xb8>)
 8006a50:	441a      	add	r2, r3
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	3304      	adds	r3, #4
 8006a56:	4619      	mov	r1, r3
 8006a58:	4610      	mov	r0, r2
 8006a5a:	f7fe fb94 	bl	8005186 <vListInsertEnd>
 8006a5e:	e005      	b.n	8006a6c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	3318      	adds	r3, #24
 8006a64:	4619      	mov	r1, r3
 8006a66:	480e      	ldr	r0, [pc, #56]	@ (8006aa0 <xTaskRemoveFromEventList+0xbc>)
 8006a68:	f7fe fb8d 	bl	8005186 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a70:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa4 <xTaskRemoveFromEventList+0xc0>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d905      	bls.n	8006a86 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8006aa8 <xTaskRemoveFromEventList+0xc4>)
 8006a80:	2201      	movs	r2, #1
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	e001      	b.n	8006a8a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006a86:	2300      	movs	r3, #0
 8006a88:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a8a:	697b      	ldr	r3, [r7, #20]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	20001040 	.word	0x20001040
 8006a98:	20001020 	.word	0x20001020
 8006a9c:	20000b48 	.word	0x20000b48
 8006aa0:	20000fd8 	.word	0x20000fd8
 8006aa4:	20000b44 	.word	0x20000b44
 8006aa8:	2000102c 	.word	0x2000102c

08006aac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ab4:	4b06      	ldr	r3, [pc, #24]	@ (8006ad0 <vTaskInternalSetTimeOutState+0x24>)
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006abc:	4b05      	ldr	r3, [pc, #20]	@ (8006ad4 <vTaskInternalSetTimeOutState+0x28>)
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	605a      	str	r2, [r3, #4]
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	20001030 	.word	0x20001030
 8006ad4:	2000101c 	.word	0x2000101c

08006ad8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b088      	sub	sp, #32
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10b      	bne.n	8006b00 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aec:	f383 8811 	msr	BASEPRI, r3
 8006af0:	f3bf 8f6f 	isb	sy
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	613b      	str	r3, [r7, #16]
}
 8006afa:	bf00      	nop
 8006afc:	bf00      	nop
 8006afe:	e7fd      	b.n	8006afc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10b      	bne.n	8006b1e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b0a:	f383 8811 	msr	BASEPRI, r3
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	60fb      	str	r3, [r7, #12]
}
 8006b18:	bf00      	nop
 8006b1a:	bf00      	nop
 8006b1c:	e7fd      	b.n	8006b1a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006b1e:	f000 ffa3 	bl	8007a68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b22:	4b1d      	ldr	r3, [pc, #116]	@ (8006b98 <xTaskCheckForTimeOut+0xc0>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3a:	d102      	bne.n	8006b42 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	61fb      	str	r3, [r7, #28]
 8006b40:	e023      	b.n	8006b8a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	4b15      	ldr	r3, [pc, #84]	@ (8006b9c <xTaskCheckForTimeOut+0xc4>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d007      	beq.n	8006b5e <xTaskCheckForTimeOut+0x86>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d302      	bcc.n	8006b5e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	61fb      	str	r3, [r7, #28]
 8006b5c:	e015      	b.n	8006b8a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d20b      	bcs.n	8006b80 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	1ad2      	subs	r2, r2, r3
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff ff99 	bl	8006aac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	61fb      	str	r3, [r7, #28]
 8006b7e:	e004      	b.n	8006b8a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b86:	2301      	movs	r3, #1
 8006b88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b8a:	f000 ff9f 	bl	8007acc <vPortExitCritical>

	return xReturn;
 8006b8e:	69fb      	ldr	r3, [r7, #28]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3720      	adds	r7, #32
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	2000101c 	.word	0x2000101c
 8006b9c:	20001030 	.word	0x20001030

08006ba0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ba4:	4b03      	ldr	r3, [pc, #12]	@ (8006bb4 <vTaskMissedYield+0x14>)
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]
}
 8006baa:	bf00      	nop
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	2000102c 	.word	0x2000102c

08006bb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006bc0:	f000 f852 	bl	8006c68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006bc4:	4b06      	ldr	r3, [pc, #24]	@ (8006be0 <prvIdleTask+0x28>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d9f9      	bls.n	8006bc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006bcc:	4b05      	ldr	r3, [pc, #20]	@ (8006be4 <prvIdleTask+0x2c>)
 8006bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bdc:	e7f0      	b.n	8006bc0 <prvIdleTask+0x8>
 8006bde:	bf00      	nop
 8006be0:	20000b48 	.word	0x20000b48
 8006be4:	e000ed04 	.word	0xe000ed04

08006be8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bee:	2300      	movs	r3, #0
 8006bf0:	607b      	str	r3, [r7, #4]
 8006bf2:	e00c      	b.n	8006c0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4a12      	ldr	r2, [pc, #72]	@ (8006c48 <prvInitialiseTaskLists+0x60>)
 8006c00:	4413      	add	r3, r2
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fe fa92 	bl	800512c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	607b      	str	r3, [r7, #4]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2b37      	cmp	r3, #55	@ 0x37
 8006c12:	d9ef      	bls.n	8006bf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c14:	480d      	ldr	r0, [pc, #52]	@ (8006c4c <prvInitialiseTaskLists+0x64>)
 8006c16:	f7fe fa89 	bl	800512c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c1a:	480d      	ldr	r0, [pc, #52]	@ (8006c50 <prvInitialiseTaskLists+0x68>)
 8006c1c:	f7fe fa86 	bl	800512c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c20:	480c      	ldr	r0, [pc, #48]	@ (8006c54 <prvInitialiseTaskLists+0x6c>)
 8006c22:	f7fe fa83 	bl	800512c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c26:	480c      	ldr	r0, [pc, #48]	@ (8006c58 <prvInitialiseTaskLists+0x70>)
 8006c28:	f7fe fa80 	bl	800512c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c2c:	480b      	ldr	r0, [pc, #44]	@ (8006c5c <prvInitialiseTaskLists+0x74>)
 8006c2e:	f7fe fa7d 	bl	800512c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c32:	4b0b      	ldr	r3, [pc, #44]	@ (8006c60 <prvInitialiseTaskLists+0x78>)
 8006c34:	4a05      	ldr	r2, [pc, #20]	@ (8006c4c <prvInitialiseTaskLists+0x64>)
 8006c36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c38:	4b0a      	ldr	r3, [pc, #40]	@ (8006c64 <prvInitialiseTaskLists+0x7c>)
 8006c3a:	4a05      	ldr	r2, [pc, #20]	@ (8006c50 <prvInitialiseTaskLists+0x68>)
 8006c3c:	601a      	str	r2, [r3, #0]
}
 8006c3e:	bf00      	nop
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20000b48 	.word	0x20000b48
 8006c4c:	20000fa8 	.word	0x20000fa8
 8006c50:	20000fbc 	.word	0x20000fbc
 8006c54:	20000fd8 	.word	0x20000fd8
 8006c58:	20000fec 	.word	0x20000fec
 8006c5c:	20001004 	.word	0x20001004
 8006c60:	20000fd0 	.word	0x20000fd0
 8006c64:	20000fd4 	.word	0x20000fd4

08006c68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c6e:	e019      	b.n	8006ca4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c70:	f000 fefa 	bl	8007a68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c74:	4b10      	ldr	r3, [pc, #64]	@ (8006cb8 <prvCheckTasksWaitingTermination+0x50>)
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	3304      	adds	r3, #4
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fe fadd 	bl	8005240 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c86:	4b0d      	ldr	r3, [pc, #52]	@ (8006cbc <prvCheckTasksWaitingTermination+0x54>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	4a0b      	ldr	r2, [pc, #44]	@ (8006cbc <prvCheckTasksWaitingTermination+0x54>)
 8006c8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c90:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc0 <prvCheckTasksWaitingTermination+0x58>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3b01      	subs	r3, #1
 8006c96:	4a0a      	ldr	r2, [pc, #40]	@ (8006cc0 <prvCheckTasksWaitingTermination+0x58>)
 8006c98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c9a:	f000 ff17 	bl	8007acc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f810 	bl	8006cc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ca4:	4b06      	ldr	r3, [pc, #24]	@ (8006cc0 <prvCheckTasksWaitingTermination+0x58>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1e1      	bne.n	8006c70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006cac:	bf00      	nop
 8006cae:	bf00      	nop
 8006cb0:	3708      	adds	r7, #8
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20000fec 	.word	0x20000fec
 8006cbc:	20001018 	.word	0x20001018
 8006cc0:	20001000 	.word	0x20001000

08006cc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	3354      	adds	r3, #84	@ 0x54
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f001 ff85 	bl	8008be0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d108      	bne.n	8006cf2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f001 f8af 	bl	8007e48 <vPortFree>
				vPortFree( pxTCB );
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f001 f8ac 	bl	8007e48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006cf0:	e019      	b.n	8006d26 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d103      	bne.n	8006d04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f001 f8a3 	bl	8007e48 <vPortFree>
	}
 8006d02:	e010      	b.n	8006d26 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d00b      	beq.n	8006d26 <prvDeleteTCB+0x62>
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	60fb      	str	r3, [r7, #12]
}
 8006d20:	bf00      	nop
 8006d22:	bf00      	nop
 8006d24:	e7fd      	b.n	8006d22 <prvDeleteTCB+0x5e>
	}
 8006d26:	bf00      	nop
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
	...

08006d30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d36:	4b0c      	ldr	r3, [pc, #48]	@ (8006d68 <prvResetNextTaskUnblockTime+0x38>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d104      	bne.n	8006d4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d40:	4b0a      	ldr	r3, [pc, #40]	@ (8006d6c <prvResetNextTaskUnblockTime+0x3c>)
 8006d42:	f04f 32ff 	mov.w	r2, #4294967295
 8006d46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d48:	e008      	b.n	8006d5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d4a:	4b07      	ldr	r3, [pc, #28]	@ (8006d68 <prvResetNextTaskUnblockTime+0x38>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	4a04      	ldr	r2, [pc, #16]	@ (8006d6c <prvResetNextTaskUnblockTime+0x3c>)
 8006d5a:	6013      	str	r3, [r2, #0]
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	20000fd0 	.word	0x20000fd0
 8006d6c:	20001038 	.word	0x20001038

08006d70 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006d76:	4b05      	ldr	r3, [pc, #20]	@ (8006d8c <xTaskGetCurrentTaskHandle+0x1c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006d7c:	687b      	ldr	r3, [r7, #4]
	}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	20000b44 	.word	0x20000b44

08006d90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d96:	4b0b      	ldr	r3, [pc, #44]	@ (8006dc4 <xTaskGetSchedulerState+0x34>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d102      	bne.n	8006da4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	607b      	str	r3, [r7, #4]
 8006da2:	e008      	b.n	8006db6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006da4:	4b08      	ldr	r3, [pc, #32]	@ (8006dc8 <xTaskGetSchedulerState+0x38>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d102      	bne.n	8006db2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006dac:	2302      	movs	r3, #2
 8006dae:	607b      	str	r3, [r7, #4]
 8006db0:	e001      	b.n	8006db6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006db2:	2300      	movs	r3, #0
 8006db4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006db6:	687b      	ldr	r3, [r7, #4]
	}
 8006db8:	4618      	mov	r0, r3
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	20001024 	.word	0x20001024
 8006dc8:	20001040 	.word	0x20001040

08006dcc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d051      	beq.n	8006e86 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006de6:	4b2a      	ldr	r3, [pc, #168]	@ (8006e90 <xTaskPriorityInherit+0xc4>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d241      	bcs.n	8006e74 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	db06      	blt.n	8006e06 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006df8:	4b25      	ldr	r3, [pc, #148]	@ (8006e90 <xTaskPriorityInherit+0xc4>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	6959      	ldr	r1, [r3, #20]
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e0e:	4613      	mov	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4a1f      	ldr	r2, [pc, #124]	@ (8006e94 <xTaskPriorityInherit+0xc8>)
 8006e18:	4413      	add	r3, r2
 8006e1a:	4299      	cmp	r1, r3
 8006e1c:	d122      	bne.n	8006e64 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	3304      	adds	r3, #4
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7fe fa0c 	bl	8005240 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e28:	4b19      	ldr	r3, [pc, #100]	@ (8006e90 <xTaskPriorityInherit+0xc4>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e36:	4b18      	ldr	r3, [pc, #96]	@ (8006e98 <xTaskPriorityInherit+0xcc>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d903      	bls.n	8006e46 <xTaskPriorityInherit+0x7a>
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e42:	4a15      	ldr	r2, [pc, #84]	@ (8006e98 <xTaskPriorityInherit+0xcc>)
 8006e44:	6013      	str	r3, [r2, #0]
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4a10      	ldr	r2, [pc, #64]	@ (8006e94 <xTaskPriorityInherit+0xc8>)
 8006e54:	441a      	add	r2, r3
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	3304      	adds	r3, #4
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	f7fe f992 	bl	8005186 <vListInsertEnd>
 8006e62:	e004      	b.n	8006e6e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e64:	4b0a      	ldr	r3, [pc, #40]	@ (8006e90 <xTaskPriorityInherit+0xc4>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	60fb      	str	r3, [r7, #12]
 8006e72:	e008      	b.n	8006e86 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e78:	4b05      	ldr	r3, [pc, #20]	@ (8006e90 <xTaskPriorityInherit+0xc4>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d201      	bcs.n	8006e86 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006e82:	2301      	movs	r3, #1
 8006e84:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e86:	68fb      	ldr	r3, [r7, #12]
	}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	20000b44 	.word	0x20000b44
 8006e94:	20000b48 	.word	0x20000b48
 8006e98:	20001020 	.word	0x20001020

08006e9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d058      	beq.n	8006f64 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006eb2:	4b2f      	ldr	r3, [pc, #188]	@ (8006f70 <xTaskPriorityDisinherit+0xd4>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d00b      	beq.n	8006ed4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	60fb      	str	r3, [r7, #12]
}
 8006ece:	bf00      	nop
 8006ed0:	bf00      	nop
 8006ed2:	e7fd      	b.n	8006ed0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10b      	bne.n	8006ef4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	60bb      	str	r3, [r7, #8]
}
 8006eee:	bf00      	nop
 8006ef0:	bf00      	nop
 8006ef2:	e7fd      	b.n	8006ef0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ef8:	1e5a      	subs	r2, r3, #1
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d02c      	beq.n	8006f64 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d128      	bne.n	8006f64 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	3304      	adds	r3, #4
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fe f992 	bl	8005240 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f28:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f34:	4b0f      	ldr	r3, [pc, #60]	@ (8006f74 <xTaskPriorityDisinherit+0xd8>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d903      	bls.n	8006f44 <xTaskPriorityDisinherit+0xa8>
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f40:	4a0c      	ldr	r2, [pc, #48]	@ (8006f74 <xTaskPriorityDisinherit+0xd8>)
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f48:	4613      	mov	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4413      	add	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4a09      	ldr	r2, [pc, #36]	@ (8006f78 <xTaskPriorityDisinherit+0xdc>)
 8006f52:	441a      	add	r2, r3
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	3304      	adds	r3, #4
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	f7fe f913 	bl	8005186 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f60:	2301      	movs	r3, #1
 8006f62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f64:	697b      	ldr	r3, [r7, #20]
	}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20000b44 	.word	0x20000b44
 8006f74:	20001020 	.word	0x20001020
 8006f78:	20000b48 	.word	0x20000b48

08006f7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d06c      	beq.n	800706e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10b      	bne.n	8006fb4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	60fb      	str	r3, [r7, #12]
}
 8006fae:	bf00      	nop
 8006fb0:	bf00      	nop
 8006fb2:	e7fd      	b.n	8006fb0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fb8:	683a      	ldr	r2, [r7, #0]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d902      	bls.n	8006fc4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	61fb      	str	r3, [r7, #28]
 8006fc2:	e002      	b.n	8006fca <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fc8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fce:	69fa      	ldr	r2, [r7, #28]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d04c      	beq.n	800706e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d147      	bne.n	800706e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006fde:	4b26      	ldr	r3, [pc, #152]	@ (8007078 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	69ba      	ldr	r2, [r7, #24]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d10b      	bne.n	8007000 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fec:	f383 8811 	msr	BASEPRI, r3
 8006ff0:	f3bf 8f6f 	isb	sy
 8006ff4:	f3bf 8f4f 	dsb	sy
 8006ff8:	60bb      	str	r3, [r7, #8]
}
 8006ffa:	bf00      	nop
 8006ffc:	bf00      	nop
 8006ffe:	e7fd      	b.n	8006ffc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007004:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	69fa      	ldr	r2, [r7, #28]
 800700a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	2b00      	cmp	r3, #0
 8007012:	db04      	blt.n	800701e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	6959      	ldr	r1, [r3, #20]
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	4613      	mov	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4a13      	ldr	r2, [pc, #76]	@ (800707c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800702e:	4413      	add	r3, r2
 8007030:	4299      	cmp	r1, r3
 8007032:	d11c      	bne.n	800706e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	3304      	adds	r3, #4
 8007038:	4618      	mov	r0, r3
 800703a:	f7fe f901 	bl	8005240 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007042:	4b0f      	ldr	r3, [pc, #60]	@ (8007080 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	429a      	cmp	r2, r3
 8007048:	d903      	bls.n	8007052 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800704e:	4a0c      	ldr	r2, [pc, #48]	@ (8007080 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007056:	4613      	mov	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4413      	add	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4a07      	ldr	r2, [pc, #28]	@ (800707c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007060:	441a      	add	r2, r3
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	3304      	adds	r3, #4
 8007066:	4619      	mov	r1, r3
 8007068:	4610      	mov	r0, r2
 800706a:	f7fe f88c 	bl	8005186 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800706e:	bf00      	nop
 8007070:	3720      	adds	r7, #32
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20000b44 	.word	0x20000b44
 800707c:	20000b48 	.word	0x20000b48
 8007080:	20001020 	.word	0x20001020

08007084 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007084:	b480      	push	{r7}
 8007086:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007088:	4b07      	ldr	r3, [pc, #28]	@ (80070a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d004      	beq.n	800709a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007090:	4b05      	ldr	r3, [pc, #20]	@ (80070a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007096:	3201      	adds	r2, #1
 8007098:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800709a:	4b03      	ldr	r3, [pc, #12]	@ (80070a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800709c:	681b      	ldr	r3, [r3, #0]
	}
 800709e:	4618      	mov	r0, r3
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	20000b44 	.word	0x20000b44

080070ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070b6:	4b21      	ldr	r3, [pc, #132]	@ (800713c <prvAddCurrentTaskToDelayedList+0x90>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070bc:	4b20      	ldr	r3, [pc, #128]	@ (8007140 <prvAddCurrentTaskToDelayedList+0x94>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	3304      	adds	r3, #4
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe f8bc 	bl	8005240 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ce:	d10a      	bne.n	80070e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d007      	beq.n	80070e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007140 <prvAddCurrentTaskToDelayedList+0x94>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3304      	adds	r3, #4
 80070dc:	4619      	mov	r1, r3
 80070de:	4819      	ldr	r0, [pc, #100]	@ (8007144 <prvAddCurrentTaskToDelayedList+0x98>)
 80070e0:	f7fe f851 	bl	8005186 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80070e4:	e026      	b.n	8007134 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4413      	add	r3, r2
 80070ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80070ee:	4b14      	ldr	r3, [pc, #80]	@ (8007140 <prvAddCurrentTaskToDelayedList+0x94>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d209      	bcs.n	8007112 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070fe:	4b12      	ldr	r3, [pc, #72]	@ (8007148 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	4b0f      	ldr	r3, [pc, #60]	@ (8007140 <prvAddCurrentTaskToDelayedList+0x94>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3304      	adds	r3, #4
 8007108:	4619      	mov	r1, r3
 800710a:	4610      	mov	r0, r2
 800710c:	f7fe f85f 	bl	80051ce <vListInsert>
}
 8007110:	e010      	b.n	8007134 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007112:	4b0e      	ldr	r3, [pc, #56]	@ (800714c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	4b0a      	ldr	r3, [pc, #40]	@ (8007140 <prvAddCurrentTaskToDelayedList+0x94>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3304      	adds	r3, #4
 800711c:	4619      	mov	r1, r3
 800711e:	4610      	mov	r0, r2
 8007120:	f7fe f855 	bl	80051ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007124:	4b0a      	ldr	r3, [pc, #40]	@ (8007150 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	429a      	cmp	r2, r3
 800712c:	d202      	bcs.n	8007134 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800712e:	4a08      	ldr	r2, [pc, #32]	@ (8007150 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	6013      	str	r3, [r2, #0]
}
 8007134:	bf00      	nop
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	2000101c 	.word	0x2000101c
 8007140:	20000b44 	.word	0x20000b44
 8007144:	20001004 	.word	0x20001004
 8007148:	20000fd4 	.word	0x20000fd4
 800714c:	20000fd0 	.word	0x20000fd0
 8007150:	20001038 	.word	0x20001038

08007154 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b08a      	sub	sp, #40	@ 0x28
 8007158:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800715a:	2300      	movs	r3, #0
 800715c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800715e:	f000 fb13 	bl	8007788 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007162:	4b1d      	ldr	r3, [pc, #116]	@ (80071d8 <xTimerCreateTimerTask+0x84>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d021      	beq.n	80071ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800716a:	2300      	movs	r3, #0
 800716c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800716e:	2300      	movs	r3, #0
 8007170:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007172:	1d3a      	adds	r2, r7, #4
 8007174:	f107 0108 	add.w	r1, r7, #8
 8007178:	f107 030c 	add.w	r3, r7, #12
 800717c:	4618      	mov	r0, r3
 800717e:	f7fd ffbb 	bl	80050f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007182:	6879      	ldr	r1, [r7, #4]
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	9202      	str	r2, [sp, #8]
 800718a:	9301      	str	r3, [sp, #4]
 800718c:	2302      	movs	r3, #2
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	2300      	movs	r3, #0
 8007192:	460a      	mov	r2, r1
 8007194:	4911      	ldr	r1, [pc, #68]	@ (80071dc <xTimerCreateTimerTask+0x88>)
 8007196:	4812      	ldr	r0, [pc, #72]	@ (80071e0 <xTimerCreateTimerTask+0x8c>)
 8007198:	f7fe ff92 	bl	80060c0 <xTaskCreateStatic>
 800719c:	4603      	mov	r3, r0
 800719e:	4a11      	ldr	r2, [pc, #68]	@ (80071e4 <xTimerCreateTimerTask+0x90>)
 80071a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80071a2:	4b10      	ldr	r3, [pc, #64]	@ (80071e4 <xTimerCreateTimerTask+0x90>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80071aa:	2301      	movs	r3, #1
 80071ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10b      	bne.n	80071cc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80071b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	613b      	str	r3, [r7, #16]
}
 80071c6:	bf00      	nop
 80071c8:	bf00      	nop
 80071ca:	e7fd      	b.n	80071c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80071cc:	697b      	ldr	r3, [r7, #20]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3718      	adds	r7, #24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20001074 	.word	0x20001074
 80071dc:	0800c41c 	.word	0x0800c41c
 80071e0:	08007321 	.word	0x08007321
 80071e4:	20001078 	.word	0x20001078

080071e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b08a      	sub	sp, #40	@ 0x28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
 80071f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80071f6:	2300      	movs	r3, #0
 80071f8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10b      	bne.n	8007218 <xTimerGenericCommand+0x30>
	__asm volatile
 8007200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	623b      	str	r3, [r7, #32]
}
 8007212:	bf00      	nop
 8007214:	bf00      	nop
 8007216:	e7fd      	b.n	8007214 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007218:	4b19      	ldr	r3, [pc, #100]	@ (8007280 <xTimerGenericCommand+0x98>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d02a      	beq.n	8007276 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	2b05      	cmp	r3, #5
 8007230:	dc18      	bgt.n	8007264 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007232:	f7ff fdad 	bl	8006d90 <xTaskGetSchedulerState>
 8007236:	4603      	mov	r3, r0
 8007238:	2b02      	cmp	r3, #2
 800723a:	d109      	bne.n	8007250 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800723c:	4b10      	ldr	r3, [pc, #64]	@ (8007280 <xTimerGenericCommand+0x98>)
 800723e:	6818      	ldr	r0, [r3, #0]
 8007240:	f107 0110 	add.w	r1, r7, #16
 8007244:	2300      	movs	r3, #0
 8007246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007248:	f7fe fa22 	bl	8005690 <xQueueGenericSend>
 800724c:	6278      	str	r0, [r7, #36]	@ 0x24
 800724e:	e012      	b.n	8007276 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007250:	4b0b      	ldr	r3, [pc, #44]	@ (8007280 <xTimerGenericCommand+0x98>)
 8007252:	6818      	ldr	r0, [r3, #0]
 8007254:	f107 0110 	add.w	r1, r7, #16
 8007258:	2300      	movs	r3, #0
 800725a:	2200      	movs	r2, #0
 800725c:	f7fe fa18 	bl	8005690 <xQueueGenericSend>
 8007260:	6278      	str	r0, [r7, #36]	@ 0x24
 8007262:	e008      	b.n	8007276 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007264:	4b06      	ldr	r3, [pc, #24]	@ (8007280 <xTimerGenericCommand+0x98>)
 8007266:	6818      	ldr	r0, [r3, #0]
 8007268:	f107 0110 	add.w	r1, r7, #16
 800726c:	2300      	movs	r3, #0
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	f7fe fb10 	bl	8005894 <xQueueGenericSendFromISR>
 8007274:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007278:	4618      	mov	r0, r3
 800727a:	3728      	adds	r7, #40	@ 0x28
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	20001074 	.word	0x20001074

08007284 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b088      	sub	sp, #32
 8007288:	af02      	add	r7, sp, #8
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800728e:	4b23      	ldr	r3, [pc, #140]	@ (800731c <prvProcessExpiredTimer+0x98>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	3304      	adds	r3, #4
 800729c:	4618      	mov	r0, r3
 800729e:	f7fd ffcf 	bl	8005240 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d023      	beq.n	80072f8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	699a      	ldr	r2, [r3, #24]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	18d1      	adds	r1, r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	6978      	ldr	r0, [r7, #20]
 80072be:	f000 f8d5 	bl	800746c <prvInsertTimerInActiveList>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d020      	beq.n	800730a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072c8:	2300      	movs	r3, #0
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	2300      	movs	r3, #0
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	2100      	movs	r1, #0
 80072d2:	6978      	ldr	r0, [r7, #20]
 80072d4:	f7ff ff88 	bl	80071e8 <xTimerGenericCommand>
 80072d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d114      	bne.n	800730a <prvProcessExpiredTimer+0x86>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	60fb      	str	r3, [r7, #12]
}
 80072f2:	bf00      	nop
 80072f4:	bf00      	nop
 80072f6:	e7fd      	b.n	80072f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072fe:	f023 0301 	bic.w	r3, r3, #1
 8007302:	b2da      	uxtb	r2, r3
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	6978      	ldr	r0, [r7, #20]
 8007310:	4798      	blx	r3
}
 8007312:	bf00      	nop
 8007314:	3718      	adds	r7, #24
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	2000106c 	.word	0x2000106c

08007320 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007328:	f107 0308 	add.w	r3, r7, #8
 800732c:	4618      	mov	r0, r3
 800732e:	f000 f859 	bl	80073e4 <prvGetNextExpireTime>
 8007332:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	4619      	mov	r1, r3
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f000 f805 	bl	8007348 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800733e:	f000 f8d7 	bl	80074f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007342:	bf00      	nop
 8007344:	e7f0      	b.n	8007328 <prvTimerTask+0x8>
	...

08007348 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007352:	f7ff f919 	bl	8006588 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007356:	f107 0308 	add.w	r3, r7, #8
 800735a:	4618      	mov	r0, r3
 800735c:	f000 f866 	bl	800742c <prvSampleTimeNow>
 8007360:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d130      	bne.n	80073ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10a      	bne.n	8007384 <prvProcessTimerOrBlockTask+0x3c>
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	429a      	cmp	r2, r3
 8007374:	d806      	bhi.n	8007384 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007376:	f7ff f915 	bl	80065a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800737a:	68f9      	ldr	r1, [r7, #12]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7ff ff81 	bl	8007284 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007382:	e024      	b.n	80073ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d008      	beq.n	800739c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800738a:	4b13      	ldr	r3, [pc, #76]	@ (80073d8 <prvProcessTimerOrBlockTask+0x90>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <prvProcessTimerOrBlockTask+0x50>
 8007394:	2301      	movs	r3, #1
 8007396:	e000      	b.n	800739a <prvProcessTimerOrBlockTask+0x52>
 8007398:	2300      	movs	r3, #0
 800739a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800739c:	4b0f      	ldr	r3, [pc, #60]	@ (80073dc <prvProcessTimerOrBlockTask+0x94>)
 800739e:	6818      	ldr	r0, [r3, #0]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	4619      	mov	r1, r3
 80073aa:	f7fe fe55 	bl	8006058 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80073ae:	f7ff f8f9 	bl	80065a4 <xTaskResumeAll>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10a      	bne.n	80073ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80073b8:	4b09      	ldr	r3, [pc, #36]	@ (80073e0 <prvProcessTimerOrBlockTask+0x98>)
 80073ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073be:	601a      	str	r2, [r3, #0]
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	f3bf 8f6f 	isb	sy
}
 80073c8:	e001      	b.n	80073ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80073ca:	f7ff f8eb 	bl	80065a4 <xTaskResumeAll>
}
 80073ce:	bf00      	nop
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20001070 	.word	0x20001070
 80073dc:	20001074 	.word	0x20001074
 80073e0:	e000ed04 	.word	0xe000ed04

080073e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80073ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007428 <prvGetNextExpireTime+0x44>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <prvGetNextExpireTime+0x16>
 80073f6:	2201      	movs	r2, #1
 80073f8:	e000      	b.n	80073fc <prvGetNextExpireTime+0x18>
 80073fa:	2200      	movs	r2, #0
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d105      	bne.n	8007414 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007408:	4b07      	ldr	r3, [pc, #28]	@ (8007428 <prvGetNextExpireTime+0x44>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	60fb      	str	r3, [r7, #12]
 8007412:	e001      	b.n	8007418 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007418:	68fb      	ldr	r3, [r7, #12]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	2000106c 	.word	0x2000106c

0800742c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007434:	f7ff f954 	bl	80066e0 <xTaskGetTickCount>
 8007438:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800743a:	4b0b      	ldr	r3, [pc, #44]	@ (8007468 <prvSampleTimeNow+0x3c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	429a      	cmp	r2, r3
 8007442:	d205      	bcs.n	8007450 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007444:	f000 f93a 	bl	80076bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	e002      	b.n	8007456 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007456:	4a04      	ldr	r2, [pc, #16]	@ (8007468 <prvSampleTimeNow+0x3c>)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800745c:	68fb      	ldr	r3, [r7, #12]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	2000107c 	.word	0x2000107c

0800746c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
 8007478:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800747a:	2300      	movs	r3, #0
 800747c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	429a      	cmp	r2, r3
 8007490:	d812      	bhi.n	80074b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	1ad2      	subs	r2, r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	429a      	cmp	r2, r3
 800749e:	d302      	bcc.n	80074a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80074a0:	2301      	movs	r3, #1
 80074a2:	617b      	str	r3, [r7, #20]
 80074a4:	e01b      	b.n	80074de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80074a6:	4b10      	ldr	r3, [pc, #64]	@ (80074e8 <prvInsertTimerInActiveList+0x7c>)
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	3304      	adds	r3, #4
 80074ae:	4619      	mov	r1, r3
 80074b0:	4610      	mov	r0, r2
 80074b2:	f7fd fe8c 	bl	80051ce <vListInsert>
 80074b6:	e012      	b.n	80074de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d206      	bcs.n	80074ce <prvInsertTimerInActiveList+0x62>
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d302      	bcc.n	80074ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80074c8:	2301      	movs	r3, #1
 80074ca:	617b      	str	r3, [r7, #20]
 80074cc:	e007      	b.n	80074de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074ce:	4b07      	ldr	r3, [pc, #28]	@ (80074ec <prvInsertTimerInActiveList+0x80>)
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	3304      	adds	r3, #4
 80074d6:	4619      	mov	r1, r3
 80074d8:	4610      	mov	r0, r2
 80074da:	f7fd fe78 	bl	80051ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 80074de:	697b      	ldr	r3, [r7, #20]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	20001070 	.word	0x20001070
 80074ec:	2000106c 	.word	0x2000106c

080074f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08e      	sub	sp, #56	@ 0x38
 80074f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074f6:	e0ce      	b.n	8007696 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	da19      	bge.n	8007532 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80074fe:	1d3b      	adds	r3, r7, #4
 8007500:	3304      	adds	r3, #4
 8007502:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10b      	bne.n	8007522 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	61fb      	str	r3, [r7, #28]
}
 800751c:	bf00      	nop
 800751e:	bf00      	nop
 8007520:	e7fd      	b.n	800751e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007528:	6850      	ldr	r0, [r2, #4]
 800752a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800752c:	6892      	ldr	r2, [r2, #8]
 800752e:	4611      	mov	r1, r2
 8007530:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	f2c0 80ae 	blt.w	8007696 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800753e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d004      	beq.n	8007550 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007548:	3304      	adds	r3, #4
 800754a:	4618      	mov	r0, r3
 800754c:	f7fd fe78 	bl	8005240 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007550:	463b      	mov	r3, r7
 8007552:	4618      	mov	r0, r3
 8007554:	f7ff ff6a 	bl	800742c <prvSampleTimeNow>
 8007558:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b09      	cmp	r3, #9
 800755e:	f200 8097 	bhi.w	8007690 <prvProcessReceivedCommands+0x1a0>
 8007562:	a201      	add	r2, pc, #4	@ (adr r2, 8007568 <prvProcessReceivedCommands+0x78>)
 8007564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007568:	08007591 	.word	0x08007591
 800756c:	08007591 	.word	0x08007591
 8007570:	08007591 	.word	0x08007591
 8007574:	08007607 	.word	0x08007607
 8007578:	0800761b 	.word	0x0800761b
 800757c:	08007667 	.word	0x08007667
 8007580:	08007591 	.word	0x08007591
 8007584:	08007591 	.word	0x08007591
 8007588:	08007607 	.word	0x08007607
 800758c:	0800761b 	.word	0x0800761b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007592:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007596:	f043 0301 	orr.w	r3, r3, #1
 800759a:	b2da      	uxtb	r2, r3
 800759c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	18d1      	adds	r1, r2, r3
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075b0:	f7ff ff5c 	bl	800746c <prvInsertTimerInActiveList>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d06c      	beq.n	8007694 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075c8:	f003 0304 	and.w	r3, r3, #4
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d061      	beq.n	8007694 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	441a      	add	r2, r3
 80075d8:	2300      	movs	r3, #0
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	2300      	movs	r3, #0
 80075de:	2100      	movs	r1, #0
 80075e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075e2:	f7ff fe01 	bl	80071e8 <xTimerGenericCommand>
 80075e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d152      	bne.n	8007694 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	61bb      	str	r3, [r7, #24]
}
 8007600:	bf00      	nop
 8007602:	bf00      	nop
 8007604:	e7fd      	b.n	8007602 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007608:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800760c:	f023 0301 	bic.w	r3, r3, #1
 8007610:	b2da      	uxtb	r2, r3
 8007612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007614:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007618:	e03d      	b.n	8007696 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800761a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007620:	f043 0301 	orr.w	r3, r3, #1
 8007624:	b2da      	uxtb	r2, r3
 8007626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007628:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007630:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10b      	bne.n	8007652 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	617b      	str	r3, [r7, #20]
}
 800764c:	bf00      	nop
 800764e:	bf00      	nop
 8007650:	e7fd      	b.n	800764e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007654:	699a      	ldr	r2, [r3, #24]
 8007656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007658:	18d1      	adds	r1, r2, r3
 800765a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800765e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007660:	f7ff ff04 	bl	800746c <prvInsertTimerInActiveList>
					break;
 8007664:	e017      	b.n	8007696 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007668:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800766c:	f003 0302 	and.w	r3, r3, #2
 8007670:	2b00      	cmp	r3, #0
 8007672:	d103      	bne.n	800767c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007674:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007676:	f000 fbe7 	bl	8007e48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800767a:	e00c      	b.n	8007696 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800767c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800767e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007682:	f023 0301 	bic.w	r3, r3, #1
 8007686:	b2da      	uxtb	r2, r3
 8007688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800768a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800768e:	e002      	b.n	8007696 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007690:	bf00      	nop
 8007692:	e000      	b.n	8007696 <prvProcessReceivedCommands+0x1a6>
					break;
 8007694:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007696:	4b08      	ldr	r3, [pc, #32]	@ (80076b8 <prvProcessReceivedCommands+0x1c8>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	1d39      	adds	r1, r7, #4
 800769c:	2200      	movs	r2, #0
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fe f996 	bl	80059d0 <xQueueReceive>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f47f af26 	bne.w	80074f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80076ac:	bf00      	nop
 80076ae:	bf00      	nop
 80076b0:	3730      	adds	r7, #48	@ 0x30
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	20001074 	.word	0x20001074

080076bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b088      	sub	sp, #32
 80076c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076c2:	e049      	b.n	8007758 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076c4:	4b2e      	ldr	r3, [pc, #184]	@ (8007780 <prvSwitchTimerLists+0xc4>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076ce:	4b2c      	ldr	r3, [pc, #176]	@ (8007780 <prvSwitchTimerLists+0xc4>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	3304      	adds	r3, #4
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fd fdaf 	bl	8005240 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076f0:	f003 0304 	and.w	r3, r3, #4
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d02f      	beq.n	8007758 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	4413      	add	r3, r2
 8007700:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	429a      	cmp	r2, r3
 8007708:	d90e      	bls.n	8007728 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007716:	4b1a      	ldr	r3, [pc, #104]	@ (8007780 <prvSwitchTimerLists+0xc4>)
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3304      	adds	r3, #4
 800771e:	4619      	mov	r1, r3
 8007720:	4610      	mov	r0, r2
 8007722:	f7fd fd54 	bl	80051ce <vListInsert>
 8007726:	e017      	b.n	8007758 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007728:	2300      	movs	r3, #0
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	2300      	movs	r3, #0
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	2100      	movs	r1, #0
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f7ff fd58 	bl	80071e8 <xTimerGenericCommand>
 8007738:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10b      	bne.n	8007758 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	603b      	str	r3, [r7, #0]
}
 8007752:	bf00      	nop
 8007754:	bf00      	nop
 8007756:	e7fd      	b.n	8007754 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007758:	4b09      	ldr	r3, [pc, #36]	@ (8007780 <prvSwitchTimerLists+0xc4>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1b0      	bne.n	80076c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007762:	4b07      	ldr	r3, [pc, #28]	@ (8007780 <prvSwitchTimerLists+0xc4>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007768:	4b06      	ldr	r3, [pc, #24]	@ (8007784 <prvSwitchTimerLists+0xc8>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a04      	ldr	r2, [pc, #16]	@ (8007780 <prvSwitchTimerLists+0xc4>)
 800776e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007770:	4a04      	ldr	r2, [pc, #16]	@ (8007784 <prvSwitchTimerLists+0xc8>)
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	6013      	str	r3, [r2, #0]
}
 8007776:	bf00      	nop
 8007778:	3718      	adds	r7, #24
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	2000106c 	.word	0x2000106c
 8007784:	20001070 	.word	0x20001070

08007788 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800778e:	f000 f96b 	bl	8007a68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007792:	4b15      	ldr	r3, [pc, #84]	@ (80077e8 <prvCheckForValidListAndQueue+0x60>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d120      	bne.n	80077dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800779a:	4814      	ldr	r0, [pc, #80]	@ (80077ec <prvCheckForValidListAndQueue+0x64>)
 800779c:	f7fd fcc6 	bl	800512c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80077a0:	4813      	ldr	r0, [pc, #76]	@ (80077f0 <prvCheckForValidListAndQueue+0x68>)
 80077a2:	f7fd fcc3 	bl	800512c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80077a6:	4b13      	ldr	r3, [pc, #76]	@ (80077f4 <prvCheckForValidListAndQueue+0x6c>)
 80077a8:	4a10      	ldr	r2, [pc, #64]	@ (80077ec <prvCheckForValidListAndQueue+0x64>)
 80077aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80077ac:	4b12      	ldr	r3, [pc, #72]	@ (80077f8 <prvCheckForValidListAndQueue+0x70>)
 80077ae:	4a10      	ldr	r2, [pc, #64]	@ (80077f0 <prvCheckForValidListAndQueue+0x68>)
 80077b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80077b2:	2300      	movs	r3, #0
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	4b11      	ldr	r3, [pc, #68]	@ (80077fc <prvCheckForValidListAndQueue+0x74>)
 80077b8:	4a11      	ldr	r2, [pc, #68]	@ (8007800 <prvCheckForValidListAndQueue+0x78>)
 80077ba:	2110      	movs	r1, #16
 80077bc:	200a      	movs	r0, #10
 80077be:	f7fd fdd3 	bl	8005368 <xQueueGenericCreateStatic>
 80077c2:	4603      	mov	r3, r0
 80077c4:	4a08      	ldr	r2, [pc, #32]	@ (80077e8 <prvCheckForValidListAndQueue+0x60>)
 80077c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80077c8:	4b07      	ldr	r3, [pc, #28]	@ (80077e8 <prvCheckForValidListAndQueue+0x60>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d005      	beq.n	80077dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80077d0:	4b05      	ldr	r3, [pc, #20]	@ (80077e8 <prvCheckForValidListAndQueue+0x60>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	490b      	ldr	r1, [pc, #44]	@ (8007804 <prvCheckForValidListAndQueue+0x7c>)
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fe fc14 	bl	8006004 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077dc:	f000 f976 	bl	8007acc <vPortExitCritical>
}
 80077e0:	bf00      	nop
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	20001074 	.word	0x20001074
 80077ec:	20001044 	.word	0x20001044
 80077f0:	20001058 	.word	0x20001058
 80077f4:	2000106c 	.word	0x2000106c
 80077f8:	20001070 	.word	0x20001070
 80077fc:	20001120 	.word	0x20001120
 8007800:	20001080 	.word	0x20001080
 8007804:	0800c424 	.word	0x0800c424

08007808 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	3b04      	subs	r3, #4
 8007818:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007820:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	3b04      	subs	r3, #4
 8007826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	f023 0201 	bic.w	r2, r3, #1
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	3b04      	subs	r3, #4
 8007836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007838:	4a0c      	ldr	r2, [pc, #48]	@ (800786c <pxPortInitialiseStack+0x64>)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	3b14      	subs	r3, #20
 8007842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3b04      	subs	r3, #4
 800784e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f06f 0202 	mvn.w	r2, #2
 8007856:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	3b20      	subs	r3, #32
 800785c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800785e:	68fb      	ldr	r3, [r7, #12]
}
 8007860:	4618      	mov	r0, r3
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	08007871 	.word	0x08007871

08007870 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007876:	2300      	movs	r3, #0
 8007878:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800787a:	4b13      	ldr	r3, [pc, #76]	@ (80078c8 <prvTaskExitError+0x58>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007882:	d00b      	beq.n	800789c <prvTaskExitError+0x2c>
	__asm volatile
 8007884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007888:	f383 8811 	msr	BASEPRI, r3
 800788c:	f3bf 8f6f 	isb	sy
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	60fb      	str	r3, [r7, #12]
}
 8007896:	bf00      	nop
 8007898:	bf00      	nop
 800789a:	e7fd      	b.n	8007898 <prvTaskExitError+0x28>
	__asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	60bb      	str	r3, [r7, #8]
}
 80078ae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078b0:	bf00      	nop
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d0fc      	beq.n	80078b2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078b8:	bf00      	nop
 80078ba:	bf00      	nop
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	2000000c 	.word	0x2000000c
 80078cc:	00000000 	.word	0x00000000

080078d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078d0:	4b07      	ldr	r3, [pc, #28]	@ (80078f0 <pxCurrentTCBConst2>)
 80078d2:	6819      	ldr	r1, [r3, #0]
 80078d4:	6808      	ldr	r0, [r1, #0]
 80078d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078da:	f380 8809 	msr	PSP, r0
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f04f 0000 	mov.w	r0, #0
 80078e6:	f380 8811 	msr	BASEPRI, r0
 80078ea:	4770      	bx	lr
 80078ec:	f3af 8000 	nop.w

080078f0 <pxCurrentTCBConst2>:
 80078f0:	20000b44 	.word	0x20000b44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80078f4:	bf00      	nop
 80078f6:	bf00      	nop

080078f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80078f8:	4808      	ldr	r0, [pc, #32]	@ (800791c <prvPortStartFirstTask+0x24>)
 80078fa:	6800      	ldr	r0, [r0, #0]
 80078fc:	6800      	ldr	r0, [r0, #0]
 80078fe:	f380 8808 	msr	MSP, r0
 8007902:	f04f 0000 	mov.w	r0, #0
 8007906:	f380 8814 	msr	CONTROL, r0
 800790a:	b662      	cpsie	i
 800790c:	b661      	cpsie	f
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	df00      	svc	0
 8007918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800791a:	bf00      	nop
 800791c:	e000ed08 	.word	0xe000ed08

08007920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007926:	4b47      	ldr	r3, [pc, #284]	@ (8007a44 <xPortStartScheduler+0x124>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a47      	ldr	r2, [pc, #284]	@ (8007a48 <xPortStartScheduler+0x128>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d10b      	bne.n	8007948 <xPortStartScheduler+0x28>
	__asm volatile
 8007930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	613b      	str	r3, [r7, #16]
}
 8007942:	bf00      	nop
 8007944:	bf00      	nop
 8007946:	e7fd      	b.n	8007944 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007948:	4b3e      	ldr	r3, [pc, #248]	@ (8007a44 <xPortStartScheduler+0x124>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a3f      	ldr	r2, [pc, #252]	@ (8007a4c <xPortStartScheduler+0x12c>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d10b      	bne.n	800796a <xPortStartScheduler+0x4a>
	__asm volatile
 8007952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	60fb      	str	r3, [r7, #12]
}
 8007964:	bf00      	nop
 8007966:	bf00      	nop
 8007968:	e7fd      	b.n	8007966 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800796a:	4b39      	ldr	r3, [pc, #228]	@ (8007a50 <xPortStartScheduler+0x130>)
 800796c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	b2db      	uxtb	r3, r3
 8007974:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	22ff      	movs	r2, #255	@ 0xff
 800797a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	b2db      	uxtb	r3, r3
 8007982:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007984:	78fb      	ldrb	r3, [r7, #3]
 8007986:	b2db      	uxtb	r3, r3
 8007988:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800798c:	b2da      	uxtb	r2, r3
 800798e:	4b31      	ldr	r3, [pc, #196]	@ (8007a54 <xPortStartScheduler+0x134>)
 8007990:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007992:	4b31      	ldr	r3, [pc, #196]	@ (8007a58 <xPortStartScheduler+0x138>)
 8007994:	2207      	movs	r2, #7
 8007996:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007998:	e009      	b.n	80079ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800799a:	4b2f      	ldr	r3, [pc, #188]	@ (8007a58 <xPortStartScheduler+0x138>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	3b01      	subs	r3, #1
 80079a0:	4a2d      	ldr	r2, [pc, #180]	@ (8007a58 <xPortStartScheduler+0x138>)
 80079a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079a4:	78fb      	ldrb	r3, [r7, #3]
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	005b      	lsls	r3, r3, #1
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079ae:	78fb      	ldrb	r3, [r7, #3]
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079b6:	2b80      	cmp	r3, #128	@ 0x80
 80079b8:	d0ef      	beq.n	800799a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079ba:	4b27      	ldr	r3, [pc, #156]	@ (8007a58 <xPortStartScheduler+0x138>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f1c3 0307 	rsb	r3, r3, #7
 80079c2:	2b04      	cmp	r3, #4
 80079c4:	d00b      	beq.n	80079de <xPortStartScheduler+0xbe>
	__asm volatile
 80079c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ca:	f383 8811 	msr	BASEPRI, r3
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	f3bf 8f4f 	dsb	sy
 80079d6:	60bb      	str	r3, [r7, #8]
}
 80079d8:	bf00      	nop
 80079da:	bf00      	nop
 80079dc:	e7fd      	b.n	80079da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079de:	4b1e      	ldr	r3, [pc, #120]	@ (8007a58 <xPortStartScheduler+0x138>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	021b      	lsls	r3, r3, #8
 80079e4:	4a1c      	ldr	r2, [pc, #112]	@ (8007a58 <xPortStartScheduler+0x138>)
 80079e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007a58 <xPortStartScheduler+0x138>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80079f0:	4a19      	ldr	r2, [pc, #100]	@ (8007a58 <xPortStartScheduler+0x138>)
 80079f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	b2da      	uxtb	r2, r3
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079fc:	4b17      	ldr	r3, [pc, #92]	@ (8007a5c <xPortStartScheduler+0x13c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a16      	ldr	r2, [pc, #88]	@ (8007a5c <xPortStartScheduler+0x13c>)
 8007a02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007a06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a08:	4b14      	ldr	r3, [pc, #80]	@ (8007a5c <xPortStartScheduler+0x13c>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a13      	ldr	r2, [pc, #76]	@ (8007a5c <xPortStartScheduler+0x13c>)
 8007a0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007a12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a14:	f000 f8da 	bl	8007bcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a18:	4b11      	ldr	r3, [pc, #68]	@ (8007a60 <xPortStartScheduler+0x140>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a1e:	f000 f8f9 	bl	8007c14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a22:	4b10      	ldr	r3, [pc, #64]	@ (8007a64 <xPortStartScheduler+0x144>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a0f      	ldr	r2, [pc, #60]	@ (8007a64 <xPortStartScheduler+0x144>)
 8007a28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007a2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a2e:	f7ff ff63 	bl	80078f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a32:	f7fe ff1f 	bl	8006874 <vTaskSwitchContext>
	prvTaskExitError();
 8007a36:	f7ff ff1b 	bl	8007870 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3718      	adds	r7, #24
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	e000ed00 	.word	0xe000ed00
 8007a48:	410fc271 	.word	0x410fc271
 8007a4c:	410fc270 	.word	0x410fc270
 8007a50:	e000e400 	.word	0xe000e400
 8007a54:	20001170 	.word	0x20001170
 8007a58:	20001174 	.word	0x20001174
 8007a5c:	e000ed20 	.word	0xe000ed20
 8007a60:	2000000c 	.word	0x2000000c
 8007a64:	e000ef34 	.word	0xe000ef34

08007a68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	607b      	str	r3, [r7, #4]
}
 8007a80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a82:	4b10      	ldr	r3, [pc, #64]	@ (8007ac4 <vPortEnterCritical+0x5c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	3301      	adds	r3, #1
 8007a88:	4a0e      	ldr	r2, [pc, #56]	@ (8007ac4 <vPortEnterCritical+0x5c>)
 8007a8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8007ac4 <vPortEnterCritical+0x5c>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d110      	bne.n	8007ab6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a94:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac8 <vPortEnterCritical+0x60>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00b      	beq.n	8007ab6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	603b      	str	r3, [r7, #0]
}
 8007ab0:	bf00      	nop
 8007ab2:	bf00      	nop
 8007ab4:	e7fd      	b.n	8007ab2 <vPortEnterCritical+0x4a>
	}
}
 8007ab6:	bf00      	nop
 8007ab8:	370c      	adds	r7, #12
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	2000000c 	.word	0x2000000c
 8007ac8:	e000ed04 	.word	0xe000ed04

08007acc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007ad2:	4b12      	ldr	r3, [pc, #72]	@ (8007b1c <vPortExitCritical+0x50>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10b      	bne.n	8007af2 <vPortExitCritical+0x26>
	__asm volatile
 8007ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ade:	f383 8811 	msr	BASEPRI, r3
 8007ae2:	f3bf 8f6f 	isb	sy
 8007ae6:	f3bf 8f4f 	dsb	sy
 8007aea:	607b      	str	r3, [r7, #4]
}
 8007aec:	bf00      	nop
 8007aee:	bf00      	nop
 8007af0:	e7fd      	b.n	8007aee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007af2:	4b0a      	ldr	r3, [pc, #40]	@ (8007b1c <vPortExitCritical+0x50>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3b01      	subs	r3, #1
 8007af8:	4a08      	ldr	r2, [pc, #32]	@ (8007b1c <vPortExitCritical+0x50>)
 8007afa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007afc:	4b07      	ldr	r3, [pc, #28]	@ (8007b1c <vPortExitCritical+0x50>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d105      	bne.n	8007b10 <vPortExitCritical+0x44>
 8007b04:	2300      	movs	r3, #0
 8007b06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	f383 8811 	msr	BASEPRI, r3
}
 8007b0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr
 8007b1c:	2000000c 	.word	0x2000000c

08007b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b20:	f3ef 8009 	mrs	r0, PSP
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	4b15      	ldr	r3, [pc, #84]	@ (8007b80 <pxCurrentTCBConst>)
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	f01e 0f10 	tst.w	lr, #16
 8007b30:	bf08      	it	eq
 8007b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3a:	6010      	str	r0, [r2, #0]
 8007b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007b44:	f380 8811 	msr	BASEPRI, r0
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f7fe fe90 	bl	8006874 <vTaskSwitchContext>
 8007b54:	f04f 0000 	mov.w	r0, #0
 8007b58:	f380 8811 	msr	BASEPRI, r0
 8007b5c:	bc09      	pop	{r0, r3}
 8007b5e:	6819      	ldr	r1, [r3, #0]
 8007b60:	6808      	ldr	r0, [r1, #0]
 8007b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b66:	f01e 0f10 	tst.w	lr, #16
 8007b6a:	bf08      	it	eq
 8007b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b70:	f380 8809 	msr	PSP, r0
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	f3af 8000 	nop.w

08007b80 <pxCurrentTCBConst>:
 8007b80:	20000b44 	.word	0x20000b44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop

08007b88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	607b      	str	r3, [r7, #4]
}
 8007ba0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ba2:	f7fe fdad 	bl	8006700 <xTaskIncrementTick>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d003      	beq.n	8007bb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bac:	4b06      	ldr	r3, [pc, #24]	@ (8007bc8 <xPortSysTickHandler+0x40>)
 8007bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	f383 8811 	msr	BASEPRI, r3
}
 8007bbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007bc0:	bf00      	nop
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	e000ed04 	.word	0xe000ed04

08007bcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007bcc:	b480      	push	{r7}
 8007bce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8007c00 <vPortSetupTimerInterrupt+0x34>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8007c04 <vPortSetupTimerInterrupt+0x38>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8007c08 <vPortSetupTimerInterrupt+0x3c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a0a      	ldr	r2, [pc, #40]	@ (8007c0c <vPortSetupTimerInterrupt+0x40>)
 8007be2:	fba2 2303 	umull	r2, r3, r2, r3
 8007be6:	099b      	lsrs	r3, r3, #6
 8007be8:	4a09      	ldr	r2, [pc, #36]	@ (8007c10 <vPortSetupTimerInterrupt+0x44>)
 8007bea:	3b01      	subs	r3, #1
 8007bec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007bee:	4b04      	ldr	r3, [pc, #16]	@ (8007c00 <vPortSetupTimerInterrupt+0x34>)
 8007bf0:	2207      	movs	r2, #7
 8007bf2:	601a      	str	r2, [r3, #0]
}
 8007bf4:	bf00      	nop
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	e000e010 	.word	0xe000e010
 8007c04:	e000e018 	.word	0xe000e018
 8007c08:	20000000 	.word	0x20000000
 8007c0c:	10624dd3 	.word	0x10624dd3
 8007c10:	e000e014 	.word	0xe000e014

08007c14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007c24 <vPortEnableVFP+0x10>
 8007c18:	6801      	ldr	r1, [r0, #0]
 8007c1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007c1e:	6001      	str	r1, [r0, #0]
 8007c20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c22:	bf00      	nop
 8007c24:	e000ed88 	.word	0xe000ed88

08007c28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c2e:	f3ef 8305 	mrs	r3, IPSR
 8007c32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2b0f      	cmp	r3, #15
 8007c38:	d915      	bls.n	8007c66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c3a:	4a18      	ldr	r2, [pc, #96]	@ (8007c9c <vPortValidateInterruptPriority+0x74>)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4413      	add	r3, r2
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c44:	4b16      	ldr	r3, [pc, #88]	@ (8007ca0 <vPortValidateInterruptPriority+0x78>)
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	7afa      	ldrb	r2, [r7, #11]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d20b      	bcs.n	8007c66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	607b      	str	r3, [r7, #4]
}
 8007c60:	bf00      	nop
 8007c62:	bf00      	nop
 8007c64:	e7fd      	b.n	8007c62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c66:	4b0f      	ldr	r3, [pc, #60]	@ (8007ca4 <vPortValidateInterruptPriority+0x7c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ca8 <vPortValidateInterruptPriority+0x80>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d90b      	bls.n	8007c8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c7a:	f383 8811 	msr	BASEPRI, r3
 8007c7e:	f3bf 8f6f 	isb	sy
 8007c82:	f3bf 8f4f 	dsb	sy
 8007c86:	603b      	str	r3, [r7, #0]
}
 8007c88:	bf00      	nop
 8007c8a:	bf00      	nop
 8007c8c:	e7fd      	b.n	8007c8a <vPortValidateInterruptPriority+0x62>
	}
 8007c8e:	bf00      	nop
 8007c90:	3714      	adds	r7, #20
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	e000e3f0 	.word	0xe000e3f0
 8007ca0:	20001170 	.word	0x20001170
 8007ca4:	e000ed0c 	.word	0xe000ed0c
 8007ca8:	20001174 	.word	0x20001174

08007cac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b08a      	sub	sp, #40	@ 0x28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cb8:	f7fe fc66 	bl	8006588 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cbc:	4b5c      	ldr	r3, [pc, #368]	@ (8007e30 <pvPortMalloc+0x184>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d101      	bne.n	8007cc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007cc4:	f000 f924 	bl	8007f10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007cc8:	4b5a      	ldr	r3, [pc, #360]	@ (8007e34 <pvPortMalloc+0x188>)
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4013      	ands	r3, r2
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f040 8095 	bne.w	8007e00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d01e      	beq.n	8007d1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007cdc:	2208      	movs	r2, #8
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f003 0307 	and.w	r3, r3, #7
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d015      	beq.n	8007d1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f023 0307 	bic.w	r3, r3, #7
 8007cf4:	3308      	adds	r3, #8
 8007cf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f003 0307 	and.w	r3, r3, #7
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00b      	beq.n	8007d1a <pvPortMalloc+0x6e>
	__asm volatile
 8007d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	617b      	str	r3, [r7, #20]
}
 8007d14:	bf00      	nop
 8007d16:	bf00      	nop
 8007d18:	e7fd      	b.n	8007d16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d06f      	beq.n	8007e00 <pvPortMalloc+0x154>
 8007d20:	4b45      	ldr	r3, [pc, #276]	@ (8007e38 <pvPortMalloc+0x18c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d86a      	bhi.n	8007e00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d2a:	4b44      	ldr	r3, [pc, #272]	@ (8007e3c <pvPortMalloc+0x190>)
 8007d2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d2e:	4b43      	ldr	r3, [pc, #268]	@ (8007e3c <pvPortMalloc+0x190>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d34:	e004      	b.n	8007d40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d903      	bls.n	8007d52 <pvPortMalloc+0xa6>
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1f1      	bne.n	8007d36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d52:	4b37      	ldr	r3, [pc, #220]	@ (8007e30 <pvPortMalloc+0x184>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d051      	beq.n	8007e00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d5c:	6a3b      	ldr	r3, [r7, #32]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2208      	movs	r2, #8
 8007d62:	4413      	add	r3, r2
 8007d64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	6a3b      	ldr	r3, [r7, #32]
 8007d6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	1ad2      	subs	r2, r2, r3
 8007d76:	2308      	movs	r3, #8
 8007d78:	005b      	lsls	r3, r3, #1
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d920      	bls.n	8007dc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4413      	add	r3, r2
 8007d84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	f003 0307 	and.w	r3, r3, #7
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00b      	beq.n	8007da8 <pvPortMalloc+0xfc>
	__asm volatile
 8007d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	613b      	str	r3, [r7, #16]
}
 8007da2:	bf00      	nop
 8007da4:	bf00      	nop
 8007da6:	e7fd      	b.n	8007da4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	1ad2      	subs	r2, r2, r3
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007dba:	69b8      	ldr	r0, [r7, #24]
 8007dbc:	f000 f90a 	bl	8007fd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8007e38 <pvPortMalloc+0x18c>)
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	4a1b      	ldr	r2, [pc, #108]	@ (8007e38 <pvPortMalloc+0x18c>)
 8007dcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007dce:	4b1a      	ldr	r3, [pc, #104]	@ (8007e38 <pvPortMalloc+0x18c>)
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8007e40 <pvPortMalloc+0x194>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d203      	bcs.n	8007de2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007dda:	4b17      	ldr	r3, [pc, #92]	@ (8007e38 <pvPortMalloc+0x18c>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a18      	ldr	r2, [pc, #96]	@ (8007e40 <pvPortMalloc+0x194>)
 8007de0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	4b13      	ldr	r3, [pc, #76]	@ (8007e34 <pvPortMalloc+0x188>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	431a      	orrs	r2, r3
 8007dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007df6:	4b13      	ldr	r3, [pc, #76]	@ (8007e44 <pvPortMalloc+0x198>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	4a11      	ldr	r2, [pc, #68]	@ (8007e44 <pvPortMalloc+0x198>)
 8007dfe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e00:	f7fe fbd0 	bl	80065a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	f003 0307 	and.w	r3, r3, #7
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00b      	beq.n	8007e26 <pvPortMalloc+0x17a>
	__asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	60fb      	str	r3, [r7, #12]
}
 8007e20:	bf00      	nop
 8007e22:	bf00      	nop
 8007e24:	e7fd      	b.n	8007e22 <pvPortMalloc+0x176>
	return pvReturn;
 8007e26:	69fb      	ldr	r3, [r7, #28]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3728      	adds	r7, #40	@ 0x28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	20004d80 	.word	0x20004d80
 8007e34:	20004d94 	.word	0x20004d94
 8007e38:	20004d84 	.word	0x20004d84
 8007e3c:	20004d78 	.word	0x20004d78
 8007e40:	20004d88 	.word	0x20004d88
 8007e44:	20004d8c 	.word	0x20004d8c

08007e48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b086      	sub	sp, #24
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d04f      	beq.n	8007efa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e5a:	2308      	movs	r3, #8
 8007e5c:	425b      	negs	r3, r3
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	4413      	add	r3, r2
 8007e62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	4b25      	ldr	r3, [pc, #148]	@ (8007f04 <vPortFree+0xbc>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4013      	ands	r3, r2
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10b      	bne.n	8007e8e <vPortFree+0x46>
	__asm volatile
 8007e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e7a:	f383 8811 	msr	BASEPRI, r3
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	f3bf 8f4f 	dsb	sy
 8007e86:	60fb      	str	r3, [r7, #12]
}
 8007e88:	bf00      	nop
 8007e8a:	bf00      	nop
 8007e8c:	e7fd      	b.n	8007e8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00b      	beq.n	8007eae <vPortFree+0x66>
	__asm volatile
 8007e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e9a:	f383 8811 	msr	BASEPRI, r3
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	f3bf 8f4f 	dsb	sy
 8007ea6:	60bb      	str	r3, [r7, #8]
}
 8007ea8:	bf00      	nop
 8007eaa:	bf00      	nop
 8007eac:	e7fd      	b.n	8007eaa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	4b14      	ldr	r3, [pc, #80]	@ (8007f04 <vPortFree+0xbc>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d01e      	beq.n	8007efa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d11a      	bne.n	8007efa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8007f04 <vPortFree+0xbc>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	43db      	mvns	r3, r3
 8007ece:	401a      	ands	r2, r3
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ed4:	f7fe fb58 	bl	8006588 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	4b0a      	ldr	r3, [pc, #40]	@ (8007f08 <vPortFree+0xc0>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	4a09      	ldr	r2, [pc, #36]	@ (8007f08 <vPortFree+0xc0>)
 8007ee4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ee6:	6938      	ldr	r0, [r7, #16]
 8007ee8:	f000 f874 	bl	8007fd4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007eec:	4b07      	ldr	r3, [pc, #28]	@ (8007f0c <vPortFree+0xc4>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	4a06      	ldr	r2, [pc, #24]	@ (8007f0c <vPortFree+0xc4>)
 8007ef4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007ef6:	f7fe fb55 	bl	80065a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007efa:	bf00      	nop
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	20004d94 	.word	0x20004d94
 8007f08:	20004d84 	.word	0x20004d84
 8007f0c:	20004d90 	.word	0x20004d90

08007f10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f16:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007f1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f1c:	4b27      	ldr	r3, [pc, #156]	@ (8007fbc <prvHeapInit+0xac>)
 8007f1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f003 0307 	and.w	r3, r3, #7
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00c      	beq.n	8007f44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	3307      	adds	r3, #7
 8007f2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f023 0307 	bic.w	r3, r3, #7
 8007f36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	4a1f      	ldr	r2, [pc, #124]	@ (8007fbc <prvHeapInit+0xac>)
 8007f40:	4413      	add	r3, r2
 8007f42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f48:	4a1d      	ldr	r2, [pc, #116]	@ (8007fc0 <prvHeapInit+0xb0>)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8007fc0 <prvHeapInit+0xb0>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	4413      	add	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f5c:	2208      	movs	r2, #8
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	1a9b      	subs	r3, r3, r2
 8007f62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f023 0307 	bic.w	r3, r3, #7
 8007f6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4a15      	ldr	r2, [pc, #84]	@ (8007fc4 <prvHeapInit+0xb4>)
 8007f70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f72:	4b14      	ldr	r3, [pc, #80]	@ (8007fc4 <prvHeapInit+0xb4>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2200      	movs	r2, #0
 8007f78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f7a:	4b12      	ldr	r3, [pc, #72]	@ (8007fc4 <prvHeapInit+0xb4>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	1ad2      	subs	r2, r2, r3
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f90:	4b0c      	ldr	r3, [pc, #48]	@ (8007fc4 <prvHeapInit+0xb4>)
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8007fc8 <prvHeapInit+0xb8>)
 8007f9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	4a09      	ldr	r2, [pc, #36]	@ (8007fcc <prvHeapInit+0xbc>)
 8007fa6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fa8:	4b09      	ldr	r3, [pc, #36]	@ (8007fd0 <prvHeapInit+0xc0>)
 8007faa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007fae:	601a      	str	r2, [r3, #0]
}
 8007fb0:	bf00      	nop
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	20001178 	.word	0x20001178
 8007fc0:	20004d78 	.word	0x20004d78
 8007fc4:	20004d80 	.word	0x20004d80
 8007fc8:	20004d88 	.word	0x20004d88
 8007fcc:	20004d84 	.word	0x20004d84
 8007fd0:	20004d94 	.word	0x20004d94

08007fd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007fdc:	4b28      	ldr	r3, [pc, #160]	@ (8008080 <prvInsertBlockIntoFreeList+0xac>)
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	e002      	b.n	8007fe8 <prvInsertBlockIntoFreeList+0x14>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	60fb      	str	r3, [r7, #12]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d8f7      	bhi.n	8007fe2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	429a      	cmp	r2, r3
 8008002:	d108      	bne.n	8008016 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	685a      	ldr	r2, [r3, #4]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	441a      	add	r2, r3
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	441a      	add	r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	429a      	cmp	r2, r3
 8008028:	d118      	bne.n	800805c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	4b15      	ldr	r3, [pc, #84]	@ (8008084 <prvInsertBlockIntoFreeList+0xb0>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	429a      	cmp	r2, r3
 8008034:	d00d      	beq.n	8008052 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	441a      	add	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	601a      	str	r2, [r3, #0]
 8008050:	e008      	b.n	8008064 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008052:	4b0c      	ldr	r3, [pc, #48]	@ (8008084 <prvInsertBlockIntoFreeList+0xb0>)
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	601a      	str	r2, [r3, #0]
 800805a:	e003      	b.n	8008064 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	429a      	cmp	r2, r3
 800806a:	d002      	beq.n	8008072 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008072:	bf00      	nop
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	20004d78 	.word	0x20004d78
 8008084:	20004d80 	.word	0x20004d80

08008088 <__cvt>:
 8008088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800808c:	ec57 6b10 	vmov	r6, r7, d0
 8008090:	2f00      	cmp	r7, #0
 8008092:	460c      	mov	r4, r1
 8008094:	4619      	mov	r1, r3
 8008096:	463b      	mov	r3, r7
 8008098:	bfbb      	ittet	lt
 800809a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800809e:	461f      	movlt	r7, r3
 80080a0:	2300      	movge	r3, #0
 80080a2:	232d      	movlt	r3, #45	@ 0x2d
 80080a4:	700b      	strb	r3, [r1, #0]
 80080a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80080a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80080ac:	4691      	mov	r9, r2
 80080ae:	f023 0820 	bic.w	r8, r3, #32
 80080b2:	bfbc      	itt	lt
 80080b4:	4632      	movlt	r2, r6
 80080b6:	4616      	movlt	r6, r2
 80080b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80080bc:	d005      	beq.n	80080ca <__cvt+0x42>
 80080be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80080c2:	d100      	bne.n	80080c6 <__cvt+0x3e>
 80080c4:	3401      	adds	r4, #1
 80080c6:	2102      	movs	r1, #2
 80080c8:	e000      	b.n	80080cc <__cvt+0x44>
 80080ca:	2103      	movs	r1, #3
 80080cc:	ab03      	add	r3, sp, #12
 80080ce:	9301      	str	r3, [sp, #4]
 80080d0:	ab02      	add	r3, sp, #8
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	ec47 6b10 	vmov	d0, r6, r7
 80080d8:	4653      	mov	r3, sl
 80080da:	4622      	mov	r2, r4
 80080dc:	f000 fed0 	bl	8008e80 <_dtoa_r>
 80080e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80080e4:	4605      	mov	r5, r0
 80080e6:	d119      	bne.n	800811c <__cvt+0x94>
 80080e8:	f019 0f01 	tst.w	r9, #1
 80080ec:	d00e      	beq.n	800810c <__cvt+0x84>
 80080ee:	eb00 0904 	add.w	r9, r0, r4
 80080f2:	2200      	movs	r2, #0
 80080f4:	2300      	movs	r3, #0
 80080f6:	4630      	mov	r0, r6
 80080f8:	4639      	mov	r1, r7
 80080fa:	f7f8 fced 	bl	8000ad8 <__aeabi_dcmpeq>
 80080fe:	b108      	cbz	r0, 8008104 <__cvt+0x7c>
 8008100:	f8cd 900c 	str.w	r9, [sp, #12]
 8008104:	2230      	movs	r2, #48	@ 0x30
 8008106:	9b03      	ldr	r3, [sp, #12]
 8008108:	454b      	cmp	r3, r9
 800810a:	d31e      	bcc.n	800814a <__cvt+0xc2>
 800810c:	9b03      	ldr	r3, [sp, #12]
 800810e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008110:	1b5b      	subs	r3, r3, r5
 8008112:	4628      	mov	r0, r5
 8008114:	6013      	str	r3, [r2, #0]
 8008116:	b004      	add	sp, #16
 8008118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800811c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008120:	eb00 0904 	add.w	r9, r0, r4
 8008124:	d1e5      	bne.n	80080f2 <__cvt+0x6a>
 8008126:	7803      	ldrb	r3, [r0, #0]
 8008128:	2b30      	cmp	r3, #48	@ 0x30
 800812a:	d10a      	bne.n	8008142 <__cvt+0xba>
 800812c:	2200      	movs	r2, #0
 800812e:	2300      	movs	r3, #0
 8008130:	4630      	mov	r0, r6
 8008132:	4639      	mov	r1, r7
 8008134:	f7f8 fcd0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008138:	b918      	cbnz	r0, 8008142 <__cvt+0xba>
 800813a:	f1c4 0401 	rsb	r4, r4, #1
 800813e:	f8ca 4000 	str.w	r4, [sl]
 8008142:	f8da 3000 	ldr.w	r3, [sl]
 8008146:	4499      	add	r9, r3
 8008148:	e7d3      	b.n	80080f2 <__cvt+0x6a>
 800814a:	1c59      	adds	r1, r3, #1
 800814c:	9103      	str	r1, [sp, #12]
 800814e:	701a      	strb	r2, [r3, #0]
 8008150:	e7d9      	b.n	8008106 <__cvt+0x7e>

08008152 <__exponent>:
 8008152:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008154:	2900      	cmp	r1, #0
 8008156:	bfba      	itte	lt
 8008158:	4249      	neglt	r1, r1
 800815a:	232d      	movlt	r3, #45	@ 0x2d
 800815c:	232b      	movge	r3, #43	@ 0x2b
 800815e:	2909      	cmp	r1, #9
 8008160:	7002      	strb	r2, [r0, #0]
 8008162:	7043      	strb	r3, [r0, #1]
 8008164:	dd29      	ble.n	80081ba <__exponent+0x68>
 8008166:	f10d 0307 	add.w	r3, sp, #7
 800816a:	461d      	mov	r5, r3
 800816c:	270a      	movs	r7, #10
 800816e:	461a      	mov	r2, r3
 8008170:	fbb1 f6f7 	udiv	r6, r1, r7
 8008174:	fb07 1416 	mls	r4, r7, r6, r1
 8008178:	3430      	adds	r4, #48	@ 0x30
 800817a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800817e:	460c      	mov	r4, r1
 8008180:	2c63      	cmp	r4, #99	@ 0x63
 8008182:	f103 33ff 	add.w	r3, r3, #4294967295
 8008186:	4631      	mov	r1, r6
 8008188:	dcf1      	bgt.n	800816e <__exponent+0x1c>
 800818a:	3130      	adds	r1, #48	@ 0x30
 800818c:	1e94      	subs	r4, r2, #2
 800818e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008192:	1c41      	adds	r1, r0, #1
 8008194:	4623      	mov	r3, r4
 8008196:	42ab      	cmp	r3, r5
 8008198:	d30a      	bcc.n	80081b0 <__exponent+0x5e>
 800819a:	f10d 0309 	add.w	r3, sp, #9
 800819e:	1a9b      	subs	r3, r3, r2
 80081a0:	42ac      	cmp	r4, r5
 80081a2:	bf88      	it	hi
 80081a4:	2300      	movhi	r3, #0
 80081a6:	3302      	adds	r3, #2
 80081a8:	4403      	add	r3, r0
 80081aa:	1a18      	subs	r0, r3, r0
 80081ac:	b003      	add	sp, #12
 80081ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80081b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80081b8:	e7ed      	b.n	8008196 <__exponent+0x44>
 80081ba:	2330      	movs	r3, #48	@ 0x30
 80081bc:	3130      	adds	r1, #48	@ 0x30
 80081be:	7083      	strb	r3, [r0, #2]
 80081c0:	70c1      	strb	r1, [r0, #3]
 80081c2:	1d03      	adds	r3, r0, #4
 80081c4:	e7f1      	b.n	80081aa <__exponent+0x58>
	...

080081c8 <_printf_float>:
 80081c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081cc:	b08d      	sub	sp, #52	@ 0x34
 80081ce:	460c      	mov	r4, r1
 80081d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80081d4:	4616      	mov	r6, r2
 80081d6:	461f      	mov	r7, r3
 80081d8:	4605      	mov	r5, r0
 80081da:	f000 fced 	bl	8008bb8 <_localeconv_r>
 80081de:	6803      	ldr	r3, [r0, #0]
 80081e0:	9304      	str	r3, [sp, #16]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7f8 f84c 	bl	8000280 <strlen>
 80081e8:	2300      	movs	r3, #0
 80081ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80081ec:	f8d8 3000 	ldr.w	r3, [r8]
 80081f0:	9005      	str	r0, [sp, #20]
 80081f2:	3307      	adds	r3, #7
 80081f4:	f023 0307 	bic.w	r3, r3, #7
 80081f8:	f103 0208 	add.w	r2, r3, #8
 80081fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008200:	f8d4 b000 	ldr.w	fp, [r4]
 8008204:	f8c8 2000 	str.w	r2, [r8]
 8008208:	e9d3 8900 	ldrd	r8, r9, [r3]
 800820c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008210:	9307      	str	r3, [sp, #28]
 8008212:	f8cd 8018 	str.w	r8, [sp, #24]
 8008216:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800821a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800821e:	4b9c      	ldr	r3, [pc, #624]	@ (8008490 <_printf_float+0x2c8>)
 8008220:	f04f 32ff 	mov.w	r2, #4294967295
 8008224:	f7f8 fc8a 	bl	8000b3c <__aeabi_dcmpun>
 8008228:	bb70      	cbnz	r0, 8008288 <_printf_float+0xc0>
 800822a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800822e:	4b98      	ldr	r3, [pc, #608]	@ (8008490 <_printf_float+0x2c8>)
 8008230:	f04f 32ff 	mov.w	r2, #4294967295
 8008234:	f7f8 fc64 	bl	8000b00 <__aeabi_dcmple>
 8008238:	bb30      	cbnz	r0, 8008288 <_printf_float+0xc0>
 800823a:	2200      	movs	r2, #0
 800823c:	2300      	movs	r3, #0
 800823e:	4640      	mov	r0, r8
 8008240:	4649      	mov	r1, r9
 8008242:	f7f8 fc53 	bl	8000aec <__aeabi_dcmplt>
 8008246:	b110      	cbz	r0, 800824e <_printf_float+0x86>
 8008248:	232d      	movs	r3, #45	@ 0x2d
 800824a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800824e:	4a91      	ldr	r2, [pc, #580]	@ (8008494 <_printf_float+0x2cc>)
 8008250:	4b91      	ldr	r3, [pc, #580]	@ (8008498 <_printf_float+0x2d0>)
 8008252:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008256:	bf94      	ite	ls
 8008258:	4690      	movls	r8, r2
 800825a:	4698      	movhi	r8, r3
 800825c:	2303      	movs	r3, #3
 800825e:	6123      	str	r3, [r4, #16]
 8008260:	f02b 0304 	bic.w	r3, fp, #4
 8008264:	6023      	str	r3, [r4, #0]
 8008266:	f04f 0900 	mov.w	r9, #0
 800826a:	9700      	str	r7, [sp, #0]
 800826c:	4633      	mov	r3, r6
 800826e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008270:	4621      	mov	r1, r4
 8008272:	4628      	mov	r0, r5
 8008274:	f000 f9d2 	bl	800861c <_printf_common>
 8008278:	3001      	adds	r0, #1
 800827a:	f040 808d 	bne.w	8008398 <_printf_float+0x1d0>
 800827e:	f04f 30ff 	mov.w	r0, #4294967295
 8008282:	b00d      	add	sp, #52	@ 0x34
 8008284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008288:	4642      	mov	r2, r8
 800828a:	464b      	mov	r3, r9
 800828c:	4640      	mov	r0, r8
 800828e:	4649      	mov	r1, r9
 8008290:	f7f8 fc54 	bl	8000b3c <__aeabi_dcmpun>
 8008294:	b140      	cbz	r0, 80082a8 <_printf_float+0xe0>
 8008296:	464b      	mov	r3, r9
 8008298:	2b00      	cmp	r3, #0
 800829a:	bfbc      	itt	lt
 800829c:	232d      	movlt	r3, #45	@ 0x2d
 800829e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80082a2:	4a7e      	ldr	r2, [pc, #504]	@ (800849c <_printf_float+0x2d4>)
 80082a4:	4b7e      	ldr	r3, [pc, #504]	@ (80084a0 <_printf_float+0x2d8>)
 80082a6:	e7d4      	b.n	8008252 <_printf_float+0x8a>
 80082a8:	6863      	ldr	r3, [r4, #4]
 80082aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80082ae:	9206      	str	r2, [sp, #24]
 80082b0:	1c5a      	adds	r2, r3, #1
 80082b2:	d13b      	bne.n	800832c <_printf_float+0x164>
 80082b4:	2306      	movs	r3, #6
 80082b6:	6063      	str	r3, [r4, #4]
 80082b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80082bc:	2300      	movs	r3, #0
 80082be:	6022      	str	r2, [r4, #0]
 80082c0:	9303      	str	r3, [sp, #12]
 80082c2:	ab0a      	add	r3, sp, #40	@ 0x28
 80082c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80082c8:	ab09      	add	r3, sp, #36	@ 0x24
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	6861      	ldr	r1, [r4, #4]
 80082ce:	ec49 8b10 	vmov	d0, r8, r9
 80082d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80082d6:	4628      	mov	r0, r5
 80082d8:	f7ff fed6 	bl	8008088 <__cvt>
 80082dc:	9b06      	ldr	r3, [sp, #24]
 80082de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80082e0:	2b47      	cmp	r3, #71	@ 0x47
 80082e2:	4680      	mov	r8, r0
 80082e4:	d129      	bne.n	800833a <_printf_float+0x172>
 80082e6:	1cc8      	adds	r0, r1, #3
 80082e8:	db02      	blt.n	80082f0 <_printf_float+0x128>
 80082ea:	6863      	ldr	r3, [r4, #4]
 80082ec:	4299      	cmp	r1, r3
 80082ee:	dd41      	ble.n	8008374 <_printf_float+0x1ac>
 80082f0:	f1aa 0a02 	sub.w	sl, sl, #2
 80082f4:	fa5f fa8a 	uxtb.w	sl, sl
 80082f8:	3901      	subs	r1, #1
 80082fa:	4652      	mov	r2, sl
 80082fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008300:	9109      	str	r1, [sp, #36]	@ 0x24
 8008302:	f7ff ff26 	bl	8008152 <__exponent>
 8008306:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008308:	1813      	adds	r3, r2, r0
 800830a:	2a01      	cmp	r2, #1
 800830c:	4681      	mov	r9, r0
 800830e:	6123      	str	r3, [r4, #16]
 8008310:	dc02      	bgt.n	8008318 <_printf_float+0x150>
 8008312:	6822      	ldr	r2, [r4, #0]
 8008314:	07d2      	lsls	r2, r2, #31
 8008316:	d501      	bpl.n	800831c <_printf_float+0x154>
 8008318:	3301      	adds	r3, #1
 800831a:	6123      	str	r3, [r4, #16]
 800831c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008320:	2b00      	cmp	r3, #0
 8008322:	d0a2      	beq.n	800826a <_printf_float+0xa2>
 8008324:	232d      	movs	r3, #45	@ 0x2d
 8008326:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800832a:	e79e      	b.n	800826a <_printf_float+0xa2>
 800832c:	9a06      	ldr	r2, [sp, #24]
 800832e:	2a47      	cmp	r2, #71	@ 0x47
 8008330:	d1c2      	bne.n	80082b8 <_printf_float+0xf0>
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1c0      	bne.n	80082b8 <_printf_float+0xf0>
 8008336:	2301      	movs	r3, #1
 8008338:	e7bd      	b.n	80082b6 <_printf_float+0xee>
 800833a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800833e:	d9db      	bls.n	80082f8 <_printf_float+0x130>
 8008340:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008344:	d118      	bne.n	8008378 <_printf_float+0x1b0>
 8008346:	2900      	cmp	r1, #0
 8008348:	6863      	ldr	r3, [r4, #4]
 800834a:	dd0b      	ble.n	8008364 <_printf_float+0x19c>
 800834c:	6121      	str	r1, [r4, #16]
 800834e:	b913      	cbnz	r3, 8008356 <_printf_float+0x18e>
 8008350:	6822      	ldr	r2, [r4, #0]
 8008352:	07d0      	lsls	r0, r2, #31
 8008354:	d502      	bpl.n	800835c <_printf_float+0x194>
 8008356:	3301      	adds	r3, #1
 8008358:	440b      	add	r3, r1
 800835a:	6123      	str	r3, [r4, #16]
 800835c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800835e:	f04f 0900 	mov.w	r9, #0
 8008362:	e7db      	b.n	800831c <_printf_float+0x154>
 8008364:	b913      	cbnz	r3, 800836c <_printf_float+0x1a4>
 8008366:	6822      	ldr	r2, [r4, #0]
 8008368:	07d2      	lsls	r2, r2, #31
 800836a:	d501      	bpl.n	8008370 <_printf_float+0x1a8>
 800836c:	3302      	adds	r3, #2
 800836e:	e7f4      	b.n	800835a <_printf_float+0x192>
 8008370:	2301      	movs	r3, #1
 8008372:	e7f2      	b.n	800835a <_printf_float+0x192>
 8008374:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008378:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800837a:	4299      	cmp	r1, r3
 800837c:	db05      	blt.n	800838a <_printf_float+0x1c2>
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	6121      	str	r1, [r4, #16]
 8008382:	07d8      	lsls	r0, r3, #31
 8008384:	d5ea      	bpl.n	800835c <_printf_float+0x194>
 8008386:	1c4b      	adds	r3, r1, #1
 8008388:	e7e7      	b.n	800835a <_printf_float+0x192>
 800838a:	2900      	cmp	r1, #0
 800838c:	bfd4      	ite	le
 800838e:	f1c1 0202 	rsble	r2, r1, #2
 8008392:	2201      	movgt	r2, #1
 8008394:	4413      	add	r3, r2
 8008396:	e7e0      	b.n	800835a <_printf_float+0x192>
 8008398:	6823      	ldr	r3, [r4, #0]
 800839a:	055a      	lsls	r2, r3, #21
 800839c:	d407      	bmi.n	80083ae <_printf_float+0x1e6>
 800839e:	6923      	ldr	r3, [r4, #16]
 80083a0:	4642      	mov	r2, r8
 80083a2:	4631      	mov	r1, r6
 80083a4:	4628      	mov	r0, r5
 80083a6:	47b8      	blx	r7
 80083a8:	3001      	adds	r0, #1
 80083aa:	d12b      	bne.n	8008404 <_printf_float+0x23c>
 80083ac:	e767      	b.n	800827e <_printf_float+0xb6>
 80083ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80083b2:	f240 80dd 	bls.w	8008570 <_printf_float+0x3a8>
 80083b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80083ba:	2200      	movs	r2, #0
 80083bc:	2300      	movs	r3, #0
 80083be:	f7f8 fb8b 	bl	8000ad8 <__aeabi_dcmpeq>
 80083c2:	2800      	cmp	r0, #0
 80083c4:	d033      	beq.n	800842e <_printf_float+0x266>
 80083c6:	4a37      	ldr	r2, [pc, #220]	@ (80084a4 <_printf_float+0x2dc>)
 80083c8:	2301      	movs	r3, #1
 80083ca:	4631      	mov	r1, r6
 80083cc:	4628      	mov	r0, r5
 80083ce:	47b8      	blx	r7
 80083d0:	3001      	adds	r0, #1
 80083d2:	f43f af54 	beq.w	800827e <_printf_float+0xb6>
 80083d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80083da:	4543      	cmp	r3, r8
 80083dc:	db02      	blt.n	80083e4 <_printf_float+0x21c>
 80083de:	6823      	ldr	r3, [r4, #0]
 80083e0:	07d8      	lsls	r0, r3, #31
 80083e2:	d50f      	bpl.n	8008404 <_printf_float+0x23c>
 80083e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083e8:	4631      	mov	r1, r6
 80083ea:	4628      	mov	r0, r5
 80083ec:	47b8      	blx	r7
 80083ee:	3001      	adds	r0, #1
 80083f0:	f43f af45 	beq.w	800827e <_printf_float+0xb6>
 80083f4:	f04f 0900 	mov.w	r9, #0
 80083f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80083fc:	f104 0a1a 	add.w	sl, r4, #26
 8008400:	45c8      	cmp	r8, r9
 8008402:	dc09      	bgt.n	8008418 <_printf_float+0x250>
 8008404:	6823      	ldr	r3, [r4, #0]
 8008406:	079b      	lsls	r3, r3, #30
 8008408:	f100 8103 	bmi.w	8008612 <_printf_float+0x44a>
 800840c:	68e0      	ldr	r0, [r4, #12]
 800840e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008410:	4298      	cmp	r0, r3
 8008412:	bfb8      	it	lt
 8008414:	4618      	movlt	r0, r3
 8008416:	e734      	b.n	8008282 <_printf_float+0xba>
 8008418:	2301      	movs	r3, #1
 800841a:	4652      	mov	r2, sl
 800841c:	4631      	mov	r1, r6
 800841e:	4628      	mov	r0, r5
 8008420:	47b8      	blx	r7
 8008422:	3001      	adds	r0, #1
 8008424:	f43f af2b 	beq.w	800827e <_printf_float+0xb6>
 8008428:	f109 0901 	add.w	r9, r9, #1
 800842c:	e7e8      	b.n	8008400 <_printf_float+0x238>
 800842e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008430:	2b00      	cmp	r3, #0
 8008432:	dc39      	bgt.n	80084a8 <_printf_float+0x2e0>
 8008434:	4a1b      	ldr	r2, [pc, #108]	@ (80084a4 <_printf_float+0x2dc>)
 8008436:	2301      	movs	r3, #1
 8008438:	4631      	mov	r1, r6
 800843a:	4628      	mov	r0, r5
 800843c:	47b8      	blx	r7
 800843e:	3001      	adds	r0, #1
 8008440:	f43f af1d 	beq.w	800827e <_printf_float+0xb6>
 8008444:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008448:	ea59 0303 	orrs.w	r3, r9, r3
 800844c:	d102      	bne.n	8008454 <_printf_float+0x28c>
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	07d9      	lsls	r1, r3, #31
 8008452:	d5d7      	bpl.n	8008404 <_printf_float+0x23c>
 8008454:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008458:	4631      	mov	r1, r6
 800845a:	4628      	mov	r0, r5
 800845c:	47b8      	blx	r7
 800845e:	3001      	adds	r0, #1
 8008460:	f43f af0d 	beq.w	800827e <_printf_float+0xb6>
 8008464:	f04f 0a00 	mov.w	sl, #0
 8008468:	f104 0b1a 	add.w	fp, r4, #26
 800846c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800846e:	425b      	negs	r3, r3
 8008470:	4553      	cmp	r3, sl
 8008472:	dc01      	bgt.n	8008478 <_printf_float+0x2b0>
 8008474:	464b      	mov	r3, r9
 8008476:	e793      	b.n	80083a0 <_printf_float+0x1d8>
 8008478:	2301      	movs	r3, #1
 800847a:	465a      	mov	r2, fp
 800847c:	4631      	mov	r1, r6
 800847e:	4628      	mov	r0, r5
 8008480:	47b8      	blx	r7
 8008482:	3001      	adds	r0, #1
 8008484:	f43f aefb 	beq.w	800827e <_printf_float+0xb6>
 8008488:	f10a 0a01 	add.w	sl, sl, #1
 800848c:	e7ee      	b.n	800846c <_printf_float+0x2a4>
 800848e:	bf00      	nop
 8008490:	7fefffff 	.word	0x7fefffff
 8008494:	0800c444 	.word	0x0800c444
 8008498:	0800c448 	.word	0x0800c448
 800849c:	0800c44c 	.word	0x0800c44c
 80084a0:	0800c450 	.word	0x0800c450
 80084a4:	0800c454 	.word	0x0800c454
 80084a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80084aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80084ae:	4553      	cmp	r3, sl
 80084b0:	bfa8      	it	ge
 80084b2:	4653      	movge	r3, sl
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	4699      	mov	r9, r3
 80084b8:	dc36      	bgt.n	8008528 <_printf_float+0x360>
 80084ba:	f04f 0b00 	mov.w	fp, #0
 80084be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084c2:	f104 021a 	add.w	r2, r4, #26
 80084c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80084c8:	9306      	str	r3, [sp, #24]
 80084ca:	eba3 0309 	sub.w	r3, r3, r9
 80084ce:	455b      	cmp	r3, fp
 80084d0:	dc31      	bgt.n	8008536 <_printf_float+0x36e>
 80084d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084d4:	459a      	cmp	sl, r3
 80084d6:	dc3a      	bgt.n	800854e <_printf_float+0x386>
 80084d8:	6823      	ldr	r3, [r4, #0]
 80084da:	07da      	lsls	r2, r3, #31
 80084dc:	d437      	bmi.n	800854e <_printf_float+0x386>
 80084de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084e0:	ebaa 0903 	sub.w	r9, sl, r3
 80084e4:	9b06      	ldr	r3, [sp, #24]
 80084e6:	ebaa 0303 	sub.w	r3, sl, r3
 80084ea:	4599      	cmp	r9, r3
 80084ec:	bfa8      	it	ge
 80084ee:	4699      	movge	r9, r3
 80084f0:	f1b9 0f00 	cmp.w	r9, #0
 80084f4:	dc33      	bgt.n	800855e <_printf_float+0x396>
 80084f6:	f04f 0800 	mov.w	r8, #0
 80084fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084fe:	f104 0b1a 	add.w	fp, r4, #26
 8008502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008504:	ebaa 0303 	sub.w	r3, sl, r3
 8008508:	eba3 0309 	sub.w	r3, r3, r9
 800850c:	4543      	cmp	r3, r8
 800850e:	f77f af79 	ble.w	8008404 <_printf_float+0x23c>
 8008512:	2301      	movs	r3, #1
 8008514:	465a      	mov	r2, fp
 8008516:	4631      	mov	r1, r6
 8008518:	4628      	mov	r0, r5
 800851a:	47b8      	blx	r7
 800851c:	3001      	adds	r0, #1
 800851e:	f43f aeae 	beq.w	800827e <_printf_float+0xb6>
 8008522:	f108 0801 	add.w	r8, r8, #1
 8008526:	e7ec      	b.n	8008502 <_printf_float+0x33a>
 8008528:	4642      	mov	r2, r8
 800852a:	4631      	mov	r1, r6
 800852c:	4628      	mov	r0, r5
 800852e:	47b8      	blx	r7
 8008530:	3001      	adds	r0, #1
 8008532:	d1c2      	bne.n	80084ba <_printf_float+0x2f2>
 8008534:	e6a3      	b.n	800827e <_printf_float+0xb6>
 8008536:	2301      	movs	r3, #1
 8008538:	4631      	mov	r1, r6
 800853a:	4628      	mov	r0, r5
 800853c:	9206      	str	r2, [sp, #24]
 800853e:	47b8      	blx	r7
 8008540:	3001      	adds	r0, #1
 8008542:	f43f ae9c 	beq.w	800827e <_printf_float+0xb6>
 8008546:	9a06      	ldr	r2, [sp, #24]
 8008548:	f10b 0b01 	add.w	fp, fp, #1
 800854c:	e7bb      	b.n	80084c6 <_printf_float+0x2fe>
 800854e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008552:	4631      	mov	r1, r6
 8008554:	4628      	mov	r0, r5
 8008556:	47b8      	blx	r7
 8008558:	3001      	adds	r0, #1
 800855a:	d1c0      	bne.n	80084de <_printf_float+0x316>
 800855c:	e68f      	b.n	800827e <_printf_float+0xb6>
 800855e:	9a06      	ldr	r2, [sp, #24]
 8008560:	464b      	mov	r3, r9
 8008562:	4442      	add	r2, r8
 8008564:	4631      	mov	r1, r6
 8008566:	4628      	mov	r0, r5
 8008568:	47b8      	blx	r7
 800856a:	3001      	adds	r0, #1
 800856c:	d1c3      	bne.n	80084f6 <_printf_float+0x32e>
 800856e:	e686      	b.n	800827e <_printf_float+0xb6>
 8008570:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008574:	f1ba 0f01 	cmp.w	sl, #1
 8008578:	dc01      	bgt.n	800857e <_printf_float+0x3b6>
 800857a:	07db      	lsls	r3, r3, #31
 800857c:	d536      	bpl.n	80085ec <_printf_float+0x424>
 800857e:	2301      	movs	r3, #1
 8008580:	4642      	mov	r2, r8
 8008582:	4631      	mov	r1, r6
 8008584:	4628      	mov	r0, r5
 8008586:	47b8      	blx	r7
 8008588:	3001      	adds	r0, #1
 800858a:	f43f ae78 	beq.w	800827e <_printf_float+0xb6>
 800858e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008592:	4631      	mov	r1, r6
 8008594:	4628      	mov	r0, r5
 8008596:	47b8      	blx	r7
 8008598:	3001      	adds	r0, #1
 800859a:	f43f ae70 	beq.w	800827e <_printf_float+0xb6>
 800859e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80085a2:	2200      	movs	r2, #0
 80085a4:	2300      	movs	r3, #0
 80085a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085aa:	f7f8 fa95 	bl	8000ad8 <__aeabi_dcmpeq>
 80085ae:	b9c0      	cbnz	r0, 80085e2 <_printf_float+0x41a>
 80085b0:	4653      	mov	r3, sl
 80085b2:	f108 0201 	add.w	r2, r8, #1
 80085b6:	4631      	mov	r1, r6
 80085b8:	4628      	mov	r0, r5
 80085ba:	47b8      	blx	r7
 80085bc:	3001      	adds	r0, #1
 80085be:	d10c      	bne.n	80085da <_printf_float+0x412>
 80085c0:	e65d      	b.n	800827e <_printf_float+0xb6>
 80085c2:	2301      	movs	r3, #1
 80085c4:	465a      	mov	r2, fp
 80085c6:	4631      	mov	r1, r6
 80085c8:	4628      	mov	r0, r5
 80085ca:	47b8      	blx	r7
 80085cc:	3001      	adds	r0, #1
 80085ce:	f43f ae56 	beq.w	800827e <_printf_float+0xb6>
 80085d2:	f108 0801 	add.w	r8, r8, #1
 80085d6:	45d0      	cmp	r8, sl
 80085d8:	dbf3      	blt.n	80085c2 <_printf_float+0x3fa>
 80085da:	464b      	mov	r3, r9
 80085dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80085e0:	e6df      	b.n	80083a2 <_printf_float+0x1da>
 80085e2:	f04f 0800 	mov.w	r8, #0
 80085e6:	f104 0b1a 	add.w	fp, r4, #26
 80085ea:	e7f4      	b.n	80085d6 <_printf_float+0x40e>
 80085ec:	2301      	movs	r3, #1
 80085ee:	4642      	mov	r2, r8
 80085f0:	e7e1      	b.n	80085b6 <_printf_float+0x3ee>
 80085f2:	2301      	movs	r3, #1
 80085f4:	464a      	mov	r2, r9
 80085f6:	4631      	mov	r1, r6
 80085f8:	4628      	mov	r0, r5
 80085fa:	47b8      	blx	r7
 80085fc:	3001      	adds	r0, #1
 80085fe:	f43f ae3e 	beq.w	800827e <_printf_float+0xb6>
 8008602:	f108 0801 	add.w	r8, r8, #1
 8008606:	68e3      	ldr	r3, [r4, #12]
 8008608:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800860a:	1a5b      	subs	r3, r3, r1
 800860c:	4543      	cmp	r3, r8
 800860e:	dcf0      	bgt.n	80085f2 <_printf_float+0x42a>
 8008610:	e6fc      	b.n	800840c <_printf_float+0x244>
 8008612:	f04f 0800 	mov.w	r8, #0
 8008616:	f104 0919 	add.w	r9, r4, #25
 800861a:	e7f4      	b.n	8008606 <_printf_float+0x43e>

0800861c <_printf_common>:
 800861c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008620:	4616      	mov	r6, r2
 8008622:	4698      	mov	r8, r3
 8008624:	688a      	ldr	r2, [r1, #8]
 8008626:	690b      	ldr	r3, [r1, #16]
 8008628:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800862c:	4293      	cmp	r3, r2
 800862e:	bfb8      	it	lt
 8008630:	4613      	movlt	r3, r2
 8008632:	6033      	str	r3, [r6, #0]
 8008634:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008638:	4607      	mov	r7, r0
 800863a:	460c      	mov	r4, r1
 800863c:	b10a      	cbz	r2, 8008642 <_printf_common+0x26>
 800863e:	3301      	adds	r3, #1
 8008640:	6033      	str	r3, [r6, #0]
 8008642:	6823      	ldr	r3, [r4, #0]
 8008644:	0699      	lsls	r1, r3, #26
 8008646:	bf42      	ittt	mi
 8008648:	6833      	ldrmi	r3, [r6, #0]
 800864a:	3302      	addmi	r3, #2
 800864c:	6033      	strmi	r3, [r6, #0]
 800864e:	6825      	ldr	r5, [r4, #0]
 8008650:	f015 0506 	ands.w	r5, r5, #6
 8008654:	d106      	bne.n	8008664 <_printf_common+0x48>
 8008656:	f104 0a19 	add.w	sl, r4, #25
 800865a:	68e3      	ldr	r3, [r4, #12]
 800865c:	6832      	ldr	r2, [r6, #0]
 800865e:	1a9b      	subs	r3, r3, r2
 8008660:	42ab      	cmp	r3, r5
 8008662:	dc26      	bgt.n	80086b2 <_printf_common+0x96>
 8008664:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008668:	6822      	ldr	r2, [r4, #0]
 800866a:	3b00      	subs	r3, #0
 800866c:	bf18      	it	ne
 800866e:	2301      	movne	r3, #1
 8008670:	0692      	lsls	r2, r2, #26
 8008672:	d42b      	bmi.n	80086cc <_printf_common+0xb0>
 8008674:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008678:	4641      	mov	r1, r8
 800867a:	4638      	mov	r0, r7
 800867c:	47c8      	blx	r9
 800867e:	3001      	adds	r0, #1
 8008680:	d01e      	beq.n	80086c0 <_printf_common+0xa4>
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	6922      	ldr	r2, [r4, #16]
 8008686:	f003 0306 	and.w	r3, r3, #6
 800868a:	2b04      	cmp	r3, #4
 800868c:	bf02      	ittt	eq
 800868e:	68e5      	ldreq	r5, [r4, #12]
 8008690:	6833      	ldreq	r3, [r6, #0]
 8008692:	1aed      	subeq	r5, r5, r3
 8008694:	68a3      	ldr	r3, [r4, #8]
 8008696:	bf0c      	ite	eq
 8008698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800869c:	2500      	movne	r5, #0
 800869e:	4293      	cmp	r3, r2
 80086a0:	bfc4      	itt	gt
 80086a2:	1a9b      	subgt	r3, r3, r2
 80086a4:	18ed      	addgt	r5, r5, r3
 80086a6:	2600      	movs	r6, #0
 80086a8:	341a      	adds	r4, #26
 80086aa:	42b5      	cmp	r5, r6
 80086ac:	d11a      	bne.n	80086e4 <_printf_common+0xc8>
 80086ae:	2000      	movs	r0, #0
 80086b0:	e008      	b.n	80086c4 <_printf_common+0xa8>
 80086b2:	2301      	movs	r3, #1
 80086b4:	4652      	mov	r2, sl
 80086b6:	4641      	mov	r1, r8
 80086b8:	4638      	mov	r0, r7
 80086ba:	47c8      	blx	r9
 80086bc:	3001      	adds	r0, #1
 80086be:	d103      	bne.n	80086c8 <_printf_common+0xac>
 80086c0:	f04f 30ff 	mov.w	r0, #4294967295
 80086c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c8:	3501      	adds	r5, #1
 80086ca:	e7c6      	b.n	800865a <_printf_common+0x3e>
 80086cc:	18e1      	adds	r1, r4, r3
 80086ce:	1c5a      	adds	r2, r3, #1
 80086d0:	2030      	movs	r0, #48	@ 0x30
 80086d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80086d6:	4422      	add	r2, r4
 80086d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80086dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80086e0:	3302      	adds	r3, #2
 80086e2:	e7c7      	b.n	8008674 <_printf_common+0x58>
 80086e4:	2301      	movs	r3, #1
 80086e6:	4622      	mov	r2, r4
 80086e8:	4641      	mov	r1, r8
 80086ea:	4638      	mov	r0, r7
 80086ec:	47c8      	blx	r9
 80086ee:	3001      	adds	r0, #1
 80086f0:	d0e6      	beq.n	80086c0 <_printf_common+0xa4>
 80086f2:	3601      	adds	r6, #1
 80086f4:	e7d9      	b.n	80086aa <_printf_common+0x8e>
	...

080086f8 <_printf_i>:
 80086f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086fc:	7e0f      	ldrb	r7, [r1, #24]
 80086fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008700:	2f78      	cmp	r7, #120	@ 0x78
 8008702:	4691      	mov	r9, r2
 8008704:	4680      	mov	r8, r0
 8008706:	460c      	mov	r4, r1
 8008708:	469a      	mov	sl, r3
 800870a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800870e:	d807      	bhi.n	8008720 <_printf_i+0x28>
 8008710:	2f62      	cmp	r7, #98	@ 0x62
 8008712:	d80a      	bhi.n	800872a <_printf_i+0x32>
 8008714:	2f00      	cmp	r7, #0
 8008716:	f000 80d2 	beq.w	80088be <_printf_i+0x1c6>
 800871a:	2f58      	cmp	r7, #88	@ 0x58
 800871c:	f000 80b9 	beq.w	8008892 <_printf_i+0x19a>
 8008720:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008724:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008728:	e03a      	b.n	80087a0 <_printf_i+0xa8>
 800872a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800872e:	2b15      	cmp	r3, #21
 8008730:	d8f6      	bhi.n	8008720 <_printf_i+0x28>
 8008732:	a101      	add	r1, pc, #4	@ (adr r1, 8008738 <_printf_i+0x40>)
 8008734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008738:	08008791 	.word	0x08008791
 800873c:	080087a5 	.word	0x080087a5
 8008740:	08008721 	.word	0x08008721
 8008744:	08008721 	.word	0x08008721
 8008748:	08008721 	.word	0x08008721
 800874c:	08008721 	.word	0x08008721
 8008750:	080087a5 	.word	0x080087a5
 8008754:	08008721 	.word	0x08008721
 8008758:	08008721 	.word	0x08008721
 800875c:	08008721 	.word	0x08008721
 8008760:	08008721 	.word	0x08008721
 8008764:	080088a5 	.word	0x080088a5
 8008768:	080087cf 	.word	0x080087cf
 800876c:	0800885f 	.word	0x0800885f
 8008770:	08008721 	.word	0x08008721
 8008774:	08008721 	.word	0x08008721
 8008778:	080088c7 	.word	0x080088c7
 800877c:	08008721 	.word	0x08008721
 8008780:	080087cf 	.word	0x080087cf
 8008784:	08008721 	.word	0x08008721
 8008788:	08008721 	.word	0x08008721
 800878c:	08008867 	.word	0x08008867
 8008790:	6833      	ldr	r3, [r6, #0]
 8008792:	1d1a      	adds	r2, r3, #4
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	6032      	str	r2, [r6, #0]
 8008798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800879c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80087a0:	2301      	movs	r3, #1
 80087a2:	e09d      	b.n	80088e0 <_printf_i+0x1e8>
 80087a4:	6833      	ldr	r3, [r6, #0]
 80087a6:	6820      	ldr	r0, [r4, #0]
 80087a8:	1d19      	adds	r1, r3, #4
 80087aa:	6031      	str	r1, [r6, #0]
 80087ac:	0606      	lsls	r6, r0, #24
 80087ae:	d501      	bpl.n	80087b4 <_printf_i+0xbc>
 80087b0:	681d      	ldr	r5, [r3, #0]
 80087b2:	e003      	b.n	80087bc <_printf_i+0xc4>
 80087b4:	0645      	lsls	r5, r0, #25
 80087b6:	d5fb      	bpl.n	80087b0 <_printf_i+0xb8>
 80087b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80087bc:	2d00      	cmp	r5, #0
 80087be:	da03      	bge.n	80087c8 <_printf_i+0xd0>
 80087c0:	232d      	movs	r3, #45	@ 0x2d
 80087c2:	426d      	negs	r5, r5
 80087c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087c8:	4859      	ldr	r0, [pc, #356]	@ (8008930 <_printf_i+0x238>)
 80087ca:	230a      	movs	r3, #10
 80087cc:	e011      	b.n	80087f2 <_printf_i+0xfa>
 80087ce:	6821      	ldr	r1, [r4, #0]
 80087d0:	6833      	ldr	r3, [r6, #0]
 80087d2:	0608      	lsls	r0, r1, #24
 80087d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80087d8:	d402      	bmi.n	80087e0 <_printf_i+0xe8>
 80087da:	0649      	lsls	r1, r1, #25
 80087dc:	bf48      	it	mi
 80087de:	b2ad      	uxthmi	r5, r5
 80087e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80087e2:	4853      	ldr	r0, [pc, #332]	@ (8008930 <_printf_i+0x238>)
 80087e4:	6033      	str	r3, [r6, #0]
 80087e6:	bf14      	ite	ne
 80087e8:	230a      	movne	r3, #10
 80087ea:	2308      	moveq	r3, #8
 80087ec:	2100      	movs	r1, #0
 80087ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80087f2:	6866      	ldr	r6, [r4, #4]
 80087f4:	60a6      	str	r6, [r4, #8]
 80087f6:	2e00      	cmp	r6, #0
 80087f8:	bfa2      	ittt	ge
 80087fa:	6821      	ldrge	r1, [r4, #0]
 80087fc:	f021 0104 	bicge.w	r1, r1, #4
 8008800:	6021      	strge	r1, [r4, #0]
 8008802:	b90d      	cbnz	r5, 8008808 <_printf_i+0x110>
 8008804:	2e00      	cmp	r6, #0
 8008806:	d04b      	beq.n	80088a0 <_printf_i+0x1a8>
 8008808:	4616      	mov	r6, r2
 800880a:	fbb5 f1f3 	udiv	r1, r5, r3
 800880e:	fb03 5711 	mls	r7, r3, r1, r5
 8008812:	5dc7      	ldrb	r7, [r0, r7]
 8008814:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008818:	462f      	mov	r7, r5
 800881a:	42bb      	cmp	r3, r7
 800881c:	460d      	mov	r5, r1
 800881e:	d9f4      	bls.n	800880a <_printf_i+0x112>
 8008820:	2b08      	cmp	r3, #8
 8008822:	d10b      	bne.n	800883c <_printf_i+0x144>
 8008824:	6823      	ldr	r3, [r4, #0]
 8008826:	07df      	lsls	r7, r3, #31
 8008828:	d508      	bpl.n	800883c <_printf_i+0x144>
 800882a:	6923      	ldr	r3, [r4, #16]
 800882c:	6861      	ldr	r1, [r4, #4]
 800882e:	4299      	cmp	r1, r3
 8008830:	bfde      	ittt	le
 8008832:	2330      	movle	r3, #48	@ 0x30
 8008834:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008838:	f106 36ff 	addle.w	r6, r6, #4294967295
 800883c:	1b92      	subs	r2, r2, r6
 800883e:	6122      	str	r2, [r4, #16]
 8008840:	f8cd a000 	str.w	sl, [sp]
 8008844:	464b      	mov	r3, r9
 8008846:	aa03      	add	r2, sp, #12
 8008848:	4621      	mov	r1, r4
 800884a:	4640      	mov	r0, r8
 800884c:	f7ff fee6 	bl	800861c <_printf_common>
 8008850:	3001      	adds	r0, #1
 8008852:	d14a      	bne.n	80088ea <_printf_i+0x1f2>
 8008854:	f04f 30ff 	mov.w	r0, #4294967295
 8008858:	b004      	add	sp, #16
 800885a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800885e:	6823      	ldr	r3, [r4, #0]
 8008860:	f043 0320 	orr.w	r3, r3, #32
 8008864:	6023      	str	r3, [r4, #0]
 8008866:	4833      	ldr	r0, [pc, #204]	@ (8008934 <_printf_i+0x23c>)
 8008868:	2778      	movs	r7, #120	@ 0x78
 800886a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	6831      	ldr	r1, [r6, #0]
 8008872:	061f      	lsls	r7, r3, #24
 8008874:	f851 5b04 	ldr.w	r5, [r1], #4
 8008878:	d402      	bmi.n	8008880 <_printf_i+0x188>
 800887a:	065f      	lsls	r7, r3, #25
 800887c:	bf48      	it	mi
 800887e:	b2ad      	uxthmi	r5, r5
 8008880:	6031      	str	r1, [r6, #0]
 8008882:	07d9      	lsls	r1, r3, #31
 8008884:	bf44      	itt	mi
 8008886:	f043 0320 	orrmi.w	r3, r3, #32
 800888a:	6023      	strmi	r3, [r4, #0]
 800888c:	b11d      	cbz	r5, 8008896 <_printf_i+0x19e>
 800888e:	2310      	movs	r3, #16
 8008890:	e7ac      	b.n	80087ec <_printf_i+0xf4>
 8008892:	4827      	ldr	r0, [pc, #156]	@ (8008930 <_printf_i+0x238>)
 8008894:	e7e9      	b.n	800886a <_printf_i+0x172>
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	f023 0320 	bic.w	r3, r3, #32
 800889c:	6023      	str	r3, [r4, #0]
 800889e:	e7f6      	b.n	800888e <_printf_i+0x196>
 80088a0:	4616      	mov	r6, r2
 80088a2:	e7bd      	b.n	8008820 <_printf_i+0x128>
 80088a4:	6833      	ldr	r3, [r6, #0]
 80088a6:	6825      	ldr	r5, [r4, #0]
 80088a8:	6961      	ldr	r1, [r4, #20]
 80088aa:	1d18      	adds	r0, r3, #4
 80088ac:	6030      	str	r0, [r6, #0]
 80088ae:	062e      	lsls	r6, r5, #24
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	d501      	bpl.n	80088b8 <_printf_i+0x1c0>
 80088b4:	6019      	str	r1, [r3, #0]
 80088b6:	e002      	b.n	80088be <_printf_i+0x1c6>
 80088b8:	0668      	lsls	r0, r5, #25
 80088ba:	d5fb      	bpl.n	80088b4 <_printf_i+0x1bc>
 80088bc:	8019      	strh	r1, [r3, #0]
 80088be:	2300      	movs	r3, #0
 80088c0:	6123      	str	r3, [r4, #16]
 80088c2:	4616      	mov	r6, r2
 80088c4:	e7bc      	b.n	8008840 <_printf_i+0x148>
 80088c6:	6833      	ldr	r3, [r6, #0]
 80088c8:	1d1a      	adds	r2, r3, #4
 80088ca:	6032      	str	r2, [r6, #0]
 80088cc:	681e      	ldr	r6, [r3, #0]
 80088ce:	6862      	ldr	r2, [r4, #4]
 80088d0:	2100      	movs	r1, #0
 80088d2:	4630      	mov	r0, r6
 80088d4:	f7f7 fc84 	bl	80001e0 <memchr>
 80088d8:	b108      	cbz	r0, 80088de <_printf_i+0x1e6>
 80088da:	1b80      	subs	r0, r0, r6
 80088dc:	6060      	str	r0, [r4, #4]
 80088de:	6863      	ldr	r3, [r4, #4]
 80088e0:	6123      	str	r3, [r4, #16]
 80088e2:	2300      	movs	r3, #0
 80088e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088e8:	e7aa      	b.n	8008840 <_printf_i+0x148>
 80088ea:	6923      	ldr	r3, [r4, #16]
 80088ec:	4632      	mov	r2, r6
 80088ee:	4649      	mov	r1, r9
 80088f0:	4640      	mov	r0, r8
 80088f2:	47d0      	blx	sl
 80088f4:	3001      	adds	r0, #1
 80088f6:	d0ad      	beq.n	8008854 <_printf_i+0x15c>
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	079b      	lsls	r3, r3, #30
 80088fc:	d413      	bmi.n	8008926 <_printf_i+0x22e>
 80088fe:	68e0      	ldr	r0, [r4, #12]
 8008900:	9b03      	ldr	r3, [sp, #12]
 8008902:	4298      	cmp	r0, r3
 8008904:	bfb8      	it	lt
 8008906:	4618      	movlt	r0, r3
 8008908:	e7a6      	b.n	8008858 <_printf_i+0x160>
 800890a:	2301      	movs	r3, #1
 800890c:	4632      	mov	r2, r6
 800890e:	4649      	mov	r1, r9
 8008910:	4640      	mov	r0, r8
 8008912:	47d0      	blx	sl
 8008914:	3001      	adds	r0, #1
 8008916:	d09d      	beq.n	8008854 <_printf_i+0x15c>
 8008918:	3501      	adds	r5, #1
 800891a:	68e3      	ldr	r3, [r4, #12]
 800891c:	9903      	ldr	r1, [sp, #12]
 800891e:	1a5b      	subs	r3, r3, r1
 8008920:	42ab      	cmp	r3, r5
 8008922:	dcf2      	bgt.n	800890a <_printf_i+0x212>
 8008924:	e7eb      	b.n	80088fe <_printf_i+0x206>
 8008926:	2500      	movs	r5, #0
 8008928:	f104 0619 	add.w	r6, r4, #25
 800892c:	e7f5      	b.n	800891a <_printf_i+0x222>
 800892e:	bf00      	nop
 8008930:	0800c456 	.word	0x0800c456
 8008934:	0800c467 	.word	0x0800c467

08008938 <std>:
 8008938:	2300      	movs	r3, #0
 800893a:	b510      	push	{r4, lr}
 800893c:	4604      	mov	r4, r0
 800893e:	e9c0 3300 	strd	r3, r3, [r0]
 8008942:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008946:	6083      	str	r3, [r0, #8]
 8008948:	8181      	strh	r1, [r0, #12]
 800894a:	6643      	str	r3, [r0, #100]	@ 0x64
 800894c:	81c2      	strh	r2, [r0, #14]
 800894e:	6183      	str	r3, [r0, #24]
 8008950:	4619      	mov	r1, r3
 8008952:	2208      	movs	r2, #8
 8008954:	305c      	adds	r0, #92	@ 0x5c
 8008956:	f000 f926 	bl	8008ba6 <memset>
 800895a:	4b0d      	ldr	r3, [pc, #52]	@ (8008990 <std+0x58>)
 800895c:	6263      	str	r3, [r4, #36]	@ 0x24
 800895e:	4b0d      	ldr	r3, [pc, #52]	@ (8008994 <std+0x5c>)
 8008960:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008962:	4b0d      	ldr	r3, [pc, #52]	@ (8008998 <std+0x60>)
 8008964:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008966:	4b0d      	ldr	r3, [pc, #52]	@ (800899c <std+0x64>)
 8008968:	6323      	str	r3, [r4, #48]	@ 0x30
 800896a:	4b0d      	ldr	r3, [pc, #52]	@ (80089a0 <std+0x68>)
 800896c:	6224      	str	r4, [r4, #32]
 800896e:	429c      	cmp	r4, r3
 8008970:	d006      	beq.n	8008980 <std+0x48>
 8008972:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008976:	4294      	cmp	r4, r2
 8008978:	d002      	beq.n	8008980 <std+0x48>
 800897a:	33d0      	adds	r3, #208	@ 0xd0
 800897c:	429c      	cmp	r4, r3
 800897e:	d105      	bne.n	800898c <std+0x54>
 8008980:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008988:	f000 b9e0 	b.w	8008d4c <__retarget_lock_init_recursive>
 800898c:	bd10      	pop	{r4, pc}
 800898e:	bf00      	nop
 8008990:	08008b21 	.word	0x08008b21
 8008994:	08008b43 	.word	0x08008b43
 8008998:	08008b7b 	.word	0x08008b7b
 800899c:	08008b9f 	.word	0x08008b9f
 80089a0:	20004d98 	.word	0x20004d98

080089a4 <stdio_exit_handler>:
 80089a4:	4a02      	ldr	r2, [pc, #8]	@ (80089b0 <stdio_exit_handler+0xc>)
 80089a6:	4903      	ldr	r1, [pc, #12]	@ (80089b4 <stdio_exit_handler+0x10>)
 80089a8:	4803      	ldr	r0, [pc, #12]	@ (80089b8 <stdio_exit_handler+0x14>)
 80089aa:	f000 b869 	b.w	8008a80 <_fwalk_sglue>
 80089ae:	bf00      	nop
 80089b0:	20000010 	.word	0x20000010
 80089b4:	0800a949 	.word	0x0800a949
 80089b8:	20000020 	.word	0x20000020

080089bc <cleanup_stdio>:
 80089bc:	6841      	ldr	r1, [r0, #4]
 80089be:	4b0c      	ldr	r3, [pc, #48]	@ (80089f0 <cleanup_stdio+0x34>)
 80089c0:	4299      	cmp	r1, r3
 80089c2:	b510      	push	{r4, lr}
 80089c4:	4604      	mov	r4, r0
 80089c6:	d001      	beq.n	80089cc <cleanup_stdio+0x10>
 80089c8:	f001 ffbe 	bl	800a948 <_fflush_r>
 80089cc:	68a1      	ldr	r1, [r4, #8]
 80089ce:	4b09      	ldr	r3, [pc, #36]	@ (80089f4 <cleanup_stdio+0x38>)
 80089d0:	4299      	cmp	r1, r3
 80089d2:	d002      	beq.n	80089da <cleanup_stdio+0x1e>
 80089d4:	4620      	mov	r0, r4
 80089d6:	f001 ffb7 	bl	800a948 <_fflush_r>
 80089da:	68e1      	ldr	r1, [r4, #12]
 80089dc:	4b06      	ldr	r3, [pc, #24]	@ (80089f8 <cleanup_stdio+0x3c>)
 80089de:	4299      	cmp	r1, r3
 80089e0:	d004      	beq.n	80089ec <cleanup_stdio+0x30>
 80089e2:	4620      	mov	r0, r4
 80089e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089e8:	f001 bfae 	b.w	800a948 <_fflush_r>
 80089ec:	bd10      	pop	{r4, pc}
 80089ee:	bf00      	nop
 80089f0:	20004d98 	.word	0x20004d98
 80089f4:	20004e00 	.word	0x20004e00
 80089f8:	20004e68 	.word	0x20004e68

080089fc <global_stdio_init.part.0>:
 80089fc:	b510      	push	{r4, lr}
 80089fe:	4b0b      	ldr	r3, [pc, #44]	@ (8008a2c <global_stdio_init.part.0+0x30>)
 8008a00:	4c0b      	ldr	r4, [pc, #44]	@ (8008a30 <global_stdio_init.part.0+0x34>)
 8008a02:	4a0c      	ldr	r2, [pc, #48]	@ (8008a34 <global_stdio_init.part.0+0x38>)
 8008a04:	601a      	str	r2, [r3, #0]
 8008a06:	4620      	mov	r0, r4
 8008a08:	2200      	movs	r2, #0
 8008a0a:	2104      	movs	r1, #4
 8008a0c:	f7ff ff94 	bl	8008938 <std>
 8008a10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008a14:	2201      	movs	r2, #1
 8008a16:	2109      	movs	r1, #9
 8008a18:	f7ff ff8e 	bl	8008938 <std>
 8008a1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008a20:	2202      	movs	r2, #2
 8008a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a26:	2112      	movs	r1, #18
 8008a28:	f7ff bf86 	b.w	8008938 <std>
 8008a2c:	20004ed0 	.word	0x20004ed0
 8008a30:	20004d98 	.word	0x20004d98
 8008a34:	080089a5 	.word	0x080089a5

08008a38 <__sfp_lock_acquire>:
 8008a38:	4801      	ldr	r0, [pc, #4]	@ (8008a40 <__sfp_lock_acquire+0x8>)
 8008a3a:	f000 b988 	b.w	8008d4e <__retarget_lock_acquire_recursive>
 8008a3e:	bf00      	nop
 8008a40:	20004ed9 	.word	0x20004ed9

08008a44 <__sfp_lock_release>:
 8008a44:	4801      	ldr	r0, [pc, #4]	@ (8008a4c <__sfp_lock_release+0x8>)
 8008a46:	f000 b983 	b.w	8008d50 <__retarget_lock_release_recursive>
 8008a4a:	bf00      	nop
 8008a4c:	20004ed9 	.word	0x20004ed9

08008a50 <__sinit>:
 8008a50:	b510      	push	{r4, lr}
 8008a52:	4604      	mov	r4, r0
 8008a54:	f7ff fff0 	bl	8008a38 <__sfp_lock_acquire>
 8008a58:	6a23      	ldr	r3, [r4, #32]
 8008a5a:	b11b      	cbz	r3, 8008a64 <__sinit+0x14>
 8008a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a60:	f7ff bff0 	b.w	8008a44 <__sfp_lock_release>
 8008a64:	4b04      	ldr	r3, [pc, #16]	@ (8008a78 <__sinit+0x28>)
 8008a66:	6223      	str	r3, [r4, #32]
 8008a68:	4b04      	ldr	r3, [pc, #16]	@ (8008a7c <__sinit+0x2c>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d1f5      	bne.n	8008a5c <__sinit+0xc>
 8008a70:	f7ff ffc4 	bl	80089fc <global_stdio_init.part.0>
 8008a74:	e7f2      	b.n	8008a5c <__sinit+0xc>
 8008a76:	bf00      	nop
 8008a78:	080089bd 	.word	0x080089bd
 8008a7c:	20004ed0 	.word	0x20004ed0

08008a80 <_fwalk_sglue>:
 8008a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a84:	4607      	mov	r7, r0
 8008a86:	4688      	mov	r8, r1
 8008a88:	4614      	mov	r4, r2
 8008a8a:	2600      	movs	r6, #0
 8008a8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a90:	f1b9 0901 	subs.w	r9, r9, #1
 8008a94:	d505      	bpl.n	8008aa2 <_fwalk_sglue+0x22>
 8008a96:	6824      	ldr	r4, [r4, #0]
 8008a98:	2c00      	cmp	r4, #0
 8008a9a:	d1f7      	bne.n	8008a8c <_fwalk_sglue+0xc>
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aa2:	89ab      	ldrh	r3, [r5, #12]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d907      	bls.n	8008ab8 <_fwalk_sglue+0x38>
 8008aa8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008aac:	3301      	adds	r3, #1
 8008aae:	d003      	beq.n	8008ab8 <_fwalk_sglue+0x38>
 8008ab0:	4629      	mov	r1, r5
 8008ab2:	4638      	mov	r0, r7
 8008ab4:	47c0      	blx	r8
 8008ab6:	4306      	orrs	r6, r0
 8008ab8:	3568      	adds	r5, #104	@ 0x68
 8008aba:	e7e9      	b.n	8008a90 <_fwalk_sglue+0x10>

08008abc <iprintf>:
 8008abc:	b40f      	push	{r0, r1, r2, r3}
 8008abe:	b507      	push	{r0, r1, r2, lr}
 8008ac0:	4906      	ldr	r1, [pc, #24]	@ (8008adc <iprintf+0x20>)
 8008ac2:	ab04      	add	r3, sp, #16
 8008ac4:	6808      	ldr	r0, [r1, #0]
 8008ac6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aca:	6881      	ldr	r1, [r0, #8]
 8008acc:	9301      	str	r3, [sp, #4]
 8008ace:	f001 fd9f 	bl	800a610 <_vfiprintf_r>
 8008ad2:	b003      	add	sp, #12
 8008ad4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ad8:	b004      	add	sp, #16
 8008ada:	4770      	bx	lr
 8008adc:	2000001c 	.word	0x2000001c

08008ae0 <siprintf>:
 8008ae0:	b40e      	push	{r1, r2, r3}
 8008ae2:	b500      	push	{lr}
 8008ae4:	b09c      	sub	sp, #112	@ 0x70
 8008ae6:	ab1d      	add	r3, sp, #116	@ 0x74
 8008ae8:	9002      	str	r0, [sp, #8]
 8008aea:	9006      	str	r0, [sp, #24]
 8008aec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008af0:	4809      	ldr	r0, [pc, #36]	@ (8008b18 <siprintf+0x38>)
 8008af2:	9107      	str	r1, [sp, #28]
 8008af4:	9104      	str	r1, [sp, #16]
 8008af6:	4909      	ldr	r1, [pc, #36]	@ (8008b1c <siprintf+0x3c>)
 8008af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008afc:	9105      	str	r1, [sp, #20]
 8008afe:	6800      	ldr	r0, [r0, #0]
 8008b00:	9301      	str	r3, [sp, #4]
 8008b02:	a902      	add	r1, sp, #8
 8008b04:	f001 fc5e 	bl	800a3c4 <_svfiprintf_r>
 8008b08:	9b02      	ldr	r3, [sp, #8]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	701a      	strb	r2, [r3, #0]
 8008b0e:	b01c      	add	sp, #112	@ 0x70
 8008b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b14:	b003      	add	sp, #12
 8008b16:	4770      	bx	lr
 8008b18:	2000001c 	.word	0x2000001c
 8008b1c:	ffff0208 	.word	0xffff0208

08008b20 <__sread>:
 8008b20:	b510      	push	{r4, lr}
 8008b22:	460c      	mov	r4, r1
 8008b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b28:	f000 f8c2 	bl	8008cb0 <_read_r>
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	bfab      	itete	ge
 8008b30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b32:	89a3      	ldrhlt	r3, [r4, #12]
 8008b34:	181b      	addge	r3, r3, r0
 8008b36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b3a:	bfac      	ite	ge
 8008b3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b3e:	81a3      	strhlt	r3, [r4, #12]
 8008b40:	bd10      	pop	{r4, pc}

08008b42 <__swrite>:
 8008b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b46:	461f      	mov	r7, r3
 8008b48:	898b      	ldrh	r3, [r1, #12]
 8008b4a:	05db      	lsls	r3, r3, #23
 8008b4c:	4605      	mov	r5, r0
 8008b4e:	460c      	mov	r4, r1
 8008b50:	4616      	mov	r6, r2
 8008b52:	d505      	bpl.n	8008b60 <__swrite+0x1e>
 8008b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b58:	2302      	movs	r3, #2
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f000 f896 	bl	8008c8c <_lseek_r>
 8008b60:	89a3      	ldrh	r3, [r4, #12]
 8008b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b6a:	81a3      	strh	r3, [r4, #12]
 8008b6c:	4632      	mov	r2, r6
 8008b6e:	463b      	mov	r3, r7
 8008b70:	4628      	mov	r0, r5
 8008b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b76:	f000 b8ad 	b.w	8008cd4 <_write_r>

08008b7a <__sseek>:
 8008b7a:	b510      	push	{r4, lr}
 8008b7c:	460c      	mov	r4, r1
 8008b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b82:	f000 f883 	bl	8008c8c <_lseek_r>
 8008b86:	1c43      	adds	r3, r0, #1
 8008b88:	89a3      	ldrh	r3, [r4, #12]
 8008b8a:	bf15      	itete	ne
 8008b8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008b8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008b92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008b96:	81a3      	strheq	r3, [r4, #12]
 8008b98:	bf18      	it	ne
 8008b9a:	81a3      	strhne	r3, [r4, #12]
 8008b9c:	bd10      	pop	{r4, pc}

08008b9e <__sclose>:
 8008b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ba2:	f000 b80d 	b.w	8008bc0 <_close_r>

08008ba6 <memset>:
 8008ba6:	4402      	add	r2, r0
 8008ba8:	4603      	mov	r3, r0
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d100      	bne.n	8008bb0 <memset+0xa>
 8008bae:	4770      	bx	lr
 8008bb0:	f803 1b01 	strb.w	r1, [r3], #1
 8008bb4:	e7f9      	b.n	8008baa <memset+0x4>
	...

08008bb8 <_localeconv_r>:
 8008bb8:	4800      	ldr	r0, [pc, #0]	@ (8008bbc <_localeconv_r+0x4>)
 8008bba:	4770      	bx	lr
 8008bbc:	2000015c 	.word	0x2000015c

08008bc0 <_close_r>:
 8008bc0:	b538      	push	{r3, r4, r5, lr}
 8008bc2:	4d06      	ldr	r5, [pc, #24]	@ (8008bdc <_close_r+0x1c>)
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	4608      	mov	r0, r1
 8008bca:	602b      	str	r3, [r5, #0]
 8008bcc:	f7f8 ff7e 	bl	8001acc <_close>
 8008bd0:	1c43      	adds	r3, r0, #1
 8008bd2:	d102      	bne.n	8008bda <_close_r+0x1a>
 8008bd4:	682b      	ldr	r3, [r5, #0]
 8008bd6:	b103      	cbz	r3, 8008bda <_close_r+0x1a>
 8008bd8:	6023      	str	r3, [r4, #0]
 8008bda:	bd38      	pop	{r3, r4, r5, pc}
 8008bdc:	20004ed4 	.word	0x20004ed4

08008be0 <_reclaim_reent>:
 8008be0:	4b29      	ldr	r3, [pc, #164]	@ (8008c88 <_reclaim_reent+0xa8>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4283      	cmp	r3, r0
 8008be6:	b570      	push	{r4, r5, r6, lr}
 8008be8:	4604      	mov	r4, r0
 8008bea:	d04b      	beq.n	8008c84 <_reclaim_reent+0xa4>
 8008bec:	69c3      	ldr	r3, [r0, #28]
 8008bee:	b1ab      	cbz	r3, 8008c1c <_reclaim_reent+0x3c>
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	b16b      	cbz	r3, 8008c10 <_reclaim_reent+0x30>
 8008bf4:	2500      	movs	r5, #0
 8008bf6:	69e3      	ldr	r3, [r4, #28]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	5959      	ldr	r1, [r3, r5]
 8008bfc:	2900      	cmp	r1, #0
 8008bfe:	d13b      	bne.n	8008c78 <_reclaim_reent+0x98>
 8008c00:	3504      	adds	r5, #4
 8008c02:	2d80      	cmp	r5, #128	@ 0x80
 8008c04:	d1f7      	bne.n	8008bf6 <_reclaim_reent+0x16>
 8008c06:	69e3      	ldr	r3, [r4, #28]
 8008c08:	4620      	mov	r0, r4
 8008c0a:	68d9      	ldr	r1, [r3, #12]
 8008c0c:	f000 fefc 	bl	8009a08 <_free_r>
 8008c10:	69e3      	ldr	r3, [r4, #28]
 8008c12:	6819      	ldr	r1, [r3, #0]
 8008c14:	b111      	cbz	r1, 8008c1c <_reclaim_reent+0x3c>
 8008c16:	4620      	mov	r0, r4
 8008c18:	f000 fef6 	bl	8009a08 <_free_r>
 8008c1c:	6961      	ldr	r1, [r4, #20]
 8008c1e:	b111      	cbz	r1, 8008c26 <_reclaim_reent+0x46>
 8008c20:	4620      	mov	r0, r4
 8008c22:	f000 fef1 	bl	8009a08 <_free_r>
 8008c26:	69e1      	ldr	r1, [r4, #28]
 8008c28:	b111      	cbz	r1, 8008c30 <_reclaim_reent+0x50>
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f000 feec 	bl	8009a08 <_free_r>
 8008c30:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008c32:	b111      	cbz	r1, 8008c3a <_reclaim_reent+0x5a>
 8008c34:	4620      	mov	r0, r4
 8008c36:	f000 fee7 	bl	8009a08 <_free_r>
 8008c3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c3c:	b111      	cbz	r1, 8008c44 <_reclaim_reent+0x64>
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f000 fee2 	bl	8009a08 <_free_r>
 8008c44:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008c46:	b111      	cbz	r1, 8008c4e <_reclaim_reent+0x6e>
 8008c48:	4620      	mov	r0, r4
 8008c4a:	f000 fedd 	bl	8009a08 <_free_r>
 8008c4e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008c50:	b111      	cbz	r1, 8008c58 <_reclaim_reent+0x78>
 8008c52:	4620      	mov	r0, r4
 8008c54:	f000 fed8 	bl	8009a08 <_free_r>
 8008c58:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008c5a:	b111      	cbz	r1, 8008c62 <_reclaim_reent+0x82>
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f000 fed3 	bl	8009a08 <_free_r>
 8008c62:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008c64:	b111      	cbz	r1, 8008c6c <_reclaim_reent+0x8c>
 8008c66:	4620      	mov	r0, r4
 8008c68:	f000 fece 	bl	8009a08 <_free_r>
 8008c6c:	6a23      	ldr	r3, [r4, #32]
 8008c6e:	b14b      	cbz	r3, 8008c84 <_reclaim_reent+0xa4>
 8008c70:	4620      	mov	r0, r4
 8008c72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c76:	4718      	bx	r3
 8008c78:	680e      	ldr	r6, [r1, #0]
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f000 fec4 	bl	8009a08 <_free_r>
 8008c80:	4631      	mov	r1, r6
 8008c82:	e7bb      	b.n	8008bfc <_reclaim_reent+0x1c>
 8008c84:	bd70      	pop	{r4, r5, r6, pc}
 8008c86:	bf00      	nop
 8008c88:	2000001c 	.word	0x2000001c

08008c8c <_lseek_r>:
 8008c8c:	b538      	push	{r3, r4, r5, lr}
 8008c8e:	4d07      	ldr	r5, [pc, #28]	@ (8008cac <_lseek_r+0x20>)
 8008c90:	4604      	mov	r4, r0
 8008c92:	4608      	mov	r0, r1
 8008c94:	4611      	mov	r1, r2
 8008c96:	2200      	movs	r2, #0
 8008c98:	602a      	str	r2, [r5, #0]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	f7f8 ff3d 	bl	8001b1a <_lseek>
 8008ca0:	1c43      	adds	r3, r0, #1
 8008ca2:	d102      	bne.n	8008caa <_lseek_r+0x1e>
 8008ca4:	682b      	ldr	r3, [r5, #0]
 8008ca6:	b103      	cbz	r3, 8008caa <_lseek_r+0x1e>
 8008ca8:	6023      	str	r3, [r4, #0]
 8008caa:	bd38      	pop	{r3, r4, r5, pc}
 8008cac:	20004ed4 	.word	0x20004ed4

08008cb0 <_read_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	4d07      	ldr	r5, [pc, #28]	@ (8008cd0 <_read_r+0x20>)
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	4608      	mov	r0, r1
 8008cb8:	4611      	mov	r1, r2
 8008cba:	2200      	movs	r2, #0
 8008cbc:	602a      	str	r2, [r5, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	f7f8 fecb 	bl	8001a5a <_read>
 8008cc4:	1c43      	adds	r3, r0, #1
 8008cc6:	d102      	bne.n	8008cce <_read_r+0x1e>
 8008cc8:	682b      	ldr	r3, [r5, #0]
 8008cca:	b103      	cbz	r3, 8008cce <_read_r+0x1e>
 8008ccc:	6023      	str	r3, [r4, #0]
 8008cce:	bd38      	pop	{r3, r4, r5, pc}
 8008cd0:	20004ed4 	.word	0x20004ed4

08008cd4 <_write_r>:
 8008cd4:	b538      	push	{r3, r4, r5, lr}
 8008cd6:	4d07      	ldr	r5, [pc, #28]	@ (8008cf4 <_write_r+0x20>)
 8008cd8:	4604      	mov	r4, r0
 8008cda:	4608      	mov	r0, r1
 8008cdc:	4611      	mov	r1, r2
 8008cde:	2200      	movs	r2, #0
 8008ce0:	602a      	str	r2, [r5, #0]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	f7f8 fed6 	bl	8001a94 <_write>
 8008ce8:	1c43      	adds	r3, r0, #1
 8008cea:	d102      	bne.n	8008cf2 <_write_r+0x1e>
 8008cec:	682b      	ldr	r3, [r5, #0]
 8008cee:	b103      	cbz	r3, 8008cf2 <_write_r+0x1e>
 8008cf0:	6023      	str	r3, [r4, #0]
 8008cf2:	bd38      	pop	{r3, r4, r5, pc}
 8008cf4:	20004ed4 	.word	0x20004ed4

08008cf8 <__errno>:
 8008cf8:	4b01      	ldr	r3, [pc, #4]	@ (8008d00 <__errno+0x8>)
 8008cfa:	6818      	ldr	r0, [r3, #0]
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	2000001c 	.word	0x2000001c

08008d04 <__libc_init_array>:
 8008d04:	b570      	push	{r4, r5, r6, lr}
 8008d06:	4d0d      	ldr	r5, [pc, #52]	@ (8008d3c <__libc_init_array+0x38>)
 8008d08:	4c0d      	ldr	r4, [pc, #52]	@ (8008d40 <__libc_init_array+0x3c>)
 8008d0a:	1b64      	subs	r4, r4, r5
 8008d0c:	10a4      	asrs	r4, r4, #2
 8008d0e:	2600      	movs	r6, #0
 8008d10:	42a6      	cmp	r6, r4
 8008d12:	d109      	bne.n	8008d28 <__libc_init_array+0x24>
 8008d14:	4d0b      	ldr	r5, [pc, #44]	@ (8008d44 <__libc_init_array+0x40>)
 8008d16:	4c0c      	ldr	r4, [pc, #48]	@ (8008d48 <__libc_init_array+0x44>)
 8008d18:	f003 fb4e 	bl	800c3b8 <_init>
 8008d1c:	1b64      	subs	r4, r4, r5
 8008d1e:	10a4      	asrs	r4, r4, #2
 8008d20:	2600      	movs	r6, #0
 8008d22:	42a6      	cmp	r6, r4
 8008d24:	d105      	bne.n	8008d32 <__libc_init_array+0x2e>
 8008d26:	bd70      	pop	{r4, r5, r6, pc}
 8008d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d2c:	4798      	blx	r3
 8008d2e:	3601      	adds	r6, #1
 8008d30:	e7ee      	b.n	8008d10 <__libc_init_array+0xc>
 8008d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d36:	4798      	blx	r3
 8008d38:	3601      	adds	r6, #1
 8008d3a:	e7f2      	b.n	8008d22 <__libc_init_array+0x1e>
 8008d3c:	0800ca08 	.word	0x0800ca08
 8008d40:	0800ca08 	.word	0x0800ca08
 8008d44:	0800ca08 	.word	0x0800ca08
 8008d48:	0800ca0c 	.word	0x0800ca0c

08008d4c <__retarget_lock_init_recursive>:
 8008d4c:	4770      	bx	lr

08008d4e <__retarget_lock_acquire_recursive>:
 8008d4e:	4770      	bx	lr

08008d50 <__retarget_lock_release_recursive>:
 8008d50:	4770      	bx	lr

08008d52 <memcpy>:
 8008d52:	440a      	add	r2, r1
 8008d54:	4291      	cmp	r1, r2
 8008d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d5a:	d100      	bne.n	8008d5e <memcpy+0xc>
 8008d5c:	4770      	bx	lr
 8008d5e:	b510      	push	{r4, lr}
 8008d60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d68:	4291      	cmp	r1, r2
 8008d6a:	d1f9      	bne.n	8008d60 <memcpy+0xe>
 8008d6c:	bd10      	pop	{r4, pc}

08008d6e <quorem>:
 8008d6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d72:	6903      	ldr	r3, [r0, #16]
 8008d74:	690c      	ldr	r4, [r1, #16]
 8008d76:	42a3      	cmp	r3, r4
 8008d78:	4607      	mov	r7, r0
 8008d7a:	db7e      	blt.n	8008e7a <quorem+0x10c>
 8008d7c:	3c01      	subs	r4, #1
 8008d7e:	f101 0814 	add.w	r8, r1, #20
 8008d82:	00a3      	lsls	r3, r4, #2
 8008d84:	f100 0514 	add.w	r5, r0, #20
 8008d88:	9300      	str	r3, [sp, #0]
 8008d8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d8e:	9301      	str	r3, [sp, #4]
 8008d90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008da0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008da4:	d32e      	bcc.n	8008e04 <quorem+0x96>
 8008da6:	f04f 0a00 	mov.w	sl, #0
 8008daa:	46c4      	mov	ip, r8
 8008dac:	46ae      	mov	lr, r5
 8008dae:	46d3      	mov	fp, sl
 8008db0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008db4:	b298      	uxth	r0, r3
 8008db6:	fb06 a000 	mla	r0, r6, r0, sl
 8008dba:	0c02      	lsrs	r2, r0, #16
 8008dbc:	0c1b      	lsrs	r3, r3, #16
 8008dbe:	fb06 2303 	mla	r3, r6, r3, r2
 8008dc2:	f8de 2000 	ldr.w	r2, [lr]
 8008dc6:	b280      	uxth	r0, r0
 8008dc8:	b292      	uxth	r2, r2
 8008dca:	1a12      	subs	r2, r2, r0
 8008dcc:	445a      	add	r2, fp
 8008dce:	f8de 0000 	ldr.w	r0, [lr]
 8008dd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008ddc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008de0:	b292      	uxth	r2, r2
 8008de2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008de6:	45e1      	cmp	r9, ip
 8008de8:	f84e 2b04 	str.w	r2, [lr], #4
 8008dec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008df0:	d2de      	bcs.n	8008db0 <quorem+0x42>
 8008df2:	9b00      	ldr	r3, [sp, #0]
 8008df4:	58eb      	ldr	r3, [r5, r3]
 8008df6:	b92b      	cbnz	r3, 8008e04 <quorem+0x96>
 8008df8:	9b01      	ldr	r3, [sp, #4]
 8008dfa:	3b04      	subs	r3, #4
 8008dfc:	429d      	cmp	r5, r3
 8008dfe:	461a      	mov	r2, r3
 8008e00:	d32f      	bcc.n	8008e62 <quorem+0xf4>
 8008e02:	613c      	str	r4, [r7, #16]
 8008e04:	4638      	mov	r0, r7
 8008e06:	f001 f979 	bl	800a0fc <__mcmp>
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	db25      	blt.n	8008e5a <quorem+0xec>
 8008e0e:	4629      	mov	r1, r5
 8008e10:	2000      	movs	r0, #0
 8008e12:	f858 2b04 	ldr.w	r2, [r8], #4
 8008e16:	f8d1 c000 	ldr.w	ip, [r1]
 8008e1a:	fa1f fe82 	uxth.w	lr, r2
 8008e1e:	fa1f f38c 	uxth.w	r3, ip
 8008e22:	eba3 030e 	sub.w	r3, r3, lr
 8008e26:	4403      	add	r3, r0
 8008e28:	0c12      	lsrs	r2, r2, #16
 8008e2a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008e2e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e38:	45c1      	cmp	r9, r8
 8008e3a:	f841 3b04 	str.w	r3, [r1], #4
 8008e3e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008e42:	d2e6      	bcs.n	8008e12 <quorem+0xa4>
 8008e44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e4c:	b922      	cbnz	r2, 8008e58 <quorem+0xea>
 8008e4e:	3b04      	subs	r3, #4
 8008e50:	429d      	cmp	r5, r3
 8008e52:	461a      	mov	r2, r3
 8008e54:	d30b      	bcc.n	8008e6e <quorem+0x100>
 8008e56:	613c      	str	r4, [r7, #16]
 8008e58:	3601      	adds	r6, #1
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	b003      	add	sp, #12
 8008e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e62:	6812      	ldr	r2, [r2, #0]
 8008e64:	3b04      	subs	r3, #4
 8008e66:	2a00      	cmp	r2, #0
 8008e68:	d1cb      	bne.n	8008e02 <quorem+0x94>
 8008e6a:	3c01      	subs	r4, #1
 8008e6c:	e7c6      	b.n	8008dfc <quorem+0x8e>
 8008e6e:	6812      	ldr	r2, [r2, #0]
 8008e70:	3b04      	subs	r3, #4
 8008e72:	2a00      	cmp	r2, #0
 8008e74:	d1ef      	bne.n	8008e56 <quorem+0xe8>
 8008e76:	3c01      	subs	r4, #1
 8008e78:	e7ea      	b.n	8008e50 <quorem+0xe2>
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	e7ee      	b.n	8008e5c <quorem+0xee>
	...

08008e80 <_dtoa_r>:
 8008e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e84:	69c7      	ldr	r7, [r0, #28]
 8008e86:	b099      	sub	sp, #100	@ 0x64
 8008e88:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008e8c:	ec55 4b10 	vmov	r4, r5, d0
 8008e90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008e92:	9109      	str	r1, [sp, #36]	@ 0x24
 8008e94:	4683      	mov	fp, r0
 8008e96:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008e9a:	b97f      	cbnz	r7, 8008ebc <_dtoa_r+0x3c>
 8008e9c:	2010      	movs	r0, #16
 8008e9e:	f000 fdfd 	bl	8009a9c <malloc>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	f8cb 001c 	str.w	r0, [fp, #28]
 8008ea8:	b920      	cbnz	r0, 8008eb4 <_dtoa_r+0x34>
 8008eaa:	4ba7      	ldr	r3, [pc, #668]	@ (8009148 <_dtoa_r+0x2c8>)
 8008eac:	21ef      	movs	r1, #239	@ 0xef
 8008eae:	48a7      	ldr	r0, [pc, #668]	@ (800914c <_dtoa_r+0x2cc>)
 8008eb0:	f001 fe30 	bl	800ab14 <__assert_func>
 8008eb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008eb8:	6007      	str	r7, [r0, #0]
 8008eba:	60c7      	str	r7, [r0, #12]
 8008ebc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ec0:	6819      	ldr	r1, [r3, #0]
 8008ec2:	b159      	cbz	r1, 8008edc <_dtoa_r+0x5c>
 8008ec4:	685a      	ldr	r2, [r3, #4]
 8008ec6:	604a      	str	r2, [r1, #4]
 8008ec8:	2301      	movs	r3, #1
 8008eca:	4093      	lsls	r3, r2
 8008ecc:	608b      	str	r3, [r1, #8]
 8008ece:	4658      	mov	r0, fp
 8008ed0:	f000 feda 	bl	8009c88 <_Bfree>
 8008ed4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	601a      	str	r2, [r3, #0]
 8008edc:	1e2b      	subs	r3, r5, #0
 8008ede:	bfb9      	ittee	lt
 8008ee0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008ee4:	9303      	strlt	r3, [sp, #12]
 8008ee6:	2300      	movge	r3, #0
 8008ee8:	6033      	strge	r3, [r6, #0]
 8008eea:	9f03      	ldr	r7, [sp, #12]
 8008eec:	4b98      	ldr	r3, [pc, #608]	@ (8009150 <_dtoa_r+0x2d0>)
 8008eee:	bfbc      	itt	lt
 8008ef0:	2201      	movlt	r2, #1
 8008ef2:	6032      	strlt	r2, [r6, #0]
 8008ef4:	43bb      	bics	r3, r7
 8008ef6:	d112      	bne.n	8008f1e <_dtoa_r+0x9e>
 8008ef8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008efa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008efe:	6013      	str	r3, [r2, #0]
 8008f00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f04:	4323      	orrs	r3, r4
 8008f06:	f000 854d 	beq.w	80099a4 <_dtoa_r+0xb24>
 8008f0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009164 <_dtoa_r+0x2e4>
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f000 854f 	beq.w	80099b4 <_dtoa_r+0xb34>
 8008f16:	f10a 0303 	add.w	r3, sl, #3
 8008f1a:	f000 bd49 	b.w	80099b0 <_dtoa_r+0xb30>
 8008f1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f22:	2200      	movs	r2, #0
 8008f24:	ec51 0b17 	vmov	r0, r1, d7
 8008f28:	2300      	movs	r3, #0
 8008f2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008f2e:	f7f7 fdd3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f32:	4680      	mov	r8, r0
 8008f34:	b158      	cbz	r0, 8008f4e <_dtoa_r+0xce>
 8008f36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008f38:	2301      	movs	r3, #1
 8008f3a:	6013      	str	r3, [r2, #0]
 8008f3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f3e:	b113      	cbz	r3, 8008f46 <_dtoa_r+0xc6>
 8008f40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008f42:	4b84      	ldr	r3, [pc, #528]	@ (8009154 <_dtoa_r+0x2d4>)
 8008f44:	6013      	str	r3, [r2, #0]
 8008f46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009168 <_dtoa_r+0x2e8>
 8008f4a:	f000 bd33 	b.w	80099b4 <_dtoa_r+0xb34>
 8008f4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008f52:	aa16      	add	r2, sp, #88	@ 0x58
 8008f54:	a917      	add	r1, sp, #92	@ 0x5c
 8008f56:	4658      	mov	r0, fp
 8008f58:	f001 f980 	bl	800a25c <__d2b>
 8008f5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008f60:	4681      	mov	r9, r0
 8008f62:	2e00      	cmp	r6, #0
 8008f64:	d077      	beq.n	8009056 <_dtoa_r+0x1d6>
 8008f66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008f78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008f7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008f80:	4619      	mov	r1, r3
 8008f82:	2200      	movs	r2, #0
 8008f84:	4b74      	ldr	r3, [pc, #464]	@ (8009158 <_dtoa_r+0x2d8>)
 8008f86:	f7f7 f987 	bl	8000298 <__aeabi_dsub>
 8008f8a:	a369      	add	r3, pc, #420	@ (adr r3, 8009130 <_dtoa_r+0x2b0>)
 8008f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f90:	f7f7 fb3a 	bl	8000608 <__aeabi_dmul>
 8008f94:	a368      	add	r3, pc, #416	@ (adr r3, 8009138 <_dtoa_r+0x2b8>)
 8008f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9a:	f7f7 f97f 	bl	800029c <__adddf3>
 8008f9e:	4604      	mov	r4, r0
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	460d      	mov	r5, r1
 8008fa4:	f7f7 fac6 	bl	8000534 <__aeabi_i2d>
 8008fa8:	a365      	add	r3, pc, #404	@ (adr r3, 8009140 <_dtoa_r+0x2c0>)
 8008faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fae:	f7f7 fb2b 	bl	8000608 <__aeabi_dmul>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	4629      	mov	r1, r5
 8008fba:	f7f7 f96f 	bl	800029c <__adddf3>
 8008fbe:	4604      	mov	r4, r0
 8008fc0:	460d      	mov	r5, r1
 8008fc2:	f7f7 fdd1 	bl	8000b68 <__aeabi_d2iz>
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	4607      	mov	r7, r0
 8008fca:	2300      	movs	r3, #0
 8008fcc:	4620      	mov	r0, r4
 8008fce:	4629      	mov	r1, r5
 8008fd0:	f7f7 fd8c 	bl	8000aec <__aeabi_dcmplt>
 8008fd4:	b140      	cbz	r0, 8008fe8 <_dtoa_r+0x168>
 8008fd6:	4638      	mov	r0, r7
 8008fd8:	f7f7 faac 	bl	8000534 <__aeabi_i2d>
 8008fdc:	4622      	mov	r2, r4
 8008fde:	462b      	mov	r3, r5
 8008fe0:	f7f7 fd7a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fe4:	b900      	cbnz	r0, 8008fe8 <_dtoa_r+0x168>
 8008fe6:	3f01      	subs	r7, #1
 8008fe8:	2f16      	cmp	r7, #22
 8008fea:	d851      	bhi.n	8009090 <_dtoa_r+0x210>
 8008fec:	4b5b      	ldr	r3, [pc, #364]	@ (800915c <_dtoa_r+0x2dc>)
 8008fee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ffa:	f7f7 fd77 	bl	8000aec <__aeabi_dcmplt>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	d048      	beq.n	8009094 <_dtoa_r+0x214>
 8009002:	3f01      	subs	r7, #1
 8009004:	2300      	movs	r3, #0
 8009006:	9312      	str	r3, [sp, #72]	@ 0x48
 8009008:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800900a:	1b9b      	subs	r3, r3, r6
 800900c:	1e5a      	subs	r2, r3, #1
 800900e:	bf44      	itt	mi
 8009010:	f1c3 0801 	rsbmi	r8, r3, #1
 8009014:	2300      	movmi	r3, #0
 8009016:	9208      	str	r2, [sp, #32]
 8009018:	bf54      	ite	pl
 800901a:	f04f 0800 	movpl.w	r8, #0
 800901e:	9308      	strmi	r3, [sp, #32]
 8009020:	2f00      	cmp	r7, #0
 8009022:	db39      	blt.n	8009098 <_dtoa_r+0x218>
 8009024:	9b08      	ldr	r3, [sp, #32]
 8009026:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009028:	443b      	add	r3, r7
 800902a:	9308      	str	r3, [sp, #32]
 800902c:	2300      	movs	r3, #0
 800902e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009032:	2b09      	cmp	r3, #9
 8009034:	d864      	bhi.n	8009100 <_dtoa_r+0x280>
 8009036:	2b05      	cmp	r3, #5
 8009038:	bfc4      	itt	gt
 800903a:	3b04      	subgt	r3, #4
 800903c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800903e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009040:	f1a3 0302 	sub.w	r3, r3, #2
 8009044:	bfcc      	ite	gt
 8009046:	2400      	movgt	r4, #0
 8009048:	2401      	movle	r4, #1
 800904a:	2b03      	cmp	r3, #3
 800904c:	d863      	bhi.n	8009116 <_dtoa_r+0x296>
 800904e:	e8df f003 	tbb	[pc, r3]
 8009052:	372a      	.short	0x372a
 8009054:	5535      	.short	0x5535
 8009056:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800905a:	441e      	add	r6, r3
 800905c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009060:	2b20      	cmp	r3, #32
 8009062:	bfc1      	itttt	gt
 8009064:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009068:	409f      	lslgt	r7, r3
 800906a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800906e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009072:	bfd6      	itet	le
 8009074:	f1c3 0320 	rsble	r3, r3, #32
 8009078:	ea47 0003 	orrgt.w	r0, r7, r3
 800907c:	fa04 f003 	lslle.w	r0, r4, r3
 8009080:	f7f7 fa48 	bl	8000514 <__aeabi_ui2d>
 8009084:	2201      	movs	r2, #1
 8009086:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800908a:	3e01      	subs	r6, #1
 800908c:	9214      	str	r2, [sp, #80]	@ 0x50
 800908e:	e777      	b.n	8008f80 <_dtoa_r+0x100>
 8009090:	2301      	movs	r3, #1
 8009092:	e7b8      	b.n	8009006 <_dtoa_r+0x186>
 8009094:	9012      	str	r0, [sp, #72]	@ 0x48
 8009096:	e7b7      	b.n	8009008 <_dtoa_r+0x188>
 8009098:	427b      	negs	r3, r7
 800909a:	930a      	str	r3, [sp, #40]	@ 0x28
 800909c:	2300      	movs	r3, #0
 800909e:	eba8 0807 	sub.w	r8, r8, r7
 80090a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80090a4:	e7c4      	b.n	8009030 <_dtoa_r+0x1b0>
 80090a6:	2300      	movs	r3, #0
 80090a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	dc35      	bgt.n	800911c <_dtoa_r+0x29c>
 80090b0:	2301      	movs	r3, #1
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	9307      	str	r3, [sp, #28]
 80090b6:	461a      	mov	r2, r3
 80090b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80090ba:	e00b      	b.n	80090d4 <_dtoa_r+0x254>
 80090bc:	2301      	movs	r3, #1
 80090be:	e7f3      	b.n	80090a8 <_dtoa_r+0x228>
 80090c0:	2300      	movs	r3, #0
 80090c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090c6:	18fb      	adds	r3, r7, r3
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	3301      	adds	r3, #1
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	9307      	str	r3, [sp, #28]
 80090d0:	bfb8      	it	lt
 80090d2:	2301      	movlt	r3, #1
 80090d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80090d8:	2100      	movs	r1, #0
 80090da:	2204      	movs	r2, #4
 80090dc:	f102 0514 	add.w	r5, r2, #20
 80090e0:	429d      	cmp	r5, r3
 80090e2:	d91f      	bls.n	8009124 <_dtoa_r+0x2a4>
 80090e4:	6041      	str	r1, [r0, #4]
 80090e6:	4658      	mov	r0, fp
 80090e8:	f000 fd8e 	bl	8009c08 <_Balloc>
 80090ec:	4682      	mov	sl, r0
 80090ee:	2800      	cmp	r0, #0
 80090f0:	d13c      	bne.n	800916c <_dtoa_r+0x2ec>
 80090f2:	4b1b      	ldr	r3, [pc, #108]	@ (8009160 <_dtoa_r+0x2e0>)
 80090f4:	4602      	mov	r2, r0
 80090f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80090fa:	e6d8      	b.n	8008eae <_dtoa_r+0x2e>
 80090fc:	2301      	movs	r3, #1
 80090fe:	e7e0      	b.n	80090c2 <_dtoa_r+0x242>
 8009100:	2401      	movs	r4, #1
 8009102:	2300      	movs	r3, #0
 8009104:	9309      	str	r3, [sp, #36]	@ 0x24
 8009106:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009108:	f04f 33ff 	mov.w	r3, #4294967295
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	9307      	str	r3, [sp, #28]
 8009110:	2200      	movs	r2, #0
 8009112:	2312      	movs	r3, #18
 8009114:	e7d0      	b.n	80090b8 <_dtoa_r+0x238>
 8009116:	2301      	movs	r3, #1
 8009118:	930b      	str	r3, [sp, #44]	@ 0x2c
 800911a:	e7f5      	b.n	8009108 <_dtoa_r+0x288>
 800911c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	9307      	str	r3, [sp, #28]
 8009122:	e7d7      	b.n	80090d4 <_dtoa_r+0x254>
 8009124:	3101      	adds	r1, #1
 8009126:	0052      	lsls	r2, r2, #1
 8009128:	e7d8      	b.n	80090dc <_dtoa_r+0x25c>
 800912a:	bf00      	nop
 800912c:	f3af 8000 	nop.w
 8009130:	636f4361 	.word	0x636f4361
 8009134:	3fd287a7 	.word	0x3fd287a7
 8009138:	8b60c8b3 	.word	0x8b60c8b3
 800913c:	3fc68a28 	.word	0x3fc68a28
 8009140:	509f79fb 	.word	0x509f79fb
 8009144:	3fd34413 	.word	0x3fd34413
 8009148:	0800c485 	.word	0x0800c485
 800914c:	0800c49c 	.word	0x0800c49c
 8009150:	7ff00000 	.word	0x7ff00000
 8009154:	0800c455 	.word	0x0800c455
 8009158:	3ff80000 	.word	0x3ff80000
 800915c:	0800c598 	.word	0x0800c598
 8009160:	0800c4f4 	.word	0x0800c4f4
 8009164:	0800c481 	.word	0x0800c481
 8009168:	0800c454 	.word	0x0800c454
 800916c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009170:	6018      	str	r0, [r3, #0]
 8009172:	9b07      	ldr	r3, [sp, #28]
 8009174:	2b0e      	cmp	r3, #14
 8009176:	f200 80a4 	bhi.w	80092c2 <_dtoa_r+0x442>
 800917a:	2c00      	cmp	r4, #0
 800917c:	f000 80a1 	beq.w	80092c2 <_dtoa_r+0x442>
 8009180:	2f00      	cmp	r7, #0
 8009182:	dd33      	ble.n	80091ec <_dtoa_r+0x36c>
 8009184:	4bad      	ldr	r3, [pc, #692]	@ (800943c <_dtoa_r+0x5bc>)
 8009186:	f007 020f 	and.w	r2, r7, #15
 800918a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800918e:	ed93 7b00 	vldr	d7, [r3]
 8009192:	05f8      	lsls	r0, r7, #23
 8009194:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009198:	ea4f 1427 	mov.w	r4, r7, asr #4
 800919c:	d516      	bpl.n	80091cc <_dtoa_r+0x34c>
 800919e:	4ba8      	ldr	r3, [pc, #672]	@ (8009440 <_dtoa_r+0x5c0>)
 80091a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80091a8:	f7f7 fb58 	bl	800085c <__aeabi_ddiv>
 80091ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091b0:	f004 040f 	and.w	r4, r4, #15
 80091b4:	2603      	movs	r6, #3
 80091b6:	4da2      	ldr	r5, [pc, #648]	@ (8009440 <_dtoa_r+0x5c0>)
 80091b8:	b954      	cbnz	r4, 80091d0 <_dtoa_r+0x350>
 80091ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091c2:	f7f7 fb4b 	bl	800085c <__aeabi_ddiv>
 80091c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091ca:	e028      	b.n	800921e <_dtoa_r+0x39e>
 80091cc:	2602      	movs	r6, #2
 80091ce:	e7f2      	b.n	80091b6 <_dtoa_r+0x336>
 80091d0:	07e1      	lsls	r1, r4, #31
 80091d2:	d508      	bpl.n	80091e6 <_dtoa_r+0x366>
 80091d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80091dc:	f7f7 fa14 	bl	8000608 <__aeabi_dmul>
 80091e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091e4:	3601      	adds	r6, #1
 80091e6:	1064      	asrs	r4, r4, #1
 80091e8:	3508      	adds	r5, #8
 80091ea:	e7e5      	b.n	80091b8 <_dtoa_r+0x338>
 80091ec:	f000 80d2 	beq.w	8009394 <_dtoa_r+0x514>
 80091f0:	427c      	negs	r4, r7
 80091f2:	4b92      	ldr	r3, [pc, #584]	@ (800943c <_dtoa_r+0x5bc>)
 80091f4:	4d92      	ldr	r5, [pc, #584]	@ (8009440 <_dtoa_r+0x5c0>)
 80091f6:	f004 020f 	and.w	r2, r4, #15
 80091fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009202:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009206:	f7f7 f9ff 	bl	8000608 <__aeabi_dmul>
 800920a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800920e:	1124      	asrs	r4, r4, #4
 8009210:	2300      	movs	r3, #0
 8009212:	2602      	movs	r6, #2
 8009214:	2c00      	cmp	r4, #0
 8009216:	f040 80b2 	bne.w	800937e <_dtoa_r+0x4fe>
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1d3      	bne.n	80091c6 <_dtoa_r+0x346>
 800921e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009220:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009224:	2b00      	cmp	r3, #0
 8009226:	f000 80b7 	beq.w	8009398 <_dtoa_r+0x518>
 800922a:	4b86      	ldr	r3, [pc, #536]	@ (8009444 <_dtoa_r+0x5c4>)
 800922c:	2200      	movs	r2, #0
 800922e:	4620      	mov	r0, r4
 8009230:	4629      	mov	r1, r5
 8009232:	f7f7 fc5b 	bl	8000aec <__aeabi_dcmplt>
 8009236:	2800      	cmp	r0, #0
 8009238:	f000 80ae 	beq.w	8009398 <_dtoa_r+0x518>
 800923c:	9b07      	ldr	r3, [sp, #28]
 800923e:	2b00      	cmp	r3, #0
 8009240:	f000 80aa 	beq.w	8009398 <_dtoa_r+0x518>
 8009244:	9b00      	ldr	r3, [sp, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	dd37      	ble.n	80092ba <_dtoa_r+0x43a>
 800924a:	1e7b      	subs	r3, r7, #1
 800924c:	9304      	str	r3, [sp, #16]
 800924e:	4620      	mov	r0, r4
 8009250:	4b7d      	ldr	r3, [pc, #500]	@ (8009448 <_dtoa_r+0x5c8>)
 8009252:	2200      	movs	r2, #0
 8009254:	4629      	mov	r1, r5
 8009256:	f7f7 f9d7 	bl	8000608 <__aeabi_dmul>
 800925a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800925e:	9c00      	ldr	r4, [sp, #0]
 8009260:	3601      	adds	r6, #1
 8009262:	4630      	mov	r0, r6
 8009264:	f7f7 f966 	bl	8000534 <__aeabi_i2d>
 8009268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800926c:	f7f7 f9cc 	bl	8000608 <__aeabi_dmul>
 8009270:	4b76      	ldr	r3, [pc, #472]	@ (800944c <_dtoa_r+0x5cc>)
 8009272:	2200      	movs	r2, #0
 8009274:	f7f7 f812 	bl	800029c <__adddf3>
 8009278:	4605      	mov	r5, r0
 800927a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800927e:	2c00      	cmp	r4, #0
 8009280:	f040 808d 	bne.w	800939e <_dtoa_r+0x51e>
 8009284:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009288:	4b71      	ldr	r3, [pc, #452]	@ (8009450 <_dtoa_r+0x5d0>)
 800928a:	2200      	movs	r2, #0
 800928c:	f7f7 f804 	bl	8000298 <__aeabi_dsub>
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009298:	462a      	mov	r2, r5
 800929a:	4633      	mov	r3, r6
 800929c:	f7f7 fc44 	bl	8000b28 <__aeabi_dcmpgt>
 80092a0:	2800      	cmp	r0, #0
 80092a2:	f040 828b 	bne.w	80097bc <_dtoa_r+0x93c>
 80092a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092aa:	462a      	mov	r2, r5
 80092ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80092b0:	f7f7 fc1c 	bl	8000aec <__aeabi_dcmplt>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	f040 8128 	bne.w	800950a <_dtoa_r+0x68a>
 80092ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80092be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80092c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f2c0 815a 	blt.w	800957e <_dtoa_r+0x6fe>
 80092ca:	2f0e      	cmp	r7, #14
 80092cc:	f300 8157 	bgt.w	800957e <_dtoa_r+0x6fe>
 80092d0:	4b5a      	ldr	r3, [pc, #360]	@ (800943c <_dtoa_r+0x5bc>)
 80092d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80092d6:	ed93 7b00 	vldr	d7, [r3]
 80092da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092dc:	2b00      	cmp	r3, #0
 80092de:	ed8d 7b00 	vstr	d7, [sp]
 80092e2:	da03      	bge.n	80092ec <_dtoa_r+0x46c>
 80092e4:	9b07      	ldr	r3, [sp, #28]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	f340 8101 	ble.w	80094ee <_dtoa_r+0x66e>
 80092ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80092f0:	4656      	mov	r6, sl
 80092f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092f6:	4620      	mov	r0, r4
 80092f8:	4629      	mov	r1, r5
 80092fa:	f7f7 faaf 	bl	800085c <__aeabi_ddiv>
 80092fe:	f7f7 fc33 	bl	8000b68 <__aeabi_d2iz>
 8009302:	4680      	mov	r8, r0
 8009304:	f7f7 f916 	bl	8000534 <__aeabi_i2d>
 8009308:	e9dd 2300 	ldrd	r2, r3, [sp]
 800930c:	f7f7 f97c 	bl	8000608 <__aeabi_dmul>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	4620      	mov	r0, r4
 8009316:	4629      	mov	r1, r5
 8009318:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800931c:	f7f6 ffbc 	bl	8000298 <__aeabi_dsub>
 8009320:	f806 4b01 	strb.w	r4, [r6], #1
 8009324:	9d07      	ldr	r5, [sp, #28]
 8009326:	eba6 040a 	sub.w	r4, r6, sl
 800932a:	42a5      	cmp	r5, r4
 800932c:	4602      	mov	r2, r0
 800932e:	460b      	mov	r3, r1
 8009330:	f040 8117 	bne.w	8009562 <_dtoa_r+0x6e2>
 8009334:	f7f6 ffb2 	bl	800029c <__adddf3>
 8009338:	e9dd 2300 	ldrd	r2, r3, [sp]
 800933c:	4604      	mov	r4, r0
 800933e:	460d      	mov	r5, r1
 8009340:	f7f7 fbf2 	bl	8000b28 <__aeabi_dcmpgt>
 8009344:	2800      	cmp	r0, #0
 8009346:	f040 80f9 	bne.w	800953c <_dtoa_r+0x6bc>
 800934a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800934e:	4620      	mov	r0, r4
 8009350:	4629      	mov	r1, r5
 8009352:	f7f7 fbc1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009356:	b118      	cbz	r0, 8009360 <_dtoa_r+0x4e0>
 8009358:	f018 0f01 	tst.w	r8, #1
 800935c:	f040 80ee 	bne.w	800953c <_dtoa_r+0x6bc>
 8009360:	4649      	mov	r1, r9
 8009362:	4658      	mov	r0, fp
 8009364:	f000 fc90 	bl	8009c88 <_Bfree>
 8009368:	2300      	movs	r3, #0
 800936a:	7033      	strb	r3, [r6, #0]
 800936c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800936e:	3701      	adds	r7, #1
 8009370:	601f      	str	r7, [r3, #0]
 8009372:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009374:	2b00      	cmp	r3, #0
 8009376:	f000 831d 	beq.w	80099b4 <_dtoa_r+0xb34>
 800937a:	601e      	str	r6, [r3, #0]
 800937c:	e31a      	b.n	80099b4 <_dtoa_r+0xb34>
 800937e:	07e2      	lsls	r2, r4, #31
 8009380:	d505      	bpl.n	800938e <_dtoa_r+0x50e>
 8009382:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009386:	f7f7 f93f 	bl	8000608 <__aeabi_dmul>
 800938a:	3601      	adds	r6, #1
 800938c:	2301      	movs	r3, #1
 800938e:	1064      	asrs	r4, r4, #1
 8009390:	3508      	adds	r5, #8
 8009392:	e73f      	b.n	8009214 <_dtoa_r+0x394>
 8009394:	2602      	movs	r6, #2
 8009396:	e742      	b.n	800921e <_dtoa_r+0x39e>
 8009398:	9c07      	ldr	r4, [sp, #28]
 800939a:	9704      	str	r7, [sp, #16]
 800939c:	e761      	b.n	8009262 <_dtoa_r+0x3e2>
 800939e:	4b27      	ldr	r3, [pc, #156]	@ (800943c <_dtoa_r+0x5bc>)
 80093a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80093a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80093a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80093aa:	4454      	add	r4, sl
 80093ac:	2900      	cmp	r1, #0
 80093ae:	d053      	beq.n	8009458 <_dtoa_r+0x5d8>
 80093b0:	4928      	ldr	r1, [pc, #160]	@ (8009454 <_dtoa_r+0x5d4>)
 80093b2:	2000      	movs	r0, #0
 80093b4:	f7f7 fa52 	bl	800085c <__aeabi_ddiv>
 80093b8:	4633      	mov	r3, r6
 80093ba:	462a      	mov	r2, r5
 80093bc:	f7f6 ff6c 	bl	8000298 <__aeabi_dsub>
 80093c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80093c4:	4656      	mov	r6, sl
 80093c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093ca:	f7f7 fbcd 	bl	8000b68 <__aeabi_d2iz>
 80093ce:	4605      	mov	r5, r0
 80093d0:	f7f7 f8b0 	bl	8000534 <__aeabi_i2d>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093dc:	f7f6 ff5c 	bl	8000298 <__aeabi_dsub>
 80093e0:	3530      	adds	r5, #48	@ 0x30
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093ea:	f806 5b01 	strb.w	r5, [r6], #1
 80093ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80093f2:	f7f7 fb7b 	bl	8000aec <__aeabi_dcmplt>
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d171      	bne.n	80094de <_dtoa_r+0x65e>
 80093fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093fe:	4911      	ldr	r1, [pc, #68]	@ (8009444 <_dtoa_r+0x5c4>)
 8009400:	2000      	movs	r0, #0
 8009402:	f7f6 ff49 	bl	8000298 <__aeabi_dsub>
 8009406:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800940a:	f7f7 fb6f 	bl	8000aec <__aeabi_dcmplt>
 800940e:	2800      	cmp	r0, #0
 8009410:	f040 8095 	bne.w	800953e <_dtoa_r+0x6be>
 8009414:	42a6      	cmp	r6, r4
 8009416:	f43f af50 	beq.w	80092ba <_dtoa_r+0x43a>
 800941a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800941e:	4b0a      	ldr	r3, [pc, #40]	@ (8009448 <_dtoa_r+0x5c8>)
 8009420:	2200      	movs	r2, #0
 8009422:	f7f7 f8f1 	bl	8000608 <__aeabi_dmul>
 8009426:	4b08      	ldr	r3, [pc, #32]	@ (8009448 <_dtoa_r+0x5c8>)
 8009428:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800942c:	2200      	movs	r2, #0
 800942e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009432:	f7f7 f8e9 	bl	8000608 <__aeabi_dmul>
 8009436:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800943a:	e7c4      	b.n	80093c6 <_dtoa_r+0x546>
 800943c:	0800c598 	.word	0x0800c598
 8009440:	0800c570 	.word	0x0800c570
 8009444:	3ff00000 	.word	0x3ff00000
 8009448:	40240000 	.word	0x40240000
 800944c:	401c0000 	.word	0x401c0000
 8009450:	40140000 	.word	0x40140000
 8009454:	3fe00000 	.word	0x3fe00000
 8009458:	4631      	mov	r1, r6
 800945a:	4628      	mov	r0, r5
 800945c:	f7f7 f8d4 	bl	8000608 <__aeabi_dmul>
 8009460:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009464:	9415      	str	r4, [sp, #84]	@ 0x54
 8009466:	4656      	mov	r6, sl
 8009468:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800946c:	f7f7 fb7c 	bl	8000b68 <__aeabi_d2iz>
 8009470:	4605      	mov	r5, r0
 8009472:	f7f7 f85f 	bl	8000534 <__aeabi_i2d>
 8009476:	4602      	mov	r2, r0
 8009478:	460b      	mov	r3, r1
 800947a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800947e:	f7f6 ff0b 	bl	8000298 <__aeabi_dsub>
 8009482:	3530      	adds	r5, #48	@ 0x30
 8009484:	f806 5b01 	strb.w	r5, [r6], #1
 8009488:	4602      	mov	r2, r0
 800948a:	460b      	mov	r3, r1
 800948c:	42a6      	cmp	r6, r4
 800948e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009492:	f04f 0200 	mov.w	r2, #0
 8009496:	d124      	bne.n	80094e2 <_dtoa_r+0x662>
 8009498:	4bac      	ldr	r3, [pc, #688]	@ (800974c <_dtoa_r+0x8cc>)
 800949a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800949e:	f7f6 fefd 	bl	800029c <__adddf3>
 80094a2:	4602      	mov	r2, r0
 80094a4:	460b      	mov	r3, r1
 80094a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094aa:	f7f7 fb3d 	bl	8000b28 <__aeabi_dcmpgt>
 80094ae:	2800      	cmp	r0, #0
 80094b0:	d145      	bne.n	800953e <_dtoa_r+0x6be>
 80094b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80094b6:	49a5      	ldr	r1, [pc, #660]	@ (800974c <_dtoa_r+0x8cc>)
 80094b8:	2000      	movs	r0, #0
 80094ba:	f7f6 feed 	bl	8000298 <__aeabi_dsub>
 80094be:	4602      	mov	r2, r0
 80094c0:	460b      	mov	r3, r1
 80094c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094c6:	f7f7 fb11 	bl	8000aec <__aeabi_dcmplt>
 80094ca:	2800      	cmp	r0, #0
 80094cc:	f43f aef5 	beq.w	80092ba <_dtoa_r+0x43a>
 80094d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80094d2:	1e73      	subs	r3, r6, #1
 80094d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80094d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80094da:	2b30      	cmp	r3, #48	@ 0x30
 80094dc:	d0f8      	beq.n	80094d0 <_dtoa_r+0x650>
 80094de:	9f04      	ldr	r7, [sp, #16]
 80094e0:	e73e      	b.n	8009360 <_dtoa_r+0x4e0>
 80094e2:	4b9b      	ldr	r3, [pc, #620]	@ (8009750 <_dtoa_r+0x8d0>)
 80094e4:	f7f7 f890 	bl	8000608 <__aeabi_dmul>
 80094e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094ec:	e7bc      	b.n	8009468 <_dtoa_r+0x5e8>
 80094ee:	d10c      	bne.n	800950a <_dtoa_r+0x68a>
 80094f0:	4b98      	ldr	r3, [pc, #608]	@ (8009754 <_dtoa_r+0x8d4>)
 80094f2:	2200      	movs	r2, #0
 80094f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094f8:	f7f7 f886 	bl	8000608 <__aeabi_dmul>
 80094fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009500:	f7f7 fb08 	bl	8000b14 <__aeabi_dcmpge>
 8009504:	2800      	cmp	r0, #0
 8009506:	f000 8157 	beq.w	80097b8 <_dtoa_r+0x938>
 800950a:	2400      	movs	r4, #0
 800950c:	4625      	mov	r5, r4
 800950e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009510:	43db      	mvns	r3, r3
 8009512:	9304      	str	r3, [sp, #16]
 8009514:	4656      	mov	r6, sl
 8009516:	2700      	movs	r7, #0
 8009518:	4621      	mov	r1, r4
 800951a:	4658      	mov	r0, fp
 800951c:	f000 fbb4 	bl	8009c88 <_Bfree>
 8009520:	2d00      	cmp	r5, #0
 8009522:	d0dc      	beq.n	80094de <_dtoa_r+0x65e>
 8009524:	b12f      	cbz	r7, 8009532 <_dtoa_r+0x6b2>
 8009526:	42af      	cmp	r7, r5
 8009528:	d003      	beq.n	8009532 <_dtoa_r+0x6b2>
 800952a:	4639      	mov	r1, r7
 800952c:	4658      	mov	r0, fp
 800952e:	f000 fbab 	bl	8009c88 <_Bfree>
 8009532:	4629      	mov	r1, r5
 8009534:	4658      	mov	r0, fp
 8009536:	f000 fba7 	bl	8009c88 <_Bfree>
 800953a:	e7d0      	b.n	80094de <_dtoa_r+0x65e>
 800953c:	9704      	str	r7, [sp, #16]
 800953e:	4633      	mov	r3, r6
 8009540:	461e      	mov	r6, r3
 8009542:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009546:	2a39      	cmp	r2, #57	@ 0x39
 8009548:	d107      	bne.n	800955a <_dtoa_r+0x6da>
 800954a:	459a      	cmp	sl, r3
 800954c:	d1f8      	bne.n	8009540 <_dtoa_r+0x6c0>
 800954e:	9a04      	ldr	r2, [sp, #16]
 8009550:	3201      	adds	r2, #1
 8009552:	9204      	str	r2, [sp, #16]
 8009554:	2230      	movs	r2, #48	@ 0x30
 8009556:	f88a 2000 	strb.w	r2, [sl]
 800955a:	781a      	ldrb	r2, [r3, #0]
 800955c:	3201      	adds	r2, #1
 800955e:	701a      	strb	r2, [r3, #0]
 8009560:	e7bd      	b.n	80094de <_dtoa_r+0x65e>
 8009562:	4b7b      	ldr	r3, [pc, #492]	@ (8009750 <_dtoa_r+0x8d0>)
 8009564:	2200      	movs	r2, #0
 8009566:	f7f7 f84f 	bl	8000608 <__aeabi_dmul>
 800956a:	2200      	movs	r2, #0
 800956c:	2300      	movs	r3, #0
 800956e:	4604      	mov	r4, r0
 8009570:	460d      	mov	r5, r1
 8009572:	f7f7 fab1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009576:	2800      	cmp	r0, #0
 8009578:	f43f aebb 	beq.w	80092f2 <_dtoa_r+0x472>
 800957c:	e6f0      	b.n	8009360 <_dtoa_r+0x4e0>
 800957e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009580:	2a00      	cmp	r2, #0
 8009582:	f000 80db 	beq.w	800973c <_dtoa_r+0x8bc>
 8009586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009588:	2a01      	cmp	r2, #1
 800958a:	f300 80bf 	bgt.w	800970c <_dtoa_r+0x88c>
 800958e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009590:	2a00      	cmp	r2, #0
 8009592:	f000 80b7 	beq.w	8009704 <_dtoa_r+0x884>
 8009596:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800959a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800959c:	4646      	mov	r6, r8
 800959e:	9a08      	ldr	r2, [sp, #32]
 80095a0:	2101      	movs	r1, #1
 80095a2:	441a      	add	r2, r3
 80095a4:	4658      	mov	r0, fp
 80095a6:	4498      	add	r8, r3
 80095a8:	9208      	str	r2, [sp, #32]
 80095aa:	f000 fc21 	bl	8009df0 <__i2b>
 80095ae:	4605      	mov	r5, r0
 80095b0:	b15e      	cbz	r6, 80095ca <_dtoa_r+0x74a>
 80095b2:	9b08      	ldr	r3, [sp, #32]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	dd08      	ble.n	80095ca <_dtoa_r+0x74a>
 80095b8:	42b3      	cmp	r3, r6
 80095ba:	9a08      	ldr	r2, [sp, #32]
 80095bc:	bfa8      	it	ge
 80095be:	4633      	movge	r3, r6
 80095c0:	eba8 0803 	sub.w	r8, r8, r3
 80095c4:	1af6      	subs	r6, r6, r3
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	9308      	str	r3, [sp, #32]
 80095ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095cc:	b1f3      	cbz	r3, 800960c <_dtoa_r+0x78c>
 80095ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f000 80b7 	beq.w	8009744 <_dtoa_r+0x8c4>
 80095d6:	b18c      	cbz	r4, 80095fc <_dtoa_r+0x77c>
 80095d8:	4629      	mov	r1, r5
 80095da:	4622      	mov	r2, r4
 80095dc:	4658      	mov	r0, fp
 80095de:	f000 fcc7 	bl	8009f70 <__pow5mult>
 80095e2:	464a      	mov	r2, r9
 80095e4:	4601      	mov	r1, r0
 80095e6:	4605      	mov	r5, r0
 80095e8:	4658      	mov	r0, fp
 80095ea:	f000 fc17 	bl	8009e1c <__multiply>
 80095ee:	4649      	mov	r1, r9
 80095f0:	9004      	str	r0, [sp, #16]
 80095f2:	4658      	mov	r0, fp
 80095f4:	f000 fb48 	bl	8009c88 <_Bfree>
 80095f8:	9b04      	ldr	r3, [sp, #16]
 80095fa:	4699      	mov	r9, r3
 80095fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095fe:	1b1a      	subs	r2, r3, r4
 8009600:	d004      	beq.n	800960c <_dtoa_r+0x78c>
 8009602:	4649      	mov	r1, r9
 8009604:	4658      	mov	r0, fp
 8009606:	f000 fcb3 	bl	8009f70 <__pow5mult>
 800960a:	4681      	mov	r9, r0
 800960c:	2101      	movs	r1, #1
 800960e:	4658      	mov	r0, fp
 8009610:	f000 fbee 	bl	8009df0 <__i2b>
 8009614:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009616:	4604      	mov	r4, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 81cf 	beq.w	80099bc <_dtoa_r+0xb3c>
 800961e:	461a      	mov	r2, r3
 8009620:	4601      	mov	r1, r0
 8009622:	4658      	mov	r0, fp
 8009624:	f000 fca4 	bl	8009f70 <__pow5mult>
 8009628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800962a:	2b01      	cmp	r3, #1
 800962c:	4604      	mov	r4, r0
 800962e:	f300 8095 	bgt.w	800975c <_dtoa_r+0x8dc>
 8009632:	9b02      	ldr	r3, [sp, #8]
 8009634:	2b00      	cmp	r3, #0
 8009636:	f040 8087 	bne.w	8009748 <_dtoa_r+0x8c8>
 800963a:	9b03      	ldr	r3, [sp, #12]
 800963c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009640:	2b00      	cmp	r3, #0
 8009642:	f040 8089 	bne.w	8009758 <_dtoa_r+0x8d8>
 8009646:	9b03      	ldr	r3, [sp, #12]
 8009648:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800964c:	0d1b      	lsrs	r3, r3, #20
 800964e:	051b      	lsls	r3, r3, #20
 8009650:	b12b      	cbz	r3, 800965e <_dtoa_r+0x7de>
 8009652:	9b08      	ldr	r3, [sp, #32]
 8009654:	3301      	adds	r3, #1
 8009656:	9308      	str	r3, [sp, #32]
 8009658:	f108 0801 	add.w	r8, r8, #1
 800965c:	2301      	movs	r3, #1
 800965e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009660:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009662:	2b00      	cmp	r3, #0
 8009664:	f000 81b0 	beq.w	80099c8 <_dtoa_r+0xb48>
 8009668:	6923      	ldr	r3, [r4, #16]
 800966a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800966e:	6918      	ldr	r0, [r3, #16]
 8009670:	f000 fb72 	bl	8009d58 <__hi0bits>
 8009674:	f1c0 0020 	rsb	r0, r0, #32
 8009678:	9b08      	ldr	r3, [sp, #32]
 800967a:	4418      	add	r0, r3
 800967c:	f010 001f 	ands.w	r0, r0, #31
 8009680:	d077      	beq.n	8009772 <_dtoa_r+0x8f2>
 8009682:	f1c0 0320 	rsb	r3, r0, #32
 8009686:	2b04      	cmp	r3, #4
 8009688:	dd6b      	ble.n	8009762 <_dtoa_r+0x8e2>
 800968a:	9b08      	ldr	r3, [sp, #32]
 800968c:	f1c0 001c 	rsb	r0, r0, #28
 8009690:	4403      	add	r3, r0
 8009692:	4480      	add	r8, r0
 8009694:	4406      	add	r6, r0
 8009696:	9308      	str	r3, [sp, #32]
 8009698:	f1b8 0f00 	cmp.w	r8, #0
 800969c:	dd05      	ble.n	80096aa <_dtoa_r+0x82a>
 800969e:	4649      	mov	r1, r9
 80096a0:	4642      	mov	r2, r8
 80096a2:	4658      	mov	r0, fp
 80096a4:	f000 fcbe 	bl	800a024 <__lshift>
 80096a8:	4681      	mov	r9, r0
 80096aa:	9b08      	ldr	r3, [sp, #32]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	dd05      	ble.n	80096bc <_dtoa_r+0x83c>
 80096b0:	4621      	mov	r1, r4
 80096b2:	461a      	mov	r2, r3
 80096b4:	4658      	mov	r0, fp
 80096b6:	f000 fcb5 	bl	800a024 <__lshift>
 80096ba:	4604      	mov	r4, r0
 80096bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d059      	beq.n	8009776 <_dtoa_r+0x8f6>
 80096c2:	4621      	mov	r1, r4
 80096c4:	4648      	mov	r0, r9
 80096c6:	f000 fd19 	bl	800a0fc <__mcmp>
 80096ca:	2800      	cmp	r0, #0
 80096cc:	da53      	bge.n	8009776 <_dtoa_r+0x8f6>
 80096ce:	1e7b      	subs	r3, r7, #1
 80096d0:	9304      	str	r3, [sp, #16]
 80096d2:	4649      	mov	r1, r9
 80096d4:	2300      	movs	r3, #0
 80096d6:	220a      	movs	r2, #10
 80096d8:	4658      	mov	r0, fp
 80096da:	f000 faf7 	bl	8009ccc <__multadd>
 80096de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096e0:	4681      	mov	r9, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	f000 8172 	beq.w	80099cc <_dtoa_r+0xb4c>
 80096e8:	2300      	movs	r3, #0
 80096ea:	4629      	mov	r1, r5
 80096ec:	220a      	movs	r2, #10
 80096ee:	4658      	mov	r0, fp
 80096f0:	f000 faec 	bl	8009ccc <__multadd>
 80096f4:	9b00      	ldr	r3, [sp, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	4605      	mov	r5, r0
 80096fa:	dc67      	bgt.n	80097cc <_dtoa_r+0x94c>
 80096fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096fe:	2b02      	cmp	r3, #2
 8009700:	dc41      	bgt.n	8009786 <_dtoa_r+0x906>
 8009702:	e063      	b.n	80097cc <_dtoa_r+0x94c>
 8009704:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009706:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800970a:	e746      	b.n	800959a <_dtoa_r+0x71a>
 800970c:	9b07      	ldr	r3, [sp, #28]
 800970e:	1e5c      	subs	r4, r3, #1
 8009710:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009712:	42a3      	cmp	r3, r4
 8009714:	bfbf      	itttt	lt
 8009716:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009718:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800971a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800971c:	1ae3      	sublt	r3, r4, r3
 800971e:	bfb4      	ite	lt
 8009720:	18d2      	addlt	r2, r2, r3
 8009722:	1b1c      	subge	r4, r3, r4
 8009724:	9b07      	ldr	r3, [sp, #28]
 8009726:	bfbc      	itt	lt
 8009728:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800972a:	2400      	movlt	r4, #0
 800972c:	2b00      	cmp	r3, #0
 800972e:	bfb5      	itete	lt
 8009730:	eba8 0603 	sublt.w	r6, r8, r3
 8009734:	9b07      	ldrge	r3, [sp, #28]
 8009736:	2300      	movlt	r3, #0
 8009738:	4646      	movge	r6, r8
 800973a:	e730      	b.n	800959e <_dtoa_r+0x71e>
 800973c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800973e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009740:	4646      	mov	r6, r8
 8009742:	e735      	b.n	80095b0 <_dtoa_r+0x730>
 8009744:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009746:	e75c      	b.n	8009602 <_dtoa_r+0x782>
 8009748:	2300      	movs	r3, #0
 800974a:	e788      	b.n	800965e <_dtoa_r+0x7de>
 800974c:	3fe00000 	.word	0x3fe00000
 8009750:	40240000 	.word	0x40240000
 8009754:	40140000 	.word	0x40140000
 8009758:	9b02      	ldr	r3, [sp, #8]
 800975a:	e780      	b.n	800965e <_dtoa_r+0x7de>
 800975c:	2300      	movs	r3, #0
 800975e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009760:	e782      	b.n	8009668 <_dtoa_r+0x7e8>
 8009762:	d099      	beq.n	8009698 <_dtoa_r+0x818>
 8009764:	9a08      	ldr	r2, [sp, #32]
 8009766:	331c      	adds	r3, #28
 8009768:	441a      	add	r2, r3
 800976a:	4498      	add	r8, r3
 800976c:	441e      	add	r6, r3
 800976e:	9208      	str	r2, [sp, #32]
 8009770:	e792      	b.n	8009698 <_dtoa_r+0x818>
 8009772:	4603      	mov	r3, r0
 8009774:	e7f6      	b.n	8009764 <_dtoa_r+0x8e4>
 8009776:	9b07      	ldr	r3, [sp, #28]
 8009778:	9704      	str	r7, [sp, #16]
 800977a:	2b00      	cmp	r3, #0
 800977c:	dc20      	bgt.n	80097c0 <_dtoa_r+0x940>
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009782:	2b02      	cmp	r3, #2
 8009784:	dd1e      	ble.n	80097c4 <_dtoa_r+0x944>
 8009786:	9b00      	ldr	r3, [sp, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	f47f aec0 	bne.w	800950e <_dtoa_r+0x68e>
 800978e:	4621      	mov	r1, r4
 8009790:	2205      	movs	r2, #5
 8009792:	4658      	mov	r0, fp
 8009794:	f000 fa9a 	bl	8009ccc <__multadd>
 8009798:	4601      	mov	r1, r0
 800979a:	4604      	mov	r4, r0
 800979c:	4648      	mov	r0, r9
 800979e:	f000 fcad 	bl	800a0fc <__mcmp>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	f77f aeb3 	ble.w	800950e <_dtoa_r+0x68e>
 80097a8:	4656      	mov	r6, sl
 80097aa:	2331      	movs	r3, #49	@ 0x31
 80097ac:	f806 3b01 	strb.w	r3, [r6], #1
 80097b0:	9b04      	ldr	r3, [sp, #16]
 80097b2:	3301      	adds	r3, #1
 80097b4:	9304      	str	r3, [sp, #16]
 80097b6:	e6ae      	b.n	8009516 <_dtoa_r+0x696>
 80097b8:	9c07      	ldr	r4, [sp, #28]
 80097ba:	9704      	str	r7, [sp, #16]
 80097bc:	4625      	mov	r5, r4
 80097be:	e7f3      	b.n	80097a8 <_dtoa_r+0x928>
 80097c0:	9b07      	ldr	r3, [sp, #28]
 80097c2:	9300      	str	r3, [sp, #0]
 80097c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f000 8104 	beq.w	80099d4 <_dtoa_r+0xb54>
 80097cc:	2e00      	cmp	r6, #0
 80097ce:	dd05      	ble.n	80097dc <_dtoa_r+0x95c>
 80097d0:	4629      	mov	r1, r5
 80097d2:	4632      	mov	r2, r6
 80097d4:	4658      	mov	r0, fp
 80097d6:	f000 fc25 	bl	800a024 <__lshift>
 80097da:	4605      	mov	r5, r0
 80097dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d05a      	beq.n	8009898 <_dtoa_r+0xa18>
 80097e2:	6869      	ldr	r1, [r5, #4]
 80097e4:	4658      	mov	r0, fp
 80097e6:	f000 fa0f 	bl	8009c08 <_Balloc>
 80097ea:	4606      	mov	r6, r0
 80097ec:	b928      	cbnz	r0, 80097fa <_dtoa_r+0x97a>
 80097ee:	4b84      	ldr	r3, [pc, #528]	@ (8009a00 <_dtoa_r+0xb80>)
 80097f0:	4602      	mov	r2, r0
 80097f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80097f6:	f7ff bb5a 	b.w	8008eae <_dtoa_r+0x2e>
 80097fa:	692a      	ldr	r2, [r5, #16]
 80097fc:	3202      	adds	r2, #2
 80097fe:	0092      	lsls	r2, r2, #2
 8009800:	f105 010c 	add.w	r1, r5, #12
 8009804:	300c      	adds	r0, #12
 8009806:	f7ff faa4 	bl	8008d52 <memcpy>
 800980a:	2201      	movs	r2, #1
 800980c:	4631      	mov	r1, r6
 800980e:	4658      	mov	r0, fp
 8009810:	f000 fc08 	bl	800a024 <__lshift>
 8009814:	f10a 0301 	add.w	r3, sl, #1
 8009818:	9307      	str	r3, [sp, #28]
 800981a:	9b00      	ldr	r3, [sp, #0]
 800981c:	4453      	add	r3, sl
 800981e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009820:	9b02      	ldr	r3, [sp, #8]
 8009822:	f003 0301 	and.w	r3, r3, #1
 8009826:	462f      	mov	r7, r5
 8009828:	930a      	str	r3, [sp, #40]	@ 0x28
 800982a:	4605      	mov	r5, r0
 800982c:	9b07      	ldr	r3, [sp, #28]
 800982e:	4621      	mov	r1, r4
 8009830:	3b01      	subs	r3, #1
 8009832:	4648      	mov	r0, r9
 8009834:	9300      	str	r3, [sp, #0]
 8009836:	f7ff fa9a 	bl	8008d6e <quorem>
 800983a:	4639      	mov	r1, r7
 800983c:	9002      	str	r0, [sp, #8]
 800983e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009842:	4648      	mov	r0, r9
 8009844:	f000 fc5a 	bl	800a0fc <__mcmp>
 8009848:	462a      	mov	r2, r5
 800984a:	9008      	str	r0, [sp, #32]
 800984c:	4621      	mov	r1, r4
 800984e:	4658      	mov	r0, fp
 8009850:	f000 fc70 	bl	800a134 <__mdiff>
 8009854:	68c2      	ldr	r2, [r0, #12]
 8009856:	4606      	mov	r6, r0
 8009858:	bb02      	cbnz	r2, 800989c <_dtoa_r+0xa1c>
 800985a:	4601      	mov	r1, r0
 800985c:	4648      	mov	r0, r9
 800985e:	f000 fc4d 	bl	800a0fc <__mcmp>
 8009862:	4602      	mov	r2, r0
 8009864:	4631      	mov	r1, r6
 8009866:	4658      	mov	r0, fp
 8009868:	920e      	str	r2, [sp, #56]	@ 0x38
 800986a:	f000 fa0d 	bl	8009c88 <_Bfree>
 800986e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009870:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009872:	9e07      	ldr	r6, [sp, #28]
 8009874:	ea43 0102 	orr.w	r1, r3, r2
 8009878:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800987a:	4319      	orrs	r1, r3
 800987c:	d110      	bne.n	80098a0 <_dtoa_r+0xa20>
 800987e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009882:	d029      	beq.n	80098d8 <_dtoa_r+0xa58>
 8009884:	9b08      	ldr	r3, [sp, #32]
 8009886:	2b00      	cmp	r3, #0
 8009888:	dd02      	ble.n	8009890 <_dtoa_r+0xa10>
 800988a:	9b02      	ldr	r3, [sp, #8]
 800988c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009890:	9b00      	ldr	r3, [sp, #0]
 8009892:	f883 8000 	strb.w	r8, [r3]
 8009896:	e63f      	b.n	8009518 <_dtoa_r+0x698>
 8009898:	4628      	mov	r0, r5
 800989a:	e7bb      	b.n	8009814 <_dtoa_r+0x994>
 800989c:	2201      	movs	r2, #1
 800989e:	e7e1      	b.n	8009864 <_dtoa_r+0x9e4>
 80098a0:	9b08      	ldr	r3, [sp, #32]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	db04      	blt.n	80098b0 <_dtoa_r+0xa30>
 80098a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80098a8:	430b      	orrs	r3, r1
 80098aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80098ac:	430b      	orrs	r3, r1
 80098ae:	d120      	bne.n	80098f2 <_dtoa_r+0xa72>
 80098b0:	2a00      	cmp	r2, #0
 80098b2:	dded      	ble.n	8009890 <_dtoa_r+0xa10>
 80098b4:	4649      	mov	r1, r9
 80098b6:	2201      	movs	r2, #1
 80098b8:	4658      	mov	r0, fp
 80098ba:	f000 fbb3 	bl	800a024 <__lshift>
 80098be:	4621      	mov	r1, r4
 80098c0:	4681      	mov	r9, r0
 80098c2:	f000 fc1b 	bl	800a0fc <__mcmp>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	dc03      	bgt.n	80098d2 <_dtoa_r+0xa52>
 80098ca:	d1e1      	bne.n	8009890 <_dtoa_r+0xa10>
 80098cc:	f018 0f01 	tst.w	r8, #1
 80098d0:	d0de      	beq.n	8009890 <_dtoa_r+0xa10>
 80098d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80098d6:	d1d8      	bne.n	800988a <_dtoa_r+0xa0a>
 80098d8:	9a00      	ldr	r2, [sp, #0]
 80098da:	2339      	movs	r3, #57	@ 0x39
 80098dc:	7013      	strb	r3, [r2, #0]
 80098de:	4633      	mov	r3, r6
 80098e0:	461e      	mov	r6, r3
 80098e2:	3b01      	subs	r3, #1
 80098e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80098e8:	2a39      	cmp	r2, #57	@ 0x39
 80098ea:	d052      	beq.n	8009992 <_dtoa_r+0xb12>
 80098ec:	3201      	adds	r2, #1
 80098ee:	701a      	strb	r2, [r3, #0]
 80098f0:	e612      	b.n	8009518 <_dtoa_r+0x698>
 80098f2:	2a00      	cmp	r2, #0
 80098f4:	dd07      	ble.n	8009906 <_dtoa_r+0xa86>
 80098f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80098fa:	d0ed      	beq.n	80098d8 <_dtoa_r+0xa58>
 80098fc:	9a00      	ldr	r2, [sp, #0]
 80098fe:	f108 0301 	add.w	r3, r8, #1
 8009902:	7013      	strb	r3, [r2, #0]
 8009904:	e608      	b.n	8009518 <_dtoa_r+0x698>
 8009906:	9b07      	ldr	r3, [sp, #28]
 8009908:	9a07      	ldr	r2, [sp, #28]
 800990a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800990e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009910:	4293      	cmp	r3, r2
 8009912:	d028      	beq.n	8009966 <_dtoa_r+0xae6>
 8009914:	4649      	mov	r1, r9
 8009916:	2300      	movs	r3, #0
 8009918:	220a      	movs	r2, #10
 800991a:	4658      	mov	r0, fp
 800991c:	f000 f9d6 	bl	8009ccc <__multadd>
 8009920:	42af      	cmp	r7, r5
 8009922:	4681      	mov	r9, r0
 8009924:	f04f 0300 	mov.w	r3, #0
 8009928:	f04f 020a 	mov.w	r2, #10
 800992c:	4639      	mov	r1, r7
 800992e:	4658      	mov	r0, fp
 8009930:	d107      	bne.n	8009942 <_dtoa_r+0xac2>
 8009932:	f000 f9cb 	bl	8009ccc <__multadd>
 8009936:	4607      	mov	r7, r0
 8009938:	4605      	mov	r5, r0
 800993a:	9b07      	ldr	r3, [sp, #28]
 800993c:	3301      	adds	r3, #1
 800993e:	9307      	str	r3, [sp, #28]
 8009940:	e774      	b.n	800982c <_dtoa_r+0x9ac>
 8009942:	f000 f9c3 	bl	8009ccc <__multadd>
 8009946:	4629      	mov	r1, r5
 8009948:	4607      	mov	r7, r0
 800994a:	2300      	movs	r3, #0
 800994c:	220a      	movs	r2, #10
 800994e:	4658      	mov	r0, fp
 8009950:	f000 f9bc 	bl	8009ccc <__multadd>
 8009954:	4605      	mov	r5, r0
 8009956:	e7f0      	b.n	800993a <_dtoa_r+0xaba>
 8009958:	9b00      	ldr	r3, [sp, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	bfcc      	ite	gt
 800995e:	461e      	movgt	r6, r3
 8009960:	2601      	movle	r6, #1
 8009962:	4456      	add	r6, sl
 8009964:	2700      	movs	r7, #0
 8009966:	4649      	mov	r1, r9
 8009968:	2201      	movs	r2, #1
 800996a:	4658      	mov	r0, fp
 800996c:	f000 fb5a 	bl	800a024 <__lshift>
 8009970:	4621      	mov	r1, r4
 8009972:	4681      	mov	r9, r0
 8009974:	f000 fbc2 	bl	800a0fc <__mcmp>
 8009978:	2800      	cmp	r0, #0
 800997a:	dcb0      	bgt.n	80098de <_dtoa_r+0xa5e>
 800997c:	d102      	bne.n	8009984 <_dtoa_r+0xb04>
 800997e:	f018 0f01 	tst.w	r8, #1
 8009982:	d1ac      	bne.n	80098de <_dtoa_r+0xa5e>
 8009984:	4633      	mov	r3, r6
 8009986:	461e      	mov	r6, r3
 8009988:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800998c:	2a30      	cmp	r2, #48	@ 0x30
 800998e:	d0fa      	beq.n	8009986 <_dtoa_r+0xb06>
 8009990:	e5c2      	b.n	8009518 <_dtoa_r+0x698>
 8009992:	459a      	cmp	sl, r3
 8009994:	d1a4      	bne.n	80098e0 <_dtoa_r+0xa60>
 8009996:	9b04      	ldr	r3, [sp, #16]
 8009998:	3301      	adds	r3, #1
 800999a:	9304      	str	r3, [sp, #16]
 800999c:	2331      	movs	r3, #49	@ 0x31
 800999e:	f88a 3000 	strb.w	r3, [sl]
 80099a2:	e5b9      	b.n	8009518 <_dtoa_r+0x698>
 80099a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80099a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009a04 <_dtoa_r+0xb84>
 80099aa:	b11b      	cbz	r3, 80099b4 <_dtoa_r+0xb34>
 80099ac:	f10a 0308 	add.w	r3, sl, #8
 80099b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80099b2:	6013      	str	r3, [r2, #0]
 80099b4:	4650      	mov	r0, sl
 80099b6:	b019      	add	sp, #100	@ 0x64
 80099b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099be:	2b01      	cmp	r3, #1
 80099c0:	f77f ae37 	ble.w	8009632 <_dtoa_r+0x7b2>
 80099c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80099c8:	2001      	movs	r0, #1
 80099ca:	e655      	b.n	8009678 <_dtoa_r+0x7f8>
 80099cc:	9b00      	ldr	r3, [sp, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f77f aed6 	ble.w	8009780 <_dtoa_r+0x900>
 80099d4:	4656      	mov	r6, sl
 80099d6:	4621      	mov	r1, r4
 80099d8:	4648      	mov	r0, r9
 80099da:	f7ff f9c8 	bl	8008d6e <quorem>
 80099de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80099e2:	f806 8b01 	strb.w	r8, [r6], #1
 80099e6:	9b00      	ldr	r3, [sp, #0]
 80099e8:	eba6 020a 	sub.w	r2, r6, sl
 80099ec:	4293      	cmp	r3, r2
 80099ee:	ddb3      	ble.n	8009958 <_dtoa_r+0xad8>
 80099f0:	4649      	mov	r1, r9
 80099f2:	2300      	movs	r3, #0
 80099f4:	220a      	movs	r2, #10
 80099f6:	4658      	mov	r0, fp
 80099f8:	f000 f968 	bl	8009ccc <__multadd>
 80099fc:	4681      	mov	r9, r0
 80099fe:	e7ea      	b.n	80099d6 <_dtoa_r+0xb56>
 8009a00:	0800c4f4 	.word	0x0800c4f4
 8009a04:	0800c478 	.word	0x0800c478

08009a08 <_free_r>:
 8009a08:	b538      	push	{r3, r4, r5, lr}
 8009a0a:	4605      	mov	r5, r0
 8009a0c:	2900      	cmp	r1, #0
 8009a0e:	d041      	beq.n	8009a94 <_free_r+0x8c>
 8009a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a14:	1f0c      	subs	r4, r1, #4
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	bfb8      	it	lt
 8009a1a:	18e4      	addlt	r4, r4, r3
 8009a1c:	f000 f8e8 	bl	8009bf0 <__malloc_lock>
 8009a20:	4a1d      	ldr	r2, [pc, #116]	@ (8009a98 <_free_r+0x90>)
 8009a22:	6813      	ldr	r3, [r2, #0]
 8009a24:	b933      	cbnz	r3, 8009a34 <_free_r+0x2c>
 8009a26:	6063      	str	r3, [r4, #4]
 8009a28:	6014      	str	r4, [r2, #0]
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a30:	f000 b8e4 	b.w	8009bfc <__malloc_unlock>
 8009a34:	42a3      	cmp	r3, r4
 8009a36:	d908      	bls.n	8009a4a <_free_r+0x42>
 8009a38:	6820      	ldr	r0, [r4, #0]
 8009a3a:	1821      	adds	r1, r4, r0
 8009a3c:	428b      	cmp	r3, r1
 8009a3e:	bf01      	itttt	eq
 8009a40:	6819      	ldreq	r1, [r3, #0]
 8009a42:	685b      	ldreq	r3, [r3, #4]
 8009a44:	1809      	addeq	r1, r1, r0
 8009a46:	6021      	streq	r1, [r4, #0]
 8009a48:	e7ed      	b.n	8009a26 <_free_r+0x1e>
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	b10b      	cbz	r3, 8009a54 <_free_r+0x4c>
 8009a50:	42a3      	cmp	r3, r4
 8009a52:	d9fa      	bls.n	8009a4a <_free_r+0x42>
 8009a54:	6811      	ldr	r1, [r2, #0]
 8009a56:	1850      	adds	r0, r2, r1
 8009a58:	42a0      	cmp	r0, r4
 8009a5a:	d10b      	bne.n	8009a74 <_free_r+0x6c>
 8009a5c:	6820      	ldr	r0, [r4, #0]
 8009a5e:	4401      	add	r1, r0
 8009a60:	1850      	adds	r0, r2, r1
 8009a62:	4283      	cmp	r3, r0
 8009a64:	6011      	str	r1, [r2, #0]
 8009a66:	d1e0      	bne.n	8009a2a <_free_r+0x22>
 8009a68:	6818      	ldr	r0, [r3, #0]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	6053      	str	r3, [r2, #4]
 8009a6e:	4408      	add	r0, r1
 8009a70:	6010      	str	r0, [r2, #0]
 8009a72:	e7da      	b.n	8009a2a <_free_r+0x22>
 8009a74:	d902      	bls.n	8009a7c <_free_r+0x74>
 8009a76:	230c      	movs	r3, #12
 8009a78:	602b      	str	r3, [r5, #0]
 8009a7a:	e7d6      	b.n	8009a2a <_free_r+0x22>
 8009a7c:	6820      	ldr	r0, [r4, #0]
 8009a7e:	1821      	adds	r1, r4, r0
 8009a80:	428b      	cmp	r3, r1
 8009a82:	bf04      	itt	eq
 8009a84:	6819      	ldreq	r1, [r3, #0]
 8009a86:	685b      	ldreq	r3, [r3, #4]
 8009a88:	6063      	str	r3, [r4, #4]
 8009a8a:	bf04      	itt	eq
 8009a8c:	1809      	addeq	r1, r1, r0
 8009a8e:	6021      	streq	r1, [r4, #0]
 8009a90:	6054      	str	r4, [r2, #4]
 8009a92:	e7ca      	b.n	8009a2a <_free_r+0x22>
 8009a94:	bd38      	pop	{r3, r4, r5, pc}
 8009a96:	bf00      	nop
 8009a98:	20004ee0 	.word	0x20004ee0

08009a9c <malloc>:
 8009a9c:	4b02      	ldr	r3, [pc, #8]	@ (8009aa8 <malloc+0xc>)
 8009a9e:	4601      	mov	r1, r0
 8009aa0:	6818      	ldr	r0, [r3, #0]
 8009aa2:	f000 b825 	b.w	8009af0 <_malloc_r>
 8009aa6:	bf00      	nop
 8009aa8:	2000001c 	.word	0x2000001c

08009aac <sbrk_aligned>:
 8009aac:	b570      	push	{r4, r5, r6, lr}
 8009aae:	4e0f      	ldr	r6, [pc, #60]	@ (8009aec <sbrk_aligned+0x40>)
 8009ab0:	460c      	mov	r4, r1
 8009ab2:	6831      	ldr	r1, [r6, #0]
 8009ab4:	4605      	mov	r5, r0
 8009ab6:	b911      	cbnz	r1, 8009abe <sbrk_aligned+0x12>
 8009ab8:	f001 f81c 	bl	800aaf4 <_sbrk_r>
 8009abc:	6030      	str	r0, [r6, #0]
 8009abe:	4621      	mov	r1, r4
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	f001 f817 	bl	800aaf4 <_sbrk_r>
 8009ac6:	1c43      	adds	r3, r0, #1
 8009ac8:	d103      	bne.n	8009ad2 <sbrk_aligned+0x26>
 8009aca:	f04f 34ff 	mov.w	r4, #4294967295
 8009ace:	4620      	mov	r0, r4
 8009ad0:	bd70      	pop	{r4, r5, r6, pc}
 8009ad2:	1cc4      	adds	r4, r0, #3
 8009ad4:	f024 0403 	bic.w	r4, r4, #3
 8009ad8:	42a0      	cmp	r0, r4
 8009ada:	d0f8      	beq.n	8009ace <sbrk_aligned+0x22>
 8009adc:	1a21      	subs	r1, r4, r0
 8009ade:	4628      	mov	r0, r5
 8009ae0:	f001 f808 	bl	800aaf4 <_sbrk_r>
 8009ae4:	3001      	adds	r0, #1
 8009ae6:	d1f2      	bne.n	8009ace <sbrk_aligned+0x22>
 8009ae8:	e7ef      	b.n	8009aca <sbrk_aligned+0x1e>
 8009aea:	bf00      	nop
 8009aec:	20004edc 	.word	0x20004edc

08009af0 <_malloc_r>:
 8009af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009af4:	1ccd      	adds	r5, r1, #3
 8009af6:	f025 0503 	bic.w	r5, r5, #3
 8009afa:	3508      	adds	r5, #8
 8009afc:	2d0c      	cmp	r5, #12
 8009afe:	bf38      	it	cc
 8009b00:	250c      	movcc	r5, #12
 8009b02:	2d00      	cmp	r5, #0
 8009b04:	4606      	mov	r6, r0
 8009b06:	db01      	blt.n	8009b0c <_malloc_r+0x1c>
 8009b08:	42a9      	cmp	r1, r5
 8009b0a:	d904      	bls.n	8009b16 <_malloc_r+0x26>
 8009b0c:	230c      	movs	r3, #12
 8009b0e:	6033      	str	r3, [r6, #0]
 8009b10:	2000      	movs	r0, #0
 8009b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009bec <_malloc_r+0xfc>
 8009b1a:	f000 f869 	bl	8009bf0 <__malloc_lock>
 8009b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8009b22:	461c      	mov	r4, r3
 8009b24:	bb44      	cbnz	r4, 8009b78 <_malloc_r+0x88>
 8009b26:	4629      	mov	r1, r5
 8009b28:	4630      	mov	r0, r6
 8009b2a:	f7ff ffbf 	bl	8009aac <sbrk_aligned>
 8009b2e:	1c43      	adds	r3, r0, #1
 8009b30:	4604      	mov	r4, r0
 8009b32:	d158      	bne.n	8009be6 <_malloc_r+0xf6>
 8009b34:	f8d8 4000 	ldr.w	r4, [r8]
 8009b38:	4627      	mov	r7, r4
 8009b3a:	2f00      	cmp	r7, #0
 8009b3c:	d143      	bne.n	8009bc6 <_malloc_r+0xd6>
 8009b3e:	2c00      	cmp	r4, #0
 8009b40:	d04b      	beq.n	8009bda <_malloc_r+0xea>
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	4639      	mov	r1, r7
 8009b46:	4630      	mov	r0, r6
 8009b48:	eb04 0903 	add.w	r9, r4, r3
 8009b4c:	f000 ffd2 	bl	800aaf4 <_sbrk_r>
 8009b50:	4581      	cmp	r9, r0
 8009b52:	d142      	bne.n	8009bda <_malloc_r+0xea>
 8009b54:	6821      	ldr	r1, [r4, #0]
 8009b56:	1a6d      	subs	r5, r5, r1
 8009b58:	4629      	mov	r1, r5
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	f7ff ffa6 	bl	8009aac <sbrk_aligned>
 8009b60:	3001      	adds	r0, #1
 8009b62:	d03a      	beq.n	8009bda <_malloc_r+0xea>
 8009b64:	6823      	ldr	r3, [r4, #0]
 8009b66:	442b      	add	r3, r5
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	f8d8 3000 	ldr.w	r3, [r8]
 8009b6e:	685a      	ldr	r2, [r3, #4]
 8009b70:	bb62      	cbnz	r2, 8009bcc <_malloc_r+0xdc>
 8009b72:	f8c8 7000 	str.w	r7, [r8]
 8009b76:	e00f      	b.n	8009b98 <_malloc_r+0xa8>
 8009b78:	6822      	ldr	r2, [r4, #0]
 8009b7a:	1b52      	subs	r2, r2, r5
 8009b7c:	d420      	bmi.n	8009bc0 <_malloc_r+0xd0>
 8009b7e:	2a0b      	cmp	r2, #11
 8009b80:	d917      	bls.n	8009bb2 <_malloc_r+0xc2>
 8009b82:	1961      	adds	r1, r4, r5
 8009b84:	42a3      	cmp	r3, r4
 8009b86:	6025      	str	r5, [r4, #0]
 8009b88:	bf18      	it	ne
 8009b8a:	6059      	strne	r1, [r3, #4]
 8009b8c:	6863      	ldr	r3, [r4, #4]
 8009b8e:	bf08      	it	eq
 8009b90:	f8c8 1000 	streq.w	r1, [r8]
 8009b94:	5162      	str	r2, [r4, r5]
 8009b96:	604b      	str	r3, [r1, #4]
 8009b98:	4630      	mov	r0, r6
 8009b9a:	f000 f82f 	bl	8009bfc <__malloc_unlock>
 8009b9e:	f104 000b 	add.w	r0, r4, #11
 8009ba2:	1d23      	adds	r3, r4, #4
 8009ba4:	f020 0007 	bic.w	r0, r0, #7
 8009ba8:	1ac2      	subs	r2, r0, r3
 8009baa:	bf1c      	itt	ne
 8009bac:	1a1b      	subne	r3, r3, r0
 8009bae:	50a3      	strne	r3, [r4, r2]
 8009bb0:	e7af      	b.n	8009b12 <_malloc_r+0x22>
 8009bb2:	6862      	ldr	r2, [r4, #4]
 8009bb4:	42a3      	cmp	r3, r4
 8009bb6:	bf0c      	ite	eq
 8009bb8:	f8c8 2000 	streq.w	r2, [r8]
 8009bbc:	605a      	strne	r2, [r3, #4]
 8009bbe:	e7eb      	b.n	8009b98 <_malloc_r+0xa8>
 8009bc0:	4623      	mov	r3, r4
 8009bc2:	6864      	ldr	r4, [r4, #4]
 8009bc4:	e7ae      	b.n	8009b24 <_malloc_r+0x34>
 8009bc6:	463c      	mov	r4, r7
 8009bc8:	687f      	ldr	r7, [r7, #4]
 8009bca:	e7b6      	b.n	8009b3a <_malloc_r+0x4a>
 8009bcc:	461a      	mov	r2, r3
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	42a3      	cmp	r3, r4
 8009bd2:	d1fb      	bne.n	8009bcc <_malloc_r+0xdc>
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	6053      	str	r3, [r2, #4]
 8009bd8:	e7de      	b.n	8009b98 <_malloc_r+0xa8>
 8009bda:	230c      	movs	r3, #12
 8009bdc:	6033      	str	r3, [r6, #0]
 8009bde:	4630      	mov	r0, r6
 8009be0:	f000 f80c 	bl	8009bfc <__malloc_unlock>
 8009be4:	e794      	b.n	8009b10 <_malloc_r+0x20>
 8009be6:	6005      	str	r5, [r0, #0]
 8009be8:	e7d6      	b.n	8009b98 <_malloc_r+0xa8>
 8009bea:	bf00      	nop
 8009bec:	20004ee0 	.word	0x20004ee0

08009bf0 <__malloc_lock>:
 8009bf0:	4801      	ldr	r0, [pc, #4]	@ (8009bf8 <__malloc_lock+0x8>)
 8009bf2:	f7ff b8ac 	b.w	8008d4e <__retarget_lock_acquire_recursive>
 8009bf6:	bf00      	nop
 8009bf8:	20004ed8 	.word	0x20004ed8

08009bfc <__malloc_unlock>:
 8009bfc:	4801      	ldr	r0, [pc, #4]	@ (8009c04 <__malloc_unlock+0x8>)
 8009bfe:	f7ff b8a7 	b.w	8008d50 <__retarget_lock_release_recursive>
 8009c02:	bf00      	nop
 8009c04:	20004ed8 	.word	0x20004ed8

08009c08 <_Balloc>:
 8009c08:	b570      	push	{r4, r5, r6, lr}
 8009c0a:	69c6      	ldr	r6, [r0, #28]
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	460d      	mov	r5, r1
 8009c10:	b976      	cbnz	r6, 8009c30 <_Balloc+0x28>
 8009c12:	2010      	movs	r0, #16
 8009c14:	f7ff ff42 	bl	8009a9c <malloc>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	61e0      	str	r0, [r4, #28]
 8009c1c:	b920      	cbnz	r0, 8009c28 <_Balloc+0x20>
 8009c1e:	4b18      	ldr	r3, [pc, #96]	@ (8009c80 <_Balloc+0x78>)
 8009c20:	4818      	ldr	r0, [pc, #96]	@ (8009c84 <_Balloc+0x7c>)
 8009c22:	216b      	movs	r1, #107	@ 0x6b
 8009c24:	f000 ff76 	bl	800ab14 <__assert_func>
 8009c28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c2c:	6006      	str	r6, [r0, #0]
 8009c2e:	60c6      	str	r6, [r0, #12]
 8009c30:	69e6      	ldr	r6, [r4, #28]
 8009c32:	68f3      	ldr	r3, [r6, #12]
 8009c34:	b183      	cbz	r3, 8009c58 <_Balloc+0x50>
 8009c36:	69e3      	ldr	r3, [r4, #28]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c3e:	b9b8      	cbnz	r0, 8009c70 <_Balloc+0x68>
 8009c40:	2101      	movs	r1, #1
 8009c42:	fa01 f605 	lsl.w	r6, r1, r5
 8009c46:	1d72      	adds	r2, r6, #5
 8009c48:	0092      	lsls	r2, r2, #2
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	f000 ff80 	bl	800ab50 <_calloc_r>
 8009c50:	b160      	cbz	r0, 8009c6c <_Balloc+0x64>
 8009c52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009c56:	e00e      	b.n	8009c76 <_Balloc+0x6e>
 8009c58:	2221      	movs	r2, #33	@ 0x21
 8009c5a:	2104      	movs	r1, #4
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	f000 ff77 	bl	800ab50 <_calloc_r>
 8009c62:	69e3      	ldr	r3, [r4, #28]
 8009c64:	60f0      	str	r0, [r6, #12]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d1e4      	bne.n	8009c36 <_Balloc+0x2e>
 8009c6c:	2000      	movs	r0, #0
 8009c6e:	bd70      	pop	{r4, r5, r6, pc}
 8009c70:	6802      	ldr	r2, [r0, #0]
 8009c72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c76:	2300      	movs	r3, #0
 8009c78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c7c:	e7f7      	b.n	8009c6e <_Balloc+0x66>
 8009c7e:	bf00      	nop
 8009c80:	0800c485 	.word	0x0800c485
 8009c84:	0800c505 	.word	0x0800c505

08009c88 <_Bfree>:
 8009c88:	b570      	push	{r4, r5, r6, lr}
 8009c8a:	69c6      	ldr	r6, [r0, #28]
 8009c8c:	4605      	mov	r5, r0
 8009c8e:	460c      	mov	r4, r1
 8009c90:	b976      	cbnz	r6, 8009cb0 <_Bfree+0x28>
 8009c92:	2010      	movs	r0, #16
 8009c94:	f7ff ff02 	bl	8009a9c <malloc>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	61e8      	str	r0, [r5, #28]
 8009c9c:	b920      	cbnz	r0, 8009ca8 <_Bfree+0x20>
 8009c9e:	4b09      	ldr	r3, [pc, #36]	@ (8009cc4 <_Bfree+0x3c>)
 8009ca0:	4809      	ldr	r0, [pc, #36]	@ (8009cc8 <_Bfree+0x40>)
 8009ca2:	218f      	movs	r1, #143	@ 0x8f
 8009ca4:	f000 ff36 	bl	800ab14 <__assert_func>
 8009ca8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cac:	6006      	str	r6, [r0, #0]
 8009cae:	60c6      	str	r6, [r0, #12]
 8009cb0:	b13c      	cbz	r4, 8009cc2 <_Bfree+0x3a>
 8009cb2:	69eb      	ldr	r3, [r5, #28]
 8009cb4:	6862      	ldr	r2, [r4, #4]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009cbc:	6021      	str	r1, [r4, #0]
 8009cbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009cc2:	bd70      	pop	{r4, r5, r6, pc}
 8009cc4:	0800c485 	.word	0x0800c485
 8009cc8:	0800c505 	.word	0x0800c505

08009ccc <__multadd>:
 8009ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cd0:	690d      	ldr	r5, [r1, #16]
 8009cd2:	4607      	mov	r7, r0
 8009cd4:	460c      	mov	r4, r1
 8009cd6:	461e      	mov	r6, r3
 8009cd8:	f101 0c14 	add.w	ip, r1, #20
 8009cdc:	2000      	movs	r0, #0
 8009cde:	f8dc 3000 	ldr.w	r3, [ip]
 8009ce2:	b299      	uxth	r1, r3
 8009ce4:	fb02 6101 	mla	r1, r2, r1, r6
 8009ce8:	0c1e      	lsrs	r6, r3, #16
 8009cea:	0c0b      	lsrs	r3, r1, #16
 8009cec:	fb02 3306 	mla	r3, r2, r6, r3
 8009cf0:	b289      	uxth	r1, r1
 8009cf2:	3001      	adds	r0, #1
 8009cf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009cf8:	4285      	cmp	r5, r0
 8009cfa:	f84c 1b04 	str.w	r1, [ip], #4
 8009cfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009d02:	dcec      	bgt.n	8009cde <__multadd+0x12>
 8009d04:	b30e      	cbz	r6, 8009d4a <__multadd+0x7e>
 8009d06:	68a3      	ldr	r3, [r4, #8]
 8009d08:	42ab      	cmp	r3, r5
 8009d0a:	dc19      	bgt.n	8009d40 <__multadd+0x74>
 8009d0c:	6861      	ldr	r1, [r4, #4]
 8009d0e:	4638      	mov	r0, r7
 8009d10:	3101      	adds	r1, #1
 8009d12:	f7ff ff79 	bl	8009c08 <_Balloc>
 8009d16:	4680      	mov	r8, r0
 8009d18:	b928      	cbnz	r0, 8009d26 <__multadd+0x5a>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8009d50 <__multadd+0x84>)
 8009d1e:	480d      	ldr	r0, [pc, #52]	@ (8009d54 <__multadd+0x88>)
 8009d20:	21ba      	movs	r1, #186	@ 0xba
 8009d22:	f000 fef7 	bl	800ab14 <__assert_func>
 8009d26:	6922      	ldr	r2, [r4, #16]
 8009d28:	3202      	adds	r2, #2
 8009d2a:	f104 010c 	add.w	r1, r4, #12
 8009d2e:	0092      	lsls	r2, r2, #2
 8009d30:	300c      	adds	r0, #12
 8009d32:	f7ff f80e 	bl	8008d52 <memcpy>
 8009d36:	4621      	mov	r1, r4
 8009d38:	4638      	mov	r0, r7
 8009d3a:	f7ff ffa5 	bl	8009c88 <_Bfree>
 8009d3e:	4644      	mov	r4, r8
 8009d40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009d44:	3501      	adds	r5, #1
 8009d46:	615e      	str	r6, [r3, #20]
 8009d48:	6125      	str	r5, [r4, #16]
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d50:	0800c4f4 	.word	0x0800c4f4
 8009d54:	0800c505 	.word	0x0800c505

08009d58 <__hi0bits>:
 8009d58:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	bf36      	itet	cc
 8009d60:	0403      	lslcc	r3, r0, #16
 8009d62:	2000      	movcs	r0, #0
 8009d64:	2010      	movcc	r0, #16
 8009d66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009d6a:	bf3c      	itt	cc
 8009d6c:	021b      	lslcc	r3, r3, #8
 8009d6e:	3008      	addcc	r0, #8
 8009d70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d74:	bf3c      	itt	cc
 8009d76:	011b      	lslcc	r3, r3, #4
 8009d78:	3004      	addcc	r0, #4
 8009d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d7e:	bf3c      	itt	cc
 8009d80:	009b      	lslcc	r3, r3, #2
 8009d82:	3002      	addcc	r0, #2
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	db05      	blt.n	8009d94 <__hi0bits+0x3c>
 8009d88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009d8c:	f100 0001 	add.w	r0, r0, #1
 8009d90:	bf08      	it	eq
 8009d92:	2020      	moveq	r0, #32
 8009d94:	4770      	bx	lr

08009d96 <__lo0bits>:
 8009d96:	6803      	ldr	r3, [r0, #0]
 8009d98:	4602      	mov	r2, r0
 8009d9a:	f013 0007 	ands.w	r0, r3, #7
 8009d9e:	d00b      	beq.n	8009db8 <__lo0bits+0x22>
 8009da0:	07d9      	lsls	r1, r3, #31
 8009da2:	d421      	bmi.n	8009de8 <__lo0bits+0x52>
 8009da4:	0798      	lsls	r0, r3, #30
 8009da6:	bf49      	itett	mi
 8009da8:	085b      	lsrmi	r3, r3, #1
 8009daa:	089b      	lsrpl	r3, r3, #2
 8009dac:	2001      	movmi	r0, #1
 8009dae:	6013      	strmi	r3, [r2, #0]
 8009db0:	bf5c      	itt	pl
 8009db2:	6013      	strpl	r3, [r2, #0]
 8009db4:	2002      	movpl	r0, #2
 8009db6:	4770      	bx	lr
 8009db8:	b299      	uxth	r1, r3
 8009dba:	b909      	cbnz	r1, 8009dc0 <__lo0bits+0x2a>
 8009dbc:	0c1b      	lsrs	r3, r3, #16
 8009dbe:	2010      	movs	r0, #16
 8009dc0:	b2d9      	uxtb	r1, r3
 8009dc2:	b909      	cbnz	r1, 8009dc8 <__lo0bits+0x32>
 8009dc4:	3008      	adds	r0, #8
 8009dc6:	0a1b      	lsrs	r3, r3, #8
 8009dc8:	0719      	lsls	r1, r3, #28
 8009dca:	bf04      	itt	eq
 8009dcc:	091b      	lsreq	r3, r3, #4
 8009dce:	3004      	addeq	r0, #4
 8009dd0:	0799      	lsls	r1, r3, #30
 8009dd2:	bf04      	itt	eq
 8009dd4:	089b      	lsreq	r3, r3, #2
 8009dd6:	3002      	addeq	r0, #2
 8009dd8:	07d9      	lsls	r1, r3, #31
 8009dda:	d403      	bmi.n	8009de4 <__lo0bits+0x4e>
 8009ddc:	085b      	lsrs	r3, r3, #1
 8009dde:	f100 0001 	add.w	r0, r0, #1
 8009de2:	d003      	beq.n	8009dec <__lo0bits+0x56>
 8009de4:	6013      	str	r3, [r2, #0]
 8009de6:	4770      	bx	lr
 8009de8:	2000      	movs	r0, #0
 8009dea:	4770      	bx	lr
 8009dec:	2020      	movs	r0, #32
 8009dee:	4770      	bx	lr

08009df0 <__i2b>:
 8009df0:	b510      	push	{r4, lr}
 8009df2:	460c      	mov	r4, r1
 8009df4:	2101      	movs	r1, #1
 8009df6:	f7ff ff07 	bl	8009c08 <_Balloc>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	b928      	cbnz	r0, 8009e0a <__i2b+0x1a>
 8009dfe:	4b05      	ldr	r3, [pc, #20]	@ (8009e14 <__i2b+0x24>)
 8009e00:	4805      	ldr	r0, [pc, #20]	@ (8009e18 <__i2b+0x28>)
 8009e02:	f240 1145 	movw	r1, #325	@ 0x145
 8009e06:	f000 fe85 	bl	800ab14 <__assert_func>
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	6144      	str	r4, [r0, #20]
 8009e0e:	6103      	str	r3, [r0, #16]
 8009e10:	bd10      	pop	{r4, pc}
 8009e12:	bf00      	nop
 8009e14:	0800c4f4 	.word	0x0800c4f4
 8009e18:	0800c505 	.word	0x0800c505

08009e1c <__multiply>:
 8009e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e20:	4614      	mov	r4, r2
 8009e22:	690a      	ldr	r2, [r1, #16]
 8009e24:	6923      	ldr	r3, [r4, #16]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	bfa8      	it	ge
 8009e2a:	4623      	movge	r3, r4
 8009e2c:	460f      	mov	r7, r1
 8009e2e:	bfa4      	itt	ge
 8009e30:	460c      	movge	r4, r1
 8009e32:	461f      	movge	r7, r3
 8009e34:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009e38:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009e3c:	68a3      	ldr	r3, [r4, #8]
 8009e3e:	6861      	ldr	r1, [r4, #4]
 8009e40:	eb0a 0609 	add.w	r6, sl, r9
 8009e44:	42b3      	cmp	r3, r6
 8009e46:	b085      	sub	sp, #20
 8009e48:	bfb8      	it	lt
 8009e4a:	3101      	addlt	r1, #1
 8009e4c:	f7ff fedc 	bl	8009c08 <_Balloc>
 8009e50:	b930      	cbnz	r0, 8009e60 <__multiply+0x44>
 8009e52:	4602      	mov	r2, r0
 8009e54:	4b44      	ldr	r3, [pc, #272]	@ (8009f68 <__multiply+0x14c>)
 8009e56:	4845      	ldr	r0, [pc, #276]	@ (8009f6c <__multiply+0x150>)
 8009e58:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009e5c:	f000 fe5a 	bl	800ab14 <__assert_func>
 8009e60:	f100 0514 	add.w	r5, r0, #20
 8009e64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e68:	462b      	mov	r3, r5
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	4543      	cmp	r3, r8
 8009e6e:	d321      	bcc.n	8009eb4 <__multiply+0x98>
 8009e70:	f107 0114 	add.w	r1, r7, #20
 8009e74:	f104 0214 	add.w	r2, r4, #20
 8009e78:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009e7c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009e80:	9302      	str	r3, [sp, #8]
 8009e82:	1b13      	subs	r3, r2, r4
 8009e84:	3b15      	subs	r3, #21
 8009e86:	f023 0303 	bic.w	r3, r3, #3
 8009e8a:	3304      	adds	r3, #4
 8009e8c:	f104 0715 	add.w	r7, r4, #21
 8009e90:	42ba      	cmp	r2, r7
 8009e92:	bf38      	it	cc
 8009e94:	2304      	movcc	r3, #4
 8009e96:	9301      	str	r3, [sp, #4]
 8009e98:	9b02      	ldr	r3, [sp, #8]
 8009e9a:	9103      	str	r1, [sp, #12]
 8009e9c:	428b      	cmp	r3, r1
 8009e9e:	d80c      	bhi.n	8009eba <__multiply+0x9e>
 8009ea0:	2e00      	cmp	r6, #0
 8009ea2:	dd03      	ble.n	8009eac <__multiply+0x90>
 8009ea4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d05b      	beq.n	8009f64 <__multiply+0x148>
 8009eac:	6106      	str	r6, [r0, #16]
 8009eae:	b005      	add	sp, #20
 8009eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb4:	f843 2b04 	str.w	r2, [r3], #4
 8009eb8:	e7d8      	b.n	8009e6c <__multiply+0x50>
 8009eba:	f8b1 a000 	ldrh.w	sl, [r1]
 8009ebe:	f1ba 0f00 	cmp.w	sl, #0
 8009ec2:	d024      	beq.n	8009f0e <__multiply+0xf2>
 8009ec4:	f104 0e14 	add.w	lr, r4, #20
 8009ec8:	46a9      	mov	r9, r5
 8009eca:	f04f 0c00 	mov.w	ip, #0
 8009ece:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009ed2:	f8d9 3000 	ldr.w	r3, [r9]
 8009ed6:	fa1f fb87 	uxth.w	fp, r7
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	fb0a 330b 	mla	r3, sl, fp, r3
 8009ee0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009ee4:	f8d9 7000 	ldr.w	r7, [r9]
 8009ee8:	4463      	add	r3, ip
 8009eea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009eee:	fb0a c70b 	mla	r7, sl, fp, ip
 8009ef2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009efc:	4572      	cmp	r2, lr
 8009efe:	f849 3b04 	str.w	r3, [r9], #4
 8009f02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009f06:	d8e2      	bhi.n	8009ece <__multiply+0xb2>
 8009f08:	9b01      	ldr	r3, [sp, #4]
 8009f0a:	f845 c003 	str.w	ip, [r5, r3]
 8009f0e:	9b03      	ldr	r3, [sp, #12]
 8009f10:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009f14:	3104      	adds	r1, #4
 8009f16:	f1b9 0f00 	cmp.w	r9, #0
 8009f1a:	d021      	beq.n	8009f60 <__multiply+0x144>
 8009f1c:	682b      	ldr	r3, [r5, #0]
 8009f1e:	f104 0c14 	add.w	ip, r4, #20
 8009f22:	46ae      	mov	lr, r5
 8009f24:	f04f 0a00 	mov.w	sl, #0
 8009f28:	f8bc b000 	ldrh.w	fp, [ip]
 8009f2c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009f30:	fb09 770b 	mla	r7, r9, fp, r7
 8009f34:	4457      	add	r7, sl
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009f3c:	f84e 3b04 	str.w	r3, [lr], #4
 8009f40:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009f44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f48:	f8be 3000 	ldrh.w	r3, [lr]
 8009f4c:	fb09 330a 	mla	r3, r9, sl, r3
 8009f50:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009f54:	4562      	cmp	r2, ip
 8009f56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f5a:	d8e5      	bhi.n	8009f28 <__multiply+0x10c>
 8009f5c:	9f01      	ldr	r7, [sp, #4]
 8009f5e:	51eb      	str	r3, [r5, r7]
 8009f60:	3504      	adds	r5, #4
 8009f62:	e799      	b.n	8009e98 <__multiply+0x7c>
 8009f64:	3e01      	subs	r6, #1
 8009f66:	e79b      	b.n	8009ea0 <__multiply+0x84>
 8009f68:	0800c4f4 	.word	0x0800c4f4
 8009f6c:	0800c505 	.word	0x0800c505

08009f70 <__pow5mult>:
 8009f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f74:	4615      	mov	r5, r2
 8009f76:	f012 0203 	ands.w	r2, r2, #3
 8009f7a:	4607      	mov	r7, r0
 8009f7c:	460e      	mov	r6, r1
 8009f7e:	d007      	beq.n	8009f90 <__pow5mult+0x20>
 8009f80:	4c25      	ldr	r4, [pc, #148]	@ (800a018 <__pow5mult+0xa8>)
 8009f82:	3a01      	subs	r2, #1
 8009f84:	2300      	movs	r3, #0
 8009f86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f8a:	f7ff fe9f 	bl	8009ccc <__multadd>
 8009f8e:	4606      	mov	r6, r0
 8009f90:	10ad      	asrs	r5, r5, #2
 8009f92:	d03d      	beq.n	800a010 <__pow5mult+0xa0>
 8009f94:	69fc      	ldr	r4, [r7, #28]
 8009f96:	b97c      	cbnz	r4, 8009fb8 <__pow5mult+0x48>
 8009f98:	2010      	movs	r0, #16
 8009f9a:	f7ff fd7f 	bl	8009a9c <malloc>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	61f8      	str	r0, [r7, #28]
 8009fa2:	b928      	cbnz	r0, 8009fb0 <__pow5mult+0x40>
 8009fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800a01c <__pow5mult+0xac>)
 8009fa6:	481e      	ldr	r0, [pc, #120]	@ (800a020 <__pow5mult+0xb0>)
 8009fa8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009fac:	f000 fdb2 	bl	800ab14 <__assert_func>
 8009fb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009fb4:	6004      	str	r4, [r0, #0]
 8009fb6:	60c4      	str	r4, [r0, #12]
 8009fb8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009fbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009fc0:	b94c      	cbnz	r4, 8009fd6 <__pow5mult+0x66>
 8009fc2:	f240 2171 	movw	r1, #625	@ 0x271
 8009fc6:	4638      	mov	r0, r7
 8009fc8:	f7ff ff12 	bl	8009df0 <__i2b>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	f8c8 0008 	str.w	r0, [r8, #8]
 8009fd2:	4604      	mov	r4, r0
 8009fd4:	6003      	str	r3, [r0, #0]
 8009fd6:	f04f 0900 	mov.w	r9, #0
 8009fda:	07eb      	lsls	r3, r5, #31
 8009fdc:	d50a      	bpl.n	8009ff4 <__pow5mult+0x84>
 8009fde:	4631      	mov	r1, r6
 8009fe0:	4622      	mov	r2, r4
 8009fe2:	4638      	mov	r0, r7
 8009fe4:	f7ff ff1a 	bl	8009e1c <__multiply>
 8009fe8:	4631      	mov	r1, r6
 8009fea:	4680      	mov	r8, r0
 8009fec:	4638      	mov	r0, r7
 8009fee:	f7ff fe4b 	bl	8009c88 <_Bfree>
 8009ff2:	4646      	mov	r6, r8
 8009ff4:	106d      	asrs	r5, r5, #1
 8009ff6:	d00b      	beq.n	800a010 <__pow5mult+0xa0>
 8009ff8:	6820      	ldr	r0, [r4, #0]
 8009ffa:	b938      	cbnz	r0, 800a00c <__pow5mult+0x9c>
 8009ffc:	4622      	mov	r2, r4
 8009ffe:	4621      	mov	r1, r4
 800a000:	4638      	mov	r0, r7
 800a002:	f7ff ff0b 	bl	8009e1c <__multiply>
 800a006:	6020      	str	r0, [r4, #0]
 800a008:	f8c0 9000 	str.w	r9, [r0]
 800a00c:	4604      	mov	r4, r0
 800a00e:	e7e4      	b.n	8009fda <__pow5mult+0x6a>
 800a010:	4630      	mov	r0, r6
 800a012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a016:	bf00      	nop
 800a018:	0800c560 	.word	0x0800c560
 800a01c:	0800c485 	.word	0x0800c485
 800a020:	0800c505 	.word	0x0800c505

0800a024 <__lshift>:
 800a024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a028:	460c      	mov	r4, r1
 800a02a:	6849      	ldr	r1, [r1, #4]
 800a02c:	6923      	ldr	r3, [r4, #16]
 800a02e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a032:	68a3      	ldr	r3, [r4, #8]
 800a034:	4607      	mov	r7, r0
 800a036:	4691      	mov	r9, r2
 800a038:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a03c:	f108 0601 	add.w	r6, r8, #1
 800a040:	42b3      	cmp	r3, r6
 800a042:	db0b      	blt.n	800a05c <__lshift+0x38>
 800a044:	4638      	mov	r0, r7
 800a046:	f7ff fddf 	bl	8009c08 <_Balloc>
 800a04a:	4605      	mov	r5, r0
 800a04c:	b948      	cbnz	r0, 800a062 <__lshift+0x3e>
 800a04e:	4602      	mov	r2, r0
 800a050:	4b28      	ldr	r3, [pc, #160]	@ (800a0f4 <__lshift+0xd0>)
 800a052:	4829      	ldr	r0, [pc, #164]	@ (800a0f8 <__lshift+0xd4>)
 800a054:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a058:	f000 fd5c 	bl	800ab14 <__assert_func>
 800a05c:	3101      	adds	r1, #1
 800a05e:	005b      	lsls	r3, r3, #1
 800a060:	e7ee      	b.n	800a040 <__lshift+0x1c>
 800a062:	2300      	movs	r3, #0
 800a064:	f100 0114 	add.w	r1, r0, #20
 800a068:	f100 0210 	add.w	r2, r0, #16
 800a06c:	4618      	mov	r0, r3
 800a06e:	4553      	cmp	r3, sl
 800a070:	db33      	blt.n	800a0da <__lshift+0xb6>
 800a072:	6920      	ldr	r0, [r4, #16]
 800a074:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a078:	f104 0314 	add.w	r3, r4, #20
 800a07c:	f019 091f 	ands.w	r9, r9, #31
 800a080:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a084:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a088:	d02b      	beq.n	800a0e2 <__lshift+0xbe>
 800a08a:	f1c9 0e20 	rsb	lr, r9, #32
 800a08e:	468a      	mov	sl, r1
 800a090:	2200      	movs	r2, #0
 800a092:	6818      	ldr	r0, [r3, #0]
 800a094:	fa00 f009 	lsl.w	r0, r0, r9
 800a098:	4310      	orrs	r0, r2
 800a09a:	f84a 0b04 	str.w	r0, [sl], #4
 800a09e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0a2:	459c      	cmp	ip, r3
 800a0a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a0a8:	d8f3      	bhi.n	800a092 <__lshift+0x6e>
 800a0aa:	ebac 0304 	sub.w	r3, ip, r4
 800a0ae:	3b15      	subs	r3, #21
 800a0b0:	f023 0303 	bic.w	r3, r3, #3
 800a0b4:	3304      	adds	r3, #4
 800a0b6:	f104 0015 	add.w	r0, r4, #21
 800a0ba:	4584      	cmp	ip, r0
 800a0bc:	bf38      	it	cc
 800a0be:	2304      	movcc	r3, #4
 800a0c0:	50ca      	str	r2, [r1, r3]
 800a0c2:	b10a      	cbz	r2, 800a0c8 <__lshift+0xa4>
 800a0c4:	f108 0602 	add.w	r6, r8, #2
 800a0c8:	3e01      	subs	r6, #1
 800a0ca:	4638      	mov	r0, r7
 800a0cc:	612e      	str	r6, [r5, #16]
 800a0ce:	4621      	mov	r1, r4
 800a0d0:	f7ff fdda 	bl	8009c88 <_Bfree>
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0da:	f842 0f04 	str.w	r0, [r2, #4]!
 800a0de:	3301      	adds	r3, #1
 800a0e0:	e7c5      	b.n	800a06e <__lshift+0x4a>
 800a0e2:	3904      	subs	r1, #4
 800a0e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a0ec:	459c      	cmp	ip, r3
 800a0ee:	d8f9      	bhi.n	800a0e4 <__lshift+0xc0>
 800a0f0:	e7ea      	b.n	800a0c8 <__lshift+0xa4>
 800a0f2:	bf00      	nop
 800a0f4:	0800c4f4 	.word	0x0800c4f4
 800a0f8:	0800c505 	.word	0x0800c505

0800a0fc <__mcmp>:
 800a0fc:	690a      	ldr	r2, [r1, #16]
 800a0fe:	4603      	mov	r3, r0
 800a100:	6900      	ldr	r0, [r0, #16]
 800a102:	1a80      	subs	r0, r0, r2
 800a104:	b530      	push	{r4, r5, lr}
 800a106:	d10e      	bne.n	800a126 <__mcmp+0x2a>
 800a108:	3314      	adds	r3, #20
 800a10a:	3114      	adds	r1, #20
 800a10c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a110:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a114:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a118:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a11c:	4295      	cmp	r5, r2
 800a11e:	d003      	beq.n	800a128 <__mcmp+0x2c>
 800a120:	d205      	bcs.n	800a12e <__mcmp+0x32>
 800a122:	f04f 30ff 	mov.w	r0, #4294967295
 800a126:	bd30      	pop	{r4, r5, pc}
 800a128:	42a3      	cmp	r3, r4
 800a12a:	d3f3      	bcc.n	800a114 <__mcmp+0x18>
 800a12c:	e7fb      	b.n	800a126 <__mcmp+0x2a>
 800a12e:	2001      	movs	r0, #1
 800a130:	e7f9      	b.n	800a126 <__mcmp+0x2a>
	...

0800a134 <__mdiff>:
 800a134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a138:	4689      	mov	r9, r1
 800a13a:	4606      	mov	r6, r0
 800a13c:	4611      	mov	r1, r2
 800a13e:	4648      	mov	r0, r9
 800a140:	4614      	mov	r4, r2
 800a142:	f7ff ffdb 	bl	800a0fc <__mcmp>
 800a146:	1e05      	subs	r5, r0, #0
 800a148:	d112      	bne.n	800a170 <__mdiff+0x3c>
 800a14a:	4629      	mov	r1, r5
 800a14c:	4630      	mov	r0, r6
 800a14e:	f7ff fd5b 	bl	8009c08 <_Balloc>
 800a152:	4602      	mov	r2, r0
 800a154:	b928      	cbnz	r0, 800a162 <__mdiff+0x2e>
 800a156:	4b3f      	ldr	r3, [pc, #252]	@ (800a254 <__mdiff+0x120>)
 800a158:	f240 2137 	movw	r1, #567	@ 0x237
 800a15c:	483e      	ldr	r0, [pc, #248]	@ (800a258 <__mdiff+0x124>)
 800a15e:	f000 fcd9 	bl	800ab14 <__assert_func>
 800a162:	2301      	movs	r3, #1
 800a164:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a168:	4610      	mov	r0, r2
 800a16a:	b003      	add	sp, #12
 800a16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a170:	bfbc      	itt	lt
 800a172:	464b      	movlt	r3, r9
 800a174:	46a1      	movlt	r9, r4
 800a176:	4630      	mov	r0, r6
 800a178:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a17c:	bfba      	itte	lt
 800a17e:	461c      	movlt	r4, r3
 800a180:	2501      	movlt	r5, #1
 800a182:	2500      	movge	r5, #0
 800a184:	f7ff fd40 	bl	8009c08 <_Balloc>
 800a188:	4602      	mov	r2, r0
 800a18a:	b918      	cbnz	r0, 800a194 <__mdiff+0x60>
 800a18c:	4b31      	ldr	r3, [pc, #196]	@ (800a254 <__mdiff+0x120>)
 800a18e:	f240 2145 	movw	r1, #581	@ 0x245
 800a192:	e7e3      	b.n	800a15c <__mdiff+0x28>
 800a194:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a198:	6926      	ldr	r6, [r4, #16]
 800a19a:	60c5      	str	r5, [r0, #12]
 800a19c:	f109 0310 	add.w	r3, r9, #16
 800a1a0:	f109 0514 	add.w	r5, r9, #20
 800a1a4:	f104 0e14 	add.w	lr, r4, #20
 800a1a8:	f100 0b14 	add.w	fp, r0, #20
 800a1ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a1b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a1b4:	9301      	str	r3, [sp, #4]
 800a1b6:	46d9      	mov	r9, fp
 800a1b8:	f04f 0c00 	mov.w	ip, #0
 800a1bc:	9b01      	ldr	r3, [sp, #4]
 800a1be:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a1c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a1c6:	9301      	str	r3, [sp, #4]
 800a1c8:	fa1f f38a 	uxth.w	r3, sl
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	b283      	uxth	r3, r0
 800a1d0:	1acb      	subs	r3, r1, r3
 800a1d2:	0c00      	lsrs	r0, r0, #16
 800a1d4:	4463      	add	r3, ip
 800a1d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a1da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a1e4:	4576      	cmp	r6, lr
 800a1e6:	f849 3b04 	str.w	r3, [r9], #4
 800a1ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a1ee:	d8e5      	bhi.n	800a1bc <__mdiff+0x88>
 800a1f0:	1b33      	subs	r3, r6, r4
 800a1f2:	3b15      	subs	r3, #21
 800a1f4:	f023 0303 	bic.w	r3, r3, #3
 800a1f8:	3415      	adds	r4, #21
 800a1fa:	3304      	adds	r3, #4
 800a1fc:	42a6      	cmp	r6, r4
 800a1fe:	bf38      	it	cc
 800a200:	2304      	movcc	r3, #4
 800a202:	441d      	add	r5, r3
 800a204:	445b      	add	r3, fp
 800a206:	461e      	mov	r6, r3
 800a208:	462c      	mov	r4, r5
 800a20a:	4544      	cmp	r4, r8
 800a20c:	d30e      	bcc.n	800a22c <__mdiff+0xf8>
 800a20e:	f108 0103 	add.w	r1, r8, #3
 800a212:	1b49      	subs	r1, r1, r5
 800a214:	f021 0103 	bic.w	r1, r1, #3
 800a218:	3d03      	subs	r5, #3
 800a21a:	45a8      	cmp	r8, r5
 800a21c:	bf38      	it	cc
 800a21e:	2100      	movcc	r1, #0
 800a220:	440b      	add	r3, r1
 800a222:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a226:	b191      	cbz	r1, 800a24e <__mdiff+0x11a>
 800a228:	6117      	str	r7, [r2, #16]
 800a22a:	e79d      	b.n	800a168 <__mdiff+0x34>
 800a22c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a230:	46e6      	mov	lr, ip
 800a232:	0c08      	lsrs	r0, r1, #16
 800a234:	fa1c fc81 	uxtah	ip, ip, r1
 800a238:	4471      	add	r1, lr
 800a23a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a23e:	b289      	uxth	r1, r1
 800a240:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a244:	f846 1b04 	str.w	r1, [r6], #4
 800a248:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a24c:	e7dd      	b.n	800a20a <__mdiff+0xd6>
 800a24e:	3f01      	subs	r7, #1
 800a250:	e7e7      	b.n	800a222 <__mdiff+0xee>
 800a252:	bf00      	nop
 800a254:	0800c4f4 	.word	0x0800c4f4
 800a258:	0800c505 	.word	0x0800c505

0800a25c <__d2b>:
 800a25c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a260:	460f      	mov	r7, r1
 800a262:	2101      	movs	r1, #1
 800a264:	ec59 8b10 	vmov	r8, r9, d0
 800a268:	4616      	mov	r6, r2
 800a26a:	f7ff fccd 	bl	8009c08 <_Balloc>
 800a26e:	4604      	mov	r4, r0
 800a270:	b930      	cbnz	r0, 800a280 <__d2b+0x24>
 800a272:	4602      	mov	r2, r0
 800a274:	4b23      	ldr	r3, [pc, #140]	@ (800a304 <__d2b+0xa8>)
 800a276:	4824      	ldr	r0, [pc, #144]	@ (800a308 <__d2b+0xac>)
 800a278:	f240 310f 	movw	r1, #783	@ 0x30f
 800a27c:	f000 fc4a 	bl	800ab14 <__assert_func>
 800a280:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a284:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a288:	b10d      	cbz	r5, 800a28e <__d2b+0x32>
 800a28a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a28e:	9301      	str	r3, [sp, #4]
 800a290:	f1b8 0300 	subs.w	r3, r8, #0
 800a294:	d023      	beq.n	800a2de <__d2b+0x82>
 800a296:	4668      	mov	r0, sp
 800a298:	9300      	str	r3, [sp, #0]
 800a29a:	f7ff fd7c 	bl	8009d96 <__lo0bits>
 800a29e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a2a2:	b1d0      	cbz	r0, 800a2da <__d2b+0x7e>
 800a2a4:	f1c0 0320 	rsb	r3, r0, #32
 800a2a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ac:	430b      	orrs	r3, r1
 800a2ae:	40c2      	lsrs	r2, r0
 800a2b0:	6163      	str	r3, [r4, #20]
 800a2b2:	9201      	str	r2, [sp, #4]
 800a2b4:	9b01      	ldr	r3, [sp, #4]
 800a2b6:	61a3      	str	r3, [r4, #24]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	bf0c      	ite	eq
 800a2bc:	2201      	moveq	r2, #1
 800a2be:	2202      	movne	r2, #2
 800a2c0:	6122      	str	r2, [r4, #16]
 800a2c2:	b1a5      	cbz	r5, 800a2ee <__d2b+0x92>
 800a2c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a2c8:	4405      	add	r5, r0
 800a2ca:	603d      	str	r5, [r7, #0]
 800a2cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a2d0:	6030      	str	r0, [r6, #0]
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	b003      	add	sp, #12
 800a2d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2da:	6161      	str	r1, [r4, #20]
 800a2dc:	e7ea      	b.n	800a2b4 <__d2b+0x58>
 800a2de:	a801      	add	r0, sp, #4
 800a2e0:	f7ff fd59 	bl	8009d96 <__lo0bits>
 800a2e4:	9b01      	ldr	r3, [sp, #4]
 800a2e6:	6163      	str	r3, [r4, #20]
 800a2e8:	3020      	adds	r0, #32
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	e7e8      	b.n	800a2c0 <__d2b+0x64>
 800a2ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a2f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a2f6:	6038      	str	r0, [r7, #0]
 800a2f8:	6918      	ldr	r0, [r3, #16]
 800a2fa:	f7ff fd2d 	bl	8009d58 <__hi0bits>
 800a2fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a302:	e7e5      	b.n	800a2d0 <__d2b+0x74>
 800a304:	0800c4f4 	.word	0x0800c4f4
 800a308:	0800c505 	.word	0x0800c505

0800a30c <__ssputs_r>:
 800a30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a310:	688e      	ldr	r6, [r1, #8]
 800a312:	461f      	mov	r7, r3
 800a314:	42be      	cmp	r6, r7
 800a316:	680b      	ldr	r3, [r1, #0]
 800a318:	4682      	mov	sl, r0
 800a31a:	460c      	mov	r4, r1
 800a31c:	4690      	mov	r8, r2
 800a31e:	d82d      	bhi.n	800a37c <__ssputs_r+0x70>
 800a320:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a324:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a328:	d026      	beq.n	800a378 <__ssputs_r+0x6c>
 800a32a:	6965      	ldr	r5, [r4, #20]
 800a32c:	6909      	ldr	r1, [r1, #16]
 800a32e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a332:	eba3 0901 	sub.w	r9, r3, r1
 800a336:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a33a:	1c7b      	adds	r3, r7, #1
 800a33c:	444b      	add	r3, r9
 800a33e:	106d      	asrs	r5, r5, #1
 800a340:	429d      	cmp	r5, r3
 800a342:	bf38      	it	cc
 800a344:	461d      	movcc	r5, r3
 800a346:	0553      	lsls	r3, r2, #21
 800a348:	d527      	bpl.n	800a39a <__ssputs_r+0x8e>
 800a34a:	4629      	mov	r1, r5
 800a34c:	f7ff fbd0 	bl	8009af0 <_malloc_r>
 800a350:	4606      	mov	r6, r0
 800a352:	b360      	cbz	r0, 800a3ae <__ssputs_r+0xa2>
 800a354:	6921      	ldr	r1, [r4, #16]
 800a356:	464a      	mov	r2, r9
 800a358:	f7fe fcfb 	bl	8008d52 <memcpy>
 800a35c:	89a3      	ldrh	r3, [r4, #12]
 800a35e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a366:	81a3      	strh	r3, [r4, #12]
 800a368:	6126      	str	r6, [r4, #16]
 800a36a:	6165      	str	r5, [r4, #20]
 800a36c:	444e      	add	r6, r9
 800a36e:	eba5 0509 	sub.w	r5, r5, r9
 800a372:	6026      	str	r6, [r4, #0]
 800a374:	60a5      	str	r5, [r4, #8]
 800a376:	463e      	mov	r6, r7
 800a378:	42be      	cmp	r6, r7
 800a37a:	d900      	bls.n	800a37e <__ssputs_r+0x72>
 800a37c:	463e      	mov	r6, r7
 800a37e:	6820      	ldr	r0, [r4, #0]
 800a380:	4632      	mov	r2, r6
 800a382:	4641      	mov	r1, r8
 800a384:	f000 fb9c 	bl	800aac0 <memmove>
 800a388:	68a3      	ldr	r3, [r4, #8]
 800a38a:	1b9b      	subs	r3, r3, r6
 800a38c:	60a3      	str	r3, [r4, #8]
 800a38e:	6823      	ldr	r3, [r4, #0]
 800a390:	4433      	add	r3, r6
 800a392:	6023      	str	r3, [r4, #0]
 800a394:	2000      	movs	r0, #0
 800a396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a39a:	462a      	mov	r2, r5
 800a39c:	f000 fbfe 	bl	800ab9c <_realloc_r>
 800a3a0:	4606      	mov	r6, r0
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	d1e0      	bne.n	800a368 <__ssputs_r+0x5c>
 800a3a6:	6921      	ldr	r1, [r4, #16]
 800a3a8:	4650      	mov	r0, sl
 800a3aa:	f7ff fb2d 	bl	8009a08 <_free_r>
 800a3ae:	230c      	movs	r3, #12
 800a3b0:	f8ca 3000 	str.w	r3, [sl]
 800a3b4:	89a3      	ldrh	r3, [r4, #12]
 800a3b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3ba:	81a3      	strh	r3, [r4, #12]
 800a3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c0:	e7e9      	b.n	800a396 <__ssputs_r+0x8a>
	...

0800a3c4 <_svfiprintf_r>:
 800a3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c8:	4698      	mov	r8, r3
 800a3ca:	898b      	ldrh	r3, [r1, #12]
 800a3cc:	061b      	lsls	r3, r3, #24
 800a3ce:	b09d      	sub	sp, #116	@ 0x74
 800a3d0:	4607      	mov	r7, r0
 800a3d2:	460d      	mov	r5, r1
 800a3d4:	4614      	mov	r4, r2
 800a3d6:	d510      	bpl.n	800a3fa <_svfiprintf_r+0x36>
 800a3d8:	690b      	ldr	r3, [r1, #16]
 800a3da:	b973      	cbnz	r3, 800a3fa <_svfiprintf_r+0x36>
 800a3dc:	2140      	movs	r1, #64	@ 0x40
 800a3de:	f7ff fb87 	bl	8009af0 <_malloc_r>
 800a3e2:	6028      	str	r0, [r5, #0]
 800a3e4:	6128      	str	r0, [r5, #16]
 800a3e6:	b930      	cbnz	r0, 800a3f6 <_svfiprintf_r+0x32>
 800a3e8:	230c      	movs	r3, #12
 800a3ea:	603b      	str	r3, [r7, #0]
 800a3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f0:	b01d      	add	sp, #116	@ 0x74
 800a3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f6:	2340      	movs	r3, #64	@ 0x40
 800a3f8:	616b      	str	r3, [r5, #20]
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3fe:	2320      	movs	r3, #32
 800a400:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a404:	f8cd 800c 	str.w	r8, [sp, #12]
 800a408:	2330      	movs	r3, #48	@ 0x30
 800a40a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a5a8 <_svfiprintf_r+0x1e4>
 800a40e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a412:	f04f 0901 	mov.w	r9, #1
 800a416:	4623      	mov	r3, r4
 800a418:	469a      	mov	sl, r3
 800a41a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a41e:	b10a      	cbz	r2, 800a424 <_svfiprintf_r+0x60>
 800a420:	2a25      	cmp	r2, #37	@ 0x25
 800a422:	d1f9      	bne.n	800a418 <_svfiprintf_r+0x54>
 800a424:	ebba 0b04 	subs.w	fp, sl, r4
 800a428:	d00b      	beq.n	800a442 <_svfiprintf_r+0x7e>
 800a42a:	465b      	mov	r3, fp
 800a42c:	4622      	mov	r2, r4
 800a42e:	4629      	mov	r1, r5
 800a430:	4638      	mov	r0, r7
 800a432:	f7ff ff6b 	bl	800a30c <__ssputs_r>
 800a436:	3001      	adds	r0, #1
 800a438:	f000 80a7 	beq.w	800a58a <_svfiprintf_r+0x1c6>
 800a43c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a43e:	445a      	add	r2, fp
 800a440:	9209      	str	r2, [sp, #36]	@ 0x24
 800a442:	f89a 3000 	ldrb.w	r3, [sl]
 800a446:	2b00      	cmp	r3, #0
 800a448:	f000 809f 	beq.w	800a58a <_svfiprintf_r+0x1c6>
 800a44c:	2300      	movs	r3, #0
 800a44e:	f04f 32ff 	mov.w	r2, #4294967295
 800a452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a456:	f10a 0a01 	add.w	sl, sl, #1
 800a45a:	9304      	str	r3, [sp, #16]
 800a45c:	9307      	str	r3, [sp, #28]
 800a45e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a462:	931a      	str	r3, [sp, #104]	@ 0x68
 800a464:	4654      	mov	r4, sl
 800a466:	2205      	movs	r2, #5
 800a468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a46c:	484e      	ldr	r0, [pc, #312]	@ (800a5a8 <_svfiprintf_r+0x1e4>)
 800a46e:	f7f5 feb7 	bl	80001e0 <memchr>
 800a472:	9a04      	ldr	r2, [sp, #16]
 800a474:	b9d8      	cbnz	r0, 800a4ae <_svfiprintf_r+0xea>
 800a476:	06d0      	lsls	r0, r2, #27
 800a478:	bf44      	itt	mi
 800a47a:	2320      	movmi	r3, #32
 800a47c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a480:	0711      	lsls	r1, r2, #28
 800a482:	bf44      	itt	mi
 800a484:	232b      	movmi	r3, #43	@ 0x2b
 800a486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a48a:	f89a 3000 	ldrb.w	r3, [sl]
 800a48e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a490:	d015      	beq.n	800a4be <_svfiprintf_r+0xfa>
 800a492:	9a07      	ldr	r2, [sp, #28]
 800a494:	4654      	mov	r4, sl
 800a496:	2000      	movs	r0, #0
 800a498:	f04f 0c0a 	mov.w	ip, #10
 800a49c:	4621      	mov	r1, r4
 800a49e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4a2:	3b30      	subs	r3, #48	@ 0x30
 800a4a4:	2b09      	cmp	r3, #9
 800a4a6:	d94b      	bls.n	800a540 <_svfiprintf_r+0x17c>
 800a4a8:	b1b0      	cbz	r0, 800a4d8 <_svfiprintf_r+0x114>
 800a4aa:	9207      	str	r2, [sp, #28]
 800a4ac:	e014      	b.n	800a4d8 <_svfiprintf_r+0x114>
 800a4ae:	eba0 0308 	sub.w	r3, r0, r8
 800a4b2:	fa09 f303 	lsl.w	r3, r9, r3
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	9304      	str	r3, [sp, #16]
 800a4ba:	46a2      	mov	sl, r4
 800a4bc:	e7d2      	b.n	800a464 <_svfiprintf_r+0xa0>
 800a4be:	9b03      	ldr	r3, [sp, #12]
 800a4c0:	1d19      	adds	r1, r3, #4
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	9103      	str	r1, [sp, #12]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	bfbb      	ittet	lt
 800a4ca:	425b      	neglt	r3, r3
 800a4cc:	f042 0202 	orrlt.w	r2, r2, #2
 800a4d0:	9307      	strge	r3, [sp, #28]
 800a4d2:	9307      	strlt	r3, [sp, #28]
 800a4d4:	bfb8      	it	lt
 800a4d6:	9204      	strlt	r2, [sp, #16]
 800a4d8:	7823      	ldrb	r3, [r4, #0]
 800a4da:	2b2e      	cmp	r3, #46	@ 0x2e
 800a4dc:	d10a      	bne.n	800a4f4 <_svfiprintf_r+0x130>
 800a4de:	7863      	ldrb	r3, [r4, #1]
 800a4e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4e2:	d132      	bne.n	800a54a <_svfiprintf_r+0x186>
 800a4e4:	9b03      	ldr	r3, [sp, #12]
 800a4e6:	1d1a      	adds	r2, r3, #4
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	9203      	str	r2, [sp, #12]
 800a4ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a4f0:	3402      	adds	r4, #2
 800a4f2:	9305      	str	r3, [sp, #20]
 800a4f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a5b8 <_svfiprintf_r+0x1f4>
 800a4f8:	7821      	ldrb	r1, [r4, #0]
 800a4fa:	2203      	movs	r2, #3
 800a4fc:	4650      	mov	r0, sl
 800a4fe:	f7f5 fe6f 	bl	80001e0 <memchr>
 800a502:	b138      	cbz	r0, 800a514 <_svfiprintf_r+0x150>
 800a504:	9b04      	ldr	r3, [sp, #16]
 800a506:	eba0 000a 	sub.w	r0, r0, sl
 800a50a:	2240      	movs	r2, #64	@ 0x40
 800a50c:	4082      	lsls	r2, r0
 800a50e:	4313      	orrs	r3, r2
 800a510:	3401      	adds	r4, #1
 800a512:	9304      	str	r3, [sp, #16]
 800a514:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a518:	4824      	ldr	r0, [pc, #144]	@ (800a5ac <_svfiprintf_r+0x1e8>)
 800a51a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a51e:	2206      	movs	r2, #6
 800a520:	f7f5 fe5e 	bl	80001e0 <memchr>
 800a524:	2800      	cmp	r0, #0
 800a526:	d036      	beq.n	800a596 <_svfiprintf_r+0x1d2>
 800a528:	4b21      	ldr	r3, [pc, #132]	@ (800a5b0 <_svfiprintf_r+0x1ec>)
 800a52a:	bb1b      	cbnz	r3, 800a574 <_svfiprintf_r+0x1b0>
 800a52c:	9b03      	ldr	r3, [sp, #12]
 800a52e:	3307      	adds	r3, #7
 800a530:	f023 0307 	bic.w	r3, r3, #7
 800a534:	3308      	adds	r3, #8
 800a536:	9303      	str	r3, [sp, #12]
 800a538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a53a:	4433      	add	r3, r6
 800a53c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a53e:	e76a      	b.n	800a416 <_svfiprintf_r+0x52>
 800a540:	fb0c 3202 	mla	r2, ip, r2, r3
 800a544:	460c      	mov	r4, r1
 800a546:	2001      	movs	r0, #1
 800a548:	e7a8      	b.n	800a49c <_svfiprintf_r+0xd8>
 800a54a:	2300      	movs	r3, #0
 800a54c:	3401      	adds	r4, #1
 800a54e:	9305      	str	r3, [sp, #20]
 800a550:	4619      	mov	r1, r3
 800a552:	f04f 0c0a 	mov.w	ip, #10
 800a556:	4620      	mov	r0, r4
 800a558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a55c:	3a30      	subs	r2, #48	@ 0x30
 800a55e:	2a09      	cmp	r2, #9
 800a560:	d903      	bls.n	800a56a <_svfiprintf_r+0x1a6>
 800a562:	2b00      	cmp	r3, #0
 800a564:	d0c6      	beq.n	800a4f4 <_svfiprintf_r+0x130>
 800a566:	9105      	str	r1, [sp, #20]
 800a568:	e7c4      	b.n	800a4f4 <_svfiprintf_r+0x130>
 800a56a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a56e:	4604      	mov	r4, r0
 800a570:	2301      	movs	r3, #1
 800a572:	e7f0      	b.n	800a556 <_svfiprintf_r+0x192>
 800a574:	ab03      	add	r3, sp, #12
 800a576:	9300      	str	r3, [sp, #0]
 800a578:	462a      	mov	r2, r5
 800a57a:	4b0e      	ldr	r3, [pc, #56]	@ (800a5b4 <_svfiprintf_r+0x1f0>)
 800a57c:	a904      	add	r1, sp, #16
 800a57e:	4638      	mov	r0, r7
 800a580:	f7fd fe22 	bl	80081c8 <_printf_float>
 800a584:	1c42      	adds	r2, r0, #1
 800a586:	4606      	mov	r6, r0
 800a588:	d1d6      	bne.n	800a538 <_svfiprintf_r+0x174>
 800a58a:	89ab      	ldrh	r3, [r5, #12]
 800a58c:	065b      	lsls	r3, r3, #25
 800a58e:	f53f af2d 	bmi.w	800a3ec <_svfiprintf_r+0x28>
 800a592:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a594:	e72c      	b.n	800a3f0 <_svfiprintf_r+0x2c>
 800a596:	ab03      	add	r3, sp, #12
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	462a      	mov	r2, r5
 800a59c:	4b05      	ldr	r3, [pc, #20]	@ (800a5b4 <_svfiprintf_r+0x1f0>)
 800a59e:	a904      	add	r1, sp, #16
 800a5a0:	4638      	mov	r0, r7
 800a5a2:	f7fe f8a9 	bl	80086f8 <_printf_i>
 800a5a6:	e7ed      	b.n	800a584 <_svfiprintf_r+0x1c0>
 800a5a8:	0800c660 	.word	0x0800c660
 800a5ac:	0800c66a 	.word	0x0800c66a
 800a5b0:	080081c9 	.word	0x080081c9
 800a5b4:	0800a30d 	.word	0x0800a30d
 800a5b8:	0800c666 	.word	0x0800c666

0800a5bc <__sfputc_r>:
 800a5bc:	6893      	ldr	r3, [r2, #8]
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	b410      	push	{r4}
 800a5c4:	6093      	str	r3, [r2, #8]
 800a5c6:	da08      	bge.n	800a5da <__sfputc_r+0x1e>
 800a5c8:	6994      	ldr	r4, [r2, #24]
 800a5ca:	42a3      	cmp	r3, r4
 800a5cc:	db01      	blt.n	800a5d2 <__sfputc_r+0x16>
 800a5ce:	290a      	cmp	r1, #10
 800a5d0:	d103      	bne.n	800a5da <__sfputc_r+0x1e>
 800a5d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5d6:	f000 b9df 	b.w	800a998 <__swbuf_r>
 800a5da:	6813      	ldr	r3, [r2, #0]
 800a5dc:	1c58      	adds	r0, r3, #1
 800a5de:	6010      	str	r0, [r2, #0]
 800a5e0:	7019      	strb	r1, [r3, #0]
 800a5e2:	4608      	mov	r0, r1
 800a5e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5e8:	4770      	bx	lr

0800a5ea <__sfputs_r>:
 800a5ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ec:	4606      	mov	r6, r0
 800a5ee:	460f      	mov	r7, r1
 800a5f0:	4614      	mov	r4, r2
 800a5f2:	18d5      	adds	r5, r2, r3
 800a5f4:	42ac      	cmp	r4, r5
 800a5f6:	d101      	bne.n	800a5fc <__sfputs_r+0x12>
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	e007      	b.n	800a60c <__sfputs_r+0x22>
 800a5fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a600:	463a      	mov	r2, r7
 800a602:	4630      	mov	r0, r6
 800a604:	f7ff ffda 	bl	800a5bc <__sfputc_r>
 800a608:	1c43      	adds	r3, r0, #1
 800a60a:	d1f3      	bne.n	800a5f4 <__sfputs_r+0xa>
 800a60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a610 <_vfiprintf_r>:
 800a610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a614:	460d      	mov	r5, r1
 800a616:	b09d      	sub	sp, #116	@ 0x74
 800a618:	4614      	mov	r4, r2
 800a61a:	4698      	mov	r8, r3
 800a61c:	4606      	mov	r6, r0
 800a61e:	b118      	cbz	r0, 800a628 <_vfiprintf_r+0x18>
 800a620:	6a03      	ldr	r3, [r0, #32]
 800a622:	b90b      	cbnz	r3, 800a628 <_vfiprintf_r+0x18>
 800a624:	f7fe fa14 	bl	8008a50 <__sinit>
 800a628:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a62a:	07d9      	lsls	r1, r3, #31
 800a62c:	d405      	bmi.n	800a63a <_vfiprintf_r+0x2a>
 800a62e:	89ab      	ldrh	r3, [r5, #12]
 800a630:	059a      	lsls	r2, r3, #22
 800a632:	d402      	bmi.n	800a63a <_vfiprintf_r+0x2a>
 800a634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a636:	f7fe fb8a 	bl	8008d4e <__retarget_lock_acquire_recursive>
 800a63a:	89ab      	ldrh	r3, [r5, #12]
 800a63c:	071b      	lsls	r3, r3, #28
 800a63e:	d501      	bpl.n	800a644 <_vfiprintf_r+0x34>
 800a640:	692b      	ldr	r3, [r5, #16]
 800a642:	b99b      	cbnz	r3, 800a66c <_vfiprintf_r+0x5c>
 800a644:	4629      	mov	r1, r5
 800a646:	4630      	mov	r0, r6
 800a648:	f000 f9e4 	bl	800aa14 <__swsetup_r>
 800a64c:	b170      	cbz	r0, 800a66c <_vfiprintf_r+0x5c>
 800a64e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a650:	07dc      	lsls	r4, r3, #31
 800a652:	d504      	bpl.n	800a65e <_vfiprintf_r+0x4e>
 800a654:	f04f 30ff 	mov.w	r0, #4294967295
 800a658:	b01d      	add	sp, #116	@ 0x74
 800a65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a65e:	89ab      	ldrh	r3, [r5, #12]
 800a660:	0598      	lsls	r0, r3, #22
 800a662:	d4f7      	bmi.n	800a654 <_vfiprintf_r+0x44>
 800a664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a666:	f7fe fb73 	bl	8008d50 <__retarget_lock_release_recursive>
 800a66a:	e7f3      	b.n	800a654 <_vfiprintf_r+0x44>
 800a66c:	2300      	movs	r3, #0
 800a66e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a670:	2320      	movs	r3, #32
 800a672:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a676:	f8cd 800c 	str.w	r8, [sp, #12]
 800a67a:	2330      	movs	r3, #48	@ 0x30
 800a67c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a82c <_vfiprintf_r+0x21c>
 800a680:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a684:	f04f 0901 	mov.w	r9, #1
 800a688:	4623      	mov	r3, r4
 800a68a:	469a      	mov	sl, r3
 800a68c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a690:	b10a      	cbz	r2, 800a696 <_vfiprintf_r+0x86>
 800a692:	2a25      	cmp	r2, #37	@ 0x25
 800a694:	d1f9      	bne.n	800a68a <_vfiprintf_r+0x7a>
 800a696:	ebba 0b04 	subs.w	fp, sl, r4
 800a69a:	d00b      	beq.n	800a6b4 <_vfiprintf_r+0xa4>
 800a69c:	465b      	mov	r3, fp
 800a69e:	4622      	mov	r2, r4
 800a6a0:	4629      	mov	r1, r5
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	f7ff ffa1 	bl	800a5ea <__sfputs_r>
 800a6a8:	3001      	adds	r0, #1
 800a6aa:	f000 80a7 	beq.w	800a7fc <_vfiprintf_r+0x1ec>
 800a6ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6b0:	445a      	add	r2, fp
 800a6b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f000 809f 	beq.w	800a7fc <_vfiprintf_r+0x1ec>
 800a6be:	2300      	movs	r3, #0
 800a6c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6c8:	f10a 0a01 	add.w	sl, sl, #1
 800a6cc:	9304      	str	r3, [sp, #16]
 800a6ce:	9307      	str	r3, [sp, #28]
 800a6d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a6d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a6d6:	4654      	mov	r4, sl
 800a6d8:	2205      	movs	r2, #5
 800a6da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6de:	4853      	ldr	r0, [pc, #332]	@ (800a82c <_vfiprintf_r+0x21c>)
 800a6e0:	f7f5 fd7e 	bl	80001e0 <memchr>
 800a6e4:	9a04      	ldr	r2, [sp, #16]
 800a6e6:	b9d8      	cbnz	r0, 800a720 <_vfiprintf_r+0x110>
 800a6e8:	06d1      	lsls	r1, r2, #27
 800a6ea:	bf44      	itt	mi
 800a6ec:	2320      	movmi	r3, #32
 800a6ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6f2:	0713      	lsls	r3, r2, #28
 800a6f4:	bf44      	itt	mi
 800a6f6:	232b      	movmi	r3, #43	@ 0x2b
 800a6f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6fc:	f89a 3000 	ldrb.w	r3, [sl]
 800a700:	2b2a      	cmp	r3, #42	@ 0x2a
 800a702:	d015      	beq.n	800a730 <_vfiprintf_r+0x120>
 800a704:	9a07      	ldr	r2, [sp, #28]
 800a706:	4654      	mov	r4, sl
 800a708:	2000      	movs	r0, #0
 800a70a:	f04f 0c0a 	mov.w	ip, #10
 800a70e:	4621      	mov	r1, r4
 800a710:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a714:	3b30      	subs	r3, #48	@ 0x30
 800a716:	2b09      	cmp	r3, #9
 800a718:	d94b      	bls.n	800a7b2 <_vfiprintf_r+0x1a2>
 800a71a:	b1b0      	cbz	r0, 800a74a <_vfiprintf_r+0x13a>
 800a71c:	9207      	str	r2, [sp, #28]
 800a71e:	e014      	b.n	800a74a <_vfiprintf_r+0x13a>
 800a720:	eba0 0308 	sub.w	r3, r0, r8
 800a724:	fa09 f303 	lsl.w	r3, r9, r3
 800a728:	4313      	orrs	r3, r2
 800a72a:	9304      	str	r3, [sp, #16]
 800a72c:	46a2      	mov	sl, r4
 800a72e:	e7d2      	b.n	800a6d6 <_vfiprintf_r+0xc6>
 800a730:	9b03      	ldr	r3, [sp, #12]
 800a732:	1d19      	adds	r1, r3, #4
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	9103      	str	r1, [sp, #12]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	bfbb      	ittet	lt
 800a73c:	425b      	neglt	r3, r3
 800a73e:	f042 0202 	orrlt.w	r2, r2, #2
 800a742:	9307      	strge	r3, [sp, #28]
 800a744:	9307      	strlt	r3, [sp, #28]
 800a746:	bfb8      	it	lt
 800a748:	9204      	strlt	r2, [sp, #16]
 800a74a:	7823      	ldrb	r3, [r4, #0]
 800a74c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a74e:	d10a      	bne.n	800a766 <_vfiprintf_r+0x156>
 800a750:	7863      	ldrb	r3, [r4, #1]
 800a752:	2b2a      	cmp	r3, #42	@ 0x2a
 800a754:	d132      	bne.n	800a7bc <_vfiprintf_r+0x1ac>
 800a756:	9b03      	ldr	r3, [sp, #12]
 800a758:	1d1a      	adds	r2, r3, #4
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	9203      	str	r2, [sp, #12]
 800a75e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a762:	3402      	adds	r4, #2
 800a764:	9305      	str	r3, [sp, #20]
 800a766:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a83c <_vfiprintf_r+0x22c>
 800a76a:	7821      	ldrb	r1, [r4, #0]
 800a76c:	2203      	movs	r2, #3
 800a76e:	4650      	mov	r0, sl
 800a770:	f7f5 fd36 	bl	80001e0 <memchr>
 800a774:	b138      	cbz	r0, 800a786 <_vfiprintf_r+0x176>
 800a776:	9b04      	ldr	r3, [sp, #16]
 800a778:	eba0 000a 	sub.w	r0, r0, sl
 800a77c:	2240      	movs	r2, #64	@ 0x40
 800a77e:	4082      	lsls	r2, r0
 800a780:	4313      	orrs	r3, r2
 800a782:	3401      	adds	r4, #1
 800a784:	9304      	str	r3, [sp, #16]
 800a786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a78a:	4829      	ldr	r0, [pc, #164]	@ (800a830 <_vfiprintf_r+0x220>)
 800a78c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a790:	2206      	movs	r2, #6
 800a792:	f7f5 fd25 	bl	80001e0 <memchr>
 800a796:	2800      	cmp	r0, #0
 800a798:	d03f      	beq.n	800a81a <_vfiprintf_r+0x20a>
 800a79a:	4b26      	ldr	r3, [pc, #152]	@ (800a834 <_vfiprintf_r+0x224>)
 800a79c:	bb1b      	cbnz	r3, 800a7e6 <_vfiprintf_r+0x1d6>
 800a79e:	9b03      	ldr	r3, [sp, #12]
 800a7a0:	3307      	adds	r3, #7
 800a7a2:	f023 0307 	bic.w	r3, r3, #7
 800a7a6:	3308      	adds	r3, #8
 800a7a8:	9303      	str	r3, [sp, #12]
 800a7aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7ac:	443b      	add	r3, r7
 800a7ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7b0:	e76a      	b.n	800a688 <_vfiprintf_r+0x78>
 800a7b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7b6:	460c      	mov	r4, r1
 800a7b8:	2001      	movs	r0, #1
 800a7ba:	e7a8      	b.n	800a70e <_vfiprintf_r+0xfe>
 800a7bc:	2300      	movs	r3, #0
 800a7be:	3401      	adds	r4, #1
 800a7c0:	9305      	str	r3, [sp, #20]
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	f04f 0c0a 	mov.w	ip, #10
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7ce:	3a30      	subs	r2, #48	@ 0x30
 800a7d0:	2a09      	cmp	r2, #9
 800a7d2:	d903      	bls.n	800a7dc <_vfiprintf_r+0x1cc>
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d0c6      	beq.n	800a766 <_vfiprintf_r+0x156>
 800a7d8:	9105      	str	r1, [sp, #20]
 800a7da:	e7c4      	b.n	800a766 <_vfiprintf_r+0x156>
 800a7dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e7f0      	b.n	800a7c8 <_vfiprintf_r+0x1b8>
 800a7e6:	ab03      	add	r3, sp, #12
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	462a      	mov	r2, r5
 800a7ec:	4b12      	ldr	r3, [pc, #72]	@ (800a838 <_vfiprintf_r+0x228>)
 800a7ee:	a904      	add	r1, sp, #16
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	f7fd fce9 	bl	80081c8 <_printf_float>
 800a7f6:	4607      	mov	r7, r0
 800a7f8:	1c78      	adds	r0, r7, #1
 800a7fa:	d1d6      	bne.n	800a7aa <_vfiprintf_r+0x19a>
 800a7fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7fe:	07d9      	lsls	r1, r3, #31
 800a800:	d405      	bmi.n	800a80e <_vfiprintf_r+0x1fe>
 800a802:	89ab      	ldrh	r3, [r5, #12]
 800a804:	059a      	lsls	r2, r3, #22
 800a806:	d402      	bmi.n	800a80e <_vfiprintf_r+0x1fe>
 800a808:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a80a:	f7fe faa1 	bl	8008d50 <__retarget_lock_release_recursive>
 800a80e:	89ab      	ldrh	r3, [r5, #12]
 800a810:	065b      	lsls	r3, r3, #25
 800a812:	f53f af1f 	bmi.w	800a654 <_vfiprintf_r+0x44>
 800a816:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a818:	e71e      	b.n	800a658 <_vfiprintf_r+0x48>
 800a81a:	ab03      	add	r3, sp, #12
 800a81c:	9300      	str	r3, [sp, #0]
 800a81e:	462a      	mov	r2, r5
 800a820:	4b05      	ldr	r3, [pc, #20]	@ (800a838 <_vfiprintf_r+0x228>)
 800a822:	a904      	add	r1, sp, #16
 800a824:	4630      	mov	r0, r6
 800a826:	f7fd ff67 	bl	80086f8 <_printf_i>
 800a82a:	e7e4      	b.n	800a7f6 <_vfiprintf_r+0x1e6>
 800a82c:	0800c660 	.word	0x0800c660
 800a830:	0800c66a 	.word	0x0800c66a
 800a834:	080081c9 	.word	0x080081c9
 800a838:	0800a5eb 	.word	0x0800a5eb
 800a83c:	0800c666 	.word	0x0800c666

0800a840 <__sflush_r>:
 800a840:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a848:	0716      	lsls	r6, r2, #28
 800a84a:	4605      	mov	r5, r0
 800a84c:	460c      	mov	r4, r1
 800a84e:	d454      	bmi.n	800a8fa <__sflush_r+0xba>
 800a850:	684b      	ldr	r3, [r1, #4]
 800a852:	2b00      	cmp	r3, #0
 800a854:	dc02      	bgt.n	800a85c <__sflush_r+0x1c>
 800a856:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a858:	2b00      	cmp	r3, #0
 800a85a:	dd48      	ble.n	800a8ee <__sflush_r+0xae>
 800a85c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a85e:	2e00      	cmp	r6, #0
 800a860:	d045      	beq.n	800a8ee <__sflush_r+0xae>
 800a862:	2300      	movs	r3, #0
 800a864:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a868:	682f      	ldr	r7, [r5, #0]
 800a86a:	6a21      	ldr	r1, [r4, #32]
 800a86c:	602b      	str	r3, [r5, #0]
 800a86e:	d030      	beq.n	800a8d2 <__sflush_r+0x92>
 800a870:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a872:	89a3      	ldrh	r3, [r4, #12]
 800a874:	0759      	lsls	r1, r3, #29
 800a876:	d505      	bpl.n	800a884 <__sflush_r+0x44>
 800a878:	6863      	ldr	r3, [r4, #4]
 800a87a:	1ad2      	subs	r2, r2, r3
 800a87c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a87e:	b10b      	cbz	r3, 800a884 <__sflush_r+0x44>
 800a880:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a882:	1ad2      	subs	r2, r2, r3
 800a884:	2300      	movs	r3, #0
 800a886:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a888:	6a21      	ldr	r1, [r4, #32]
 800a88a:	4628      	mov	r0, r5
 800a88c:	47b0      	blx	r6
 800a88e:	1c43      	adds	r3, r0, #1
 800a890:	89a3      	ldrh	r3, [r4, #12]
 800a892:	d106      	bne.n	800a8a2 <__sflush_r+0x62>
 800a894:	6829      	ldr	r1, [r5, #0]
 800a896:	291d      	cmp	r1, #29
 800a898:	d82b      	bhi.n	800a8f2 <__sflush_r+0xb2>
 800a89a:	4a2a      	ldr	r2, [pc, #168]	@ (800a944 <__sflush_r+0x104>)
 800a89c:	410a      	asrs	r2, r1
 800a89e:	07d6      	lsls	r6, r2, #31
 800a8a0:	d427      	bmi.n	800a8f2 <__sflush_r+0xb2>
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	6062      	str	r2, [r4, #4]
 800a8a6:	04d9      	lsls	r1, r3, #19
 800a8a8:	6922      	ldr	r2, [r4, #16]
 800a8aa:	6022      	str	r2, [r4, #0]
 800a8ac:	d504      	bpl.n	800a8b8 <__sflush_r+0x78>
 800a8ae:	1c42      	adds	r2, r0, #1
 800a8b0:	d101      	bne.n	800a8b6 <__sflush_r+0x76>
 800a8b2:	682b      	ldr	r3, [r5, #0]
 800a8b4:	b903      	cbnz	r3, 800a8b8 <__sflush_r+0x78>
 800a8b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a8b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8ba:	602f      	str	r7, [r5, #0]
 800a8bc:	b1b9      	cbz	r1, 800a8ee <__sflush_r+0xae>
 800a8be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8c2:	4299      	cmp	r1, r3
 800a8c4:	d002      	beq.n	800a8cc <__sflush_r+0x8c>
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	f7ff f89e 	bl	8009a08 <_free_r>
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800a8d0:	e00d      	b.n	800a8ee <__sflush_r+0xae>
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	4628      	mov	r0, r5
 800a8d6:	47b0      	blx	r6
 800a8d8:	4602      	mov	r2, r0
 800a8da:	1c50      	adds	r0, r2, #1
 800a8dc:	d1c9      	bne.n	800a872 <__sflush_r+0x32>
 800a8de:	682b      	ldr	r3, [r5, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d0c6      	beq.n	800a872 <__sflush_r+0x32>
 800a8e4:	2b1d      	cmp	r3, #29
 800a8e6:	d001      	beq.n	800a8ec <__sflush_r+0xac>
 800a8e8:	2b16      	cmp	r3, #22
 800a8ea:	d11e      	bne.n	800a92a <__sflush_r+0xea>
 800a8ec:	602f      	str	r7, [r5, #0]
 800a8ee:	2000      	movs	r0, #0
 800a8f0:	e022      	b.n	800a938 <__sflush_r+0xf8>
 800a8f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8f6:	b21b      	sxth	r3, r3
 800a8f8:	e01b      	b.n	800a932 <__sflush_r+0xf2>
 800a8fa:	690f      	ldr	r7, [r1, #16]
 800a8fc:	2f00      	cmp	r7, #0
 800a8fe:	d0f6      	beq.n	800a8ee <__sflush_r+0xae>
 800a900:	0793      	lsls	r3, r2, #30
 800a902:	680e      	ldr	r6, [r1, #0]
 800a904:	bf08      	it	eq
 800a906:	694b      	ldreq	r3, [r1, #20]
 800a908:	600f      	str	r7, [r1, #0]
 800a90a:	bf18      	it	ne
 800a90c:	2300      	movne	r3, #0
 800a90e:	eba6 0807 	sub.w	r8, r6, r7
 800a912:	608b      	str	r3, [r1, #8]
 800a914:	f1b8 0f00 	cmp.w	r8, #0
 800a918:	dde9      	ble.n	800a8ee <__sflush_r+0xae>
 800a91a:	6a21      	ldr	r1, [r4, #32]
 800a91c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a91e:	4643      	mov	r3, r8
 800a920:	463a      	mov	r2, r7
 800a922:	4628      	mov	r0, r5
 800a924:	47b0      	blx	r6
 800a926:	2800      	cmp	r0, #0
 800a928:	dc08      	bgt.n	800a93c <__sflush_r+0xfc>
 800a92a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a92e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a932:	81a3      	strh	r3, [r4, #12]
 800a934:	f04f 30ff 	mov.w	r0, #4294967295
 800a938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a93c:	4407      	add	r7, r0
 800a93e:	eba8 0800 	sub.w	r8, r8, r0
 800a942:	e7e7      	b.n	800a914 <__sflush_r+0xd4>
 800a944:	dfbffffe 	.word	0xdfbffffe

0800a948 <_fflush_r>:
 800a948:	b538      	push	{r3, r4, r5, lr}
 800a94a:	690b      	ldr	r3, [r1, #16]
 800a94c:	4605      	mov	r5, r0
 800a94e:	460c      	mov	r4, r1
 800a950:	b913      	cbnz	r3, 800a958 <_fflush_r+0x10>
 800a952:	2500      	movs	r5, #0
 800a954:	4628      	mov	r0, r5
 800a956:	bd38      	pop	{r3, r4, r5, pc}
 800a958:	b118      	cbz	r0, 800a962 <_fflush_r+0x1a>
 800a95a:	6a03      	ldr	r3, [r0, #32]
 800a95c:	b90b      	cbnz	r3, 800a962 <_fflush_r+0x1a>
 800a95e:	f7fe f877 	bl	8008a50 <__sinit>
 800a962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d0f3      	beq.n	800a952 <_fflush_r+0xa>
 800a96a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a96c:	07d0      	lsls	r0, r2, #31
 800a96e:	d404      	bmi.n	800a97a <_fflush_r+0x32>
 800a970:	0599      	lsls	r1, r3, #22
 800a972:	d402      	bmi.n	800a97a <_fflush_r+0x32>
 800a974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a976:	f7fe f9ea 	bl	8008d4e <__retarget_lock_acquire_recursive>
 800a97a:	4628      	mov	r0, r5
 800a97c:	4621      	mov	r1, r4
 800a97e:	f7ff ff5f 	bl	800a840 <__sflush_r>
 800a982:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a984:	07da      	lsls	r2, r3, #31
 800a986:	4605      	mov	r5, r0
 800a988:	d4e4      	bmi.n	800a954 <_fflush_r+0xc>
 800a98a:	89a3      	ldrh	r3, [r4, #12]
 800a98c:	059b      	lsls	r3, r3, #22
 800a98e:	d4e1      	bmi.n	800a954 <_fflush_r+0xc>
 800a990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a992:	f7fe f9dd 	bl	8008d50 <__retarget_lock_release_recursive>
 800a996:	e7dd      	b.n	800a954 <_fflush_r+0xc>

0800a998 <__swbuf_r>:
 800a998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a99a:	460e      	mov	r6, r1
 800a99c:	4614      	mov	r4, r2
 800a99e:	4605      	mov	r5, r0
 800a9a0:	b118      	cbz	r0, 800a9aa <__swbuf_r+0x12>
 800a9a2:	6a03      	ldr	r3, [r0, #32]
 800a9a4:	b90b      	cbnz	r3, 800a9aa <__swbuf_r+0x12>
 800a9a6:	f7fe f853 	bl	8008a50 <__sinit>
 800a9aa:	69a3      	ldr	r3, [r4, #24]
 800a9ac:	60a3      	str	r3, [r4, #8]
 800a9ae:	89a3      	ldrh	r3, [r4, #12]
 800a9b0:	071a      	lsls	r2, r3, #28
 800a9b2:	d501      	bpl.n	800a9b8 <__swbuf_r+0x20>
 800a9b4:	6923      	ldr	r3, [r4, #16]
 800a9b6:	b943      	cbnz	r3, 800a9ca <__swbuf_r+0x32>
 800a9b8:	4621      	mov	r1, r4
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	f000 f82a 	bl	800aa14 <__swsetup_r>
 800a9c0:	b118      	cbz	r0, 800a9ca <__swbuf_r+0x32>
 800a9c2:	f04f 37ff 	mov.w	r7, #4294967295
 800a9c6:	4638      	mov	r0, r7
 800a9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9ca:	6823      	ldr	r3, [r4, #0]
 800a9cc:	6922      	ldr	r2, [r4, #16]
 800a9ce:	1a98      	subs	r0, r3, r2
 800a9d0:	6963      	ldr	r3, [r4, #20]
 800a9d2:	b2f6      	uxtb	r6, r6
 800a9d4:	4283      	cmp	r3, r0
 800a9d6:	4637      	mov	r7, r6
 800a9d8:	dc05      	bgt.n	800a9e6 <__swbuf_r+0x4e>
 800a9da:	4621      	mov	r1, r4
 800a9dc:	4628      	mov	r0, r5
 800a9de:	f7ff ffb3 	bl	800a948 <_fflush_r>
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	d1ed      	bne.n	800a9c2 <__swbuf_r+0x2a>
 800a9e6:	68a3      	ldr	r3, [r4, #8]
 800a9e8:	3b01      	subs	r3, #1
 800a9ea:	60a3      	str	r3, [r4, #8]
 800a9ec:	6823      	ldr	r3, [r4, #0]
 800a9ee:	1c5a      	adds	r2, r3, #1
 800a9f0:	6022      	str	r2, [r4, #0]
 800a9f2:	701e      	strb	r6, [r3, #0]
 800a9f4:	6962      	ldr	r2, [r4, #20]
 800a9f6:	1c43      	adds	r3, r0, #1
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d004      	beq.n	800aa06 <__swbuf_r+0x6e>
 800a9fc:	89a3      	ldrh	r3, [r4, #12]
 800a9fe:	07db      	lsls	r3, r3, #31
 800aa00:	d5e1      	bpl.n	800a9c6 <__swbuf_r+0x2e>
 800aa02:	2e0a      	cmp	r6, #10
 800aa04:	d1df      	bne.n	800a9c6 <__swbuf_r+0x2e>
 800aa06:	4621      	mov	r1, r4
 800aa08:	4628      	mov	r0, r5
 800aa0a:	f7ff ff9d 	bl	800a948 <_fflush_r>
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	d0d9      	beq.n	800a9c6 <__swbuf_r+0x2e>
 800aa12:	e7d6      	b.n	800a9c2 <__swbuf_r+0x2a>

0800aa14 <__swsetup_r>:
 800aa14:	b538      	push	{r3, r4, r5, lr}
 800aa16:	4b29      	ldr	r3, [pc, #164]	@ (800aabc <__swsetup_r+0xa8>)
 800aa18:	4605      	mov	r5, r0
 800aa1a:	6818      	ldr	r0, [r3, #0]
 800aa1c:	460c      	mov	r4, r1
 800aa1e:	b118      	cbz	r0, 800aa28 <__swsetup_r+0x14>
 800aa20:	6a03      	ldr	r3, [r0, #32]
 800aa22:	b90b      	cbnz	r3, 800aa28 <__swsetup_r+0x14>
 800aa24:	f7fe f814 	bl	8008a50 <__sinit>
 800aa28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa2c:	0719      	lsls	r1, r3, #28
 800aa2e:	d422      	bmi.n	800aa76 <__swsetup_r+0x62>
 800aa30:	06da      	lsls	r2, r3, #27
 800aa32:	d407      	bmi.n	800aa44 <__swsetup_r+0x30>
 800aa34:	2209      	movs	r2, #9
 800aa36:	602a      	str	r2, [r5, #0]
 800aa38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa3c:	81a3      	strh	r3, [r4, #12]
 800aa3e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa42:	e033      	b.n	800aaac <__swsetup_r+0x98>
 800aa44:	0758      	lsls	r0, r3, #29
 800aa46:	d512      	bpl.n	800aa6e <__swsetup_r+0x5a>
 800aa48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa4a:	b141      	cbz	r1, 800aa5e <__swsetup_r+0x4a>
 800aa4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa50:	4299      	cmp	r1, r3
 800aa52:	d002      	beq.n	800aa5a <__swsetup_r+0x46>
 800aa54:	4628      	mov	r0, r5
 800aa56:	f7fe ffd7 	bl	8009a08 <_free_r>
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa5e:	89a3      	ldrh	r3, [r4, #12]
 800aa60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aa64:	81a3      	strh	r3, [r4, #12]
 800aa66:	2300      	movs	r3, #0
 800aa68:	6063      	str	r3, [r4, #4]
 800aa6a:	6923      	ldr	r3, [r4, #16]
 800aa6c:	6023      	str	r3, [r4, #0]
 800aa6e:	89a3      	ldrh	r3, [r4, #12]
 800aa70:	f043 0308 	orr.w	r3, r3, #8
 800aa74:	81a3      	strh	r3, [r4, #12]
 800aa76:	6923      	ldr	r3, [r4, #16]
 800aa78:	b94b      	cbnz	r3, 800aa8e <__swsetup_r+0x7a>
 800aa7a:	89a3      	ldrh	r3, [r4, #12]
 800aa7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aa80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa84:	d003      	beq.n	800aa8e <__swsetup_r+0x7a>
 800aa86:	4621      	mov	r1, r4
 800aa88:	4628      	mov	r0, r5
 800aa8a:	f000 f8fb 	bl	800ac84 <__smakebuf_r>
 800aa8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa92:	f013 0201 	ands.w	r2, r3, #1
 800aa96:	d00a      	beq.n	800aaae <__swsetup_r+0x9a>
 800aa98:	2200      	movs	r2, #0
 800aa9a:	60a2      	str	r2, [r4, #8]
 800aa9c:	6962      	ldr	r2, [r4, #20]
 800aa9e:	4252      	negs	r2, r2
 800aaa0:	61a2      	str	r2, [r4, #24]
 800aaa2:	6922      	ldr	r2, [r4, #16]
 800aaa4:	b942      	cbnz	r2, 800aab8 <__swsetup_r+0xa4>
 800aaa6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aaaa:	d1c5      	bne.n	800aa38 <__swsetup_r+0x24>
 800aaac:	bd38      	pop	{r3, r4, r5, pc}
 800aaae:	0799      	lsls	r1, r3, #30
 800aab0:	bf58      	it	pl
 800aab2:	6962      	ldrpl	r2, [r4, #20]
 800aab4:	60a2      	str	r2, [r4, #8]
 800aab6:	e7f4      	b.n	800aaa2 <__swsetup_r+0x8e>
 800aab8:	2000      	movs	r0, #0
 800aaba:	e7f7      	b.n	800aaac <__swsetup_r+0x98>
 800aabc:	2000001c 	.word	0x2000001c

0800aac0 <memmove>:
 800aac0:	4288      	cmp	r0, r1
 800aac2:	b510      	push	{r4, lr}
 800aac4:	eb01 0402 	add.w	r4, r1, r2
 800aac8:	d902      	bls.n	800aad0 <memmove+0x10>
 800aaca:	4284      	cmp	r4, r0
 800aacc:	4623      	mov	r3, r4
 800aace:	d807      	bhi.n	800aae0 <memmove+0x20>
 800aad0:	1e43      	subs	r3, r0, #1
 800aad2:	42a1      	cmp	r1, r4
 800aad4:	d008      	beq.n	800aae8 <memmove+0x28>
 800aad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aada:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aade:	e7f8      	b.n	800aad2 <memmove+0x12>
 800aae0:	4402      	add	r2, r0
 800aae2:	4601      	mov	r1, r0
 800aae4:	428a      	cmp	r2, r1
 800aae6:	d100      	bne.n	800aaea <memmove+0x2a>
 800aae8:	bd10      	pop	{r4, pc}
 800aaea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aaee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aaf2:	e7f7      	b.n	800aae4 <memmove+0x24>

0800aaf4 <_sbrk_r>:
 800aaf4:	b538      	push	{r3, r4, r5, lr}
 800aaf6:	4d06      	ldr	r5, [pc, #24]	@ (800ab10 <_sbrk_r+0x1c>)
 800aaf8:	2300      	movs	r3, #0
 800aafa:	4604      	mov	r4, r0
 800aafc:	4608      	mov	r0, r1
 800aafe:	602b      	str	r3, [r5, #0]
 800ab00:	f7f7 f818 	bl	8001b34 <_sbrk>
 800ab04:	1c43      	adds	r3, r0, #1
 800ab06:	d102      	bne.n	800ab0e <_sbrk_r+0x1a>
 800ab08:	682b      	ldr	r3, [r5, #0]
 800ab0a:	b103      	cbz	r3, 800ab0e <_sbrk_r+0x1a>
 800ab0c:	6023      	str	r3, [r4, #0]
 800ab0e:	bd38      	pop	{r3, r4, r5, pc}
 800ab10:	20004ed4 	.word	0x20004ed4

0800ab14 <__assert_func>:
 800ab14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab16:	4614      	mov	r4, r2
 800ab18:	461a      	mov	r2, r3
 800ab1a:	4b09      	ldr	r3, [pc, #36]	@ (800ab40 <__assert_func+0x2c>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4605      	mov	r5, r0
 800ab20:	68d8      	ldr	r0, [r3, #12]
 800ab22:	b954      	cbnz	r4, 800ab3a <__assert_func+0x26>
 800ab24:	4b07      	ldr	r3, [pc, #28]	@ (800ab44 <__assert_func+0x30>)
 800ab26:	461c      	mov	r4, r3
 800ab28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab2c:	9100      	str	r1, [sp, #0]
 800ab2e:	462b      	mov	r3, r5
 800ab30:	4905      	ldr	r1, [pc, #20]	@ (800ab48 <__assert_func+0x34>)
 800ab32:	f000 f86f 	bl	800ac14 <fiprintf>
 800ab36:	f000 f903 	bl	800ad40 <abort>
 800ab3a:	4b04      	ldr	r3, [pc, #16]	@ (800ab4c <__assert_func+0x38>)
 800ab3c:	e7f4      	b.n	800ab28 <__assert_func+0x14>
 800ab3e:	bf00      	nop
 800ab40:	2000001c 	.word	0x2000001c
 800ab44:	0800c6b6 	.word	0x0800c6b6
 800ab48:	0800c688 	.word	0x0800c688
 800ab4c:	0800c67b 	.word	0x0800c67b

0800ab50 <_calloc_r>:
 800ab50:	b570      	push	{r4, r5, r6, lr}
 800ab52:	fba1 5402 	umull	r5, r4, r1, r2
 800ab56:	b93c      	cbnz	r4, 800ab68 <_calloc_r+0x18>
 800ab58:	4629      	mov	r1, r5
 800ab5a:	f7fe ffc9 	bl	8009af0 <_malloc_r>
 800ab5e:	4606      	mov	r6, r0
 800ab60:	b928      	cbnz	r0, 800ab6e <_calloc_r+0x1e>
 800ab62:	2600      	movs	r6, #0
 800ab64:	4630      	mov	r0, r6
 800ab66:	bd70      	pop	{r4, r5, r6, pc}
 800ab68:	220c      	movs	r2, #12
 800ab6a:	6002      	str	r2, [r0, #0]
 800ab6c:	e7f9      	b.n	800ab62 <_calloc_r+0x12>
 800ab6e:	462a      	mov	r2, r5
 800ab70:	4621      	mov	r1, r4
 800ab72:	f7fe f818 	bl	8008ba6 <memset>
 800ab76:	e7f5      	b.n	800ab64 <_calloc_r+0x14>

0800ab78 <__ascii_mbtowc>:
 800ab78:	b082      	sub	sp, #8
 800ab7a:	b901      	cbnz	r1, 800ab7e <__ascii_mbtowc+0x6>
 800ab7c:	a901      	add	r1, sp, #4
 800ab7e:	b142      	cbz	r2, 800ab92 <__ascii_mbtowc+0x1a>
 800ab80:	b14b      	cbz	r3, 800ab96 <__ascii_mbtowc+0x1e>
 800ab82:	7813      	ldrb	r3, [r2, #0]
 800ab84:	600b      	str	r3, [r1, #0]
 800ab86:	7812      	ldrb	r2, [r2, #0]
 800ab88:	1e10      	subs	r0, r2, #0
 800ab8a:	bf18      	it	ne
 800ab8c:	2001      	movne	r0, #1
 800ab8e:	b002      	add	sp, #8
 800ab90:	4770      	bx	lr
 800ab92:	4610      	mov	r0, r2
 800ab94:	e7fb      	b.n	800ab8e <__ascii_mbtowc+0x16>
 800ab96:	f06f 0001 	mvn.w	r0, #1
 800ab9a:	e7f8      	b.n	800ab8e <__ascii_mbtowc+0x16>

0800ab9c <_realloc_r>:
 800ab9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba0:	4680      	mov	r8, r0
 800aba2:	4615      	mov	r5, r2
 800aba4:	460c      	mov	r4, r1
 800aba6:	b921      	cbnz	r1, 800abb2 <_realloc_r+0x16>
 800aba8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abac:	4611      	mov	r1, r2
 800abae:	f7fe bf9f 	b.w	8009af0 <_malloc_r>
 800abb2:	b92a      	cbnz	r2, 800abc0 <_realloc_r+0x24>
 800abb4:	f7fe ff28 	bl	8009a08 <_free_r>
 800abb8:	2400      	movs	r4, #0
 800abba:	4620      	mov	r0, r4
 800abbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abc0:	f000 f8c5 	bl	800ad4e <_malloc_usable_size_r>
 800abc4:	4285      	cmp	r5, r0
 800abc6:	4606      	mov	r6, r0
 800abc8:	d802      	bhi.n	800abd0 <_realloc_r+0x34>
 800abca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800abce:	d8f4      	bhi.n	800abba <_realloc_r+0x1e>
 800abd0:	4629      	mov	r1, r5
 800abd2:	4640      	mov	r0, r8
 800abd4:	f7fe ff8c 	bl	8009af0 <_malloc_r>
 800abd8:	4607      	mov	r7, r0
 800abda:	2800      	cmp	r0, #0
 800abdc:	d0ec      	beq.n	800abb8 <_realloc_r+0x1c>
 800abde:	42b5      	cmp	r5, r6
 800abe0:	462a      	mov	r2, r5
 800abe2:	4621      	mov	r1, r4
 800abe4:	bf28      	it	cs
 800abe6:	4632      	movcs	r2, r6
 800abe8:	f7fe f8b3 	bl	8008d52 <memcpy>
 800abec:	4621      	mov	r1, r4
 800abee:	4640      	mov	r0, r8
 800abf0:	f7fe ff0a 	bl	8009a08 <_free_r>
 800abf4:	463c      	mov	r4, r7
 800abf6:	e7e0      	b.n	800abba <_realloc_r+0x1e>

0800abf8 <__ascii_wctomb>:
 800abf8:	4603      	mov	r3, r0
 800abfa:	4608      	mov	r0, r1
 800abfc:	b141      	cbz	r1, 800ac10 <__ascii_wctomb+0x18>
 800abfe:	2aff      	cmp	r2, #255	@ 0xff
 800ac00:	d904      	bls.n	800ac0c <__ascii_wctomb+0x14>
 800ac02:	228a      	movs	r2, #138	@ 0x8a
 800ac04:	601a      	str	r2, [r3, #0]
 800ac06:	f04f 30ff 	mov.w	r0, #4294967295
 800ac0a:	4770      	bx	lr
 800ac0c:	700a      	strb	r2, [r1, #0]
 800ac0e:	2001      	movs	r0, #1
 800ac10:	4770      	bx	lr
	...

0800ac14 <fiprintf>:
 800ac14:	b40e      	push	{r1, r2, r3}
 800ac16:	b503      	push	{r0, r1, lr}
 800ac18:	4601      	mov	r1, r0
 800ac1a:	ab03      	add	r3, sp, #12
 800ac1c:	4805      	ldr	r0, [pc, #20]	@ (800ac34 <fiprintf+0x20>)
 800ac1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac22:	6800      	ldr	r0, [r0, #0]
 800ac24:	9301      	str	r3, [sp, #4]
 800ac26:	f7ff fcf3 	bl	800a610 <_vfiprintf_r>
 800ac2a:	b002      	add	sp, #8
 800ac2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac30:	b003      	add	sp, #12
 800ac32:	4770      	bx	lr
 800ac34:	2000001c 	.word	0x2000001c

0800ac38 <__swhatbuf_r>:
 800ac38:	b570      	push	{r4, r5, r6, lr}
 800ac3a:	460c      	mov	r4, r1
 800ac3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac40:	2900      	cmp	r1, #0
 800ac42:	b096      	sub	sp, #88	@ 0x58
 800ac44:	4615      	mov	r5, r2
 800ac46:	461e      	mov	r6, r3
 800ac48:	da0d      	bge.n	800ac66 <__swhatbuf_r+0x2e>
 800ac4a:	89a3      	ldrh	r3, [r4, #12]
 800ac4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ac50:	f04f 0100 	mov.w	r1, #0
 800ac54:	bf14      	ite	ne
 800ac56:	2340      	movne	r3, #64	@ 0x40
 800ac58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	6031      	str	r1, [r6, #0]
 800ac60:	602b      	str	r3, [r5, #0]
 800ac62:	b016      	add	sp, #88	@ 0x58
 800ac64:	bd70      	pop	{r4, r5, r6, pc}
 800ac66:	466a      	mov	r2, sp
 800ac68:	f000 f848 	bl	800acfc <_fstat_r>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	dbec      	blt.n	800ac4a <__swhatbuf_r+0x12>
 800ac70:	9901      	ldr	r1, [sp, #4]
 800ac72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac7a:	4259      	negs	r1, r3
 800ac7c:	4159      	adcs	r1, r3
 800ac7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac82:	e7eb      	b.n	800ac5c <__swhatbuf_r+0x24>

0800ac84 <__smakebuf_r>:
 800ac84:	898b      	ldrh	r3, [r1, #12]
 800ac86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac88:	079d      	lsls	r5, r3, #30
 800ac8a:	4606      	mov	r6, r0
 800ac8c:	460c      	mov	r4, r1
 800ac8e:	d507      	bpl.n	800aca0 <__smakebuf_r+0x1c>
 800ac90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac94:	6023      	str	r3, [r4, #0]
 800ac96:	6123      	str	r3, [r4, #16]
 800ac98:	2301      	movs	r3, #1
 800ac9a:	6163      	str	r3, [r4, #20]
 800ac9c:	b003      	add	sp, #12
 800ac9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aca0:	ab01      	add	r3, sp, #4
 800aca2:	466a      	mov	r2, sp
 800aca4:	f7ff ffc8 	bl	800ac38 <__swhatbuf_r>
 800aca8:	9f00      	ldr	r7, [sp, #0]
 800acaa:	4605      	mov	r5, r0
 800acac:	4639      	mov	r1, r7
 800acae:	4630      	mov	r0, r6
 800acb0:	f7fe ff1e 	bl	8009af0 <_malloc_r>
 800acb4:	b948      	cbnz	r0, 800acca <__smakebuf_r+0x46>
 800acb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acba:	059a      	lsls	r2, r3, #22
 800acbc:	d4ee      	bmi.n	800ac9c <__smakebuf_r+0x18>
 800acbe:	f023 0303 	bic.w	r3, r3, #3
 800acc2:	f043 0302 	orr.w	r3, r3, #2
 800acc6:	81a3      	strh	r3, [r4, #12]
 800acc8:	e7e2      	b.n	800ac90 <__smakebuf_r+0xc>
 800acca:	89a3      	ldrh	r3, [r4, #12]
 800accc:	6020      	str	r0, [r4, #0]
 800acce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acd2:	81a3      	strh	r3, [r4, #12]
 800acd4:	9b01      	ldr	r3, [sp, #4]
 800acd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800acda:	b15b      	cbz	r3, 800acf4 <__smakebuf_r+0x70>
 800acdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ace0:	4630      	mov	r0, r6
 800ace2:	f000 f81d 	bl	800ad20 <_isatty_r>
 800ace6:	b128      	cbz	r0, 800acf4 <__smakebuf_r+0x70>
 800ace8:	89a3      	ldrh	r3, [r4, #12]
 800acea:	f023 0303 	bic.w	r3, r3, #3
 800acee:	f043 0301 	orr.w	r3, r3, #1
 800acf2:	81a3      	strh	r3, [r4, #12]
 800acf4:	89a3      	ldrh	r3, [r4, #12]
 800acf6:	431d      	orrs	r5, r3
 800acf8:	81a5      	strh	r5, [r4, #12]
 800acfa:	e7cf      	b.n	800ac9c <__smakebuf_r+0x18>

0800acfc <_fstat_r>:
 800acfc:	b538      	push	{r3, r4, r5, lr}
 800acfe:	4d07      	ldr	r5, [pc, #28]	@ (800ad1c <_fstat_r+0x20>)
 800ad00:	2300      	movs	r3, #0
 800ad02:	4604      	mov	r4, r0
 800ad04:	4608      	mov	r0, r1
 800ad06:	4611      	mov	r1, r2
 800ad08:	602b      	str	r3, [r5, #0]
 800ad0a:	f7f6 feeb 	bl	8001ae4 <_fstat>
 800ad0e:	1c43      	adds	r3, r0, #1
 800ad10:	d102      	bne.n	800ad18 <_fstat_r+0x1c>
 800ad12:	682b      	ldr	r3, [r5, #0]
 800ad14:	b103      	cbz	r3, 800ad18 <_fstat_r+0x1c>
 800ad16:	6023      	str	r3, [r4, #0]
 800ad18:	bd38      	pop	{r3, r4, r5, pc}
 800ad1a:	bf00      	nop
 800ad1c:	20004ed4 	.word	0x20004ed4

0800ad20 <_isatty_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	4d06      	ldr	r5, [pc, #24]	@ (800ad3c <_isatty_r+0x1c>)
 800ad24:	2300      	movs	r3, #0
 800ad26:	4604      	mov	r4, r0
 800ad28:	4608      	mov	r0, r1
 800ad2a:	602b      	str	r3, [r5, #0]
 800ad2c:	f7f6 feea 	bl	8001b04 <_isatty>
 800ad30:	1c43      	adds	r3, r0, #1
 800ad32:	d102      	bne.n	800ad3a <_isatty_r+0x1a>
 800ad34:	682b      	ldr	r3, [r5, #0]
 800ad36:	b103      	cbz	r3, 800ad3a <_isatty_r+0x1a>
 800ad38:	6023      	str	r3, [r4, #0]
 800ad3a:	bd38      	pop	{r3, r4, r5, pc}
 800ad3c:	20004ed4 	.word	0x20004ed4

0800ad40 <abort>:
 800ad40:	b508      	push	{r3, lr}
 800ad42:	2006      	movs	r0, #6
 800ad44:	f000 f834 	bl	800adb0 <raise>
 800ad48:	2001      	movs	r0, #1
 800ad4a:	f7f6 fe7b 	bl	8001a44 <_exit>

0800ad4e <_malloc_usable_size_r>:
 800ad4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad52:	1f18      	subs	r0, r3, #4
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	bfbc      	itt	lt
 800ad58:	580b      	ldrlt	r3, [r1, r0]
 800ad5a:	18c0      	addlt	r0, r0, r3
 800ad5c:	4770      	bx	lr

0800ad5e <_raise_r>:
 800ad5e:	291f      	cmp	r1, #31
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	4605      	mov	r5, r0
 800ad64:	460c      	mov	r4, r1
 800ad66:	d904      	bls.n	800ad72 <_raise_r+0x14>
 800ad68:	2316      	movs	r3, #22
 800ad6a:	6003      	str	r3, [r0, #0]
 800ad6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad70:	bd38      	pop	{r3, r4, r5, pc}
 800ad72:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ad74:	b112      	cbz	r2, 800ad7c <_raise_r+0x1e>
 800ad76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad7a:	b94b      	cbnz	r3, 800ad90 <_raise_r+0x32>
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	f000 f831 	bl	800ade4 <_getpid_r>
 800ad82:	4622      	mov	r2, r4
 800ad84:	4601      	mov	r1, r0
 800ad86:	4628      	mov	r0, r5
 800ad88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad8c:	f000 b818 	b.w	800adc0 <_kill_r>
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d00a      	beq.n	800adaa <_raise_r+0x4c>
 800ad94:	1c59      	adds	r1, r3, #1
 800ad96:	d103      	bne.n	800ada0 <_raise_r+0x42>
 800ad98:	2316      	movs	r3, #22
 800ad9a:	6003      	str	r3, [r0, #0]
 800ad9c:	2001      	movs	r0, #1
 800ad9e:	e7e7      	b.n	800ad70 <_raise_r+0x12>
 800ada0:	2100      	movs	r1, #0
 800ada2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ada6:	4620      	mov	r0, r4
 800ada8:	4798      	blx	r3
 800adaa:	2000      	movs	r0, #0
 800adac:	e7e0      	b.n	800ad70 <_raise_r+0x12>
	...

0800adb0 <raise>:
 800adb0:	4b02      	ldr	r3, [pc, #8]	@ (800adbc <raise+0xc>)
 800adb2:	4601      	mov	r1, r0
 800adb4:	6818      	ldr	r0, [r3, #0]
 800adb6:	f7ff bfd2 	b.w	800ad5e <_raise_r>
 800adba:	bf00      	nop
 800adbc:	2000001c 	.word	0x2000001c

0800adc0 <_kill_r>:
 800adc0:	b538      	push	{r3, r4, r5, lr}
 800adc2:	4d07      	ldr	r5, [pc, #28]	@ (800ade0 <_kill_r+0x20>)
 800adc4:	2300      	movs	r3, #0
 800adc6:	4604      	mov	r4, r0
 800adc8:	4608      	mov	r0, r1
 800adca:	4611      	mov	r1, r2
 800adcc:	602b      	str	r3, [r5, #0]
 800adce:	f7f6 fe29 	bl	8001a24 <_kill>
 800add2:	1c43      	adds	r3, r0, #1
 800add4:	d102      	bne.n	800addc <_kill_r+0x1c>
 800add6:	682b      	ldr	r3, [r5, #0]
 800add8:	b103      	cbz	r3, 800addc <_kill_r+0x1c>
 800adda:	6023      	str	r3, [r4, #0]
 800addc:	bd38      	pop	{r3, r4, r5, pc}
 800adde:	bf00      	nop
 800ade0:	20004ed4 	.word	0x20004ed4

0800ade4 <_getpid_r>:
 800ade4:	f7f6 be16 	b.w	8001a14 <_getpid>

0800ade8 <atan2>:
 800ade8:	f000 bbce 	b.w	800b588 <__ieee754_atan2>
 800adec:	0000      	movs	r0, r0
	...

0800adf0 <atan>:
 800adf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf4:	ec55 4b10 	vmov	r4, r5, d0
 800adf8:	4bbf      	ldr	r3, [pc, #764]	@ (800b0f8 <atan+0x308>)
 800adfa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800adfe:	429e      	cmp	r6, r3
 800ae00:	46ab      	mov	fp, r5
 800ae02:	d918      	bls.n	800ae36 <atan+0x46>
 800ae04:	4bbd      	ldr	r3, [pc, #756]	@ (800b0fc <atan+0x30c>)
 800ae06:	429e      	cmp	r6, r3
 800ae08:	d801      	bhi.n	800ae0e <atan+0x1e>
 800ae0a:	d109      	bne.n	800ae20 <atan+0x30>
 800ae0c:	b144      	cbz	r4, 800ae20 <atan+0x30>
 800ae0e:	4622      	mov	r2, r4
 800ae10:	462b      	mov	r3, r5
 800ae12:	4620      	mov	r0, r4
 800ae14:	4629      	mov	r1, r5
 800ae16:	f7f5 fa41 	bl	800029c <__adddf3>
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	460d      	mov	r5, r1
 800ae1e:	e006      	b.n	800ae2e <atan+0x3e>
 800ae20:	f1bb 0f00 	cmp.w	fp, #0
 800ae24:	f340 812b 	ble.w	800b07e <atan+0x28e>
 800ae28:	a597      	add	r5, pc, #604	@ (adr r5, 800b088 <atan+0x298>)
 800ae2a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ae2e:	ec45 4b10 	vmov	d0, r4, r5
 800ae32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae36:	4bb2      	ldr	r3, [pc, #712]	@ (800b100 <atan+0x310>)
 800ae38:	429e      	cmp	r6, r3
 800ae3a:	d813      	bhi.n	800ae64 <atan+0x74>
 800ae3c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800ae40:	429e      	cmp	r6, r3
 800ae42:	d80c      	bhi.n	800ae5e <atan+0x6e>
 800ae44:	a392      	add	r3, pc, #584	@ (adr r3, 800b090 <atan+0x2a0>)
 800ae46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	4629      	mov	r1, r5
 800ae4e:	f7f5 fa25 	bl	800029c <__adddf3>
 800ae52:	4bac      	ldr	r3, [pc, #688]	@ (800b104 <atan+0x314>)
 800ae54:	2200      	movs	r2, #0
 800ae56:	f7f5 fe67 	bl	8000b28 <__aeabi_dcmpgt>
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	d1e7      	bne.n	800ae2e <atan+0x3e>
 800ae5e:	f04f 3aff 	mov.w	sl, #4294967295
 800ae62:	e029      	b.n	800aeb8 <atan+0xc8>
 800ae64:	f000 f9b0 	bl	800b1c8 <fabs>
 800ae68:	4ba7      	ldr	r3, [pc, #668]	@ (800b108 <atan+0x318>)
 800ae6a:	429e      	cmp	r6, r3
 800ae6c:	ec55 4b10 	vmov	r4, r5, d0
 800ae70:	f200 80bc 	bhi.w	800afec <atan+0x1fc>
 800ae74:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800ae78:	429e      	cmp	r6, r3
 800ae7a:	f200 809e 	bhi.w	800afba <atan+0x1ca>
 800ae7e:	4622      	mov	r2, r4
 800ae80:	462b      	mov	r3, r5
 800ae82:	4620      	mov	r0, r4
 800ae84:	4629      	mov	r1, r5
 800ae86:	f7f5 fa09 	bl	800029c <__adddf3>
 800ae8a:	4b9e      	ldr	r3, [pc, #632]	@ (800b104 <atan+0x314>)
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f7f5 fa03 	bl	8000298 <__aeabi_dsub>
 800ae92:	2200      	movs	r2, #0
 800ae94:	4606      	mov	r6, r0
 800ae96:	460f      	mov	r7, r1
 800ae98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	4629      	mov	r1, r5
 800aea0:	f7f5 f9fc 	bl	800029c <__adddf3>
 800aea4:	4602      	mov	r2, r0
 800aea6:	460b      	mov	r3, r1
 800aea8:	4630      	mov	r0, r6
 800aeaa:	4639      	mov	r1, r7
 800aeac:	f7f5 fcd6 	bl	800085c <__aeabi_ddiv>
 800aeb0:	f04f 0a00 	mov.w	sl, #0
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	460d      	mov	r5, r1
 800aeb8:	4622      	mov	r2, r4
 800aeba:	462b      	mov	r3, r5
 800aebc:	4620      	mov	r0, r4
 800aebe:	4629      	mov	r1, r5
 800aec0:	f7f5 fba2 	bl	8000608 <__aeabi_dmul>
 800aec4:	4602      	mov	r2, r0
 800aec6:	460b      	mov	r3, r1
 800aec8:	4680      	mov	r8, r0
 800aeca:	4689      	mov	r9, r1
 800aecc:	f7f5 fb9c 	bl	8000608 <__aeabi_dmul>
 800aed0:	a371      	add	r3, pc, #452	@ (adr r3, 800b098 <atan+0x2a8>)
 800aed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed6:	4606      	mov	r6, r0
 800aed8:	460f      	mov	r7, r1
 800aeda:	f7f5 fb95 	bl	8000608 <__aeabi_dmul>
 800aede:	a370      	add	r3, pc, #448	@ (adr r3, 800b0a0 <atan+0x2b0>)
 800aee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee4:	f7f5 f9da 	bl	800029c <__adddf3>
 800aee8:	4632      	mov	r2, r6
 800aeea:	463b      	mov	r3, r7
 800aeec:	f7f5 fb8c 	bl	8000608 <__aeabi_dmul>
 800aef0:	a36d      	add	r3, pc, #436	@ (adr r3, 800b0a8 <atan+0x2b8>)
 800aef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef6:	f7f5 f9d1 	bl	800029c <__adddf3>
 800aefa:	4632      	mov	r2, r6
 800aefc:	463b      	mov	r3, r7
 800aefe:	f7f5 fb83 	bl	8000608 <__aeabi_dmul>
 800af02:	a36b      	add	r3, pc, #428	@ (adr r3, 800b0b0 <atan+0x2c0>)
 800af04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af08:	f7f5 f9c8 	bl	800029c <__adddf3>
 800af0c:	4632      	mov	r2, r6
 800af0e:	463b      	mov	r3, r7
 800af10:	f7f5 fb7a 	bl	8000608 <__aeabi_dmul>
 800af14:	a368      	add	r3, pc, #416	@ (adr r3, 800b0b8 <atan+0x2c8>)
 800af16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1a:	f7f5 f9bf 	bl	800029c <__adddf3>
 800af1e:	4632      	mov	r2, r6
 800af20:	463b      	mov	r3, r7
 800af22:	f7f5 fb71 	bl	8000608 <__aeabi_dmul>
 800af26:	a366      	add	r3, pc, #408	@ (adr r3, 800b0c0 <atan+0x2d0>)
 800af28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2c:	f7f5 f9b6 	bl	800029c <__adddf3>
 800af30:	4642      	mov	r2, r8
 800af32:	464b      	mov	r3, r9
 800af34:	f7f5 fb68 	bl	8000608 <__aeabi_dmul>
 800af38:	a363      	add	r3, pc, #396	@ (adr r3, 800b0c8 <atan+0x2d8>)
 800af3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3e:	4680      	mov	r8, r0
 800af40:	4689      	mov	r9, r1
 800af42:	4630      	mov	r0, r6
 800af44:	4639      	mov	r1, r7
 800af46:	f7f5 fb5f 	bl	8000608 <__aeabi_dmul>
 800af4a:	a361      	add	r3, pc, #388	@ (adr r3, 800b0d0 <atan+0x2e0>)
 800af4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af50:	f7f5 f9a2 	bl	8000298 <__aeabi_dsub>
 800af54:	4632      	mov	r2, r6
 800af56:	463b      	mov	r3, r7
 800af58:	f7f5 fb56 	bl	8000608 <__aeabi_dmul>
 800af5c:	a35e      	add	r3, pc, #376	@ (adr r3, 800b0d8 <atan+0x2e8>)
 800af5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af62:	f7f5 f999 	bl	8000298 <__aeabi_dsub>
 800af66:	4632      	mov	r2, r6
 800af68:	463b      	mov	r3, r7
 800af6a:	f7f5 fb4d 	bl	8000608 <__aeabi_dmul>
 800af6e:	a35c      	add	r3, pc, #368	@ (adr r3, 800b0e0 <atan+0x2f0>)
 800af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af74:	f7f5 f990 	bl	8000298 <__aeabi_dsub>
 800af78:	4632      	mov	r2, r6
 800af7a:	463b      	mov	r3, r7
 800af7c:	f7f5 fb44 	bl	8000608 <__aeabi_dmul>
 800af80:	a359      	add	r3, pc, #356	@ (adr r3, 800b0e8 <atan+0x2f8>)
 800af82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af86:	f7f5 f987 	bl	8000298 <__aeabi_dsub>
 800af8a:	4632      	mov	r2, r6
 800af8c:	463b      	mov	r3, r7
 800af8e:	f7f5 fb3b 	bl	8000608 <__aeabi_dmul>
 800af92:	4602      	mov	r2, r0
 800af94:	460b      	mov	r3, r1
 800af96:	4640      	mov	r0, r8
 800af98:	4649      	mov	r1, r9
 800af9a:	f7f5 f97f 	bl	800029c <__adddf3>
 800af9e:	4622      	mov	r2, r4
 800afa0:	462b      	mov	r3, r5
 800afa2:	f7f5 fb31 	bl	8000608 <__aeabi_dmul>
 800afa6:	f1ba 3fff 	cmp.w	sl, #4294967295
 800afaa:	4602      	mov	r2, r0
 800afac:	460b      	mov	r3, r1
 800afae:	d148      	bne.n	800b042 <atan+0x252>
 800afb0:	4620      	mov	r0, r4
 800afb2:	4629      	mov	r1, r5
 800afb4:	f7f5 f970 	bl	8000298 <__aeabi_dsub>
 800afb8:	e72f      	b.n	800ae1a <atan+0x2a>
 800afba:	4b52      	ldr	r3, [pc, #328]	@ (800b104 <atan+0x314>)
 800afbc:	2200      	movs	r2, #0
 800afbe:	4620      	mov	r0, r4
 800afc0:	4629      	mov	r1, r5
 800afc2:	f7f5 f969 	bl	8000298 <__aeabi_dsub>
 800afc6:	4b4f      	ldr	r3, [pc, #316]	@ (800b104 <atan+0x314>)
 800afc8:	4606      	mov	r6, r0
 800afca:	460f      	mov	r7, r1
 800afcc:	2200      	movs	r2, #0
 800afce:	4620      	mov	r0, r4
 800afd0:	4629      	mov	r1, r5
 800afd2:	f7f5 f963 	bl	800029c <__adddf3>
 800afd6:	4602      	mov	r2, r0
 800afd8:	460b      	mov	r3, r1
 800afda:	4630      	mov	r0, r6
 800afdc:	4639      	mov	r1, r7
 800afde:	f7f5 fc3d 	bl	800085c <__aeabi_ddiv>
 800afe2:	f04f 0a01 	mov.w	sl, #1
 800afe6:	4604      	mov	r4, r0
 800afe8:	460d      	mov	r5, r1
 800afea:	e765      	b.n	800aeb8 <atan+0xc8>
 800afec:	4b47      	ldr	r3, [pc, #284]	@ (800b10c <atan+0x31c>)
 800afee:	429e      	cmp	r6, r3
 800aff0:	d21c      	bcs.n	800b02c <atan+0x23c>
 800aff2:	4b47      	ldr	r3, [pc, #284]	@ (800b110 <atan+0x320>)
 800aff4:	2200      	movs	r2, #0
 800aff6:	4620      	mov	r0, r4
 800aff8:	4629      	mov	r1, r5
 800affa:	f7f5 f94d 	bl	8000298 <__aeabi_dsub>
 800affe:	4b44      	ldr	r3, [pc, #272]	@ (800b110 <atan+0x320>)
 800b000:	4606      	mov	r6, r0
 800b002:	460f      	mov	r7, r1
 800b004:	2200      	movs	r2, #0
 800b006:	4620      	mov	r0, r4
 800b008:	4629      	mov	r1, r5
 800b00a:	f7f5 fafd 	bl	8000608 <__aeabi_dmul>
 800b00e:	4b3d      	ldr	r3, [pc, #244]	@ (800b104 <atan+0x314>)
 800b010:	2200      	movs	r2, #0
 800b012:	f7f5 f943 	bl	800029c <__adddf3>
 800b016:	4602      	mov	r2, r0
 800b018:	460b      	mov	r3, r1
 800b01a:	4630      	mov	r0, r6
 800b01c:	4639      	mov	r1, r7
 800b01e:	f7f5 fc1d 	bl	800085c <__aeabi_ddiv>
 800b022:	f04f 0a02 	mov.w	sl, #2
 800b026:	4604      	mov	r4, r0
 800b028:	460d      	mov	r5, r1
 800b02a:	e745      	b.n	800aeb8 <atan+0xc8>
 800b02c:	4622      	mov	r2, r4
 800b02e:	462b      	mov	r3, r5
 800b030:	4938      	ldr	r1, [pc, #224]	@ (800b114 <atan+0x324>)
 800b032:	2000      	movs	r0, #0
 800b034:	f7f5 fc12 	bl	800085c <__aeabi_ddiv>
 800b038:	f04f 0a03 	mov.w	sl, #3
 800b03c:	4604      	mov	r4, r0
 800b03e:	460d      	mov	r5, r1
 800b040:	e73a      	b.n	800aeb8 <atan+0xc8>
 800b042:	4b35      	ldr	r3, [pc, #212]	@ (800b118 <atan+0x328>)
 800b044:	4e35      	ldr	r6, [pc, #212]	@ (800b11c <atan+0x32c>)
 800b046:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04e:	f7f5 f923 	bl	8000298 <__aeabi_dsub>
 800b052:	4622      	mov	r2, r4
 800b054:	462b      	mov	r3, r5
 800b056:	f7f5 f91f 	bl	8000298 <__aeabi_dsub>
 800b05a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b05e:	4602      	mov	r2, r0
 800b060:	460b      	mov	r3, r1
 800b062:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b066:	f7f5 f917 	bl	8000298 <__aeabi_dsub>
 800b06a:	f1bb 0f00 	cmp.w	fp, #0
 800b06e:	4604      	mov	r4, r0
 800b070:	460d      	mov	r5, r1
 800b072:	f6bf aedc 	bge.w	800ae2e <atan+0x3e>
 800b076:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b07a:	461d      	mov	r5, r3
 800b07c:	e6d7      	b.n	800ae2e <atan+0x3e>
 800b07e:	a51c      	add	r5, pc, #112	@ (adr r5, 800b0f0 <atan+0x300>)
 800b080:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b084:	e6d3      	b.n	800ae2e <atan+0x3e>
 800b086:	bf00      	nop
 800b088:	54442d18 	.word	0x54442d18
 800b08c:	3ff921fb 	.word	0x3ff921fb
 800b090:	8800759c 	.word	0x8800759c
 800b094:	7e37e43c 	.word	0x7e37e43c
 800b098:	e322da11 	.word	0xe322da11
 800b09c:	3f90ad3a 	.word	0x3f90ad3a
 800b0a0:	24760deb 	.word	0x24760deb
 800b0a4:	3fa97b4b 	.word	0x3fa97b4b
 800b0a8:	a0d03d51 	.word	0xa0d03d51
 800b0ac:	3fb10d66 	.word	0x3fb10d66
 800b0b0:	c54c206e 	.word	0xc54c206e
 800b0b4:	3fb745cd 	.word	0x3fb745cd
 800b0b8:	920083ff 	.word	0x920083ff
 800b0bc:	3fc24924 	.word	0x3fc24924
 800b0c0:	5555550d 	.word	0x5555550d
 800b0c4:	3fd55555 	.word	0x3fd55555
 800b0c8:	2c6a6c2f 	.word	0x2c6a6c2f
 800b0cc:	bfa2b444 	.word	0xbfa2b444
 800b0d0:	52defd9a 	.word	0x52defd9a
 800b0d4:	3fadde2d 	.word	0x3fadde2d
 800b0d8:	af749a6d 	.word	0xaf749a6d
 800b0dc:	3fb3b0f2 	.word	0x3fb3b0f2
 800b0e0:	fe231671 	.word	0xfe231671
 800b0e4:	3fbc71c6 	.word	0x3fbc71c6
 800b0e8:	9998ebc4 	.word	0x9998ebc4
 800b0ec:	3fc99999 	.word	0x3fc99999
 800b0f0:	54442d18 	.word	0x54442d18
 800b0f4:	bff921fb 	.word	0xbff921fb
 800b0f8:	440fffff 	.word	0x440fffff
 800b0fc:	7ff00000 	.word	0x7ff00000
 800b100:	3fdbffff 	.word	0x3fdbffff
 800b104:	3ff00000 	.word	0x3ff00000
 800b108:	3ff2ffff 	.word	0x3ff2ffff
 800b10c:	40038000 	.word	0x40038000
 800b110:	3ff80000 	.word	0x3ff80000
 800b114:	bff00000 	.word	0xbff00000
 800b118:	0800c7b8 	.word	0x0800c7b8
 800b11c:	0800c7d8 	.word	0x0800c7d8

0800b120 <cos>:
 800b120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b122:	ec53 2b10 	vmov	r2, r3, d0
 800b126:	4826      	ldr	r0, [pc, #152]	@ (800b1c0 <cos+0xa0>)
 800b128:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b12c:	4281      	cmp	r1, r0
 800b12e:	d806      	bhi.n	800b13e <cos+0x1e>
 800b130:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800b1b8 <cos+0x98>
 800b134:	b005      	add	sp, #20
 800b136:	f85d eb04 	ldr.w	lr, [sp], #4
 800b13a:	f000 b8a1 	b.w	800b280 <__kernel_cos>
 800b13e:	4821      	ldr	r0, [pc, #132]	@ (800b1c4 <cos+0xa4>)
 800b140:	4281      	cmp	r1, r0
 800b142:	d908      	bls.n	800b156 <cos+0x36>
 800b144:	4610      	mov	r0, r2
 800b146:	4619      	mov	r1, r3
 800b148:	f7f5 f8a6 	bl	8000298 <__aeabi_dsub>
 800b14c:	ec41 0b10 	vmov	d0, r0, r1
 800b150:	b005      	add	sp, #20
 800b152:	f85d fb04 	ldr.w	pc, [sp], #4
 800b156:	4668      	mov	r0, sp
 800b158:	f000 fade 	bl	800b718 <__ieee754_rem_pio2>
 800b15c:	f000 0003 	and.w	r0, r0, #3
 800b160:	2801      	cmp	r0, #1
 800b162:	d00b      	beq.n	800b17c <cos+0x5c>
 800b164:	2802      	cmp	r0, #2
 800b166:	d015      	beq.n	800b194 <cos+0x74>
 800b168:	b9d8      	cbnz	r0, 800b1a2 <cos+0x82>
 800b16a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b16e:	ed9d 0b00 	vldr	d0, [sp]
 800b172:	f000 f885 	bl	800b280 <__kernel_cos>
 800b176:	ec51 0b10 	vmov	r0, r1, d0
 800b17a:	e7e7      	b.n	800b14c <cos+0x2c>
 800b17c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b180:	ed9d 0b00 	vldr	d0, [sp]
 800b184:	f000 f944 	bl	800b410 <__kernel_sin>
 800b188:	ec53 2b10 	vmov	r2, r3, d0
 800b18c:	4610      	mov	r0, r2
 800b18e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b192:	e7db      	b.n	800b14c <cos+0x2c>
 800b194:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b198:	ed9d 0b00 	vldr	d0, [sp]
 800b19c:	f000 f870 	bl	800b280 <__kernel_cos>
 800b1a0:	e7f2      	b.n	800b188 <cos+0x68>
 800b1a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b1a6:	ed9d 0b00 	vldr	d0, [sp]
 800b1aa:	2001      	movs	r0, #1
 800b1ac:	f000 f930 	bl	800b410 <__kernel_sin>
 800b1b0:	e7e1      	b.n	800b176 <cos+0x56>
 800b1b2:	bf00      	nop
 800b1b4:	f3af 8000 	nop.w
	...
 800b1c0:	3fe921fb 	.word	0x3fe921fb
 800b1c4:	7fefffff 	.word	0x7fefffff

0800b1c8 <fabs>:
 800b1c8:	ec51 0b10 	vmov	r0, r1, d0
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b1d2:	ec43 2b10 	vmov	d0, r2, r3
 800b1d6:	4770      	bx	lr

0800b1d8 <sin>:
 800b1d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1da:	ec53 2b10 	vmov	r2, r3, d0
 800b1de:	4826      	ldr	r0, [pc, #152]	@ (800b278 <sin+0xa0>)
 800b1e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b1e4:	4281      	cmp	r1, r0
 800b1e6:	d807      	bhi.n	800b1f8 <sin+0x20>
 800b1e8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800b270 <sin+0x98>
 800b1ec:	2000      	movs	r0, #0
 800b1ee:	b005      	add	sp, #20
 800b1f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1f4:	f000 b90c 	b.w	800b410 <__kernel_sin>
 800b1f8:	4820      	ldr	r0, [pc, #128]	@ (800b27c <sin+0xa4>)
 800b1fa:	4281      	cmp	r1, r0
 800b1fc:	d908      	bls.n	800b210 <sin+0x38>
 800b1fe:	4610      	mov	r0, r2
 800b200:	4619      	mov	r1, r3
 800b202:	f7f5 f849 	bl	8000298 <__aeabi_dsub>
 800b206:	ec41 0b10 	vmov	d0, r0, r1
 800b20a:	b005      	add	sp, #20
 800b20c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b210:	4668      	mov	r0, sp
 800b212:	f000 fa81 	bl	800b718 <__ieee754_rem_pio2>
 800b216:	f000 0003 	and.w	r0, r0, #3
 800b21a:	2801      	cmp	r0, #1
 800b21c:	d00c      	beq.n	800b238 <sin+0x60>
 800b21e:	2802      	cmp	r0, #2
 800b220:	d011      	beq.n	800b246 <sin+0x6e>
 800b222:	b9e8      	cbnz	r0, 800b260 <sin+0x88>
 800b224:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b228:	ed9d 0b00 	vldr	d0, [sp]
 800b22c:	2001      	movs	r0, #1
 800b22e:	f000 f8ef 	bl	800b410 <__kernel_sin>
 800b232:	ec51 0b10 	vmov	r0, r1, d0
 800b236:	e7e6      	b.n	800b206 <sin+0x2e>
 800b238:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b23c:	ed9d 0b00 	vldr	d0, [sp]
 800b240:	f000 f81e 	bl	800b280 <__kernel_cos>
 800b244:	e7f5      	b.n	800b232 <sin+0x5a>
 800b246:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b24a:	ed9d 0b00 	vldr	d0, [sp]
 800b24e:	2001      	movs	r0, #1
 800b250:	f000 f8de 	bl	800b410 <__kernel_sin>
 800b254:	ec53 2b10 	vmov	r2, r3, d0
 800b258:	4610      	mov	r0, r2
 800b25a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b25e:	e7d2      	b.n	800b206 <sin+0x2e>
 800b260:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b264:	ed9d 0b00 	vldr	d0, [sp]
 800b268:	f000 f80a 	bl	800b280 <__kernel_cos>
 800b26c:	e7f2      	b.n	800b254 <sin+0x7c>
 800b26e:	bf00      	nop
	...
 800b278:	3fe921fb 	.word	0x3fe921fb
 800b27c:	7fefffff 	.word	0x7fefffff

0800b280 <__kernel_cos>:
 800b280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b284:	ec57 6b10 	vmov	r6, r7, d0
 800b288:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b28c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800b290:	ed8d 1b00 	vstr	d1, [sp]
 800b294:	d206      	bcs.n	800b2a4 <__kernel_cos+0x24>
 800b296:	4630      	mov	r0, r6
 800b298:	4639      	mov	r1, r7
 800b29a:	f7f5 fc65 	bl	8000b68 <__aeabi_d2iz>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	f000 8088 	beq.w	800b3b4 <__kernel_cos+0x134>
 800b2a4:	4632      	mov	r2, r6
 800b2a6:	463b      	mov	r3, r7
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	4639      	mov	r1, r7
 800b2ac:	f7f5 f9ac 	bl	8000608 <__aeabi_dmul>
 800b2b0:	4b51      	ldr	r3, [pc, #324]	@ (800b3f8 <__kernel_cos+0x178>)
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	4604      	mov	r4, r0
 800b2b6:	460d      	mov	r5, r1
 800b2b8:	f7f5 f9a6 	bl	8000608 <__aeabi_dmul>
 800b2bc:	a340      	add	r3, pc, #256	@ (adr r3, 800b3c0 <__kernel_cos+0x140>)
 800b2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c2:	4682      	mov	sl, r0
 800b2c4:	468b      	mov	fp, r1
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	4629      	mov	r1, r5
 800b2ca:	f7f5 f99d 	bl	8000608 <__aeabi_dmul>
 800b2ce:	a33e      	add	r3, pc, #248	@ (adr r3, 800b3c8 <__kernel_cos+0x148>)
 800b2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d4:	f7f4 ffe2 	bl	800029c <__adddf3>
 800b2d8:	4622      	mov	r2, r4
 800b2da:	462b      	mov	r3, r5
 800b2dc:	f7f5 f994 	bl	8000608 <__aeabi_dmul>
 800b2e0:	a33b      	add	r3, pc, #236	@ (adr r3, 800b3d0 <__kernel_cos+0x150>)
 800b2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e6:	f7f4 ffd7 	bl	8000298 <__aeabi_dsub>
 800b2ea:	4622      	mov	r2, r4
 800b2ec:	462b      	mov	r3, r5
 800b2ee:	f7f5 f98b 	bl	8000608 <__aeabi_dmul>
 800b2f2:	a339      	add	r3, pc, #228	@ (adr r3, 800b3d8 <__kernel_cos+0x158>)
 800b2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f8:	f7f4 ffd0 	bl	800029c <__adddf3>
 800b2fc:	4622      	mov	r2, r4
 800b2fe:	462b      	mov	r3, r5
 800b300:	f7f5 f982 	bl	8000608 <__aeabi_dmul>
 800b304:	a336      	add	r3, pc, #216	@ (adr r3, 800b3e0 <__kernel_cos+0x160>)
 800b306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30a:	f7f4 ffc5 	bl	8000298 <__aeabi_dsub>
 800b30e:	4622      	mov	r2, r4
 800b310:	462b      	mov	r3, r5
 800b312:	f7f5 f979 	bl	8000608 <__aeabi_dmul>
 800b316:	a334      	add	r3, pc, #208	@ (adr r3, 800b3e8 <__kernel_cos+0x168>)
 800b318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31c:	f7f4 ffbe 	bl	800029c <__adddf3>
 800b320:	4622      	mov	r2, r4
 800b322:	462b      	mov	r3, r5
 800b324:	f7f5 f970 	bl	8000608 <__aeabi_dmul>
 800b328:	4622      	mov	r2, r4
 800b32a:	462b      	mov	r3, r5
 800b32c:	f7f5 f96c 	bl	8000608 <__aeabi_dmul>
 800b330:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b334:	4604      	mov	r4, r0
 800b336:	460d      	mov	r5, r1
 800b338:	4630      	mov	r0, r6
 800b33a:	4639      	mov	r1, r7
 800b33c:	f7f5 f964 	bl	8000608 <__aeabi_dmul>
 800b340:	460b      	mov	r3, r1
 800b342:	4602      	mov	r2, r0
 800b344:	4629      	mov	r1, r5
 800b346:	4620      	mov	r0, r4
 800b348:	f7f4 ffa6 	bl	8000298 <__aeabi_dsub>
 800b34c:	4b2b      	ldr	r3, [pc, #172]	@ (800b3fc <__kernel_cos+0x17c>)
 800b34e:	4598      	cmp	r8, r3
 800b350:	4606      	mov	r6, r0
 800b352:	460f      	mov	r7, r1
 800b354:	d810      	bhi.n	800b378 <__kernel_cos+0xf8>
 800b356:	4602      	mov	r2, r0
 800b358:	460b      	mov	r3, r1
 800b35a:	4650      	mov	r0, sl
 800b35c:	4659      	mov	r1, fp
 800b35e:	f7f4 ff9b 	bl	8000298 <__aeabi_dsub>
 800b362:	460b      	mov	r3, r1
 800b364:	4926      	ldr	r1, [pc, #152]	@ (800b400 <__kernel_cos+0x180>)
 800b366:	4602      	mov	r2, r0
 800b368:	2000      	movs	r0, #0
 800b36a:	f7f4 ff95 	bl	8000298 <__aeabi_dsub>
 800b36e:	ec41 0b10 	vmov	d0, r0, r1
 800b372:	b003      	add	sp, #12
 800b374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b378:	4b22      	ldr	r3, [pc, #136]	@ (800b404 <__kernel_cos+0x184>)
 800b37a:	4921      	ldr	r1, [pc, #132]	@ (800b400 <__kernel_cos+0x180>)
 800b37c:	4598      	cmp	r8, r3
 800b37e:	bf8c      	ite	hi
 800b380:	4d21      	ldrhi	r5, [pc, #132]	@ (800b408 <__kernel_cos+0x188>)
 800b382:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800b386:	2400      	movs	r4, #0
 800b388:	4622      	mov	r2, r4
 800b38a:	462b      	mov	r3, r5
 800b38c:	2000      	movs	r0, #0
 800b38e:	f7f4 ff83 	bl	8000298 <__aeabi_dsub>
 800b392:	4622      	mov	r2, r4
 800b394:	4680      	mov	r8, r0
 800b396:	4689      	mov	r9, r1
 800b398:	462b      	mov	r3, r5
 800b39a:	4650      	mov	r0, sl
 800b39c:	4659      	mov	r1, fp
 800b39e:	f7f4 ff7b 	bl	8000298 <__aeabi_dsub>
 800b3a2:	4632      	mov	r2, r6
 800b3a4:	463b      	mov	r3, r7
 800b3a6:	f7f4 ff77 	bl	8000298 <__aeabi_dsub>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	4640      	mov	r0, r8
 800b3b0:	4649      	mov	r1, r9
 800b3b2:	e7da      	b.n	800b36a <__kernel_cos+0xea>
 800b3b4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800b3f0 <__kernel_cos+0x170>
 800b3b8:	e7db      	b.n	800b372 <__kernel_cos+0xf2>
 800b3ba:	bf00      	nop
 800b3bc:	f3af 8000 	nop.w
 800b3c0:	be8838d4 	.word	0xbe8838d4
 800b3c4:	bda8fae9 	.word	0xbda8fae9
 800b3c8:	bdb4b1c4 	.word	0xbdb4b1c4
 800b3cc:	3e21ee9e 	.word	0x3e21ee9e
 800b3d0:	809c52ad 	.word	0x809c52ad
 800b3d4:	3e927e4f 	.word	0x3e927e4f
 800b3d8:	19cb1590 	.word	0x19cb1590
 800b3dc:	3efa01a0 	.word	0x3efa01a0
 800b3e0:	16c15177 	.word	0x16c15177
 800b3e4:	3f56c16c 	.word	0x3f56c16c
 800b3e8:	5555554c 	.word	0x5555554c
 800b3ec:	3fa55555 	.word	0x3fa55555
 800b3f0:	00000000 	.word	0x00000000
 800b3f4:	3ff00000 	.word	0x3ff00000
 800b3f8:	3fe00000 	.word	0x3fe00000
 800b3fc:	3fd33332 	.word	0x3fd33332
 800b400:	3ff00000 	.word	0x3ff00000
 800b404:	3fe90000 	.word	0x3fe90000
 800b408:	3fd20000 	.word	0x3fd20000
 800b40c:	00000000 	.word	0x00000000

0800b410 <__kernel_sin>:
 800b410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b414:	ec55 4b10 	vmov	r4, r5, d0
 800b418:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b41c:	b085      	sub	sp, #20
 800b41e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800b422:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b426:	4680      	mov	r8, r0
 800b428:	d205      	bcs.n	800b436 <__kernel_sin+0x26>
 800b42a:	4620      	mov	r0, r4
 800b42c:	4629      	mov	r1, r5
 800b42e:	f7f5 fb9b 	bl	8000b68 <__aeabi_d2iz>
 800b432:	2800      	cmp	r0, #0
 800b434:	d052      	beq.n	800b4dc <__kernel_sin+0xcc>
 800b436:	4622      	mov	r2, r4
 800b438:	462b      	mov	r3, r5
 800b43a:	4620      	mov	r0, r4
 800b43c:	4629      	mov	r1, r5
 800b43e:	f7f5 f8e3 	bl	8000608 <__aeabi_dmul>
 800b442:	4682      	mov	sl, r0
 800b444:	468b      	mov	fp, r1
 800b446:	4602      	mov	r2, r0
 800b448:	460b      	mov	r3, r1
 800b44a:	4620      	mov	r0, r4
 800b44c:	4629      	mov	r1, r5
 800b44e:	f7f5 f8db 	bl	8000608 <__aeabi_dmul>
 800b452:	a342      	add	r3, pc, #264	@ (adr r3, 800b55c <__kernel_sin+0x14c>)
 800b454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b458:	e9cd 0100 	strd	r0, r1, [sp]
 800b45c:	4650      	mov	r0, sl
 800b45e:	4659      	mov	r1, fp
 800b460:	f7f5 f8d2 	bl	8000608 <__aeabi_dmul>
 800b464:	a33f      	add	r3, pc, #252	@ (adr r3, 800b564 <__kernel_sin+0x154>)
 800b466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46a:	f7f4 ff15 	bl	8000298 <__aeabi_dsub>
 800b46e:	4652      	mov	r2, sl
 800b470:	465b      	mov	r3, fp
 800b472:	f7f5 f8c9 	bl	8000608 <__aeabi_dmul>
 800b476:	a33d      	add	r3, pc, #244	@ (adr r3, 800b56c <__kernel_sin+0x15c>)
 800b478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47c:	f7f4 ff0e 	bl	800029c <__adddf3>
 800b480:	4652      	mov	r2, sl
 800b482:	465b      	mov	r3, fp
 800b484:	f7f5 f8c0 	bl	8000608 <__aeabi_dmul>
 800b488:	a33a      	add	r3, pc, #232	@ (adr r3, 800b574 <__kernel_sin+0x164>)
 800b48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48e:	f7f4 ff03 	bl	8000298 <__aeabi_dsub>
 800b492:	4652      	mov	r2, sl
 800b494:	465b      	mov	r3, fp
 800b496:	f7f5 f8b7 	bl	8000608 <__aeabi_dmul>
 800b49a:	a338      	add	r3, pc, #224	@ (adr r3, 800b57c <__kernel_sin+0x16c>)
 800b49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a0:	f7f4 fefc 	bl	800029c <__adddf3>
 800b4a4:	4606      	mov	r6, r0
 800b4a6:	460f      	mov	r7, r1
 800b4a8:	f1b8 0f00 	cmp.w	r8, #0
 800b4ac:	d11b      	bne.n	800b4e6 <__kernel_sin+0xd6>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	4650      	mov	r0, sl
 800b4b4:	4659      	mov	r1, fp
 800b4b6:	f7f5 f8a7 	bl	8000608 <__aeabi_dmul>
 800b4ba:	a325      	add	r3, pc, #148	@ (adr r3, 800b550 <__kernel_sin+0x140>)
 800b4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c0:	f7f4 feea 	bl	8000298 <__aeabi_dsub>
 800b4c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4c8:	f7f5 f89e 	bl	8000608 <__aeabi_dmul>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	4629      	mov	r1, r5
 800b4d4:	f7f4 fee2 	bl	800029c <__adddf3>
 800b4d8:	4604      	mov	r4, r0
 800b4da:	460d      	mov	r5, r1
 800b4dc:	ec45 4b10 	vmov	d0, r4, r5
 800b4e0:	b005      	add	sp, #20
 800b4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4ea:	4b1b      	ldr	r3, [pc, #108]	@ (800b558 <__kernel_sin+0x148>)
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f7f5 f88b 	bl	8000608 <__aeabi_dmul>
 800b4f2:	4632      	mov	r2, r6
 800b4f4:	4680      	mov	r8, r0
 800b4f6:	4689      	mov	r9, r1
 800b4f8:	463b      	mov	r3, r7
 800b4fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4fe:	f7f5 f883 	bl	8000608 <__aeabi_dmul>
 800b502:	4602      	mov	r2, r0
 800b504:	460b      	mov	r3, r1
 800b506:	4640      	mov	r0, r8
 800b508:	4649      	mov	r1, r9
 800b50a:	f7f4 fec5 	bl	8000298 <__aeabi_dsub>
 800b50e:	4652      	mov	r2, sl
 800b510:	465b      	mov	r3, fp
 800b512:	f7f5 f879 	bl	8000608 <__aeabi_dmul>
 800b516:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b51a:	f7f4 febd 	bl	8000298 <__aeabi_dsub>
 800b51e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b550 <__kernel_sin+0x140>)
 800b520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b524:	4606      	mov	r6, r0
 800b526:	460f      	mov	r7, r1
 800b528:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b52c:	f7f5 f86c 	bl	8000608 <__aeabi_dmul>
 800b530:	4602      	mov	r2, r0
 800b532:	460b      	mov	r3, r1
 800b534:	4630      	mov	r0, r6
 800b536:	4639      	mov	r1, r7
 800b538:	f7f4 feb0 	bl	800029c <__adddf3>
 800b53c:	4602      	mov	r2, r0
 800b53e:	460b      	mov	r3, r1
 800b540:	4620      	mov	r0, r4
 800b542:	4629      	mov	r1, r5
 800b544:	f7f4 fea8 	bl	8000298 <__aeabi_dsub>
 800b548:	e7c6      	b.n	800b4d8 <__kernel_sin+0xc8>
 800b54a:	bf00      	nop
 800b54c:	f3af 8000 	nop.w
 800b550:	55555549 	.word	0x55555549
 800b554:	3fc55555 	.word	0x3fc55555
 800b558:	3fe00000 	.word	0x3fe00000
 800b55c:	5acfd57c 	.word	0x5acfd57c
 800b560:	3de5d93a 	.word	0x3de5d93a
 800b564:	8a2b9ceb 	.word	0x8a2b9ceb
 800b568:	3e5ae5e6 	.word	0x3e5ae5e6
 800b56c:	57b1fe7d 	.word	0x57b1fe7d
 800b570:	3ec71de3 	.word	0x3ec71de3
 800b574:	19c161d5 	.word	0x19c161d5
 800b578:	3f2a01a0 	.word	0x3f2a01a0
 800b57c:	1110f8a6 	.word	0x1110f8a6
 800b580:	3f811111 	.word	0x3f811111
 800b584:	00000000 	.word	0x00000000

0800b588 <__ieee754_atan2>:
 800b588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b58c:	ec57 6b11 	vmov	r6, r7, d1
 800b590:	4273      	negs	r3, r6
 800b592:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800b710 <__ieee754_atan2+0x188>
 800b596:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800b59a:	4333      	orrs	r3, r6
 800b59c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b5a0:	4543      	cmp	r3, r8
 800b5a2:	ec51 0b10 	vmov	r0, r1, d0
 800b5a6:	4635      	mov	r5, r6
 800b5a8:	d809      	bhi.n	800b5be <__ieee754_atan2+0x36>
 800b5aa:	4244      	negs	r4, r0
 800b5ac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b5b0:	4304      	orrs	r4, r0
 800b5b2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b5b6:	4544      	cmp	r4, r8
 800b5b8:	468e      	mov	lr, r1
 800b5ba:	4681      	mov	r9, r0
 800b5bc:	d907      	bls.n	800b5ce <__ieee754_atan2+0x46>
 800b5be:	4632      	mov	r2, r6
 800b5c0:	463b      	mov	r3, r7
 800b5c2:	f7f4 fe6b 	bl	800029c <__adddf3>
 800b5c6:	ec41 0b10 	vmov	d0, r0, r1
 800b5ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ce:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800b5d2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800b5d6:	4334      	orrs	r4, r6
 800b5d8:	d103      	bne.n	800b5e2 <__ieee754_atan2+0x5a>
 800b5da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5de:	f7ff bc07 	b.w	800adf0 <atan>
 800b5e2:	17bc      	asrs	r4, r7, #30
 800b5e4:	f004 0402 	and.w	r4, r4, #2
 800b5e8:	ea53 0909 	orrs.w	r9, r3, r9
 800b5ec:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b5f0:	d107      	bne.n	800b602 <__ieee754_atan2+0x7a>
 800b5f2:	2c02      	cmp	r4, #2
 800b5f4:	d05f      	beq.n	800b6b6 <__ieee754_atan2+0x12e>
 800b5f6:	2c03      	cmp	r4, #3
 800b5f8:	d1e5      	bne.n	800b5c6 <__ieee754_atan2+0x3e>
 800b5fa:	a141      	add	r1, pc, #260	@ (adr r1, 800b700 <__ieee754_atan2+0x178>)
 800b5fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b600:	e7e1      	b.n	800b5c6 <__ieee754_atan2+0x3e>
 800b602:	4315      	orrs	r5, r2
 800b604:	d106      	bne.n	800b614 <__ieee754_atan2+0x8c>
 800b606:	f1be 0f00 	cmp.w	lr, #0
 800b60a:	da5f      	bge.n	800b6cc <__ieee754_atan2+0x144>
 800b60c:	a13e      	add	r1, pc, #248	@ (adr r1, 800b708 <__ieee754_atan2+0x180>)
 800b60e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b612:	e7d8      	b.n	800b5c6 <__ieee754_atan2+0x3e>
 800b614:	4542      	cmp	r2, r8
 800b616:	d10f      	bne.n	800b638 <__ieee754_atan2+0xb0>
 800b618:	4293      	cmp	r3, r2
 800b61a:	f104 34ff 	add.w	r4, r4, #4294967295
 800b61e:	d107      	bne.n	800b630 <__ieee754_atan2+0xa8>
 800b620:	2c02      	cmp	r4, #2
 800b622:	d84c      	bhi.n	800b6be <__ieee754_atan2+0x136>
 800b624:	4b34      	ldr	r3, [pc, #208]	@ (800b6f8 <__ieee754_atan2+0x170>)
 800b626:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b62a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b62e:	e7ca      	b.n	800b5c6 <__ieee754_atan2+0x3e>
 800b630:	2c02      	cmp	r4, #2
 800b632:	d848      	bhi.n	800b6c6 <__ieee754_atan2+0x13e>
 800b634:	4b31      	ldr	r3, [pc, #196]	@ (800b6fc <__ieee754_atan2+0x174>)
 800b636:	e7f6      	b.n	800b626 <__ieee754_atan2+0x9e>
 800b638:	4543      	cmp	r3, r8
 800b63a:	d0e4      	beq.n	800b606 <__ieee754_atan2+0x7e>
 800b63c:	1a9b      	subs	r3, r3, r2
 800b63e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800b642:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b646:	da1e      	bge.n	800b686 <__ieee754_atan2+0xfe>
 800b648:	2f00      	cmp	r7, #0
 800b64a:	da01      	bge.n	800b650 <__ieee754_atan2+0xc8>
 800b64c:	323c      	adds	r2, #60	@ 0x3c
 800b64e:	db1e      	blt.n	800b68e <__ieee754_atan2+0x106>
 800b650:	4632      	mov	r2, r6
 800b652:	463b      	mov	r3, r7
 800b654:	f7f5 f902 	bl	800085c <__aeabi_ddiv>
 800b658:	ec41 0b10 	vmov	d0, r0, r1
 800b65c:	f7ff fdb4 	bl	800b1c8 <fabs>
 800b660:	f7ff fbc6 	bl	800adf0 <atan>
 800b664:	ec51 0b10 	vmov	r0, r1, d0
 800b668:	2c01      	cmp	r4, #1
 800b66a:	d013      	beq.n	800b694 <__ieee754_atan2+0x10c>
 800b66c:	2c02      	cmp	r4, #2
 800b66e:	d015      	beq.n	800b69c <__ieee754_atan2+0x114>
 800b670:	2c00      	cmp	r4, #0
 800b672:	d0a8      	beq.n	800b5c6 <__ieee754_atan2+0x3e>
 800b674:	a318      	add	r3, pc, #96	@ (adr r3, 800b6d8 <__ieee754_atan2+0x150>)
 800b676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67a:	f7f4 fe0d 	bl	8000298 <__aeabi_dsub>
 800b67e:	a318      	add	r3, pc, #96	@ (adr r3, 800b6e0 <__ieee754_atan2+0x158>)
 800b680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b684:	e014      	b.n	800b6b0 <__ieee754_atan2+0x128>
 800b686:	a118      	add	r1, pc, #96	@ (adr r1, 800b6e8 <__ieee754_atan2+0x160>)
 800b688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b68c:	e7ec      	b.n	800b668 <__ieee754_atan2+0xe0>
 800b68e:	2000      	movs	r0, #0
 800b690:	2100      	movs	r1, #0
 800b692:	e7e9      	b.n	800b668 <__ieee754_atan2+0xe0>
 800b694:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b698:	4619      	mov	r1, r3
 800b69a:	e794      	b.n	800b5c6 <__ieee754_atan2+0x3e>
 800b69c:	a30e      	add	r3, pc, #56	@ (adr r3, 800b6d8 <__ieee754_atan2+0x150>)
 800b69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a2:	f7f4 fdf9 	bl	8000298 <__aeabi_dsub>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	a10d      	add	r1, pc, #52	@ (adr r1, 800b6e0 <__ieee754_atan2+0x158>)
 800b6ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6b0:	f7f4 fdf2 	bl	8000298 <__aeabi_dsub>
 800b6b4:	e787      	b.n	800b5c6 <__ieee754_atan2+0x3e>
 800b6b6:	a10a      	add	r1, pc, #40	@ (adr r1, 800b6e0 <__ieee754_atan2+0x158>)
 800b6b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6bc:	e783      	b.n	800b5c6 <__ieee754_atan2+0x3e>
 800b6be:	a10c      	add	r1, pc, #48	@ (adr r1, 800b6f0 <__ieee754_atan2+0x168>)
 800b6c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6c4:	e77f      	b.n	800b5c6 <__ieee754_atan2+0x3e>
 800b6c6:	2000      	movs	r0, #0
 800b6c8:	2100      	movs	r1, #0
 800b6ca:	e77c      	b.n	800b5c6 <__ieee754_atan2+0x3e>
 800b6cc:	a106      	add	r1, pc, #24	@ (adr r1, 800b6e8 <__ieee754_atan2+0x160>)
 800b6ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6d2:	e778      	b.n	800b5c6 <__ieee754_atan2+0x3e>
 800b6d4:	f3af 8000 	nop.w
 800b6d8:	33145c07 	.word	0x33145c07
 800b6dc:	3ca1a626 	.word	0x3ca1a626
 800b6e0:	54442d18 	.word	0x54442d18
 800b6e4:	400921fb 	.word	0x400921fb
 800b6e8:	54442d18 	.word	0x54442d18
 800b6ec:	3ff921fb 	.word	0x3ff921fb
 800b6f0:	54442d18 	.word	0x54442d18
 800b6f4:	3fe921fb 	.word	0x3fe921fb
 800b6f8:	0800c810 	.word	0x0800c810
 800b6fc:	0800c7f8 	.word	0x0800c7f8
 800b700:	54442d18 	.word	0x54442d18
 800b704:	c00921fb 	.word	0xc00921fb
 800b708:	54442d18 	.word	0x54442d18
 800b70c:	bff921fb 	.word	0xbff921fb
 800b710:	7ff00000 	.word	0x7ff00000
 800b714:	00000000 	.word	0x00000000

0800b718 <__ieee754_rem_pio2>:
 800b718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b71c:	ec57 6b10 	vmov	r6, r7, d0
 800b720:	4bc5      	ldr	r3, [pc, #788]	@ (800ba38 <__ieee754_rem_pio2+0x320>)
 800b722:	b08d      	sub	sp, #52	@ 0x34
 800b724:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b728:	4598      	cmp	r8, r3
 800b72a:	4604      	mov	r4, r0
 800b72c:	9704      	str	r7, [sp, #16]
 800b72e:	d807      	bhi.n	800b740 <__ieee754_rem_pio2+0x28>
 800b730:	2200      	movs	r2, #0
 800b732:	2300      	movs	r3, #0
 800b734:	ed80 0b00 	vstr	d0, [r0]
 800b738:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b73c:	2500      	movs	r5, #0
 800b73e:	e028      	b.n	800b792 <__ieee754_rem_pio2+0x7a>
 800b740:	4bbe      	ldr	r3, [pc, #760]	@ (800ba3c <__ieee754_rem_pio2+0x324>)
 800b742:	4598      	cmp	r8, r3
 800b744:	d878      	bhi.n	800b838 <__ieee754_rem_pio2+0x120>
 800b746:	9b04      	ldr	r3, [sp, #16]
 800b748:	4dbd      	ldr	r5, [pc, #756]	@ (800ba40 <__ieee754_rem_pio2+0x328>)
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	4630      	mov	r0, r6
 800b74e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800ba00 <__ieee754_rem_pio2+0x2e8>)
 800b750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b754:	4639      	mov	r1, r7
 800b756:	dd38      	ble.n	800b7ca <__ieee754_rem_pio2+0xb2>
 800b758:	f7f4 fd9e 	bl	8000298 <__aeabi_dsub>
 800b75c:	45a8      	cmp	r8, r5
 800b75e:	4606      	mov	r6, r0
 800b760:	460f      	mov	r7, r1
 800b762:	d01a      	beq.n	800b79a <__ieee754_rem_pio2+0x82>
 800b764:	a3a8      	add	r3, pc, #672	@ (adr r3, 800ba08 <__ieee754_rem_pio2+0x2f0>)
 800b766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76a:	f7f4 fd95 	bl	8000298 <__aeabi_dsub>
 800b76e:	4602      	mov	r2, r0
 800b770:	460b      	mov	r3, r1
 800b772:	4680      	mov	r8, r0
 800b774:	4689      	mov	r9, r1
 800b776:	4630      	mov	r0, r6
 800b778:	4639      	mov	r1, r7
 800b77a:	f7f4 fd8d 	bl	8000298 <__aeabi_dsub>
 800b77e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800ba08 <__ieee754_rem_pio2+0x2f0>)
 800b780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b784:	f7f4 fd88 	bl	8000298 <__aeabi_dsub>
 800b788:	e9c4 8900 	strd	r8, r9, [r4]
 800b78c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b790:	2501      	movs	r5, #1
 800b792:	4628      	mov	r0, r5
 800b794:	b00d      	add	sp, #52	@ 0x34
 800b796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b79a:	a39d      	add	r3, pc, #628	@ (adr r3, 800ba10 <__ieee754_rem_pio2+0x2f8>)
 800b79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a0:	f7f4 fd7a 	bl	8000298 <__aeabi_dsub>
 800b7a4:	a39c      	add	r3, pc, #624	@ (adr r3, 800ba18 <__ieee754_rem_pio2+0x300>)
 800b7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	460f      	mov	r7, r1
 800b7ae:	f7f4 fd73 	bl	8000298 <__aeabi_dsub>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	4680      	mov	r8, r0
 800b7b8:	4689      	mov	r9, r1
 800b7ba:	4630      	mov	r0, r6
 800b7bc:	4639      	mov	r1, r7
 800b7be:	f7f4 fd6b 	bl	8000298 <__aeabi_dsub>
 800b7c2:	a395      	add	r3, pc, #596	@ (adr r3, 800ba18 <__ieee754_rem_pio2+0x300>)
 800b7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c8:	e7dc      	b.n	800b784 <__ieee754_rem_pio2+0x6c>
 800b7ca:	f7f4 fd67 	bl	800029c <__adddf3>
 800b7ce:	45a8      	cmp	r8, r5
 800b7d0:	4606      	mov	r6, r0
 800b7d2:	460f      	mov	r7, r1
 800b7d4:	d018      	beq.n	800b808 <__ieee754_rem_pio2+0xf0>
 800b7d6:	a38c      	add	r3, pc, #560	@ (adr r3, 800ba08 <__ieee754_rem_pio2+0x2f0>)
 800b7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7dc:	f7f4 fd5e 	bl	800029c <__adddf3>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	4680      	mov	r8, r0
 800b7e6:	4689      	mov	r9, r1
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	4639      	mov	r1, r7
 800b7ec:	f7f4 fd54 	bl	8000298 <__aeabi_dsub>
 800b7f0:	a385      	add	r3, pc, #532	@ (adr r3, 800ba08 <__ieee754_rem_pio2+0x2f0>)
 800b7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f6:	f7f4 fd51 	bl	800029c <__adddf3>
 800b7fa:	f04f 35ff 	mov.w	r5, #4294967295
 800b7fe:	e9c4 8900 	strd	r8, r9, [r4]
 800b802:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b806:	e7c4      	b.n	800b792 <__ieee754_rem_pio2+0x7a>
 800b808:	a381      	add	r3, pc, #516	@ (adr r3, 800ba10 <__ieee754_rem_pio2+0x2f8>)
 800b80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80e:	f7f4 fd45 	bl	800029c <__adddf3>
 800b812:	a381      	add	r3, pc, #516	@ (adr r3, 800ba18 <__ieee754_rem_pio2+0x300>)
 800b814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b818:	4606      	mov	r6, r0
 800b81a:	460f      	mov	r7, r1
 800b81c:	f7f4 fd3e 	bl	800029c <__adddf3>
 800b820:	4602      	mov	r2, r0
 800b822:	460b      	mov	r3, r1
 800b824:	4680      	mov	r8, r0
 800b826:	4689      	mov	r9, r1
 800b828:	4630      	mov	r0, r6
 800b82a:	4639      	mov	r1, r7
 800b82c:	f7f4 fd34 	bl	8000298 <__aeabi_dsub>
 800b830:	a379      	add	r3, pc, #484	@ (adr r3, 800ba18 <__ieee754_rem_pio2+0x300>)
 800b832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b836:	e7de      	b.n	800b7f6 <__ieee754_rem_pio2+0xde>
 800b838:	4b82      	ldr	r3, [pc, #520]	@ (800ba44 <__ieee754_rem_pio2+0x32c>)
 800b83a:	4598      	cmp	r8, r3
 800b83c:	f200 80d1 	bhi.w	800b9e2 <__ieee754_rem_pio2+0x2ca>
 800b840:	f7ff fcc2 	bl	800b1c8 <fabs>
 800b844:	ec57 6b10 	vmov	r6, r7, d0
 800b848:	a375      	add	r3, pc, #468	@ (adr r3, 800ba20 <__ieee754_rem_pio2+0x308>)
 800b84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84e:	4630      	mov	r0, r6
 800b850:	4639      	mov	r1, r7
 800b852:	f7f4 fed9 	bl	8000608 <__aeabi_dmul>
 800b856:	4b7c      	ldr	r3, [pc, #496]	@ (800ba48 <__ieee754_rem_pio2+0x330>)
 800b858:	2200      	movs	r2, #0
 800b85a:	f7f4 fd1f 	bl	800029c <__adddf3>
 800b85e:	f7f5 f983 	bl	8000b68 <__aeabi_d2iz>
 800b862:	4605      	mov	r5, r0
 800b864:	f7f4 fe66 	bl	8000534 <__aeabi_i2d>
 800b868:	4602      	mov	r2, r0
 800b86a:	460b      	mov	r3, r1
 800b86c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b870:	a363      	add	r3, pc, #396	@ (adr r3, 800ba00 <__ieee754_rem_pio2+0x2e8>)
 800b872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b876:	f7f4 fec7 	bl	8000608 <__aeabi_dmul>
 800b87a:	4602      	mov	r2, r0
 800b87c:	460b      	mov	r3, r1
 800b87e:	4630      	mov	r0, r6
 800b880:	4639      	mov	r1, r7
 800b882:	f7f4 fd09 	bl	8000298 <__aeabi_dsub>
 800b886:	a360      	add	r3, pc, #384	@ (adr r3, 800ba08 <__ieee754_rem_pio2+0x2f0>)
 800b888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88c:	4682      	mov	sl, r0
 800b88e:	468b      	mov	fp, r1
 800b890:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b894:	f7f4 feb8 	bl	8000608 <__aeabi_dmul>
 800b898:	2d1f      	cmp	r5, #31
 800b89a:	4606      	mov	r6, r0
 800b89c:	460f      	mov	r7, r1
 800b89e:	dc0c      	bgt.n	800b8ba <__ieee754_rem_pio2+0x1a2>
 800b8a0:	4b6a      	ldr	r3, [pc, #424]	@ (800ba4c <__ieee754_rem_pio2+0x334>)
 800b8a2:	1e6a      	subs	r2, r5, #1
 800b8a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8a8:	4543      	cmp	r3, r8
 800b8aa:	d006      	beq.n	800b8ba <__ieee754_rem_pio2+0x1a2>
 800b8ac:	4632      	mov	r2, r6
 800b8ae:	463b      	mov	r3, r7
 800b8b0:	4650      	mov	r0, sl
 800b8b2:	4659      	mov	r1, fp
 800b8b4:	f7f4 fcf0 	bl	8000298 <__aeabi_dsub>
 800b8b8:	e00e      	b.n	800b8d8 <__ieee754_rem_pio2+0x1c0>
 800b8ba:	463b      	mov	r3, r7
 800b8bc:	4632      	mov	r2, r6
 800b8be:	4650      	mov	r0, sl
 800b8c0:	4659      	mov	r1, fp
 800b8c2:	f7f4 fce9 	bl	8000298 <__aeabi_dsub>
 800b8c6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b8ca:	9305      	str	r3, [sp, #20]
 800b8cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b8d0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800b8d4:	2b10      	cmp	r3, #16
 800b8d6:	dc02      	bgt.n	800b8de <__ieee754_rem_pio2+0x1c6>
 800b8d8:	e9c4 0100 	strd	r0, r1, [r4]
 800b8dc:	e039      	b.n	800b952 <__ieee754_rem_pio2+0x23a>
 800b8de:	a34c      	add	r3, pc, #304	@ (adr r3, 800ba10 <__ieee754_rem_pio2+0x2f8>)
 800b8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8e8:	f7f4 fe8e 	bl	8000608 <__aeabi_dmul>
 800b8ec:	4606      	mov	r6, r0
 800b8ee:	460f      	mov	r7, r1
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	4650      	mov	r0, sl
 800b8f6:	4659      	mov	r1, fp
 800b8f8:	f7f4 fcce 	bl	8000298 <__aeabi_dsub>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	460b      	mov	r3, r1
 800b900:	4680      	mov	r8, r0
 800b902:	4689      	mov	r9, r1
 800b904:	4650      	mov	r0, sl
 800b906:	4659      	mov	r1, fp
 800b908:	f7f4 fcc6 	bl	8000298 <__aeabi_dsub>
 800b90c:	4632      	mov	r2, r6
 800b90e:	463b      	mov	r3, r7
 800b910:	f7f4 fcc2 	bl	8000298 <__aeabi_dsub>
 800b914:	a340      	add	r3, pc, #256	@ (adr r3, 800ba18 <__ieee754_rem_pio2+0x300>)
 800b916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91a:	4606      	mov	r6, r0
 800b91c:	460f      	mov	r7, r1
 800b91e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b922:	f7f4 fe71 	bl	8000608 <__aeabi_dmul>
 800b926:	4632      	mov	r2, r6
 800b928:	463b      	mov	r3, r7
 800b92a:	f7f4 fcb5 	bl	8000298 <__aeabi_dsub>
 800b92e:	4602      	mov	r2, r0
 800b930:	460b      	mov	r3, r1
 800b932:	4606      	mov	r6, r0
 800b934:	460f      	mov	r7, r1
 800b936:	4640      	mov	r0, r8
 800b938:	4649      	mov	r1, r9
 800b93a:	f7f4 fcad 	bl	8000298 <__aeabi_dsub>
 800b93e:	9a05      	ldr	r2, [sp, #20]
 800b940:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b944:	1ad3      	subs	r3, r2, r3
 800b946:	2b31      	cmp	r3, #49	@ 0x31
 800b948:	dc20      	bgt.n	800b98c <__ieee754_rem_pio2+0x274>
 800b94a:	e9c4 0100 	strd	r0, r1, [r4]
 800b94e:	46c2      	mov	sl, r8
 800b950:	46cb      	mov	fp, r9
 800b952:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b956:	4650      	mov	r0, sl
 800b958:	4642      	mov	r2, r8
 800b95a:	464b      	mov	r3, r9
 800b95c:	4659      	mov	r1, fp
 800b95e:	f7f4 fc9b 	bl	8000298 <__aeabi_dsub>
 800b962:	463b      	mov	r3, r7
 800b964:	4632      	mov	r2, r6
 800b966:	f7f4 fc97 	bl	8000298 <__aeabi_dsub>
 800b96a:	9b04      	ldr	r3, [sp, #16]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b972:	f6bf af0e 	bge.w	800b792 <__ieee754_rem_pio2+0x7a>
 800b976:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800b97a:	6063      	str	r3, [r4, #4]
 800b97c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b980:	f8c4 8000 	str.w	r8, [r4]
 800b984:	60a0      	str	r0, [r4, #8]
 800b986:	60e3      	str	r3, [r4, #12]
 800b988:	426d      	negs	r5, r5
 800b98a:	e702      	b.n	800b792 <__ieee754_rem_pio2+0x7a>
 800b98c:	a326      	add	r3, pc, #152	@ (adr r3, 800ba28 <__ieee754_rem_pio2+0x310>)
 800b98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b992:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b996:	f7f4 fe37 	bl	8000608 <__aeabi_dmul>
 800b99a:	4606      	mov	r6, r0
 800b99c:	460f      	mov	r7, r1
 800b99e:	4602      	mov	r2, r0
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	4640      	mov	r0, r8
 800b9a4:	4649      	mov	r1, r9
 800b9a6:	f7f4 fc77 	bl	8000298 <__aeabi_dsub>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	4682      	mov	sl, r0
 800b9b0:	468b      	mov	fp, r1
 800b9b2:	4640      	mov	r0, r8
 800b9b4:	4649      	mov	r1, r9
 800b9b6:	f7f4 fc6f 	bl	8000298 <__aeabi_dsub>
 800b9ba:	4632      	mov	r2, r6
 800b9bc:	463b      	mov	r3, r7
 800b9be:	f7f4 fc6b 	bl	8000298 <__aeabi_dsub>
 800b9c2:	a31b      	add	r3, pc, #108	@ (adr r3, 800ba30 <__ieee754_rem_pio2+0x318>)
 800b9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c8:	4606      	mov	r6, r0
 800b9ca:	460f      	mov	r7, r1
 800b9cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9d0:	f7f4 fe1a 	bl	8000608 <__aeabi_dmul>
 800b9d4:	4632      	mov	r2, r6
 800b9d6:	463b      	mov	r3, r7
 800b9d8:	f7f4 fc5e 	bl	8000298 <__aeabi_dsub>
 800b9dc:	4606      	mov	r6, r0
 800b9de:	460f      	mov	r7, r1
 800b9e0:	e764      	b.n	800b8ac <__ieee754_rem_pio2+0x194>
 800b9e2:	4b1b      	ldr	r3, [pc, #108]	@ (800ba50 <__ieee754_rem_pio2+0x338>)
 800b9e4:	4598      	cmp	r8, r3
 800b9e6:	d935      	bls.n	800ba54 <__ieee754_rem_pio2+0x33c>
 800b9e8:	4632      	mov	r2, r6
 800b9ea:	463b      	mov	r3, r7
 800b9ec:	4630      	mov	r0, r6
 800b9ee:	4639      	mov	r1, r7
 800b9f0:	f7f4 fc52 	bl	8000298 <__aeabi_dsub>
 800b9f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b9f8:	e9c4 0100 	strd	r0, r1, [r4]
 800b9fc:	e69e      	b.n	800b73c <__ieee754_rem_pio2+0x24>
 800b9fe:	bf00      	nop
 800ba00:	54400000 	.word	0x54400000
 800ba04:	3ff921fb 	.word	0x3ff921fb
 800ba08:	1a626331 	.word	0x1a626331
 800ba0c:	3dd0b461 	.word	0x3dd0b461
 800ba10:	1a600000 	.word	0x1a600000
 800ba14:	3dd0b461 	.word	0x3dd0b461
 800ba18:	2e037073 	.word	0x2e037073
 800ba1c:	3ba3198a 	.word	0x3ba3198a
 800ba20:	6dc9c883 	.word	0x6dc9c883
 800ba24:	3fe45f30 	.word	0x3fe45f30
 800ba28:	2e000000 	.word	0x2e000000
 800ba2c:	3ba3198a 	.word	0x3ba3198a
 800ba30:	252049c1 	.word	0x252049c1
 800ba34:	397b839a 	.word	0x397b839a
 800ba38:	3fe921fb 	.word	0x3fe921fb
 800ba3c:	4002d97b 	.word	0x4002d97b
 800ba40:	3ff921fb 	.word	0x3ff921fb
 800ba44:	413921fb 	.word	0x413921fb
 800ba48:	3fe00000 	.word	0x3fe00000
 800ba4c:	0800c828 	.word	0x0800c828
 800ba50:	7fefffff 	.word	0x7fefffff
 800ba54:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ba58:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800ba5c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ba60:	4630      	mov	r0, r6
 800ba62:	460f      	mov	r7, r1
 800ba64:	f7f5 f880 	bl	8000b68 <__aeabi_d2iz>
 800ba68:	f7f4 fd64 	bl	8000534 <__aeabi_i2d>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	460b      	mov	r3, r1
 800ba70:	4630      	mov	r0, r6
 800ba72:	4639      	mov	r1, r7
 800ba74:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ba78:	f7f4 fc0e 	bl	8000298 <__aeabi_dsub>
 800ba7c:	4b22      	ldr	r3, [pc, #136]	@ (800bb08 <__ieee754_rem_pio2+0x3f0>)
 800ba7e:	2200      	movs	r2, #0
 800ba80:	f7f4 fdc2 	bl	8000608 <__aeabi_dmul>
 800ba84:	460f      	mov	r7, r1
 800ba86:	4606      	mov	r6, r0
 800ba88:	f7f5 f86e 	bl	8000b68 <__aeabi_d2iz>
 800ba8c:	f7f4 fd52 	bl	8000534 <__aeabi_i2d>
 800ba90:	4602      	mov	r2, r0
 800ba92:	460b      	mov	r3, r1
 800ba94:	4630      	mov	r0, r6
 800ba96:	4639      	mov	r1, r7
 800ba98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ba9c:	f7f4 fbfc 	bl	8000298 <__aeabi_dsub>
 800baa0:	4b19      	ldr	r3, [pc, #100]	@ (800bb08 <__ieee754_rem_pio2+0x3f0>)
 800baa2:	2200      	movs	r2, #0
 800baa4:	f7f4 fdb0 	bl	8000608 <__aeabi_dmul>
 800baa8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800baac:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800bab0:	f04f 0803 	mov.w	r8, #3
 800bab4:	2600      	movs	r6, #0
 800bab6:	2700      	movs	r7, #0
 800bab8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800babc:	4632      	mov	r2, r6
 800babe:	463b      	mov	r3, r7
 800bac0:	46c2      	mov	sl, r8
 800bac2:	f108 38ff 	add.w	r8, r8, #4294967295
 800bac6:	f7f5 f807 	bl	8000ad8 <__aeabi_dcmpeq>
 800baca:	2800      	cmp	r0, #0
 800bacc:	d1f4      	bne.n	800bab8 <__ieee754_rem_pio2+0x3a0>
 800bace:	4b0f      	ldr	r3, [pc, #60]	@ (800bb0c <__ieee754_rem_pio2+0x3f4>)
 800bad0:	9301      	str	r3, [sp, #4]
 800bad2:	2302      	movs	r3, #2
 800bad4:	9300      	str	r3, [sp, #0]
 800bad6:	462a      	mov	r2, r5
 800bad8:	4653      	mov	r3, sl
 800bada:	4621      	mov	r1, r4
 800badc:	a806      	add	r0, sp, #24
 800bade:	f000 f897 	bl	800bc10 <__kernel_rem_pio2>
 800bae2:	9b04      	ldr	r3, [sp, #16]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	4605      	mov	r5, r0
 800bae8:	f6bf ae53 	bge.w	800b792 <__ieee754_rem_pio2+0x7a>
 800baec:	e9d4 2100 	ldrd	r2, r1, [r4]
 800baf0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800baf4:	e9c4 2300 	strd	r2, r3, [r4]
 800baf8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800bafc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bb00:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bb04:	e740      	b.n	800b988 <__ieee754_rem_pio2+0x270>
 800bb06:	bf00      	nop
 800bb08:	41700000 	.word	0x41700000
 800bb0c:	0800c8a8 	.word	0x0800c8a8

0800bb10 <scalbn>:
 800bb10:	b570      	push	{r4, r5, r6, lr}
 800bb12:	ec55 4b10 	vmov	r4, r5, d0
 800bb16:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800bb1a:	4606      	mov	r6, r0
 800bb1c:	462b      	mov	r3, r5
 800bb1e:	b991      	cbnz	r1, 800bb46 <scalbn+0x36>
 800bb20:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800bb24:	4323      	orrs	r3, r4
 800bb26:	d03d      	beq.n	800bba4 <scalbn+0x94>
 800bb28:	4b35      	ldr	r3, [pc, #212]	@ (800bc00 <scalbn+0xf0>)
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	4629      	mov	r1, r5
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f7f4 fd6a 	bl	8000608 <__aeabi_dmul>
 800bb34:	4b33      	ldr	r3, [pc, #204]	@ (800bc04 <scalbn+0xf4>)
 800bb36:	429e      	cmp	r6, r3
 800bb38:	4604      	mov	r4, r0
 800bb3a:	460d      	mov	r5, r1
 800bb3c:	da0f      	bge.n	800bb5e <scalbn+0x4e>
 800bb3e:	a328      	add	r3, pc, #160	@ (adr r3, 800bbe0 <scalbn+0xd0>)
 800bb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb44:	e01e      	b.n	800bb84 <scalbn+0x74>
 800bb46:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800bb4a:	4291      	cmp	r1, r2
 800bb4c:	d10b      	bne.n	800bb66 <scalbn+0x56>
 800bb4e:	4622      	mov	r2, r4
 800bb50:	4620      	mov	r0, r4
 800bb52:	4629      	mov	r1, r5
 800bb54:	f7f4 fba2 	bl	800029c <__adddf3>
 800bb58:	4604      	mov	r4, r0
 800bb5a:	460d      	mov	r5, r1
 800bb5c:	e022      	b.n	800bba4 <scalbn+0x94>
 800bb5e:	460b      	mov	r3, r1
 800bb60:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bb64:	3936      	subs	r1, #54	@ 0x36
 800bb66:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800bb6a:	4296      	cmp	r6, r2
 800bb6c:	dd0d      	ble.n	800bb8a <scalbn+0x7a>
 800bb6e:	2d00      	cmp	r5, #0
 800bb70:	a11d      	add	r1, pc, #116	@ (adr r1, 800bbe8 <scalbn+0xd8>)
 800bb72:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb76:	da02      	bge.n	800bb7e <scalbn+0x6e>
 800bb78:	a11d      	add	r1, pc, #116	@ (adr r1, 800bbf0 <scalbn+0xe0>)
 800bb7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb7e:	a31a      	add	r3, pc, #104	@ (adr r3, 800bbe8 <scalbn+0xd8>)
 800bb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb84:	f7f4 fd40 	bl	8000608 <__aeabi_dmul>
 800bb88:	e7e6      	b.n	800bb58 <scalbn+0x48>
 800bb8a:	1872      	adds	r2, r6, r1
 800bb8c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800bb90:	428a      	cmp	r2, r1
 800bb92:	dcec      	bgt.n	800bb6e <scalbn+0x5e>
 800bb94:	2a00      	cmp	r2, #0
 800bb96:	dd08      	ble.n	800bbaa <scalbn+0x9a>
 800bb98:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bb9c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bba0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bba4:	ec45 4b10 	vmov	d0, r4, r5
 800bba8:	bd70      	pop	{r4, r5, r6, pc}
 800bbaa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800bbae:	da08      	bge.n	800bbc2 <scalbn+0xb2>
 800bbb0:	2d00      	cmp	r5, #0
 800bbb2:	a10b      	add	r1, pc, #44	@ (adr r1, 800bbe0 <scalbn+0xd0>)
 800bbb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbb8:	dac1      	bge.n	800bb3e <scalbn+0x2e>
 800bbba:	a10f      	add	r1, pc, #60	@ (adr r1, 800bbf8 <scalbn+0xe8>)
 800bbbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbc0:	e7bd      	b.n	800bb3e <scalbn+0x2e>
 800bbc2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bbc6:	3236      	adds	r2, #54	@ 0x36
 800bbc8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bbcc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bbd0:	4620      	mov	r0, r4
 800bbd2:	4b0d      	ldr	r3, [pc, #52]	@ (800bc08 <scalbn+0xf8>)
 800bbd4:	4629      	mov	r1, r5
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	e7d4      	b.n	800bb84 <scalbn+0x74>
 800bbda:	bf00      	nop
 800bbdc:	f3af 8000 	nop.w
 800bbe0:	c2f8f359 	.word	0xc2f8f359
 800bbe4:	01a56e1f 	.word	0x01a56e1f
 800bbe8:	8800759c 	.word	0x8800759c
 800bbec:	7e37e43c 	.word	0x7e37e43c
 800bbf0:	8800759c 	.word	0x8800759c
 800bbf4:	fe37e43c 	.word	0xfe37e43c
 800bbf8:	c2f8f359 	.word	0xc2f8f359
 800bbfc:	81a56e1f 	.word	0x81a56e1f
 800bc00:	43500000 	.word	0x43500000
 800bc04:	ffff3cb0 	.word	0xffff3cb0
 800bc08:	3c900000 	.word	0x3c900000
 800bc0c:	00000000 	.word	0x00000000

0800bc10 <__kernel_rem_pio2>:
 800bc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc14:	ed2d 8b02 	vpush	{d8}
 800bc18:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800bc1c:	f112 0f14 	cmn.w	r2, #20
 800bc20:	9306      	str	r3, [sp, #24]
 800bc22:	9104      	str	r1, [sp, #16]
 800bc24:	4bbe      	ldr	r3, [pc, #760]	@ (800bf20 <__kernel_rem_pio2+0x310>)
 800bc26:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800bc28:	9008      	str	r0, [sp, #32]
 800bc2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	9b06      	ldr	r3, [sp, #24]
 800bc32:	f103 33ff 	add.w	r3, r3, #4294967295
 800bc36:	bfa8      	it	ge
 800bc38:	1ed4      	subge	r4, r2, #3
 800bc3a:	9305      	str	r3, [sp, #20]
 800bc3c:	bfb2      	itee	lt
 800bc3e:	2400      	movlt	r4, #0
 800bc40:	2318      	movge	r3, #24
 800bc42:	fb94 f4f3 	sdivge	r4, r4, r3
 800bc46:	f06f 0317 	mvn.w	r3, #23
 800bc4a:	fb04 3303 	mla	r3, r4, r3, r3
 800bc4e:	eb03 0b02 	add.w	fp, r3, r2
 800bc52:	9b00      	ldr	r3, [sp, #0]
 800bc54:	9a05      	ldr	r2, [sp, #20]
 800bc56:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800bf10 <__kernel_rem_pio2+0x300>
 800bc5a:	eb03 0802 	add.w	r8, r3, r2
 800bc5e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800bc60:	1aa7      	subs	r7, r4, r2
 800bc62:	ae20      	add	r6, sp, #128	@ 0x80
 800bc64:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bc68:	2500      	movs	r5, #0
 800bc6a:	4545      	cmp	r5, r8
 800bc6c:	dd13      	ble.n	800bc96 <__kernel_rem_pio2+0x86>
 800bc6e:	9b06      	ldr	r3, [sp, #24]
 800bc70:	aa20      	add	r2, sp, #128	@ 0x80
 800bc72:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800bc76:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800bc7a:	f04f 0800 	mov.w	r8, #0
 800bc7e:	9b00      	ldr	r3, [sp, #0]
 800bc80:	4598      	cmp	r8, r3
 800bc82:	dc31      	bgt.n	800bce8 <__kernel_rem_pio2+0xd8>
 800bc84:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800bf10 <__kernel_rem_pio2+0x300>
 800bc88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bc8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bc90:	462f      	mov	r7, r5
 800bc92:	2600      	movs	r6, #0
 800bc94:	e01b      	b.n	800bcce <__kernel_rem_pio2+0xbe>
 800bc96:	42ef      	cmn	r7, r5
 800bc98:	d407      	bmi.n	800bcaa <__kernel_rem_pio2+0x9a>
 800bc9a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bc9e:	f7f4 fc49 	bl	8000534 <__aeabi_i2d>
 800bca2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bca6:	3501      	adds	r5, #1
 800bca8:	e7df      	b.n	800bc6a <__kernel_rem_pio2+0x5a>
 800bcaa:	ec51 0b18 	vmov	r0, r1, d8
 800bcae:	e7f8      	b.n	800bca2 <__kernel_rem_pio2+0x92>
 800bcb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcb4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bcb8:	f7f4 fca6 	bl	8000608 <__aeabi_dmul>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcc4:	f7f4 faea 	bl	800029c <__adddf3>
 800bcc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bccc:	3601      	adds	r6, #1
 800bcce:	9b05      	ldr	r3, [sp, #20]
 800bcd0:	429e      	cmp	r6, r3
 800bcd2:	f1a7 0708 	sub.w	r7, r7, #8
 800bcd6:	ddeb      	ble.n	800bcb0 <__kernel_rem_pio2+0xa0>
 800bcd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bcdc:	f108 0801 	add.w	r8, r8, #1
 800bce0:	ecaa 7b02 	vstmia	sl!, {d7}
 800bce4:	3508      	adds	r5, #8
 800bce6:	e7ca      	b.n	800bc7e <__kernel_rem_pio2+0x6e>
 800bce8:	9b00      	ldr	r3, [sp, #0]
 800bcea:	f8dd 8000 	ldr.w	r8, [sp]
 800bcee:	aa0c      	add	r2, sp, #48	@ 0x30
 800bcf0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bcf4:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcf6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800bcf8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bcfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcfe:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800bd02:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd04:	ab98      	add	r3, sp, #608	@ 0x260
 800bd06:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bd0a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800bd0e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd12:	ac0c      	add	r4, sp, #48	@ 0x30
 800bd14:	ab70      	add	r3, sp, #448	@ 0x1c0
 800bd16:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800bd1a:	46a1      	mov	r9, r4
 800bd1c:	46c2      	mov	sl, r8
 800bd1e:	f1ba 0f00 	cmp.w	sl, #0
 800bd22:	f1a5 0508 	sub.w	r5, r5, #8
 800bd26:	dc77      	bgt.n	800be18 <__kernel_rem_pio2+0x208>
 800bd28:	4658      	mov	r0, fp
 800bd2a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800bd2e:	f7ff feef 	bl	800bb10 <scalbn>
 800bd32:	ec57 6b10 	vmov	r6, r7, d0
 800bd36:	2200      	movs	r2, #0
 800bd38:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800bd3c:	4630      	mov	r0, r6
 800bd3e:	4639      	mov	r1, r7
 800bd40:	f7f4 fc62 	bl	8000608 <__aeabi_dmul>
 800bd44:	ec41 0b10 	vmov	d0, r0, r1
 800bd48:	f000 faba 	bl	800c2c0 <floor>
 800bd4c:	4b75      	ldr	r3, [pc, #468]	@ (800bf24 <__kernel_rem_pio2+0x314>)
 800bd4e:	ec51 0b10 	vmov	r0, r1, d0
 800bd52:	2200      	movs	r2, #0
 800bd54:	f7f4 fc58 	bl	8000608 <__aeabi_dmul>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	4630      	mov	r0, r6
 800bd5e:	4639      	mov	r1, r7
 800bd60:	f7f4 fa9a 	bl	8000298 <__aeabi_dsub>
 800bd64:	460f      	mov	r7, r1
 800bd66:	4606      	mov	r6, r0
 800bd68:	f7f4 fefe 	bl	8000b68 <__aeabi_d2iz>
 800bd6c:	9002      	str	r0, [sp, #8]
 800bd6e:	f7f4 fbe1 	bl	8000534 <__aeabi_i2d>
 800bd72:	4602      	mov	r2, r0
 800bd74:	460b      	mov	r3, r1
 800bd76:	4630      	mov	r0, r6
 800bd78:	4639      	mov	r1, r7
 800bd7a:	f7f4 fa8d 	bl	8000298 <__aeabi_dsub>
 800bd7e:	f1bb 0f00 	cmp.w	fp, #0
 800bd82:	4606      	mov	r6, r0
 800bd84:	460f      	mov	r7, r1
 800bd86:	dd6c      	ble.n	800be62 <__kernel_rem_pio2+0x252>
 800bd88:	f108 31ff 	add.w	r1, r8, #4294967295
 800bd8c:	ab0c      	add	r3, sp, #48	@ 0x30
 800bd8e:	9d02      	ldr	r5, [sp, #8]
 800bd90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd94:	f1cb 0018 	rsb	r0, fp, #24
 800bd98:	fa43 f200 	asr.w	r2, r3, r0
 800bd9c:	4415      	add	r5, r2
 800bd9e:	4082      	lsls	r2, r0
 800bda0:	1a9b      	subs	r3, r3, r2
 800bda2:	aa0c      	add	r2, sp, #48	@ 0x30
 800bda4:	9502      	str	r5, [sp, #8]
 800bda6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800bdaa:	f1cb 0217 	rsb	r2, fp, #23
 800bdae:	fa43 f902 	asr.w	r9, r3, r2
 800bdb2:	f1b9 0f00 	cmp.w	r9, #0
 800bdb6:	dd64      	ble.n	800be82 <__kernel_rem_pio2+0x272>
 800bdb8:	9b02      	ldr	r3, [sp, #8]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	9302      	str	r3, [sp, #8]
 800bdc0:	4615      	mov	r5, r2
 800bdc2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800bdc6:	4590      	cmp	r8, r2
 800bdc8:	f300 80b8 	bgt.w	800bf3c <__kernel_rem_pio2+0x32c>
 800bdcc:	f1bb 0f00 	cmp.w	fp, #0
 800bdd0:	dd07      	ble.n	800bde2 <__kernel_rem_pio2+0x1d2>
 800bdd2:	f1bb 0f01 	cmp.w	fp, #1
 800bdd6:	f000 80bf 	beq.w	800bf58 <__kernel_rem_pio2+0x348>
 800bdda:	f1bb 0f02 	cmp.w	fp, #2
 800bdde:	f000 80c6 	beq.w	800bf6e <__kernel_rem_pio2+0x35e>
 800bde2:	f1b9 0f02 	cmp.w	r9, #2
 800bde6:	d14c      	bne.n	800be82 <__kernel_rem_pio2+0x272>
 800bde8:	4632      	mov	r2, r6
 800bdea:	463b      	mov	r3, r7
 800bdec:	494e      	ldr	r1, [pc, #312]	@ (800bf28 <__kernel_rem_pio2+0x318>)
 800bdee:	2000      	movs	r0, #0
 800bdf0:	f7f4 fa52 	bl	8000298 <__aeabi_dsub>
 800bdf4:	4606      	mov	r6, r0
 800bdf6:	460f      	mov	r7, r1
 800bdf8:	2d00      	cmp	r5, #0
 800bdfa:	d042      	beq.n	800be82 <__kernel_rem_pio2+0x272>
 800bdfc:	4658      	mov	r0, fp
 800bdfe:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800bf18 <__kernel_rem_pio2+0x308>
 800be02:	f7ff fe85 	bl	800bb10 <scalbn>
 800be06:	4630      	mov	r0, r6
 800be08:	4639      	mov	r1, r7
 800be0a:	ec53 2b10 	vmov	r2, r3, d0
 800be0e:	f7f4 fa43 	bl	8000298 <__aeabi_dsub>
 800be12:	4606      	mov	r6, r0
 800be14:	460f      	mov	r7, r1
 800be16:	e034      	b.n	800be82 <__kernel_rem_pio2+0x272>
 800be18:	4b44      	ldr	r3, [pc, #272]	@ (800bf2c <__kernel_rem_pio2+0x31c>)
 800be1a:	2200      	movs	r2, #0
 800be1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be20:	f7f4 fbf2 	bl	8000608 <__aeabi_dmul>
 800be24:	f7f4 fea0 	bl	8000b68 <__aeabi_d2iz>
 800be28:	f7f4 fb84 	bl	8000534 <__aeabi_i2d>
 800be2c:	4b40      	ldr	r3, [pc, #256]	@ (800bf30 <__kernel_rem_pio2+0x320>)
 800be2e:	2200      	movs	r2, #0
 800be30:	4606      	mov	r6, r0
 800be32:	460f      	mov	r7, r1
 800be34:	f7f4 fbe8 	bl	8000608 <__aeabi_dmul>
 800be38:	4602      	mov	r2, r0
 800be3a:	460b      	mov	r3, r1
 800be3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be40:	f7f4 fa2a 	bl	8000298 <__aeabi_dsub>
 800be44:	f7f4 fe90 	bl	8000b68 <__aeabi_d2iz>
 800be48:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be4c:	f849 0b04 	str.w	r0, [r9], #4
 800be50:	4639      	mov	r1, r7
 800be52:	4630      	mov	r0, r6
 800be54:	f7f4 fa22 	bl	800029c <__adddf3>
 800be58:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be60:	e75d      	b.n	800bd1e <__kernel_rem_pio2+0x10e>
 800be62:	d107      	bne.n	800be74 <__kernel_rem_pio2+0x264>
 800be64:	f108 33ff 	add.w	r3, r8, #4294967295
 800be68:	aa0c      	add	r2, sp, #48	@ 0x30
 800be6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be6e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800be72:	e79e      	b.n	800bdb2 <__kernel_rem_pio2+0x1a2>
 800be74:	4b2f      	ldr	r3, [pc, #188]	@ (800bf34 <__kernel_rem_pio2+0x324>)
 800be76:	2200      	movs	r2, #0
 800be78:	f7f4 fe4c 	bl	8000b14 <__aeabi_dcmpge>
 800be7c:	2800      	cmp	r0, #0
 800be7e:	d143      	bne.n	800bf08 <__kernel_rem_pio2+0x2f8>
 800be80:	4681      	mov	r9, r0
 800be82:	2200      	movs	r2, #0
 800be84:	2300      	movs	r3, #0
 800be86:	4630      	mov	r0, r6
 800be88:	4639      	mov	r1, r7
 800be8a:	f7f4 fe25 	bl	8000ad8 <__aeabi_dcmpeq>
 800be8e:	2800      	cmp	r0, #0
 800be90:	f000 80bf 	beq.w	800c012 <__kernel_rem_pio2+0x402>
 800be94:	f108 33ff 	add.w	r3, r8, #4294967295
 800be98:	2200      	movs	r2, #0
 800be9a:	9900      	ldr	r1, [sp, #0]
 800be9c:	428b      	cmp	r3, r1
 800be9e:	da6e      	bge.n	800bf7e <__kernel_rem_pio2+0x36e>
 800bea0:	2a00      	cmp	r2, #0
 800bea2:	f000 8089 	beq.w	800bfb8 <__kernel_rem_pio2+0x3a8>
 800bea6:	f108 38ff 	add.w	r8, r8, #4294967295
 800beaa:	ab0c      	add	r3, sp, #48	@ 0x30
 800beac:	f1ab 0b18 	sub.w	fp, fp, #24
 800beb0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d0f6      	beq.n	800bea6 <__kernel_rem_pio2+0x296>
 800beb8:	4658      	mov	r0, fp
 800beba:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800bf18 <__kernel_rem_pio2+0x308>
 800bebe:	f7ff fe27 	bl	800bb10 <scalbn>
 800bec2:	f108 0301 	add.w	r3, r8, #1
 800bec6:	00da      	lsls	r2, r3, #3
 800bec8:	9205      	str	r2, [sp, #20]
 800beca:	ec55 4b10 	vmov	r4, r5, d0
 800bece:	aa70      	add	r2, sp, #448	@ 0x1c0
 800bed0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800bf2c <__kernel_rem_pio2+0x31c>
 800bed4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800bed8:	4646      	mov	r6, r8
 800beda:	f04f 0a00 	mov.w	sl, #0
 800bede:	2e00      	cmp	r6, #0
 800bee0:	f280 80cf 	bge.w	800c082 <__kernel_rem_pio2+0x472>
 800bee4:	4644      	mov	r4, r8
 800bee6:	2c00      	cmp	r4, #0
 800bee8:	f2c0 80fd 	blt.w	800c0e6 <__kernel_rem_pio2+0x4d6>
 800beec:	4b12      	ldr	r3, [pc, #72]	@ (800bf38 <__kernel_rem_pio2+0x328>)
 800beee:	461f      	mov	r7, r3
 800bef0:	ab70      	add	r3, sp, #448	@ 0x1c0
 800bef2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bef6:	9306      	str	r3, [sp, #24]
 800bef8:	f04f 0a00 	mov.w	sl, #0
 800befc:	f04f 0b00 	mov.w	fp, #0
 800bf00:	2600      	movs	r6, #0
 800bf02:	eba8 0504 	sub.w	r5, r8, r4
 800bf06:	e0e2      	b.n	800c0ce <__kernel_rem_pio2+0x4be>
 800bf08:	f04f 0902 	mov.w	r9, #2
 800bf0c:	e754      	b.n	800bdb8 <__kernel_rem_pio2+0x1a8>
 800bf0e:	bf00      	nop
	...
 800bf1c:	3ff00000 	.word	0x3ff00000
 800bf20:	0800c9f0 	.word	0x0800c9f0
 800bf24:	40200000 	.word	0x40200000
 800bf28:	3ff00000 	.word	0x3ff00000
 800bf2c:	3e700000 	.word	0x3e700000
 800bf30:	41700000 	.word	0x41700000
 800bf34:	3fe00000 	.word	0x3fe00000
 800bf38:	0800c9b0 	.word	0x0800c9b0
 800bf3c:	f854 3b04 	ldr.w	r3, [r4], #4
 800bf40:	b945      	cbnz	r5, 800bf54 <__kernel_rem_pio2+0x344>
 800bf42:	b123      	cbz	r3, 800bf4e <__kernel_rem_pio2+0x33e>
 800bf44:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800bf48:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	3201      	adds	r2, #1
 800bf50:	461d      	mov	r5, r3
 800bf52:	e738      	b.n	800bdc6 <__kernel_rem_pio2+0x1b6>
 800bf54:	1acb      	subs	r3, r1, r3
 800bf56:	e7f7      	b.n	800bf48 <__kernel_rem_pio2+0x338>
 800bf58:	f108 32ff 	add.w	r2, r8, #4294967295
 800bf5c:	ab0c      	add	r3, sp, #48	@ 0x30
 800bf5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf62:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bf66:	a90c      	add	r1, sp, #48	@ 0x30
 800bf68:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bf6c:	e739      	b.n	800bde2 <__kernel_rem_pio2+0x1d2>
 800bf6e:	f108 32ff 	add.w	r2, r8, #4294967295
 800bf72:	ab0c      	add	r3, sp, #48	@ 0x30
 800bf74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf78:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bf7c:	e7f3      	b.n	800bf66 <__kernel_rem_pio2+0x356>
 800bf7e:	a90c      	add	r1, sp, #48	@ 0x30
 800bf80:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bf84:	3b01      	subs	r3, #1
 800bf86:	430a      	orrs	r2, r1
 800bf88:	e787      	b.n	800be9a <__kernel_rem_pio2+0x28a>
 800bf8a:	3401      	adds	r4, #1
 800bf8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bf90:	2a00      	cmp	r2, #0
 800bf92:	d0fa      	beq.n	800bf8a <__kernel_rem_pio2+0x37a>
 800bf94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf96:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bf9a:	eb0d 0503 	add.w	r5, sp, r3
 800bf9e:	9b06      	ldr	r3, [sp, #24]
 800bfa0:	aa20      	add	r2, sp, #128	@ 0x80
 800bfa2:	4443      	add	r3, r8
 800bfa4:	f108 0701 	add.w	r7, r8, #1
 800bfa8:	3d98      	subs	r5, #152	@ 0x98
 800bfaa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800bfae:	4444      	add	r4, r8
 800bfb0:	42bc      	cmp	r4, r7
 800bfb2:	da04      	bge.n	800bfbe <__kernel_rem_pio2+0x3ae>
 800bfb4:	46a0      	mov	r8, r4
 800bfb6:	e6a2      	b.n	800bcfe <__kernel_rem_pio2+0xee>
 800bfb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfba:	2401      	movs	r4, #1
 800bfbc:	e7e6      	b.n	800bf8c <__kernel_rem_pio2+0x37c>
 800bfbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfc0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800bfc4:	f7f4 fab6 	bl	8000534 <__aeabi_i2d>
 800bfc8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800c290 <__kernel_rem_pio2+0x680>
 800bfcc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bfd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bfd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bfd8:	46b2      	mov	sl, r6
 800bfda:	f04f 0800 	mov.w	r8, #0
 800bfde:	9b05      	ldr	r3, [sp, #20]
 800bfe0:	4598      	cmp	r8, r3
 800bfe2:	dd05      	ble.n	800bff0 <__kernel_rem_pio2+0x3e0>
 800bfe4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bfe8:	3701      	adds	r7, #1
 800bfea:	eca5 7b02 	vstmia	r5!, {d7}
 800bfee:	e7df      	b.n	800bfb0 <__kernel_rem_pio2+0x3a0>
 800bff0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800bff4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bff8:	f7f4 fb06 	bl	8000608 <__aeabi_dmul>
 800bffc:	4602      	mov	r2, r0
 800bffe:	460b      	mov	r3, r1
 800c000:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c004:	f7f4 f94a 	bl	800029c <__adddf3>
 800c008:	f108 0801 	add.w	r8, r8, #1
 800c00c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c010:	e7e5      	b.n	800bfde <__kernel_rem_pio2+0x3ce>
 800c012:	f1cb 0000 	rsb	r0, fp, #0
 800c016:	ec47 6b10 	vmov	d0, r6, r7
 800c01a:	f7ff fd79 	bl	800bb10 <scalbn>
 800c01e:	ec55 4b10 	vmov	r4, r5, d0
 800c022:	4b9d      	ldr	r3, [pc, #628]	@ (800c298 <__kernel_rem_pio2+0x688>)
 800c024:	2200      	movs	r2, #0
 800c026:	4620      	mov	r0, r4
 800c028:	4629      	mov	r1, r5
 800c02a:	f7f4 fd73 	bl	8000b14 <__aeabi_dcmpge>
 800c02e:	b300      	cbz	r0, 800c072 <__kernel_rem_pio2+0x462>
 800c030:	4b9a      	ldr	r3, [pc, #616]	@ (800c29c <__kernel_rem_pio2+0x68c>)
 800c032:	2200      	movs	r2, #0
 800c034:	4620      	mov	r0, r4
 800c036:	4629      	mov	r1, r5
 800c038:	f7f4 fae6 	bl	8000608 <__aeabi_dmul>
 800c03c:	f7f4 fd94 	bl	8000b68 <__aeabi_d2iz>
 800c040:	4606      	mov	r6, r0
 800c042:	f7f4 fa77 	bl	8000534 <__aeabi_i2d>
 800c046:	4b94      	ldr	r3, [pc, #592]	@ (800c298 <__kernel_rem_pio2+0x688>)
 800c048:	2200      	movs	r2, #0
 800c04a:	f7f4 fadd 	bl	8000608 <__aeabi_dmul>
 800c04e:	460b      	mov	r3, r1
 800c050:	4602      	mov	r2, r0
 800c052:	4629      	mov	r1, r5
 800c054:	4620      	mov	r0, r4
 800c056:	f7f4 f91f 	bl	8000298 <__aeabi_dsub>
 800c05a:	f7f4 fd85 	bl	8000b68 <__aeabi_d2iz>
 800c05e:	ab0c      	add	r3, sp, #48	@ 0x30
 800c060:	f10b 0b18 	add.w	fp, fp, #24
 800c064:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c068:	f108 0801 	add.w	r8, r8, #1
 800c06c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800c070:	e722      	b.n	800beb8 <__kernel_rem_pio2+0x2a8>
 800c072:	4620      	mov	r0, r4
 800c074:	4629      	mov	r1, r5
 800c076:	f7f4 fd77 	bl	8000b68 <__aeabi_d2iz>
 800c07a:	ab0c      	add	r3, sp, #48	@ 0x30
 800c07c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c080:	e71a      	b.n	800beb8 <__kernel_rem_pio2+0x2a8>
 800c082:	ab0c      	add	r3, sp, #48	@ 0x30
 800c084:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c088:	f7f4 fa54 	bl	8000534 <__aeabi_i2d>
 800c08c:	4622      	mov	r2, r4
 800c08e:	462b      	mov	r3, r5
 800c090:	f7f4 faba 	bl	8000608 <__aeabi_dmul>
 800c094:	4652      	mov	r2, sl
 800c096:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800c09a:	465b      	mov	r3, fp
 800c09c:	4620      	mov	r0, r4
 800c09e:	4629      	mov	r1, r5
 800c0a0:	f7f4 fab2 	bl	8000608 <__aeabi_dmul>
 800c0a4:	3e01      	subs	r6, #1
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	460d      	mov	r5, r1
 800c0aa:	e718      	b.n	800bede <__kernel_rem_pio2+0x2ce>
 800c0ac:	9906      	ldr	r1, [sp, #24]
 800c0ae:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800c0b2:	9106      	str	r1, [sp, #24]
 800c0b4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800c0b8:	f7f4 faa6 	bl	8000608 <__aeabi_dmul>
 800c0bc:	4602      	mov	r2, r0
 800c0be:	460b      	mov	r3, r1
 800c0c0:	4650      	mov	r0, sl
 800c0c2:	4659      	mov	r1, fp
 800c0c4:	f7f4 f8ea 	bl	800029c <__adddf3>
 800c0c8:	3601      	adds	r6, #1
 800c0ca:	4682      	mov	sl, r0
 800c0cc:	468b      	mov	fp, r1
 800c0ce:	9b00      	ldr	r3, [sp, #0]
 800c0d0:	429e      	cmp	r6, r3
 800c0d2:	dc01      	bgt.n	800c0d8 <__kernel_rem_pio2+0x4c8>
 800c0d4:	42b5      	cmp	r5, r6
 800c0d6:	dae9      	bge.n	800c0ac <__kernel_rem_pio2+0x49c>
 800c0d8:	ab48      	add	r3, sp, #288	@ 0x120
 800c0da:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c0de:	e9c5 ab00 	strd	sl, fp, [r5]
 800c0e2:	3c01      	subs	r4, #1
 800c0e4:	e6ff      	b.n	800bee6 <__kernel_rem_pio2+0x2d6>
 800c0e6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c0e8:	2b02      	cmp	r3, #2
 800c0ea:	dc0b      	bgt.n	800c104 <__kernel_rem_pio2+0x4f4>
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	dc39      	bgt.n	800c164 <__kernel_rem_pio2+0x554>
 800c0f0:	d05d      	beq.n	800c1ae <__kernel_rem_pio2+0x59e>
 800c0f2:	9b02      	ldr	r3, [sp, #8]
 800c0f4:	f003 0007 	and.w	r0, r3, #7
 800c0f8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800c0fc:	ecbd 8b02 	vpop	{d8}
 800c100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c104:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c106:	2b03      	cmp	r3, #3
 800c108:	d1f3      	bne.n	800c0f2 <__kernel_rem_pio2+0x4e2>
 800c10a:	9b05      	ldr	r3, [sp, #20]
 800c10c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c110:	eb0d 0403 	add.w	r4, sp, r3
 800c114:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800c118:	4625      	mov	r5, r4
 800c11a:	46c2      	mov	sl, r8
 800c11c:	f1ba 0f00 	cmp.w	sl, #0
 800c120:	f1a5 0508 	sub.w	r5, r5, #8
 800c124:	dc6b      	bgt.n	800c1fe <__kernel_rem_pio2+0x5ee>
 800c126:	4645      	mov	r5, r8
 800c128:	2d01      	cmp	r5, #1
 800c12a:	f1a4 0408 	sub.w	r4, r4, #8
 800c12e:	f300 8087 	bgt.w	800c240 <__kernel_rem_pio2+0x630>
 800c132:	9c05      	ldr	r4, [sp, #20]
 800c134:	ab48      	add	r3, sp, #288	@ 0x120
 800c136:	441c      	add	r4, r3
 800c138:	2000      	movs	r0, #0
 800c13a:	2100      	movs	r1, #0
 800c13c:	f1b8 0f01 	cmp.w	r8, #1
 800c140:	f300 809c 	bgt.w	800c27c <__kernel_rem_pio2+0x66c>
 800c144:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800c148:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800c14c:	f1b9 0f00 	cmp.w	r9, #0
 800c150:	f040 80a6 	bne.w	800c2a0 <__kernel_rem_pio2+0x690>
 800c154:	9b04      	ldr	r3, [sp, #16]
 800c156:	e9c3 7800 	strd	r7, r8, [r3]
 800c15a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c15e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c162:	e7c6      	b.n	800c0f2 <__kernel_rem_pio2+0x4e2>
 800c164:	9d05      	ldr	r5, [sp, #20]
 800c166:	ab48      	add	r3, sp, #288	@ 0x120
 800c168:	441d      	add	r5, r3
 800c16a:	4644      	mov	r4, r8
 800c16c:	2000      	movs	r0, #0
 800c16e:	2100      	movs	r1, #0
 800c170:	2c00      	cmp	r4, #0
 800c172:	da35      	bge.n	800c1e0 <__kernel_rem_pio2+0x5d0>
 800c174:	f1b9 0f00 	cmp.w	r9, #0
 800c178:	d038      	beq.n	800c1ec <__kernel_rem_pio2+0x5dc>
 800c17a:	4602      	mov	r2, r0
 800c17c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c180:	9c04      	ldr	r4, [sp, #16]
 800c182:	e9c4 2300 	strd	r2, r3, [r4]
 800c186:	4602      	mov	r2, r0
 800c188:	460b      	mov	r3, r1
 800c18a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800c18e:	f7f4 f883 	bl	8000298 <__aeabi_dsub>
 800c192:	ad4a      	add	r5, sp, #296	@ 0x128
 800c194:	2401      	movs	r4, #1
 800c196:	45a0      	cmp	r8, r4
 800c198:	da2b      	bge.n	800c1f2 <__kernel_rem_pio2+0x5e2>
 800c19a:	f1b9 0f00 	cmp.w	r9, #0
 800c19e:	d002      	beq.n	800c1a6 <__kernel_rem_pio2+0x596>
 800c1a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	9b04      	ldr	r3, [sp, #16]
 800c1a8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c1ac:	e7a1      	b.n	800c0f2 <__kernel_rem_pio2+0x4e2>
 800c1ae:	9c05      	ldr	r4, [sp, #20]
 800c1b0:	ab48      	add	r3, sp, #288	@ 0x120
 800c1b2:	441c      	add	r4, r3
 800c1b4:	2000      	movs	r0, #0
 800c1b6:	2100      	movs	r1, #0
 800c1b8:	f1b8 0f00 	cmp.w	r8, #0
 800c1bc:	da09      	bge.n	800c1d2 <__kernel_rem_pio2+0x5c2>
 800c1be:	f1b9 0f00 	cmp.w	r9, #0
 800c1c2:	d002      	beq.n	800c1ca <__kernel_rem_pio2+0x5ba>
 800c1c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	9b04      	ldr	r3, [sp, #16]
 800c1cc:	e9c3 0100 	strd	r0, r1, [r3]
 800c1d0:	e78f      	b.n	800c0f2 <__kernel_rem_pio2+0x4e2>
 800c1d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c1d6:	f7f4 f861 	bl	800029c <__adddf3>
 800c1da:	f108 38ff 	add.w	r8, r8, #4294967295
 800c1de:	e7eb      	b.n	800c1b8 <__kernel_rem_pio2+0x5a8>
 800c1e0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c1e4:	f7f4 f85a 	bl	800029c <__adddf3>
 800c1e8:	3c01      	subs	r4, #1
 800c1ea:	e7c1      	b.n	800c170 <__kernel_rem_pio2+0x560>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	e7c6      	b.n	800c180 <__kernel_rem_pio2+0x570>
 800c1f2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c1f6:	f7f4 f851 	bl	800029c <__adddf3>
 800c1fa:	3401      	adds	r4, #1
 800c1fc:	e7cb      	b.n	800c196 <__kernel_rem_pio2+0x586>
 800c1fe:	ed95 7b00 	vldr	d7, [r5]
 800c202:	ed8d 7b00 	vstr	d7, [sp]
 800c206:	ed95 7b02 	vldr	d7, [r5, #8]
 800c20a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c20e:	ec53 2b17 	vmov	r2, r3, d7
 800c212:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c216:	f7f4 f841 	bl	800029c <__adddf3>
 800c21a:	4602      	mov	r2, r0
 800c21c:	460b      	mov	r3, r1
 800c21e:	4606      	mov	r6, r0
 800c220:	460f      	mov	r7, r1
 800c222:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c226:	f7f4 f837 	bl	8000298 <__aeabi_dsub>
 800c22a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c22e:	f7f4 f835 	bl	800029c <__adddf3>
 800c232:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c236:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c23a:	e9c5 6700 	strd	r6, r7, [r5]
 800c23e:	e76d      	b.n	800c11c <__kernel_rem_pio2+0x50c>
 800c240:	ed94 7b00 	vldr	d7, [r4]
 800c244:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800c248:	ec51 0b17 	vmov	r0, r1, d7
 800c24c:	4652      	mov	r2, sl
 800c24e:	465b      	mov	r3, fp
 800c250:	ed8d 7b00 	vstr	d7, [sp]
 800c254:	f7f4 f822 	bl	800029c <__adddf3>
 800c258:	4602      	mov	r2, r0
 800c25a:	460b      	mov	r3, r1
 800c25c:	4606      	mov	r6, r0
 800c25e:	460f      	mov	r7, r1
 800c260:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c264:	f7f4 f818 	bl	8000298 <__aeabi_dsub>
 800c268:	4652      	mov	r2, sl
 800c26a:	465b      	mov	r3, fp
 800c26c:	f7f4 f816 	bl	800029c <__adddf3>
 800c270:	3d01      	subs	r5, #1
 800c272:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c276:	e9c4 6700 	strd	r6, r7, [r4]
 800c27a:	e755      	b.n	800c128 <__kernel_rem_pio2+0x518>
 800c27c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c280:	f7f4 f80c 	bl	800029c <__adddf3>
 800c284:	f108 38ff 	add.w	r8, r8, #4294967295
 800c288:	e758      	b.n	800c13c <__kernel_rem_pio2+0x52c>
 800c28a:	bf00      	nop
 800c28c:	f3af 8000 	nop.w
	...
 800c298:	41700000 	.word	0x41700000
 800c29c:	3e700000 	.word	0x3e700000
 800c2a0:	9b04      	ldr	r3, [sp, #16]
 800c2a2:	9a04      	ldr	r2, [sp, #16]
 800c2a4:	601f      	str	r7, [r3, #0]
 800c2a6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800c2aa:	605c      	str	r4, [r3, #4]
 800c2ac:	609d      	str	r5, [r3, #8]
 800c2ae:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c2b2:	60d3      	str	r3, [r2, #12]
 800c2b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c2b8:	6110      	str	r0, [r2, #16]
 800c2ba:	6153      	str	r3, [r2, #20]
 800c2bc:	e719      	b.n	800c0f2 <__kernel_rem_pio2+0x4e2>
 800c2be:	bf00      	nop

0800c2c0 <floor>:
 800c2c0:	ec51 0b10 	vmov	r0, r1, d0
 800c2c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2cc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800c2d0:	2e13      	cmp	r6, #19
 800c2d2:	460c      	mov	r4, r1
 800c2d4:	4605      	mov	r5, r0
 800c2d6:	4680      	mov	r8, r0
 800c2d8:	dc34      	bgt.n	800c344 <floor+0x84>
 800c2da:	2e00      	cmp	r6, #0
 800c2dc:	da17      	bge.n	800c30e <floor+0x4e>
 800c2de:	a332      	add	r3, pc, #200	@ (adr r3, 800c3a8 <floor+0xe8>)
 800c2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e4:	f7f3 ffda 	bl	800029c <__adddf3>
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	f7f4 fc1c 	bl	8000b28 <__aeabi_dcmpgt>
 800c2f0:	b150      	cbz	r0, 800c308 <floor+0x48>
 800c2f2:	2c00      	cmp	r4, #0
 800c2f4:	da55      	bge.n	800c3a2 <floor+0xe2>
 800c2f6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c2fa:	432c      	orrs	r4, r5
 800c2fc:	2500      	movs	r5, #0
 800c2fe:	42ac      	cmp	r4, r5
 800c300:	4c2b      	ldr	r4, [pc, #172]	@ (800c3b0 <floor+0xf0>)
 800c302:	bf08      	it	eq
 800c304:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c308:	4621      	mov	r1, r4
 800c30a:	4628      	mov	r0, r5
 800c30c:	e023      	b.n	800c356 <floor+0x96>
 800c30e:	4f29      	ldr	r7, [pc, #164]	@ (800c3b4 <floor+0xf4>)
 800c310:	4137      	asrs	r7, r6
 800c312:	ea01 0307 	and.w	r3, r1, r7
 800c316:	4303      	orrs	r3, r0
 800c318:	d01d      	beq.n	800c356 <floor+0x96>
 800c31a:	a323      	add	r3, pc, #140	@ (adr r3, 800c3a8 <floor+0xe8>)
 800c31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c320:	f7f3 ffbc 	bl	800029c <__adddf3>
 800c324:	2200      	movs	r2, #0
 800c326:	2300      	movs	r3, #0
 800c328:	f7f4 fbfe 	bl	8000b28 <__aeabi_dcmpgt>
 800c32c:	2800      	cmp	r0, #0
 800c32e:	d0eb      	beq.n	800c308 <floor+0x48>
 800c330:	2c00      	cmp	r4, #0
 800c332:	bfbe      	ittt	lt
 800c334:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c338:	4133      	asrlt	r3, r6
 800c33a:	18e4      	addlt	r4, r4, r3
 800c33c:	ea24 0407 	bic.w	r4, r4, r7
 800c340:	2500      	movs	r5, #0
 800c342:	e7e1      	b.n	800c308 <floor+0x48>
 800c344:	2e33      	cmp	r6, #51	@ 0x33
 800c346:	dd0a      	ble.n	800c35e <floor+0x9e>
 800c348:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c34c:	d103      	bne.n	800c356 <floor+0x96>
 800c34e:	4602      	mov	r2, r0
 800c350:	460b      	mov	r3, r1
 800c352:	f7f3 ffa3 	bl	800029c <__adddf3>
 800c356:	ec41 0b10 	vmov	d0, r0, r1
 800c35a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c35e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800c362:	f04f 37ff 	mov.w	r7, #4294967295
 800c366:	40df      	lsrs	r7, r3
 800c368:	4207      	tst	r7, r0
 800c36a:	d0f4      	beq.n	800c356 <floor+0x96>
 800c36c:	a30e      	add	r3, pc, #56	@ (adr r3, 800c3a8 <floor+0xe8>)
 800c36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c372:	f7f3 ff93 	bl	800029c <__adddf3>
 800c376:	2200      	movs	r2, #0
 800c378:	2300      	movs	r3, #0
 800c37a:	f7f4 fbd5 	bl	8000b28 <__aeabi_dcmpgt>
 800c37e:	2800      	cmp	r0, #0
 800c380:	d0c2      	beq.n	800c308 <floor+0x48>
 800c382:	2c00      	cmp	r4, #0
 800c384:	da0a      	bge.n	800c39c <floor+0xdc>
 800c386:	2e14      	cmp	r6, #20
 800c388:	d101      	bne.n	800c38e <floor+0xce>
 800c38a:	3401      	adds	r4, #1
 800c38c:	e006      	b.n	800c39c <floor+0xdc>
 800c38e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c392:	2301      	movs	r3, #1
 800c394:	40b3      	lsls	r3, r6
 800c396:	441d      	add	r5, r3
 800c398:	4545      	cmp	r5, r8
 800c39a:	d3f6      	bcc.n	800c38a <floor+0xca>
 800c39c:	ea25 0507 	bic.w	r5, r5, r7
 800c3a0:	e7b2      	b.n	800c308 <floor+0x48>
 800c3a2:	2500      	movs	r5, #0
 800c3a4:	462c      	mov	r4, r5
 800c3a6:	e7af      	b.n	800c308 <floor+0x48>
 800c3a8:	8800759c 	.word	0x8800759c
 800c3ac:	7e37e43c 	.word	0x7e37e43c
 800c3b0:	bff00000 	.word	0xbff00000
 800c3b4:	000fffff 	.word	0x000fffff

0800c3b8 <_init>:
 800c3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ba:	bf00      	nop
 800c3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3be:	bc08      	pop	{r3}
 800c3c0:	469e      	mov	lr, r3
 800c3c2:	4770      	bx	lr

0800c3c4 <_fini>:
 800c3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3c6:	bf00      	nop
 800c3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ca:	bc08      	pop	{r3}
 800c3cc:	469e      	mov	lr, r3
 800c3ce:	4770      	bx	lr
