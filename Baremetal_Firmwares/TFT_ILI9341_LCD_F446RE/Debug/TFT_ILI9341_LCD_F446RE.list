
TFT_ILI9341_LCD_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033e4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001180  080035a8  080035a8  000045a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004728  08004728  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004728  08004728  00005728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004730  08004730  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004730  08004730  00005730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004734  08004734  00005734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004738  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000010  08004748  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08004748  000060e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000876a  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001caa  00000000  00000000  0000e7aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  00010458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000620  00000000  00000000  00010c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002153e  00000000  00000000  000112b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae6e  00000000  00000000  000327f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8808  00000000  00000000  0003d664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00105e6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002038  00000000  00000000  00105eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  00107ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003590 	.word	0x08003590

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08003590 	.word	0x08003590

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4a06      	ldr	r2, [pc, #24]	@ (8000518 <HAL_SPI_TxCpltCallback+0x24>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d105      	bne.n	8000510 <HAL_SPI_TxCpltCallback+0x1c>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000504:	2201      	movs	r2, #1
 8000506:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800050a:	4804      	ldr	r0, [pc, #16]	@ (800051c <HAL_SPI_TxCpltCallback+0x28>)
 800050c:	f001 feda 	bl	80022c4 <HAL_GPIO_WritePin>
  }
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	2000002c 	.word	0x2000002c
 800051c:	40020400 	.word	0x40020400

08000520 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800052a:	bf00      	nop
 800052c:	4b08      	ldr	r3, [pc, #32]	@ (8000550 <ILI9341_SPI_Tx+0x30>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	689b      	ldr	r3, [r3, #8]
 8000532:	f003 0302 	and.w	r3, r3, #2
 8000536:	2b02      	cmp	r3, #2
 8000538:	d1f8      	bne.n	800052c <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 800053a:	1dfb      	adds	r3, r7, #7
 800053c:	2201      	movs	r2, #1
 800053e:	4619      	mov	r1, r3
 8000540:	4803      	ldr	r0, [pc, #12]	@ (8000550 <ILI9341_SPI_Tx+0x30>)
 8000542:	f002 fdd5 	bl	80030f0 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	2000002c 	.word	0x2000002c

08000554 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	460b      	mov	r3, r1
 800055e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000560:	bf00      	nop
 8000562:	4b08      	ldr	r3, [pc, #32]	@ (8000584 <ILI9341_SPI_TxBuffer+0x30>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	f003 0302 	and.w	r3, r3, #2
 800056c:	2b02      	cmp	r3, #2
 800056e:	d1f8      	bne.n	8000562 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8000570:	887b      	ldrh	r3, [r7, #2]
 8000572:	461a      	mov	r2, r3
 8000574:	6879      	ldr	r1, [r7, #4]
 8000576:	4803      	ldr	r0, [pc, #12]	@ (8000584 <ILI9341_SPI_TxBuffer+0x30>)
 8000578:	f002 fdba 	bl	80030f0 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	2000002c 	.word	0x2000002c

08000588 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000592:	2200      	movs	r2, #0
 8000594:	2101      	movs	r1, #1
 8000596:	4808      	ldr	r0, [pc, #32]	@ (80005b8 <ILI9341_WriteCommand+0x30>)
 8000598:	f001 fe94 	bl	80022c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800059c:	2200      	movs	r2, #0
 800059e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005a2:	4805      	ldr	r0, [pc, #20]	@ (80005b8 <ILI9341_WriteCommand+0x30>)
 80005a4:	f001 fe8e 	bl	80022c4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ffb8 	bl	8000520 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40020400 	.word	0x40020400

080005bc <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80005c6:	2201      	movs	r2, #1
 80005c8:	2101      	movs	r1, #1
 80005ca:	4808      	ldr	r0, [pc, #32]	@ (80005ec <ILI9341_WriteData+0x30>)
 80005cc:	f001 fe7a 	bl	80022c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005d6:	4805      	ldr	r0, [pc, #20]	@ (80005ec <ILI9341_WriteData+0x30>)
 80005d8:	f001 fe74 	bl	80022c4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff ff9e 	bl	8000520 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40020400 	.word	0x40020400

080005f0 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80005fc:	2201      	movs	r2, #1
 80005fe:	2101      	movs	r1, #1
 8000600:	4808      	ldr	r0, [pc, #32]	@ (8000624 <ILI9341_WriteBuffer+0x34>)
 8000602:	f001 fe5f 	bl	80022c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800060c:	4805      	ldr	r0, [pc, #20]	@ (8000624 <ILI9341_WriteBuffer+0x34>)
 800060e:	f001 fe59 	bl	80022c4 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000612:	887b      	ldrh	r3, [r7, #2]
 8000614:	4619      	mov	r1, r3
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f7ff ff9c 	bl	8000554 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40020400 	.word	0x40020400

08000628 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000628:	b590      	push	{r4, r7, lr}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	4604      	mov	r4, r0
 8000630:	4608      	mov	r0, r1
 8000632:	4611      	mov	r1, r2
 8000634:	461a      	mov	r2, r3
 8000636:	4623      	mov	r3, r4
 8000638:	80fb      	strh	r3, [r7, #6]
 800063a:	4603      	mov	r3, r0
 800063c:	80bb      	strh	r3, [r7, #4]
 800063e:	460b      	mov	r3, r1
 8000640:	807b      	strh	r3, [r7, #2]
 8000642:	4613      	mov	r3, r2
 8000644:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	0a1b      	lsrs	r3, r3, #8
 800064a:	b29b      	uxth	r3, r3
 800064c:	b2db      	uxtb	r3, r3
 800064e:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8000656:	887b      	ldrh	r3, [r7, #2]
 8000658:	0a1b      	lsrs	r3, r3, #8
 800065a:	b29b      	uxth	r3, r3
 800065c:	b2db      	uxtb	r3, r3
 800065e:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8000660:	887b      	ldrh	r3, [r7, #2]
 8000662:	b2db      	uxtb	r3, r3
 8000664:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8000666:	202a      	movs	r0, #42	@ 0x2a
 8000668:	f7ff ff8e 	bl	8000588 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2104      	movs	r1, #4
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ffbc 	bl	80005f0 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8000678:	88bb      	ldrh	r3, [r7, #4]
 800067a:	0a1b      	lsrs	r3, r3, #8
 800067c:	b29b      	uxth	r3, r3
 800067e:	b2db      	uxtb	r3, r3
 8000680:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8000682:	88bb      	ldrh	r3, [r7, #4]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8000688:	883b      	ldrh	r3, [r7, #0]
 800068a:	0a1b      	lsrs	r3, r3, #8
 800068c:	b29b      	uxth	r3, r3
 800068e:	b2db      	uxtb	r3, r3
 8000690:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8000692:	883b      	ldrh	r3, [r7, #0]
 8000694:	b2db      	uxtb	r3, r3
 8000696:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8000698:	202b      	movs	r0, #43	@ 0x2b
 800069a:	f7ff ff75 	bl	8000588 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	2104      	movs	r1, #4
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ffa3 	bl	80005f0 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 80006aa:	202c      	movs	r0, #44	@ 0x2c
 80006ac:	f7ff ff6c 	bl	8000588 <ILI9341_WriteCommand>
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd90      	pop	{r4, r7, pc}

080006b8 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 80006bc:	2200      	movs	r2, #0
 80006be:	2102      	movs	r1, #2
 80006c0:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <ILI9341_Reset+0x40>)
 80006c2:	f001 fdff 	bl	80022c4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80006c6:	200a      	movs	r0, #10
 80006c8:	f000 ffc2 	bl	8001650 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006d2:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <ILI9341_Reset+0x40>)
 80006d4:	f001 fdf6 	bl	80022c4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80006d8:	200a      	movs	r0, #10
 80006da:	f000 ffb9 	bl	8001650 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 80006de:	2201      	movs	r2, #1
 80006e0:	2102      	movs	r1, #2
 80006e2:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <ILI9341_Reset+0x40>)
 80006e4:	f001 fdee 	bl	80022c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006ee:	4802      	ldr	r0, [pc, #8]	@ (80006f8 <ILI9341_Reset+0x40>)
 80006f0:	f001 fde8 	bl	80022c4 <HAL_GPIO_WritePin>
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40020400 	.word	0x40020400

080006fc <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000700:	2201      	movs	r2, #1
 8000702:	2102      	movs	r1, #2
 8000704:	4802      	ldr	r0, [pc, #8]	@ (8000710 <ILI9341_Enable+0x14>)
 8000706:	f001 fddd 	bl	80022c4 <HAL_GPIO_WritePin>
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40020400 	.word	0x40020400

08000714 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000718:	f7ff fff0 	bl	80006fc <ILI9341_Enable>
	ILI9341_Reset();
 800071c:	f7ff ffcc 	bl	80006b8 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000720:	2001      	movs	r0, #1
 8000722:	f7ff ff31 	bl	8000588 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000726:	200a      	movs	r0, #10
 8000728:	f000 ff92 	bl	8001650 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 800072c:	20cb      	movs	r0, #203	@ 0xcb
 800072e:	f7ff ff2b 	bl	8000588 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000732:	2039      	movs	r0, #57	@ 0x39
 8000734:	f7ff ff42 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000738:	202c      	movs	r0, #44	@ 0x2c
 800073a:	f7ff ff3f 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800073e:	2000      	movs	r0, #0
 8000740:	f7ff ff3c 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000744:	2034      	movs	r0, #52	@ 0x34
 8000746:	f7ff ff39 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 800074a:	2002      	movs	r0, #2
 800074c:	f7ff ff36 	bl	80005bc <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000750:	20cf      	movs	r0, #207	@ 0xcf
 8000752:	f7ff ff19 	bl	8000588 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000756:	2000      	movs	r0, #0
 8000758:	f7ff ff30 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 800075c:	20c1      	movs	r0, #193	@ 0xc1
 800075e:	f7ff ff2d 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000762:	2030      	movs	r0, #48	@ 0x30
 8000764:	f7ff ff2a 	bl	80005bc <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000768:	20e8      	movs	r0, #232	@ 0xe8
 800076a:	f7ff ff0d 	bl	8000588 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 800076e:	2085      	movs	r0, #133	@ 0x85
 8000770:	f7ff ff24 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000774:	2000      	movs	r0, #0
 8000776:	f7ff ff21 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 800077a:	2078      	movs	r0, #120	@ 0x78
 800077c:	f7ff ff1e 	bl	80005bc <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000780:	20ea      	movs	r0, #234	@ 0xea
 8000782:	f7ff ff01 	bl	8000588 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000786:	2000      	movs	r0, #0
 8000788:	f7ff ff18 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff ff15 	bl	80005bc <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000792:	20ed      	movs	r0, #237	@ 0xed
 8000794:	f7ff fef8 	bl	8000588 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000798:	2064      	movs	r0, #100	@ 0x64
 800079a:	f7ff ff0f 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800079e:	2003      	movs	r0, #3
 80007a0:	f7ff ff0c 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 80007a4:	2012      	movs	r0, #18
 80007a6:	f7ff ff09 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 80007aa:	2081      	movs	r0, #129	@ 0x81
 80007ac:	f7ff ff06 	bl	80005bc <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 80007b0:	20f7      	movs	r0, #247	@ 0xf7
 80007b2:	f7ff fee9 	bl	8000588 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 80007b6:	2020      	movs	r0, #32
 80007b8:	f7ff ff00 	bl	80005bc <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 80007bc:	20c0      	movs	r0, #192	@ 0xc0
 80007be:	f7ff fee3 	bl	8000588 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 80007c2:	2023      	movs	r0, #35	@ 0x23
 80007c4:	f7ff fefa 	bl	80005bc <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 80007c8:	20c1      	movs	r0, #193	@ 0xc1
 80007ca:	f7ff fedd 	bl	8000588 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 80007ce:	2010      	movs	r0, #16
 80007d0:	f7ff fef4 	bl	80005bc <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 80007d4:	20c5      	movs	r0, #197	@ 0xc5
 80007d6:	f7ff fed7 	bl	8000588 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 80007da:	203e      	movs	r0, #62	@ 0x3e
 80007dc:	f7ff feee 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 80007e0:	2028      	movs	r0, #40	@ 0x28
 80007e2:	f7ff feeb 	bl	80005bc <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 80007e6:	20c7      	movs	r0, #199	@ 0xc7
 80007e8:	f7ff fece 	bl	8000588 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 80007ec:	2086      	movs	r0, #134	@ 0x86
 80007ee:	f7ff fee5 	bl	80005bc <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 80007f2:	2036      	movs	r0, #54	@ 0x36
 80007f4:	f7ff fec8 	bl	8000588 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 80007f8:	2048      	movs	r0, #72	@ 0x48
 80007fa:	f7ff fedf 	bl	80005bc <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 80007fe:	203a      	movs	r0, #58	@ 0x3a
 8000800:	f7ff fec2 	bl	8000588 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000804:	2055      	movs	r0, #85	@ 0x55
 8000806:	f7ff fed9 	bl	80005bc <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 800080a:	20b1      	movs	r0, #177	@ 0xb1
 800080c:	f7ff febc 	bl	8000588 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000810:	2000      	movs	r0, #0
 8000812:	f7ff fed3 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000816:	2018      	movs	r0, #24
 8000818:	f7ff fed0 	bl	80005bc <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 800081c:	20b6      	movs	r0, #182	@ 0xb6
 800081e:	f7ff feb3 	bl	8000588 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000822:	2008      	movs	r0, #8
 8000824:	f7ff feca 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000828:	2082      	movs	r0, #130	@ 0x82
 800082a:	f7ff fec7 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 800082e:	2027      	movs	r0, #39	@ 0x27
 8000830:	f7ff fec4 	bl	80005bc <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000834:	20f2      	movs	r0, #242	@ 0xf2
 8000836:	f7ff fea7 	bl	8000588 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800083a:	2000      	movs	r0, #0
 800083c:	f7ff febe 	bl	80005bc <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000840:	2026      	movs	r0, #38	@ 0x26
 8000842:	f7ff fea1 	bl	8000588 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000846:	2001      	movs	r0, #1
 8000848:	f7ff feb8 	bl	80005bc <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 800084c:	20e0      	movs	r0, #224	@ 0xe0
 800084e:	f7ff fe9b 	bl	8000588 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000852:	200f      	movs	r0, #15
 8000854:	f7ff feb2 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000858:	2031      	movs	r0, #49	@ 0x31
 800085a:	f7ff feaf 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 800085e:	202b      	movs	r0, #43	@ 0x2b
 8000860:	f7ff feac 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000864:	200c      	movs	r0, #12
 8000866:	f7ff fea9 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800086a:	200e      	movs	r0, #14
 800086c:	f7ff fea6 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000870:	2008      	movs	r0, #8
 8000872:	f7ff fea3 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000876:	204e      	movs	r0, #78	@ 0x4e
 8000878:	f7ff fea0 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 800087c:	20f1      	movs	r0, #241	@ 0xf1
 800087e:	f7ff fe9d 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000882:	2037      	movs	r0, #55	@ 0x37
 8000884:	f7ff fe9a 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000888:	2007      	movs	r0, #7
 800088a:	f7ff fe97 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 800088e:	2010      	movs	r0, #16
 8000890:	f7ff fe94 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000894:	2003      	movs	r0, #3
 8000896:	f7ff fe91 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800089a:	200e      	movs	r0, #14
 800089c:	f7ff fe8e 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 80008a0:	2009      	movs	r0, #9
 80008a2:	f7ff fe8b 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff fe88 	bl	80005bc <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 80008ac:	20e1      	movs	r0, #225	@ 0xe1
 80008ae:	f7ff fe6b 	bl	8000588 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff fe82 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80008b8:	200e      	movs	r0, #14
 80008ba:	f7ff fe7f 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 80008be:	2014      	movs	r0, #20
 80008c0:	f7ff fe7c 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80008c4:	2003      	movs	r0, #3
 80008c6:	f7ff fe79 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 80008ca:	2011      	movs	r0, #17
 80008cc:	f7ff fe76 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80008d0:	2007      	movs	r0, #7
 80008d2:	f7ff fe73 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80008d6:	2031      	movs	r0, #49	@ 0x31
 80008d8:	f7ff fe70 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80008dc:	20c1      	movs	r0, #193	@ 0xc1
 80008de:	f7ff fe6d 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 80008e2:	2048      	movs	r0, #72	@ 0x48
 80008e4:	f7ff fe6a 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80008e8:	2008      	movs	r0, #8
 80008ea:	f7ff fe67 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 80008ee:	200f      	movs	r0, #15
 80008f0:	f7ff fe64 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80008f4:	200c      	movs	r0, #12
 80008f6:	f7ff fe61 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80008fa:	2031      	movs	r0, #49	@ 0x31
 80008fc:	f7ff fe5e 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000900:	2036      	movs	r0, #54	@ 0x36
 8000902:	f7ff fe5b 	bl	80005bc <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000906:	200f      	movs	r0, #15
 8000908:	f7ff fe58 	bl	80005bc <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 800090c:	2011      	movs	r0, #17
 800090e:	f7ff fe3b 	bl	8000588 <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000912:	2064      	movs	r0, #100	@ 0x64
 8000914:	f000 fe9c 	bl	8001650 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000918:	2029      	movs	r0, #41	@ 0x29
 800091a:	f7ff fe35 	bl	8000588 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 800091e:	2000      	movs	r0, #0
 8000920:	f000 f802 	bl	8000928 <ILI9341_SetRotation>
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}

08000928 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000932:	2036      	movs	r0, #54	@ 0x36
 8000934:	f7ff fe28 	bl	8000588 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000938:	2001      	movs	r0, #1
 800093a:	f000 fe89 	bl	8001650 <HAL_Delay>

	switch(rotation)
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	2b03      	cmp	r3, #3
 8000942:	d837      	bhi.n	80009b4 <ILI9341_SetRotation+0x8c>
 8000944:	a201      	add	r2, pc, #4	@ (adr r2, 800094c <ILI9341_SetRotation+0x24>)
 8000946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094a:	bf00      	nop
 800094c:	0800095d 	.word	0x0800095d
 8000950:	08000973 	.word	0x08000973
 8000954:	08000989 	.word	0x08000989
 8000958:	0800099f 	.word	0x0800099f
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 800095c:	2048      	movs	r0, #72	@ 0x48
 800095e:	f7ff fe2d 	bl	80005bc <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000962:	4b17      	ldr	r3, [pc, #92]	@ (80009c0 <ILI9341_SetRotation+0x98>)
 8000964:	22f0      	movs	r2, #240	@ 0xf0
 8000966:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000968:	4b16      	ldr	r3, [pc, #88]	@ (80009c4 <ILI9341_SetRotation+0x9c>)
 800096a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800096e:	801a      	strh	r2, [r3, #0]
		break;
 8000970:	e021      	b.n	80009b6 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000972:	2028      	movs	r0, #40	@ 0x28
 8000974:	f7ff fe22 	bl	80005bc <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000978:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <ILI9341_SetRotation+0x98>)
 800097a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800097e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000980:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <ILI9341_SetRotation+0x9c>)
 8000982:	22f0      	movs	r2, #240	@ 0xf0
 8000984:	801a      	strh	r2, [r3, #0]
		break;
 8000986:	e016      	b.n	80009b6 <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000988:	2088      	movs	r0, #136	@ 0x88
 800098a:	f7ff fe17 	bl	80005bc <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 800098e:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <ILI9341_SetRotation+0x98>)
 8000990:	22f0      	movs	r2, #240	@ 0xf0
 8000992:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000994:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <ILI9341_SetRotation+0x9c>)
 8000996:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800099a:	801a      	strh	r2, [r3, #0]
		break;
 800099c:	e00b      	b.n	80009b6 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 800099e:	20e8      	movs	r0, #232	@ 0xe8
 80009a0:	f7ff fe0c 	bl	80005bc <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <ILI9341_SetRotation+0x98>)
 80009a6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80009aa:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80009ac:	4b05      	ldr	r3, [pc, #20]	@ (80009c4 <ILI9341_SetRotation+0x9c>)
 80009ae:	22f0      	movs	r2, #240	@ 0xf0
 80009b0:	801a      	strh	r2, [r3, #0]
		break;
 80009b2:	e000      	b.n	80009b6 <ILI9341_SetRotation+0x8e>
	default:
		break;
 80009b4:	bf00      	nop
	}
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000002 	.word	0x20000002
 80009c4:	20000000 	.word	0x20000000

080009c8 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 80009c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009cc:	b08d      	sub	sp, #52	@ 0x34
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	4603      	mov	r3, r0
 80009d2:	6039      	str	r1, [r7, #0]
 80009d4:	80fb      	strh	r3, [r7, #6]
 80009d6:	466b      	mov	r3, sp
 80009d8:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80009e6:	d202      	bcs.n	80009ee <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80009ec:	e002      	b.n	80009f4 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 80009ee:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80009f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	2101      	movs	r1, #1
 80009f8:	483f      	ldr	r0, [pc, #252]	@ (8000af8 <ILI9341_DrawColorBurst+0x130>)
 80009fa:	f001 fc63 	bl	80022c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a04:	483c      	ldr	r0, [pc, #240]	@ (8000af8 <ILI9341_DrawColorBurst+0x130>)
 8000a06:	f001 fc5d 	bl	80022c4 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 8000a14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000a16:	460b      	mov	r3, r1
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	61fb      	str	r3, [r7, #28]
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	4688      	mov	r8, r1
 8000a20:	4699      	mov	r9, r3
 8000a22:	f04f 0200 	mov.w	r2, #0
 8000a26:	f04f 0300 	mov.w	r3, #0
 8000a2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a36:	2300      	movs	r3, #0
 8000a38:	460c      	mov	r4, r1
 8000a3a:	461d      	mov	r5, r3
 8000a3c:	f04f 0200 	mov.w	r2, #0
 8000a40:	f04f 0300 	mov.w	r3, #0
 8000a44:	00eb      	lsls	r3, r5, #3
 8000a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a4a:	00e2      	lsls	r2, r4, #3
 8000a4c:	1dcb      	adds	r3, r1, #7
 8000a4e:	08db      	lsrs	r3, r3, #3
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	ebad 0d03 	sub.w	sp, sp, r3
 8000a56:	466b      	mov	r3, sp
 8000a58:	3300      	adds	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a60:	e00e      	b.n	8000a80 <ILI9341_DrawColorBurst+0xb8>
	{
		BurstBuffer[j] = chifted;
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a66:	4413      	add	r3, r2
 8000a68:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000a6c:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a70:	3301      	adds	r3, #1
 8000a72:	88fa      	ldrh	r2, [r7, #6]
 8000a74:	b2d1      	uxtb	r1, r2
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a7c:	3302      	adds	r3, #2
 8000a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d3ec      	bcc.n	8000a62 <ILI9341_DrawColorBurst+0x9a>
	}

	uint32_t SendingSize = size * 2;
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a9c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000aa0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000aa2:	fb01 f202 	mul.w	r2, r1, r2
 8000aa6:	1a9b      	subs	r3, r3, r2
 8000aa8:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d010      	beq.n	8000ad2 <ILI9341_DrawColorBurst+0x10a>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ab4:	e009      	b.n	8000aca <ILI9341_DrawColorBurst+0x102>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	230a      	movs	r3, #10
 8000abc:	69b9      	ldr	r1, [r7, #24]
 8000abe:	480f      	ldr	r0, [pc, #60]	@ (8000afc <ILI9341_DrawColorBurst+0x134>)
 8000ac0:	f002 f9d1 	bl	8002e66 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d3f1      	bcc.n	8000ab6 <ILI9341_DrawColorBurst+0xee>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	230a      	movs	r3, #10
 8000ad8:	69b9      	ldr	r1, [r7, #24]
 8000ada:	4808      	ldr	r0, [pc, #32]	@ (8000afc <ILI9341_DrawColorBurst+0x134>)
 8000adc:	f002 f9c3 	bl	8002e66 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ae6:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <ILI9341_DrawColorBurst+0x130>)
 8000ae8:	f001 fbec 	bl	80022c4 <HAL_GPIO_WritePin>
 8000aec:	46b5      	mov	sp, r6
}
 8000aee:	bf00      	nop
 8000af0:	3734      	adds	r7, #52	@ 0x34
 8000af2:	46bd      	mov	sp, r7
 8000af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000af8:	40020400 	.word	0x40020400
 8000afc:	2000002c 	.word	0x2000002c

08000b00 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <ILI9341_FillScreen+0x44>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <ILI9341_FillScreen+0x48>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	2100      	movs	r1, #0
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f7ff fd85 	bl	8000628 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <ILI9341_FillScreen+0x44>)
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <ILI9341_FillScreen+0x48>)
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	fb02 f303 	mul.w	r3, r2, r3
 8000b30:	461a      	mov	r2, r3
 8000b32:	88fb      	ldrh	r3, [r7, #6]
 8000b34:	4611      	mov	r1, r2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ff46 	bl	80009c8 <ILI9341_DrawColorBurst>
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000002 	.word	0x20000002
 8000b48:	20000000 	.word	0x20000000

08000b4c <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
 8000b56:	460b      	mov	r3, r1
 8000b58:	80bb      	strh	r3, [r7, #4]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8000c10 <ILI9341_DrawPixel+0xc4>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	88fa      	ldrh	r2, [r7, #6]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d24d      	bcs.n	8000c06 <ILI9341_DrawPixel+0xba>
 8000b6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000c14 <ILI9341_DrawPixel+0xc8>)
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	88ba      	ldrh	r2, [r7, #4]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d247      	bcs.n	8000c06 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	753b      	strb	r3, [r7, #20]
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	757b      	strb	r3, [r7, #21]
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	121b      	asrs	r3, r3, #8
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	75bb      	strb	r3, [r7, #22]
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	3301      	adds	r3, #1
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000b9a:	88bb      	ldrh	r3, [r7, #4]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	743b      	strb	r3, [r7, #16]
 8000ba4:	88bb      	ldrh	r3, [r7, #4]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	747b      	strb	r3, [r7, #17]
 8000baa:	88bb      	ldrh	r3, [r7, #4]
 8000bac:	3301      	adds	r3, #1
 8000bae:	121b      	asrs	r3, r3, #8
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	74bb      	strb	r3, [r7, #18]
 8000bb4:	88bb      	ldrh	r3, [r7, #4]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	3301      	adds	r3, #1
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8000bbe:	887b      	ldrh	r3, [r7, #2]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	733b      	strb	r3, [r7, #12]
 8000bc8:	887b      	ldrh	r3, [r7, #2]
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8000bce:	202a      	movs	r0, #42	@ 0x2a
 8000bd0:	f7ff fcda 	bl	8000588 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2104      	movs	r1, #4
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fd08 	bl	80005f0 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8000be0:	202b      	movs	r0, #43	@ 0x2b
 8000be2:	f7ff fcd1 	bl	8000588 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8000be6:	f107 0310 	add.w	r3, r7, #16
 8000bea:	2104      	movs	r1, #4
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fcff 	bl	80005f0 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8000bf2:	202c      	movs	r0, #44	@ 0x2c
 8000bf4:	f7ff fcc8 	bl	8000588 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fcf6 	bl	80005f0 <ILI9341_WriteBuffer>
 8000c04:	e000      	b.n	8000c08 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000c06:	bf00      	nop
}
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000002 	.word	0x20000002
 8000c14:	20000000 	.word	0x20000000

08000c18 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4608      	mov	r0, r1
 8000c22:	4611      	mov	r1, r2
 8000c24:	461a      	mov	r2, r3
 8000c26:	4623      	mov	r3, r4
 8000c28:	80fb      	strh	r3, [r7, #6]
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	80bb      	strh	r3, [r7, #4]
 8000c2e:	460b      	mov	r3, r1
 8000c30:	807b      	strh	r3, [r7, #2]
 8000c32:	4613      	mov	r3, r2
 8000c34:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000c36:	4b24      	ldr	r3, [pc, #144]	@ (8000cc8 <ILI9341_DrawRectangle+0xb0>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	88fa      	ldrh	r2, [r7, #6]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d23d      	bcs.n	8000cbe <ILI9341_DrawRectangle+0xa6>
 8000c42:	4b22      	ldr	r3, [pc, #136]	@ (8000ccc <ILI9341_DrawRectangle+0xb4>)
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	88ba      	ldrh	r2, [r7, #4]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d237      	bcs.n	8000cbe <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8000c4e:	88fa      	ldrh	r2, [r7, #6]
 8000c50:	887b      	ldrh	r3, [r7, #2]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a1c      	ldr	r2, [pc, #112]	@ (8000cc8 <ILI9341_DrawRectangle+0xb0>)
 8000c56:	8812      	ldrh	r2, [r2, #0]
 8000c58:	b292      	uxth	r2, r2
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	dd05      	ble.n	8000c6a <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc8 <ILI9341_DrawRectangle+0xb0>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8000c6a:	88ba      	ldrh	r2, [r7, #4]
 8000c6c:	883b      	ldrh	r3, [r7, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a16      	ldr	r2, [pc, #88]	@ (8000ccc <ILI9341_DrawRectangle+0xb4>)
 8000c72:	8812      	ldrh	r2, [r2, #0]
 8000c74:	b292      	uxth	r2, r2
 8000c76:	4293      	cmp	r3, r2
 8000c78:	dd05      	ble.n	8000c86 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8000c7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <ILI9341_DrawRectangle+0xb4>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	88bb      	ldrh	r3, [r7, #4]
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8000c86:	88fa      	ldrh	r2, [r7, #6]
 8000c88:	887b      	ldrh	r3, [r7, #2]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	b29c      	uxth	r4, r3
 8000c92:	88ba      	ldrh	r2, [r7, #4]
 8000c94:	883b      	ldrh	r3, [r7, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	88b9      	ldrh	r1, [r7, #4]
 8000ca0:	88f8      	ldrh	r0, [r7, #6]
 8000ca2:	4622      	mov	r2, r4
 8000ca4:	f7ff fcc0 	bl	8000628 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8000ca8:	883b      	ldrh	r3, [r7, #0]
 8000caa:	887a      	ldrh	r2, [r7, #2]
 8000cac:	fb02 f303 	mul.w	r3, r2, r3
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	8b3b      	ldrh	r3, [r7, #24]
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fe86 	bl	80009c8 <ILI9341_DrawColorBurst>
 8000cbc:	e000      	b.n	8000cc0 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000cbe:	bf00      	nop
}
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd90      	pop	{r4, r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000002 	.word	0x20000002
 8000ccc:	20000000 	.word	0x20000000

08000cd0 <ILI9341_DrawSmileEmoji_StaticParts>:


#include <math.h>

void ILI9341_DrawSmileEmoji_StaticParts(uint16_t centerX, uint16_t centerY, uint16_t radius, uint16_t faceColor, uint16_t eyeColor)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	4608      	mov	r0, r1
 8000cda:	4611      	mov	r1, r2
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4623      	mov	r3, r4
 8000ce0:	80fb      	strh	r3, [r7, #6]
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	80bb      	strh	r3, [r7, #4]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	807b      	strh	r3, [r7, #2]
 8000cea:	4613      	mov	r3, r2
 8000cec:	803b      	strh	r3, [r7, #0]
    // Draw face
    ILI9341_DrawFilledCircle(centerX, centerY, radius, faceColor);
 8000cee:	883b      	ldrh	r3, [r7, #0]
 8000cf0:	887a      	ldrh	r2, [r7, #2]
 8000cf2:	88b9      	ldrh	r1, [r7, #4]
 8000cf4:	88f8      	ldrh	r0, [r7, #6]
 8000cf6:	f000 f85f 	bl	8000db8 <ILI9341_DrawFilledCircle>

    // Draw eyes
    uint16_t eyeRadius = radius / 8;
 8000cfa:	887b      	ldrh	r3, [r7, #2]
 8000cfc:	08db      	lsrs	r3, r3, #3
 8000cfe:	81fb      	strh	r3, [r7, #14]
    uint16_t eyeOffsetX = radius / 2;
 8000d00:	887b      	ldrh	r3, [r7, #2]
 8000d02:	085b      	lsrs	r3, r3, #1
 8000d04:	81bb      	strh	r3, [r7, #12]
    uint16_t eyeOffsetY = radius / 2;
 8000d06:	887b      	ldrh	r3, [r7, #2]
 8000d08:	085b      	lsrs	r3, r3, #1
 8000d0a:	817b      	strh	r3, [r7, #10]
    ILI9341_DrawFilledCircle(centerX - eyeOffsetX, centerY - eyeOffsetY, eyeRadius, eyeColor); // Left
 8000d0c:	88fa      	ldrh	r2, [r7, #6]
 8000d0e:	89bb      	ldrh	r3, [r7, #12]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	b298      	uxth	r0, r3
 8000d14:	88ba      	ldrh	r2, [r7, #4]
 8000d16:	897b      	ldrh	r3, [r7, #10]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	b299      	uxth	r1, r3
 8000d1c:	8c3b      	ldrh	r3, [r7, #32]
 8000d1e:	89fa      	ldrh	r2, [r7, #14]
 8000d20:	f000 f84a 	bl	8000db8 <ILI9341_DrawFilledCircle>
    ILI9341_DrawFilledCircle(centerX + eyeOffsetX, centerY - eyeOffsetY, eyeRadius, eyeColor); // Right
 8000d24:	88fa      	ldrh	r2, [r7, #6]
 8000d26:	89bb      	ldrh	r3, [r7, #12]
 8000d28:	4413      	add	r3, r2
 8000d2a:	b298      	uxth	r0, r3
 8000d2c:	88ba      	ldrh	r2, [r7, #4]
 8000d2e:	897b      	ldrh	r3, [r7, #10]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	b299      	uxth	r1, r3
 8000d34:	8c3b      	ldrh	r3, [r7, #32]
 8000d36:	89fa      	ldrh	r2, [r7, #14]
 8000d38:	f000 f83e 	bl	8000db8 <ILI9341_DrawFilledCircle>
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd90      	pop	{r4, r7, pc}

08000d44 <ILI9341_DrawNeutralMouth>:
}



void ILI9341_DrawNeutralMouth(uint16_t centerX, uint16_t centerY, uint16_t radius, uint16_t color)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	4611      	mov	r1, r2
 8000d50:	461a      	mov	r2, r3
 8000d52:	4623      	mov	r3, r4
 8000d54:	80fb      	strh	r3, [r7, #6]
 8000d56:	4603      	mov	r3, r0
 8000d58:	80bb      	strh	r3, [r7, #4]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	807b      	strh	r3, [r7, #2]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	803b      	strh	r3, [r7, #0]
    uint16_t mouthWidth = radius;
 8000d62:	887b      	ldrh	r3, [r7, #2]
 8000d64:	817b      	strh	r3, [r7, #10]
    uint16_t mouthY = centerY + radius / 3;
 8000d66:	887b      	ldrh	r3, [r7, #2]
 8000d68:	4a12      	ldr	r2, [pc, #72]	@ (8000db4 <ILI9341_DrawNeutralMouth+0x70>)
 8000d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6e:	085b      	lsrs	r3, r3, #1
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	88bb      	ldrh	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	813b      	strh	r3, [r7, #8]
    for (int x = centerX - mouthWidth / 2; x <= centerX + mouthWidth / 2; x++)
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	897a      	ldrh	r2, [r7, #10]
 8000d7c:	0852      	lsrs	r2, r2, #1
 8000d7e:	b292      	uxth	r2, r2
 8000d80:	1a9b      	subs	r3, r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	e009      	b.n	8000d9a <ILI9341_DrawNeutralMouth+0x56>
    {
        ILI9341_DrawPixel(x, mouthY, color);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	883a      	ldrh	r2, [r7, #0]
 8000d8c:	8939      	ldrh	r1, [r7, #8]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fedc 	bl	8000b4c <ILI9341_DrawPixel>
    for (int x = centerX - mouthWidth / 2; x <= centerX + mouthWidth / 2; x++)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	3301      	adds	r3, #1
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	88fb      	ldrh	r3, [r7, #6]
 8000d9c:	897a      	ldrh	r2, [r7, #10]
 8000d9e:	0852      	lsrs	r2, r2, #1
 8000da0:	b292      	uxth	r2, r2
 8000da2:	4413      	add	r3, r2
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	dded      	ble.n	8000d86 <ILI9341_DrawNeutralMouth+0x42>
    }
}
 8000daa:	bf00      	nop
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd90      	pop	{r4, r7, pc}
 8000db4:	aaaaaaab 	.word	0xaaaaaaab

08000db8 <ILI9341_DrawFilledCircle>:
		}
	}
}

void ILI9341_DrawFilledCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b08b      	sub	sp, #44	@ 0x2c
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4623      	mov	r3, r4
 8000dc8:	80fb      	strh	r3, [r7, #6]
 8000dca:	4603      	mov	r3, r0
 8000dcc:	80bb      	strh	r3, [r7, #4]
 8000dce:	460b      	mov	r3, r1
 8000dd0:	807b      	strh	r3, [r7, #2]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	803b      	strh	r3, [r7, #0]

	int x = radius;
 8000dd6:	887b      	ldrh	r3, [r7, #2]
 8000dd8:	627b      	str	r3, [r7, #36]	@ 0x24
	int y = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (radius << 1);
 8000dde:	887b      	ldrh	r3, [r7, #2]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	f1c3 0301 	rsb	r3, r3, #1
 8000de6:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

	while (x >= y)
 8000df0:	e061      	b.n	8000eb6 <ILI9341_DrawFilledCircle+0xfe>
	{
		for (int i = X - x; i <= X + x; i++)
 8000df2:	88fa      	ldrh	r2, [r7, #6]
 8000df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	e018      	b.n	8000e2e <ILI9341_DrawFilledCircle+0x76>
		{
			ILI9341_DrawPixel(i, Y + y,color);
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	b298      	uxth	r0, r3
 8000e00:	6a3b      	ldr	r3, [r7, #32]
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	88bb      	ldrh	r3, [r7, #4]
 8000e06:	4413      	add	r3, r2
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	883a      	ldrh	r2, [r7, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f7ff fe9d 	bl	8000b4c <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - y,color);
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	b298      	uxth	r0, r3
 8000e16:	6a3b      	ldr	r3, [r7, #32]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	88ba      	ldrh	r2, [r7, #4]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	883a      	ldrh	r2, [r7, #0]
 8000e22:	4619      	mov	r1, r3
 8000e24:	f7ff fe92 	bl	8000b4c <ILI9341_DrawPixel>
		for (int i = X - x; i <= X + x; i++)
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	88fa      	ldrh	r2, [r7, #6]
 8000e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e32:	4413      	add	r3, r2
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	dde0      	ble.n	8000dfc <ILI9341_DrawFilledCircle+0x44>
		}

		for (int i = X - y; i <= X + y; i++)
 8000e3a:	88fa      	ldrh	r2, [r7, #6]
 8000e3c:	6a3b      	ldr	r3, [r7, #32]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	e018      	b.n	8000e76 <ILI9341_DrawFilledCircle+0xbe>
		{
			ILI9341_DrawPixel(i, Y + x,color);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	b298      	uxth	r0, r3
 8000e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	88bb      	ldrh	r3, [r7, #4]
 8000e4e:	4413      	add	r3, r2
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	883a      	ldrh	r2, [r7, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f7ff fe79 	bl	8000b4c <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - x,color);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	b298      	uxth	r0, r3
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	88ba      	ldrh	r2, [r7, #4]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	883a      	ldrh	r2, [r7, #0]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f7ff fe6e 	bl	8000b4c <ILI9341_DrawPixel>
		for (int i = X - y; i <= X + y; i++)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	3301      	adds	r3, #1
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	88fa      	ldrh	r2, [r7, #6]
 8000e78:	6a3b      	ldr	r3, [r7, #32]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	dde0      	ble.n	8000e44 <ILI9341_DrawFilledCircle+0x8c>
		}

		y++;
 8000e82:	6a3b      	ldr	r3, [r7, #32]
 8000e84:	3301      	adds	r3, #1
 8000e86:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	617b      	str	r3, [r7, #20]
		yChange += 2;
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	3302      	adds	r3, #2
 8000e94:	61bb      	str	r3, [r7, #24]

		if (((radiusError << 1) + xChange) > 0)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005a      	lsls	r2, r3, #1
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	dd09      	ble.n	8000eb6 <ILI9341_DrawFilledCircle+0xfe>
		{
			x--;
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	627b      	str	r3, [r7, #36]	@ 0x24
			radiusError += xChange;
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	4413      	add	r3, r2
 8000eae:	617b      	str	r3, [r7, #20]
			xChange += 2;
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	61fb      	str	r3, [r7, #28]
	while (x >= y)
 8000eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000eb8:	6a3b      	ldr	r3, [r7, #32]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	da99      	bge.n	8000df2 <ILI9341_DrawFilledCircle+0x3a>
		}
	}
}
 8000ebe:	bf00      	nop
 8000ec0:	bf00      	nop
 8000ec2:	372c      	adds	r7, #44	@ 0x2c
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd90      	pop	{r4, r7, pc}

08000ec8 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b08d      	sub	sp, #52	@ 0x34
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	73fb      	strb	r3, [r7, #15]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	81bb      	strh	r3, [r7, #12]
 8000edc:	4613      	mov	r3, r2
 8000ede:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	2b1e      	cmp	r3, #30
 8000ee4:	d964      	bls.n	8000fb0 <ILI9341_DrawChar+0xe8>
 8000ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	db60      	blt.n	8000fb0 <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	3302      	adds	r3, #2
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	3303      	adds	r3, #3
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	3b20      	subs	r3, #32
 8000f10:	7ffa      	ldrb	r2, [r7, #31]
 8000f12:	fb02 f303 	mul.w	r3, r2, r3
 8000f16:	3304      	adds	r3, #4
 8000f18:	68ba      	ldr	r2, [r7, #8]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000f1e:	7fbb      	ldrb	r3, [r7, #30]
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	7f7b      	ldrb	r3, [r7, #29]
 8000f24:	b29c      	uxth	r4, r3
 8000f26:	88f9      	ldrh	r1, [r7, #6]
 8000f28:	89b8      	ldrh	r0, [r7, #12]
 8000f2a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	4623      	mov	r3, r4
 8000f30:	f7ff fe72 	bl	8000c18 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f38:	e035      	b.n	8000fa6 <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
 8000f3e:	e02b      	b.n	8000f98 <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000f40:	7f3b      	ldrb	r3, [r7, #28]
 8000f42:	6a3a      	ldr	r2, [r7, #32]
 8000f44:	fb03 f202 	mul.w	r2, r3, r2
 8000f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f4a:	10db      	asrs	r3, r3, #3
 8000f4c:	f003 031f 	and.w	r3, r3, #31
 8000f50:	4413      	add	r3, r2
 8000f52:	3301      	adds	r3, #1
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4413      	add	r3, r2
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	2201      	movs	r2, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8000f6a:	7dfa      	ldrb	r2, [r7, #23]
 8000f6c:	7dbb      	ldrb	r3, [r7, #22]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00d      	beq.n	8000f92 <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8000f76:	6a3b      	ldr	r3, [r7, #32]
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	89bb      	ldrh	r3, [r7, #12]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	b298      	uxth	r0, r3
 8000f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	88fb      	ldrh	r3, [r7, #6]
 8000f86:	4413      	add	r3, r2
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f7ff fddd 	bl	8000b4c <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000f92:	6a3b      	ldr	r3, [r7, #32]
 8000f94:	3301      	adds	r3, #1
 8000f96:	623b      	str	r3, [r7, #32]
 8000f98:	7fbb      	ldrb	r3, [r7, #30]
 8000f9a:	6a3a      	ldr	r2, [r7, #32]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	dbcf      	blt.n	8000f40 <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fa6:	7f7b      	ldrb	r3, [r7, #29]
 8000fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000faa:	429a      	cmp	r2, r3
 8000fac:	dbc5      	blt.n	8000f3a <ILI9341_DrawChar+0x72>
 8000fae:	e000      	b.n	8000fb2 <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 8000fb0:	bf00      	nop
			}
		}
	}
}
 8000fb2:	372c      	adds	r7, #44	@ 0x2c
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd90      	pop	{r4, r7, pc}

08000fb8 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	@ 0x28
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	80fb      	strh	r3, [r7, #6]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8000fdc:	e02d      	b.n	800103a <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	7818      	ldrb	r0, [r3, #0]
 8000fe2:	88b9      	ldrh	r1, [r7, #4]
 8000fe4:	88fa      	ldrh	r2, [r7, #6]
 8000fe6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	f7ff ff69 	bl	8000ec8 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	3b20      	subs	r3, #32
 8000ffc:	7ffa      	ldrb	r2, [r7, #31]
 8000ffe:	fb02 f303 	mul.w	r3, r2, r3
 8001002:	3304      	adds	r3, #4
 8001004:	68ba      	ldr	r2, [r7, #8]
 8001006:	4413      	add	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	1c9a      	adds	r2, r3, #2
 8001014:	7fbb      	ldrb	r3, [r7, #30]
 8001016:	429a      	cmp	r2, r3
 8001018:	da07      	bge.n	800102a <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 800101a:	7dfb      	ldrb	r3, [r7, #23]
 800101c:	b29a      	uxth	r2, r3
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	4413      	add	r3, r2
 8001022:	b29b      	uxth	r3, r3
 8001024:	3302      	adds	r3, #2
 8001026:	80fb      	strh	r3, [r7, #6]
 8001028:	e004      	b.n	8001034 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 800102a:	7fbb      	ldrb	r3, [r7, #30]
 800102c:	b29a      	uxth	r2, r3
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	4413      	add	r3, r2
 8001032:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3301      	adds	r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
	while (*str)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1cd      	bne.n	8000fde <ILI9341_DrawText+0x26>
	}
}
 8001042:	bf00      	nop
 8001044:	bf00      	nop
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001052:	f000 fa8b 	bl	800156c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001056:	f000 f857 	bl	8001108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105a:	f000 f917 	bl	800128c <MX_GPIO_Init>
  MX_DMA_Init();
 800105e:	f000 f8f5 	bl	800124c <MX_DMA_Init>
  MX_SPI1_Init();
 8001062:	f000 f8bd 	bl	80011e0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 8001066:	f7ff fb55 	bl	8000714 <ILI9341_Init>

  ILI9341_FillScreen(BLACK);
 800106a:	2000      	movs	r0, #0
 800106c:	f7ff fd48 	bl	8000b00 <ILI9341_FillScreen>
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff fc59 	bl	8000928 <ILI9341_SetRotation>
	ILI9341_DrawText("HELLO WORLD", FONT4, 90, 110, BLACK, WHITE);
 8001076:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800107a:	9301      	str	r3, [sp, #4]
 800107c:	2300      	movs	r3, #0
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	236e      	movs	r3, #110	@ 0x6e
 8001082:	225a      	movs	r2, #90	@ 0x5a
 8001084:	491c      	ldr	r1, [pc, #112]	@ (80010f8 <main+0xac>)
 8001086:	481d      	ldr	r0, [pc, #116]	@ (80010fc <main+0xb0>)
 8001088:	f7ff ff96 	bl	8000fb8 <ILI9341_DrawText>
	HAL_Delay(1000);
 800108c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001090:	f000 fade 	bl	8001650 <HAL_Delay>


	ILI9341_FillScreen(RED);
 8001094:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001098:	f7ff fd32 	bl	8000b00 <ILI9341_FillScreen>
	ILI9341_DrawSmileEmoji_StaticParts(120, 160, 60, YELLOW, BLACK); // Draw once
 800109c:	2300      	movs	r3, #0
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80010a4:	223c      	movs	r2, #60	@ 0x3c
 80010a6:	21a0      	movs	r1, #160	@ 0xa0
 80010a8:	2078      	movs	r0, #120	@ 0x78
 80010aa:	f7ff fe11 	bl	8000cd0 <ILI9341_DrawSmileEmoji_StaticParts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ILI9341_DrawText("EESALA CUP NAMDHU", FONT4, 30, 80, WHITE, RED);
 80010ae:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2350      	movs	r3, #80	@ 0x50
 80010bc:	221e      	movs	r2, #30
 80010be:	490e      	ldr	r1, [pc, #56]	@ (80010f8 <main+0xac>)
 80010c0:	480f      	ldr	r0, [pc, #60]	@ (8001100 <main+0xb4>)
 80010c2:	f7ff ff79 	bl	8000fb8 <ILI9341_DrawText>
	  ILI9341_DrawText("RCB", FONT4, 30, 210, WHITE, RED);
 80010c6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	23d2      	movs	r3, #210	@ 0xd2
 80010d4:	221e      	movs	r2, #30
 80010d6:	4908      	ldr	r1, [pc, #32]	@ (80010f8 <main+0xac>)
 80010d8:	480a      	ldr	r0, [pc, #40]	@ (8001104 <main+0xb8>)
 80010da:	f7ff ff6d 	bl	8000fb8 <ILI9341_DrawText>
	  ILI9341_DrawNeutralMouth(120, 160, 60, RED);
 80010de:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80010e2:	223c      	movs	r2, #60	@ 0x3c
 80010e4:	21a0      	movs	r1, #160	@ 0xa0
 80010e6:	2078      	movs	r0, #120	@ 0x78
 80010e8:	f7ff fe2c 	bl	8000d44 <ILI9341_DrawNeutralMouth>
	  HAL_Delay(1000);
 80010ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010f0:	f000 faae 	bl	8001650 <HAL_Delay>
	  ILI9341_DrawText("EESALA CUP NAMDHU", FONT4, 30, 80, WHITE, RED);
 80010f4:	bf00      	nop
 80010f6:	e7da      	b.n	80010ae <main+0x62>
 80010f8:	080035cc 	.word	0x080035cc
 80010fc:	080035a8 	.word	0x080035a8
 8001100:	080035b4 	.word	0x080035b4
 8001104:	080035c8 	.word	0x080035c8

08001108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b094      	sub	sp, #80	@ 0x50
 800110c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	2234      	movs	r2, #52	@ 0x34
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f002 fa0e 	bl	8003538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111c:	f107 0308 	add.w	r3, r7, #8
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	4b29      	ldr	r3, [pc, #164]	@ (80011d8 <SystemClock_Config+0xd0>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001134:	4a28      	ldr	r2, [pc, #160]	@ (80011d8 <SystemClock_Config+0xd0>)
 8001136:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800113a:	6413      	str	r3, [r2, #64]	@ 0x40
 800113c:	4b26      	ldr	r3, [pc, #152]	@ (80011d8 <SystemClock_Config+0xd0>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001148:	2300      	movs	r3, #0
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	4b23      	ldr	r3, [pc, #140]	@ (80011dc <SystemClock_Config+0xd4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001154:	4a21      	ldr	r2, [pc, #132]	@ (80011dc <SystemClock_Config+0xd4>)
 8001156:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	4b1f      	ldr	r3, [pc, #124]	@ (80011dc <SystemClock_Config+0xd4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001168:	2302      	movs	r3, #2
 800116a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800116c:	2301      	movs	r3, #1
 800116e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001170:	2310      	movs	r3, #16
 8001172:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001174:	2302      	movs	r3, #2
 8001176:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001178:	2300      	movs	r3, #0
 800117a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800117c:	2308      	movs	r3, #8
 800117e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001180:	2348      	movs	r3, #72	@ 0x48
 8001182:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001184:	2302      	movs	r3, #2
 8001186:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001188:	2302      	movs	r3, #2
 800118a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800118c:	2302      	movs	r3, #2
 800118e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	4618      	mov	r0, r3
 8001196:	f001 fb3f 	bl	8002818 <HAL_RCC_OscConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011a0:	f000 f8c6 	bl	8001330 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a4:	230f      	movs	r3, #15
 80011a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a8:	2302      	movs	r3, #2
 80011aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011ba:	f107 0308 	add.w	r3, r7, #8
 80011be:	2102      	movs	r1, #2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f001 f899 	bl	80022f8 <HAL_RCC_ClockConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80011cc:	f000 f8b0 	bl	8001330 <Error_Handler>
  }
}
 80011d0:	bf00      	nop
 80011d2:	3750      	adds	r7, #80	@ 0x50
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40007000 	.word	0x40007000

080011e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011e4:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <MX_SPI1_Init+0x64>)
 80011e6:	4a18      	ldr	r2, [pc, #96]	@ (8001248 <MX_SPI1_Init+0x68>)
 80011e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ea:	4b16      	ldr	r3, [pc, #88]	@ (8001244 <MX_SPI1_Init+0x64>)
 80011ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011f2:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <MX_SPI1_Init+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <MX_SPI1_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011fe:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <MX_SPI1_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001204:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <MX_SPI1_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800120a:	4b0e      	ldr	r3, [pc, #56]	@ (8001244 <MX_SPI1_Init+0x64>)
 800120c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001210:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001212:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <MX_SPI1_Init+0x64>)
 8001214:	2208      	movs	r2, #8
 8001216:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001218:	4b0a      	ldr	r3, [pc, #40]	@ (8001244 <MX_SPI1_Init+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800121e:	4b09      	ldr	r3, [pc, #36]	@ (8001244 <MX_SPI1_Init+0x64>)
 8001220:	2200      	movs	r2, #0
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001224:	4b07      	ldr	r3, [pc, #28]	@ (8001244 <MX_SPI1_Init+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800122a:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <MX_SPI1_Init+0x64>)
 800122c:	220a      	movs	r2, #10
 800122e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001230:	4804      	ldr	r0, [pc, #16]	@ (8001244 <MX_SPI1_Init+0x64>)
 8001232:	f001 fd8f 	bl	8002d54 <HAL_SPI_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800123c:	f000 f878 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2000002c 	.word	0x2000002c
 8001248:	40013000 	.word	0x40013000

0800124c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <MX_DMA_Init+0x3c>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a0b      	ldr	r2, [pc, #44]	@ (8001288 <MX_DMA_Init+0x3c>)
 800125c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <MX_DMA_Init+0x3c>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	203b      	movs	r0, #59	@ 0x3b
 8001274:	f000 faeb 	bl	800184e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001278:	203b      	movs	r0, #59	@ 0x3b
 800127a:	f000 fb04 	bl	8001886 <HAL_NVIC_EnableIRQ>

}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800

0800128c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	4b20      	ldr	r3, [pc, #128]	@ (8001328 <MX_GPIO_Init+0x9c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001328 <MX_GPIO_Init+0x9c>)
 80012ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001328 <MX_GPIO_Init+0x9c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b19      	ldr	r3, [pc, #100]	@ (8001328 <MX_GPIO_Init+0x9c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a18      	ldr	r2, [pc, #96]	@ (8001328 <MX_GPIO_Init+0x9c>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b16      	ldr	r3, [pc, #88]	@ (8001328 <MX_GPIO_Init+0x9c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <MX_GPIO_Init+0x9c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	4a11      	ldr	r2, [pc, #68]	@ (8001328 <MX_GPIO_Init+0x9c>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <MX_GPIO_Init+0x9c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f240 4103 	movw	r1, #1027	@ 0x403
 80012fc:	480b      	ldr	r0, [pc, #44]	@ (800132c <MX_GPIO_Init+0xa0>)
 80012fe:	f000 ffe1 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 8001302:	f240 4303 	movw	r3, #1027	@ 0x403
 8001306:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001308:	2301      	movs	r3, #1
 800130a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	4619      	mov	r1, r3
 800131a:	4804      	ldr	r0, [pc, #16]	@ (800132c <MX_GPIO_Init+0xa0>)
 800131c:	f000 fe3e 	bl	8001f9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001320:	bf00      	nop
 8001322:	3720      	adds	r7, #32
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40023800 	.word	0x40023800
 800132c:	40020400 	.word	0x40020400

08001330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001334:	b672      	cpsid	i
}
 8001336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <Error_Handler+0x8>

0800133c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <HAL_MspInit+0x4c>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134a:	4a0f      	ldr	r2, [pc, #60]	@ (8001388 <HAL_MspInit+0x4c>)
 800134c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001350:	6453      	str	r3, [r2, #68]	@ 0x44
 8001352:	4b0d      	ldr	r3, [pc, #52]	@ (8001388 <HAL_MspInit+0x4c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001356:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <HAL_MspInit+0x4c>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	4a08      	ldr	r2, [pc, #32]	@ (8001388 <HAL_MspInit+0x4c>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800136c:	6413      	str	r3, [r2, #64]	@ 0x40
 800136e:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <HAL_MspInit+0x4c>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800

0800138c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	@ 0x28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a30      	ldr	r2, [pc, #192]	@ (800146c <HAL_SPI_MspInit+0xe0>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d159      	bne.n	8001462 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001470 <HAL_SPI_MspInit+0xe4>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b6:	4a2e      	ldr	r2, [pc, #184]	@ (8001470 <HAL_SPI_MspInit+0xe4>)
 80013b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013be:	4b2c      	ldr	r3, [pc, #176]	@ (8001470 <HAL_SPI_MspInit+0xe4>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b28      	ldr	r3, [pc, #160]	@ (8001470 <HAL_SPI_MspInit+0xe4>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	4a27      	ldr	r2, [pc, #156]	@ (8001470 <HAL_SPI_MspInit+0xe4>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013da:	4b25      	ldr	r3, [pc, #148]	@ (8001470 <HAL_SPI_MspInit+0xe4>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80013e6:	23a0      	movs	r3, #160	@ 0xa0
 80013e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f2:	2303      	movs	r3, #3
 80013f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013f6:	2305      	movs	r3, #5
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	4619      	mov	r1, r3
 8001400:	481c      	ldr	r0, [pc, #112]	@ (8001474 <HAL_SPI_MspInit+0xe8>)
 8001402:	f000 fdcb 	bl	8001f9c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001406:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <HAL_SPI_MspInit+0xec>)
 8001408:	4a1c      	ldr	r2, [pc, #112]	@ (800147c <HAL_SPI_MspInit+0xf0>)
 800140a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800140c:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <HAL_SPI_MspInit+0xec>)
 800140e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001412:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001414:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <HAL_SPI_MspInit+0xec>)
 8001416:	2240      	movs	r2, #64	@ 0x40
 8001418:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800141a:	4b17      	ldr	r3, [pc, #92]	@ (8001478 <HAL_SPI_MspInit+0xec>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001420:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <HAL_SPI_MspInit+0xec>)
 8001422:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001426:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001428:	4b13      	ldr	r3, [pc, #76]	@ (8001478 <HAL_SPI_MspInit+0xec>)
 800142a:	2200      	movs	r2, #0
 800142c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800142e:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <HAL_SPI_MspInit+0xec>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001434:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <HAL_SPI_MspInit+0xec>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800143a:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <HAL_SPI_MspInit+0xec>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001440:	4b0d      	ldr	r3, [pc, #52]	@ (8001478 <HAL_SPI_MspInit+0xec>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001446:	480c      	ldr	r0, [pc, #48]	@ (8001478 <HAL_SPI_MspInit+0xec>)
 8001448:	f000 fa38 	bl	80018bc <HAL_DMA_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001452:	f7ff ff6d 	bl	8001330 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a07      	ldr	r2, [pc, #28]	@ (8001478 <HAL_SPI_MspInit+0xec>)
 800145a:	649a      	str	r2, [r3, #72]	@ 0x48
 800145c:	4a06      	ldr	r2, [pc, #24]	@ (8001478 <HAL_SPI_MspInit+0xec>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001462:	bf00      	nop
 8001464:	3728      	adds	r7, #40	@ 0x28
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40013000 	.word	0x40013000
 8001470:	40023800 	.word	0x40023800
 8001474:	40020000 	.word	0x40020000
 8001478:	20000084 	.word	0x20000084
 800147c:	40026458 	.word	0x40026458

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <NMI_Handler+0x4>

08001488 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <HardFault_Handler+0x4>

08001490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <MemManage_Handler+0x4>

08001498 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <BusFault_Handler+0x4>

080014a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <UsageFault_Handler+0x4>

080014a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d6:	f000 f89b 	bl	8001610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <DMA2_Stream3_IRQHandler+0x10>)
 80014e6:	f000 faef 	bl	8001ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000084 	.word	0x20000084

080014f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f8:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <SystemInit+0x20>)
 80014fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014fe:	4a05      	ldr	r2, [pc, #20]	@ (8001514 <SystemInit+0x20>)
 8001500:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001504:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001518:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001550 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800151c:	f7ff ffea 	bl	80014f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001520:	480c      	ldr	r0, [pc, #48]	@ (8001554 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001522:	490d      	ldr	r1, [pc, #52]	@ (8001558 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001524:	4a0d      	ldr	r2, [pc, #52]	@ (800155c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001528:	e002      	b.n	8001530 <LoopCopyDataInit>

0800152a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800152c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152e:	3304      	adds	r3, #4

08001530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001534:	d3f9      	bcc.n	800152a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001536:	4a0a      	ldr	r2, [pc, #40]	@ (8001560 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001538:	4c0a      	ldr	r4, [pc, #40]	@ (8001564 <LoopFillZerobss+0x22>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800153c:	e001      	b.n	8001542 <LoopFillZerobss>

0800153e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001540:	3204      	adds	r2, #4

08001542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001544:	d3fb      	bcc.n	800153e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001546:	f001 ffff 	bl	8003548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800154a:	f7ff fd7f 	bl	800104c <main>
  bx  lr    
 800154e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001550:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001558:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800155c:	08004738 	.word	0x08004738
  ldr r2, =_sbss
 8001560:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001564:	200000e8 	.word	0x200000e8

08001568 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001568:	e7fe      	b.n	8001568 <ADC_IRQHandler>
	...

0800156c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001570:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0d      	ldr	r2, [pc, #52]	@ (80015ac <HAL_Init+0x40>)
 8001576:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800157a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800157c:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <HAL_Init+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0a      	ldr	r2, [pc, #40]	@ (80015ac <HAL_Init+0x40>)
 8001582:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001586:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001588:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <HAL_Init+0x40>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a07      	ldr	r2, [pc, #28]	@ (80015ac <HAL_Init+0x40>)
 800158e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001592:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001594:	2003      	movs	r0, #3
 8001596:	f000 f94f 	bl	8001838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159a:	200f      	movs	r0, #15
 800159c:	f000 f808 	bl	80015b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a0:	f7ff fecc 	bl	800133c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023c00 	.word	0x40023c00

080015b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b8:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <HAL_InitTick+0x54>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <HAL_InitTick+0x58>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f967 	bl	80018a2 <HAL_SYSTICK_Config>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e00e      	b.n	80015fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b0f      	cmp	r3, #15
 80015e2:	d80a      	bhi.n	80015fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e4:	2200      	movs	r2, #0
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ec:	f000 f92f 	bl	800184e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f0:	4a06      	ldr	r2, [pc, #24]	@ (800160c <HAL_InitTick+0x5c>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e000      	b.n	80015fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000004 	.word	0x20000004
 8001608:	2000000c 	.word	0x2000000c
 800160c:	20000008 	.word	0x20000008

08001610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <HAL_IncTick+0x20>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <HAL_IncTick+0x24>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4413      	add	r3, r2
 8001620:	4a04      	ldr	r2, [pc, #16]	@ (8001634 <HAL_IncTick+0x24>)
 8001622:	6013      	str	r3, [r2, #0]
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	2000000c 	.word	0x2000000c
 8001634:	200000e4 	.word	0x200000e4

08001638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return uwTick;
 800163c:	4b03      	ldr	r3, [pc, #12]	@ (800164c <HAL_GetTick+0x14>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	200000e4 	.word	0x200000e4

08001650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001658:	f7ff ffee 	bl	8001638 <HAL_GetTick>
 800165c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001668:	d005      	beq.n	8001676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800166a:	4b0a      	ldr	r3, [pc, #40]	@ (8001694 <HAL_Delay+0x44>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4413      	add	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001676:	bf00      	nop
 8001678:	f7ff ffde 	bl	8001638 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	429a      	cmp	r2, r3
 8001686:	d8f7      	bhi.n	8001678 <HAL_Delay+0x28>
  {
  }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	2000000c 	.word	0x2000000c

08001698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a8:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016b4:	4013      	ands	r3, r2
 80016b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ca:	4a04      	ldr	r2, [pc, #16]	@ (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	60d3      	str	r3, [r2, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e4:	4b04      	ldr	r3, [pc, #16]	@ (80016f8 <__NVIC_GetPriorityGrouping+0x18>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	f003 0307 	and.w	r3, r3, #7
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	2b00      	cmp	r3, #0
 800170c:	db0b      	blt.n	8001726 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	f003 021f 	and.w	r2, r3, #31
 8001714:	4907      	ldr	r1, [pc, #28]	@ (8001734 <__NVIC_EnableIRQ+0x38>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	2001      	movs	r0, #1
 800171e:	fa00 f202 	lsl.w	r2, r0, r2
 8001722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000e100 	.word	0xe000e100

08001738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	2b00      	cmp	r3, #0
 800174a:	db0a      	blt.n	8001762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	b2da      	uxtb	r2, r3
 8001750:	490c      	ldr	r1, [pc, #48]	@ (8001784 <__NVIC_SetPriority+0x4c>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	0112      	lsls	r2, r2, #4
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	440b      	add	r3, r1
 800175c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001760:	e00a      	b.n	8001778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4908      	ldr	r1, [pc, #32]	@ (8001788 <__NVIC_SetPriority+0x50>)
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	3b04      	subs	r3, #4
 8001770:	0112      	lsls	r2, r2, #4
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	440b      	add	r3, r1
 8001776:	761a      	strb	r2, [r3, #24]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178c:	b480      	push	{r7}
 800178e:	b089      	sub	sp, #36	@ 0x24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f1c3 0307 	rsb	r3, r3, #7
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	bf28      	it	cs
 80017aa:	2304      	movcs	r3, #4
 80017ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3304      	adds	r3, #4
 80017b2:	2b06      	cmp	r3, #6
 80017b4:	d902      	bls.n	80017bc <NVIC_EncodePriority+0x30>
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3b03      	subs	r3, #3
 80017ba:	e000      	b.n	80017be <NVIC_EncodePriority+0x32>
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	f04f 32ff 	mov.w	r2, #4294967295
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43da      	mvns	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	401a      	ands	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	43d9      	mvns	r1, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	4313      	orrs	r3, r2
         );
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3724      	adds	r7, #36	@ 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001804:	d301      	bcc.n	800180a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001806:	2301      	movs	r3, #1
 8001808:	e00f      	b.n	800182a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180a:	4a0a      	ldr	r2, [pc, #40]	@ (8001834 <SysTick_Config+0x40>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001812:	210f      	movs	r1, #15
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f7ff ff8e 	bl	8001738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800181c:	4b05      	ldr	r3, [pc, #20]	@ (8001834 <SysTick_Config+0x40>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001822:	4b04      	ldr	r3, [pc, #16]	@ (8001834 <SysTick_Config+0x40>)
 8001824:	2207      	movs	r2, #7
 8001826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	e000e010 	.word	0xe000e010

08001838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff29 	bl	8001698 <__NVIC_SetPriorityGrouping>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001860:	f7ff ff3e 	bl	80016e0 <__NVIC_GetPriorityGrouping>
 8001864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	6978      	ldr	r0, [r7, #20]
 800186c:	f7ff ff8e 	bl	800178c <NVIC_EncodePriority>
 8001870:	4602      	mov	r2, r0
 8001872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff5d 	bl	8001738 <__NVIC_SetPriority>
}
 800187e:	bf00      	nop
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff31 	bl	80016fc <__NVIC_EnableIRQ>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ffa2 	bl	80017f4 <SysTick_Config>
 80018b0:	4603      	mov	r3, r0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018c8:	f7ff feb6 	bl	8001638 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e099      	b.n	8001a0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2202      	movs	r2, #2
 80018dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 0201 	bic.w	r2, r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018f8:	e00f      	b.n	800191a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018fa:	f7ff fe9d 	bl	8001638 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b05      	cmp	r3, #5
 8001906:	d908      	bls.n	800191a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2220      	movs	r2, #32
 800190c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2203      	movs	r2, #3
 8001912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e078      	b.n	8001a0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1e8      	bne.n	80018fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	4b38      	ldr	r3, [pc, #224]	@ (8001a14 <HAL_DMA_Init+0x158>)
 8001934:	4013      	ands	r3, r2
 8001936:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001946:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001952:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800195e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4313      	orrs	r3, r2
 800196a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001970:	2b04      	cmp	r3, #4
 8001972:	d107      	bne.n	8001984 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197c:	4313      	orrs	r3, r2
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	4313      	orrs	r3, r2
 8001982:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f023 0307 	bic.w	r3, r3, #7
 800199a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d117      	bne.n	80019de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00e      	beq.n	80019de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 fa6f 	bl	8001ea4 <DMA_CheckFifoParam>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d008      	beq.n	80019de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2240      	movs	r2, #64	@ 0x40
 80019d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80019da:	2301      	movs	r3, #1
 80019dc:	e016      	b.n	8001a0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 fa26 	bl	8001e38 <DMA_CalcBaseAndBitshift>
 80019ec:	4603      	mov	r3, r0
 80019ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f4:	223f      	movs	r2, #63	@ 0x3f
 80019f6:	409a      	lsls	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	f010803f 	.word	0xf010803f

08001a18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <HAL_DMA_Start_IT+0x26>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e040      	b.n	8001ac0 <HAL_DMA_Start_IT+0xa8>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d12f      	bne.n	8001ab2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2202      	movs	r2, #2
 8001a56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 f9b8 	bl	8001ddc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a70:	223f      	movs	r2, #63	@ 0x3f
 8001a72:	409a      	lsls	r2, r3
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0216 	orr.w	r2, r2, #22
 8001a86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d007      	beq.n	8001aa0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0208 	orr.w	r2, r2, #8
 8001a9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e005      	b.n	8001abe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001aba:	2302      	movs	r3, #2
 8001abc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ad4:	4b8e      	ldr	r3, [pc, #568]	@ (8001d10 <HAL_DMA_IRQHandler+0x248>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a8e      	ldr	r2, [pc, #568]	@ (8001d14 <HAL_DMA_IRQHandler+0x24c>)
 8001ada:	fba2 2303 	umull	r2, r3, r2, r3
 8001ade:	0a9b      	lsrs	r3, r3, #10
 8001ae0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af2:	2208      	movs	r2, #8
 8001af4:	409a      	lsls	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4013      	ands	r3, r2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d01a      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d013      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0204 	bic.w	r2, r2, #4
 8001b1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b20:	2208      	movs	r2, #8
 8001b22:	409a      	lsls	r2, r3
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b2c:	f043 0201 	orr.w	r2, r3, #1
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b38:	2201      	movs	r2, #1
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d012      	beq.n	8001b6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00b      	beq.n	8001b6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b56:	2201      	movs	r2, #1
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b62:	f043 0202 	orr.w	r2, r3, #2
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b6e:	2204      	movs	r2, #4
 8001b70:	409a      	lsls	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d012      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00b      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b8c:	2204      	movs	r2, #4
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b98:	f043 0204 	orr.w	r2, r3, #4
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba4:	2210      	movs	r2, #16
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d043      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d03c      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc2:	2210      	movs	r2, #16
 8001bc4:	409a      	lsls	r2, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d018      	beq.n	8001c0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d108      	bne.n	8001bf8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d024      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	4798      	blx	r3
 8001bf6:	e01f      	b.n	8001c38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d01b      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	4798      	blx	r3
 8001c08:	e016      	b.n	8001c38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d107      	bne.n	8001c28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0208 	bic.w	r2, r2, #8
 8001c26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 808f 	beq.w	8001d68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 8087 	beq.w	8001d68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c5e:	2220      	movs	r2, #32
 8001c60:	409a      	lsls	r2, r3
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b05      	cmp	r3, #5
 8001c70:	d136      	bne.n	8001ce0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0216 	bic.w	r2, r2, #22
 8001c80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	695a      	ldr	r2, [r3, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d103      	bne.n	8001ca2 <HAL_DMA_IRQHandler+0x1da>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d007      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0208 	bic.w	r2, r2, #8
 8001cb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb6:	223f      	movs	r2, #63	@ 0x3f
 8001cb8:	409a      	lsls	r2, r3
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d07e      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	4798      	blx	r3
        }
        return;
 8001cde:	e079      	b.n	8001dd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d01d      	beq.n	8001d2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10d      	bne.n	8001d18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d031      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	4798      	blx	r3
 8001d0c:	e02c      	b.n	8001d68 <HAL_DMA_IRQHandler+0x2a0>
 8001d0e:	bf00      	nop
 8001d10:	20000004 	.word	0x20000004
 8001d14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d023      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	4798      	blx	r3
 8001d28:	e01e      	b.n	8001d68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10f      	bne.n	8001d58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0210 	bic.w	r2, r2, #16
 8001d46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d032      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d022      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2205      	movs	r2, #5
 8001d80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0201 	bic.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	3301      	adds	r3, #1
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d307      	bcc.n	8001db0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f2      	bne.n	8001d94 <HAL_DMA_IRQHandler+0x2cc>
 8001dae:	e000      	b.n	8001db2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001db0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d005      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	4798      	blx	r3
 8001dd2:	e000      	b.n	8001dd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001dd4:	bf00      	nop
    }
  }
}
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001df8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b40      	cmp	r3, #64	@ 0x40
 8001e08:	d108      	bne.n	8001e1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e1a:	e007      	b.n	8001e2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	60da      	str	r2, [r3, #12]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	3b10      	subs	r3, #16
 8001e48:	4a14      	ldr	r2, [pc, #80]	@ (8001e9c <DMA_CalcBaseAndBitshift+0x64>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	091b      	lsrs	r3, r3, #4
 8001e50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e52:	4a13      	ldr	r2, [pc, #76]	@ (8001ea0 <DMA_CalcBaseAndBitshift+0x68>)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4413      	add	r3, r2
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d909      	bls.n	8001e7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e6e:	f023 0303 	bic.w	r3, r3, #3
 8001e72:	1d1a      	adds	r2, r3, #4
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e78:	e007      	b.n	8001e8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e82:	f023 0303 	bic.w	r3, r3, #3
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	aaaaaaab 	.word	0xaaaaaaab
 8001ea0:	08004720 	.word	0x08004720

08001ea4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d11f      	bne.n	8001efe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d856      	bhi.n	8001f72 <DMA_CheckFifoParam+0xce>
 8001ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8001ecc <DMA_CheckFifoParam+0x28>)
 8001ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eca:	bf00      	nop
 8001ecc:	08001edd 	.word	0x08001edd
 8001ed0:	08001eef 	.word	0x08001eef
 8001ed4:	08001edd 	.word	0x08001edd
 8001ed8:	08001f73 	.word	0x08001f73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d046      	beq.n	8001f76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eec:	e043      	b.n	8001f76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ef6:	d140      	bne.n	8001f7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001efc:	e03d      	b.n	8001f7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f06:	d121      	bne.n	8001f4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d837      	bhi.n	8001f7e <DMA_CheckFifoParam+0xda>
 8001f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f14 <DMA_CheckFifoParam+0x70>)
 8001f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f14:	08001f25 	.word	0x08001f25
 8001f18:	08001f2b 	.word	0x08001f2b
 8001f1c:	08001f25 	.word	0x08001f25
 8001f20:	08001f3d 	.word	0x08001f3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	73fb      	strb	r3, [r7, #15]
      break;
 8001f28:	e030      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d025      	beq.n	8001f82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f3a:	e022      	b.n	8001f82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f40:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f44:	d11f      	bne.n	8001f86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f4a:	e01c      	b.n	8001f86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d903      	bls.n	8001f5a <DMA_CheckFifoParam+0xb6>
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d003      	beq.n	8001f60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f58:	e018      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8001f5e:	e015      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00e      	beq.n	8001f8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f70:	e00b      	b.n	8001f8a <DMA_CheckFifoParam+0xe6>
      break;
 8001f72:	bf00      	nop
 8001f74:	e00a      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
      break;
 8001f76:	bf00      	nop
 8001f78:	e008      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
      break;
 8001f7a:	bf00      	nop
 8001f7c:	e006      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
      break;
 8001f7e:	bf00      	nop
 8001f80:	e004      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
      break;
 8001f82:	bf00      	nop
 8001f84:	e002      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
      break;   
 8001f86:	bf00      	nop
 8001f88:	e000      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
      break;
 8001f8a:	bf00      	nop
    }
  } 
  
  return status; 
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop

08001f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	@ 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
 8001fb6:	e165      	b.n	8002284 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fb8:	2201      	movs	r2, #1
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	f040 8154 	bne.w	800227e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d005      	beq.n	8001fee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d130      	bne.n	8002050 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002024:	2201      	movs	r2, #1
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 0201 	and.w	r2, r3, #1
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	2b03      	cmp	r3, #3
 800205a:	d017      	beq.n	800208c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2203      	movs	r2, #3
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d123      	bne.n	80020e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	08da      	lsrs	r2, r3, #3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3208      	adds	r2, #8
 80020a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	220f      	movs	r2, #15
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	08da      	lsrs	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3208      	adds	r2, #8
 80020da:	69b9      	ldr	r1, [r7, #24]
 80020dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0203 	and.w	r2, r3, #3
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80ae 	beq.w	800227e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b5d      	ldr	r3, [pc, #372]	@ (800229c <HAL_GPIO_Init+0x300>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212a:	4a5c      	ldr	r2, [pc, #368]	@ (800229c <HAL_GPIO_Init+0x300>)
 800212c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002130:	6453      	str	r3, [r2, #68]	@ 0x44
 8002132:	4b5a      	ldr	r3, [pc, #360]	@ (800229c <HAL_GPIO_Init+0x300>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002136:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800213e:	4a58      	ldr	r2, [pc, #352]	@ (80022a0 <HAL_GPIO_Init+0x304>)
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	220f      	movs	r2, #15
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a4f      	ldr	r2, [pc, #316]	@ (80022a4 <HAL_GPIO_Init+0x308>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d025      	beq.n	80021b6 <HAL_GPIO_Init+0x21a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a4e      	ldr	r2, [pc, #312]	@ (80022a8 <HAL_GPIO_Init+0x30c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d01f      	beq.n	80021b2 <HAL_GPIO_Init+0x216>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a4d      	ldr	r2, [pc, #308]	@ (80022ac <HAL_GPIO_Init+0x310>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d019      	beq.n	80021ae <HAL_GPIO_Init+0x212>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a4c      	ldr	r2, [pc, #304]	@ (80022b0 <HAL_GPIO_Init+0x314>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d013      	beq.n	80021aa <HAL_GPIO_Init+0x20e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4b      	ldr	r2, [pc, #300]	@ (80022b4 <HAL_GPIO_Init+0x318>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d00d      	beq.n	80021a6 <HAL_GPIO_Init+0x20a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4a      	ldr	r2, [pc, #296]	@ (80022b8 <HAL_GPIO_Init+0x31c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d007      	beq.n	80021a2 <HAL_GPIO_Init+0x206>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a49      	ldr	r2, [pc, #292]	@ (80022bc <HAL_GPIO_Init+0x320>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d101      	bne.n	800219e <HAL_GPIO_Init+0x202>
 800219a:	2306      	movs	r3, #6
 800219c:	e00c      	b.n	80021b8 <HAL_GPIO_Init+0x21c>
 800219e:	2307      	movs	r3, #7
 80021a0:	e00a      	b.n	80021b8 <HAL_GPIO_Init+0x21c>
 80021a2:	2305      	movs	r3, #5
 80021a4:	e008      	b.n	80021b8 <HAL_GPIO_Init+0x21c>
 80021a6:	2304      	movs	r3, #4
 80021a8:	e006      	b.n	80021b8 <HAL_GPIO_Init+0x21c>
 80021aa:	2303      	movs	r3, #3
 80021ac:	e004      	b.n	80021b8 <HAL_GPIO_Init+0x21c>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e002      	b.n	80021b8 <HAL_GPIO_Init+0x21c>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <HAL_GPIO_Init+0x21c>
 80021b6:	2300      	movs	r3, #0
 80021b8:	69fa      	ldr	r2, [r7, #28]
 80021ba:	f002 0203 	and.w	r2, r2, #3
 80021be:	0092      	lsls	r2, r2, #2
 80021c0:	4093      	lsls	r3, r2
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021c8:	4935      	ldr	r1, [pc, #212]	@ (80022a0 <HAL_GPIO_Init+0x304>)
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	089b      	lsrs	r3, r3, #2
 80021ce:	3302      	adds	r3, #2
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021d6:	4b3a      	ldr	r3, [pc, #232]	@ (80022c0 <HAL_GPIO_Init+0x324>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021fa:	4a31      	ldr	r2, [pc, #196]	@ (80022c0 <HAL_GPIO_Init+0x324>)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002200:	4b2f      	ldr	r3, [pc, #188]	@ (80022c0 <HAL_GPIO_Init+0x324>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002224:	4a26      	ldr	r2, [pc, #152]	@ (80022c0 <HAL_GPIO_Init+0x324>)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800222a:	4b25      	ldr	r3, [pc, #148]	@ (80022c0 <HAL_GPIO_Init+0x324>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800224e:	4a1c      	ldr	r2, [pc, #112]	@ (80022c0 <HAL_GPIO_Init+0x324>)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002254:	4b1a      	ldr	r3, [pc, #104]	@ (80022c0 <HAL_GPIO_Init+0x324>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002278:	4a11      	ldr	r2, [pc, #68]	@ (80022c0 <HAL_GPIO_Init+0x324>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3301      	adds	r3, #1
 8002282:	61fb      	str	r3, [r7, #28]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	2b0f      	cmp	r3, #15
 8002288:	f67f ae96 	bls.w	8001fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800228c:	bf00      	nop
 800228e:	bf00      	nop
 8002290:	3724      	adds	r7, #36	@ 0x24
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800
 80022a0:	40013800 	.word	0x40013800
 80022a4:	40020000 	.word	0x40020000
 80022a8:	40020400 	.word	0x40020400
 80022ac:	40020800 	.word	0x40020800
 80022b0:	40020c00 	.word	0x40020c00
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40021400 	.word	0x40021400
 80022bc:	40021800 	.word	0x40021800
 80022c0:	40013c00 	.word	0x40013c00

080022c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
 80022d0:	4613      	mov	r3, r2
 80022d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022d4:	787b      	ldrb	r3, [r7, #1]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022e0:	e003      	b.n	80022ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022e2:	887b      	ldrh	r3, [r7, #2]
 80022e4:	041a      	lsls	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	619a      	str	r2, [r3, #24]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0cc      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800230c:	4b68      	ldr	r3, [pc, #416]	@ (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 030f 	and.w	r3, r3, #15
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d90c      	bls.n	8002334 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b65      	ldr	r3, [pc, #404]	@ (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b63      	ldr	r3, [pc, #396]	@ (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0b8      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d020      	beq.n	8002382 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800234c:	4b59      	ldr	r3, [pc, #356]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4a58      	ldr	r2, [pc, #352]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002356:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002364:	4b53      	ldr	r3, [pc, #332]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4a52      	ldr	r2, [pc, #328]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800236e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002370:	4b50      	ldr	r3, [pc, #320]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	494d      	ldr	r1, [pc, #308]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	4313      	orrs	r3, r2
 8002380:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d044      	beq.n	8002418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d107      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002396:	4b47      	ldr	r3, [pc, #284]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d119      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e07f      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d003      	beq.n	80023b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b6:	4b3f      	ldr	r3, [pc, #252]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e06f      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c6:	4b3b      	ldr	r3, [pc, #236]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e067      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023d6:	4b37      	ldr	r3, [pc, #220]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f023 0203 	bic.w	r2, r3, #3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4934      	ldr	r1, [pc, #208]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e8:	f7ff f926 	bl	8001638 <HAL_GetTick>
 80023ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ee:	e00a      	b.n	8002406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f0:	f7ff f922 	bl	8001638 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023fe:	4293      	cmp	r3, r2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e04f      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002406:	4b2b      	ldr	r3, [pc, #172]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 020c 	and.w	r2, r3, #12
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	429a      	cmp	r2, r3
 8002416:	d1eb      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002418:	4b25      	ldr	r3, [pc, #148]	@ (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 030f 	and.w	r3, r3, #15
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d20c      	bcs.n	8002440 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002426:	4b22      	ldr	r3, [pc, #136]	@ (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800242e:	4b20      	ldr	r3, [pc, #128]	@ (80024b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d001      	beq.n	8002440 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e032      	b.n	80024a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800244c:	4b19      	ldr	r3, [pc, #100]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	4916      	ldr	r1, [pc, #88]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	4313      	orrs	r3, r2
 800245c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d009      	beq.n	800247e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800246a:	4b12      	ldr	r3, [pc, #72]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	490e      	ldr	r1, [pc, #56]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	4313      	orrs	r3, r2
 800247c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800247e:	f000 f821 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 8002482:	4602      	mov	r2, r0
 8002484:	4b0b      	ldr	r3, [pc, #44]	@ (80024b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	490a      	ldr	r1, [pc, #40]	@ (80024b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	5ccb      	ldrb	r3, [r1, r3]
 8002492:	fa22 f303 	lsr.w	r3, r2, r3
 8002496:	4a09      	ldr	r2, [pc, #36]	@ (80024bc <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800249a:	4b09      	ldr	r3, [pc, #36]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff f886 	bl	80015b0 <HAL_InitTick>

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023c00 	.word	0x40023c00
 80024b4:	40023800 	.word	0x40023800
 80024b8:	08004710 	.word	0x08004710
 80024bc:	20000004 	.word	0x20000004
 80024c0:	20000008 	.word	0x20000008

080024c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024c8:	b0a6      	sub	sp, #152	@ 0x98
 80024ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024ea:	4bc8      	ldr	r3, [pc, #800]	@ (800280c <HAL_RCC_GetSysClockFreq+0x348>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	2b0c      	cmp	r3, #12
 80024f4:	f200 817e 	bhi.w	80027f4 <HAL_RCC_GetSysClockFreq+0x330>
 80024f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002500 <HAL_RCC_GetSysClockFreq+0x3c>)
 80024fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fe:	bf00      	nop
 8002500:	08002535 	.word	0x08002535
 8002504:	080027f5 	.word	0x080027f5
 8002508:	080027f5 	.word	0x080027f5
 800250c:	080027f5 	.word	0x080027f5
 8002510:	0800253d 	.word	0x0800253d
 8002514:	080027f5 	.word	0x080027f5
 8002518:	080027f5 	.word	0x080027f5
 800251c:	080027f5 	.word	0x080027f5
 8002520:	08002545 	.word	0x08002545
 8002524:	080027f5 	.word	0x080027f5
 8002528:	080027f5 	.word	0x080027f5
 800252c:	080027f5 	.word	0x080027f5
 8002530:	080026af 	.word	0x080026af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002534:	4bb6      	ldr	r3, [pc, #728]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002536:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800253a:	e15f      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800253c:	4bb5      	ldr	r3, [pc, #724]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x350>)
 800253e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002542:	e15b      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002544:	4bb1      	ldr	r3, [pc, #708]	@ (800280c <HAL_RCC_GetSysClockFreq+0x348>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800254c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002550:	4bae      	ldr	r3, [pc, #696]	@ (800280c <HAL_RCC_GetSysClockFreq+0x348>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d031      	beq.n	80025c0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800255c:	4bab      	ldr	r3, [pc, #684]	@ (800280c <HAL_RCC_GetSysClockFreq+0x348>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	099b      	lsrs	r3, r3, #6
 8002562:	2200      	movs	r2, #0
 8002564:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002566:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002568:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800256a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800256e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002570:	2300      	movs	r3, #0
 8002572:	667b      	str	r3, [r7, #100]	@ 0x64
 8002574:	4ba7      	ldr	r3, [pc, #668]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x350>)
 8002576:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800257a:	462a      	mov	r2, r5
 800257c:	fb03 f202 	mul.w	r2, r3, r2
 8002580:	2300      	movs	r3, #0
 8002582:	4621      	mov	r1, r4
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	4413      	add	r3, r2
 800258a:	4aa2      	ldr	r2, [pc, #648]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x350>)
 800258c:	4621      	mov	r1, r4
 800258e:	fba1 1202 	umull	r1, r2, r1, r2
 8002592:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002594:	460a      	mov	r2, r1
 8002596:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002598:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800259a:	4413      	add	r3, r2
 800259c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800259e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025a2:	2200      	movs	r2, #0
 80025a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80025a6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80025a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80025ac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80025b0:	f7fd fe28 	bl	8000204 <__aeabi_uldivmod>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4613      	mov	r3, r2
 80025ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80025be:	e064      	b.n	800268a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c0:	4b92      	ldr	r3, [pc, #584]	@ (800280c <HAL_RCC_GetSysClockFreq+0x348>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	099b      	lsrs	r3, r3, #6
 80025c6:	2200      	movs	r2, #0
 80025c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80025ca:	657a      	str	r2, [r7, #84]	@ 0x54
 80025cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025d4:	2300      	movs	r3, #0
 80025d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025d8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80025dc:	4622      	mov	r2, r4
 80025de:	462b      	mov	r3, r5
 80025e0:	f04f 0000 	mov.w	r0, #0
 80025e4:	f04f 0100 	mov.w	r1, #0
 80025e8:	0159      	lsls	r1, r3, #5
 80025ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025ee:	0150      	lsls	r0, r2, #5
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4621      	mov	r1, r4
 80025f6:	1a51      	subs	r1, r2, r1
 80025f8:	6139      	str	r1, [r7, #16]
 80025fa:	4629      	mov	r1, r5
 80025fc:	eb63 0301 	sbc.w	r3, r3, r1
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800260e:	4659      	mov	r1, fp
 8002610:	018b      	lsls	r3, r1, #6
 8002612:	4651      	mov	r1, sl
 8002614:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002618:	4651      	mov	r1, sl
 800261a:	018a      	lsls	r2, r1, #6
 800261c:	4651      	mov	r1, sl
 800261e:	ebb2 0801 	subs.w	r8, r2, r1
 8002622:	4659      	mov	r1, fp
 8002624:	eb63 0901 	sbc.w	r9, r3, r1
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002634:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002638:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800263c:	4690      	mov	r8, r2
 800263e:	4699      	mov	r9, r3
 8002640:	4623      	mov	r3, r4
 8002642:	eb18 0303 	adds.w	r3, r8, r3
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	462b      	mov	r3, r5
 800264a:	eb49 0303 	adc.w	r3, r9, r3
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800265c:	4629      	mov	r1, r5
 800265e:	028b      	lsls	r3, r1, #10
 8002660:	4621      	mov	r1, r4
 8002662:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002666:	4621      	mov	r1, r4
 8002668:	028a      	lsls	r2, r1, #10
 800266a:	4610      	mov	r0, r2
 800266c:	4619      	mov	r1, r3
 800266e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002672:	2200      	movs	r2, #0
 8002674:	643b      	str	r3, [r7, #64]	@ 0x40
 8002676:	647a      	str	r2, [r7, #68]	@ 0x44
 8002678:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800267c:	f7fd fdc2 	bl	8000204 <__aeabi_uldivmod>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4613      	mov	r3, r2
 8002686:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800268a:	4b60      	ldr	r3, [pc, #384]	@ (800280c <HAL_RCC_GetSysClockFreq+0x348>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	0c1b      	lsrs	r3, r3, #16
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	3301      	adds	r3, #1
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800269c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80026a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80026ac:	e0a6      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026ae:	4b57      	ldr	r3, [pc, #348]	@ (800280c <HAL_RCC_GetSysClockFreq+0x348>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026ba:	4b54      	ldr	r3, [pc, #336]	@ (800280c <HAL_RCC_GetSysClockFreq+0x348>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d02a      	beq.n	800271c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c6:	4b51      	ldr	r3, [pc, #324]	@ (800280c <HAL_RCC_GetSysClockFreq+0x348>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	099b      	lsrs	r3, r3, #6
 80026cc:	2200      	movs	r2, #0
 80026ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80026d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80026d8:	2100      	movs	r1, #0
 80026da:	4b4e      	ldr	r3, [pc, #312]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x350>)
 80026dc:	fb03 f201 	mul.w	r2, r3, r1
 80026e0:	2300      	movs	r3, #0
 80026e2:	fb00 f303 	mul.w	r3, r0, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x350>)
 80026ea:	fba0 1202 	umull	r1, r2, r0, r2
 80026ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80026f0:	460a      	mov	r2, r1
 80026f2:	673a      	str	r2, [r7, #112]	@ 0x70
 80026f4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80026f6:	4413      	add	r3, r2
 80026f8:	677b      	str	r3, [r7, #116]	@ 0x74
 80026fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026fe:	2200      	movs	r2, #0
 8002700:	633b      	str	r3, [r7, #48]	@ 0x30
 8002702:	637a      	str	r2, [r7, #52]	@ 0x34
 8002704:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002708:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800270c:	f7fd fd7a 	bl	8000204 <__aeabi_uldivmod>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4613      	mov	r3, r2
 8002716:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800271a:	e05b      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800271c:	4b3b      	ldr	r3, [pc, #236]	@ (800280c <HAL_RCC_GetSysClockFreq+0x348>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	099b      	lsrs	r3, r3, #6
 8002722:	2200      	movs	r2, #0
 8002724:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002726:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800272a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800272e:	623b      	str	r3, [r7, #32]
 8002730:	2300      	movs	r3, #0
 8002732:	627b      	str	r3, [r7, #36]	@ 0x24
 8002734:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002738:	4642      	mov	r2, r8
 800273a:	464b      	mov	r3, r9
 800273c:	f04f 0000 	mov.w	r0, #0
 8002740:	f04f 0100 	mov.w	r1, #0
 8002744:	0159      	lsls	r1, r3, #5
 8002746:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800274a:	0150      	lsls	r0, r2, #5
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4641      	mov	r1, r8
 8002752:	ebb2 0a01 	subs.w	sl, r2, r1
 8002756:	4649      	mov	r1, r9
 8002758:	eb63 0b01 	sbc.w	fp, r3, r1
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002768:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800276c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002770:	ebb2 040a 	subs.w	r4, r2, sl
 8002774:	eb63 050b 	sbc.w	r5, r3, fp
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	00eb      	lsls	r3, r5, #3
 8002782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002786:	00e2      	lsls	r2, r4, #3
 8002788:	4614      	mov	r4, r2
 800278a:	461d      	mov	r5, r3
 800278c:	4643      	mov	r3, r8
 800278e:	18e3      	adds	r3, r4, r3
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	464b      	mov	r3, r9
 8002794:	eb45 0303 	adc.w	r3, r5, r3
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027a6:	4629      	mov	r1, r5
 80027a8:	028b      	lsls	r3, r1, #10
 80027aa:	4621      	mov	r1, r4
 80027ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027b0:	4621      	mov	r1, r4
 80027b2:	028a      	lsls	r2, r1, #10
 80027b4:	4610      	mov	r0, r2
 80027b6:	4619      	mov	r1, r3
 80027b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027bc:	2200      	movs	r2, #0
 80027be:	61bb      	str	r3, [r7, #24]
 80027c0:	61fa      	str	r2, [r7, #28]
 80027c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027c6:	f7fd fd1d 	bl	8000204 <__aeabi_uldivmod>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4613      	mov	r3, r2
 80027d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80027d4:	4b0d      	ldr	r3, [pc, #52]	@ (800280c <HAL_RCC_GetSysClockFreq+0x348>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	0f1b      	lsrs	r3, r3, #28
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80027e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80027e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80027f2:	e003      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027f4:	4b06      	ldr	r3, [pc, #24]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x34c>)
 80027f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80027fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002800:	4618      	mov	r0, r3
 8002802:	3798      	adds	r7, #152	@ 0x98
 8002804:	46bd      	mov	sp, r7
 8002806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800280a:	bf00      	nop
 800280c:	40023800 	.word	0x40023800
 8002810:	00f42400 	.word	0x00f42400
 8002814:	017d7840 	.word	0x017d7840

08002818 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e28d      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 8083 	beq.w	800293e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002838:	4b94      	ldr	r3, [pc, #592]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 030c 	and.w	r3, r3, #12
 8002840:	2b04      	cmp	r3, #4
 8002842:	d019      	beq.n	8002878 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002844:	4b91      	ldr	r3, [pc, #580]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 030c 	and.w	r3, r3, #12
        || \
 800284c:	2b08      	cmp	r3, #8
 800284e:	d106      	bne.n	800285e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002850:	4b8e      	ldr	r3, [pc, #568]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002858:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800285c:	d00c      	beq.n	8002878 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800285e:	4b8b      	ldr	r3, [pc, #556]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002866:	2b0c      	cmp	r3, #12
 8002868:	d112      	bne.n	8002890 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800286a:	4b88      	ldr	r3, [pc, #544]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002872:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002876:	d10b      	bne.n	8002890 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002878:	4b84      	ldr	r3, [pc, #528]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d05b      	beq.n	800293c <HAL_RCC_OscConfig+0x124>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d157      	bne.n	800293c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e25a      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002898:	d106      	bne.n	80028a8 <HAL_RCC_OscConfig+0x90>
 800289a:	4b7c      	ldr	r3, [pc, #496]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a7b      	ldr	r2, [pc, #492]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	e01d      	b.n	80028e4 <HAL_RCC_OscConfig+0xcc>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028b0:	d10c      	bne.n	80028cc <HAL_RCC_OscConfig+0xb4>
 80028b2:	4b76      	ldr	r3, [pc, #472]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a75      	ldr	r2, [pc, #468]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	4b73      	ldr	r3, [pc, #460]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a72      	ldr	r2, [pc, #456]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	e00b      	b.n	80028e4 <HAL_RCC_OscConfig+0xcc>
 80028cc:	4b6f      	ldr	r3, [pc, #444]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a6e      	ldr	r2, [pc, #440]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	4b6c      	ldr	r3, [pc, #432]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a6b      	ldr	r2, [pc, #428]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d013      	beq.n	8002914 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe fea4 	bl	8001638 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f4:	f7fe fea0 	bl	8001638 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b64      	cmp	r3, #100	@ 0x64
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e21f      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	4b61      	ldr	r3, [pc, #388]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0xdc>
 8002912:	e014      	b.n	800293e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fe fe90 	bl	8001638 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800291c:	f7fe fe8c 	bl	8001638 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b64      	cmp	r3, #100	@ 0x64
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e20b      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292e:	4b57      	ldr	r3, [pc, #348]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x104>
 800293a:	e000      	b.n	800293e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d06f      	beq.n	8002a2a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800294a:	4b50      	ldr	r3, [pc, #320]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	2b00      	cmp	r3, #0
 8002954:	d017      	beq.n	8002986 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002956:	4b4d      	ldr	r3, [pc, #308]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 030c 	and.w	r3, r3, #12
        || \
 800295e:	2b08      	cmp	r3, #8
 8002960:	d105      	bne.n	800296e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002962:	4b4a      	ldr	r3, [pc, #296]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00b      	beq.n	8002986 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296e:	4b47      	ldr	r3, [pc, #284]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002976:	2b0c      	cmp	r3, #12
 8002978:	d11c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800297a:	4b44      	ldr	r3, [pc, #272]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d116      	bne.n	80029b4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002986:	4b41      	ldr	r3, [pc, #260]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_RCC_OscConfig+0x186>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d001      	beq.n	800299e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e1d3      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4937      	ldr	r1, [pc, #220]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b2:	e03a      	b.n	8002a2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d020      	beq.n	80029fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029bc:	4b34      	ldr	r3, [pc, #208]	@ (8002a90 <HAL_RCC_OscConfig+0x278>)
 80029be:	2201      	movs	r2, #1
 80029c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c2:	f7fe fe39 	bl	8001638 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ca:	f7fe fe35 	bl	8001638 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e1b4      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029dc:	4b2b      	ldr	r3, [pc, #172]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e8:	4b28      	ldr	r3, [pc, #160]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4925      	ldr	r1, [pc, #148]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	600b      	str	r3, [r1, #0]
 80029fc:	e015      	b.n	8002a2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029fe:	4b24      	ldr	r3, [pc, #144]	@ (8002a90 <HAL_RCC_OscConfig+0x278>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a04:	f7fe fe18 	bl	8001638 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a0c:	f7fe fe14 	bl	8001638 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e193      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d036      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d016      	beq.n	8002a6c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a3e:	4b15      	ldr	r3, [pc, #84]	@ (8002a94 <HAL_RCC_OscConfig+0x27c>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a44:	f7fe fdf8 	bl	8001638 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a4c:	f7fe fdf4 	bl	8001638 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e173      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x234>
 8002a6a:	e01b      	b.n	8002aa4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a6c:	4b09      	ldr	r3, [pc, #36]	@ (8002a94 <HAL_RCC_OscConfig+0x27c>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a72:	f7fe fde1 	bl	8001638 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a78:	e00e      	b.n	8002a98 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a7a:	f7fe fddd 	bl	8001638 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d907      	bls.n	8002a98 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e15c      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	42470000 	.word	0x42470000
 8002a94:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a98:	4b8a      	ldr	r3, [pc, #552]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002a9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1ea      	bne.n	8002a7a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 8097 	beq.w	8002be0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab6:	4b83      	ldr	r3, [pc, #524]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10f      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	4b7f      	ldr	r3, [pc, #508]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	4a7e      	ldr	r2, [pc, #504]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ad2:	4b7c      	ldr	r3, [pc, #496]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae2:	4b79      	ldr	r3, [pc, #484]	@ (8002cc8 <HAL_RCC_OscConfig+0x4b0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d118      	bne.n	8002b20 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aee:	4b76      	ldr	r3, [pc, #472]	@ (8002cc8 <HAL_RCC_OscConfig+0x4b0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a75      	ldr	r2, [pc, #468]	@ (8002cc8 <HAL_RCC_OscConfig+0x4b0>)
 8002af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002afa:	f7fe fd9d 	bl	8001638 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b02:	f7fe fd99 	bl	8001638 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e118      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b14:	4b6c      	ldr	r3, [pc, #432]	@ (8002cc8 <HAL_RCC_OscConfig+0x4b0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d106      	bne.n	8002b36 <HAL_RCC_OscConfig+0x31e>
 8002b28:	4b66      	ldr	r3, [pc, #408]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2c:	4a65      	ldr	r2, [pc, #404]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b34:	e01c      	b.n	8002b70 <HAL_RCC_OscConfig+0x358>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b05      	cmp	r3, #5
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x340>
 8002b3e:	4b61      	ldr	r3, [pc, #388]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b42:	4a60      	ldr	r2, [pc, #384]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b44:	f043 0304 	orr.w	r3, r3, #4
 8002b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b4a:	4b5e      	ldr	r3, [pc, #376]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4e:	4a5d      	ldr	r2, [pc, #372]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b56:	e00b      	b.n	8002b70 <HAL_RCC_OscConfig+0x358>
 8002b58:	4b5a      	ldr	r3, [pc, #360]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5c:	4a59      	ldr	r2, [pc, #356]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b5e:	f023 0301 	bic.w	r3, r3, #1
 8002b62:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b64:	4b57      	ldr	r3, [pc, #348]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b68:	4a56      	ldr	r2, [pc, #344]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b6a:	f023 0304 	bic.w	r3, r3, #4
 8002b6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d015      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7fe fd5e 	bl	8001638 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b80:	f7fe fd5a 	bl	8001638 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e0d7      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b96:	4b4b      	ldr	r3, [pc, #300]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0ee      	beq.n	8002b80 <HAL_RCC_OscConfig+0x368>
 8002ba2:	e014      	b.n	8002bce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7fe fd48 	bl	8001638 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bac:	f7fe fd44 	bl	8001638 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e0c1      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc2:	4b40      	ldr	r3, [pc, #256]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1ee      	bne.n	8002bac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bce:	7dfb      	ldrb	r3, [r7, #23]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d105      	bne.n	8002be0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd8:	4a3a      	ldr	r2, [pc, #232]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002bda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bde:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 80ad 	beq.w	8002d44 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bea:	4b36      	ldr	r3, [pc, #216]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d060      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d145      	bne.n	8002c8a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfe:	4b33      	ldr	r3, [pc, #204]	@ (8002ccc <HAL_RCC_OscConfig+0x4b4>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c04:	f7fe fd18 	bl	8001638 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0c:	f7fe fd14 	bl	8001638 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e093      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1e:	4b29      	ldr	r3, [pc, #164]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69da      	ldr	r2, [r3, #28]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c38:	019b      	lsls	r3, r3, #6
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c40:	085b      	lsrs	r3, r3, #1
 8002c42:	3b01      	subs	r3, #1
 8002c44:	041b      	lsls	r3, r3, #16
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4c:	061b      	lsls	r3, r3, #24
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c54:	071b      	lsls	r3, r3, #28
 8002c56:	491b      	ldr	r1, [pc, #108]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ccc <HAL_RCC_OscConfig+0x4b4>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c62:	f7fe fce9 	bl	8001638 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6a:	f7fe fce5 	bl	8001638 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e064      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7c:	4b11      	ldr	r3, [pc, #68]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0f0      	beq.n	8002c6a <HAL_RCC_OscConfig+0x452>
 8002c88:	e05c      	b.n	8002d44 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8a:	4b10      	ldr	r3, [pc, #64]	@ (8002ccc <HAL_RCC_OscConfig+0x4b4>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fe fcd2 	bl	8001638 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c98:	f7fe fcce 	bl	8001638 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e04d      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002caa:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x480>
 8002cb6:	e045      	b.n	8002d44 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d107      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e040      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40007000 	.word	0x40007000
 8002ccc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d50 <HAL_RCC_OscConfig+0x538>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d030      	beq.n	8002d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d129      	bne.n	8002d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d122      	bne.n	8002d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d00:	4013      	ands	r3, r2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d119      	bne.n	8002d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d16:	085b      	lsrs	r3, r3, #1
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d10f      	bne.n	8002d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d107      	bne.n	8002d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e000      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40023800 	.word	0x40023800

08002d54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e07b      	b.n	8002e5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d108      	bne.n	8002d80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d76:	d009      	beq.n	8002d8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	61da      	str	r2, [r3, #28]
 8002d7e:	e005      	b.n	8002d8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7fe faf0 	bl	800138c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dc2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e10:	ea42 0103 	orr.w	r1, r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e18:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	0c1b      	lsrs	r3, r3, #16
 8002e2a:	f003 0104 	and.w	r1, r3, #4
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e32:	f003 0210 	and.w	r2, r3, #16
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69da      	ldr	r2, [r3, #28]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b088      	sub	sp, #32
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	60f8      	str	r0, [r7, #12]
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	603b      	str	r3, [r7, #0]
 8002e72:	4613      	mov	r3, r2
 8002e74:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e76:	f7fe fbdf 	bl	8001638 <HAL_GetTick>
 8002e7a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002e7c:	88fb      	ldrh	r3, [r7, #6]
 8002e7e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d001      	beq.n	8002e90 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e12a      	b.n	80030e6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <HAL_SPI_Transmit+0x36>
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e122      	b.n	80030e6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_SPI_Transmit+0x48>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e11b      	b.n	80030e6 <HAL_SPI_Transmit+0x280>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2203      	movs	r2, #3
 8002eba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	88fa      	ldrh	r2, [r7, #6]
 8002ece:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	88fa      	ldrh	r2, [r7, #6]
 8002ed4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002efc:	d10f      	bne.n	8002f1e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f28:	2b40      	cmp	r3, #64	@ 0x40
 8002f2a:	d007      	beq.n	8002f3c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f44:	d152      	bne.n	8002fec <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d002      	beq.n	8002f54 <HAL_SPI_Transmit+0xee>
 8002f4e:	8b7b      	ldrh	r3, [r7, #26]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d145      	bne.n	8002fe0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f58:	881a      	ldrh	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f64:	1c9a      	adds	r2, r3, #2
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f78:	e032      	b.n	8002fe0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d112      	bne.n	8002fae <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8c:	881a      	ldrh	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f98:	1c9a      	adds	r2, r3, #2
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002fac:	e018      	b.n	8002fe0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fae:	f7fe fb43 	bl	8001638 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d803      	bhi.n	8002fc6 <HAL_SPI_Transmit+0x160>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc4:	d102      	bne.n	8002fcc <HAL_SPI_Transmit+0x166>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d109      	bne.n	8002fe0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e082      	b.n	80030e6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1c7      	bne.n	8002f7a <HAL_SPI_Transmit+0x114>
 8002fea:	e053      	b.n	8003094 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <HAL_SPI_Transmit+0x194>
 8002ff4:	8b7b      	ldrh	r3, [r7, #26]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d147      	bne.n	800308a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	330c      	adds	r3, #12
 8003004:	7812      	ldrb	r2, [r2, #0]
 8003006:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003020:	e033      	b.n	800308a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b02      	cmp	r3, #2
 800302e:	d113      	bne.n	8003058 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	330c      	adds	r3, #12
 800303a:	7812      	ldrb	r2, [r2, #0]
 800303c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003056:	e018      	b.n	800308a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003058:	f7fe faee 	bl	8001638 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d803      	bhi.n	8003070 <HAL_SPI_Transmit+0x20a>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306e:	d102      	bne.n	8003076 <HAL_SPI_Transmit+0x210>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e02d      	b.n	80030e6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800308e:	b29b      	uxth	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1c6      	bne.n	8003022 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003094:	69fa      	ldr	r2, [r7, #28]
 8003096:	6839      	ldr	r1, [r7, #0]
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f9f9 	bl	8003490 <SPI_EndRxTxTransaction>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2220      	movs	r2, #32
 80030a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10a      	bne.n	80030c8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80030e4:	2300      	movs	r3, #0
  }
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3720      	adds	r7, #32
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	4613      	mov	r3, r2
 80030fc:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d001      	beq.n	800310e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800310a:	2302      	movs	r3, #2
 800310c:	e097      	b.n	800323e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <HAL_SPI_Transmit_DMA+0x2a>
 8003114:	88fb      	ldrh	r3, [r7, #6]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e08f      	b.n	800323e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_SPI_Transmit_DMA+0x3c>
 8003128:	2302      	movs	r3, #2
 800312a:	e088      	b.n	800323e <HAL_SPI_Transmit_DMA+0x14e>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2203      	movs	r2, #3
 8003138:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	88fa      	ldrh	r2, [r7, #6]
 800314c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	88fa      	ldrh	r2, [r7, #6]
 8003152:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800317a:	d10f      	bne.n	800319c <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800318a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800319a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031a0:	4a29      	ldr	r2, [pc, #164]	@ (8003248 <HAL_SPI_Transmit_DMA+0x158>)
 80031a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031a8:	4a28      	ldr	r2, [pc, #160]	@ (800324c <HAL_SPI_Transmit_DMA+0x15c>)
 80031aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b0:	4a27      	ldr	r2, [pc, #156]	@ (8003250 <HAL_SPI_Transmit_DMA+0x160>)
 80031b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b8:	2200      	movs	r2, #0
 80031ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c4:	4619      	mov	r1, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	330c      	adds	r3, #12
 80031cc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031d2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80031d4:	f7fe fc20 	bl	8001a18 <HAL_DMA_Start_IT>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00b      	beq.n	80031f6 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e2:	f043 0210 	orr.w	r2, r3, #16
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e023      	b.n	800323e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003200:	2b40      	cmp	r3, #64	@ 0x40
 8003202:	d007      	beq.n	8003214 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003212:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0220 	orr.w	r2, r2, #32
 800322a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0202 	orr.w	r2, r2, #2
 800323a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	08003325 	.word	0x08003325
 800324c:	0800327d 	.word	0x0800327d
 8003250:	08003341 	.word	0x08003341

08003254 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003288:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800328a:	f7fe f9d5 	bl	8001638 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800329a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800329e:	d03b      	beq.n	8003318 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0220 	bic.w	r2, r2, #32
 80032ae:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0202 	bic.w	r2, r2, #2
 80032be:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	2164      	movs	r1, #100	@ 0x64
 80032c4:	6978      	ldr	r0, [r7, #20]
 80032c6:	f000 f8e3 	bl	8003490 <SPI_EndRxTxTransaction>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d4:	f043 0220 	orr.w	r2, r3, #32
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10a      	bne.n	80032fa <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2200      	movs	r2, #0
 80032fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003310:	6978      	ldr	r0, [r7, #20]
 8003312:	f7ff ffa9 	bl	8003268 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003316:	e002      	b.n	800331e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003318:	6978      	ldr	r0, [r7, #20]
 800331a:	f7fd f8eb 	bl	80004f4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003330:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f7ff ff8e 	bl	8003254 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003338:	bf00      	nop
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0203 	bic.w	r2, r2, #3
 800335c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003362:	f043 0210 	orr.w	r2, r3, #16
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f7ff ff78 	bl	8003268 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003378:	bf00      	nop
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	4613      	mov	r3, r2
 800338e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003390:	f7fe f952 	bl	8001638 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	4413      	add	r3, r2
 800339e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033a0:	f7fe f94a 	bl	8001638 <HAL_GetTick>
 80033a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033a6:	4b39      	ldr	r3, [pc, #228]	@ (800348c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	015b      	lsls	r3, r3, #5
 80033ac:	0d1b      	lsrs	r3, r3, #20
 80033ae:	69fa      	ldr	r2, [r7, #28]
 80033b0:	fb02 f303 	mul.w	r3, r2, r3
 80033b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033b6:	e055      	b.n	8003464 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033be:	d051      	beq.n	8003464 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033c0:	f7fe f93a 	bl	8001638 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	69fa      	ldr	r2, [r7, #28]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d902      	bls.n	80033d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d13d      	bne.n	8003452 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80033e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033ee:	d111      	bne.n	8003414 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033f8:	d004      	beq.n	8003404 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003402:	d107      	bne.n	8003414 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003412:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003418:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800341c:	d10f      	bne.n	800343e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800343c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e018      	b.n	8003484 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d102      	bne.n	800345e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	61fb      	str	r3, [r7, #28]
 800345c:	e002      	b.n	8003464 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	3b01      	subs	r3, #1
 8003462:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	4013      	ands	r3, r2
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	429a      	cmp	r2, r3
 8003472:	bf0c      	ite	eq
 8003474:	2301      	moveq	r3, #1
 8003476:	2300      	movne	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	429a      	cmp	r2, r3
 8003480:	d19a      	bne.n	80033b8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3720      	adds	r7, #32
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20000004 	.word	0x20000004

08003490 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af02      	add	r7, sp, #8
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2201      	movs	r2, #1
 80034a4:	2102      	movs	r1, #2
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f7ff ff6a 	bl	8003380 <SPI_WaitFlagStateUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d007      	beq.n	80034c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b6:	f043 0220 	orr.w	r2, r3, #32
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e032      	b.n	8003528 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80034c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003530 <SPI_EndRxTxTransaction+0xa0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003534 <SPI_EndRxTxTransaction+0xa4>)
 80034c8:	fba2 2303 	umull	r2, r3, r2, r3
 80034cc:	0d5b      	lsrs	r3, r3, #21
 80034ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80034d2:	fb02 f303 	mul.w	r3, r2, r3
 80034d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034e0:	d112      	bne.n	8003508 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2200      	movs	r2, #0
 80034ea:	2180      	movs	r1, #128	@ 0x80
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f7ff ff47 	bl	8003380 <SPI_WaitFlagStateUntilTimeout>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d016      	beq.n	8003526 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034fc:	f043 0220 	orr.w	r2, r3, #32
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e00f      	b.n	8003528 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	3b01      	subs	r3, #1
 8003512:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800351e:	2b80      	cmp	r3, #128	@ 0x80
 8003520:	d0f2      	beq.n	8003508 <SPI_EndRxTxTransaction+0x78>
 8003522:	e000      	b.n	8003526 <SPI_EndRxTxTransaction+0x96>
        break;
 8003524:	bf00      	nop
  }

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	20000004 	.word	0x20000004
 8003534:	165e9f81 	.word	0x165e9f81

08003538 <memset>:
 8003538:	4402      	add	r2, r0
 800353a:	4603      	mov	r3, r0
 800353c:	4293      	cmp	r3, r2
 800353e:	d100      	bne.n	8003542 <memset+0xa>
 8003540:	4770      	bx	lr
 8003542:	f803 1b01 	strb.w	r1, [r3], #1
 8003546:	e7f9      	b.n	800353c <memset+0x4>

08003548 <__libc_init_array>:
 8003548:	b570      	push	{r4, r5, r6, lr}
 800354a:	4d0d      	ldr	r5, [pc, #52]	@ (8003580 <__libc_init_array+0x38>)
 800354c:	4c0d      	ldr	r4, [pc, #52]	@ (8003584 <__libc_init_array+0x3c>)
 800354e:	1b64      	subs	r4, r4, r5
 8003550:	10a4      	asrs	r4, r4, #2
 8003552:	2600      	movs	r6, #0
 8003554:	42a6      	cmp	r6, r4
 8003556:	d109      	bne.n	800356c <__libc_init_array+0x24>
 8003558:	4d0b      	ldr	r5, [pc, #44]	@ (8003588 <__libc_init_array+0x40>)
 800355a:	4c0c      	ldr	r4, [pc, #48]	@ (800358c <__libc_init_array+0x44>)
 800355c:	f000 f818 	bl	8003590 <_init>
 8003560:	1b64      	subs	r4, r4, r5
 8003562:	10a4      	asrs	r4, r4, #2
 8003564:	2600      	movs	r6, #0
 8003566:	42a6      	cmp	r6, r4
 8003568:	d105      	bne.n	8003576 <__libc_init_array+0x2e>
 800356a:	bd70      	pop	{r4, r5, r6, pc}
 800356c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003570:	4798      	blx	r3
 8003572:	3601      	adds	r6, #1
 8003574:	e7ee      	b.n	8003554 <__libc_init_array+0xc>
 8003576:	f855 3b04 	ldr.w	r3, [r5], #4
 800357a:	4798      	blx	r3
 800357c:	3601      	adds	r6, #1
 800357e:	e7f2      	b.n	8003566 <__libc_init_array+0x1e>
 8003580:	08004730 	.word	0x08004730
 8003584:	08004730 	.word	0x08004730
 8003588:	08004730 	.word	0x08004730
 800358c:	08004734 	.word	0x08004734

08003590 <_init>:
 8003590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003592:	bf00      	nop
 8003594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003596:	bc08      	pop	{r3}
 8003598:	469e      	mov	lr, r3
 800359a:	4770      	bx	lr

0800359c <_fini>:
 800359c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359e:	bf00      	nop
 80035a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035a2:	bc08      	pop	{r3}
 80035a4:	469e      	mov	lr, r3
 80035a6:	4770      	bx	lr
