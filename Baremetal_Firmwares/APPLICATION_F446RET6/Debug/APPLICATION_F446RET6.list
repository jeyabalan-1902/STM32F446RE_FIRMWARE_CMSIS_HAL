
APPLICATION_F446RET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d5c  080081d0  080081d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001498  0800cf2c  0800cf2c  00005f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3c4  0800e3c4  000080a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e3c4  0800e3c4  000073c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3cc  0800e3cc  000080a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3cc  0800e3cc  000073cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e3d0  0800e3d0  000073d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  0800e3d4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  200000a0  0800e474  000080a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  0800e474  00008350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7e2  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e5  00000000  00000000  000158b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00017e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094b  00000000  00000000  00018ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d4f  00000000  00000000  0001941b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010209  00000000  00000000  0003c16a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cce00  00000000  00000000  0004c373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119173  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038a0  00000000  00000000  001191b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0011ca58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081d0 <__do_global_dtors_aux>:
 80081d0:	b510      	push	{r4, lr}
 80081d2:	4c05      	ldr	r4, [pc, #20]	@ (80081e8 <__do_global_dtors_aux+0x18>)
 80081d4:	7823      	ldrb	r3, [r4, #0]
 80081d6:	b933      	cbnz	r3, 80081e6 <__do_global_dtors_aux+0x16>
 80081d8:	4b04      	ldr	r3, [pc, #16]	@ (80081ec <__do_global_dtors_aux+0x1c>)
 80081da:	b113      	cbz	r3, 80081e2 <__do_global_dtors_aux+0x12>
 80081dc:	4804      	ldr	r0, [pc, #16]	@ (80081f0 <__do_global_dtors_aux+0x20>)
 80081de:	f3af 8000 	nop.w
 80081e2:	2301      	movs	r3, #1
 80081e4:	7023      	strb	r3, [r4, #0]
 80081e6:	bd10      	pop	{r4, pc}
 80081e8:	200000a0 	.word	0x200000a0
 80081ec:	00000000 	.word	0x00000000
 80081f0:	0800cf14 	.word	0x0800cf14

080081f4 <frame_dummy>:
 80081f4:	b508      	push	{r3, lr}
 80081f6:	4b03      	ldr	r3, [pc, #12]	@ (8008204 <frame_dummy+0x10>)
 80081f8:	b11b      	cbz	r3, 8008202 <frame_dummy+0xe>
 80081fa:	4903      	ldr	r1, [pc, #12]	@ (8008208 <frame_dummy+0x14>)
 80081fc:	4803      	ldr	r0, [pc, #12]	@ (800820c <frame_dummy+0x18>)
 80081fe:	f3af 8000 	nop.w
 8008202:	bd08      	pop	{r3, pc}
 8008204:	00000000 	.word	0x00000000
 8008208:	200000a4 	.word	0x200000a4
 800820c:	0800cf14 	.word	0x0800cf14

08008210 <memchr>:
 8008210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8008214:	2a10      	cmp	r2, #16
 8008216:	db2b      	blt.n	8008270 <memchr+0x60>
 8008218:	f010 0f07 	tst.w	r0, #7
 800821c:	d008      	beq.n	8008230 <memchr+0x20>
 800821e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008222:	3a01      	subs	r2, #1
 8008224:	428b      	cmp	r3, r1
 8008226:	d02d      	beq.n	8008284 <memchr+0x74>
 8008228:	f010 0f07 	tst.w	r0, #7
 800822c:	b342      	cbz	r2, 8008280 <memchr+0x70>
 800822e:	d1f6      	bne.n	800821e <memchr+0xe>
 8008230:	b4f0      	push	{r4, r5, r6, r7}
 8008232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800823a:	f022 0407 	bic.w	r4, r2, #7
 800823e:	f07f 0700 	mvns.w	r7, #0
 8008242:	2300      	movs	r3, #0
 8008244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008248:	3c08      	subs	r4, #8
 800824a:	ea85 0501 	eor.w	r5, r5, r1
 800824e:	ea86 0601 	eor.w	r6, r6, r1
 8008252:	fa85 f547 	uadd8	r5, r5, r7
 8008256:	faa3 f587 	sel	r5, r3, r7
 800825a:	fa86 f647 	uadd8	r6, r6, r7
 800825e:	faa5 f687 	sel	r6, r5, r7
 8008262:	b98e      	cbnz	r6, 8008288 <memchr+0x78>
 8008264:	d1ee      	bne.n	8008244 <memchr+0x34>
 8008266:	bcf0      	pop	{r4, r5, r6, r7}
 8008268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800826c:	f002 0207 	and.w	r2, r2, #7
 8008270:	b132      	cbz	r2, 8008280 <memchr+0x70>
 8008272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008276:	3a01      	subs	r2, #1
 8008278:	ea83 0301 	eor.w	r3, r3, r1
 800827c:	b113      	cbz	r3, 8008284 <memchr+0x74>
 800827e:	d1f8      	bne.n	8008272 <memchr+0x62>
 8008280:	2000      	movs	r0, #0
 8008282:	4770      	bx	lr
 8008284:	3801      	subs	r0, #1
 8008286:	4770      	bx	lr
 8008288:	2d00      	cmp	r5, #0
 800828a:	bf06      	itte	eq
 800828c:	4635      	moveq	r5, r6
 800828e:	3803      	subeq	r0, #3
 8008290:	3807      	subne	r0, #7
 8008292:	f015 0f01 	tst.w	r5, #1
 8008296:	d107      	bne.n	80082a8 <memchr+0x98>
 8008298:	3001      	adds	r0, #1
 800829a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800829e:	bf02      	ittt	eq
 80082a0:	3001      	addeq	r0, #1
 80082a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80082a6:	3001      	addeq	r0, #1
 80082a8:	bcf0      	pop	{r4, r5, r6, r7}
 80082aa:	3801      	subs	r0, #1
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop

080082b0 <__aeabi_uldivmod>:
 80082b0:	b953      	cbnz	r3, 80082c8 <__aeabi_uldivmod+0x18>
 80082b2:	b94a      	cbnz	r2, 80082c8 <__aeabi_uldivmod+0x18>
 80082b4:	2900      	cmp	r1, #0
 80082b6:	bf08      	it	eq
 80082b8:	2800      	cmpeq	r0, #0
 80082ba:	bf1c      	itt	ne
 80082bc:	f04f 31ff 	movne.w	r1, #4294967295
 80082c0:	f04f 30ff 	movne.w	r0, #4294967295
 80082c4:	f000 b96a 	b.w	800859c <__aeabi_idiv0>
 80082c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80082cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80082d0:	f000 f806 	bl	80082e0 <__udivmoddi4>
 80082d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80082d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082dc:	b004      	add	sp, #16
 80082de:	4770      	bx	lr

080082e0 <__udivmoddi4>:
 80082e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082e4:	9d08      	ldr	r5, [sp, #32]
 80082e6:	460c      	mov	r4, r1
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d14e      	bne.n	800838a <__udivmoddi4+0xaa>
 80082ec:	4694      	mov	ip, r2
 80082ee:	458c      	cmp	ip, r1
 80082f0:	4686      	mov	lr, r0
 80082f2:	fab2 f282 	clz	r2, r2
 80082f6:	d962      	bls.n	80083be <__udivmoddi4+0xde>
 80082f8:	b14a      	cbz	r2, 800830e <__udivmoddi4+0x2e>
 80082fa:	f1c2 0320 	rsb	r3, r2, #32
 80082fe:	4091      	lsls	r1, r2
 8008300:	fa20 f303 	lsr.w	r3, r0, r3
 8008304:	fa0c fc02 	lsl.w	ip, ip, r2
 8008308:	4319      	orrs	r1, r3
 800830a:	fa00 fe02 	lsl.w	lr, r0, r2
 800830e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008312:	fa1f f68c 	uxth.w	r6, ip
 8008316:	fbb1 f4f7 	udiv	r4, r1, r7
 800831a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800831e:	fb07 1114 	mls	r1, r7, r4, r1
 8008322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008326:	fb04 f106 	mul.w	r1, r4, r6
 800832a:	4299      	cmp	r1, r3
 800832c:	d90a      	bls.n	8008344 <__udivmoddi4+0x64>
 800832e:	eb1c 0303 	adds.w	r3, ip, r3
 8008332:	f104 30ff 	add.w	r0, r4, #4294967295
 8008336:	f080 8112 	bcs.w	800855e <__udivmoddi4+0x27e>
 800833a:	4299      	cmp	r1, r3
 800833c:	f240 810f 	bls.w	800855e <__udivmoddi4+0x27e>
 8008340:	3c02      	subs	r4, #2
 8008342:	4463      	add	r3, ip
 8008344:	1a59      	subs	r1, r3, r1
 8008346:	fa1f f38e 	uxth.w	r3, lr
 800834a:	fbb1 f0f7 	udiv	r0, r1, r7
 800834e:	fb07 1110 	mls	r1, r7, r0, r1
 8008352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008356:	fb00 f606 	mul.w	r6, r0, r6
 800835a:	429e      	cmp	r6, r3
 800835c:	d90a      	bls.n	8008374 <__udivmoddi4+0x94>
 800835e:	eb1c 0303 	adds.w	r3, ip, r3
 8008362:	f100 31ff 	add.w	r1, r0, #4294967295
 8008366:	f080 80fc 	bcs.w	8008562 <__udivmoddi4+0x282>
 800836a:	429e      	cmp	r6, r3
 800836c:	f240 80f9 	bls.w	8008562 <__udivmoddi4+0x282>
 8008370:	4463      	add	r3, ip
 8008372:	3802      	subs	r0, #2
 8008374:	1b9b      	subs	r3, r3, r6
 8008376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800837a:	2100      	movs	r1, #0
 800837c:	b11d      	cbz	r5, 8008386 <__udivmoddi4+0xa6>
 800837e:	40d3      	lsrs	r3, r2
 8008380:	2200      	movs	r2, #0
 8008382:	e9c5 3200 	strd	r3, r2, [r5]
 8008386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800838a:	428b      	cmp	r3, r1
 800838c:	d905      	bls.n	800839a <__udivmoddi4+0xba>
 800838e:	b10d      	cbz	r5, 8008394 <__udivmoddi4+0xb4>
 8008390:	e9c5 0100 	strd	r0, r1, [r5]
 8008394:	2100      	movs	r1, #0
 8008396:	4608      	mov	r0, r1
 8008398:	e7f5      	b.n	8008386 <__udivmoddi4+0xa6>
 800839a:	fab3 f183 	clz	r1, r3
 800839e:	2900      	cmp	r1, #0
 80083a0:	d146      	bne.n	8008430 <__udivmoddi4+0x150>
 80083a2:	42a3      	cmp	r3, r4
 80083a4:	d302      	bcc.n	80083ac <__udivmoddi4+0xcc>
 80083a6:	4290      	cmp	r0, r2
 80083a8:	f0c0 80f0 	bcc.w	800858c <__udivmoddi4+0x2ac>
 80083ac:	1a86      	subs	r6, r0, r2
 80083ae:	eb64 0303 	sbc.w	r3, r4, r3
 80083b2:	2001      	movs	r0, #1
 80083b4:	2d00      	cmp	r5, #0
 80083b6:	d0e6      	beq.n	8008386 <__udivmoddi4+0xa6>
 80083b8:	e9c5 6300 	strd	r6, r3, [r5]
 80083bc:	e7e3      	b.n	8008386 <__udivmoddi4+0xa6>
 80083be:	2a00      	cmp	r2, #0
 80083c0:	f040 8090 	bne.w	80084e4 <__udivmoddi4+0x204>
 80083c4:	eba1 040c 	sub.w	r4, r1, ip
 80083c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80083cc:	fa1f f78c 	uxth.w	r7, ip
 80083d0:	2101      	movs	r1, #1
 80083d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80083d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80083da:	fb08 4416 	mls	r4, r8, r6, r4
 80083de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80083e2:	fb07 f006 	mul.w	r0, r7, r6
 80083e6:	4298      	cmp	r0, r3
 80083e8:	d908      	bls.n	80083fc <__udivmoddi4+0x11c>
 80083ea:	eb1c 0303 	adds.w	r3, ip, r3
 80083ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80083f2:	d202      	bcs.n	80083fa <__udivmoddi4+0x11a>
 80083f4:	4298      	cmp	r0, r3
 80083f6:	f200 80cd 	bhi.w	8008594 <__udivmoddi4+0x2b4>
 80083fa:	4626      	mov	r6, r4
 80083fc:	1a1c      	subs	r4, r3, r0
 80083fe:	fa1f f38e 	uxth.w	r3, lr
 8008402:	fbb4 f0f8 	udiv	r0, r4, r8
 8008406:	fb08 4410 	mls	r4, r8, r0, r4
 800840a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800840e:	fb00 f707 	mul.w	r7, r0, r7
 8008412:	429f      	cmp	r7, r3
 8008414:	d908      	bls.n	8008428 <__udivmoddi4+0x148>
 8008416:	eb1c 0303 	adds.w	r3, ip, r3
 800841a:	f100 34ff 	add.w	r4, r0, #4294967295
 800841e:	d202      	bcs.n	8008426 <__udivmoddi4+0x146>
 8008420:	429f      	cmp	r7, r3
 8008422:	f200 80b0 	bhi.w	8008586 <__udivmoddi4+0x2a6>
 8008426:	4620      	mov	r0, r4
 8008428:	1bdb      	subs	r3, r3, r7
 800842a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800842e:	e7a5      	b.n	800837c <__udivmoddi4+0x9c>
 8008430:	f1c1 0620 	rsb	r6, r1, #32
 8008434:	408b      	lsls	r3, r1
 8008436:	fa22 f706 	lsr.w	r7, r2, r6
 800843a:	431f      	orrs	r7, r3
 800843c:	fa20 fc06 	lsr.w	ip, r0, r6
 8008440:	fa04 f301 	lsl.w	r3, r4, r1
 8008444:	ea43 030c 	orr.w	r3, r3, ip
 8008448:	40f4      	lsrs	r4, r6
 800844a:	fa00 f801 	lsl.w	r8, r0, r1
 800844e:	0c38      	lsrs	r0, r7, #16
 8008450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8008454:	fbb4 fef0 	udiv	lr, r4, r0
 8008458:	fa1f fc87 	uxth.w	ip, r7
 800845c:	fb00 441e 	mls	r4, r0, lr, r4
 8008460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8008464:	fb0e f90c 	mul.w	r9, lr, ip
 8008468:	45a1      	cmp	r9, r4
 800846a:	fa02 f201 	lsl.w	r2, r2, r1
 800846e:	d90a      	bls.n	8008486 <__udivmoddi4+0x1a6>
 8008470:	193c      	adds	r4, r7, r4
 8008472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8008476:	f080 8084 	bcs.w	8008582 <__udivmoddi4+0x2a2>
 800847a:	45a1      	cmp	r9, r4
 800847c:	f240 8081 	bls.w	8008582 <__udivmoddi4+0x2a2>
 8008480:	f1ae 0e02 	sub.w	lr, lr, #2
 8008484:	443c      	add	r4, r7
 8008486:	eba4 0409 	sub.w	r4, r4, r9
 800848a:	fa1f f983 	uxth.w	r9, r3
 800848e:	fbb4 f3f0 	udiv	r3, r4, r0
 8008492:	fb00 4413 	mls	r4, r0, r3, r4
 8008496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800849a:	fb03 fc0c 	mul.w	ip, r3, ip
 800849e:	45a4      	cmp	ip, r4
 80084a0:	d907      	bls.n	80084b2 <__udivmoddi4+0x1d2>
 80084a2:	193c      	adds	r4, r7, r4
 80084a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80084a8:	d267      	bcs.n	800857a <__udivmoddi4+0x29a>
 80084aa:	45a4      	cmp	ip, r4
 80084ac:	d965      	bls.n	800857a <__udivmoddi4+0x29a>
 80084ae:	3b02      	subs	r3, #2
 80084b0:	443c      	add	r4, r7
 80084b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80084b6:	fba0 9302 	umull	r9, r3, r0, r2
 80084ba:	eba4 040c 	sub.w	r4, r4, ip
 80084be:	429c      	cmp	r4, r3
 80084c0:	46ce      	mov	lr, r9
 80084c2:	469c      	mov	ip, r3
 80084c4:	d351      	bcc.n	800856a <__udivmoddi4+0x28a>
 80084c6:	d04e      	beq.n	8008566 <__udivmoddi4+0x286>
 80084c8:	b155      	cbz	r5, 80084e0 <__udivmoddi4+0x200>
 80084ca:	ebb8 030e 	subs.w	r3, r8, lr
 80084ce:	eb64 040c 	sbc.w	r4, r4, ip
 80084d2:	fa04 f606 	lsl.w	r6, r4, r6
 80084d6:	40cb      	lsrs	r3, r1
 80084d8:	431e      	orrs	r6, r3
 80084da:	40cc      	lsrs	r4, r1
 80084dc:	e9c5 6400 	strd	r6, r4, [r5]
 80084e0:	2100      	movs	r1, #0
 80084e2:	e750      	b.n	8008386 <__udivmoddi4+0xa6>
 80084e4:	f1c2 0320 	rsb	r3, r2, #32
 80084e8:	fa20 f103 	lsr.w	r1, r0, r3
 80084ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80084f0:	fa24 f303 	lsr.w	r3, r4, r3
 80084f4:	4094      	lsls	r4, r2
 80084f6:	430c      	orrs	r4, r1
 80084f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80084fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8008500:	fa1f f78c 	uxth.w	r7, ip
 8008504:	fbb3 f0f8 	udiv	r0, r3, r8
 8008508:	fb08 3110 	mls	r1, r8, r0, r3
 800850c:	0c23      	lsrs	r3, r4, #16
 800850e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008512:	fb00 f107 	mul.w	r1, r0, r7
 8008516:	4299      	cmp	r1, r3
 8008518:	d908      	bls.n	800852c <__udivmoddi4+0x24c>
 800851a:	eb1c 0303 	adds.w	r3, ip, r3
 800851e:	f100 36ff 	add.w	r6, r0, #4294967295
 8008522:	d22c      	bcs.n	800857e <__udivmoddi4+0x29e>
 8008524:	4299      	cmp	r1, r3
 8008526:	d92a      	bls.n	800857e <__udivmoddi4+0x29e>
 8008528:	3802      	subs	r0, #2
 800852a:	4463      	add	r3, ip
 800852c:	1a5b      	subs	r3, r3, r1
 800852e:	b2a4      	uxth	r4, r4
 8008530:	fbb3 f1f8 	udiv	r1, r3, r8
 8008534:	fb08 3311 	mls	r3, r8, r1, r3
 8008538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800853c:	fb01 f307 	mul.w	r3, r1, r7
 8008540:	42a3      	cmp	r3, r4
 8008542:	d908      	bls.n	8008556 <__udivmoddi4+0x276>
 8008544:	eb1c 0404 	adds.w	r4, ip, r4
 8008548:	f101 36ff 	add.w	r6, r1, #4294967295
 800854c:	d213      	bcs.n	8008576 <__udivmoddi4+0x296>
 800854e:	42a3      	cmp	r3, r4
 8008550:	d911      	bls.n	8008576 <__udivmoddi4+0x296>
 8008552:	3902      	subs	r1, #2
 8008554:	4464      	add	r4, ip
 8008556:	1ae4      	subs	r4, r4, r3
 8008558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800855c:	e739      	b.n	80083d2 <__udivmoddi4+0xf2>
 800855e:	4604      	mov	r4, r0
 8008560:	e6f0      	b.n	8008344 <__udivmoddi4+0x64>
 8008562:	4608      	mov	r0, r1
 8008564:	e706      	b.n	8008374 <__udivmoddi4+0x94>
 8008566:	45c8      	cmp	r8, r9
 8008568:	d2ae      	bcs.n	80084c8 <__udivmoddi4+0x1e8>
 800856a:	ebb9 0e02 	subs.w	lr, r9, r2
 800856e:	eb63 0c07 	sbc.w	ip, r3, r7
 8008572:	3801      	subs	r0, #1
 8008574:	e7a8      	b.n	80084c8 <__udivmoddi4+0x1e8>
 8008576:	4631      	mov	r1, r6
 8008578:	e7ed      	b.n	8008556 <__udivmoddi4+0x276>
 800857a:	4603      	mov	r3, r0
 800857c:	e799      	b.n	80084b2 <__udivmoddi4+0x1d2>
 800857e:	4630      	mov	r0, r6
 8008580:	e7d4      	b.n	800852c <__udivmoddi4+0x24c>
 8008582:	46d6      	mov	lr, sl
 8008584:	e77f      	b.n	8008486 <__udivmoddi4+0x1a6>
 8008586:	4463      	add	r3, ip
 8008588:	3802      	subs	r0, #2
 800858a:	e74d      	b.n	8008428 <__udivmoddi4+0x148>
 800858c:	4606      	mov	r6, r0
 800858e:	4623      	mov	r3, r4
 8008590:	4608      	mov	r0, r1
 8008592:	e70f      	b.n	80083b4 <__udivmoddi4+0xd4>
 8008594:	3e02      	subs	r6, #2
 8008596:	4463      	add	r3, ip
 8008598:	e730      	b.n	80083fc <__udivmoddi4+0x11c>
 800859a:	bf00      	nop

0800859c <__aeabi_idiv0>:
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop

080085a0 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80085a0:	b590      	push	{r4, r7, lr}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af02      	add	r7, sp, #8
 80085a6:	4604      	mov	r4, r0
 80085a8:	4608      	mov	r0, r1
 80085aa:	4611      	mov	r1, r2
 80085ac:	461a      	mov	r2, r3
 80085ae:	4623      	mov	r3, r4
 80085b0:	80fb      	strh	r3, [r7, #6]
 80085b2:	4603      	mov	r3, r0
 80085b4:	80bb      	strh	r3, [r7, #4]
 80085b6:	460b      	mov	r3, r1
 80085b8:	807b      	strh	r3, [r7, #2]
 80085ba:	4613      	mov	r3, r2
 80085bc:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 80085be:	88f8      	ldrh	r0, [r7, #6]
 80085c0:	88b9      	ldrh	r1, [r7, #4]
 80085c2:	887a      	ldrh	r2, [r7, #2]
 80085c4:	883c      	ldrh	r4, [r7, #0]
 80085c6:	8b3b      	ldrh	r3, [r7, #24]
 80085c8:	9300      	str	r3, [sp, #0]
 80085ca:	4623      	mov	r3, r4
 80085cc:	f000 fa88 	bl	8008ae0 <ST7735_FillRectangle>
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd90      	pop	{r4, r7, pc}

080085d8 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af02      	add	r7, sp, #8
 80085de:	4603      	mov	r3, r0
 80085e0:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80085e2:	4b08      	ldr	r3, [pc, #32]	@ (8008604 <fillScreen+0x2c>)
 80085e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80085e8:	4b07      	ldr	r3, [pc, #28]	@ (8008608 <fillScreen+0x30>)
 80085ea:	f9b3 1000 	ldrsh.w	r1, [r3]
 80085ee:	88fb      	ldrh	r3, [r7, #6]
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	460b      	mov	r3, r1
 80085f4:	2100      	movs	r1, #0
 80085f6:	2000      	movs	r0, #0
 80085f8:	f7ff ffd2 	bl	80085a0 <fillRect>
}
 80085fc:	bf00      	nop
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	200000bc 	.word	0x200000bc
 8008608:	200000be 	.word	0x200000be

0800860c <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 800860c:	b580      	push	{r7, lr}
 800860e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8008610:	2200      	movs	r2, #0
 8008612:	2102      	movs	r1, #2
 8008614:	4802      	ldr	r0, [pc, #8]	@ (8008620 <ST7735_Select+0x14>)
 8008616:	f001 fc0d 	bl	8009e34 <HAL_GPIO_WritePin>
}
 800861a:	bf00      	nop
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	40020000 	.word	0x40020000

08008624 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8008628:	2201      	movs	r2, #1
 800862a:	2102      	movs	r1, #2
 800862c:	4802      	ldr	r0, [pc, #8]	@ (8008638 <ST7735_Unselect+0x14>)
 800862e:	f001 fc01 	bl	8009e34 <HAL_GPIO_WritePin>
}
 8008632:	bf00      	nop
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	40020000 	.word	0x40020000

0800863c <ST7735_Reset>:

void ST7735_Reset()
{
 800863c:	b580      	push	{r7, lr}
 800863e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8008640:	2200      	movs	r2, #0
 8008642:	2110      	movs	r1, #16
 8008644:	4806      	ldr	r0, [pc, #24]	@ (8008660 <ST7735_Reset+0x24>)
 8008646:	f001 fbf5 	bl	8009e34 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800864a:	2005      	movs	r0, #5
 800864c:	f001 f87e 	bl	800974c <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8008650:	2201      	movs	r2, #1
 8008652:	2110      	movs	r1, #16
 8008654:	4802      	ldr	r0, [pc, #8]	@ (8008660 <ST7735_Reset+0x24>)
 8008656:	f001 fbed 	bl	8009e34 <HAL_GPIO_WritePin>
}
 800865a:	bf00      	nop
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	40020000 	.word	0x40020000

08008664 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	4603      	mov	r3, r0
 800866c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800866e:	2200      	movs	r2, #0
 8008670:	2110      	movs	r1, #16
 8008672:	4807      	ldr	r0, [pc, #28]	@ (8008690 <ST7735_WriteCommand+0x2c>)
 8008674:	f001 fbde 	bl	8009e34 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8008678:	1df9      	adds	r1, r7, #7
 800867a:	f04f 33ff 	mov.w	r3, #4294967295
 800867e:	2201      	movs	r2, #1
 8008680:	4804      	ldr	r0, [pc, #16]	@ (8008694 <ST7735_WriteCommand+0x30>)
 8008682:	f002 fa2c 	bl	800aade <HAL_SPI_Transmit>
}
 8008686:	bf00      	nop
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	40020800 	.word	0x40020800
 8008694:	200000c8 	.word	0x200000c8

08008698 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80086a2:	2201      	movs	r2, #1
 80086a4:	2110      	movs	r1, #16
 80086a6:	4807      	ldr	r0, [pc, #28]	@ (80086c4 <ST7735_WriteData+0x2c>)
 80086a8:	f001 fbc4 	bl	8009e34 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	f04f 33ff 	mov.w	r3, #4294967295
 80086b4:	6879      	ldr	r1, [r7, #4]
 80086b6:	4804      	ldr	r0, [pc, #16]	@ (80086c8 <ST7735_WriteData+0x30>)
 80086b8:	f002 fa11 	bl	800aade <HAL_SPI_Transmit>
}
 80086bc:	bf00      	nop
 80086be:	3708      	adds	r7, #8
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	40020800 	.word	0x40020800
 80086c8:	200000c8 	.word	0x200000c8

080086cc <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	1c5a      	adds	r2, r3, #1
 80086d8:	607a      	str	r2, [r7, #4]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80086de:	e034      	b.n	800874a <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	1c5a      	adds	r2, r3, #1
 80086e4:	607a      	str	r2, [r7, #4]
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80086ea:	7afb      	ldrb	r3, [r7, #11]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7ff ffb9 	bl	8008664 <ST7735_WriteCommand>

        numArgs = *addr++;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	1c5a      	adds	r2, r3, #1
 80086f6:	607a      	str	r2, [r7, #4]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80086fc:	7abb      	ldrb	r3, [r7, #10]
 80086fe:	b29b      	uxth	r3, r3
 8008700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008704:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8008706:	7abb      	ldrb	r3, [r7, #10]
 8008708:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800870c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800870e:	7abb      	ldrb	r3, [r7, #10]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d008      	beq.n	8008726 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8008714:	7abb      	ldrb	r3, [r7, #10]
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7ff ffbd 	bl	8008698 <ST7735_WriteData>
            addr += numArgs;
 800871e:	7abb      	ldrb	r3, [r7, #10]
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	4413      	add	r3, r2
 8008724:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8008726:	89bb      	ldrh	r3, [r7, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00e      	beq.n	800874a <DisplayInit+0x7e>
            ms = *addr++;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	1c5a      	adds	r2, r3, #1
 8008730:	607a      	str	r2, [r7, #4]
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8008736:	89bb      	ldrh	r3, [r7, #12]
 8008738:	2bff      	cmp	r3, #255	@ 0xff
 800873a:	d102      	bne.n	8008742 <DisplayInit+0x76>
 800873c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8008740:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8008742:	89bb      	ldrh	r3, [r7, #12]
 8008744:	4618      	mov	r0, r3
 8008746:	f001 f801 	bl	800974c <HAL_Delay>
    while(numCommands--) {
 800874a:	7bfb      	ldrb	r3, [r7, #15]
 800874c:	1e5a      	subs	r2, r3, #1
 800874e:	73fa      	strb	r2, [r7, #15]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1c5      	bne.n	80086e0 <DisplayInit+0x14>
        }
    }
}
 8008754:	bf00      	nop
 8008756:	bf00      	nop
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
	...

08008760 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8008760:	b590      	push	{r4, r7, lr}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	4604      	mov	r4, r0
 8008768:	4608      	mov	r0, r1
 800876a:	4611      	mov	r1, r2
 800876c:	461a      	mov	r2, r3
 800876e:	4623      	mov	r3, r4
 8008770:	71fb      	strb	r3, [r7, #7]
 8008772:	4603      	mov	r3, r0
 8008774:	71bb      	strb	r3, [r7, #6]
 8008776:	460b      	mov	r3, r1
 8008778:	717b      	strb	r3, [r7, #5]
 800877a:	4613      	mov	r3, r2
 800877c:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800877e:	202a      	movs	r0, #42	@ 0x2a
 8008780:	f7ff ff70 	bl	8008664 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8008784:	2300      	movs	r3, #0
 8008786:	733b      	strb	r3, [r7, #12]
 8008788:	4b17      	ldr	r3, [pc, #92]	@ (80087e8 <ST7735_SetAddressWindow+0x88>)
 800878a:	781a      	ldrb	r2, [r3, #0]
 800878c:	79fb      	ldrb	r3, [r7, #7]
 800878e:	4413      	add	r3, r2
 8008790:	b2db      	uxtb	r3, r3
 8008792:	737b      	strb	r3, [r7, #13]
 8008794:	2300      	movs	r3, #0
 8008796:	73bb      	strb	r3, [r7, #14]
 8008798:	4b13      	ldr	r3, [pc, #76]	@ (80087e8 <ST7735_SetAddressWindow+0x88>)
 800879a:	781a      	ldrb	r2, [r3, #0]
 800879c:	797b      	ldrb	r3, [r7, #5]
 800879e:	4413      	add	r3, r2
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80087a4:	f107 030c 	add.w	r3, r7, #12
 80087a8:	2104      	movs	r1, #4
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7ff ff74 	bl	8008698 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80087b0:	202b      	movs	r0, #43	@ 0x2b
 80087b2:	f7ff ff57 	bl	8008664 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80087b6:	4b0d      	ldr	r3, [pc, #52]	@ (80087ec <ST7735_SetAddressWindow+0x8c>)
 80087b8:	781a      	ldrb	r2, [r3, #0]
 80087ba:	79bb      	ldrb	r3, [r7, #6]
 80087bc:	4413      	add	r3, r2
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 80087c2:	4b0a      	ldr	r3, [pc, #40]	@ (80087ec <ST7735_SetAddressWindow+0x8c>)
 80087c4:	781a      	ldrb	r2, [r3, #0]
 80087c6:	793b      	ldrb	r3, [r7, #4]
 80087c8:	4413      	add	r3, r2
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80087ce:	f107 030c 	add.w	r3, r7, #12
 80087d2:	2104      	movs	r1, #4
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7ff ff5f 	bl	8008698 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80087da:	202c      	movs	r0, #44	@ 0x2c
 80087dc:	f7ff ff42 	bl	8008664 <ST7735_WriteCommand>
}
 80087e0:	bf00      	nop
 80087e2:	3714      	adds	r7, #20
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd90      	pop	{r4, r7, pc}
 80087e8:	200000c3 	.word	0x200000c3
 80087ec:	200000c4 	.word	0x200000c4

080087f0 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	4603      	mov	r3, r0
 80087f8:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 80087fa:	f7ff ff07 	bl	800860c <ST7735_Select>
    ST7735_Reset();
 80087fe:	f7ff ff1d 	bl	800863c <ST7735_Reset>
    DisplayInit(init_cmds1);
 8008802:	480c      	ldr	r0, [pc, #48]	@ (8008834 <ST7735_Init+0x44>)
 8008804:	f7ff ff62 	bl	80086cc <DisplayInit>
    DisplayInit(init_cmds2);
 8008808:	480b      	ldr	r0, [pc, #44]	@ (8008838 <ST7735_Init+0x48>)
 800880a:	f7ff ff5f 	bl	80086cc <DisplayInit>
    DisplayInit(init_cmds3);
 800880e:	480b      	ldr	r0, [pc, #44]	@ (800883c <ST7735_Init+0x4c>)
 8008810:	f7ff ff5c 	bl	80086cc <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8008814:	4b0a      	ldr	r3, [pc, #40]	@ (8008840 <ST7735_Init+0x50>)
 8008816:	2200      	movs	r2, #0
 8008818:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800881a:	4b0a      	ldr	r3, [pc, #40]	@ (8008844 <ST7735_Init+0x54>)
 800881c:	2200      	movs	r2, #0
 800881e:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8008820:	79fb      	ldrb	r3, [r7, #7]
 8008822:	4618      	mov	r0, r3
 8008824:	f000 f810 	bl	8008848 <ST7735_SetRotation>
    ST7735_Unselect();
 8008828:	f7ff fefc 	bl	8008624 <ST7735_Unselect>

}
 800882c:	bf00      	nop
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	0800cfa8 	.word	0x0800cfa8
 8008838:	0800cfe0 	.word	0x0800cfe0
 800883c:	0800cff0 	.word	0x0800cff0
 8008840:	200000c1 	.word	0x200000c1
 8008844:	200000c2 	.word	0x200000c2

08008848 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	4603      	mov	r3, r0
 8008850:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8008852:	2300      	movs	r3, #0
 8008854:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8008856:	79fb      	ldrb	r3, [r7, #7]
 8008858:	f003 0303 	and.w	r3, r3, #3
 800885c:	b2da      	uxtb	r2, r3
 800885e:	4b33      	ldr	r3, [pc, #204]	@ (800892c <ST7735_SetRotation+0xe4>)
 8008860:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8008862:	4b32      	ldr	r3, [pc, #200]	@ (800892c <ST7735_SetRotation+0xe4>)
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	2b03      	cmp	r3, #3
 8008868:	d84e      	bhi.n	8008908 <ST7735_SetRotation+0xc0>
 800886a:	a201      	add	r2, pc, #4	@ (adr r2, 8008870 <ST7735_SetRotation+0x28>)
 800886c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008870:	08008881 	.word	0x08008881
 8008874:	080088a3 	.word	0x080088a3
 8008878:	080088c5 	.word	0x080088c5
 800887c:	080088e7 	.word	0x080088e7
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8008880:	23c0      	movs	r3, #192	@ 0xc0
 8008882:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8008884:	4b2a      	ldr	r3, [pc, #168]	@ (8008930 <ST7735_SetRotation+0xe8>)
 8008886:	22a0      	movs	r2, #160	@ 0xa0
 8008888:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800888a:	4b2a      	ldr	r3, [pc, #168]	@ (8008934 <ST7735_SetRotation+0xec>)
 800888c:	2280      	movs	r2, #128	@ 0x80
 800888e:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8008890:	4b29      	ldr	r3, [pc, #164]	@ (8008938 <ST7735_SetRotation+0xf0>)
 8008892:	781a      	ldrb	r2, [r3, #0]
 8008894:	4b29      	ldr	r3, [pc, #164]	@ (800893c <ST7735_SetRotation+0xf4>)
 8008896:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8008898:	4b29      	ldr	r3, [pc, #164]	@ (8008940 <ST7735_SetRotation+0xf8>)
 800889a:	781a      	ldrb	r2, [r3, #0]
 800889c:	4b29      	ldr	r3, [pc, #164]	@ (8008944 <ST7735_SetRotation+0xfc>)
 800889e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80088a0:	e032      	b.n	8008908 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80088a2:	23a0      	movs	r3, #160	@ 0xa0
 80088a4:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80088a6:	4b23      	ldr	r3, [pc, #140]	@ (8008934 <ST7735_SetRotation+0xec>)
 80088a8:	22a0      	movs	r2, #160	@ 0xa0
 80088aa:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80088ac:	4b20      	ldr	r3, [pc, #128]	@ (8008930 <ST7735_SetRotation+0xe8>)
 80088ae:	2280      	movs	r2, #128	@ 0x80
 80088b0:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80088b2:	4b21      	ldr	r3, [pc, #132]	@ (8008938 <ST7735_SetRotation+0xf0>)
 80088b4:	781a      	ldrb	r2, [r3, #0]
 80088b6:	4b23      	ldr	r3, [pc, #140]	@ (8008944 <ST7735_SetRotation+0xfc>)
 80088b8:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80088ba:	4b21      	ldr	r3, [pc, #132]	@ (8008940 <ST7735_SetRotation+0xf8>)
 80088bc:	781a      	ldrb	r2, [r3, #0]
 80088be:	4b1f      	ldr	r3, [pc, #124]	@ (800893c <ST7735_SetRotation+0xf4>)
 80088c0:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80088c2:	e021      	b.n	8008908 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80088c4:	2300      	movs	r3, #0
 80088c6:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80088c8:	4b19      	ldr	r3, [pc, #100]	@ (8008930 <ST7735_SetRotation+0xe8>)
 80088ca:	22a0      	movs	r2, #160	@ 0xa0
 80088cc:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80088ce:	4b19      	ldr	r3, [pc, #100]	@ (8008934 <ST7735_SetRotation+0xec>)
 80088d0:	2280      	movs	r2, #128	@ 0x80
 80088d2:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80088d4:	4b18      	ldr	r3, [pc, #96]	@ (8008938 <ST7735_SetRotation+0xf0>)
 80088d6:	781a      	ldrb	r2, [r3, #0]
 80088d8:	4b18      	ldr	r3, [pc, #96]	@ (800893c <ST7735_SetRotation+0xf4>)
 80088da:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80088dc:	4b18      	ldr	r3, [pc, #96]	@ (8008940 <ST7735_SetRotation+0xf8>)
 80088de:	781a      	ldrb	r2, [r3, #0]
 80088e0:	4b18      	ldr	r3, [pc, #96]	@ (8008944 <ST7735_SetRotation+0xfc>)
 80088e2:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80088e4:	e010      	b.n	8008908 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80088e6:	2360      	movs	r3, #96	@ 0x60
 80088e8:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80088ea:	4b12      	ldr	r3, [pc, #72]	@ (8008934 <ST7735_SetRotation+0xec>)
 80088ec:	22a0      	movs	r2, #160	@ 0xa0
 80088ee:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80088f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008930 <ST7735_SetRotation+0xe8>)
 80088f2:	2280      	movs	r2, #128	@ 0x80
 80088f4:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80088f6:	4b10      	ldr	r3, [pc, #64]	@ (8008938 <ST7735_SetRotation+0xf0>)
 80088f8:	781a      	ldrb	r2, [r3, #0]
 80088fa:	4b12      	ldr	r3, [pc, #72]	@ (8008944 <ST7735_SetRotation+0xfc>)
 80088fc:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80088fe:	4b10      	ldr	r3, [pc, #64]	@ (8008940 <ST7735_SetRotation+0xf8>)
 8008900:	781a      	ldrb	r2, [r3, #0]
 8008902:	4b0e      	ldr	r3, [pc, #56]	@ (800893c <ST7735_SetRotation+0xf4>)
 8008904:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8008906:	bf00      	nop
  }
  ST7735_Select();
 8008908:	f7ff fe80 	bl	800860c <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 800890c:	2036      	movs	r0, #54	@ 0x36
 800890e:	f7ff fea9 	bl	8008664 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8008912:	f107 030f 	add.w	r3, r7, #15
 8008916:	2101      	movs	r1, #1
 8008918:	4618      	mov	r0, r3
 800891a:	f7ff febd 	bl	8008698 <ST7735_WriteData>
  ST7735_Unselect();
 800891e:	f7ff fe81 	bl	8008624 <ST7735_Unselect>
}
 8008922:	bf00      	nop
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	200000c0 	.word	0x200000c0
 8008930:	200000be 	.word	0x200000be
 8008934:	200000bc 	.word	0x200000bc
 8008938:	200000c1 	.word	0x200000c1
 800893c:	200000c3 	.word	0x200000c3
 8008940:	200000c2 	.word	0x200000c2
 8008944:	200000c4 	.word	0x200000c4

08008948 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8008948:	b082      	sub	sp, #8
 800894a:	b590      	push	{r4, r7, lr}
 800894c:	b089      	sub	sp, #36	@ 0x24
 800894e:	af00      	add	r7, sp, #0
 8008950:	637b      	str	r3, [r7, #52]	@ 0x34
 8008952:	4603      	mov	r3, r0
 8008954:	80fb      	strh	r3, [r7, #6]
 8008956:	460b      	mov	r3, r1
 8008958:	80bb      	strh	r3, [r7, #4]
 800895a:	4613      	mov	r3, r2
 800895c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800895e:	88fb      	ldrh	r3, [r7, #6]
 8008960:	b2d8      	uxtb	r0, r3
 8008962:	88bb      	ldrh	r3, [r7, #4]
 8008964:	b2d9      	uxtb	r1, r3
 8008966:	88fb      	ldrh	r3, [r7, #6]
 8008968:	b2da      	uxtb	r2, r3
 800896a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800896e:	4413      	add	r3, r2
 8008970:	b2db      	uxtb	r3, r3
 8008972:	3b01      	subs	r3, #1
 8008974:	b2dc      	uxtb	r4, r3
 8008976:	88bb      	ldrh	r3, [r7, #4]
 8008978:	b2da      	uxtb	r2, r3
 800897a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800897e:	4413      	add	r3, r2
 8008980:	b2db      	uxtb	r3, r3
 8008982:	3b01      	subs	r3, #1
 8008984:	b2db      	uxtb	r3, r3
 8008986:	4622      	mov	r2, r4
 8008988:	f7ff feea 	bl	8008760 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800898c:	2300      	movs	r3, #0
 800898e:	61fb      	str	r3, [r7, #28]
 8008990:	e043      	b.n	8008a1a <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8008992:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008994:	78fb      	ldrb	r3, [r7, #3]
 8008996:	3b20      	subs	r3, #32
 8008998:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 800899c:	fb01 f303 	mul.w	r3, r1, r3
 80089a0:	4619      	mov	r1, r3
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	440b      	add	r3, r1
 80089a6:	005b      	lsls	r3, r3, #1
 80089a8:	4413      	add	r3, r2
 80089aa:	881b      	ldrh	r3, [r3, #0]
 80089ac:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80089ae:	2300      	movs	r3, #0
 80089b0:	61bb      	str	r3, [r7, #24]
 80089b2:	e029      	b.n	8008a08 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	fa02 f303 	lsl.w	r3, r2, r3
 80089bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00e      	beq.n	80089e2 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80089c4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80089c6:	0a1b      	lsrs	r3, r3, #8
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	743b      	strb	r3, [r7, #16]
 80089ce:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80089d4:	f107 0310 	add.w	r3, r7, #16
 80089d8:	2102      	movs	r1, #2
 80089da:	4618      	mov	r0, r3
 80089dc:	f7ff fe5c 	bl	8008698 <ST7735_WriteData>
 80089e0:	e00f      	b.n	8008a02 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80089e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80089e6:	0a1b      	lsrs	r3, r3, #8
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	733b      	strb	r3, [r7, #12]
 80089ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80089f6:	f107 030c 	add.w	r3, r7, #12
 80089fa:	2102      	movs	r1, #2
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7ff fe4b 	bl	8008698 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	3301      	adds	r3, #1
 8008a06:	61bb      	str	r3, [r7, #24]
 8008a08:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d3cf      	bcc.n	80089b4 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	3301      	adds	r3, #1
 8008a18:	61fb      	str	r3, [r7, #28]
 8008a1a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8008a1e:	461a      	mov	r2, r3
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d3b5      	bcc.n	8008992 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8008a26:	bf00      	nop
 8008a28:	bf00      	nop
 8008a2a:	3724      	adds	r7, #36	@ 0x24
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8008a32:	b002      	add	sp, #8
 8008a34:	4770      	bx	lr
	...

08008a38 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8008a38:	b082      	sub	sp, #8
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b086      	sub	sp, #24
 8008a3e:	af04      	add	r7, sp, #16
 8008a40:	603a      	str	r2, [r7, #0]
 8008a42:	617b      	str	r3, [r7, #20]
 8008a44:	4603      	mov	r3, r0
 8008a46:	80fb      	strh	r3, [r7, #6]
 8008a48:	460b      	mov	r3, r1
 8008a4a:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8008a4c:	f7ff fdde 	bl	800860c <ST7735_Select>

    while(*str) {
 8008a50:	e033      	b.n	8008aba <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8008a52:	88fb      	ldrh	r3, [r7, #6]
 8008a54:	7d3a      	ldrb	r2, [r7, #20]
 8008a56:	4413      	add	r3, r2
 8008a58:	4a1f      	ldr	r2, [pc, #124]	@ (8008ad8 <ST7735_WriteString+0xa0>)
 8008a5a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	db16      	blt.n	8008a90 <ST7735_WriteString+0x58>
            x = 0;
 8008a62:	2300      	movs	r3, #0
 8008a64:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8008a66:	7d7b      	ldrb	r3, [r7, #21]
 8008a68:	461a      	mov	r2, r3
 8008a6a:	88bb      	ldrh	r3, [r7, #4]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8008a70:	88bb      	ldrh	r3, [r7, #4]
 8008a72:	7d7a      	ldrb	r2, [r7, #21]
 8008a74:	4413      	add	r3, r2
 8008a76:	4a19      	ldr	r2, [pc, #100]	@ (8008adc <ST7735_WriteString+0xa4>)
 8008a78:	f9b2 2000 	ldrsh.w	r2, [r2]
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	da21      	bge.n	8008ac4 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	2b20      	cmp	r3, #32
 8008a86:	d103      	bne.n	8008a90 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	603b      	str	r3, [r7, #0]
                continue;
 8008a8e:	e014      	b.n	8008aba <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	781a      	ldrb	r2, [r3, #0]
 8008a94:	88b9      	ldrh	r1, [r7, #4]
 8008a96:	88f8      	ldrh	r0, [r7, #6]
 8008a98:	8c3b      	ldrh	r3, [r7, #32]
 8008a9a:	9302      	str	r3, [sp, #8]
 8008a9c:	8bbb      	ldrh	r3, [r7, #28]
 8008a9e:	9301      	str	r3, [sp, #4]
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	f7ff ff4f 	bl	8008948 <ST7735_WriteChar>
        x += font.width;
 8008aaa:	7d3b      	ldrb	r3, [r7, #20]
 8008aac:	461a      	mov	r2, r3
 8008aae:	88fb      	ldrh	r3, [r7, #6]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	80fb      	strh	r3, [r7, #6]
        str++;
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	603b      	str	r3, [r7, #0]
    while(*str) {
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1c7      	bne.n	8008a52 <ST7735_WriteString+0x1a>
 8008ac2:	e000      	b.n	8008ac6 <ST7735_WriteString+0x8e>
                break;
 8008ac4:	bf00      	nop
    }

    ST7735_Unselect();
 8008ac6:	f7ff fdad 	bl	8008624 <ST7735_Unselect>
}
 8008aca:	bf00      	nop
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ad4:	b002      	add	sp, #8
 8008ad6:	4770      	bx	lr
 8008ad8:	200000bc 	.word	0x200000bc
 8008adc:	200000be 	.word	0x200000be

08008ae0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8008ae0:	b590      	push	{r4, r7, lr}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	4608      	mov	r0, r1
 8008aea:	4611      	mov	r1, r2
 8008aec:	461a      	mov	r2, r3
 8008aee:	4623      	mov	r3, r4
 8008af0:	80fb      	strh	r3, [r7, #6]
 8008af2:	4603      	mov	r3, r0
 8008af4:	80bb      	strh	r3, [r7, #4]
 8008af6:	460b      	mov	r3, r1
 8008af8:	807b      	strh	r3, [r7, #2]
 8008afa:	4613      	mov	r3, r2
 8008afc:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8008afe:	88fb      	ldrh	r3, [r7, #6]
 8008b00:	4a37      	ldr	r2, [pc, #220]	@ (8008be0 <ST7735_FillRectangle+0x100>)
 8008b02:	f9b2 2000 	ldrsh.w	r2, [r2]
 8008b06:	4293      	cmp	r3, r2
 8008b08:	da66      	bge.n	8008bd8 <ST7735_FillRectangle+0xf8>
 8008b0a:	88bb      	ldrh	r3, [r7, #4]
 8008b0c:	4a35      	ldr	r2, [pc, #212]	@ (8008be4 <ST7735_FillRectangle+0x104>)
 8008b0e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8008b12:	4293      	cmp	r3, r2
 8008b14:	da60      	bge.n	8008bd8 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 8008b16:	88fa      	ldrh	r2, [r7, #6]
 8008b18:	887b      	ldrh	r3, [r7, #2]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	4a30      	ldr	r2, [pc, #192]	@ (8008be0 <ST7735_FillRectangle+0x100>)
 8008b1e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8008b22:	4293      	cmp	r3, r2
 8008b24:	dd06      	ble.n	8008b34 <ST7735_FillRectangle+0x54>
 8008b26:	4b2e      	ldr	r3, [pc, #184]	@ (8008be0 <ST7735_FillRectangle+0x100>)
 8008b28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b2c:	b29a      	uxth	r2, r3
 8008b2e:	88fb      	ldrh	r3, [r7, #6]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8008b34:	88ba      	ldrh	r2, [r7, #4]
 8008b36:	883b      	ldrh	r3, [r7, #0]
 8008b38:	4413      	add	r3, r2
 8008b3a:	4a2a      	ldr	r2, [pc, #168]	@ (8008be4 <ST7735_FillRectangle+0x104>)
 8008b3c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8008b40:	4293      	cmp	r3, r2
 8008b42:	dd06      	ble.n	8008b52 <ST7735_FillRectangle+0x72>
 8008b44:	4b27      	ldr	r3, [pc, #156]	@ (8008be4 <ST7735_FillRectangle+0x104>)
 8008b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	88bb      	ldrh	r3, [r7, #4]
 8008b4e:	1ad3      	subs	r3, r2, r3
 8008b50:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8008b52:	f7ff fd5b 	bl	800860c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8008b56:	88fb      	ldrh	r3, [r7, #6]
 8008b58:	b2d8      	uxtb	r0, r3
 8008b5a:	88bb      	ldrh	r3, [r7, #4]
 8008b5c:	b2d9      	uxtb	r1, r3
 8008b5e:	88fb      	ldrh	r3, [r7, #6]
 8008b60:	b2da      	uxtb	r2, r3
 8008b62:	887b      	ldrh	r3, [r7, #2]
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	4413      	add	r3, r2
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	b2dc      	uxtb	r4, r3
 8008b6e:	88bb      	ldrh	r3, [r7, #4]
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	883b      	ldrh	r3, [r7, #0]
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	4413      	add	r3, r2
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	4622      	mov	r2, r4
 8008b80:	f7ff fdee 	bl	8008760 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8008b84:	8c3b      	ldrh	r3, [r7, #32]
 8008b86:	0a1b      	lsrs	r3, r3, #8
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	733b      	strb	r3, [r7, #12]
 8008b8e:	8c3b      	ldrh	r3, [r7, #32]
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8008b94:	2201      	movs	r2, #1
 8008b96:	2110      	movs	r1, #16
 8008b98:	4813      	ldr	r0, [pc, #76]	@ (8008be8 <ST7735_FillRectangle+0x108>)
 8008b9a:	f001 f94b 	bl	8009e34 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8008b9e:	883b      	ldrh	r3, [r7, #0]
 8008ba0:	80bb      	strh	r3, [r7, #4]
 8008ba2:	e013      	b.n	8008bcc <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 8008ba4:	887b      	ldrh	r3, [r7, #2]
 8008ba6:	80fb      	strh	r3, [r7, #6]
 8008ba8:	e00a      	b.n	8008bc0 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8008baa:	f107 010c 	add.w	r1, r7, #12
 8008bae:	f04f 33ff 	mov.w	r3, #4294967295
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	480d      	ldr	r0, [pc, #52]	@ (8008bec <ST7735_FillRectangle+0x10c>)
 8008bb6:	f001 ff92 	bl	800aade <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8008bba:	88fb      	ldrh	r3, [r7, #6]
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	80fb      	strh	r3, [r7, #6]
 8008bc0:	88fb      	ldrh	r3, [r7, #6]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1f1      	bne.n	8008baa <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 8008bc6:	88bb      	ldrh	r3, [r7, #4]
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	80bb      	strh	r3, [r7, #4]
 8008bcc:	88bb      	ldrh	r3, [r7, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1e8      	bne.n	8008ba4 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 8008bd2:	f7ff fd27 	bl	8008624 <ST7735_Unselect>
 8008bd6:	e000      	b.n	8008bda <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 8008bd8:	bf00      	nop
}
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd90      	pop	{r4, r7, pc}
 8008be0:	200000bc 	.word	0x200000bc
 8008be4:	200000be 	.word	0x200000be
 8008be8:	40020800 	.word	0x40020800
 8008bec:	200000c8 	.word	0x200000c8

08008bf0 <scan_keypad>:
uint16_t rowPins[4]      = {KEYPAD_R1_Pin, KEYPAD_R2_Pin, KEYPAD_R3_Pin, KEYPAD_R4_Pin};

GPIO_TypeDef* colPorts[4] = {KEYPAD_C1_GPIO_Port, KEYPAD_C2_GPIO_Port, KEYPAD_C3_GPIO_Port, KEYPAD_C4_GPIO_Port};
uint16_t colPins[4]       = {KEYPAD_C1_Pin, KEYPAD_C2_Pin, KEYPAD_C3_Pin, KEYPAD_C4_Pin};

char scan_keypad(void) {
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
    for (int row = 0; row < 4; row++) {
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	60fb      	str	r3, [r7, #12]
 8008bfa:	e056      	b.n	8008caa <scan_keypad+0xba>
        // Set all rows HIGH
        for (int i = 0; i < 4; i++) {
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	60bb      	str	r3, [r7, #8]
 8008c00:	e00e      	b.n	8008c20 <scan_keypad+0x30>
            HAL_GPIO_WritePin(rowPorts[i], rowPins[i], GPIO_PIN_SET);
 8008c02:	4a2e      	ldr	r2, [pc, #184]	@ (8008cbc <scan_keypad+0xcc>)
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008c0a:	4a2d      	ldr	r2, [pc, #180]	@ (8008cc0 <scan_keypad+0xd0>)
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c12:	2201      	movs	r2, #1
 8008c14:	4619      	mov	r1, r3
 8008c16:	f001 f90d 	bl	8009e34 <HAL_GPIO_WritePin>
        for (int i = 0; i < 4; i++) {
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	60bb      	str	r3, [r7, #8]
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	2b03      	cmp	r3, #3
 8008c24:	dded      	ble.n	8008c02 <scan_keypad+0x12>
        }

        // Set current row LOW
        HAL_GPIO_WritePin(rowPorts[row], rowPins[row], GPIO_PIN_RESET);
 8008c26:	4a25      	ldr	r2, [pc, #148]	@ (8008cbc <scan_keypad+0xcc>)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008c2e:	4a24      	ldr	r2, [pc, #144]	@ (8008cc0 <scan_keypad+0xd0>)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c36:	2200      	movs	r2, #0
 8008c38:	4619      	mov	r1, r3
 8008c3a:	f001 f8fb 	bl	8009e34 <HAL_GPIO_WritePin>

        // Check columns
        for (int col = 0; col < 4; col++) {
 8008c3e:	2300      	movs	r3, #0
 8008c40:	607b      	str	r3, [r7, #4]
 8008c42:	e02c      	b.n	8008c9e <scan_keypad+0xae>
            if (HAL_GPIO_ReadPin(colPorts[col], colPins[col]) == GPIO_PIN_RESET) {
 8008c44:	4a1f      	ldr	r2, [pc, #124]	@ (8008cc4 <scan_keypad+0xd4>)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008c4c:	491e      	ldr	r1, [pc, #120]	@ (8008cc8 <scan_keypad+0xd8>)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008c54:	4619      	mov	r1, r3
 8008c56:	4610      	mov	r0, r2
 8008c58:	f001 f8d4 	bl	8009e04 <HAL_GPIO_ReadPin>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d11a      	bne.n	8008c98 <scan_keypad+0xa8>
                HAL_Delay(20);  // Debounce
 8008c62:	2014      	movs	r0, #20
 8008c64:	f000 fd72 	bl	800974c <HAL_Delay>
                while (HAL_GPIO_ReadPin(colPorts[col], colPins[col]) == GPIO_PIN_RESET);
 8008c68:	bf00      	nop
 8008c6a:	4a16      	ldr	r2, [pc, #88]	@ (8008cc4 <scan_keypad+0xd4>)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008c72:	4915      	ldr	r1, [pc, #84]	@ (8008cc8 <scan_keypad+0xd8>)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	4610      	mov	r0, r2
 8008c7e:	f001 f8c1 	bl	8009e04 <HAL_GPIO_ReadPin>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d0f0      	beq.n	8008c6a <scan_keypad+0x7a>
                return keymap[row][col];
 8008c88:	4a10      	ldr	r2, [pc, #64]	@ (8008ccc <scan_keypad+0xdc>)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	441a      	add	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4413      	add	r3, r2
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	e00c      	b.n	8008cb2 <scan_keypad+0xc2>
        for (int col = 0; col < 4; col++) {
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	607b      	str	r3, [r7, #4]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	ddcf      	ble.n	8008c44 <scan_keypad+0x54>
    for (int row = 0; row < 4; row++) {
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	60fb      	str	r3, [r7, #12]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2b03      	cmp	r3, #3
 8008cae:	dda5      	ble.n	8008bfc <scan_keypad+0xc>
            }
        }
    }
    return '\0'; // No key pressed
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	20000008 	.word	0x20000008
 8008cc0:	20000018 	.word	0x20000018
 8008cc4:	20000020 	.word	0x20000020
 8008cc8:	20000030 	.word	0x20000030
 8008ccc:	0800e368 	.word	0x0800e368

08008cd0 <JumpToBootloader>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void JumpToBootloader(uint32_t boot_start_address)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b086      	sub	sp, #24
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
	void (*boot_reset_handler)(void);
	uint32_t msp_value = *(volatile uint32_t*)boot_start_address;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	617b      	str	r3, [r7, #20]
	uint32_t reset_handler_addr = *(volatile uint32_t*)(boot_start_address + 4);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	3304      	adds	r3, #4
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	613b      	str	r3, [r7, #16]
	printf("boot reset handler addr: 0x%08lx\n", reset_handler_addr);
 8008ce6:	6939      	ldr	r1, [r7, #16]
 8008ce8:	4809      	ldr	r0, [pc, #36]	@ (8008d10 <JumpToBootloader+0x40>)
 8008cea:	f003 fa47 	bl	800c17c <iprintf>
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	f383 8808 	msr	MSP, r3
}
 8008cf8:	bf00      	nop

	// Step 3: Set MSP to application's MSP
	__set_MSP(msp_value);

	// Step 4: Set the function pointer and jump
	boot_reset_handler = (void*) (reset_handler_addr | 0x1);  // Ensure Thumb bit is set
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	f043 0301 	orr.w	r3, r3, #1
 8008d00:	60fb      	str	r3, [r7, #12]
	boot_reset_handler();
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	4798      	blx	r3
}
 8008d06:	bf00      	nop
 8008d08:	3718      	adds	r7, #24
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	0800cf2c 	.word	0x0800cf2c

08008d14 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a09      	ldr	r2, [pc, #36]	@ (8008d48 <HAL_UART_RxCpltCallback+0x34>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d10c      	bne.n	8008d40 <HAL_UART_RxCpltCallback+0x2c>
    {
        if (rx_byte == BOOT_CMD)
 8008d26:	4b09      	ldr	r3, [pc, #36]	@ (8008d4c <HAL_UART_RxCpltCallback+0x38>)
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	2b50      	cmp	r3, #80	@ 0x50
 8008d2c:	d103      	bne.n	8008d36 <HAL_UART_RxCpltCallback+0x22>
        {
            JumpToBootloader(BOOT_BASE_ADDRESS);
 8008d2e:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8008d32:	f7ff ffcd 	bl	8008cd0 <JumpToBootloader>
        }

        // Restart UART interrupt reception for next byte
        HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 8008d36:	2201      	movs	r2, #1
 8008d38:	4904      	ldr	r1, [pc, #16]	@ (8008d4c <HAL_UART_RxCpltCallback+0x38>)
 8008d3a:	4805      	ldr	r0, [pc, #20]	@ (8008d50 <HAL_UART_RxCpltCallback+0x3c>)
 8008d3c:	f002 f9cb 	bl	800b0d6 <HAL_UART_Receive_IT>
    }
}
 8008d40:	bf00      	nop
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	40004800 	.word	0x40004800
 8008d4c:	200001f8 	.word	0x200001f8
 8008d50:	200001b0 	.word	0x200001b0

08008d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008d5a:	f000 fc85 	bl	8009668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008d5e:	f000 f853 	bl	8008e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008d62:	f000 f979 	bl	8009058 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8008d66:	f000 f923 	bl	8008fb0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8008d6a:	f000 f94b 	bl	8009004 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8008d6e:	f000 f8bd 	bl	8008eec <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8008d72:	f000 f8f3 	bl	8008f5c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Application started....\n");
 8008d76:	481d      	ldr	r0, [pc, #116]	@ (8008dec <main+0x98>)
 8008d78:	f003 fa68 	bl	800c24c <puts>
  HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	491c      	ldr	r1, [pc, #112]	@ (8008df0 <main+0x9c>)
 8008d80:	481c      	ldr	r0, [pc, #112]	@ (8008df4 <main+0xa0>)
 8008d82:	f002 f9a8 	bl	800b0d6 <HAL_UART_Receive_IT>

  ST7735_Init(0);
 8008d86:	2000      	movs	r0, #0
 8008d88:	f7ff fd32 	bl	80087f0 <ST7735_Init>
  fillScreen(RED);
 8008d8c:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8008d90:	f7ff fc22 	bl	80085d8 <fillScreen>
  printf("fill screen set to black!\n");
 8008d94:	4818      	ldr	r0, [pc, #96]	@ (8008df8 <main+0xa4>)
 8008d96:	f003 fa59 	bl	800c24c <puts>

  ST7735_SetRotation(3);
 8008d9a:	2003      	movs	r0, #3
 8008d9c:	f7ff fd54 	bl	8008848 <ST7735_SetRotation>
  ST7735_WriteString(0, 0, "Hello World!", Font_16x26, YELLOW,BLACK);
 8008da0:	4b16      	ldr	r3, [pc, #88]	@ (8008dfc <main+0xa8>)
 8008da2:	2200      	movs	r2, #0
 8008da4:	9202      	str	r2, [sp, #8]
 8008da6:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8008daa:	9201      	str	r2, [sp, #4]
 8008dac:	685a      	ldr	r2, [r3, #4]
 8008dae:	9200      	str	r2, [sp, #0]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a13      	ldr	r2, [pc, #76]	@ (8008e00 <main+0xac>)
 8008db4:	2100      	movs	r1, #0
 8008db6:	2000      	movs	r0, #0
 8008db8:	f7ff fe3e 	bl	8008a38 <ST7735_WriteString>
  HAL_Delay(3000);
 8008dbc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8008dc0:	f000 fcc4 	bl	800974c <HAL_Delay>
  fillScreen(RED);
 8008dc4:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8008dc8:	f7ff fc06 	bl	80085d8 <fillScreen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  char key = scan_keypad();
 8008dcc:	f7ff ff10 	bl	8008bf0 <scan_keypad>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	71fb      	strb	r3, [r7, #7]
	  if (key != '\0') {
 8008dd4:	79fb      	ldrb	r3, [r7, #7]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d004      	beq.n	8008de4 <main+0x90>
		printf("Key Pressed: %c\r\n", key);
 8008dda:	79fb      	ldrb	r3, [r7, #7]
 8008ddc:	4619      	mov	r1, r3
 8008dde:	4809      	ldr	r0, [pc, #36]	@ (8008e04 <main+0xb0>)
 8008de0:	f003 f9cc 	bl	800c17c <iprintf>
	  }

	  HAL_Delay(100);
 8008de4:	2064      	movs	r0, #100	@ 0x64
 8008de6:	f000 fcb1 	bl	800974c <HAL_Delay>
  {
 8008dea:	e7ef      	b.n	8008dcc <main+0x78>
 8008dec:	0800cf50 	.word	0x0800cf50
 8008df0:	200001f8 	.word	0x200001f8
 8008df4:	200001b0 	.word	0x200001b0
 8008df8:	0800cf68 	.word	0x0800cf68
 8008dfc:	20000000 	.word	0x20000000
 8008e00:	0800cf84 	.word	0x0800cf84
 8008e04:	0800cf94 	.word	0x0800cf94

08008e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b094      	sub	sp, #80	@ 0x50
 8008e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008e0e:	f107 031c 	add.w	r3, r7, #28
 8008e12:	2234      	movs	r2, #52	@ 0x34
 8008e14:	2100      	movs	r1, #0
 8008e16:	4618      	mov	r0, r3
 8008e18:	f003 faf8 	bl	800c40c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008e1c:	f107 0308 	add.w	r3, r7, #8
 8008e20:	2200      	movs	r2, #0
 8008e22:	601a      	str	r2, [r3, #0]
 8008e24:	605a      	str	r2, [r3, #4]
 8008e26:	609a      	str	r2, [r3, #8]
 8008e28:	60da      	str	r2, [r3, #12]
 8008e2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	607b      	str	r3, [r7, #4]
 8008e30:	4b2c      	ldr	r3, [pc, #176]	@ (8008ee4 <SystemClock_Config+0xdc>)
 8008e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e34:	4a2b      	ldr	r2, [pc, #172]	@ (8008ee4 <SystemClock_Config+0xdc>)
 8008e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8008e3c:	4b29      	ldr	r3, [pc, #164]	@ (8008ee4 <SystemClock_Config+0xdc>)
 8008e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e44:	607b      	str	r3, [r7, #4]
 8008e46:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008e48:	2300      	movs	r3, #0
 8008e4a:	603b      	str	r3, [r7, #0]
 8008e4c:	4b26      	ldr	r3, [pc, #152]	@ (8008ee8 <SystemClock_Config+0xe0>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a25      	ldr	r2, [pc, #148]	@ (8008ee8 <SystemClock_Config+0xe0>)
 8008e52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008e56:	6013      	str	r3, [r2, #0]
 8008e58:	4b23      	ldr	r3, [pc, #140]	@ (8008ee8 <SystemClock_Config+0xe0>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008e60:	603b      	str	r3, [r7, #0]
 8008e62:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008e64:	2302      	movs	r3, #2
 8008e66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008e6c:	2310      	movs	r3, #16
 8008e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008e70:	2302      	movs	r3, #2
 8008e72:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008e74:	2300      	movs	r3, #0
 8008e76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008e78:	2308      	movs	r3, #8
 8008e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8008e7c:	23b4      	movs	r3, #180	@ 0xb4
 8008e7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008e80:	2302      	movs	r3, #2
 8008e82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008e84:	2302      	movs	r3, #2
 8008e86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8008e88:	2302      	movs	r3, #2
 8008e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008e8c:	f107 031c 	add.w	r3, r7, #28
 8008e90:	4618      	mov	r0, r3
 8008e92:	f001 fafd 	bl	800a490 <HAL_RCC_OscConfig>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d001      	beq.n	8008ea0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8008e9c:	f000 f974 	bl	8009188 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008ea0:	f000 ffe2 	bl	8009e68 <HAL_PWREx_EnableOverDrive>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8008eaa:	f000 f96d 	bl	8009188 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008eae:	230f      	movs	r3, #15
 8008eb0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008eb2:	2302      	movs	r3, #2
 8008eb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008eba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8008ebe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008ec0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008ec4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008ec6:	f107 0308 	add.w	r3, r7, #8
 8008eca:	2105      	movs	r1, #5
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f001 f81b 	bl	8009f08 <HAL_RCC_ClockConfig>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d001      	beq.n	8008edc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8008ed8:	f000 f956 	bl	8009188 <Error_Handler>
  }
}
 8008edc:	bf00      	nop
 8008ede:	3750      	adds	r7, #80	@ 0x50
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	40023800 	.word	0x40023800
 8008ee8:	40007000 	.word	0x40007000

08008eec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008ef0:	4b18      	ldr	r3, [pc, #96]	@ (8008f54 <MX_SPI1_Init+0x68>)
 8008ef2:	4a19      	ldr	r2, [pc, #100]	@ (8008f58 <MX_SPI1_Init+0x6c>)
 8008ef4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008ef6:	4b17      	ldr	r3, [pc, #92]	@ (8008f54 <MX_SPI1_Init+0x68>)
 8008ef8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8008efc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8008efe:	4b15      	ldr	r3, [pc, #84]	@ (8008f54 <MX_SPI1_Init+0x68>)
 8008f00:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008f04:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008f06:	4b13      	ldr	r3, [pc, #76]	@ (8008f54 <MX_SPI1_Init+0x68>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f0c:	4b11      	ldr	r3, [pc, #68]	@ (8008f54 <MX_SPI1_Init+0x68>)
 8008f0e:	2200      	movs	r2, #0
 8008f10:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008f12:	4b10      	ldr	r3, [pc, #64]	@ (8008f54 <MX_SPI1_Init+0x68>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008f18:	4b0e      	ldr	r3, [pc, #56]	@ (8008f54 <MX_SPI1_Init+0x68>)
 8008f1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f1e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008f20:	4b0c      	ldr	r3, [pc, #48]	@ (8008f54 <MX_SPI1_Init+0x68>)
 8008f22:	2210      	movs	r2, #16
 8008f24:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008f26:	4b0b      	ldr	r3, [pc, #44]	@ (8008f54 <MX_SPI1_Init+0x68>)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008f2c:	4b09      	ldr	r3, [pc, #36]	@ (8008f54 <MX_SPI1_Init+0x68>)
 8008f2e:	2200      	movs	r2, #0
 8008f30:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f32:	4b08      	ldr	r3, [pc, #32]	@ (8008f54 <MX_SPI1_Init+0x68>)
 8008f34:	2200      	movs	r2, #0
 8008f36:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8008f38:	4b06      	ldr	r3, [pc, #24]	@ (8008f54 <MX_SPI1_Init+0x68>)
 8008f3a:	220a      	movs	r2, #10
 8008f3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008f3e:	4805      	ldr	r0, [pc, #20]	@ (8008f54 <MX_SPI1_Init+0x68>)
 8008f40:	f001 fd44 	bl	800a9cc <HAL_SPI_Init>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d001      	beq.n	8008f4e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8008f4a:	f000 f91d 	bl	8009188 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008f4e:	bf00      	nop
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	200000c8 	.word	0x200000c8
 8008f58:	40013000 	.word	0x40013000

08008f5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008f60:	4b11      	ldr	r3, [pc, #68]	@ (8008fa8 <MX_USART1_UART_Init+0x4c>)
 8008f62:	4a12      	ldr	r2, [pc, #72]	@ (8008fac <MX_USART1_UART_Init+0x50>)
 8008f64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008f66:	4b10      	ldr	r3, [pc, #64]	@ (8008fa8 <MX_USART1_UART_Init+0x4c>)
 8008f68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008f6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8008fa8 <MX_USART1_UART_Init+0x4c>)
 8008f70:	2200      	movs	r2, #0
 8008f72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008f74:	4b0c      	ldr	r3, [pc, #48]	@ (8008fa8 <MX_USART1_UART_Init+0x4c>)
 8008f76:	2200      	movs	r2, #0
 8008f78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8008fa8 <MX_USART1_UART_Init+0x4c>)
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008f80:	4b09      	ldr	r3, [pc, #36]	@ (8008fa8 <MX_USART1_UART_Init+0x4c>)
 8008f82:	220c      	movs	r2, #12
 8008f84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008f86:	4b08      	ldr	r3, [pc, #32]	@ (8008fa8 <MX_USART1_UART_Init+0x4c>)
 8008f88:	2200      	movs	r2, #0
 8008f8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008f8c:	4b06      	ldr	r3, [pc, #24]	@ (8008fa8 <MX_USART1_UART_Init+0x4c>)
 8008f8e:	2200      	movs	r2, #0
 8008f90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008f92:	4805      	ldr	r0, [pc, #20]	@ (8008fa8 <MX_USART1_UART_Init+0x4c>)
 8008f94:	f001 ffc4 	bl	800af20 <HAL_UART_Init>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d001      	beq.n	8008fa2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008f9e:	f000 f8f3 	bl	8009188 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008fa2:	bf00      	nop
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20000120 	.word	0x20000120
 8008fac:	40011000 	.word	0x40011000

08008fb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008fb4:	4b11      	ldr	r3, [pc, #68]	@ (8008ffc <MX_USART2_UART_Init+0x4c>)
 8008fb6:	4a12      	ldr	r2, [pc, #72]	@ (8009000 <MX_USART2_UART_Init+0x50>)
 8008fb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008fba:	4b10      	ldr	r3, [pc, #64]	@ (8008ffc <MX_USART2_UART_Init+0x4c>)
 8008fbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008fc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8008ffc <MX_USART2_UART_Init+0x4c>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8008ffc <MX_USART2_UART_Init+0x4c>)
 8008fca:	2200      	movs	r2, #0
 8008fcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008fce:	4b0b      	ldr	r3, [pc, #44]	@ (8008ffc <MX_USART2_UART_Init+0x4c>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008fd4:	4b09      	ldr	r3, [pc, #36]	@ (8008ffc <MX_USART2_UART_Init+0x4c>)
 8008fd6:	220c      	movs	r2, #12
 8008fd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008fda:	4b08      	ldr	r3, [pc, #32]	@ (8008ffc <MX_USART2_UART_Init+0x4c>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008fe0:	4b06      	ldr	r3, [pc, #24]	@ (8008ffc <MX_USART2_UART_Init+0x4c>)
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008fe6:	4805      	ldr	r0, [pc, #20]	@ (8008ffc <MX_USART2_UART_Init+0x4c>)
 8008fe8:	f001 ff9a 	bl	800af20 <HAL_UART_Init>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d001      	beq.n	8008ff6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8008ff2:	f000 f8c9 	bl	8009188 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008ff6:	bf00      	nop
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	20000168 	.word	0x20000168
 8009000:	40004400 	.word	0x40004400

08009004 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8009008:	4b11      	ldr	r3, [pc, #68]	@ (8009050 <MX_USART3_UART_Init+0x4c>)
 800900a:	4a12      	ldr	r2, [pc, #72]	@ (8009054 <MX_USART3_UART_Init+0x50>)
 800900c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800900e:	4b10      	ldr	r3, [pc, #64]	@ (8009050 <MX_USART3_UART_Init+0x4c>)
 8009010:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009014:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009016:	4b0e      	ldr	r3, [pc, #56]	@ (8009050 <MX_USART3_UART_Init+0x4c>)
 8009018:	2200      	movs	r2, #0
 800901a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800901c:	4b0c      	ldr	r3, [pc, #48]	@ (8009050 <MX_USART3_UART_Init+0x4c>)
 800901e:	2200      	movs	r2, #0
 8009020:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009022:	4b0b      	ldr	r3, [pc, #44]	@ (8009050 <MX_USART3_UART_Init+0x4c>)
 8009024:	2200      	movs	r2, #0
 8009026:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009028:	4b09      	ldr	r3, [pc, #36]	@ (8009050 <MX_USART3_UART_Init+0x4c>)
 800902a:	220c      	movs	r2, #12
 800902c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800902e:	4b08      	ldr	r3, [pc, #32]	@ (8009050 <MX_USART3_UART_Init+0x4c>)
 8009030:	2200      	movs	r2, #0
 8009032:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009034:	4b06      	ldr	r3, [pc, #24]	@ (8009050 <MX_USART3_UART_Init+0x4c>)
 8009036:	2200      	movs	r2, #0
 8009038:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800903a:	4805      	ldr	r0, [pc, #20]	@ (8009050 <MX_USART3_UART_Init+0x4c>)
 800903c:	f001 ff70 	bl	800af20 <HAL_UART_Init>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8009046:	f000 f89f 	bl	8009188 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800904a:	bf00      	nop
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	200001b0 	.word	0x200001b0
 8009054:	40004800 	.word	0x40004800

08009058 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b088      	sub	sp, #32
 800905c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800905e:	f107 030c 	add.w	r3, r7, #12
 8009062:	2200      	movs	r2, #0
 8009064:	601a      	str	r2, [r3, #0]
 8009066:	605a      	str	r2, [r3, #4]
 8009068:	609a      	str	r2, [r3, #8]
 800906a:	60da      	str	r2, [r3, #12]
 800906c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800906e:	2300      	movs	r3, #0
 8009070:	60bb      	str	r3, [r7, #8]
 8009072:	4b38      	ldr	r3, [pc, #224]	@ (8009154 <MX_GPIO_Init+0xfc>)
 8009074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009076:	4a37      	ldr	r2, [pc, #220]	@ (8009154 <MX_GPIO_Init+0xfc>)
 8009078:	f043 0301 	orr.w	r3, r3, #1
 800907c:	6313      	str	r3, [r2, #48]	@ 0x30
 800907e:	4b35      	ldr	r3, [pc, #212]	@ (8009154 <MX_GPIO_Init+0xfc>)
 8009080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009082:	f003 0301 	and.w	r3, r3, #1
 8009086:	60bb      	str	r3, [r7, #8]
 8009088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800908a:	2300      	movs	r3, #0
 800908c:	607b      	str	r3, [r7, #4]
 800908e:	4b31      	ldr	r3, [pc, #196]	@ (8009154 <MX_GPIO_Init+0xfc>)
 8009090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009092:	4a30      	ldr	r2, [pc, #192]	@ (8009154 <MX_GPIO_Init+0xfc>)
 8009094:	f043 0304 	orr.w	r3, r3, #4
 8009098:	6313      	str	r3, [r2, #48]	@ 0x30
 800909a:	4b2e      	ldr	r3, [pc, #184]	@ (8009154 <MX_GPIO_Init+0xfc>)
 800909c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800909e:	f003 0304 	and.w	r3, r3, #4
 80090a2:	607b      	str	r3, [r7, #4]
 80090a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80090a6:	2300      	movs	r3, #0
 80090a8:	603b      	str	r3, [r7, #0]
 80090aa:	4b2a      	ldr	r3, [pc, #168]	@ (8009154 <MX_GPIO_Init+0xfc>)
 80090ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ae:	4a29      	ldr	r2, [pc, #164]	@ (8009154 <MX_GPIO_Init+0xfc>)
 80090b0:	f043 0302 	orr.w	r3, r3, #2
 80090b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80090b6:	4b27      	ldr	r3, [pc, #156]	@ (8009154 <MX_GPIO_Init+0xfc>)
 80090b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ba:	f003 0302 	and.w	r3, r3, #2
 80090be:	603b      	str	r3, [r7, #0]
 80090c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 80090c2:	2200      	movs	r2, #0
 80090c4:	2112      	movs	r1, #18
 80090c6:	4824      	ldr	r0, [pc, #144]	@ (8009158 <MX_GPIO_Init+0x100>)
 80090c8:	f000 feb4 	bl	8009e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80090cc:	2200      	movs	r2, #0
 80090ce:	2110      	movs	r1, #16
 80090d0:	4822      	ldr	r0, [pc, #136]	@ (800915c <MX_GPIO_Init+0x104>)
 80090d2:	f000 feaf 	bl	8009e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KEYPAD_R1_Pin|KEYPAD_R2_Pin|KEYPAD_R3_Pin|KEYPAD_R4_Pin, GPIO_PIN_SET);
 80090d6:	2201      	movs	r2, #1
 80090d8:	210f      	movs	r1, #15
 80090da:	4821      	ldr	r0, [pc, #132]	@ (8009160 <MX_GPIO_Init+0x108>)
 80090dc:	f000 feaa 	bl	8009e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80090e0:	2312      	movs	r3, #18
 80090e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80090e4:	2301      	movs	r3, #1
 80090e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090e8:	2300      	movs	r3, #0
 80090ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090ec:	2300      	movs	r3, #0
 80090ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090f0:	f107 030c 	add.w	r3, r7, #12
 80090f4:	4619      	mov	r1, r3
 80090f6:	4818      	ldr	r0, [pc, #96]	@ (8009158 <MX_GPIO_Init+0x100>)
 80090f8:	f000 fcf0 	bl	8009adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80090fc:	2310      	movs	r3, #16
 80090fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009100:	2301      	movs	r3, #1
 8009102:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009104:	2300      	movs	r3, #0
 8009106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009108:	2300      	movs	r3, #0
 800910a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800910c:	f107 030c 	add.w	r3, r7, #12
 8009110:	4619      	mov	r1, r3
 8009112:	4812      	ldr	r0, [pc, #72]	@ (800915c <MX_GPIO_Init+0x104>)
 8009114:	f000 fce2 	bl	8009adc <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_R1_Pin KEYPAD_R2_Pin KEYPAD_R3_Pin KEYPAD_R4_Pin */
  GPIO_InitStruct.Pin = KEYPAD_R1_Pin|KEYPAD_R2_Pin|KEYPAD_R3_Pin|KEYPAD_R4_Pin;
 8009118:	230f      	movs	r3, #15
 800911a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800911c:	2301      	movs	r3, #1
 800911e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009120:	2300      	movs	r3, #0
 8009122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009124:	2300      	movs	r3, #0
 8009126:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009128:	f107 030c 	add.w	r3, r7, #12
 800912c:	4619      	mov	r1, r3
 800912e:	480c      	ldr	r0, [pc, #48]	@ (8009160 <MX_GPIO_Init+0x108>)
 8009130:	f000 fcd4 	bl	8009adc <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_C1_Pin KEYPAD_C2_Pin KEYPAD_C3_Pin KEYPAD_C4_Pin */
  GPIO_InitStruct.Pin = KEYPAD_C1_Pin|KEYPAD_C2_Pin|KEYPAD_C3_Pin|KEYPAD_C4_Pin;
 8009134:	23f0      	movs	r3, #240	@ 0xf0
 8009136:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009138:	2300      	movs	r3, #0
 800913a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800913c:	2301      	movs	r3, #1
 800913e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009140:	f107 030c 	add.w	r3, r7, #12
 8009144:	4619      	mov	r1, r3
 8009146:	4806      	ldr	r0, [pc, #24]	@ (8009160 <MX_GPIO_Init+0x108>)
 8009148:	f000 fcc8 	bl	8009adc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800914c:	bf00      	nop
 800914e:	3720      	adds	r7, #32
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	40023800 	.word	0x40023800
 8009158:	40020000 	.word	0x40020000
 800915c:	40020800 	.word	0x40020800
 8009160:	40020400 	.word	0x40020400

08009164 <__io_putchar>:

/* USER CODE BEGIN 4 */
#define PRINTF   int __io_putchar(int ch)
PRINTF
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800916c:	1d39      	adds	r1, r7, #4
 800916e:	f04f 33ff 	mov.w	r3, #4294967295
 8009172:	2201      	movs	r2, #1
 8009174:	4803      	ldr	r0, [pc, #12]	@ (8009184 <__io_putchar+0x20>)
 8009176:	f001 ff23 	bl	800afc0 <HAL_UART_Transmit>
	return ch;
 800917a:	687b      	ldr	r3, [r7, #4]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3708      	adds	r7, #8
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	20000168 	.word	0x20000168

08009188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009188:	b480      	push	{r7}
 800918a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800918c:	b672      	cpsid	i
}
 800918e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009190:	bf00      	nop
 8009192:	e7fd      	b.n	8009190 <Error_Handler+0x8>

08009194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800919a:	2300      	movs	r3, #0
 800919c:	607b      	str	r3, [r7, #4]
 800919e:	4b10      	ldr	r3, [pc, #64]	@ (80091e0 <HAL_MspInit+0x4c>)
 80091a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091a2:	4a0f      	ldr	r2, [pc, #60]	@ (80091e0 <HAL_MspInit+0x4c>)
 80091a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80091a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80091aa:	4b0d      	ldr	r3, [pc, #52]	@ (80091e0 <HAL_MspInit+0x4c>)
 80091ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091b2:	607b      	str	r3, [r7, #4]
 80091b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80091b6:	2300      	movs	r3, #0
 80091b8:	603b      	str	r3, [r7, #0]
 80091ba:	4b09      	ldr	r3, [pc, #36]	@ (80091e0 <HAL_MspInit+0x4c>)
 80091bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091be:	4a08      	ldr	r2, [pc, #32]	@ (80091e0 <HAL_MspInit+0x4c>)
 80091c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80091c6:	4b06      	ldr	r3, [pc, #24]	@ (80091e0 <HAL_MspInit+0x4c>)
 80091c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091ce:	603b      	str	r3, [r7, #0]
 80091d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80091d2:	bf00      	nop
 80091d4:	370c      	adds	r7, #12
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	40023800 	.word	0x40023800

080091e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b08a      	sub	sp, #40	@ 0x28
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091ec:	f107 0314 	add.w	r3, r7, #20
 80091f0:	2200      	movs	r2, #0
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	605a      	str	r2, [r3, #4]
 80091f6:	609a      	str	r2, [r3, #8]
 80091f8:	60da      	str	r2, [r3, #12]
 80091fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a19      	ldr	r2, [pc, #100]	@ (8009268 <HAL_SPI_MspInit+0x84>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d12b      	bne.n	800925e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009206:	2300      	movs	r3, #0
 8009208:	613b      	str	r3, [r7, #16]
 800920a:	4b18      	ldr	r3, [pc, #96]	@ (800926c <HAL_SPI_MspInit+0x88>)
 800920c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800920e:	4a17      	ldr	r2, [pc, #92]	@ (800926c <HAL_SPI_MspInit+0x88>)
 8009210:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009214:	6453      	str	r3, [r2, #68]	@ 0x44
 8009216:	4b15      	ldr	r3, [pc, #84]	@ (800926c <HAL_SPI_MspInit+0x88>)
 8009218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800921a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800921e:	613b      	str	r3, [r7, #16]
 8009220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009222:	2300      	movs	r3, #0
 8009224:	60fb      	str	r3, [r7, #12]
 8009226:	4b11      	ldr	r3, [pc, #68]	@ (800926c <HAL_SPI_MspInit+0x88>)
 8009228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800922a:	4a10      	ldr	r2, [pc, #64]	@ (800926c <HAL_SPI_MspInit+0x88>)
 800922c:	f043 0301 	orr.w	r3, r3, #1
 8009230:	6313      	str	r3, [r2, #48]	@ 0x30
 8009232:	4b0e      	ldr	r3, [pc, #56]	@ (800926c <HAL_SPI_MspInit+0x88>)
 8009234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009236:	f003 0301 	and.w	r3, r3, #1
 800923a:	60fb      	str	r3, [r7, #12]
 800923c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800923e:	23a0      	movs	r3, #160	@ 0xa0
 8009240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009242:	2302      	movs	r3, #2
 8009244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009246:	2300      	movs	r3, #0
 8009248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800924a:	2303      	movs	r3, #3
 800924c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800924e:	2305      	movs	r3, #5
 8009250:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009252:	f107 0314 	add.w	r3, r7, #20
 8009256:	4619      	mov	r1, r3
 8009258:	4805      	ldr	r0, [pc, #20]	@ (8009270 <HAL_SPI_MspInit+0x8c>)
 800925a:	f000 fc3f 	bl	8009adc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800925e:	bf00      	nop
 8009260:	3728      	adds	r7, #40	@ 0x28
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	40013000 	.word	0x40013000
 800926c:	40023800 	.word	0x40023800
 8009270:	40020000 	.word	0x40020000

08009274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b08e      	sub	sp, #56	@ 0x38
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800927c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009280:	2200      	movs	r2, #0
 8009282:	601a      	str	r2, [r3, #0]
 8009284:	605a      	str	r2, [r3, #4]
 8009286:	609a      	str	r2, [r3, #8]
 8009288:	60da      	str	r2, [r3, #12]
 800928a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a5f      	ldr	r2, [pc, #380]	@ (8009410 <HAL_UART_MspInit+0x19c>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d12d      	bne.n	80092f2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009296:	2300      	movs	r3, #0
 8009298:	623b      	str	r3, [r7, #32]
 800929a:	4b5e      	ldr	r3, [pc, #376]	@ (8009414 <HAL_UART_MspInit+0x1a0>)
 800929c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800929e:	4a5d      	ldr	r2, [pc, #372]	@ (8009414 <HAL_UART_MspInit+0x1a0>)
 80092a0:	f043 0310 	orr.w	r3, r3, #16
 80092a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80092a6:	4b5b      	ldr	r3, [pc, #364]	@ (8009414 <HAL_UART_MspInit+0x1a0>)
 80092a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092aa:	f003 0310 	and.w	r3, r3, #16
 80092ae:	623b      	str	r3, [r7, #32]
 80092b0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092b2:	2300      	movs	r3, #0
 80092b4:	61fb      	str	r3, [r7, #28]
 80092b6:	4b57      	ldr	r3, [pc, #348]	@ (8009414 <HAL_UART_MspInit+0x1a0>)
 80092b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ba:	4a56      	ldr	r2, [pc, #344]	@ (8009414 <HAL_UART_MspInit+0x1a0>)
 80092bc:	f043 0301 	orr.w	r3, r3, #1
 80092c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80092c2:	4b54      	ldr	r3, [pc, #336]	@ (8009414 <HAL_UART_MspInit+0x1a0>)
 80092c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092c6:	f003 0301 	and.w	r3, r3, #1
 80092ca:	61fb      	str	r3, [r7, #28]
 80092cc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80092ce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80092d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092d4:	2302      	movs	r3, #2
 80092d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092d8:	2300      	movs	r3, #0
 80092da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092dc:	2303      	movs	r3, #3
 80092de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80092e0:	2307      	movs	r3, #7
 80092e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092e8:	4619      	mov	r1, r3
 80092ea:	484b      	ldr	r0, [pc, #300]	@ (8009418 <HAL_UART_MspInit+0x1a4>)
 80092ec:	f000 fbf6 	bl	8009adc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80092f0:	e089      	b.n	8009406 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART2)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a49      	ldr	r2, [pc, #292]	@ (800941c <HAL_UART_MspInit+0x1a8>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d12c      	bne.n	8009356 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80092fc:	2300      	movs	r3, #0
 80092fe:	61bb      	str	r3, [r7, #24]
 8009300:	4b44      	ldr	r3, [pc, #272]	@ (8009414 <HAL_UART_MspInit+0x1a0>)
 8009302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009304:	4a43      	ldr	r2, [pc, #268]	@ (8009414 <HAL_UART_MspInit+0x1a0>)
 8009306:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800930a:	6413      	str	r3, [r2, #64]	@ 0x40
 800930c:	4b41      	ldr	r3, [pc, #260]	@ (8009414 <HAL_UART_MspInit+0x1a0>)
 800930e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009314:	61bb      	str	r3, [r7, #24]
 8009316:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009318:	2300      	movs	r3, #0
 800931a:	617b      	str	r3, [r7, #20]
 800931c:	4b3d      	ldr	r3, [pc, #244]	@ (8009414 <HAL_UART_MspInit+0x1a0>)
 800931e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009320:	4a3c      	ldr	r2, [pc, #240]	@ (8009414 <HAL_UART_MspInit+0x1a0>)
 8009322:	f043 0301 	orr.w	r3, r3, #1
 8009326:	6313      	str	r3, [r2, #48]	@ 0x30
 8009328:	4b3a      	ldr	r3, [pc, #232]	@ (8009414 <HAL_UART_MspInit+0x1a0>)
 800932a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800932c:	f003 0301 	and.w	r3, r3, #1
 8009330:	617b      	str	r3, [r7, #20]
 8009332:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009334:	230c      	movs	r3, #12
 8009336:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009338:	2302      	movs	r3, #2
 800933a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800933c:	2300      	movs	r3, #0
 800933e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009340:	2303      	movs	r3, #3
 8009342:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009344:	2307      	movs	r3, #7
 8009346:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009348:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800934c:	4619      	mov	r1, r3
 800934e:	4832      	ldr	r0, [pc, #200]	@ (8009418 <HAL_UART_MspInit+0x1a4>)
 8009350:	f000 fbc4 	bl	8009adc <HAL_GPIO_Init>
}
 8009354:	e057      	b.n	8009406 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART3)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a31      	ldr	r2, [pc, #196]	@ (8009420 <HAL_UART_MspInit+0x1ac>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d152      	bne.n	8009406 <HAL_UART_MspInit+0x192>
    __HAL_RCC_USART3_CLK_ENABLE();
 8009360:	2300      	movs	r3, #0
 8009362:	613b      	str	r3, [r7, #16]
 8009364:	4b2b      	ldr	r3, [pc, #172]	@ (8009414 <HAL_UART_MspInit+0x1a0>)
 8009366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009368:	4a2a      	ldr	r2, [pc, #168]	@ (8009414 <HAL_UART_MspInit+0x1a0>)
 800936a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800936e:	6413      	str	r3, [r2, #64]	@ 0x40
 8009370:	4b28      	ldr	r3, [pc, #160]	@ (8009414 <HAL_UART_MspInit+0x1a0>)
 8009372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009374:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009378:	613b      	str	r3, [r7, #16]
 800937a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800937c:	2300      	movs	r3, #0
 800937e:	60fb      	str	r3, [r7, #12]
 8009380:	4b24      	ldr	r3, [pc, #144]	@ (8009414 <HAL_UART_MspInit+0x1a0>)
 8009382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009384:	4a23      	ldr	r2, [pc, #140]	@ (8009414 <HAL_UART_MspInit+0x1a0>)
 8009386:	f043 0304 	orr.w	r3, r3, #4
 800938a:	6313      	str	r3, [r2, #48]	@ 0x30
 800938c:	4b21      	ldr	r3, [pc, #132]	@ (8009414 <HAL_UART_MspInit+0x1a0>)
 800938e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009390:	f003 0304 	and.w	r3, r3, #4
 8009394:	60fb      	str	r3, [r7, #12]
 8009396:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009398:	2300      	movs	r3, #0
 800939a:	60bb      	str	r3, [r7, #8]
 800939c:	4b1d      	ldr	r3, [pc, #116]	@ (8009414 <HAL_UART_MspInit+0x1a0>)
 800939e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093a0:	4a1c      	ldr	r2, [pc, #112]	@ (8009414 <HAL_UART_MspInit+0x1a0>)
 80093a2:	f043 0302 	orr.w	r3, r3, #2
 80093a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80093a8:	4b1a      	ldr	r3, [pc, #104]	@ (8009414 <HAL_UART_MspInit+0x1a0>)
 80093aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093ac:	f003 0302 	and.w	r3, r3, #2
 80093b0:	60bb      	str	r3, [r7, #8]
 80093b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80093b4:	2320      	movs	r3, #32
 80093b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093b8:	2302      	movs	r3, #2
 80093ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093bc:	2300      	movs	r3, #0
 80093be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093c0:	2303      	movs	r3, #3
 80093c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80093c4:	2307      	movs	r3, #7
 80093c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80093c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093cc:	4619      	mov	r1, r3
 80093ce:	4815      	ldr	r0, [pc, #84]	@ (8009424 <HAL_UART_MspInit+0x1b0>)
 80093d0:	f000 fb84 	bl	8009adc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80093d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093da:	2302      	movs	r3, #2
 80093dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093de:	2300      	movs	r3, #0
 80093e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093e2:	2303      	movs	r3, #3
 80093e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80093e6:	2307      	movs	r3, #7
 80093e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80093ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093ee:	4619      	mov	r1, r3
 80093f0:	480d      	ldr	r0, [pc, #52]	@ (8009428 <HAL_UART_MspInit+0x1b4>)
 80093f2:	f000 fb73 	bl	8009adc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80093f6:	2200      	movs	r2, #0
 80093f8:	2100      	movs	r1, #0
 80093fa:	2027      	movs	r0, #39	@ 0x27
 80093fc:	f000 faa5 	bl	800994a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8009400:	2027      	movs	r0, #39	@ 0x27
 8009402:	f000 fabe 	bl	8009982 <HAL_NVIC_EnableIRQ>
}
 8009406:	bf00      	nop
 8009408:	3738      	adds	r7, #56	@ 0x38
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	40011000 	.word	0x40011000
 8009414:	40023800 	.word	0x40023800
 8009418:	40020000 	.word	0x40020000
 800941c:	40004400 	.word	0x40004400
 8009420:	40004800 	.word	0x40004800
 8009424:	40020800 	.word	0x40020800
 8009428:	40020400 	.word	0x40020400

0800942c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800942c:	b480      	push	{r7}
 800942e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009430:	bf00      	nop
 8009432:	e7fd      	b.n	8009430 <NMI_Handler+0x4>

08009434 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009434:	b480      	push	{r7}
 8009436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009438:	bf00      	nop
 800943a:	e7fd      	b.n	8009438 <HardFault_Handler+0x4>

0800943c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800943c:	b480      	push	{r7}
 800943e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009440:	bf00      	nop
 8009442:	e7fd      	b.n	8009440 <MemManage_Handler+0x4>

08009444 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009444:	b480      	push	{r7}
 8009446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009448:	bf00      	nop
 800944a:	e7fd      	b.n	8009448 <BusFault_Handler+0x4>

0800944c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800944c:	b480      	push	{r7}
 800944e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009450:	bf00      	nop
 8009452:	e7fd      	b.n	8009450 <UsageFault_Handler+0x4>

08009454 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009454:	b480      	push	{r7}
 8009456:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009458:	bf00      	nop
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009462:	b480      	push	{r7}
 8009464:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009466:	bf00      	nop
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009470:	b480      	push	{r7}
 8009472:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009474:	bf00      	nop
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr

0800947e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009482:	f000 f943 	bl	800970c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009486:	bf00      	nop
 8009488:	bd80      	pop	{r7, pc}
	...

0800948c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8009490:	4802      	ldr	r0, [pc, #8]	@ (800949c <USART3_IRQHandler+0x10>)
 8009492:	f001 fe45 	bl	800b120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8009496:	bf00      	nop
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	200001b0 	.word	0x200001b0

080094a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094ac:	2300      	movs	r3, #0
 80094ae:	617b      	str	r3, [r7, #20]
 80094b0:	e00a      	b.n	80094c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80094b2:	f3af 8000 	nop.w
 80094b6:	4601      	mov	r1, r0
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	1c5a      	adds	r2, r3, #1
 80094bc:	60ba      	str	r2, [r7, #8]
 80094be:	b2ca      	uxtb	r2, r1
 80094c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	3301      	adds	r3, #1
 80094c6:	617b      	str	r3, [r7, #20]
 80094c8:	697a      	ldr	r2, [r7, #20]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	dbf0      	blt.n	80094b2 <_read+0x12>
  }

  return len;
 80094d0:	687b      	ldr	r3, [r7, #4]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3718      	adds	r7, #24
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b086      	sub	sp, #24
 80094de:	af00      	add	r7, sp, #0
 80094e0:	60f8      	str	r0, [r7, #12]
 80094e2:	60b9      	str	r1, [r7, #8]
 80094e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094e6:	2300      	movs	r3, #0
 80094e8:	617b      	str	r3, [r7, #20]
 80094ea:	e009      	b.n	8009500 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	1c5a      	adds	r2, r3, #1
 80094f0:	60ba      	str	r2, [r7, #8]
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7ff fe35 	bl	8009164 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	3301      	adds	r3, #1
 80094fe:	617b      	str	r3, [r7, #20]
 8009500:	697a      	ldr	r2, [r7, #20]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	429a      	cmp	r2, r3
 8009506:	dbf1      	blt.n	80094ec <_write+0x12>
  }
  return len;
 8009508:	687b      	ldr	r3, [r7, #4]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3718      	adds	r7, #24
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <_close>:

int _close(int file)
{
 8009512:	b480      	push	{r7}
 8009514:	b083      	sub	sp, #12
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800951a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800951e:	4618      	mov	r0, r3
 8009520:	370c      	adds	r7, #12
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800952a:	b480      	push	{r7}
 800952c:	b083      	sub	sp, #12
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
 8009532:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800953a:	605a      	str	r2, [r3, #4]
  return 0;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	370c      	adds	r7, #12
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr

0800954a <_isatty>:

int _isatty(int file)
{
 800954a:	b480      	push	{r7}
 800954c:	b083      	sub	sp, #12
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009552:	2301      	movs	r3, #1
}
 8009554:	4618      	mov	r0, r3
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3714      	adds	r7, #20
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
	...

0800957c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b086      	sub	sp, #24
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009584:	4a14      	ldr	r2, [pc, #80]	@ (80095d8 <_sbrk+0x5c>)
 8009586:	4b15      	ldr	r3, [pc, #84]	@ (80095dc <_sbrk+0x60>)
 8009588:	1ad3      	subs	r3, r2, r3
 800958a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009590:	4b13      	ldr	r3, [pc, #76]	@ (80095e0 <_sbrk+0x64>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d102      	bne.n	800959e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009598:	4b11      	ldr	r3, [pc, #68]	@ (80095e0 <_sbrk+0x64>)
 800959a:	4a12      	ldr	r2, [pc, #72]	@ (80095e4 <_sbrk+0x68>)
 800959c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800959e:	4b10      	ldr	r3, [pc, #64]	@ (80095e0 <_sbrk+0x64>)
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4413      	add	r3, r2
 80095a6:	693a      	ldr	r2, [r7, #16]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d207      	bcs.n	80095bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80095ac:	f002 ff7c 	bl	800c4a8 <__errno>
 80095b0:	4603      	mov	r3, r0
 80095b2:	220c      	movs	r2, #12
 80095b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80095b6:	f04f 33ff 	mov.w	r3, #4294967295
 80095ba:	e009      	b.n	80095d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80095bc:	4b08      	ldr	r3, [pc, #32]	@ (80095e0 <_sbrk+0x64>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80095c2:	4b07      	ldr	r3, [pc, #28]	@ (80095e0 <_sbrk+0x64>)
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4413      	add	r3, r2
 80095ca:	4a05      	ldr	r2, [pc, #20]	@ (80095e0 <_sbrk+0x64>)
 80095cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80095ce:	68fb      	ldr	r3, [r7, #12]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3718      	adds	r7, #24
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	20020000 	.word	0x20020000
 80095dc:	00000400 	.word	0x00000400
 80095e0:	200001fc 	.word	0x200001fc
 80095e4:	20000350 	.word	0x20000350

080095e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80095e8:	b480      	push	{r7}
 80095ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80095ec:	4b07      	ldr	r3, [pc, #28]	@ (800960c <SystemInit+0x24>)
 80095ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095f2:	4a06      	ldr	r2, [pc, #24]	@ (800960c <SystemInit+0x24>)
 80095f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80095f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80095fc:	4b03      	ldr	r3, [pc, #12]	@ (800960c <SystemInit+0x24>)
 80095fe:	4a04      	ldr	r2, [pc, #16]	@ (8009610 <SystemInit+0x28>)
 8009600:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009602:	bf00      	nop
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr
 800960c:	e000ed00 	.word	0xe000ed00
 8009610:	08008000 	.word	0x08008000

08009614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009614:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800964c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8009618:	f7ff ffe6 	bl	80095e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800961c:	480c      	ldr	r0, [pc, #48]	@ (8009650 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800961e:	490d      	ldr	r1, [pc, #52]	@ (8009654 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009620:	4a0d      	ldr	r2, [pc, #52]	@ (8009658 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009624:	e002      	b.n	800962c <LoopCopyDataInit>

08009626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800962a:	3304      	adds	r3, #4

0800962c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800962c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800962e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009630:	d3f9      	bcc.n	8009626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009632:	4a0a      	ldr	r2, [pc, #40]	@ (800965c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009634:	4c0a      	ldr	r4, [pc, #40]	@ (8009660 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009638:	e001      	b.n	800963e <LoopFillZerobss>

0800963a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800963a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800963c:	3204      	adds	r2, #4

0800963e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800963e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009640:	d3fb      	bcc.n	800963a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8009642:	f002 ff37 	bl	800c4b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009646:	f7ff fb85 	bl	8008d54 <main>
  bx  lr    
 800964a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800964c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009654:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8009658:	0800e3d4 	.word	0x0800e3d4
  ldr r2, =_sbss
 800965c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8009660:	20000350 	.word	0x20000350

08009664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009664:	e7fe      	b.n	8009664 <ADC_IRQHandler>
	...

08009668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800966c:	4b0e      	ldr	r3, [pc, #56]	@ (80096a8 <HAL_Init+0x40>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a0d      	ldr	r2, [pc, #52]	@ (80096a8 <HAL_Init+0x40>)
 8009672:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009676:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009678:	4b0b      	ldr	r3, [pc, #44]	@ (80096a8 <HAL_Init+0x40>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a0a      	ldr	r2, [pc, #40]	@ (80096a8 <HAL_Init+0x40>)
 800967e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009682:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009684:	4b08      	ldr	r3, [pc, #32]	@ (80096a8 <HAL_Init+0x40>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a07      	ldr	r2, [pc, #28]	@ (80096a8 <HAL_Init+0x40>)
 800968a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800968e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009690:	2003      	movs	r0, #3
 8009692:	f000 f94f 	bl	8009934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009696:	200f      	movs	r0, #15
 8009698:	f000 f808 	bl	80096ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800969c:	f7ff fd7a 	bl	8009194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	40023c00 	.word	0x40023c00

080096ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80096b4:	4b12      	ldr	r3, [pc, #72]	@ (8009700 <HAL_InitTick+0x54>)
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	4b12      	ldr	r3, [pc, #72]	@ (8009704 <HAL_InitTick+0x58>)
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	4619      	mov	r1, r3
 80096be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80096c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80096c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80096ca:	4618      	mov	r0, r3
 80096cc:	f000 f967 	bl	800999e <HAL_SYSTICK_Config>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d001      	beq.n	80096da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e00e      	b.n	80096f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2b0f      	cmp	r3, #15
 80096de:	d80a      	bhi.n	80096f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80096e0:	2200      	movs	r2, #0
 80096e2:	6879      	ldr	r1, [r7, #4]
 80096e4:	f04f 30ff 	mov.w	r0, #4294967295
 80096e8:	f000 f92f 	bl	800994a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80096ec:	4a06      	ldr	r2, [pc, #24]	@ (8009708 <HAL_InitTick+0x5c>)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80096f2:	2300      	movs	r3, #0
 80096f4:	e000      	b.n	80096f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3708      	adds	r7, #8
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	20000038 	.word	0x20000038
 8009704:	20000040 	.word	0x20000040
 8009708:	2000003c 	.word	0x2000003c

0800970c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800970c:	b480      	push	{r7}
 800970e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009710:	4b06      	ldr	r3, [pc, #24]	@ (800972c <HAL_IncTick+0x20>)
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	461a      	mov	r2, r3
 8009716:	4b06      	ldr	r3, [pc, #24]	@ (8009730 <HAL_IncTick+0x24>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4413      	add	r3, r2
 800971c:	4a04      	ldr	r2, [pc, #16]	@ (8009730 <HAL_IncTick+0x24>)
 800971e:	6013      	str	r3, [r2, #0]
}
 8009720:	bf00      	nop
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	20000040 	.word	0x20000040
 8009730:	20000200 	.word	0x20000200

08009734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009734:	b480      	push	{r7}
 8009736:	af00      	add	r7, sp, #0
  return uwTick;
 8009738:	4b03      	ldr	r3, [pc, #12]	@ (8009748 <HAL_GetTick+0x14>)
 800973a:	681b      	ldr	r3, [r3, #0]
}
 800973c:	4618      	mov	r0, r3
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	20000200 	.word	0x20000200

0800974c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009754:	f7ff ffee 	bl	8009734 <HAL_GetTick>
 8009758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009764:	d005      	beq.n	8009772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009766:	4b0a      	ldr	r3, [pc, #40]	@ (8009790 <HAL_Delay+0x44>)
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	461a      	mov	r2, r3
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	4413      	add	r3, r2
 8009770:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009772:	bf00      	nop
 8009774:	f7ff ffde 	bl	8009734 <HAL_GetTick>
 8009778:	4602      	mov	r2, r0
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	68fa      	ldr	r2, [r7, #12]
 8009780:	429a      	cmp	r2, r3
 8009782:	d8f7      	bhi.n	8009774 <HAL_Delay+0x28>
  {
  }
}
 8009784:	bf00      	nop
 8009786:	bf00      	nop
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	20000040 	.word	0x20000040

08009794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f003 0307 	and.w	r3, r3, #7
 80097a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80097a4:	4b0c      	ldr	r3, [pc, #48]	@ (80097d8 <__NVIC_SetPriorityGrouping+0x44>)
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80097aa:	68ba      	ldr	r2, [r7, #8]
 80097ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80097b0:	4013      	ands	r3, r2
 80097b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80097bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80097c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80097c6:	4a04      	ldr	r2, [pc, #16]	@ (80097d8 <__NVIC_SetPriorityGrouping+0x44>)
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	60d3      	str	r3, [r2, #12]
}
 80097cc:	bf00      	nop
 80097ce:	3714      	adds	r7, #20
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr
 80097d8:	e000ed00 	.word	0xe000ed00

080097dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80097dc:	b480      	push	{r7}
 80097de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80097e0:	4b04      	ldr	r3, [pc, #16]	@ (80097f4 <__NVIC_GetPriorityGrouping+0x18>)
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	0a1b      	lsrs	r3, r3, #8
 80097e6:	f003 0307 	and.w	r3, r3, #7
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr
 80097f4:	e000ed00 	.word	0xe000ed00

080097f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	4603      	mov	r3, r0
 8009800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009806:	2b00      	cmp	r3, #0
 8009808:	db0b      	blt.n	8009822 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800980a:	79fb      	ldrb	r3, [r7, #7]
 800980c:	f003 021f 	and.w	r2, r3, #31
 8009810:	4907      	ldr	r1, [pc, #28]	@ (8009830 <__NVIC_EnableIRQ+0x38>)
 8009812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009816:	095b      	lsrs	r3, r3, #5
 8009818:	2001      	movs	r0, #1
 800981a:	fa00 f202 	lsl.w	r2, r0, r2
 800981e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009822:	bf00      	nop
 8009824:	370c      	adds	r7, #12
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	e000e100 	.word	0xe000e100

08009834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	4603      	mov	r3, r0
 800983c:	6039      	str	r1, [r7, #0]
 800983e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009844:	2b00      	cmp	r3, #0
 8009846:	db0a      	blt.n	800985e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	b2da      	uxtb	r2, r3
 800984c:	490c      	ldr	r1, [pc, #48]	@ (8009880 <__NVIC_SetPriority+0x4c>)
 800984e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009852:	0112      	lsls	r2, r2, #4
 8009854:	b2d2      	uxtb	r2, r2
 8009856:	440b      	add	r3, r1
 8009858:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800985c:	e00a      	b.n	8009874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	b2da      	uxtb	r2, r3
 8009862:	4908      	ldr	r1, [pc, #32]	@ (8009884 <__NVIC_SetPriority+0x50>)
 8009864:	79fb      	ldrb	r3, [r7, #7]
 8009866:	f003 030f 	and.w	r3, r3, #15
 800986a:	3b04      	subs	r3, #4
 800986c:	0112      	lsls	r2, r2, #4
 800986e:	b2d2      	uxtb	r2, r2
 8009870:	440b      	add	r3, r1
 8009872:	761a      	strb	r2, [r3, #24]
}
 8009874:	bf00      	nop
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr
 8009880:	e000e100 	.word	0xe000e100
 8009884:	e000ed00 	.word	0xe000ed00

08009888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009888:	b480      	push	{r7}
 800988a:	b089      	sub	sp, #36	@ 0x24
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f003 0307 	and.w	r3, r3, #7
 800989a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	f1c3 0307 	rsb	r3, r3, #7
 80098a2:	2b04      	cmp	r3, #4
 80098a4:	bf28      	it	cs
 80098a6:	2304      	movcs	r3, #4
 80098a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	3304      	adds	r3, #4
 80098ae:	2b06      	cmp	r3, #6
 80098b0:	d902      	bls.n	80098b8 <NVIC_EncodePriority+0x30>
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	3b03      	subs	r3, #3
 80098b6:	e000      	b.n	80098ba <NVIC_EncodePriority+0x32>
 80098b8:	2300      	movs	r3, #0
 80098ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80098bc:	f04f 32ff 	mov.w	r2, #4294967295
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	fa02 f303 	lsl.w	r3, r2, r3
 80098c6:	43da      	mvns	r2, r3
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	401a      	ands	r2, r3
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80098d0:	f04f 31ff 	mov.w	r1, #4294967295
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	fa01 f303 	lsl.w	r3, r1, r3
 80098da:	43d9      	mvns	r1, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80098e0:	4313      	orrs	r3, r2
         );
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3724      	adds	r7, #36	@ 0x24
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
	...

080098f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	3b01      	subs	r3, #1
 80098fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009900:	d301      	bcc.n	8009906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009902:	2301      	movs	r3, #1
 8009904:	e00f      	b.n	8009926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009906:	4a0a      	ldr	r2, [pc, #40]	@ (8009930 <SysTick_Config+0x40>)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	3b01      	subs	r3, #1
 800990c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800990e:	210f      	movs	r1, #15
 8009910:	f04f 30ff 	mov.w	r0, #4294967295
 8009914:	f7ff ff8e 	bl	8009834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009918:	4b05      	ldr	r3, [pc, #20]	@ (8009930 <SysTick_Config+0x40>)
 800991a:	2200      	movs	r2, #0
 800991c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800991e:	4b04      	ldr	r3, [pc, #16]	@ (8009930 <SysTick_Config+0x40>)
 8009920:	2207      	movs	r2, #7
 8009922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3708      	adds	r7, #8
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	e000e010 	.word	0xe000e010

08009934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f7ff ff29 	bl	8009794 <__NVIC_SetPriorityGrouping>
}
 8009942:	bf00      	nop
 8009944:	3708      	adds	r7, #8
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800994a:	b580      	push	{r7, lr}
 800994c:	b086      	sub	sp, #24
 800994e:	af00      	add	r7, sp, #0
 8009950:	4603      	mov	r3, r0
 8009952:	60b9      	str	r1, [r7, #8]
 8009954:	607a      	str	r2, [r7, #4]
 8009956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009958:	2300      	movs	r3, #0
 800995a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800995c:	f7ff ff3e 	bl	80097dc <__NVIC_GetPriorityGrouping>
 8009960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	68b9      	ldr	r1, [r7, #8]
 8009966:	6978      	ldr	r0, [r7, #20]
 8009968:	f7ff ff8e 	bl	8009888 <NVIC_EncodePriority>
 800996c:	4602      	mov	r2, r0
 800996e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009972:	4611      	mov	r1, r2
 8009974:	4618      	mov	r0, r3
 8009976:	f7ff ff5d 	bl	8009834 <__NVIC_SetPriority>
}
 800997a:	bf00      	nop
 800997c:	3718      	adds	r7, #24
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b082      	sub	sp, #8
 8009986:	af00      	add	r7, sp, #0
 8009988:	4603      	mov	r3, r0
 800998a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800998c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009990:	4618      	mov	r0, r3
 8009992:	f7ff ff31 	bl	80097f8 <__NVIC_EnableIRQ>
}
 8009996:	bf00      	nop
 8009998:	3708      	adds	r7, #8
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b082      	sub	sp, #8
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f7ff ffa2 	bl	80098f0 <SysTick_Config>
 80099ac:	4603      	mov	r3, r0
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3708      	adds	r7, #8
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b084      	sub	sp, #16
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80099c4:	f7ff feb6 	bl	8009734 <HAL_GetTick>
 80099c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d008      	beq.n	80099e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2280      	movs	r2, #128	@ 0x80
 80099da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e052      	b.n	8009a8e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f022 0216 	bic.w	r2, r2, #22
 80099f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	695a      	ldr	r2, [r3, #20]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009a06:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d103      	bne.n	8009a18 <HAL_DMA_Abort+0x62>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d007      	beq.n	8009a28 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f022 0208 	bic.w	r2, r2, #8
 8009a26:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f022 0201 	bic.w	r2, r2, #1
 8009a36:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009a38:	e013      	b.n	8009a62 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009a3a:	f7ff fe7b 	bl	8009734 <HAL_GetTick>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	1ad3      	subs	r3, r2, r3
 8009a44:	2b05      	cmp	r3, #5
 8009a46:	d90c      	bls.n	8009a62 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2220      	movs	r2, #32
 8009a4c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2203      	movs	r2, #3
 8009a52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8009a5e:	2303      	movs	r3, #3
 8009a60:	e015      	b.n	8009a8e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f003 0301 	and.w	r3, r3, #1
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d1e4      	bne.n	8009a3a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a74:	223f      	movs	r2, #63	@ 0x3f
 8009a76:	409a      	lsls	r2, r3
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009a96:	b480      	push	{r7}
 8009a98:	b083      	sub	sp, #12
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	d004      	beq.n	8009ab4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2280      	movs	r2, #128	@ 0x80
 8009aae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e00c      	b.n	8009ace <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2205      	movs	r2, #5
 8009ab8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f022 0201 	bic.w	r2, r2, #1
 8009aca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	370c      	adds	r7, #12
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr
	...

08009adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b089      	sub	sp, #36	@ 0x24
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009aea:	2300      	movs	r3, #0
 8009aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009aee:	2300      	movs	r3, #0
 8009af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009af2:	2300      	movs	r3, #0
 8009af4:	61fb      	str	r3, [r7, #28]
 8009af6:	e165      	b.n	8009dc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009af8:	2201      	movs	r2, #1
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	fa02 f303 	lsl.w	r3, r2, r3
 8009b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	697a      	ldr	r2, [r7, #20]
 8009b08:	4013      	ands	r3, r2
 8009b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009b0c:	693a      	ldr	r2, [r7, #16]
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	f040 8154 	bne.w	8009dbe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	f003 0303 	and.w	r3, r3, #3
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d005      	beq.n	8009b2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009b2a:	2b02      	cmp	r3, #2
 8009b2c:	d130      	bne.n	8009b90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	005b      	lsls	r3, r3, #1
 8009b38:	2203      	movs	r2, #3
 8009b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b3e:	43db      	mvns	r3, r3
 8009b40:	69ba      	ldr	r2, [r7, #24]
 8009b42:	4013      	ands	r3, r2
 8009b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	68da      	ldr	r2, [r3, #12]
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	005b      	lsls	r3, r3, #1
 8009b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b52:	69ba      	ldr	r2, [r7, #24]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	69ba      	ldr	r2, [r7, #24]
 8009b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009b64:	2201      	movs	r2, #1
 8009b66:	69fb      	ldr	r3, [r7, #28]
 8009b68:	fa02 f303 	lsl.w	r3, r2, r3
 8009b6c:	43db      	mvns	r3, r3
 8009b6e:	69ba      	ldr	r2, [r7, #24]
 8009b70:	4013      	ands	r3, r2
 8009b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	091b      	lsrs	r3, r3, #4
 8009b7a:	f003 0201 	and.w	r2, r3, #1
 8009b7e:	69fb      	ldr	r3, [r7, #28]
 8009b80:	fa02 f303 	lsl.w	r3, r2, r3
 8009b84:	69ba      	ldr	r2, [r7, #24]
 8009b86:	4313      	orrs	r3, r2
 8009b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	69ba      	ldr	r2, [r7, #24]
 8009b8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	f003 0303 	and.w	r3, r3, #3
 8009b98:	2b03      	cmp	r3, #3
 8009b9a:	d017      	beq.n	8009bcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	005b      	lsls	r3, r3, #1
 8009ba6:	2203      	movs	r2, #3
 8009ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bac:	43db      	mvns	r3, r3
 8009bae:	69ba      	ldr	r2, [r7, #24]
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	689a      	ldr	r2, [r3, #8]
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	005b      	lsls	r3, r3, #1
 8009bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc0:	69ba      	ldr	r2, [r7, #24]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	69ba      	ldr	r2, [r7, #24]
 8009bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	f003 0303 	and.w	r3, r3, #3
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	d123      	bne.n	8009c20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	08da      	lsrs	r2, r3, #3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	3208      	adds	r2, #8
 8009be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	f003 0307 	and.w	r3, r3, #7
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	220f      	movs	r2, #15
 8009bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf4:	43db      	mvns	r3, r3
 8009bf6:	69ba      	ldr	r2, [r7, #24]
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	691a      	ldr	r2, [r3, #16]
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	f003 0307 	and.w	r3, r3, #7
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	fa02 f303 	lsl.w	r3, r2, r3
 8009c0c:	69ba      	ldr	r2, [r7, #24]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	08da      	lsrs	r2, r3, #3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	3208      	adds	r2, #8
 8009c1a:	69b9      	ldr	r1, [r7, #24]
 8009c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	005b      	lsls	r3, r3, #1
 8009c2a:	2203      	movs	r2, #3
 8009c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c30:	43db      	mvns	r3, r3
 8009c32:	69ba      	ldr	r2, [r7, #24]
 8009c34:	4013      	ands	r3, r2
 8009c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	f003 0203 	and.w	r2, r3, #3
 8009c40:	69fb      	ldr	r3, [r7, #28]
 8009c42:	005b      	lsls	r3, r3, #1
 8009c44:	fa02 f303 	lsl.w	r3, r2, r3
 8009c48:	69ba      	ldr	r2, [r7, #24]
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	69ba      	ldr	r2, [r7, #24]
 8009c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f000 80ae 	beq.w	8009dbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c62:	2300      	movs	r3, #0
 8009c64:	60fb      	str	r3, [r7, #12]
 8009c66:	4b5d      	ldr	r3, [pc, #372]	@ (8009ddc <HAL_GPIO_Init+0x300>)
 8009c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c6a:	4a5c      	ldr	r2, [pc, #368]	@ (8009ddc <HAL_GPIO_Init+0x300>)
 8009c6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8009c72:	4b5a      	ldr	r3, [pc, #360]	@ (8009ddc <HAL_GPIO_Init+0x300>)
 8009c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c7a:	60fb      	str	r3, [r7, #12]
 8009c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009c7e:	4a58      	ldr	r2, [pc, #352]	@ (8009de0 <HAL_GPIO_Init+0x304>)
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	089b      	lsrs	r3, r3, #2
 8009c84:	3302      	adds	r3, #2
 8009c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	f003 0303 	and.w	r3, r3, #3
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	220f      	movs	r2, #15
 8009c96:	fa02 f303 	lsl.w	r3, r2, r3
 8009c9a:	43db      	mvns	r3, r3
 8009c9c:	69ba      	ldr	r2, [r7, #24]
 8009c9e:	4013      	ands	r3, r2
 8009ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a4f      	ldr	r2, [pc, #316]	@ (8009de4 <HAL_GPIO_Init+0x308>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d025      	beq.n	8009cf6 <HAL_GPIO_Init+0x21a>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a4e      	ldr	r2, [pc, #312]	@ (8009de8 <HAL_GPIO_Init+0x30c>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d01f      	beq.n	8009cf2 <HAL_GPIO_Init+0x216>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a4d      	ldr	r2, [pc, #308]	@ (8009dec <HAL_GPIO_Init+0x310>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d019      	beq.n	8009cee <HAL_GPIO_Init+0x212>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a4c      	ldr	r2, [pc, #304]	@ (8009df0 <HAL_GPIO_Init+0x314>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d013      	beq.n	8009cea <HAL_GPIO_Init+0x20e>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4a4b      	ldr	r2, [pc, #300]	@ (8009df4 <HAL_GPIO_Init+0x318>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d00d      	beq.n	8009ce6 <HAL_GPIO_Init+0x20a>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4a4a      	ldr	r2, [pc, #296]	@ (8009df8 <HAL_GPIO_Init+0x31c>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d007      	beq.n	8009ce2 <HAL_GPIO_Init+0x206>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4a49      	ldr	r2, [pc, #292]	@ (8009dfc <HAL_GPIO_Init+0x320>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d101      	bne.n	8009cde <HAL_GPIO_Init+0x202>
 8009cda:	2306      	movs	r3, #6
 8009cdc:	e00c      	b.n	8009cf8 <HAL_GPIO_Init+0x21c>
 8009cde:	2307      	movs	r3, #7
 8009ce0:	e00a      	b.n	8009cf8 <HAL_GPIO_Init+0x21c>
 8009ce2:	2305      	movs	r3, #5
 8009ce4:	e008      	b.n	8009cf8 <HAL_GPIO_Init+0x21c>
 8009ce6:	2304      	movs	r3, #4
 8009ce8:	e006      	b.n	8009cf8 <HAL_GPIO_Init+0x21c>
 8009cea:	2303      	movs	r3, #3
 8009cec:	e004      	b.n	8009cf8 <HAL_GPIO_Init+0x21c>
 8009cee:	2302      	movs	r3, #2
 8009cf0:	e002      	b.n	8009cf8 <HAL_GPIO_Init+0x21c>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e000      	b.n	8009cf8 <HAL_GPIO_Init+0x21c>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	69fa      	ldr	r2, [r7, #28]
 8009cfa:	f002 0203 	and.w	r2, r2, #3
 8009cfe:	0092      	lsls	r2, r2, #2
 8009d00:	4093      	lsls	r3, r2
 8009d02:	69ba      	ldr	r2, [r7, #24]
 8009d04:	4313      	orrs	r3, r2
 8009d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009d08:	4935      	ldr	r1, [pc, #212]	@ (8009de0 <HAL_GPIO_Init+0x304>)
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	089b      	lsrs	r3, r3, #2
 8009d0e:	3302      	adds	r3, #2
 8009d10:	69ba      	ldr	r2, [r7, #24]
 8009d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009d16:	4b3a      	ldr	r3, [pc, #232]	@ (8009e00 <HAL_GPIO_Init+0x324>)
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	43db      	mvns	r3, r3
 8009d20:	69ba      	ldr	r2, [r7, #24]
 8009d22:	4013      	ands	r3, r2
 8009d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d003      	beq.n	8009d3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8009d32:	69ba      	ldr	r2, [r7, #24]
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009d3a:	4a31      	ldr	r2, [pc, #196]	@ (8009e00 <HAL_GPIO_Init+0x324>)
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009d40:	4b2f      	ldr	r3, [pc, #188]	@ (8009e00 <HAL_GPIO_Init+0x324>)
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	43db      	mvns	r3, r3
 8009d4a:	69ba      	ldr	r2, [r7, #24]
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d003      	beq.n	8009d64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8009d5c:	69ba      	ldr	r2, [r7, #24]
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	4313      	orrs	r3, r2
 8009d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009d64:	4a26      	ldr	r2, [pc, #152]	@ (8009e00 <HAL_GPIO_Init+0x324>)
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009d6a:	4b25      	ldr	r3, [pc, #148]	@ (8009e00 <HAL_GPIO_Init+0x324>)
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	43db      	mvns	r3, r3
 8009d74:	69ba      	ldr	r2, [r7, #24]
 8009d76:	4013      	ands	r3, r2
 8009d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d003      	beq.n	8009d8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8009d86:	69ba      	ldr	r2, [r7, #24]
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8009e00 <HAL_GPIO_Init+0x324>)
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009d94:	4b1a      	ldr	r3, [pc, #104]	@ (8009e00 <HAL_GPIO_Init+0x324>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	43db      	mvns	r3, r3
 8009d9e:	69ba      	ldr	r2, [r7, #24]
 8009da0:	4013      	ands	r3, r2
 8009da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d003      	beq.n	8009db8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009db0:	69ba      	ldr	r2, [r7, #24]
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009db8:	4a11      	ldr	r2, [pc, #68]	@ (8009e00 <HAL_GPIO_Init+0x324>)
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	61fb      	str	r3, [r7, #28]
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	2b0f      	cmp	r3, #15
 8009dc8:	f67f ae96 	bls.w	8009af8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009dcc:	bf00      	nop
 8009dce:	bf00      	nop
 8009dd0:	3724      	adds	r7, #36	@ 0x24
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	40023800 	.word	0x40023800
 8009de0:	40013800 	.word	0x40013800
 8009de4:	40020000 	.word	0x40020000
 8009de8:	40020400 	.word	0x40020400
 8009dec:	40020800 	.word	0x40020800
 8009df0:	40020c00 	.word	0x40020c00
 8009df4:	40021000 	.word	0x40021000
 8009df8:	40021400 	.word	0x40021400
 8009dfc:	40021800 	.word	0x40021800
 8009e00:	40013c00 	.word	0x40013c00

08009e04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	691a      	ldr	r2, [r3, #16]
 8009e14:	887b      	ldrh	r3, [r7, #2]
 8009e16:	4013      	ands	r3, r2
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d002      	beq.n	8009e22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	73fb      	strb	r3, [r7, #15]
 8009e20:	e001      	b.n	8009e26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009e22:	2300      	movs	r3, #0
 8009e24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3714      	adds	r7, #20
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	807b      	strh	r3, [r7, #2]
 8009e40:	4613      	mov	r3, r2
 8009e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009e44:	787b      	ldrb	r3, [r7, #1]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d003      	beq.n	8009e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009e4a:	887a      	ldrh	r2, [r7, #2]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009e50:	e003      	b.n	8009e5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009e52:	887b      	ldrh	r3, [r7, #2]
 8009e54:	041a      	lsls	r2, r3, #16
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	619a      	str	r2, [r3, #24]
}
 8009e5a:	bf00      	nop
 8009e5c:	370c      	adds	r7, #12
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr
	...

08009e68 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009e72:	2300      	movs	r3, #0
 8009e74:	603b      	str	r3, [r7, #0]
 8009e76:	4b20      	ldr	r3, [pc, #128]	@ (8009ef8 <HAL_PWREx_EnableOverDrive+0x90>)
 8009e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e7a:	4a1f      	ldr	r2, [pc, #124]	@ (8009ef8 <HAL_PWREx_EnableOverDrive+0x90>)
 8009e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8009e82:	4b1d      	ldr	r3, [pc, #116]	@ (8009ef8 <HAL_PWREx_EnableOverDrive+0x90>)
 8009e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e8a:	603b      	str	r3, [r7, #0]
 8009e8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8009efc <HAL_PWREx_EnableOverDrive+0x94>)
 8009e90:	2201      	movs	r2, #1
 8009e92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009e94:	f7ff fc4e 	bl	8009734 <HAL_GetTick>
 8009e98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009e9a:	e009      	b.n	8009eb0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009e9c:	f7ff fc4a 	bl	8009734 <HAL_GetTick>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009eaa:	d901      	bls.n	8009eb0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009eac:	2303      	movs	r3, #3
 8009eae:	e01f      	b.n	8009ef0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009eb0:	4b13      	ldr	r3, [pc, #76]	@ (8009f00 <HAL_PWREx_EnableOverDrive+0x98>)
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ebc:	d1ee      	bne.n	8009e9c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009ebe:	4b11      	ldr	r3, [pc, #68]	@ (8009f04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009ec4:	f7ff fc36 	bl	8009734 <HAL_GetTick>
 8009ec8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009eca:	e009      	b.n	8009ee0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009ecc:	f7ff fc32 	bl	8009734 <HAL_GetTick>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	1ad3      	subs	r3, r2, r3
 8009ed6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009eda:	d901      	bls.n	8009ee0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009edc:	2303      	movs	r3, #3
 8009ede:	e007      	b.n	8009ef0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009ee0:	4b07      	ldr	r3, [pc, #28]	@ (8009f00 <HAL_PWREx_EnableOverDrive+0x98>)
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ee8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009eec:	d1ee      	bne.n	8009ecc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	40023800 	.word	0x40023800
 8009efc:	420e0040 	.word	0x420e0040
 8009f00:	40007000 	.word	0x40007000
 8009f04:	420e0044 	.word	0x420e0044

08009f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d101      	bne.n	8009f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e0cc      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009f1c:	4b68      	ldr	r3, [pc, #416]	@ (800a0c0 <HAL_RCC_ClockConfig+0x1b8>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f003 030f 	and.w	r3, r3, #15
 8009f24:	683a      	ldr	r2, [r7, #0]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d90c      	bls.n	8009f44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f2a:	4b65      	ldr	r3, [pc, #404]	@ (800a0c0 <HAL_RCC_ClockConfig+0x1b8>)
 8009f2c:	683a      	ldr	r2, [r7, #0]
 8009f2e:	b2d2      	uxtb	r2, r2
 8009f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f32:	4b63      	ldr	r3, [pc, #396]	@ (800a0c0 <HAL_RCC_ClockConfig+0x1b8>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f003 030f 	and.w	r3, r3, #15
 8009f3a:	683a      	ldr	r2, [r7, #0]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d001      	beq.n	8009f44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	e0b8      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f003 0302 	and.w	r3, r3, #2
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d020      	beq.n	8009f92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f003 0304 	and.w	r3, r3, #4
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d005      	beq.n	8009f68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009f5c:	4b59      	ldr	r3, [pc, #356]	@ (800a0c4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	4a58      	ldr	r2, [pc, #352]	@ (800a0c4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009f66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f003 0308 	and.w	r3, r3, #8
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d005      	beq.n	8009f80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009f74:	4b53      	ldr	r3, [pc, #332]	@ (800a0c4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	4a52      	ldr	r2, [pc, #328]	@ (800a0c4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009f7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f80:	4b50      	ldr	r3, [pc, #320]	@ (800a0c4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	494d      	ldr	r1, [pc, #308]	@ (800a0c4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f003 0301 	and.w	r3, r3, #1
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d044      	beq.n	800a028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d107      	bne.n	8009fb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009fa6:	4b47      	ldr	r3, [pc, #284]	@ (800a0c4 <HAL_RCC_ClockConfig+0x1bc>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d119      	bne.n	8009fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e07f      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d003      	beq.n	8009fc6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009fc2:	2b03      	cmp	r3, #3
 8009fc4:	d107      	bne.n	8009fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009fc6:	4b3f      	ldr	r3, [pc, #252]	@ (800a0c4 <HAL_RCC_ClockConfig+0x1bc>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d109      	bne.n	8009fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e06f      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009fd6:	4b3b      	ldr	r3, [pc, #236]	@ (800a0c4 <HAL_RCC_ClockConfig+0x1bc>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f003 0302 	and.w	r3, r3, #2
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d101      	bne.n	8009fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e067      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009fe6:	4b37      	ldr	r3, [pc, #220]	@ (800a0c4 <HAL_RCC_ClockConfig+0x1bc>)
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	f023 0203 	bic.w	r2, r3, #3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	4934      	ldr	r1, [pc, #208]	@ (800a0c4 <HAL_RCC_ClockConfig+0x1bc>)
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009ff8:	f7ff fb9c 	bl	8009734 <HAL_GetTick>
 8009ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ffe:	e00a      	b.n	800a016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a000:	f7ff fb98 	bl	8009734 <HAL_GetTick>
 800a004:	4602      	mov	r2, r0
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	1ad3      	subs	r3, r2, r3
 800a00a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a00e:	4293      	cmp	r3, r2
 800a010:	d901      	bls.n	800a016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a012:	2303      	movs	r3, #3
 800a014:	e04f      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a016:	4b2b      	ldr	r3, [pc, #172]	@ (800a0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	f003 020c 	and.w	r2, r3, #12
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	429a      	cmp	r2, r3
 800a026:	d1eb      	bne.n	800a000 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a028:	4b25      	ldr	r3, [pc, #148]	@ (800a0c0 <HAL_RCC_ClockConfig+0x1b8>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f003 030f 	and.w	r3, r3, #15
 800a030:	683a      	ldr	r2, [r7, #0]
 800a032:	429a      	cmp	r2, r3
 800a034:	d20c      	bcs.n	800a050 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a036:	4b22      	ldr	r3, [pc, #136]	@ (800a0c0 <HAL_RCC_ClockConfig+0x1b8>)
 800a038:	683a      	ldr	r2, [r7, #0]
 800a03a:	b2d2      	uxtb	r2, r2
 800a03c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a03e:	4b20      	ldr	r3, [pc, #128]	@ (800a0c0 <HAL_RCC_ClockConfig+0x1b8>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f003 030f 	and.w	r3, r3, #15
 800a046:	683a      	ldr	r2, [r7, #0]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d001      	beq.n	800a050 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	e032      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 0304 	and.w	r3, r3, #4
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d008      	beq.n	800a06e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a05c:	4b19      	ldr	r3, [pc, #100]	@ (800a0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	4916      	ldr	r1, [pc, #88]	@ (800a0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800a06a:	4313      	orrs	r3, r2
 800a06c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f003 0308 	and.w	r3, r3, #8
 800a076:	2b00      	cmp	r3, #0
 800a078:	d009      	beq.n	800a08e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a07a:	4b12      	ldr	r3, [pc, #72]	@ (800a0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	00db      	lsls	r3, r3, #3
 800a088:	490e      	ldr	r1, [pc, #56]	@ (800a0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800a08a:	4313      	orrs	r3, r2
 800a08c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a08e:	f000 f855 	bl	800a13c <HAL_RCC_GetSysClockFreq>
 800a092:	4602      	mov	r2, r0
 800a094:	4b0b      	ldr	r3, [pc, #44]	@ (800a0c4 <HAL_RCC_ClockConfig+0x1bc>)
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	091b      	lsrs	r3, r3, #4
 800a09a:	f003 030f 	and.w	r3, r3, #15
 800a09e:	490a      	ldr	r1, [pc, #40]	@ (800a0c8 <HAL_RCC_ClockConfig+0x1c0>)
 800a0a0:	5ccb      	ldrb	r3, [r1, r3]
 800a0a2:	fa22 f303 	lsr.w	r3, r2, r3
 800a0a6:	4a09      	ldr	r2, [pc, #36]	@ (800a0cc <HAL_RCC_ClockConfig+0x1c4>)
 800a0a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a0aa:	4b09      	ldr	r3, [pc, #36]	@ (800a0d0 <HAL_RCC_ClockConfig+0x1c8>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7ff fafc 	bl	80096ac <HAL_InitTick>

  return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	40023c00 	.word	0x40023c00
 800a0c4:	40023800 	.word	0x40023800
 800a0c8:	0800e378 	.word	0x0800e378
 800a0cc:	20000038 	.word	0x20000038
 800a0d0:	2000003c 	.word	0x2000003c

0800a0d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a0d8:	4b03      	ldr	r3, [pc, #12]	@ (800a0e8 <HAL_RCC_GetHCLKFreq+0x14>)
 800a0da:	681b      	ldr	r3, [r3, #0]
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	20000038 	.word	0x20000038

0800a0ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a0f0:	f7ff fff0 	bl	800a0d4 <HAL_RCC_GetHCLKFreq>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	4b05      	ldr	r3, [pc, #20]	@ (800a10c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	0a9b      	lsrs	r3, r3, #10
 800a0fc:	f003 0307 	and.w	r3, r3, #7
 800a100:	4903      	ldr	r1, [pc, #12]	@ (800a110 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a102:	5ccb      	ldrb	r3, [r1, r3]
 800a104:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a108:	4618      	mov	r0, r3
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	40023800 	.word	0x40023800
 800a110:	0800e388 	.word	0x0800e388

0800a114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a118:	f7ff ffdc 	bl	800a0d4 <HAL_RCC_GetHCLKFreq>
 800a11c:	4602      	mov	r2, r0
 800a11e:	4b05      	ldr	r3, [pc, #20]	@ (800a134 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	0b5b      	lsrs	r3, r3, #13
 800a124:	f003 0307 	and.w	r3, r3, #7
 800a128:	4903      	ldr	r1, [pc, #12]	@ (800a138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a12a:	5ccb      	ldrb	r3, [r1, r3]
 800a12c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a130:	4618      	mov	r0, r3
 800a132:	bd80      	pop	{r7, pc}
 800a134:	40023800 	.word	0x40023800
 800a138:	0800e388 	.word	0x0800e388

0800a13c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a13c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a140:	b0a6      	sub	sp, #152	@ 0x98
 800a142:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a144:	2300      	movs	r3, #0
 800a146:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800a14a:	2300      	movs	r3, #0
 800a14c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800a150:	2300      	movs	r3, #0
 800a152:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800a156:	2300      	movs	r3, #0
 800a158:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800a15c:	2300      	movs	r3, #0
 800a15e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a162:	4bc8      	ldr	r3, [pc, #800]	@ (800a484 <HAL_RCC_GetSysClockFreq+0x348>)
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	f003 030c 	and.w	r3, r3, #12
 800a16a:	2b0c      	cmp	r3, #12
 800a16c:	f200 817e 	bhi.w	800a46c <HAL_RCC_GetSysClockFreq+0x330>
 800a170:	a201      	add	r2, pc, #4	@ (adr r2, 800a178 <HAL_RCC_GetSysClockFreq+0x3c>)
 800a172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a176:	bf00      	nop
 800a178:	0800a1ad 	.word	0x0800a1ad
 800a17c:	0800a46d 	.word	0x0800a46d
 800a180:	0800a46d 	.word	0x0800a46d
 800a184:	0800a46d 	.word	0x0800a46d
 800a188:	0800a1b5 	.word	0x0800a1b5
 800a18c:	0800a46d 	.word	0x0800a46d
 800a190:	0800a46d 	.word	0x0800a46d
 800a194:	0800a46d 	.word	0x0800a46d
 800a198:	0800a1bd 	.word	0x0800a1bd
 800a19c:	0800a46d 	.word	0x0800a46d
 800a1a0:	0800a46d 	.word	0x0800a46d
 800a1a4:	0800a46d 	.word	0x0800a46d
 800a1a8:	0800a327 	.word	0x0800a327
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a1ac:	4bb6      	ldr	r3, [pc, #728]	@ (800a488 <HAL_RCC_GetSysClockFreq+0x34c>)
 800a1ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800a1b2:	e15f      	b.n	800a474 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a1b4:	4bb5      	ldr	r3, [pc, #724]	@ (800a48c <HAL_RCC_GetSysClockFreq+0x350>)
 800a1b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800a1ba:	e15b      	b.n	800a474 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a1bc:	4bb1      	ldr	r3, [pc, #708]	@ (800a484 <HAL_RCC_GetSysClockFreq+0x348>)
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a1c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a1c8:	4bae      	ldr	r3, [pc, #696]	@ (800a484 <HAL_RCC_GetSysClockFreq+0x348>)
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d031      	beq.n	800a238 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a1d4:	4bab      	ldr	r3, [pc, #684]	@ (800a484 <HAL_RCC_GetSysClockFreq+0x348>)
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	099b      	lsrs	r3, r3, #6
 800a1da:	2200      	movs	r2, #0
 800a1dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a1de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a1e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a1e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1e6:	663b      	str	r3, [r7, #96]	@ 0x60
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	667b      	str	r3, [r7, #100]	@ 0x64
 800a1ec:	4ba7      	ldr	r3, [pc, #668]	@ (800a48c <HAL_RCC_GetSysClockFreq+0x350>)
 800a1ee:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800a1f2:	462a      	mov	r2, r5
 800a1f4:	fb03 f202 	mul.w	r2, r3, r2
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	4621      	mov	r1, r4
 800a1fc:	fb01 f303 	mul.w	r3, r1, r3
 800a200:	4413      	add	r3, r2
 800a202:	4aa2      	ldr	r2, [pc, #648]	@ (800a48c <HAL_RCC_GetSysClockFreq+0x350>)
 800a204:	4621      	mov	r1, r4
 800a206:	fba1 1202 	umull	r1, r2, r1, r2
 800a20a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a20c:	460a      	mov	r2, r1
 800a20e:	67ba      	str	r2, [r7, #120]	@ 0x78
 800a210:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a212:	4413      	add	r3, r2
 800a214:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a216:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a21a:	2200      	movs	r2, #0
 800a21c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a21e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800a220:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a224:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800a228:	f7fe f842 	bl	80082b0 <__aeabi_uldivmod>
 800a22c:	4602      	mov	r2, r0
 800a22e:	460b      	mov	r3, r1
 800a230:	4613      	mov	r3, r2
 800a232:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a236:	e064      	b.n	800a302 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a238:	4b92      	ldr	r3, [pc, #584]	@ (800a484 <HAL_RCC_GetSysClockFreq+0x348>)
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	099b      	lsrs	r3, r3, #6
 800a23e:	2200      	movs	r2, #0
 800a240:	653b      	str	r3, [r7, #80]	@ 0x50
 800a242:	657a      	str	r2, [r7, #84]	@ 0x54
 800a244:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a24a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a24c:	2300      	movs	r3, #0
 800a24e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a250:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800a254:	4622      	mov	r2, r4
 800a256:	462b      	mov	r3, r5
 800a258:	f04f 0000 	mov.w	r0, #0
 800a25c:	f04f 0100 	mov.w	r1, #0
 800a260:	0159      	lsls	r1, r3, #5
 800a262:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a266:	0150      	lsls	r0, r2, #5
 800a268:	4602      	mov	r2, r0
 800a26a:	460b      	mov	r3, r1
 800a26c:	4621      	mov	r1, r4
 800a26e:	1a51      	subs	r1, r2, r1
 800a270:	6139      	str	r1, [r7, #16]
 800a272:	4629      	mov	r1, r5
 800a274:	eb63 0301 	sbc.w	r3, r3, r1
 800a278:	617b      	str	r3, [r7, #20]
 800a27a:	f04f 0200 	mov.w	r2, #0
 800a27e:	f04f 0300 	mov.w	r3, #0
 800a282:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a286:	4659      	mov	r1, fp
 800a288:	018b      	lsls	r3, r1, #6
 800a28a:	4651      	mov	r1, sl
 800a28c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a290:	4651      	mov	r1, sl
 800a292:	018a      	lsls	r2, r1, #6
 800a294:	4651      	mov	r1, sl
 800a296:	ebb2 0801 	subs.w	r8, r2, r1
 800a29a:	4659      	mov	r1, fp
 800a29c:	eb63 0901 	sbc.w	r9, r3, r1
 800a2a0:	f04f 0200 	mov.w	r2, #0
 800a2a4:	f04f 0300 	mov.w	r3, #0
 800a2a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a2ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a2b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a2b4:	4690      	mov	r8, r2
 800a2b6:	4699      	mov	r9, r3
 800a2b8:	4623      	mov	r3, r4
 800a2ba:	eb18 0303 	adds.w	r3, r8, r3
 800a2be:	60bb      	str	r3, [r7, #8]
 800a2c0:	462b      	mov	r3, r5
 800a2c2:	eb49 0303 	adc.w	r3, r9, r3
 800a2c6:	60fb      	str	r3, [r7, #12]
 800a2c8:	f04f 0200 	mov.w	r2, #0
 800a2cc:	f04f 0300 	mov.w	r3, #0
 800a2d0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	028b      	lsls	r3, r1, #10
 800a2d8:	4621      	mov	r1, r4
 800a2da:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a2de:	4621      	mov	r1, r4
 800a2e0:	028a      	lsls	r2, r1, #10
 800a2e2:	4610      	mov	r0, r2
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2ee:	647a      	str	r2, [r7, #68]	@ 0x44
 800a2f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a2f4:	f7fd ffdc 	bl	80082b0 <__aeabi_uldivmod>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a302:	4b60      	ldr	r3, [pc, #384]	@ (800a484 <HAL_RCC_GetSysClockFreq+0x348>)
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	0c1b      	lsrs	r3, r3, #16
 800a308:	f003 0303 	and.w	r3, r3, #3
 800a30c:	3301      	adds	r3, #1
 800a30e:	005b      	lsls	r3, r3, #1
 800a310:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800a314:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a318:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a31c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a320:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800a324:	e0a6      	b.n	800a474 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a326:	4b57      	ldr	r3, [pc, #348]	@ (800a484 <HAL_RCC_GetSysClockFreq+0x348>)
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a32e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a332:	4b54      	ldr	r3, [pc, #336]	@ (800a484 <HAL_RCC_GetSysClockFreq+0x348>)
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d02a      	beq.n	800a394 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a33e:	4b51      	ldr	r3, [pc, #324]	@ (800a484 <HAL_RCC_GetSysClockFreq+0x348>)
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	099b      	lsrs	r3, r3, #6
 800a344:	2200      	movs	r2, #0
 800a346:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a348:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a34a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a34c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a350:	2100      	movs	r1, #0
 800a352:	4b4e      	ldr	r3, [pc, #312]	@ (800a48c <HAL_RCC_GetSysClockFreq+0x350>)
 800a354:	fb03 f201 	mul.w	r2, r3, r1
 800a358:	2300      	movs	r3, #0
 800a35a:	fb00 f303 	mul.w	r3, r0, r3
 800a35e:	4413      	add	r3, r2
 800a360:	4a4a      	ldr	r2, [pc, #296]	@ (800a48c <HAL_RCC_GetSysClockFreq+0x350>)
 800a362:	fba0 1202 	umull	r1, r2, r0, r2
 800a366:	677a      	str	r2, [r7, #116]	@ 0x74
 800a368:	460a      	mov	r2, r1
 800a36a:	673a      	str	r2, [r7, #112]	@ 0x70
 800a36c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a36e:	4413      	add	r3, r2
 800a370:	677b      	str	r3, [r7, #116]	@ 0x74
 800a372:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a376:	2200      	movs	r2, #0
 800a378:	633b      	str	r3, [r7, #48]	@ 0x30
 800a37a:	637a      	str	r2, [r7, #52]	@ 0x34
 800a37c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800a380:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800a384:	f7fd ff94 	bl	80082b0 <__aeabi_uldivmod>
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	4613      	mov	r3, r2
 800a38e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a392:	e05b      	b.n	800a44c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a394:	4b3b      	ldr	r3, [pc, #236]	@ (800a484 <HAL_RCC_GetSysClockFreq+0x348>)
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	099b      	lsrs	r3, r3, #6
 800a39a:	2200      	movs	r2, #0
 800a39c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a39e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3a6:	623b      	str	r3, [r7, #32]
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a3b0:	4642      	mov	r2, r8
 800a3b2:	464b      	mov	r3, r9
 800a3b4:	f04f 0000 	mov.w	r0, #0
 800a3b8:	f04f 0100 	mov.w	r1, #0
 800a3bc:	0159      	lsls	r1, r3, #5
 800a3be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a3c2:	0150      	lsls	r0, r2, #5
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	4641      	mov	r1, r8
 800a3ca:	ebb2 0a01 	subs.w	sl, r2, r1
 800a3ce:	4649      	mov	r1, r9
 800a3d0:	eb63 0b01 	sbc.w	fp, r3, r1
 800a3d4:	f04f 0200 	mov.w	r2, #0
 800a3d8:	f04f 0300 	mov.w	r3, #0
 800a3dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a3e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a3e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a3e8:	ebb2 040a 	subs.w	r4, r2, sl
 800a3ec:	eb63 050b 	sbc.w	r5, r3, fp
 800a3f0:	f04f 0200 	mov.w	r2, #0
 800a3f4:	f04f 0300 	mov.w	r3, #0
 800a3f8:	00eb      	lsls	r3, r5, #3
 800a3fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a3fe:	00e2      	lsls	r2, r4, #3
 800a400:	4614      	mov	r4, r2
 800a402:	461d      	mov	r5, r3
 800a404:	4643      	mov	r3, r8
 800a406:	18e3      	adds	r3, r4, r3
 800a408:	603b      	str	r3, [r7, #0]
 800a40a:	464b      	mov	r3, r9
 800a40c:	eb45 0303 	adc.w	r3, r5, r3
 800a410:	607b      	str	r3, [r7, #4]
 800a412:	f04f 0200 	mov.w	r2, #0
 800a416:	f04f 0300 	mov.w	r3, #0
 800a41a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a41e:	4629      	mov	r1, r5
 800a420:	028b      	lsls	r3, r1, #10
 800a422:	4621      	mov	r1, r4
 800a424:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a428:	4621      	mov	r1, r4
 800a42a:	028a      	lsls	r2, r1, #10
 800a42c:	4610      	mov	r0, r2
 800a42e:	4619      	mov	r1, r3
 800a430:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a434:	2200      	movs	r2, #0
 800a436:	61bb      	str	r3, [r7, #24]
 800a438:	61fa      	str	r2, [r7, #28]
 800a43a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a43e:	f7fd ff37 	bl	80082b0 <__aeabi_uldivmod>
 800a442:	4602      	mov	r2, r0
 800a444:	460b      	mov	r3, r1
 800a446:	4613      	mov	r3, r2
 800a448:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800a44c:	4b0d      	ldr	r3, [pc, #52]	@ (800a484 <HAL_RCC_GetSysClockFreq+0x348>)
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	0f1b      	lsrs	r3, r3, #28
 800a452:	f003 0307 	and.w	r3, r3, #7
 800a456:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800a45a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a45e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a462:	fbb2 f3f3 	udiv	r3, r2, r3
 800a466:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800a46a:	e003      	b.n	800a474 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a46c:	4b06      	ldr	r3, [pc, #24]	@ (800a488 <HAL_RCC_GetSysClockFreq+0x34c>)
 800a46e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800a472:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a474:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3798      	adds	r7, #152	@ 0x98
 800a47c:	46bd      	mov	sp, r7
 800a47e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a482:	bf00      	nop
 800a484:	40023800 	.word	0x40023800
 800a488:	00f42400 	.word	0x00f42400
 800a48c:	017d7840 	.word	0x017d7840

0800a490 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b086      	sub	sp, #24
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d101      	bne.n	800a4a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e28d      	b.n	800a9be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f003 0301 	and.w	r3, r3, #1
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f000 8083 	beq.w	800a5b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a4b0:	4b94      	ldr	r3, [pc, #592]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	f003 030c 	and.w	r3, r3, #12
 800a4b8:	2b04      	cmp	r3, #4
 800a4ba:	d019      	beq.n	800a4f0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800a4bc:	4b91      	ldr	r3, [pc, #580]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	f003 030c 	and.w	r3, r3, #12
        || \
 800a4c4:	2b08      	cmp	r3, #8
 800a4c6:	d106      	bne.n	800a4d6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800a4c8:	4b8e      	ldr	r3, [pc, #568]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a4d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a4d4:	d00c      	beq.n	800a4f0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a4d6:	4b8b      	ldr	r3, [pc, #556]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800a4de:	2b0c      	cmp	r3, #12
 800a4e0:	d112      	bne.n	800a508 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a4e2:	4b88      	ldr	r3, [pc, #544]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a4ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a4ee:	d10b      	bne.n	800a508 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4f0:	4b84      	ldr	r3, [pc, #528]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d05b      	beq.n	800a5b4 <HAL_RCC_OscConfig+0x124>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d157      	bne.n	800a5b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	e25a      	b.n	800a9be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a510:	d106      	bne.n	800a520 <HAL_RCC_OscConfig+0x90>
 800a512:	4b7c      	ldr	r3, [pc, #496]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a7b      	ldr	r2, [pc, #492]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a51c:	6013      	str	r3, [r2, #0]
 800a51e:	e01d      	b.n	800a55c <HAL_RCC_OscConfig+0xcc>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a528:	d10c      	bne.n	800a544 <HAL_RCC_OscConfig+0xb4>
 800a52a:	4b76      	ldr	r3, [pc, #472]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a75      	ldr	r2, [pc, #468]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a534:	6013      	str	r3, [r2, #0]
 800a536:	4b73      	ldr	r3, [pc, #460]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a72      	ldr	r2, [pc, #456]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a53c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a540:	6013      	str	r3, [r2, #0]
 800a542:	e00b      	b.n	800a55c <HAL_RCC_OscConfig+0xcc>
 800a544:	4b6f      	ldr	r3, [pc, #444]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a6e      	ldr	r2, [pc, #440]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a54a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a54e:	6013      	str	r3, [r2, #0]
 800a550:	4b6c      	ldr	r3, [pc, #432]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a6b      	ldr	r2, [pc, #428]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a556:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a55a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d013      	beq.n	800a58c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a564:	f7ff f8e6 	bl	8009734 <HAL_GetTick>
 800a568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a56a:	e008      	b.n	800a57e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a56c:	f7ff f8e2 	bl	8009734 <HAL_GetTick>
 800a570:	4602      	mov	r2, r0
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	1ad3      	subs	r3, r2, r3
 800a576:	2b64      	cmp	r3, #100	@ 0x64
 800a578:	d901      	bls.n	800a57e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800a57a:	2303      	movs	r3, #3
 800a57c:	e21f      	b.n	800a9be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a57e:	4b61      	ldr	r3, [pc, #388]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a586:	2b00      	cmp	r3, #0
 800a588:	d0f0      	beq.n	800a56c <HAL_RCC_OscConfig+0xdc>
 800a58a:	e014      	b.n	800a5b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a58c:	f7ff f8d2 	bl	8009734 <HAL_GetTick>
 800a590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a592:	e008      	b.n	800a5a6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a594:	f7ff f8ce 	bl	8009734 <HAL_GetTick>
 800a598:	4602      	mov	r2, r0
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	1ad3      	subs	r3, r2, r3
 800a59e:	2b64      	cmp	r3, #100	@ 0x64
 800a5a0:	d901      	bls.n	800a5a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	e20b      	b.n	800a9be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a5a6:	4b57      	ldr	r3, [pc, #348]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d1f0      	bne.n	800a594 <HAL_RCC_OscConfig+0x104>
 800a5b2:	e000      	b.n	800a5b6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a5b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 0302 	and.w	r3, r3, #2
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d06f      	beq.n	800a6a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a5c2:	4b50      	ldr	r3, [pc, #320]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	f003 030c 	and.w	r3, r3, #12
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d017      	beq.n	800a5fe <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800a5ce:	4b4d      	ldr	r3, [pc, #308]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	f003 030c 	and.w	r3, r3, #12
        || \
 800a5d6:	2b08      	cmp	r3, #8
 800a5d8:	d105      	bne.n	800a5e6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800a5da:	4b4a      	ldr	r3, [pc, #296]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d00b      	beq.n	800a5fe <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a5e6:	4b47      	ldr	r3, [pc, #284]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800a5ee:	2b0c      	cmp	r3, #12
 800a5f0:	d11c      	bne.n	800a62c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a5f2:	4b44      	ldr	r3, [pc, #272]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d116      	bne.n	800a62c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a5fe:	4b41      	ldr	r3, [pc, #260]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f003 0302 	and.w	r3, r3, #2
 800a606:	2b00      	cmp	r3, #0
 800a608:	d005      	beq.n	800a616 <HAL_RCC_OscConfig+0x186>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d001      	beq.n	800a616 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a612:	2301      	movs	r3, #1
 800a614:	e1d3      	b.n	800a9be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a616:	4b3b      	ldr	r3, [pc, #236]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	00db      	lsls	r3, r3, #3
 800a624:	4937      	ldr	r1, [pc, #220]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a626:	4313      	orrs	r3, r2
 800a628:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a62a:	e03a      	b.n	800a6a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d020      	beq.n	800a676 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a634:	4b34      	ldr	r3, [pc, #208]	@ (800a708 <HAL_RCC_OscConfig+0x278>)
 800a636:	2201      	movs	r2, #1
 800a638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a63a:	f7ff f87b 	bl	8009734 <HAL_GetTick>
 800a63e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a640:	e008      	b.n	800a654 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a642:	f7ff f877 	bl	8009734 <HAL_GetTick>
 800a646:	4602      	mov	r2, r0
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	1ad3      	subs	r3, r2, r3
 800a64c:	2b02      	cmp	r3, #2
 800a64e:	d901      	bls.n	800a654 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800a650:	2303      	movs	r3, #3
 800a652:	e1b4      	b.n	800a9be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a654:	4b2b      	ldr	r3, [pc, #172]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 0302 	and.w	r3, r3, #2
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d0f0      	beq.n	800a642 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a660:	4b28      	ldr	r3, [pc, #160]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	691b      	ldr	r3, [r3, #16]
 800a66c:	00db      	lsls	r3, r3, #3
 800a66e:	4925      	ldr	r1, [pc, #148]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a670:	4313      	orrs	r3, r2
 800a672:	600b      	str	r3, [r1, #0]
 800a674:	e015      	b.n	800a6a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a676:	4b24      	ldr	r3, [pc, #144]	@ (800a708 <HAL_RCC_OscConfig+0x278>)
 800a678:	2200      	movs	r2, #0
 800a67a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a67c:	f7ff f85a 	bl	8009734 <HAL_GetTick>
 800a680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a682:	e008      	b.n	800a696 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a684:	f7ff f856 	bl	8009734 <HAL_GetTick>
 800a688:	4602      	mov	r2, r0
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	1ad3      	subs	r3, r2, r3
 800a68e:	2b02      	cmp	r3, #2
 800a690:	d901      	bls.n	800a696 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a692:	2303      	movs	r3, #3
 800a694:	e193      	b.n	800a9be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a696:	4b1b      	ldr	r3, [pc, #108]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f003 0302 	and.w	r3, r3, #2
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d1f0      	bne.n	800a684 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f003 0308 	and.w	r3, r3, #8
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d036      	beq.n	800a71c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	695b      	ldr	r3, [r3, #20]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d016      	beq.n	800a6e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a6b6:	4b15      	ldr	r3, [pc, #84]	@ (800a70c <HAL_RCC_OscConfig+0x27c>)
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6bc:	f7ff f83a 	bl	8009734 <HAL_GetTick>
 800a6c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a6c2:	e008      	b.n	800a6d6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a6c4:	f7ff f836 	bl	8009734 <HAL_GetTick>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	1ad3      	subs	r3, r2, r3
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	d901      	bls.n	800a6d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	e173      	b.n	800a9be <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a6d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a704 <HAL_RCC_OscConfig+0x274>)
 800a6d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6da:	f003 0302 	and.w	r3, r3, #2
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d0f0      	beq.n	800a6c4 <HAL_RCC_OscConfig+0x234>
 800a6e2:	e01b      	b.n	800a71c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a6e4:	4b09      	ldr	r3, [pc, #36]	@ (800a70c <HAL_RCC_OscConfig+0x27c>)
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6ea:	f7ff f823 	bl	8009734 <HAL_GetTick>
 800a6ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a6f0:	e00e      	b.n	800a710 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a6f2:	f7ff f81f 	bl	8009734 <HAL_GetTick>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	1ad3      	subs	r3, r2, r3
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	d907      	bls.n	800a710 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800a700:	2303      	movs	r3, #3
 800a702:	e15c      	b.n	800a9be <HAL_RCC_OscConfig+0x52e>
 800a704:	40023800 	.word	0x40023800
 800a708:	42470000 	.word	0x42470000
 800a70c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a710:	4b8a      	ldr	r3, [pc, #552]	@ (800a93c <HAL_RCC_OscConfig+0x4ac>)
 800a712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a714:	f003 0302 	and.w	r3, r3, #2
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1ea      	bne.n	800a6f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 0304 	and.w	r3, r3, #4
 800a724:	2b00      	cmp	r3, #0
 800a726:	f000 8097 	beq.w	800a858 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a72a:	2300      	movs	r3, #0
 800a72c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a72e:	4b83      	ldr	r3, [pc, #524]	@ (800a93c <HAL_RCC_OscConfig+0x4ac>)
 800a730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a736:	2b00      	cmp	r3, #0
 800a738:	d10f      	bne.n	800a75a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a73a:	2300      	movs	r3, #0
 800a73c:	60bb      	str	r3, [r7, #8]
 800a73e:	4b7f      	ldr	r3, [pc, #508]	@ (800a93c <HAL_RCC_OscConfig+0x4ac>)
 800a740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a742:	4a7e      	ldr	r2, [pc, #504]	@ (800a93c <HAL_RCC_OscConfig+0x4ac>)
 800a744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a748:	6413      	str	r3, [r2, #64]	@ 0x40
 800a74a:	4b7c      	ldr	r3, [pc, #496]	@ (800a93c <HAL_RCC_OscConfig+0x4ac>)
 800a74c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a74e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a752:	60bb      	str	r3, [r7, #8]
 800a754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a756:	2301      	movs	r3, #1
 800a758:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a75a:	4b79      	ldr	r3, [pc, #484]	@ (800a940 <HAL_RCC_OscConfig+0x4b0>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a762:	2b00      	cmp	r3, #0
 800a764:	d118      	bne.n	800a798 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a766:	4b76      	ldr	r3, [pc, #472]	@ (800a940 <HAL_RCC_OscConfig+0x4b0>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a75      	ldr	r2, [pc, #468]	@ (800a940 <HAL_RCC_OscConfig+0x4b0>)
 800a76c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a772:	f7fe ffdf 	bl	8009734 <HAL_GetTick>
 800a776:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a778:	e008      	b.n	800a78c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a77a:	f7fe ffdb 	bl	8009734 <HAL_GetTick>
 800a77e:	4602      	mov	r2, r0
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	1ad3      	subs	r3, r2, r3
 800a784:	2b02      	cmp	r3, #2
 800a786:	d901      	bls.n	800a78c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800a788:	2303      	movs	r3, #3
 800a78a:	e118      	b.n	800a9be <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a78c:	4b6c      	ldr	r3, [pc, #432]	@ (800a940 <HAL_RCC_OscConfig+0x4b0>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a794:	2b00      	cmp	r3, #0
 800a796:	d0f0      	beq.n	800a77a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d106      	bne.n	800a7ae <HAL_RCC_OscConfig+0x31e>
 800a7a0:	4b66      	ldr	r3, [pc, #408]	@ (800a93c <HAL_RCC_OscConfig+0x4ac>)
 800a7a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7a4:	4a65      	ldr	r2, [pc, #404]	@ (800a93c <HAL_RCC_OscConfig+0x4ac>)
 800a7a6:	f043 0301 	orr.w	r3, r3, #1
 800a7aa:	6713      	str	r3, [r2, #112]	@ 0x70
 800a7ac:	e01c      	b.n	800a7e8 <HAL_RCC_OscConfig+0x358>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	2b05      	cmp	r3, #5
 800a7b4:	d10c      	bne.n	800a7d0 <HAL_RCC_OscConfig+0x340>
 800a7b6:	4b61      	ldr	r3, [pc, #388]	@ (800a93c <HAL_RCC_OscConfig+0x4ac>)
 800a7b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7ba:	4a60      	ldr	r2, [pc, #384]	@ (800a93c <HAL_RCC_OscConfig+0x4ac>)
 800a7bc:	f043 0304 	orr.w	r3, r3, #4
 800a7c0:	6713      	str	r3, [r2, #112]	@ 0x70
 800a7c2:	4b5e      	ldr	r3, [pc, #376]	@ (800a93c <HAL_RCC_OscConfig+0x4ac>)
 800a7c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7c6:	4a5d      	ldr	r2, [pc, #372]	@ (800a93c <HAL_RCC_OscConfig+0x4ac>)
 800a7c8:	f043 0301 	orr.w	r3, r3, #1
 800a7cc:	6713      	str	r3, [r2, #112]	@ 0x70
 800a7ce:	e00b      	b.n	800a7e8 <HAL_RCC_OscConfig+0x358>
 800a7d0:	4b5a      	ldr	r3, [pc, #360]	@ (800a93c <HAL_RCC_OscConfig+0x4ac>)
 800a7d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7d4:	4a59      	ldr	r2, [pc, #356]	@ (800a93c <HAL_RCC_OscConfig+0x4ac>)
 800a7d6:	f023 0301 	bic.w	r3, r3, #1
 800a7da:	6713      	str	r3, [r2, #112]	@ 0x70
 800a7dc:	4b57      	ldr	r3, [pc, #348]	@ (800a93c <HAL_RCC_OscConfig+0x4ac>)
 800a7de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7e0:	4a56      	ldr	r2, [pc, #344]	@ (800a93c <HAL_RCC_OscConfig+0x4ac>)
 800a7e2:	f023 0304 	bic.w	r3, r3, #4
 800a7e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d015      	beq.n	800a81c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7f0:	f7fe ffa0 	bl	8009734 <HAL_GetTick>
 800a7f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a7f6:	e00a      	b.n	800a80e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7f8:	f7fe ff9c 	bl	8009734 <HAL_GetTick>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a806:	4293      	cmp	r3, r2
 800a808:	d901      	bls.n	800a80e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800a80a:	2303      	movs	r3, #3
 800a80c:	e0d7      	b.n	800a9be <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a80e:	4b4b      	ldr	r3, [pc, #300]	@ (800a93c <HAL_RCC_OscConfig+0x4ac>)
 800a810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a812:	f003 0302 	and.w	r3, r3, #2
 800a816:	2b00      	cmp	r3, #0
 800a818:	d0ee      	beq.n	800a7f8 <HAL_RCC_OscConfig+0x368>
 800a81a:	e014      	b.n	800a846 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a81c:	f7fe ff8a 	bl	8009734 <HAL_GetTick>
 800a820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a822:	e00a      	b.n	800a83a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a824:	f7fe ff86 	bl	8009734 <HAL_GetTick>
 800a828:	4602      	mov	r2, r0
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	1ad3      	subs	r3, r2, r3
 800a82e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a832:	4293      	cmp	r3, r2
 800a834:	d901      	bls.n	800a83a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800a836:	2303      	movs	r3, #3
 800a838:	e0c1      	b.n	800a9be <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a83a:	4b40      	ldr	r3, [pc, #256]	@ (800a93c <HAL_RCC_OscConfig+0x4ac>)
 800a83c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a83e:	f003 0302 	and.w	r3, r3, #2
 800a842:	2b00      	cmp	r3, #0
 800a844:	d1ee      	bne.n	800a824 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a846:	7dfb      	ldrb	r3, [r7, #23]
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d105      	bne.n	800a858 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a84c:	4b3b      	ldr	r3, [pc, #236]	@ (800a93c <HAL_RCC_OscConfig+0x4ac>)
 800a84e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a850:	4a3a      	ldr	r2, [pc, #232]	@ (800a93c <HAL_RCC_OscConfig+0x4ac>)
 800a852:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a856:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	f000 80ad 	beq.w	800a9bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a862:	4b36      	ldr	r3, [pc, #216]	@ (800a93c <HAL_RCC_OscConfig+0x4ac>)
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	f003 030c 	and.w	r3, r3, #12
 800a86a:	2b08      	cmp	r3, #8
 800a86c:	d060      	beq.n	800a930 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	699b      	ldr	r3, [r3, #24]
 800a872:	2b02      	cmp	r3, #2
 800a874:	d145      	bne.n	800a902 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a876:	4b33      	ldr	r3, [pc, #204]	@ (800a944 <HAL_RCC_OscConfig+0x4b4>)
 800a878:	2200      	movs	r2, #0
 800a87a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a87c:	f7fe ff5a 	bl	8009734 <HAL_GetTick>
 800a880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a882:	e008      	b.n	800a896 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a884:	f7fe ff56 	bl	8009734 <HAL_GetTick>
 800a888:	4602      	mov	r2, r0
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	1ad3      	subs	r3, r2, r3
 800a88e:	2b02      	cmp	r3, #2
 800a890:	d901      	bls.n	800a896 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800a892:	2303      	movs	r3, #3
 800a894:	e093      	b.n	800a9be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a896:	4b29      	ldr	r3, [pc, #164]	@ (800a93c <HAL_RCC_OscConfig+0x4ac>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d1f0      	bne.n	800a884 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	69da      	ldr	r2, [r3, #28]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6a1b      	ldr	r3, [r3, #32]
 800a8aa:	431a      	orrs	r2, r3
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8b0:	019b      	lsls	r3, r3, #6
 800a8b2:	431a      	orrs	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8b8:	085b      	lsrs	r3, r3, #1
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	041b      	lsls	r3, r3, #16
 800a8be:	431a      	orrs	r2, r3
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8c4:	061b      	lsls	r3, r3, #24
 800a8c6:	431a      	orrs	r2, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8cc:	071b      	lsls	r3, r3, #28
 800a8ce:	491b      	ldr	r1, [pc, #108]	@ (800a93c <HAL_RCC_OscConfig+0x4ac>)
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a8d4:	4b1b      	ldr	r3, [pc, #108]	@ (800a944 <HAL_RCC_OscConfig+0x4b4>)
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8da:	f7fe ff2b 	bl	8009734 <HAL_GetTick>
 800a8de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a8e0:	e008      	b.n	800a8f4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8e2:	f7fe ff27 	bl	8009734 <HAL_GetTick>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	1ad3      	subs	r3, r2, r3
 800a8ec:	2b02      	cmp	r3, #2
 800a8ee:	d901      	bls.n	800a8f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800a8f0:	2303      	movs	r3, #3
 800a8f2:	e064      	b.n	800a9be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a8f4:	4b11      	ldr	r3, [pc, #68]	@ (800a93c <HAL_RCC_OscConfig+0x4ac>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d0f0      	beq.n	800a8e2 <HAL_RCC_OscConfig+0x452>
 800a900:	e05c      	b.n	800a9bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a902:	4b10      	ldr	r3, [pc, #64]	@ (800a944 <HAL_RCC_OscConfig+0x4b4>)
 800a904:	2200      	movs	r2, #0
 800a906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a908:	f7fe ff14 	bl	8009734 <HAL_GetTick>
 800a90c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a90e:	e008      	b.n	800a922 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a910:	f7fe ff10 	bl	8009734 <HAL_GetTick>
 800a914:	4602      	mov	r2, r0
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	1ad3      	subs	r3, r2, r3
 800a91a:	2b02      	cmp	r3, #2
 800a91c:	d901      	bls.n	800a922 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800a91e:	2303      	movs	r3, #3
 800a920:	e04d      	b.n	800a9be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a922:	4b06      	ldr	r3, [pc, #24]	@ (800a93c <HAL_RCC_OscConfig+0x4ac>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d1f0      	bne.n	800a910 <HAL_RCC_OscConfig+0x480>
 800a92e:	e045      	b.n	800a9bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	699b      	ldr	r3, [r3, #24]
 800a934:	2b01      	cmp	r3, #1
 800a936:	d107      	bne.n	800a948 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	e040      	b.n	800a9be <HAL_RCC_OscConfig+0x52e>
 800a93c:	40023800 	.word	0x40023800
 800a940:	40007000 	.word	0x40007000
 800a944:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a948:	4b1f      	ldr	r3, [pc, #124]	@ (800a9c8 <HAL_RCC_OscConfig+0x538>)
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	699b      	ldr	r3, [r3, #24]
 800a952:	2b01      	cmp	r3, #1
 800a954:	d030      	beq.n	800a9b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a960:	429a      	cmp	r2, r3
 800a962:	d129      	bne.n	800a9b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a96e:	429a      	cmp	r2, r3
 800a970:	d122      	bne.n	800a9b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a978:	4013      	ands	r3, r2
 800a97a:	687a      	ldr	r2, [r7, #4]
 800a97c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a97e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a980:	4293      	cmp	r3, r2
 800a982:	d119      	bne.n	800a9b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a98e:	085b      	lsrs	r3, r3, #1
 800a990:	3b01      	subs	r3, #1
 800a992:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a994:	429a      	cmp	r2, r3
 800a996:	d10f      	bne.n	800a9b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d107      	bne.n	800a9b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d001      	beq.n	800a9bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e000      	b.n	800a9be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800a9bc:	2300      	movs	r3, #0
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3718      	adds	r7, #24
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	40023800 	.word	0x40023800

0800a9cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d101      	bne.n	800a9de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e07b      	b.n	800aad6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d108      	bne.n	800a9f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a9ee:	d009      	beq.n	800aa04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	61da      	str	r2, [r3, #28]
 800a9f6:	e005      	b.n	800aa04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d106      	bne.n	800aa24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7fe fbe0 	bl	80091e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2202      	movs	r2, #2
 800aa28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aa3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800aa4c:	431a      	orrs	r2, r3
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa56:	431a      	orrs	r2, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	691b      	ldr	r3, [r3, #16]
 800aa5c:	f003 0302 	and.w	r3, r3, #2
 800aa60:	431a      	orrs	r2, r3
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	695b      	ldr	r3, [r3, #20]
 800aa66:	f003 0301 	and.w	r3, r3, #1
 800aa6a:	431a      	orrs	r2, r3
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	699b      	ldr	r3, [r3, #24]
 800aa70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa74:	431a      	orrs	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	69db      	ldr	r3, [r3, #28]
 800aa7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa7e:	431a      	orrs	r2, r3
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6a1b      	ldr	r3, [r3, #32]
 800aa84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa88:	ea42 0103 	orr.w	r1, r2, r3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa90:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	430a      	orrs	r2, r1
 800aa9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	699b      	ldr	r3, [r3, #24]
 800aaa0:	0c1b      	lsrs	r3, r3, #16
 800aaa2:	f003 0104 	and.w	r1, r3, #4
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaaa:	f003 0210 	and.w	r2, r3, #16
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	430a      	orrs	r2, r1
 800aab4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	69da      	ldr	r2, [r3, #28]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800aac4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3708      	adds	r7, #8
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aade:	b580      	push	{r7, lr}
 800aae0:	b088      	sub	sp, #32
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	60f8      	str	r0, [r7, #12]
 800aae6:	60b9      	str	r1, [r7, #8]
 800aae8:	603b      	str	r3, [r7, #0]
 800aaea:	4613      	mov	r3, r2
 800aaec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aaee:	f7fe fe21 	bl	8009734 <HAL_GetTick>
 800aaf2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800aaf4:	88fb      	ldrh	r3, [r7, #6]
 800aaf6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d001      	beq.n	800ab08 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800ab04:	2302      	movs	r3, #2
 800ab06:	e12a      	b.n	800ad5e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d002      	beq.n	800ab14 <HAL_SPI_Transmit+0x36>
 800ab0e:	88fb      	ldrh	r3, [r7, #6]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d101      	bne.n	800ab18 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800ab14:	2301      	movs	r3, #1
 800ab16:	e122      	b.n	800ad5e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d101      	bne.n	800ab26 <HAL_SPI_Transmit+0x48>
 800ab22:	2302      	movs	r3, #2
 800ab24:	e11b      	b.n	800ad5e <HAL_SPI_Transmit+0x280>
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2203      	movs	r2, #3
 800ab32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	88fa      	ldrh	r2, [r7, #6]
 800ab46:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	88fa      	ldrh	r2, [r7, #6]
 800ab4c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2200      	movs	r2, #0
 800ab52:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2200      	movs	r2, #0
 800ab58:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2200      	movs	r2, #0
 800ab64:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab74:	d10f      	bne.n	800ab96 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ab84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ab94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aba0:	2b40      	cmp	r3, #64	@ 0x40
 800aba2:	d007      	beq.n	800abb4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	681a      	ldr	r2, [r3, #0]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800abb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800abbc:	d152      	bne.n	800ac64 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d002      	beq.n	800abcc <HAL_SPI_Transmit+0xee>
 800abc6:	8b7b      	ldrh	r3, [r7, #26]
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d145      	bne.n	800ac58 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abd0:	881a      	ldrh	r2, [r3, #0]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abdc:	1c9a      	adds	r2, r3, #2
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	3b01      	subs	r3, #1
 800abea:	b29a      	uxth	r2, r3
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800abf0:	e032      	b.n	800ac58 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	f003 0302 	and.w	r3, r3, #2
 800abfc:	2b02      	cmp	r3, #2
 800abfe:	d112      	bne.n	800ac26 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac04:	881a      	ldrh	r2, [r3, #0]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac10:	1c9a      	adds	r2, r3, #2
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	b29a      	uxth	r2, r3
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ac24:	e018      	b.n	800ac58 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac26:	f7fe fd85 	bl	8009734 <HAL_GetTick>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	69fb      	ldr	r3, [r7, #28]
 800ac2e:	1ad3      	subs	r3, r2, r3
 800ac30:	683a      	ldr	r2, [r7, #0]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d803      	bhi.n	800ac3e <HAL_SPI_Transmit+0x160>
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac3c:	d102      	bne.n	800ac44 <HAL_SPI_Transmit+0x166>
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d109      	bne.n	800ac58 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800ac54:	2303      	movs	r3, #3
 800ac56:	e082      	b.n	800ad5e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d1c7      	bne.n	800abf2 <HAL_SPI_Transmit+0x114>
 800ac62:	e053      	b.n	800ad0c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d002      	beq.n	800ac72 <HAL_SPI_Transmit+0x194>
 800ac6c:	8b7b      	ldrh	r3, [r7, #26]
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d147      	bne.n	800ad02 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	330c      	adds	r3, #12
 800ac7c:	7812      	ldrb	r2, [r2, #0]
 800ac7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac84:	1c5a      	adds	r2, r3, #1
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	3b01      	subs	r3, #1
 800ac92:	b29a      	uxth	r2, r3
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ac98:	e033      	b.n	800ad02 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	f003 0302 	and.w	r3, r3, #2
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	d113      	bne.n	800acd0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	330c      	adds	r3, #12
 800acb2:	7812      	ldrb	r2, [r2, #0]
 800acb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acba:	1c5a      	adds	r2, r3, #1
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	3b01      	subs	r3, #1
 800acc8:	b29a      	uxth	r2, r3
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	86da      	strh	r2, [r3, #54]	@ 0x36
 800acce:	e018      	b.n	800ad02 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800acd0:	f7fe fd30 	bl	8009734 <HAL_GetTick>
 800acd4:	4602      	mov	r2, r0
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	1ad3      	subs	r3, r2, r3
 800acda:	683a      	ldr	r2, [r7, #0]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d803      	bhi.n	800ace8 <HAL_SPI_Transmit+0x20a>
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace6:	d102      	bne.n	800acee <HAL_SPI_Transmit+0x210>
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d109      	bne.n	800ad02 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2201      	movs	r2, #1
 800acf2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2200      	movs	r2, #0
 800acfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800acfe:	2303      	movs	r3, #3
 800ad00:	e02d      	b.n	800ad5e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1c6      	bne.n	800ac9a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ad0c:	69fa      	ldr	r2, [r7, #28]
 800ad0e:	6839      	ldr	r1, [r7, #0]
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	f000 f8b1 	bl	800ae78 <SPI_EndRxTxTransaction>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d002      	beq.n	800ad22 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2220      	movs	r2, #32
 800ad20:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d10a      	bne.n	800ad40 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	617b      	str	r3, [r7, #20]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	617b      	str	r3, [r7, #20]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	617b      	str	r3, [r7, #20]
 800ad3e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d001      	beq.n	800ad5c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	e000      	b.n	800ad5e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800ad5c:	2300      	movs	r3, #0
  }
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3720      	adds	r7, #32
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
	...

0800ad68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b088      	sub	sp, #32
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	603b      	str	r3, [r7, #0]
 800ad74:	4613      	mov	r3, r2
 800ad76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ad78:	f7fe fcdc 	bl	8009734 <HAL_GetTick>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad80:	1a9b      	subs	r3, r3, r2
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	4413      	add	r3, r2
 800ad86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ad88:	f7fe fcd4 	bl	8009734 <HAL_GetTick>
 800ad8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ad8e:	4b39      	ldr	r3, [pc, #228]	@ (800ae74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	015b      	lsls	r3, r3, #5
 800ad94:	0d1b      	lsrs	r3, r3, #20
 800ad96:	69fa      	ldr	r2, [r7, #28]
 800ad98:	fb02 f303 	mul.w	r3, r2, r3
 800ad9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad9e:	e055      	b.n	800ae4c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ada6:	d051      	beq.n	800ae4c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ada8:	f7fe fcc4 	bl	8009734 <HAL_GetTick>
 800adac:	4602      	mov	r2, r0
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	1ad3      	subs	r3, r2, r3
 800adb2:	69fa      	ldr	r2, [r7, #28]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d902      	bls.n	800adbe <SPI_WaitFlagStateUntilTimeout+0x56>
 800adb8:	69fb      	ldr	r3, [r7, #28]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d13d      	bne.n	800ae3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	685a      	ldr	r2, [r3, #4]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800adcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800add6:	d111      	bne.n	800adfc <SPI_WaitFlagStateUntilTimeout+0x94>
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ade0:	d004      	beq.n	800adec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800adea:	d107      	bne.n	800adfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800adfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae04:	d10f      	bne.n	800ae26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ae14:	601a      	str	r2, [r3, #0]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ae24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2201      	movs	r2, #1
 800ae2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2200      	movs	r2, #0
 800ae32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800ae36:	2303      	movs	r3, #3
 800ae38:	e018      	b.n	800ae6c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d102      	bne.n	800ae46 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800ae40:	2300      	movs	r3, #0
 800ae42:	61fb      	str	r3, [r7, #28]
 800ae44:	e002      	b.n	800ae4c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	3b01      	subs	r3, #1
 800ae4a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	689a      	ldr	r2, [r3, #8]
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	4013      	ands	r3, r2
 800ae56:	68ba      	ldr	r2, [r7, #8]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	bf0c      	ite	eq
 800ae5c:	2301      	moveq	r3, #1
 800ae5e:	2300      	movne	r3, #0
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	461a      	mov	r2, r3
 800ae64:	79fb      	ldrb	r3, [r7, #7]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d19a      	bne.n	800ada0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3720      	adds	r7, #32
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	20000038 	.word	0x20000038

0800ae78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b088      	sub	sp, #32
 800ae7c:	af02      	add	r7, sp, #8
 800ae7e:	60f8      	str	r0, [r7, #12]
 800ae80:	60b9      	str	r1, [r7, #8]
 800ae82:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	2102      	movs	r1, #2
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f7ff ff6a 	bl	800ad68 <SPI_WaitFlagStateUntilTimeout>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d007      	beq.n	800aeaa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae9e:	f043 0220 	orr.w	r2, r3, #32
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800aea6:	2303      	movs	r3, #3
 800aea8:	e032      	b.n	800af10 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800aeaa:	4b1b      	ldr	r3, [pc, #108]	@ (800af18 <SPI_EndRxTxTransaction+0xa0>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a1b      	ldr	r2, [pc, #108]	@ (800af1c <SPI_EndRxTxTransaction+0xa4>)
 800aeb0:	fba2 2303 	umull	r2, r3, r2, r3
 800aeb4:	0d5b      	lsrs	r3, r3, #21
 800aeb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800aeba:	fb02 f303 	mul.w	r3, r2, r3
 800aebe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aec8:	d112      	bne.n	800aef0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	9300      	str	r3, [sp, #0]
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	2200      	movs	r2, #0
 800aed2:	2180      	movs	r1, #128	@ 0x80
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	f7ff ff47 	bl	800ad68 <SPI_WaitFlagStateUntilTimeout>
 800aeda:	4603      	mov	r3, r0
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d016      	beq.n	800af0e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aee4:	f043 0220 	orr.w	r2, r3, #32
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800aeec:	2303      	movs	r3, #3
 800aeee:	e00f      	b.n	800af10 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00a      	beq.n	800af0c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	3b01      	subs	r3, #1
 800aefa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	689b      	ldr	r3, [r3, #8]
 800af02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af06:	2b80      	cmp	r3, #128	@ 0x80
 800af08:	d0f2      	beq.n	800aef0 <SPI_EndRxTxTransaction+0x78>
 800af0a:	e000      	b.n	800af0e <SPI_EndRxTxTransaction+0x96>
        break;
 800af0c:	bf00      	nop
  }

  return HAL_OK;
 800af0e:	2300      	movs	r3, #0
}
 800af10:	4618      	mov	r0, r3
 800af12:	3718      	adds	r7, #24
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}
 800af18:	20000038 	.word	0x20000038
 800af1c:	165e9f81 	.word	0x165e9f81

0800af20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d101      	bne.n	800af32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af2e:	2301      	movs	r3, #1
 800af30:	e042      	b.n	800afb8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d106      	bne.n	800af4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f7fe f994 	bl	8009274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2224      	movs	r2, #36	@ 0x24
 800af50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	68da      	ldr	r2, [r3, #12]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800af62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 fdd3 	bl	800bb10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	691a      	ldr	r2, [r3, #16]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800af78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	695a      	ldr	r2, [r3, #20]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800af88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	68da      	ldr	r2, [r3, #12]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800af98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2220      	movs	r2, #32
 800afa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2220      	movs	r2, #32
 800afac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800afb6:	2300      	movs	r3, #0
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3708      	adds	r7, #8
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b08a      	sub	sp, #40	@ 0x28
 800afc4:	af02      	add	r7, sp, #8
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	603b      	str	r3, [r7, #0]
 800afcc:	4613      	mov	r3, r2
 800afce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800afd0:	2300      	movs	r3, #0
 800afd2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	2b20      	cmp	r3, #32
 800afde:	d175      	bne.n	800b0cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d002      	beq.n	800afec <HAL_UART_Transmit+0x2c>
 800afe6:	88fb      	ldrh	r3, [r7, #6]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d101      	bne.n	800aff0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	e06e      	b.n	800b0ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2200      	movs	r2, #0
 800aff4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2221      	movs	r2, #33	@ 0x21
 800affa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800affe:	f7fe fb99 	bl	8009734 <HAL_GetTick>
 800b002:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	88fa      	ldrh	r2, [r7, #6]
 800b008:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	88fa      	ldrh	r2, [r7, #6]
 800b00e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b018:	d108      	bne.n	800b02c <HAL_UART_Transmit+0x6c>
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	691b      	ldr	r3, [r3, #16]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d104      	bne.n	800b02c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b022:	2300      	movs	r3, #0
 800b024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	61bb      	str	r3, [r7, #24]
 800b02a:	e003      	b.n	800b034 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b030:	2300      	movs	r3, #0
 800b032:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b034:	e02e      	b.n	800b094 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	9300      	str	r3, [sp, #0]
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	2200      	movs	r2, #0
 800b03e:	2180      	movs	r1, #128	@ 0x80
 800b040:	68f8      	ldr	r0, [r7, #12]
 800b042:	f000 fb37 	bl	800b6b4 <UART_WaitOnFlagUntilTimeout>
 800b046:	4603      	mov	r3, r0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d005      	beq.n	800b058 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2220      	movs	r2, #32
 800b050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800b054:	2303      	movs	r3, #3
 800b056:	e03a      	b.n	800b0ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d10b      	bne.n	800b076 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	881b      	ldrh	r3, [r3, #0]
 800b062:	461a      	mov	r2, r3
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b06c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	3302      	adds	r3, #2
 800b072:	61bb      	str	r3, [r7, #24]
 800b074:	e007      	b.n	800b086 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	781a      	ldrb	r2, [r3, #0]
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	3301      	adds	r3, #1
 800b084:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	3b01      	subs	r3, #1
 800b08e:	b29a      	uxth	r2, r3
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b098:	b29b      	uxth	r3, r3
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d1cb      	bne.n	800b036 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	9300      	str	r3, [sp, #0]
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	2140      	movs	r1, #64	@ 0x40
 800b0a8:	68f8      	ldr	r0, [r7, #12]
 800b0aa:	f000 fb03 	bl	800b6b4 <UART_WaitOnFlagUntilTimeout>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d005      	beq.n	800b0c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2220      	movs	r2, #32
 800b0b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800b0bc:	2303      	movs	r3, #3
 800b0be:	e006      	b.n	800b0ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2220      	movs	r2, #32
 800b0c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	e000      	b.n	800b0ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800b0cc:	2302      	movs	r3, #2
  }
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3720      	adds	r7, #32
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b084      	sub	sp, #16
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	60f8      	str	r0, [r7, #12]
 800b0de:	60b9      	str	r1, [r7, #8]
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	2b20      	cmp	r3, #32
 800b0ee:	d112      	bne.n	800b116 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d002      	beq.n	800b0fc <HAL_UART_Receive_IT+0x26>
 800b0f6:	88fb      	ldrh	r3, [r7, #6]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d101      	bne.n	800b100 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e00b      	b.n	800b118 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2200      	movs	r2, #0
 800b104:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b106:	88fb      	ldrh	r3, [r7, #6]
 800b108:	461a      	mov	r2, r3
 800b10a:	68b9      	ldr	r1, [r7, #8]
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	f000 fb2a 	bl	800b766 <UART_Start_Receive_IT>
 800b112:	4603      	mov	r3, r0
 800b114:	e000      	b.n	800b118 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b116:	2302      	movs	r3, #2
  }
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b0ba      	sub	sp, #232	@ 0xe8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	695b      	ldr	r3, [r3, #20]
 800b142:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b146:	2300      	movs	r3, #0
 800b148:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b14c:	2300      	movs	r3, #0
 800b14e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b156:	f003 030f 	and.w	r3, r3, #15
 800b15a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b15e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b162:	2b00      	cmp	r3, #0
 800b164:	d10f      	bne.n	800b186 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b16a:	f003 0320 	and.w	r3, r3, #32
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d009      	beq.n	800b186 <HAL_UART_IRQHandler+0x66>
 800b172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b176:	f003 0320 	and.w	r3, r3, #32
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d003      	beq.n	800b186 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 fc07 	bl	800b992 <UART_Receive_IT>
      return;
 800b184:	e273      	b.n	800b66e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b186:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	f000 80de 	beq.w	800b34c <HAL_UART_IRQHandler+0x22c>
 800b190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b194:	f003 0301 	and.w	r3, r3, #1
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d106      	bne.n	800b1aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b19c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	f000 80d1 	beq.w	800b34c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b1aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1ae:	f003 0301 	and.w	r3, r3, #1
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d00b      	beq.n	800b1ce <HAL_UART_IRQHandler+0xae>
 800b1b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d005      	beq.n	800b1ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1c6:	f043 0201 	orr.w	r2, r3, #1
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b1ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1d2:	f003 0304 	and.w	r3, r3, #4
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00b      	beq.n	800b1f2 <HAL_UART_IRQHandler+0xd2>
 800b1da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b1de:	f003 0301 	and.w	r3, r3, #1
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d005      	beq.n	800b1f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1ea:	f043 0202 	orr.w	r2, r3, #2
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b1f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1f6:	f003 0302 	and.w	r3, r3, #2
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d00b      	beq.n	800b216 <HAL_UART_IRQHandler+0xf6>
 800b1fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b202:	f003 0301 	and.w	r3, r3, #1
 800b206:	2b00      	cmp	r3, #0
 800b208:	d005      	beq.n	800b216 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b20e:	f043 0204 	orr.w	r2, r3, #4
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b21a:	f003 0308 	and.w	r3, r3, #8
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d011      	beq.n	800b246 <HAL_UART_IRQHandler+0x126>
 800b222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b226:	f003 0320 	and.w	r3, r3, #32
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d105      	bne.n	800b23a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b22e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b232:	f003 0301 	and.w	r3, r3, #1
 800b236:	2b00      	cmp	r3, #0
 800b238:	d005      	beq.n	800b246 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b23e:	f043 0208 	orr.w	r2, r3, #8
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f000 820a 	beq.w	800b664 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b254:	f003 0320 	and.w	r3, r3, #32
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d008      	beq.n	800b26e <HAL_UART_IRQHandler+0x14e>
 800b25c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b260:	f003 0320 	and.w	r3, r3, #32
 800b264:	2b00      	cmp	r3, #0
 800b266:	d002      	beq.n	800b26e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 fb92 	bl	800b992 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	695b      	ldr	r3, [r3, #20]
 800b274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b278:	2b40      	cmp	r3, #64	@ 0x40
 800b27a:	bf0c      	ite	eq
 800b27c:	2301      	moveq	r3, #1
 800b27e:	2300      	movne	r3, #0
 800b280:	b2db      	uxtb	r3, r3
 800b282:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b28a:	f003 0308 	and.w	r3, r3, #8
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d103      	bne.n	800b29a <HAL_UART_IRQHandler+0x17a>
 800b292:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b296:	2b00      	cmp	r3, #0
 800b298:	d04f      	beq.n	800b33a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 fa9d 	bl	800b7da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	695b      	ldr	r3, [r3, #20]
 800b2a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2aa:	2b40      	cmp	r3, #64	@ 0x40
 800b2ac:	d141      	bne.n	800b332 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	3314      	adds	r3, #20
 800b2b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b2bc:	e853 3f00 	ldrex	r3, [r3]
 800b2c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b2c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b2c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b2cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	3314      	adds	r3, #20
 800b2d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b2da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b2de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b2e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b2ea:	e841 2300 	strex	r3, r2, [r1]
 800b2ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b2f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d1d9      	bne.n	800b2ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d013      	beq.n	800b32a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b306:	4a8a      	ldr	r2, [pc, #552]	@ (800b530 <HAL_UART_IRQHandler+0x410>)
 800b308:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b30e:	4618      	mov	r0, r3
 800b310:	f7fe fbc1 	bl	8009a96 <HAL_DMA_Abort_IT>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d016      	beq.n	800b348 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b31e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b324:	4610      	mov	r0, r2
 800b326:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b328:	e00e      	b.n	800b348 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 f9ac 	bl	800b688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b330:	e00a      	b.n	800b348 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 f9a8 	bl	800b688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b338:	e006      	b.n	800b348 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 f9a4 	bl	800b688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b346:	e18d      	b.n	800b664 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b348:	bf00      	nop
    return;
 800b34a:	e18b      	b.n	800b664 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b350:	2b01      	cmp	r3, #1
 800b352:	f040 8167 	bne.w	800b624 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b35a:	f003 0310 	and.w	r3, r3, #16
 800b35e:	2b00      	cmp	r3, #0
 800b360:	f000 8160 	beq.w	800b624 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800b364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b368:	f003 0310 	and.w	r3, r3, #16
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f000 8159 	beq.w	800b624 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b372:	2300      	movs	r3, #0
 800b374:	60bb      	str	r3, [r7, #8]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	60bb      	str	r3, [r7, #8]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	60bb      	str	r3, [r7, #8]
 800b386:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	695b      	ldr	r3, [r3, #20]
 800b38e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b392:	2b40      	cmp	r3, #64	@ 0x40
 800b394:	f040 80ce 	bne.w	800b534 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b3a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	f000 80a9 	beq.w	800b500 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b3b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	f080 80a2 	bcs.w	800b500 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b3c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3c8:	69db      	ldr	r3, [r3, #28]
 800b3ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3ce:	f000 8088 	beq.w	800b4e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	330c      	adds	r3, #12
 800b3d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b3e0:	e853 3f00 	ldrex	r3, [r3]
 800b3e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b3e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b3ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b3f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	330c      	adds	r3, #12
 800b3fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b3fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b402:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b406:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b40a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b40e:	e841 2300 	strex	r3, r2, [r1]
 800b412:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b416:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1d9      	bne.n	800b3d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	3314      	adds	r3, #20
 800b424:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b426:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b428:	e853 3f00 	ldrex	r3, [r3]
 800b42c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b42e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b430:	f023 0301 	bic.w	r3, r3, #1
 800b434:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	3314      	adds	r3, #20
 800b43e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b442:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b446:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b448:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b44a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b44e:	e841 2300 	strex	r3, r2, [r1]
 800b452:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b454:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b456:	2b00      	cmp	r3, #0
 800b458:	d1e1      	bne.n	800b41e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	3314      	adds	r3, #20
 800b460:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b462:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b464:	e853 3f00 	ldrex	r3, [r3]
 800b468:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b46a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b46c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b470:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	3314      	adds	r3, #20
 800b47a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b47e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b480:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b482:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b484:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b486:	e841 2300 	strex	r3, r2, [r1]
 800b48a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b48c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d1e3      	bne.n	800b45a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2220      	movs	r2, #32
 800b496:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2200      	movs	r2, #0
 800b49e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	330c      	adds	r3, #12
 800b4a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4aa:	e853 3f00 	ldrex	r3, [r3]
 800b4ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b4b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4b2:	f023 0310 	bic.w	r3, r3, #16
 800b4b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	330c      	adds	r3, #12
 800b4c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b4c4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b4c6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b4ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b4cc:	e841 2300 	strex	r3, r2, [r1]
 800b4d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b4d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d1e3      	bne.n	800b4a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7fe fa6a 	bl	80099b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2202      	movs	r2, #2
 800b4e6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	1ad3      	subs	r3, r2, r3
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 f8cf 	bl	800b69c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b4fe:	e0b3      	b.n	800b668 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b504:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b508:	429a      	cmp	r2, r3
 800b50a:	f040 80ad 	bne.w	800b668 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b512:	69db      	ldr	r3, [r3, #28]
 800b514:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b518:	f040 80a6 	bne.w	800b668 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2202      	movs	r2, #2
 800b520:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b526:	4619      	mov	r1, r3
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 f8b7 	bl	800b69c <HAL_UARTEx_RxEventCallback>
      return;
 800b52e:	e09b      	b.n	800b668 <HAL_UART_IRQHandler+0x548>
 800b530:	0800b8a1 	.word	0x0800b8a1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	1ad3      	subs	r3, r2, r3
 800b540:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b548:	b29b      	uxth	r3, r3
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	f000 808e 	beq.w	800b66c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800b550:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b554:	2b00      	cmp	r3, #0
 800b556:	f000 8089 	beq.w	800b66c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	330c      	adds	r3, #12
 800b560:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b564:	e853 3f00 	ldrex	r3, [r3]
 800b568:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b56a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b56c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b570:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	330c      	adds	r3, #12
 800b57a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b57e:	647a      	str	r2, [r7, #68]	@ 0x44
 800b580:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b582:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b584:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b586:	e841 2300 	strex	r3, r2, [r1]
 800b58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b58c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1e3      	bne.n	800b55a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	3314      	adds	r3, #20
 800b598:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b59c:	e853 3f00 	ldrex	r3, [r3]
 800b5a0:	623b      	str	r3, [r7, #32]
   return(result);
 800b5a2:	6a3b      	ldr	r3, [r7, #32]
 800b5a4:	f023 0301 	bic.w	r3, r3, #1
 800b5a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	3314      	adds	r3, #20
 800b5b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b5b6:	633a      	str	r2, [r7, #48]	@ 0x30
 800b5b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b5bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5be:	e841 2300 	strex	r3, r2, [r1]
 800b5c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d1e3      	bne.n	800b592 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2220      	movs	r2, #32
 800b5ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	330c      	adds	r3, #12
 800b5de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	e853 3f00 	ldrex	r3, [r3]
 800b5e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f023 0310 	bic.w	r3, r3, #16
 800b5ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	330c      	adds	r3, #12
 800b5f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b5fc:	61fa      	str	r2, [r7, #28]
 800b5fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b600:	69b9      	ldr	r1, [r7, #24]
 800b602:	69fa      	ldr	r2, [r7, #28]
 800b604:	e841 2300 	strex	r3, r2, [r1]
 800b608:	617b      	str	r3, [r7, #20]
   return(result);
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d1e3      	bne.n	800b5d8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2202      	movs	r2, #2
 800b614:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b616:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b61a:	4619      	mov	r1, r3
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f000 f83d 	bl	800b69c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b622:	e023      	b.n	800b66c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d009      	beq.n	800b644 <HAL_UART_IRQHandler+0x524>
 800b630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d003      	beq.n	800b644 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 f940 	bl	800b8c2 <UART_Transmit_IT>
    return;
 800b642:	e014      	b.n	800b66e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00e      	beq.n	800b66e <HAL_UART_IRQHandler+0x54e>
 800b650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d008      	beq.n	800b66e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 f980 	bl	800b962 <UART_EndTransmit_IT>
    return;
 800b662:	e004      	b.n	800b66e <HAL_UART_IRQHandler+0x54e>
    return;
 800b664:	bf00      	nop
 800b666:	e002      	b.n	800b66e <HAL_UART_IRQHandler+0x54e>
      return;
 800b668:	bf00      	nop
 800b66a:	e000      	b.n	800b66e <HAL_UART_IRQHandler+0x54e>
      return;
 800b66c:	bf00      	nop
  }
}
 800b66e:	37e8      	adds	r7, #232	@ 0xe8
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b67c:	bf00      	nop
 800b67e:	370c      	adds	r7, #12
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr

0800b688 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b688:	b480      	push	{r7}
 800b68a:	b083      	sub	sp, #12
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b690:	bf00      	nop
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b6a8:	bf00      	nop
 800b6aa:	370c      	adds	r7, #12
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	603b      	str	r3, [r7, #0]
 800b6c0:	4613      	mov	r3, r2
 800b6c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6c4:	e03b      	b.n	800b73e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6c6:	6a3b      	ldr	r3, [r7, #32]
 800b6c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6cc:	d037      	beq.n	800b73e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6ce:	f7fe f831 	bl	8009734 <HAL_GetTick>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	1ad3      	subs	r3, r2, r3
 800b6d8:	6a3a      	ldr	r2, [r7, #32]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d302      	bcc.n	800b6e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b6de:	6a3b      	ldr	r3, [r7, #32]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d101      	bne.n	800b6e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b6e4:	2303      	movs	r3, #3
 800b6e6:	e03a      	b.n	800b75e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	68db      	ldr	r3, [r3, #12]
 800b6ee:	f003 0304 	and.w	r3, r3, #4
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d023      	beq.n	800b73e <UART_WaitOnFlagUntilTimeout+0x8a>
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	2b80      	cmp	r3, #128	@ 0x80
 800b6fa:	d020      	beq.n	800b73e <UART_WaitOnFlagUntilTimeout+0x8a>
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	2b40      	cmp	r3, #64	@ 0x40
 800b700:	d01d      	beq.n	800b73e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f003 0308 	and.w	r3, r3, #8
 800b70c:	2b08      	cmp	r3, #8
 800b70e:	d116      	bne.n	800b73e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800b710:	2300      	movs	r3, #0
 800b712:	617b      	str	r3, [r7, #20]
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	617b      	str	r3, [r7, #20]
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	617b      	str	r3, [r7, #20]
 800b724:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f000 f857 	bl	800b7da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2208      	movs	r2, #8
 800b730:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2200      	movs	r2, #0
 800b736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b73a:	2301      	movs	r3, #1
 800b73c:	e00f      	b.n	800b75e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	4013      	ands	r3, r2
 800b748:	68ba      	ldr	r2, [r7, #8]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	bf0c      	ite	eq
 800b74e:	2301      	moveq	r3, #1
 800b750:	2300      	movne	r3, #0
 800b752:	b2db      	uxtb	r3, r3
 800b754:	461a      	mov	r2, r3
 800b756:	79fb      	ldrb	r3, [r7, #7]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d0b4      	beq.n	800b6c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b75c:	2300      	movs	r3, #0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3718      	adds	r7, #24
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b766:	b480      	push	{r7}
 800b768:	b085      	sub	sp, #20
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	60f8      	str	r0, [r7, #12]
 800b76e:	60b9      	str	r1, [r7, #8]
 800b770:	4613      	mov	r3, r2
 800b772:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	68ba      	ldr	r2, [r7, #8]
 800b778:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	88fa      	ldrh	r2, [r7, #6]
 800b77e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	88fa      	ldrh	r2, [r7, #6]
 800b784:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2200      	movs	r2, #0
 800b78a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2222      	movs	r2, #34	@ 0x22
 800b790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	691b      	ldr	r3, [r3, #16]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d007      	beq.n	800b7ac <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	68da      	ldr	r2, [r3, #12]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b7aa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	695a      	ldr	r2, [r3, #20]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f042 0201 	orr.w	r2, r2, #1
 800b7ba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	68da      	ldr	r2, [r3, #12]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f042 0220 	orr.w	r2, r2, #32
 800b7ca:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b7cc:	2300      	movs	r3, #0
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3714      	adds	r7, #20
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr

0800b7da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b7da:	b480      	push	{r7}
 800b7dc:	b095      	sub	sp, #84	@ 0x54
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	330c      	adds	r3, #12
 800b7e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7ec:	e853 3f00 	ldrex	r3, [r3]
 800b7f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b7f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	330c      	adds	r3, #12
 800b800:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b802:	643a      	str	r2, [r7, #64]	@ 0x40
 800b804:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b806:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b808:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b80a:	e841 2300 	strex	r3, r2, [r1]
 800b80e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b812:	2b00      	cmp	r3, #0
 800b814:	d1e5      	bne.n	800b7e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	3314      	adds	r3, #20
 800b81c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b81e:	6a3b      	ldr	r3, [r7, #32]
 800b820:	e853 3f00 	ldrex	r3, [r3]
 800b824:	61fb      	str	r3, [r7, #28]
   return(result);
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	f023 0301 	bic.w	r3, r3, #1
 800b82c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	3314      	adds	r3, #20
 800b834:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b836:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b838:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b83a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b83c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b83e:	e841 2300 	strex	r3, r2, [r1]
 800b842:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b846:	2b00      	cmp	r3, #0
 800b848:	d1e5      	bne.n	800b816 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b84e:	2b01      	cmp	r3, #1
 800b850:	d119      	bne.n	800b886 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	330c      	adds	r3, #12
 800b858:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	e853 3f00 	ldrex	r3, [r3]
 800b860:	60bb      	str	r3, [r7, #8]
   return(result);
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	f023 0310 	bic.w	r3, r3, #16
 800b868:	647b      	str	r3, [r7, #68]	@ 0x44
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	330c      	adds	r3, #12
 800b870:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b872:	61ba      	str	r2, [r7, #24]
 800b874:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b876:	6979      	ldr	r1, [r7, #20]
 800b878:	69ba      	ldr	r2, [r7, #24]
 800b87a:	e841 2300 	strex	r3, r2, [r1]
 800b87e:	613b      	str	r3, [r7, #16]
   return(result);
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d1e5      	bne.n	800b852 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2220      	movs	r2, #32
 800b88a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b894:	bf00      	nop
 800b896:	3754      	adds	r7, #84	@ 0x54
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8b4:	68f8      	ldr	r0, [r7, #12]
 800b8b6:	f7ff fee7 	bl	800b688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8ba:	bf00      	nop
 800b8bc:	3710      	adds	r7, #16
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}

0800b8c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b8c2:	b480      	push	{r7}
 800b8c4:	b085      	sub	sp, #20
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	2b21      	cmp	r3, #33	@ 0x21
 800b8d4:	d13e      	bne.n	800b954 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b8de:	d114      	bne.n	800b90a <UART_Transmit_IT+0x48>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	691b      	ldr	r3, [r3, #16]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d110      	bne.n	800b90a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6a1b      	ldr	r3, [r3, #32]
 800b8ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	881b      	ldrh	r3, [r3, #0]
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b8fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a1b      	ldr	r3, [r3, #32]
 800b902:	1c9a      	adds	r2, r3, #2
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	621a      	str	r2, [r3, #32]
 800b908:	e008      	b.n	800b91c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6a1b      	ldr	r3, [r3, #32]
 800b90e:	1c59      	adds	r1, r3, #1
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	6211      	str	r1, [r2, #32]
 800b914:	781a      	ldrb	r2, [r3, #0]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b920:	b29b      	uxth	r3, r3
 800b922:	3b01      	subs	r3, #1
 800b924:	b29b      	uxth	r3, r3
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	4619      	mov	r1, r3
 800b92a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d10f      	bne.n	800b950 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	68da      	ldr	r2, [r3, #12]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b93e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	68da      	ldr	r2, [r3, #12]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b94e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b950:	2300      	movs	r3, #0
 800b952:	e000      	b.n	800b956 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b954:	2302      	movs	r3, #2
  }
}
 800b956:	4618      	mov	r0, r3
 800b958:	3714      	adds	r7, #20
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr

0800b962 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b962:	b580      	push	{r7, lr}
 800b964:	b082      	sub	sp, #8
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	68da      	ldr	r2, [r3, #12]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b978:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2220      	movs	r2, #32
 800b97e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7ff fe76 	bl	800b674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3708      	adds	r7, #8
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b08c      	sub	sp, #48	@ 0x30
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800b99a:	2300      	movs	r3, #0
 800b99c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	2b22      	cmp	r3, #34	@ 0x22
 800b9ac:	f040 80aa 	bne.w	800bb04 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	689b      	ldr	r3, [r3, #8]
 800b9b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9b8:	d115      	bne.n	800b9e6 <UART_Receive_IT+0x54>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	691b      	ldr	r3, [r3, #16]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d111      	bne.n	800b9e6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9d4:	b29a      	uxth	r2, r3
 800b9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9de:	1c9a      	adds	r2, r3, #2
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	629a      	str	r2, [r3, #40]	@ 0x28
 800b9e4:	e024      	b.n	800ba30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	689b      	ldr	r3, [r3, #8]
 800b9f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9f4:	d007      	beq.n	800ba06 <UART_Receive_IT+0x74>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	689b      	ldr	r3, [r3, #8]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d10a      	bne.n	800ba14 <UART_Receive_IT+0x82>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	691b      	ldr	r3, [r3, #16]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d106      	bne.n	800ba14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	b2da      	uxtb	r2, r3
 800ba0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba10:	701a      	strb	r2, [r3, #0]
 800ba12:	e008      	b.n	800ba26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba20:	b2da      	uxtb	r2, r3
 800ba22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba2a:	1c5a      	adds	r2, r3, #1
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	3b01      	subs	r3, #1
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d15d      	bne.n	800bb00 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	68da      	ldr	r2, [r3, #12]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f022 0220 	bic.w	r2, r2, #32
 800ba52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	68da      	ldr	r2, [r3, #12]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ba62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	695a      	ldr	r2, [r3, #20]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f022 0201 	bic.w	r2, r2, #1
 800ba72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2220      	movs	r2, #32
 800ba78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d135      	bne.n	800baf6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	330c      	adds	r3, #12
 800ba96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	e853 3f00 	ldrex	r3, [r3]
 800ba9e:	613b      	str	r3, [r7, #16]
   return(result);
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	f023 0310 	bic.w	r3, r3, #16
 800baa6:	627b      	str	r3, [r7, #36]	@ 0x24
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	330c      	adds	r3, #12
 800baae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bab0:	623a      	str	r2, [r7, #32]
 800bab2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab4:	69f9      	ldr	r1, [r7, #28]
 800bab6:	6a3a      	ldr	r2, [r7, #32]
 800bab8:	e841 2300 	strex	r3, r2, [r1]
 800babc:	61bb      	str	r3, [r7, #24]
   return(result);
 800babe:	69bb      	ldr	r3, [r7, #24]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d1e5      	bne.n	800ba90 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f003 0310 	and.w	r3, r3, #16
 800bace:	2b10      	cmp	r3, #16
 800bad0:	d10a      	bne.n	800bae8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bad2:	2300      	movs	r3, #0
 800bad4:	60fb      	str	r3, [r7, #12]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	60fb      	str	r3, [r7, #12]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	60fb      	str	r3, [r7, #12]
 800bae6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800baec:	4619      	mov	r1, r3
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f7ff fdd4 	bl	800b69c <HAL_UARTEx_RxEventCallback>
 800baf4:	e002      	b.n	800bafc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f7fd f90c 	bl	8008d14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bafc:	2300      	movs	r3, #0
 800bafe:	e002      	b.n	800bb06 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bb00:	2300      	movs	r3, #0
 800bb02:	e000      	b.n	800bb06 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bb04:	2302      	movs	r3, #2
  }
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3730      	adds	r7, #48	@ 0x30
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
	...

0800bb10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb14:	b0c0      	sub	sp, #256	@ 0x100
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	691b      	ldr	r3, [r3, #16]
 800bb24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800bb28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb2c:	68d9      	ldr	r1, [r3, #12]
 800bb2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb32:	681a      	ldr	r2, [r3, #0]
 800bb34:	ea40 0301 	orr.w	r3, r0, r1
 800bb38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bb3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb3e:	689a      	ldr	r2, [r3, #8]
 800bb40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb44:	691b      	ldr	r3, [r3, #16]
 800bb46:	431a      	orrs	r2, r3
 800bb48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb4c:	695b      	ldr	r3, [r3, #20]
 800bb4e:	431a      	orrs	r2, r3
 800bb50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb54:	69db      	ldr	r3, [r3, #28]
 800bb56:	4313      	orrs	r3, r2
 800bb58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bb5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800bb68:	f021 010c 	bic.w	r1, r1, #12
 800bb6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bb76:	430b      	orrs	r3, r1
 800bb78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bb7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	695b      	ldr	r3, [r3, #20]
 800bb82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800bb86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb8a:	6999      	ldr	r1, [r3, #24]
 800bb8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	ea40 0301 	orr.w	r3, r0, r1
 800bb96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bb98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb9c:	681a      	ldr	r2, [r3, #0]
 800bb9e:	4b8f      	ldr	r3, [pc, #572]	@ (800bddc <UART_SetConfig+0x2cc>)
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d005      	beq.n	800bbb0 <UART_SetConfig+0xa0>
 800bba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	4b8d      	ldr	r3, [pc, #564]	@ (800bde0 <UART_SetConfig+0x2d0>)
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d104      	bne.n	800bbba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bbb0:	f7fe fab0 	bl	800a114 <HAL_RCC_GetPCLK2Freq>
 800bbb4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800bbb8:	e003      	b.n	800bbc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bbba:	f7fe fa97 	bl	800a0ec <HAL_RCC_GetPCLK1Freq>
 800bbbe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bbc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbc6:	69db      	ldr	r3, [r3, #28]
 800bbc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bbcc:	f040 810c 	bne.w	800bde8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bbd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bbda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800bbde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800bbe2:	4622      	mov	r2, r4
 800bbe4:	462b      	mov	r3, r5
 800bbe6:	1891      	adds	r1, r2, r2
 800bbe8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800bbea:	415b      	adcs	r3, r3
 800bbec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bbee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800bbf2:	4621      	mov	r1, r4
 800bbf4:	eb12 0801 	adds.w	r8, r2, r1
 800bbf8:	4629      	mov	r1, r5
 800bbfa:	eb43 0901 	adc.w	r9, r3, r1
 800bbfe:	f04f 0200 	mov.w	r2, #0
 800bc02:	f04f 0300 	mov.w	r3, #0
 800bc06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bc0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bc0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bc12:	4690      	mov	r8, r2
 800bc14:	4699      	mov	r9, r3
 800bc16:	4623      	mov	r3, r4
 800bc18:	eb18 0303 	adds.w	r3, r8, r3
 800bc1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bc20:	462b      	mov	r3, r5
 800bc22:	eb49 0303 	adc.w	r3, r9, r3
 800bc26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bc2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bc36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800bc3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bc3e:	460b      	mov	r3, r1
 800bc40:	18db      	adds	r3, r3, r3
 800bc42:	653b      	str	r3, [r7, #80]	@ 0x50
 800bc44:	4613      	mov	r3, r2
 800bc46:	eb42 0303 	adc.w	r3, r2, r3
 800bc4a:	657b      	str	r3, [r7, #84]	@ 0x54
 800bc4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800bc50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800bc54:	f7fc fb2c 	bl	80082b0 <__aeabi_uldivmod>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	4b61      	ldr	r3, [pc, #388]	@ (800bde4 <UART_SetConfig+0x2d4>)
 800bc5e:	fba3 2302 	umull	r2, r3, r3, r2
 800bc62:	095b      	lsrs	r3, r3, #5
 800bc64:	011c      	lsls	r4, r3, #4
 800bc66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bc70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800bc74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800bc78:	4642      	mov	r2, r8
 800bc7a:	464b      	mov	r3, r9
 800bc7c:	1891      	adds	r1, r2, r2
 800bc7e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800bc80:	415b      	adcs	r3, r3
 800bc82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800bc88:	4641      	mov	r1, r8
 800bc8a:	eb12 0a01 	adds.w	sl, r2, r1
 800bc8e:	4649      	mov	r1, r9
 800bc90:	eb43 0b01 	adc.w	fp, r3, r1
 800bc94:	f04f 0200 	mov.w	r2, #0
 800bc98:	f04f 0300 	mov.w	r3, #0
 800bc9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bca0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bca4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bca8:	4692      	mov	sl, r2
 800bcaa:	469b      	mov	fp, r3
 800bcac:	4643      	mov	r3, r8
 800bcae:	eb1a 0303 	adds.w	r3, sl, r3
 800bcb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bcb6:	464b      	mov	r3, r9
 800bcb8:	eb4b 0303 	adc.w	r3, fp, r3
 800bcbc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bcc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bccc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800bcd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	18db      	adds	r3, r3, r3
 800bcd8:	643b      	str	r3, [r7, #64]	@ 0x40
 800bcda:	4613      	mov	r3, r2
 800bcdc:	eb42 0303 	adc.w	r3, r2, r3
 800bce0:	647b      	str	r3, [r7, #68]	@ 0x44
 800bce2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800bce6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800bcea:	f7fc fae1 	bl	80082b0 <__aeabi_uldivmod>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	4611      	mov	r1, r2
 800bcf4:	4b3b      	ldr	r3, [pc, #236]	@ (800bde4 <UART_SetConfig+0x2d4>)
 800bcf6:	fba3 2301 	umull	r2, r3, r3, r1
 800bcfa:	095b      	lsrs	r3, r3, #5
 800bcfc:	2264      	movs	r2, #100	@ 0x64
 800bcfe:	fb02 f303 	mul.w	r3, r2, r3
 800bd02:	1acb      	subs	r3, r1, r3
 800bd04:	00db      	lsls	r3, r3, #3
 800bd06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800bd0a:	4b36      	ldr	r3, [pc, #216]	@ (800bde4 <UART_SetConfig+0x2d4>)
 800bd0c:	fba3 2302 	umull	r2, r3, r3, r2
 800bd10:	095b      	lsrs	r3, r3, #5
 800bd12:	005b      	lsls	r3, r3, #1
 800bd14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800bd18:	441c      	add	r4, r3
 800bd1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bd24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800bd28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800bd2c:	4642      	mov	r2, r8
 800bd2e:	464b      	mov	r3, r9
 800bd30:	1891      	adds	r1, r2, r2
 800bd32:	63b9      	str	r1, [r7, #56]	@ 0x38
 800bd34:	415b      	adcs	r3, r3
 800bd36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bd3c:	4641      	mov	r1, r8
 800bd3e:	1851      	adds	r1, r2, r1
 800bd40:	6339      	str	r1, [r7, #48]	@ 0x30
 800bd42:	4649      	mov	r1, r9
 800bd44:	414b      	adcs	r3, r1
 800bd46:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd48:	f04f 0200 	mov.w	r2, #0
 800bd4c:	f04f 0300 	mov.w	r3, #0
 800bd50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800bd54:	4659      	mov	r1, fp
 800bd56:	00cb      	lsls	r3, r1, #3
 800bd58:	4651      	mov	r1, sl
 800bd5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bd5e:	4651      	mov	r1, sl
 800bd60:	00ca      	lsls	r2, r1, #3
 800bd62:	4610      	mov	r0, r2
 800bd64:	4619      	mov	r1, r3
 800bd66:	4603      	mov	r3, r0
 800bd68:	4642      	mov	r2, r8
 800bd6a:	189b      	adds	r3, r3, r2
 800bd6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bd70:	464b      	mov	r3, r9
 800bd72:	460a      	mov	r2, r1
 800bd74:	eb42 0303 	adc.w	r3, r2, r3
 800bd78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bd7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	2200      	movs	r2, #0
 800bd84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bd88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800bd8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800bd90:	460b      	mov	r3, r1
 800bd92:	18db      	adds	r3, r3, r3
 800bd94:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bd96:	4613      	mov	r3, r2
 800bd98:	eb42 0303 	adc.w	r3, r2, r3
 800bd9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800bda2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800bda6:	f7fc fa83 	bl	80082b0 <__aeabi_uldivmod>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	460b      	mov	r3, r1
 800bdae:	4b0d      	ldr	r3, [pc, #52]	@ (800bde4 <UART_SetConfig+0x2d4>)
 800bdb0:	fba3 1302 	umull	r1, r3, r3, r2
 800bdb4:	095b      	lsrs	r3, r3, #5
 800bdb6:	2164      	movs	r1, #100	@ 0x64
 800bdb8:	fb01 f303 	mul.w	r3, r1, r3
 800bdbc:	1ad3      	subs	r3, r2, r3
 800bdbe:	00db      	lsls	r3, r3, #3
 800bdc0:	3332      	adds	r3, #50	@ 0x32
 800bdc2:	4a08      	ldr	r2, [pc, #32]	@ (800bde4 <UART_SetConfig+0x2d4>)
 800bdc4:	fba2 2303 	umull	r2, r3, r2, r3
 800bdc8:	095b      	lsrs	r3, r3, #5
 800bdca:	f003 0207 	and.w	r2, r3, #7
 800bdce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4422      	add	r2, r4
 800bdd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bdd8:	e106      	b.n	800bfe8 <UART_SetConfig+0x4d8>
 800bdda:	bf00      	nop
 800bddc:	40011000 	.word	0x40011000
 800bde0:	40011400 	.word	0x40011400
 800bde4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bde8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bdec:	2200      	movs	r2, #0
 800bdee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bdf2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800bdf6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800bdfa:	4642      	mov	r2, r8
 800bdfc:	464b      	mov	r3, r9
 800bdfe:	1891      	adds	r1, r2, r2
 800be00:	6239      	str	r1, [r7, #32]
 800be02:	415b      	adcs	r3, r3
 800be04:	627b      	str	r3, [r7, #36]	@ 0x24
 800be06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800be0a:	4641      	mov	r1, r8
 800be0c:	1854      	adds	r4, r2, r1
 800be0e:	4649      	mov	r1, r9
 800be10:	eb43 0501 	adc.w	r5, r3, r1
 800be14:	f04f 0200 	mov.w	r2, #0
 800be18:	f04f 0300 	mov.w	r3, #0
 800be1c:	00eb      	lsls	r3, r5, #3
 800be1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800be22:	00e2      	lsls	r2, r4, #3
 800be24:	4614      	mov	r4, r2
 800be26:	461d      	mov	r5, r3
 800be28:	4643      	mov	r3, r8
 800be2a:	18e3      	adds	r3, r4, r3
 800be2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800be30:	464b      	mov	r3, r9
 800be32:	eb45 0303 	adc.w	r3, r5, r3
 800be36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800be3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	2200      	movs	r2, #0
 800be42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800be46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800be4a:	f04f 0200 	mov.w	r2, #0
 800be4e:	f04f 0300 	mov.w	r3, #0
 800be52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800be56:	4629      	mov	r1, r5
 800be58:	008b      	lsls	r3, r1, #2
 800be5a:	4621      	mov	r1, r4
 800be5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800be60:	4621      	mov	r1, r4
 800be62:	008a      	lsls	r2, r1, #2
 800be64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800be68:	f7fc fa22 	bl	80082b0 <__aeabi_uldivmod>
 800be6c:	4602      	mov	r2, r0
 800be6e:	460b      	mov	r3, r1
 800be70:	4b60      	ldr	r3, [pc, #384]	@ (800bff4 <UART_SetConfig+0x4e4>)
 800be72:	fba3 2302 	umull	r2, r3, r3, r2
 800be76:	095b      	lsrs	r3, r3, #5
 800be78:	011c      	lsls	r4, r3, #4
 800be7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800be7e:	2200      	movs	r2, #0
 800be80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800be84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800be88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800be8c:	4642      	mov	r2, r8
 800be8e:	464b      	mov	r3, r9
 800be90:	1891      	adds	r1, r2, r2
 800be92:	61b9      	str	r1, [r7, #24]
 800be94:	415b      	adcs	r3, r3
 800be96:	61fb      	str	r3, [r7, #28]
 800be98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800be9c:	4641      	mov	r1, r8
 800be9e:	1851      	adds	r1, r2, r1
 800bea0:	6139      	str	r1, [r7, #16]
 800bea2:	4649      	mov	r1, r9
 800bea4:	414b      	adcs	r3, r1
 800bea6:	617b      	str	r3, [r7, #20]
 800bea8:	f04f 0200 	mov.w	r2, #0
 800beac:	f04f 0300 	mov.w	r3, #0
 800beb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800beb4:	4659      	mov	r1, fp
 800beb6:	00cb      	lsls	r3, r1, #3
 800beb8:	4651      	mov	r1, sl
 800beba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bebe:	4651      	mov	r1, sl
 800bec0:	00ca      	lsls	r2, r1, #3
 800bec2:	4610      	mov	r0, r2
 800bec4:	4619      	mov	r1, r3
 800bec6:	4603      	mov	r3, r0
 800bec8:	4642      	mov	r2, r8
 800beca:	189b      	adds	r3, r3, r2
 800becc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bed0:	464b      	mov	r3, r9
 800bed2:	460a      	mov	r2, r1
 800bed4:	eb42 0303 	adc.w	r3, r2, r3
 800bed8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bedc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bee6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800bee8:	f04f 0200 	mov.w	r2, #0
 800beec:	f04f 0300 	mov.w	r3, #0
 800bef0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800bef4:	4649      	mov	r1, r9
 800bef6:	008b      	lsls	r3, r1, #2
 800bef8:	4641      	mov	r1, r8
 800befa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800befe:	4641      	mov	r1, r8
 800bf00:	008a      	lsls	r2, r1, #2
 800bf02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800bf06:	f7fc f9d3 	bl	80082b0 <__aeabi_uldivmod>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	4611      	mov	r1, r2
 800bf10:	4b38      	ldr	r3, [pc, #224]	@ (800bff4 <UART_SetConfig+0x4e4>)
 800bf12:	fba3 2301 	umull	r2, r3, r3, r1
 800bf16:	095b      	lsrs	r3, r3, #5
 800bf18:	2264      	movs	r2, #100	@ 0x64
 800bf1a:	fb02 f303 	mul.w	r3, r2, r3
 800bf1e:	1acb      	subs	r3, r1, r3
 800bf20:	011b      	lsls	r3, r3, #4
 800bf22:	3332      	adds	r3, #50	@ 0x32
 800bf24:	4a33      	ldr	r2, [pc, #204]	@ (800bff4 <UART_SetConfig+0x4e4>)
 800bf26:	fba2 2303 	umull	r2, r3, r2, r3
 800bf2a:	095b      	lsrs	r3, r3, #5
 800bf2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bf30:	441c      	add	r4, r3
 800bf32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bf36:	2200      	movs	r2, #0
 800bf38:	673b      	str	r3, [r7, #112]	@ 0x70
 800bf3a:	677a      	str	r2, [r7, #116]	@ 0x74
 800bf3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800bf40:	4642      	mov	r2, r8
 800bf42:	464b      	mov	r3, r9
 800bf44:	1891      	adds	r1, r2, r2
 800bf46:	60b9      	str	r1, [r7, #8]
 800bf48:	415b      	adcs	r3, r3
 800bf4a:	60fb      	str	r3, [r7, #12]
 800bf4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bf50:	4641      	mov	r1, r8
 800bf52:	1851      	adds	r1, r2, r1
 800bf54:	6039      	str	r1, [r7, #0]
 800bf56:	4649      	mov	r1, r9
 800bf58:	414b      	adcs	r3, r1
 800bf5a:	607b      	str	r3, [r7, #4]
 800bf5c:	f04f 0200 	mov.w	r2, #0
 800bf60:	f04f 0300 	mov.w	r3, #0
 800bf64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bf68:	4659      	mov	r1, fp
 800bf6a:	00cb      	lsls	r3, r1, #3
 800bf6c:	4651      	mov	r1, sl
 800bf6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf72:	4651      	mov	r1, sl
 800bf74:	00ca      	lsls	r2, r1, #3
 800bf76:	4610      	mov	r0, r2
 800bf78:	4619      	mov	r1, r3
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	4642      	mov	r2, r8
 800bf7e:	189b      	adds	r3, r3, r2
 800bf80:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bf82:	464b      	mov	r3, r9
 800bf84:	460a      	mov	r2, r1
 800bf86:	eb42 0303 	adc.w	r3, r2, r3
 800bf8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bf8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	663b      	str	r3, [r7, #96]	@ 0x60
 800bf96:	667a      	str	r2, [r7, #100]	@ 0x64
 800bf98:	f04f 0200 	mov.w	r2, #0
 800bf9c:	f04f 0300 	mov.w	r3, #0
 800bfa0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800bfa4:	4649      	mov	r1, r9
 800bfa6:	008b      	lsls	r3, r1, #2
 800bfa8:	4641      	mov	r1, r8
 800bfaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bfae:	4641      	mov	r1, r8
 800bfb0:	008a      	lsls	r2, r1, #2
 800bfb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800bfb6:	f7fc f97b 	bl	80082b0 <__aeabi_uldivmod>
 800bfba:	4602      	mov	r2, r0
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	4b0d      	ldr	r3, [pc, #52]	@ (800bff4 <UART_SetConfig+0x4e4>)
 800bfc0:	fba3 1302 	umull	r1, r3, r3, r2
 800bfc4:	095b      	lsrs	r3, r3, #5
 800bfc6:	2164      	movs	r1, #100	@ 0x64
 800bfc8:	fb01 f303 	mul.w	r3, r1, r3
 800bfcc:	1ad3      	subs	r3, r2, r3
 800bfce:	011b      	lsls	r3, r3, #4
 800bfd0:	3332      	adds	r3, #50	@ 0x32
 800bfd2:	4a08      	ldr	r2, [pc, #32]	@ (800bff4 <UART_SetConfig+0x4e4>)
 800bfd4:	fba2 2303 	umull	r2, r3, r2, r3
 800bfd8:	095b      	lsrs	r3, r3, #5
 800bfda:	f003 020f 	and.w	r2, r3, #15
 800bfde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4422      	add	r2, r4
 800bfe6:	609a      	str	r2, [r3, #8]
}
 800bfe8:	bf00      	nop
 800bfea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800bfee:	46bd      	mov	sp, r7
 800bff0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bff4:	51eb851f 	.word	0x51eb851f

0800bff8 <std>:
 800bff8:	2300      	movs	r3, #0
 800bffa:	b510      	push	{r4, lr}
 800bffc:	4604      	mov	r4, r0
 800bffe:	e9c0 3300 	strd	r3, r3, [r0]
 800c002:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c006:	6083      	str	r3, [r0, #8]
 800c008:	8181      	strh	r1, [r0, #12]
 800c00a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c00c:	81c2      	strh	r2, [r0, #14]
 800c00e:	6183      	str	r3, [r0, #24]
 800c010:	4619      	mov	r1, r3
 800c012:	2208      	movs	r2, #8
 800c014:	305c      	adds	r0, #92	@ 0x5c
 800c016:	f000 f9f9 	bl	800c40c <memset>
 800c01a:	4b0d      	ldr	r3, [pc, #52]	@ (800c050 <std+0x58>)
 800c01c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c01e:	4b0d      	ldr	r3, [pc, #52]	@ (800c054 <std+0x5c>)
 800c020:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c022:	4b0d      	ldr	r3, [pc, #52]	@ (800c058 <std+0x60>)
 800c024:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c026:	4b0d      	ldr	r3, [pc, #52]	@ (800c05c <std+0x64>)
 800c028:	6323      	str	r3, [r4, #48]	@ 0x30
 800c02a:	4b0d      	ldr	r3, [pc, #52]	@ (800c060 <std+0x68>)
 800c02c:	6224      	str	r4, [r4, #32]
 800c02e:	429c      	cmp	r4, r3
 800c030:	d006      	beq.n	800c040 <std+0x48>
 800c032:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c036:	4294      	cmp	r4, r2
 800c038:	d002      	beq.n	800c040 <std+0x48>
 800c03a:	33d0      	adds	r3, #208	@ 0xd0
 800c03c:	429c      	cmp	r4, r3
 800c03e:	d105      	bne.n	800c04c <std+0x54>
 800c040:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c048:	f000 ba58 	b.w	800c4fc <__retarget_lock_init_recursive>
 800c04c:	bd10      	pop	{r4, pc}
 800c04e:	bf00      	nop
 800c050:	0800c25d 	.word	0x0800c25d
 800c054:	0800c27f 	.word	0x0800c27f
 800c058:	0800c2b7 	.word	0x0800c2b7
 800c05c:	0800c2db 	.word	0x0800c2db
 800c060:	20000204 	.word	0x20000204

0800c064 <stdio_exit_handler>:
 800c064:	4a02      	ldr	r2, [pc, #8]	@ (800c070 <stdio_exit_handler+0xc>)
 800c066:	4903      	ldr	r1, [pc, #12]	@ (800c074 <stdio_exit_handler+0x10>)
 800c068:	4803      	ldr	r0, [pc, #12]	@ (800c078 <stdio_exit_handler+0x14>)
 800c06a:	f000 b869 	b.w	800c140 <_fwalk_sglue>
 800c06e:	bf00      	nop
 800c070:	20000044 	.word	0x20000044
 800c074:	0800cd9d 	.word	0x0800cd9d
 800c078:	20000054 	.word	0x20000054

0800c07c <cleanup_stdio>:
 800c07c:	6841      	ldr	r1, [r0, #4]
 800c07e:	4b0c      	ldr	r3, [pc, #48]	@ (800c0b0 <cleanup_stdio+0x34>)
 800c080:	4299      	cmp	r1, r3
 800c082:	b510      	push	{r4, lr}
 800c084:	4604      	mov	r4, r0
 800c086:	d001      	beq.n	800c08c <cleanup_stdio+0x10>
 800c088:	f000 fe88 	bl	800cd9c <_fflush_r>
 800c08c:	68a1      	ldr	r1, [r4, #8]
 800c08e:	4b09      	ldr	r3, [pc, #36]	@ (800c0b4 <cleanup_stdio+0x38>)
 800c090:	4299      	cmp	r1, r3
 800c092:	d002      	beq.n	800c09a <cleanup_stdio+0x1e>
 800c094:	4620      	mov	r0, r4
 800c096:	f000 fe81 	bl	800cd9c <_fflush_r>
 800c09a:	68e1      	ldr	r1, [r4, #12]
 800c09c:	4b06      	ldr	r3, [pc, #24]	@ (800c0b8 <cleanup_stdio+0x3c>)
 800c09e:	4299      	cmp	r1, r3
 800c0a0:	d004      	beq.n	800c0ac <cleanup_stdio+0x30>
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0a8:	f000 be78 	b.w	800cd9c <_fflush_r>
 800c0ac:	bd10      	pop	{r4, pc}
 800c0ae:	bf00      	nop
 800c0b0:	20000204 	.word	0x20000204
 800c0b4:	2000026c 	.word	0x2000026c
 800c0b8:	200002d4 	.word	0x200002d4

0800c0bc <global_stdio_init.part.0>:
 800c0bc:	b510      	push	{r4, lr}
 800c0be:	4b0b      	ldr	r3, [pc, #44]	@ (800c0ec <global_stdio_init.part.0+0x30>)
 800c0c0:	4c0b      	ldr	r4, [pc, #44]	@ (800c0f0 <global_stdio_init.part.0+0x34>)
 800c0c2:	4a0c      	ldr	r2, [pc, #48]	@ (800c0f4 <global_stdio_init.part.0+0x38>)
 800c0c4:	601a      	str	r2, [r3, #0]
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	2104      	movs	r1, #4
 800c0cc:	f7ff ff94 	bl	800bff8 <std>
 800c0d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	2109      	movs	r1, #9
 800c0d8:	f7ff ff8e 	bl	800bff8 <std>
 800c0dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c0e0:	2202      	movs	r2, #2
 800c0e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0e6:	2112      	movs	r1, #18
 800c0e8:	f7ff bf86 	b.w	800bff8 <std>
 800c0ec:	2000033c 	.word	0x2000033c
 800c0f0:	20000204 	.word	0x20000204
 800c0f4:	0800c065 	.word	0x0800c065

0800c0f8 <__sfp_lock_acquire>:
 800c0f8:	4801      	ldr	r0, [pc, #4]	@ (800c100 <__sfp_lock_acquire+0x8>)
 800c0fa:	f000 ba00 	b.w	800c4fe <__retarget_lock_acquire_recursive>
 800c0fe:	bf00      	nop
 800c100:	20000345 	.word	0x20000345

0800c104 <__sfp_lock_release>:
 800c104:	4801      	ldr	r0, [pc, #4]	@ (800c10c <__sfp_lock_release+0x8>)
 800c106:	f000 b9fb 	b.w	800c500 <__retarget_lock_release_recursive>
 800c10a:	bf00      	nop
 800c10c:	20000345 	.word	0x20000345

0800c110 <__sinit>:
 800c110:	b510      	push	{r4, lr}
 800c112:	4604      	mov	r4, r0
 800c114:	f7ff fff0 	bl	800c0f8 <__sfp_lock_acquire>
 800c118:	6a23      	ldr	r3, [r4, #32]
 800c11a:	b11b      	cbz	r3, 800c124 <__sinit+0x14>
 800c11c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c120:	f7ff bff0 	b.w	800c104 <__sfp_lock_release>
 800c124:	4b04      	ldr	r3, [pc, #16]	@ (800c138 <__sinit+0x28>)
 800c126:	6223      	str	r3, [r4, #32]
 800c128:	4b04      	ldr	r3, [pc, #16]	@ (800c13c <__sinit+0x2c>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d1f5      	bne.n	800c11c <__sinit+0xc>
 800c130:	f7ff ffc4 	bl	800c0bc <global_stdio_init.part.0>
 800c134:	e7f2      	b.n	800c11c <__sinit+0xc>
 800c136:	bf00      	nop
 800c138:	0800c07d 	.word	0x0800c07d
 800c13c:	2000033c 	.word	0x2000033c

0800c140 <_fwalk_sglue>:
 800c140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c144:	4607      	mov	r7, r0
 800c146:	4688      	mov	r8, r1
 800c148:	4614      	mov	r4, r2
 800c14a:	2600      	movs	r6, #0
 800c14c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c150:	f1b9 0901 	subs.w	r9, r9, #1
 800c154:	d505      	bpl.n	800c162 <_fwalk_sglue+0x22>
 800c156:	6824      	ldr	r4, [r4, #0]
 800c158:	2c00      	cmp	r4, #0
 800c15a:	d1f7      	bne.n	800c14c <_fwalk_sglue+0xc>
 800c15c:	4630      	mov	r0, r6
 800c15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c162:	89ab      	ldrh	r3, [r5, #12]
 800c164:	2b01      	cmp	r3, #1
 800c166:	d907      	bls.n	800c178 <_fwalk_sglue+0x38>
 800c168:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c16c:	3301      	adds	r3, #1
 800c16e:	d003      	beq.n	800c178 <_fwalk_sglue+0x38>
 800c170:	4629      	mov	r1, r5
 800c172:	4638      	mov	r0, r7
 800c174:	47c0      	blx	r8
 800c176:	4306      	orrs	r6, r0
 800c178:	3568      	adds	r5, #104	@ 0x68
 800c17a:	e7e9      	b.n	800c150 <_fwalk_sglue+0x10>

0800c17c <iprintf>:
 800c17c:	b40f      	push	{r0, r1, r2, r3}
 800c17e:	b507      	push	{r0, r1, r2, lr}
 800c180:	4906      	ldr	r1, [pc, #24]	@ (800c19c <iprintf+0x20>)
 800c182:	ab04      	add	r3, sp, #16
 800c184:	6808      	ldr	r0, [r1, #0]
 800c186:	f853 2b04 	ldr.w	r2, [r3], #4
 800c18a:	6881      	ldr	r1, [r0, #8]
 800c18c:	9301      	str	r3, [sp, #4]
 800c18e:	f000 fadb 	bl	800c748 <_vfiprintf_r>
 800c192:	b003      	add	sp, #12
 800c194:	f85d eb04 	ldr.w	lr, [sp], #4
 800c198:	b004      	add	sp, #16
 800c19a:	4770      	bx	lr
 800c19c:	20000050 	.word	0x20000050

0800c1a0 <_puts_r>:
 800c1a0:	6a03      	ldr	r3, [r0, #32]
 800c1a2:	b570      	push	{r4, r5, r6, lr}
 800c1a4:	6884      	ldr	r4, [r0, #8]
 800c1a6:	4605      	mov	r5, r0
 800c1a8:	460e      	mov	r6, r1
 800c1aa:	b90b      	cbnz	r3, 800c1b0 <_puts_r+0x10>
 800c1ac:	f7ff ffb0 	bl	800c110 <__sinit>
 800c1b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1b2:	07db      	lsls	r3, r3, #31
 800c1b4:	d405      	bmi.n	800c1c2 <_puts_r+0x22>
 800c1b6:	89a3      	ldrh	r3, [r4, #12]
 800c1b8:	0598      	lsls	r0, r3, #22
 800c1ba:	d402      	bmi.n	800c1c2 <_puts_r+0x22>
 800c1bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1be:	f000 f99e 	bl	800c4fe <__retarget_lock_acquire_recursive>
 800c1c2:	89a3      	ldrh	r3, [r4, #12]
 800c1c4:	0719      	lsls	r1, r3, #28
 800c1c6:	d502      	bpl.n	800c1ce <_puts_r+0x2e>
 800c1c8:	6923      	ldr	r3, [r4, #16]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d135      	bne.n	800c23a <_puts_r+0x9a>
 800c1ce:	4621      	mov	r1, r4
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	f000 f8c5 	bl	800c360 <__swsetup_r>
 800c1d6:	b380      	cbz	r0, 800c23a <_puts_r+0x9a>
 800c1d8:	f04f 35ff 	mov.w	r5, #4294967295
 800c1dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1de:	07da      	lsls	r2, r3, #31
 800c1e0:	d405      	bmi.n	800c1ee <_puts_r+0x4e>
 800c1e2:	89a3      	ldrh	r3, [r4, #12]
 800c1e4:	059b      	lsls	r3, r3, #22
 800c1e6:	d402      	bmi.n	800c1ee <_puts_r+0x4e>
 800c1e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1ea:	f000 f989 	bl	800c500 <__retarget_lock_release_recursive>
 800c1ee:	4628      	mov	r0, r5
 800c1f0:	bd70      	pop	{r4, r5, r6, pc}
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	da04      	bge.n	800c200 <_puts_r+0x60>
 800c1f6:	69a2      	ldr	r2, [r4, #24]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	dc17      	bgt.n	800c22c <_puts_r+0x8c>
 800c1fc:	290a      	cmp	r1, #10
 800c1fe:	d015      	beq.n	800c22c <_puts_r+0x8c>
 800c200:	6823      	ldr	r3, [r4, #0]
 800c202:	1c5a      	adds	r2, r3, #1
 800c204:	6022      	str	r2, [r4, #0]
 800c206:	7019      	strb	r1, [r3, #0]
 800c208:	68a3      	ldr	r3, [r4, #8]
 800c20a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c20e:	3b01      	subs	r3, #1
 800c210:	60a3      	str	r3, [r4, #8]
 800c212:	2900      	cmp	r1, #0
 800c214:	d1ed      	bne.n	800c1f2 <_puts_r+0x52>
 800c216:	2b00      	cmp	r3, #0
 800c218:	da11      	bge.n	800c23e <_puts_r+0x9e>
 800c21a:	4622      	mov	r2, r4
 800c21c:	210a      	movs	r1, #10
 800c21e:	4628      	mov	r0, r5
 800c220:	f000 f85f 	bl	800c2e2 <__swbuf_r>
 800c224:	3001      	adds	r0, #1
 800c226:	d0d7      	beq.n	800c1d8 <_puts_r+0x38>
 800c228:	250a      	movs	r5, #10
 800c22a:	e7d7      	b.n	800c1dc <_puts_r+0x3c>
 800c22c:	4622      	mov	r2, r4
 800c22e:	4628      	mov	r0, r5
 800c230:	f000 f857 	bl	800c2e2 <__swbuf_r>
 800c234:	3001      	adds	r0, #1
 800c236:	d1e7      	bne.n	800c208 <_puts_r+0x68>
 800c238:	e7ce      	b.n	800c1d8 <_puts_r+0x38>
 800c23a:	3e01      	subs	r6, #1
 800c23c:	e7e4      	b.n	800c208 <_puts_r+0x68>
 800c23e:	6823      	ldr	r3, [r4, #0]
 800c240:	1c5a      	adds	r2, r3, #1
 800c242:	6022      	str	r2, [r4, #0]
 800c244:	220a      	movs	r2, #10
 800c246:	701a      	strb	r2, [r3, #0]
 800c248:	e7ee      	b.n	800c228 <_puts_r+0x88>
	...

0800c24c <puts>:
 800c24c:	4b02      	ldr	r3, [pc, #8]	@ (800c258 <puts+0xc>)
 800c24e:	4601      	mov	r1, r0
 800c250:	6818      	ldr	r0, [r3, #0]
 800c252:	f7ff bfa5 	b.w	800c1a0 <_puts_r>
 800c256:	bf00      	nop
 800c258:	20000050 	.word	0x20000050

0800c25c <__sread>:
 800c25c:	b510      	push	{r4, lr}
 800c25e:	460c      	mov	r4, r1
 800c260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c264:	f000 f8fc 	bl	800c460 <_read_r>
 800c268:	2800      	cmp	r0, #0
 800c26a:	bfab      	itete	ge
 800c26c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c26e:	89a3      	ldrhlt	r3, [r4, #12]
 800c270:	181b      	addge	r3, r3, r0
 800c272:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c276:	bfac      	ite	ge
 800c278:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c27a:	81a3      	strhlt	r3, [r4, #12]
 800c27c:	bd10      	pop	{r4, pc}

0800c27e <__swrite>:
 800c27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c282:	461f      	mov	r7, r3
 800c284:	898b      	ldrh	r3, [r1, #12]
 800c286:	05db      	lsls	r3, r3, #23
 800c288:	4605      	mov	r5, r0
 800c28a:	460c      	mov	r4, r1
 800c28c:	4616      	mov	r6, r2
 800c28e:	d505      	bpl.n	800c29c <__swrite+0x1e>
 800c290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c294:	2302      	movs	r3, #2
 800c296:	2200      	movs	r2, #0
 800c298:	f000 f8d0 	bl	800c43c <_lseek_r>
 800c29c:	89a3      	ldrh	r3, [r4, #12]
 800c29e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c2a6:	81a3      	strh	r3, [r4, #12]
 800c2a8:	4632      	mov	r2, r6
 800c2aa:	463b      	mov	r3, r7
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2b2:	f000 b8e7 	b.w	800c484 <_write_r>

0800c2b6 <__sseek>:
 800c2b6:	b510      	push	{r4, lr}
 800c2b8:	460c      	mov	r4, r1
 800c2ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2be:	f000 f8bd 	bl	800c43c <_lseek_r>
 800c2c2:	1c43      	adds	r3, r0, #1
 800c2c4:	89a3      	ldrh	r3, [r4, #12]
 800c2c6:	bf15      	itete	ne
 800c2c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c2ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c2ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c2d2:	81a3      	strheq	r3, [r4, #12]
 800c2d4:	bf18      	it	ne
 800c2d6:	81a3      	strhne	r3, [r4, #12]
 800c2d8:	bd10      	pop	{r4, pc}

0800c2da <__sclose>:
 800c2da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2de:	f000 b89d 	b.w	800c41c <_close_r>

0800c2e2 <__swbuf_r>:
 800c2e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2e4:	460e      	mov	r6, r1
 800c2e6:	4614      	mov	r4, r2
 800c2e8:	4605      	mov	r5, r0
 800c2ea:	b118      	cbz	r0, 800c2f4 <__swbuf_r+0x12>
 800c2ec:	6a03      	ldr	r3, [r0, #32]
 800c2ee:	b90b      	cbnz	r3, 800c2f4 <__swbuf_r+0x12>
 800c2f0:	f7ff ff0e 	bl	800c110 <__sinit>
 800c2f4:	69a3      	ldr	r3, [r4, #24]
 800c2f6:	60a3      	str	r3, [r4, #8]
 800c2f8:	89a3      	ldrh	r3, [r4, #12]
 800c2fa:	071a      	lsls	r2, r3, #28
 800c2fc:	d501      	bpl.n	800c302 <__swbuf_r+0x20>
 800c2fe:	6923      	ldr	r3, [r4, #16]
 800c300:	b943      	cbnz	r3, 800c314 <__swbuf_r+0x32>
 800c302:	4621      	mov	r1, r4
 800c304:	4628      	mov	r0, r5
 800c306:	f000 f82b 	bl	800c360 <__swsetup_r>
 800c30a:	b118      	cbz	r0, 800c314 <__swbuf_r+0x32>
 800c30c:	f04f 37ff 	mov.w	r7, #4294967295
 800c310:	4638      	mov	r0, r7
 800c312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c314:	6823      	ldr	r3, [r4, #0]
 800c316:	6922      	ldr	r2, [r4, #16]
 800c318:	1a98      	subs	r0, r3, r2
 800c31a:	6963      	ldr	r3, [r4, #20]
 800c31c:	b2f6      	uxtb	r6, r6
 800c31e:	4283      	cmp	r3, r0
 800c320:	4637      	mov	r7, r6
 800c322:	dc05      	bgt.n	800c330 <__swbuf_r+0x4e>
 800c324:	4621      	mov	r1, r4
 800c326:	4628      	mov	r0, r5
 800c328:	f000 fd38 	bl	800cd9c <_fflush_r>
 800c32c:	2800      	cmp	r0, #0
 800c32e:	d1ed      	bne.n	800c30c <__swbuf_r+0x2a>
 800c330:	68a3      	ldr	r3, [r4, #8]
 800c332:	3b01      	subs	r3, #1
 800c334:	60a3      	str	r3, [r4, #8]
 800c336:	6823      	ldr	r3, [r4, #0]
 800c338:	1c5a      	adds	r2, r3, #1
 800c33a:	6022      	str	r2, [r4, #0]
 800c33c:	701e      	strb	r6, [r3, #0]
 800c33e:	6962      	ldr	r2, [r4, #20]
 800c340:	1c43      	adds	r3, r0, #1
 800c342:	429a      	cmp	r2, r3
 800c344:	d004      	beq.n	800c350 <__swbuf_r+0x6e>
 800c346:	89a3      	ldrh	r3, [r4, #12]
 800c348:	07db      	lsls	r3, r3, #31
 800c34a:	d5e1      	bpl.n	800c310 <__swbuf_r+0x2e>
 800c34c:	2e0a      	cmp	r6, #10
 800c34e:	d1df      	bne.n	800c310 <__swbuf_r+0x2e>
 800c350:	4621      	mov	r1, r4
 800c352:	4628      	mov	r0, r5
 800c354:	f000 fd22 	bl	800cd9c <_fflush_r>
 800c358:	2800      	cmp	r0, #0
 800c35a:	d0d9      	beq.n	800c310 <__swbuf_r+0x2e>
 800c35c:	e7d6      	b.n	800c30c <__swbuf_r+0x2a>
	...

0800c360 <__swsetup_r>:
 800c360:	b538      	push	{r3, r4, r5, lr}
 800c362:	4b29      	ldr	r3, [pc, #164]	@ (800c408 <__swsetup_r+0xa8>)
 800c364:	4605      	mov	r5, r0
 800c366:	6818      	ldr	r0, [r3, #0]
 800c368:	460c      	mov	r4, r1
 800c36a:	b118      	cbz	r0, 800c374 <__swsetup_r+0x14>
 800c36c:	6a03      	ldr	r3, [r0, #32]
 800c36e:	b90b      	cbnz	r3, 800c374 <__swsetup_r+0x14>
 800c370:	f7ff fece 	bl	800c110 <__sinit>
 800c374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c378:	0719      	lsls	r1, r3, #28
 800c37a:	d422      	bmi.n	800c3c2 <__swsetup_r+0x62>
 800c37c:	06da      	lsls	r2, r3, #27
 800c37e:	d407      	bmi.n	800c390 <__swsetup_r+0x30>
 800c380:	2209      	movs	r2, #9
 800c382:	602a      	str	r2, [r5, #0]
 800c384:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c388:	81a3      	strh	r3, [r4, #12]
 800c38a:	f04f 30ff 	mov.w	r0, #4294967295
 800c38e:	e033      	b.n	800c3f8 <__swsetup_r+0x98>
 800c390:	0758      	lsls	r0, r3, #29
 800c392:	d512      	bpl.n	800c3ba <__swsetup_r+0x5a>
 800c394:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c396:	b141      	cbz	r1, 800c3aa <__swsetup_r+0x4a>
 800c398:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c39c:	4299      	cmp	r1, r3
 800c39e:	d002      	beq.n	800c3a6 <__swsetup_r+0x46>
 800c3a0:	4628      	mov	r0, r5
 800c3a2:	f000 f8af 	bl	800c504 <_free_r>
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c3aa:	89a3      	ldrh	r3, [r4, #12]
 800c3ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c3b0:	81a3      	strh	r3, [r4, #12]
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	6063      	str	r3, [r4, #4]
 800c3b6:	6923      	ldr	r3, [r4, #16]
 800c3b8:	6023      	str	r3, [r4, #0]
 800c3ba:	89a3      	ldrh	r3, [r4, #12]
 800c3bc:	f043 0308 	orr.w	r3, r3, #8
 800c3c0:	81a3      	strh	r3, [r4, #12]
 800c3c2:	6923      	ldr	r3, [r4, #16]
 800c3c4:	b94b      	cbnz	r3, 800c3da <__swsetup_r+0x7a>
 800c3c6:	89a3      	ldrh	r3, [r4, #12]
 800c3c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c3cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3d0:	d003      	beq.n	800c3da <__swsetup_r+0x7a>
 800c3d2:	4621      	mov	r1, r4
 800c3d4:	4628      	mov	r0, r5
 800c3d6:	f000 fd2f 	bl	800ce38 <__smakebuf_r>
 800c3da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3de:	f013 0201 	ands.w	r2, r3, #1
 800c3e2:	d00a      	beq.n	800c3fa <__swsetup_r+0x9a>
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	60a2      	str	r2, [r4, #8]
 800c3e8:	6962      	ldr	r2, [r4, #20]
 800c3ea:	4252      	negs	r2, r2
 800c3ec:	61a2      	str	r2, [r4, #24]
 800c3ee:	6922      	ldr	r2, [r4, #16]
 800c3f0:	b942      	cbnz	r2, 800c404 <__swsetup_r+0xa4>
 800c3f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c3f6:	d1c5      	bne.n	800c384 <__swsetup_r+0x24>
 800c3f8:	bd38      	pop	{r3, r4, r5, pc}
 800c3fa:	0799      	lsls	r1, r3, #30
 800c3fc:	bf58      	it	pl
 800c3fe:	6962      	ldrpl	r2, [r4, #20]
 800c400:	60a2      	str	r2, [r4, #8]
 800c402:	e7f4      	b.n	800c3ee <__swsetup_r+0x8e>
 800c404:	2000      	movs	r0, #0
 800c406:	e7f7      	b.n	800c3f8 <__swsetup_r+0x98>
 800c408:	20000050 	.word	0x20000050

0800c40c <memset>:
 800c40c:	4402      	add	r2, r0
 800c40e:	4603      	mov	r3, r0
 800c410:	4293      	cmp	r3, r2
 800c412:	d100      	bne.n	800c416 <memset+0xa>
 800c414:	4770      	bx	lr
 800c416:	f803 1b01 	strb.w	r1, [r3], #1
 800c41a:	e7f9      	b.n	800c410 <memset+0x4>

0800c41c <_close_r>:
 800c41c:	b538      	push	{r3, r4, r5, lr}
 800c41e:	4d06      	ldr	r5, [pc, #24]	@ (800c438 <_close_r+0x1c>)
 800c420:	2300      	movs	r3, #0
 800c422:	4604      	mov	r4, r0
 800c424:	4608      	mov	r0, r1
 800c426:	602b      	str	r3, [r5, #0]
 800c428:	f7fd f873 	bl	8009512 <_close>
 800c42c:	1c43      	adds	r3, r0, #1
 800c42e:	d102      	bne.n	800c436 <_close_r+0x1a>
 800c430:	682b      	ldr	r3, [r5, #0]
 800c432:	b103      	cbz	r3, 800c436 <_close_r+0x1a>
 800c434:	6023      	str	r3, [r4, #0]
 800c436:	bd38      	pop	{r3, r4, r5, pc}
 800c438:	20000340 	.word	0x20000340

0800c43c <_lseek_r>:
 800c43c:	b538      	push	{r3, r4, r5, lr}
 800c43e:	4d07      	ldr	r5, [pc, #28]	@ (800c45c <_lseek_r+0x20>)
 800c440:	4604      	mov	r4, r0
 800c442:	4608      	mov	r0, r1
 800c444:	4611      	mov	r1, r2
 800c446:	2200      	movs	r2, #0
 800c448:	602a      	str	r2, [r5, #0]
 800c44a:	461a      	mov	r2, r3
 800c44c:	f7fd f888 	bl	8009560 <_lseek>
 800c450:	1c43      	adds	r3, r0, #1
 800c452:	d102      	bne.n	800c45a <_lseek_r+0x1e>
 800c454:	682b      	ldr	r3, [r5, #0]
 800c456:	b103      	cbz	r3, 800c45a <_lseek_r+0x1e>
 800c458:	6023      	str	r3, [r4, #0]
 800c45a:	bd38      	pop	{r3, r4, r5, pc}
 800c45c:	20000340 	.word	0x20000340

0800c460 <_read_r>:
 800c460:	b538      	push	{r3, r4, r5, lr}
 800c462:	4d07      	ldr	r5, [pc, #28]	@ (800c480 <_read_r+0x20>)
 800c464:	4604      	mov	r4, r0
 800c466:	4608      	mov	r0, r1
 800c468:	4611      	mov	r1, r2
 800c46a:	2200      	movs	r2, #0
 800c46c:	602a      	str	r2, [r5, #0]
 800c46e:	461a      	mov	r2, r3
 800c470:	f7fd f816 	bl	80094a0 <_read>
 800c474:	1c43      	adds	r3, r0, #1
 800c476:	d102      	bne.n	800c47e <_read_r+0x1e>
 800c478:	682b      	ldr	r3, [r5, #0]
 800c47a:	b103      	cbz	r3, 800c47e <_read_r+0x1e>
 800c47c:	6023      	str	r3, [r4, #0]
 800c47e:	bd38      	pop	{r3, r4, r5, pc}
 800c480:	20000340 	.word	0x20000340

0800c484 <_write_r>:
 800c484:	b538      	push	{r3, r4, r5, lr}
 800c486:	4d07      	ldr	r5, [pc, #28]	@ (800c4a4 <_write_r+0x20>)
 800c488:	4604      	mov	r4, r0
 800c48a:	4608      	mov	r0, r1
 800c48c:	4611      	mov	r1, r2
 800c48e:	2200      	movs	r2, #0
 800c490:	602a      	str	r2, [r5, #0]
 800c492:	461a      	mov	r2, r3
 800c494:	f7fd f821 	bl	80094da <_write>
 800c498:	1c43      	adds	r3, r0, #1
 800c49a:	d102      	bne.n	800c4a2 <_write_r+0x1e>
 800c49c:	682b      	ldr	r3, [r5, #0]
 800c49e:	b103      	cbz	r3, 800c4a2 <_write_r+0x1e>
 800c4a0:	6023      	str	r3, [r4, #0]
 800c4a2:	bd38      	pop	{r3, r4, r5, pc}
 800c4a4:	20000340 	.word	0x20000340

0800c4a8 <__errno>:
 800c4a8:	4b01      	ldr	r3, [pc, #4]	@ (800c4b0 <__errno+0x8>)
 800c4aa:	6818      	ldr	r0, [r3, #0]
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop
 800c4b0:	20000050 	.word	0x20000050

0800c4b4 <__libc_init_array>:
 800c4b4:	b570      	push	{r4, r5, r6, lr}
 800c4b6:	4d0d      	ldr	r5, [pc, #52]	@ (800c4ec <__libc_init_array+0x38>)
 800c4b8:	4c0d      	ldr	r4, [pc, #52]	@ (800c4f0 <__libc_init_array+0x3c>)
 800c4ba:	1b64      	subs	r4, r4, r5
 800c4bc:	10a4      	asrs	r4, r4, #2
 800c4be:	2600      	movs	r6, #0
 800c4c0:	42a6      	cmp	r6, r4
 800c4c2:	d109      	bne.n	800c4d8 <__libc_init_array+0x24>
 800c4c4:	4d0b      	ldr	r5, [pc, #44]	@ (800c4f4 <__libc_init_array+0x40>)
 800c4c6:	4c0c      	ldr	r4, [pc, #48]	@ (800c4f8 <__libc_init_array+0x44>)
 800c4c8:	f000 fd24 	bl	800cf14 <_init>
 800c4cc:	1b64      	subs	r4, r4, r5
 800c4ce:	10a4      	asrs	r4, r4, #2
 800c4d0:	2600      	movs	r6, #0
 800c4d2:	42a6      	cmp	r6, r4
 800c4d4:	d105      	bne.n	800c4e2 <__libc_init_array+0x2e>
 800c4d6:	bd70      	pop	{r4, r5, r6, pc}
 800c4d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4dc:	4798      	blx	r3
 800c4de:	3601      	adds	r6, #1
 800c4e0:	e7ee      	b.n	800c4c0 <__libc_init_array+0xc>
 800c4e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4e6:	4798      	blx	r3
 800c4e8:	3601      	adds	r6, #1
 800c4ea:	e7f2      	b.n	800c4d2 <__libc_init_array+0x1e>
 800c4ec:	0800e3cc 	.word	0x0800e3cc
 800c4f0:	0800e3cc 	.word	0x0800e3cc
 800c4f4:	0800e3cc 	.word	0x0800e3cc
 800c4f8:	0800e3d0 	.word	0x0800e3d0

0800c4fc <__retarget_lock_init_recursive>:
 800c4fc:	4770      	bx	lr

0800c4fe <__retarget_lock_acquire_recursive>:
 800c4fe:	4770      	bx	lr

0800c500 <__retarget_lock_release_recursive>:
 800c500:	4770      	bx	lr
	...

0800c504 <_free_r>:
 800c504:	b538      	push	{r3, r4, r5, lr}
 800c506:	4605      	mov	r5, r0
 800c508:	2900      	cmp	r1, #0
 800c50a:	d041      	beq.n	800c590 <_free_r+0x8c>
 800c50c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c510:	1f0c      	subs	r4, r1, #4
 800c512:	2b00      	cmp	r3, #0
 800c514:	bfb8      	it	lt
 800c516:	18e4      	addlt	r4, r4, r3
 800c518:	f000 f8e0 	bl	800c6dc <__malloc_lock>
 800c51c:	4a1d      	ldr	r2, [pc, #116]	@ (800c594 <_free_r+0x90>)
 800c51e:	6813      	ldr	r3, [r2, #0]
 800c520:	b933      	cbnz	r3, 800c530 <_free_r+0x2c>
 800c522:	6063      	str	r3, [r4, #4]
 800c524:	6014      	str	r4, [r2, #0]
 800c526:	4628      	mov	r0, r5
 800c528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c52c:	f000 b8dc 	b.w	800c6e8 <__malloc_unlock>
 800c530:	42a3      	cmp	r3, r4
 800c532:	d908      	bls.n	800c546 <_free_r+0x42>
 800c534:	6820      	ldr	r0, [r4, #0]
 800c536:	1821      	adds	r1, r4, r0
 800c538:	428b      	cmp	r3, r1
 800c53a:	bf01      	itttt	eq
 800c53c:	6819      	ldreq	r1, [r3, #0]
 800c53e:	685b      	ldreq	r3, [r3, #4]
 800c540:	1809      	addeq	r1, r1, r0
 800c542:	6021      	streq	r1, [r4, #0]
 800c544:	e7ed      	b.n	800c522 <_free_r+0x1e>
 800c546:	461a      	mov	r2, r3
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	b10b      	cbz	r3, 800c550 <_free_r+0x4c>
 800c54c:	42a3      	cmp	r3, r4
 800c54e:	d9fa      	bls.n	800c546 <_free_r+0x42>
 800c550:	6811      	ldr	r1, [r2, #0]
 800c552:	1850      	adds	r0, r2, r1
 800c554:	42a0      	cmp	r0, r4
 800c556:	d10b      	bne.n	800c570 <_free_r+0x6c>
 800c558:	6820      	ldr	r0, [r4, #0]
 800c55a:	4401      	add	r1, r0
 800c55c:	1850      	adds	r0, r2, r1
 800c55e:	4283      	cmp	r3, r0
 800c560:	6011      	str	r1, [r2, #0]
 800c562:	d1e0      	bne.n	800c526 <_free_r+0x22>
 800c564:	6818      	ldr	r0, [r3, #0]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	6053      	str	r3, [r2, #4]
 800c56a:	4408      	add	r0, r1
 800c56c:	6010      	str	r0, [r2, #0]
 800c56e:	e7da      	b.n	800c526 <_free_r+0x22>
 800c570:	d902      	bls.n	800c578 <_free_r+0x74>
 800c572:	230c      	movs	r3, #12
 800c574:	602b      	str	r3, [r5, #0]
 800c576:	e7d6      	b.n	800c526 <_free_r+0x22>
 800c578:	6820      	ldr	r0, [r4, #0]
 800c57a:	1821      	adds	r1, r4, r0
 800c57c:	428b      	cmp	r3, r1
 800c57e:	bf04      	itt	eq
 800c580:	6819      	ldreq	r1, [r3, #0]
 800c582:	685b      	ldreq	r3, [r3, #4]
 800c584:	6063      	str	r3, [r4, #4]
 800c586:	bf04      	itt	eq
 800c588:	1809      	addeq	r1, r1, r0
 800c58a:	6021      	streq	r1, [r4, #0]
 800c58c:	6054      	str	r4, [r2, #4]
 800c58e:	e7ca      	b.n	800c526 <_free_r+0x22>
 800c590:	bd38      	pop	{r3, r4, r5, pc}
 800c592:	bf00      	nop
 800c594:	2000034c 	.word	0x2000034c

0800c598 <sbrk_aligned>:
 800c598:	b570      	push	{r4, r5, r6, lr}
 800c59a:	4e0f      	ldr	r6, [pc, #60]	@ (800c5d8 <sbrk_aligned+0x40>)
 800c59c:	460c      	mov	r4, r1
 800c59e:	6831      	ldr	r1, [r6, #0]
 800c5a0:	4605      	mov	r5, r0
 800c5a2:	b911      	cbnz	r1, 800c5aa <sbrk_aligned+0x12>
 800c5a4:	f000 fca6 	bl	800cef4 <_sbrk_r>
 800c5a8:	6030      	str	r0, [r6, #0]
 800c5aa:	4621      	mov	r1, r4
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	f000 fca1 	bl	800cef4 <_sbrk_r>
 800c5b2:	1c43      	adds	r3, r0, #1
 800c5b4:	d103      	bne.n	800c5be <sbrk_aligned+0x26>
 800c5b6:	f04f 34ff 	mov.w	r4, #4294967295
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	bd70      	pop	{r4, r5, r6, pc}
 800c5be:	1cc4      	adds	r4, r0, #3
 800c5c0:	f024 0403 	bic.w	r4, r4, #3
 800c5c4:	42a0      	cmp	r0, r4
 800c5c6:	d0f8      	beq.n	800c5ba <sbrk_aligned+0x22>
 800c5c8:	1a21      	subs	r1, r4, r0
 800c5ca:	4628      	mov	r0, r5
 800c5cc:	f000 fc92 	bl	800cef4 <_sbrk_r>
 800c5d0:	3001      	adds	r0, #1
 800c5d2:	d1f2      	bne.n	800c5ba <sbrk_aligned+0x22>
 800c5d4:	e7ef      	b.n	800c5b6 <sbrk_aligned+0x1e>
 800c5d6:	bf00      	nop
 800c5d8:	20000348 	.word	0x20000348

0800c5dc <_malloc_r>:
 800c5dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5e0:	1ccd      	adds	r5, r1, #3
 800c5e2:	f025 0503 	bic.w	r5, r5, #3
 800c5e6:	3508      	adds	r5, #8
 800c5e8:	2d0c      	cmp	r5, #12
 800c5ea:	bf38      	it	cc
 800c5ec:	250c      	movcc	r5, #12
 800c5ee:	2d00      	cmp	r5, #0
 800c5f0:	4606      	mov	r6, r0
 800c5f2:	db01      	blt.n	800c5f8 <_malloc_r+0x1c>
 800c5f4:	42a9      	cmp	r1, r5
 800c5f6:	d904      	bls.n	800c602 <_malloc_r+0x26>
 800c5f8:	230c      	movs	r3, #12
 800c5fa:	6033      	str	r3, [r6, #0]
 800c5fc:	2000      	movs	r0, #0
 800c5fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c602:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c6d8 <_malloc_r+0xfc>
 800c606:	f000 f869 	bl	800c6dc <__malloc_lock>
 800c60a:	f8d8 3000 	ldr.w	r3, [r8]
 800c60e:	461c      	mov	r4, r3
 800c610:	bb44      	cbnz	r4, 800c664 <_malloc_r+0x88>
 800c612:	4629      	mov	r1, r5
 800c614:	4630      	mov	r0, r6
 800c616:	f7ff ffbf 	bl	800c598 <sbrk_aligned>
 800c61a:	1c43      	adds	r3, r0, #1
 800c61c:	4604      	mov	r4, r0
 800c61e:	d158      	bne.n	800c6d2 <_malloc_r+0xf6>
 800c620:	f8d8 4000 	ldr.w	r4, [r8]
 800c624:	4627      	mov	r7, r4
 800c626:	2f00      	cmp	r7, #0
 800c628:	d143      	bne.n	800c6b2 <_malloc_r+0xd6>
 800c62a:	2c00      	cmp	r4, #0
 800c62c:	d04b      	beq.n	800c6c6 <_malloc_r+0xea>
 800c62e:	6823      	ldr	r3, [r4, #0]
 800c630:	4639      	mov	r1, r7
 800c632:	4630      	mov	r0, r6
 800c634:	eb04 0903 	add.w	r9, r4, r3
 800c638:	f000 fc5c 	bl	800cef4 <_sbrk_r>
 800c63c:	4581      	cmp	r9, r0
 800c63e:	d142      	bne.n	800c6c6 <_malloc_r+0xea>
 800c640:	6821      	ldr	r1, [r4, #0]
 800c642:	1a6d      	subs	r5, r5, r1
 800c644:	4629      	mov	r1, r5
 800c646:	4630      	mov	r0, r6
 800c648:	f7ff ffa6 	bl	800c598 <sbrk_aligned>
 800c64c:	3001      	adds	r0, #1
 800c64e:	d03a      	beq.n	800c6c6 <_malloc_r+0xea>
 800c650:	6823      	ldr	r3, [r4, #0]
 800c652:	442b      	add	r3, r5
 800c654:	6023      	str	r3, [r4, #0]
 800c656:	f8d8 3000 	ldr.w	r3, [r8]
 800c65a:	685a      	ldr	r2, [r3, #4]
 800c65c:	bb62      	cbnz	r2, 800c6b8 <_malloc_r+0xdc>
 800c65e:	f8c8 7000 	str.w	r7, [r8]
 800c662:	e00f      	b.n	800c684 <_malloc_r+0xa8>
 800c664:	6822      	ldr	r2, [r4, #0]
 800c666:	1b52      	subs	r2, r2, r5
 800c668:	d420      	bmi.n	800c6ac <_malloc_r+0xd0>
 800c66a:	2a0b      	cmp	r2, #11
 800c66c:	d917      	bls.n	800c69e <_malloc_r+0xc2>
 800c66e:	1961      	adds	r1, r4, r5
 800c670:	42a3      	cmp	r3, r4
 800c672:	6025      	str	r5, [r4, #0]
 800c674:	bf18      	it	ne
 800c676:	6059      	strne	r1, [r3, #4]
 800c678:	6863      	ldr	r3, [r4, #4]
 800c67a:	bf08      	it	eq
 800c67c:	f8c8 1000 	streq.w	r1, [r8]
 800c680:	5162      	str	r2, [r4, r5]
 800c682:	604b      	str	r3, [r1, #4]
 800c684:	4630      	mov	r0, r6
 800c686:	f000 f82f 	bl	800c6e8 <__malloc_unlock>
 800c68a:	f104 000b 	add.w	r0, r4, #11
 800c68e:	1d23      	adds	r3, r4, #4
 800c690:	f020 0007 	bic.w	r0, r0, #7
 800c694:	1ac2      	subs	r2, r0, r3
 800c696:	bf1c      	itt	ne
 800c698:	1a1b      	subne	r3, r3, r0
 800c69a:	50a3      	strne	r3, [r4, r2]
 800c69c:	e7af      	b.n	800c5fe <_malloc_r+0x22>
 800c69e:	6862      	ldr	r2, [r4, #4]
 800c6a0:	42a3      	cmp	r3, r4
 800c6a2:	bf0c      	ite	eq
 800c6a4:	f8c8 2000 	streq.w	r2, [r8]
 800c6a8:	605a      	strne	r2, [r3, #4]
 800c6aa:	e7eb      	b.n	800c684 <_malloc_r+0xa8>
 800c6ac:	4623      	mov	r3, r4
 800c6ae:	6864      	ldr	r4, [r4, #4]
 800c6b0:	e7ae      	b.n	800c610 <_malloc_r+0x34>
 800c6b2:	463c      	mov	r4, r7
 800c6b4:	687f      	ldr	r7, [r7, #4]
 800c6b6:	e7b6      	b.n	800c626 <_malloc_r+0x4a>
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	42a3      	cmp	r3, r4
 800c6be:	d1fb      	bne.n	800c6b8 <_malloc_r+0xdc>
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	6053      	str	r3, [r2, #4]
 800c6c4:	e7de      	b.n	800c684 <_malloc_r+0xa8>
 800c6c6:	230c      	movs	r3, #12
 800c6c8:	6033      	str	r3, [r6, #0]
 800c6ca:	4630      	mov	r0, r6
 800c6cc:	f000 f80c 	bl	800c6e8 <__malloc_unlock>
 800c6d0:	e794      	b.n	800c5fc <_malloc_r+0x20>
 800c6d2:	6005      	str	r5, [r0, #0]
 800c6d4:	e7d6      	b.n	800c684 <_malloc_r+0xa8>
 800c6d6:	bf00      	nop
 800c6d8:	2000034c 	.word	0x2000034c

0800c6dc <__malloc_lock>:
 800c6dc:	4801      	ldr	r0, [pc, #4]	@ (800c6e4 <__malloc_lock+0x8>)
 800c6de:	f7ff bf0e 	b.w	800c4fe <__retarget_lock_acquire_recursive>
 800c6e2:	bf00      	nop
 800c6e4:	20000344 	.word	0x20000344

0800c6e8 <__malloc_unlock>:
 800c6e8:	4801      	ldr	r0, [pc, #4]	@ (800c6f0 <__malloc_unlock+0x8>)
 800c6ea:	f7ff bf09 	b.w	800c500 <__retarget_lock_release_recursive>
 800c6ee:	bf00      	nop
 800c6f0:	20000344 	.word	0x20000344

0800c6f4 <__sfputc_r>:
 800c6f4:	6893      	ldr	r3, [r2, #8]
 800c6f6:	3b01      	subs	r3, #1
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	b410      	push	{r4}
 800c6fc:	6093      	str	r3, [r2, #8]
 800c6fe:	da08      	bge.n	800c712 <__sfputc_r+0x1e>
 800c700:	6994      	ldr	r4, [r2, #24]
 800c702:	42a3      	cmp	r3, r4
 800c704:	db01      	blt.n	800c70a <__sfputc_r+0x16>
 800c706:	290a      	cmp	r1, #10
 800c708:	d103      	bne.n	800c712 <__sfputc_r+0x1e>
 800c70a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c70e:	f7ff bde8 	b.w	800c2e2 <__swbuf_r>
 800c712:	6813      	ldr	r3, [r2, #0]
 800c714:	1c58      	adds	r0, r3, #1
 800c716:	6010      	str	r0, [r2, #0]
 800c718:	7019      	strb	r1, [r3, #0]
 800c71a:	4608      	mov	r0, r1
 800c71c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c720:	4770      	bx	lr

0800c722 <__sfputs_r>:
 800c722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c724:	4606      	mov	r6, r0
 800c726:	460f      	mov	r7, r1
 800c728:	4614      	mov	r4, r2
 800c72a:	18d5      	adds	r5, r2, r3
 800c72c:	42ac      	cmp	r4, r5
 800c72e:	d101      	bne.n	800c734 <__sfputs_r+0x12>
 800c730:	2000      	movs	r0, #0
 800c732:	e007      	b.n	800c744 <__sfputs_r+0x22>
 800c734:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c738:	463a      	mov	r2, r7
 800c73a:	4630      	mov	r0, r6
 800c73c:	f7ff ffda 	bl	800c6f4 <__sfputc_r>
 800c740:	1c43      	adds	r3, r0, #1
 800c742:	d1f3      	bne.n	800c72c <__sfputs_r+0xa>
 800c744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c748 <_vfiprintf_r>:
 800c748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c74c:	460d      	mov	r5, r1
 800c74e:	b09d      	sub	sp, #116	@ 0x74
 800c750:	4614      	mov	r4, r2
 800c752:	4698      	mov	r8, r3
 800c754:	4606      	mov	r6, r0
 800c756:	b118      	cbz	r0, 800c760 <_vfiprintf_r+0x18>
 800c758:	6a03      	ldr	r3, [r0, #32]
 800c75a:	b90b      	cbnz	r3, 800c760 <_vfiprintf_r+0x18>
 800c75c:	f7ff fcd8 	bl	800c110 <__sinit>
 800c760:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c762:	07d9      	lsls	r1, r3, #31
 800c764:	d405      	bmi.n	800c772 <_vfiprintf_r+0x2a>
 800c766:	89ab      	ldrh	r3, [r5, #12]
 800c768:	059a      	lsls	r2, r3, #22
 800c76a:	d402      	bmi.n	800c772 <_vfiprintf_r+0x2a>
 800c76c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c76e:	f7ff fec6 	bl	800c4fe <__retarget_lock_acquire_recursive>
 800c772:	89ab      	ldrh	r3, [r5, #12]
 800c774:	071b      	lsls	r3, r3, #28
 800c776:	d501      	bpl.n	800c77c <_vfiprintf_r+0x34>
 800c778:	692b      	ldr	r3, [r5, #16]
 800c77a:	b99b      	cbnz	r3, 800c7a4 <_vfiprintf_r+0x5c>
 800c77c:	4629      	mov	r1, r5
 800c77e:	4630      	mov	r0, r6
 800c780:	f7ff fdee 	bl	800c360 <__swsetup_r>
 800c784:	b170      	cbz	r0, 800c7a4 <_vfiprintf_r+0x5c>
 800c786:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c788:	07dc      	lsls	r4, r3, #31
 800c78a:	d504      	bpl.n	800c796 <_vfiprintf_r+0x4e>
 800c78c:	f04f 30ff 	mov.w	r0, #4294967295
 800c790:	b01d      	add	sp, #116	@ 0x74
 800c792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c796:	89ab      	ldrh	r3, [r5, #12]
 800c798:	0598      	lsls	r0, r3, #22
 800c79a:	d4f7      	bmi.n	800c78c <_vfiprintf_r+0x44>
 800c79c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c79e:	f7ff feaf 	bl	800c500 <__retarget_lock_release_recursive>
 800c7a2:	e7f3      	b.n	800c78c <_vfiprintf_r+0x44>
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7a8:	2320      	movs	r3, #32
 800c7aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c7ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7b2:	2330      	movs	r3, #48	@ 0x30
 800c7b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c964 <_vfiprintf_r+0x21c>
 800c7b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c7bc:	f04f 0901 	mov.w	r9, #1
 800c7c0:	4623      	mov	r3, r4
 800c7c2:	469a      	mov	sl, r3
 800c7c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7c8:	b10a      	cbz	r2, 800c7ce <_vfiprintf_r+0x86>
 800c7ca:	2a25      	cmp	r2, #37	@ 0x25
 800c7cc:	d1f9      	bne.n	800c7c2 <_vfiprintf_r+0x7a>
 800c7ce:	ebba 0b04 	subs.w	fp, sl, r4
 800c7d2:	d00b      	beq.n	800c7ec <_vfiprintf_r+0xa4>
 800c7d4:	465b      	mov	r3, fp
 800c7d6:	4622      	mov	r2, r4
 800c7d8:	4629      	mov	r1, r5
 800c7da:	4630      	mov	r0, r6
 800c7dc:	f7ff ffa1 	bl	800c722 <__sfputs_r>
 800c7e0:	3001      	adds	r0, #1
 800c7e2:	f000 80a7 	beq.w	800c934 <_vfiprintf_r+0x1ec>
 800c7e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7e8:	445a      	add	r2, fp
 800c7ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800c7ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	f000 809f 	beq.w	800c934 <_vfiprintf_r+0x1ec>
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c7fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c800:	f10a 0a01 	add.w	sl, sl, #1
 800c804:	9304      	str	r3, [sp, #16]
 800c806:	9307      	str	r3, [sp, #28]
 800c808:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c80c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c80e:	4654      	mov	r4, sl
 800c810:	2205      	movs	r2, #5
 800c812:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c816:	4853      	ldr	r0, [pc, #332]	@ (800c964 <_vfiprintf_r+0x21c>)
 800c818:	f7fb fcfa 	bl	8008210 <memchr>
 800c81c:	9a04      	ldr	r2, [sp, #16]
 800c81e:	b9d8      	cbnz	r0, 800c858 <_vfiprintf_r+0x110>
 800c820:	06d1      	lsls	r1, r2, #27
 800c822:	bf44      	itt	mi
 800c824:	2320      	movmi	r3, #32
 800c826:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c82a:	0713      	lsls	r3, r2, #28
 800c82c:	bf44      	itt	mi
 800c82e:	232b      	movmi	r3, #43	@ 0x2b
 800c830:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c834:	f89a 3000 	ldrb.w	r3, [sl]
 800c838:	2b2a      	cmp	r3, #42	@ 0x2a
 800c83a:	d015      	beq.n	800c868 <_vfiprintf_r+0x120>
 800c83c:	9a07      	ldr	r2, [sp, #28]
 800c83e:	4654      	mov	r4, sl
 800c840:	2000      	movs	r0, #0
 800c842:	f04f 0c0a 	mov.w	ip, #10
 800c846:	4621      	mov	r1, r4
 800c848:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c84c:	3b30      	subs	r3, #48	@ 0x30
 800c84e:	2b09      	cmp	r3, #9
 800c850:	d94b      	bls.n	800c8ea <_vfiprintf_r+0x1a2>
 800c852:	b1b0      	cbz	r0, 800c882 <_vfiprintf_r+0x13a>
 800c854:	9207      	str	r2, [sp, #28]
 800c856:	e014      	b.n	800c882 <_vfiprintf_r+0x13a>
 800c858:	eba0 0308 	sub.w	r3, r0, r8
 800c85c:	fa09 f303 	lsl.w	r3, r9, r3
 800c860:	4313      	orrs	r3, r2
 800c862:	9304      	str	r3, [sp, #16]
 800c864:	46a2      	mov	sl, r4
 800c866:	e7d2      	b.n	800c80e <_vfiprintf_r+0xc6>
 800c868:	9b03      	ldr	r3, [sp, #12]
 800c86a:	1d19      	adds	r1, r3, #4
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	9103      	str	r1, [sp, #12]
 800c870:	2b00      	cmp	r3, #0
 800c872:	bfbb      	ittet	lt
 800c874:	425b      	neglt	r3, r3
 800c876:	f042 0202 	orrlt.w	r2, r2, #2
 800c87a:	9307      	strge	r3, [sp, #28]
 800c87c:	9307      	strlt	r3, [sp, #28]
 800c87e:	bfb8      	it	lt
 800c880:	9204      	strlt	r2, [sp, #16]
 800c882:	7823      	ldrb	r3, [r4, #0]
 800c884:	2b2e      	cmp	r3, #46	@ 0x2e
 800c886:	d10a      	bne.n	800c89e <_vfiprintf_r+0x156>
 800c888:	7863      	ldrb	r3, [r4, #1]
 800c88a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c88c:	d132      	bne.n	800c8f4 <_vfiprintf_r+0x1ac>
 800c88e:	9b03      	ldr	r3, [sp, #12]
 800c890:	1d1a      	adds	r2, r3, #4
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	9203      	str	r2, [sp, #12]
 800c896:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c89a:	3402      	adds	r4, #2
 800c89c:	9305      	str	r3, [sp, #20]
 800c89e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c974 <_vfiprintf_r+0x22c>
 800c8a2:	7821      	ldrb	r1, [r4, #0]
 800c8a4:	2203      	movs	r2, #3
 800c8a6:	4650      	mov	r0, sl
 800c8a8:	f7fb fcb2 	bl	8008210 <memchr>
 800c8ac:	b138      	cbz	r0, 800c8be <_vfiprintf_r+0x176>
 800c8ae:	9b04      	ldr	r3, [sp, #16]
 800c8b0:	eba0 000a 	sub.w	r0, r0, sl
 800c8b4:	2240      	movs	r2, #64	@ 0x40
 800c8b6:	4082      	lsls	r2, r0
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	3401      	adds	r4, #1
 800c8bc:	9304      	str	r3, [sp, #16]
 800c8be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8c2:	4829      	ldr	r0, [pc, #164]	@ (800c968 <_vfiprintf_r+0x220>)
 800c8c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c8c8:	2206      	movs	r2, #6
 800c8ca:	f7fb fca1 	bl	8008210 <memchr>
 800c8ce:	2800      	cmp	r0, #0
 800c8d0:	d03f      	beq.n	800c952 <_vfiprintf_r+0x20a>
 800c8d2:	4b26      	ldr	r3, [pc, #152]	@ (800c96c <_vfiprintf_r+0x224>)
 800c8d4:	bb1b      	cbnz	r3, 800c91e <_vfiprintf_r+0x1d6>
 800c8d6:	9b03      	ldr	r3, [sp, #12]
 800c8d8:	3307      	adds	r3, #7
 800c8da:	f023 0307 	bic.w	r3, r3, #7
 800c8de:	3308      	adds	r3, #8
 800c8e0:	9303      	str	r3, [sp, #12]
 800c8e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8e4:	443b      	add	r3, r7
 800c8e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8e8:	e76a      	b.n	800c7c0 <_vfiprintf_r+0x78>
 800c8ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8ee:	460c      	mov	r4, r1
 800c8f0:	2001      	movs	r0, #1
 800c8f2:	e7a8      	b.n	800c846 <_vfiprintf_r+0xfe>
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	3401      	adds	r4, #1
 800c8f8:	9305      	str	r3, [sp, #20]
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	f04f 0c0a 	mov.w	ip, #10
 800c900:	4620      	mov	r0, r4
 800c902:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c906:	3a30      	subs	r2, #48	@ 0x30
 800c908:	2a09      	cmp	r2, #9
 800c90a:	d903      	bls.n	800c914 <_vfiprintf_r+0x1cc>
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d0c6      	beq.n	800c89e <_vfiprintf_r+0x156>
 800c910:	9105      	str	r1, [sp, #20]
 800c912:	e7c4      	b.n	800c89e <_vfiprintf_r+0x156>
 800c914:	fb0c 2101 	mla	r1, ip, r1, r2
 800c918:	4604      	mov	r4, r0
 800c91a:	2301      	movs	r3, #1
 800c91c:	e7f0      	b.n	800c900 <_vfiprintf_r+0x1b8>
 800c91e:	ab03      	add	r3, sp, #12
 800c920:	9300      	str	r3, [sp, #0]
 800c922:	462a      	mov	r2, r5
 800c924:	4b12      	ldr	r3, [pc, #72]	@ (800c970 <_vfiprintf_r+0x228>)
 800c926:	a904      	add	r1, sp, #16
 800c928:	4630      	mov	r0, r6
 800c92a:	f3af 8000 	nop.w
 800c92e:	4607      	mov	r7, r0
 800c930:	1c78      	adds	r0, r7, #1
 800c932:	d1d6      	bne.n	800c8e2 <_vfiprintf_r+0x19a>
 800c934:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c936:	07d9      	lsls	r1, r3, #31
 800c938:	d405      	bmi.n	800c946 <_vfiprintf_r+0x1fe>
 800c93a:	89ab      	ldrh	r3, [r5, #12]
 800c93c:	059a      	lsls	r2, r3, #22
 800c93e:	d402      	bmi.n	800c946 <_vfiprintf_r+0x1fe>
 800c940:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c942:	f7ff fddd 	bl	800c500 <__retarget_lock_release_recursive>
 800c946:	89ab      	ldrh	r3, [r5, #12]
 800c948:	065b      	lsls	r3, r3, #25
 800c94a:	f53f af1f 	bmi.w	800c78c <_vfiprintf_r+0x44>
 800c94e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c950:	e71e      	b.n	800c790 <_vfiprintf_r+0x48>
 800c952:	ab03      	add	r3, sp, #12
 800c954:	9300      	str	r3, [sp, #0]
 800c956:	462a      	mov	r2, r5
 800c958:	4b05      	ldr	r3, [pc, #20]	@ (800c970 <_vfiprintf_r+0x228>)
 800c95a:	a904      	add	r1, sp, #16
 800c95c:	4630      	mov	r0, r6
 800c95e:	f000 f879 	bl	800ca54 <_printf_i>
 800c962:	e7e4      	b.n	800c92e <_vfiprintf_r+0x1e6>
 800c964:	0800e390 	.word	0x0800e390
 800c968:	0800e39a 	.word	0x0800e39a
 800c96c:	00000000 	.word	0x00000000
 800c970:	0800c723 	.word	0x0800c723
 800c974:	0800e396 	.word	0x0800e396

0800c978 <_printf_common>:
 800c978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c97c:	4616      	mov	r6, r2
 800c97e:	4698      	mov	r8, r3
 800c980:	688a      	ldr	r2, [r1, #8]
 800c982:	690b      	ldr	r3, [r1, #16]
 800c984:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c988:	4293      	cmp	r3, r2
 800c98a:	bfb8      	it	lt
 800c98c:	4613      	movlt	r3, r2
 800c98e:	6033      	str	r3, [r6, #0]
 800c990:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c994:	4607      	mov	r7, r0
 800c996:	460c      	mov	r4, r1
 800c998:	b10a      	cbz	r2, 800c99e <_printf_common+0x26>
 800c99a:	3301      	adds	r3, #1
 800c99c:	6033      	str	r3, [r6, #0]
 800c99e:	6823      	ldr	r3, [r4, #0]
 800c9a0:	0699      	lsls	r1, r3, #26
 800c9a2:	bf42      	ittt	mi
 800c9a4:	6833      	ldrmi	r3, [r6, #0]
 800c9a6:	3302      	addmi	r3, #2
 800c9a8:	6033      	strmi	r3, [r6, #0]
 800c9aa:	6825      	ldr	r5, [r4, #0]
 800c9ac:	f015 0506 	ands.w	r5, r5, #6
 800c9b0:	d106      	bne.n	800c9c0 <_printf_common+0x48>
 800c9b2:	f104 0a19 	add.w	sl, r4, #25
 800c9b6:	68e3      	ldr	r3, [r4, #12]
 800c9b8:	6832      	ldr	r2, [r6, #0]
 800c9ba:	1a9b      	subs	r3, r3, r2
 800c9bc:	42ab      	cmp	r3, r5
 800c9be:	dc26      	bgt.n	800ca0e <_printf_common+0x96>
 800c9c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c9c4:	6822      	ldr	r2, [r4, #0]
 800c9c6:	3b00      	subs	r3, #0
 800c9c8:	bf18      	it	ne
 800c9ca:	2301      	movne	r3, #1
 800c9cc:	0692      	lsls	r2, r2, #26
 800c9ce:	d42b      	bmi.n	800ca28 <_printf_common+0xb0>
 800c9d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c9d4:	4641      	mov	r1, r8
 800c9d6:	4638      	mov	r0, r7
 800c9d8:	47c8      	blx	r9
 800c9da:	3001      	adds	r0, #1
 800c9dc:	d01e      	beq.n	800ca1c <_printf_common+0xa4>
 800c9de:	6823      	ldr	r3, [r4, #0]
 800c9e0:	6922      	ldr	r2, [r4, #16]
 800c9e2:	f003 0306 	and.w	r3, r3, #6
 800c9e6:	2b04      	cmp	r3, #4
 800c9e8:	bf02      	ittt	eq
 800c9ea:	68e5      	ldreq	r5, [r4, #12]
 800c9ec:	6833      	ldreq	r3, [r6, #0]
 800c9ee:	1aed      	subeq	r5, r5, r3
 800c9f0:	68a3      	ldr	r3, [r4, #8]
 800c9f2:	bf0c      	ite	eq
 800c9f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c9f8:	2500      	movne	r5, #0
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	bfc4      	itt	gt
 800c9fe:	1a9b      	subgt	r3, r3, r2
 800ca00:	18ed      	addgt	r5, r5, r3
 800ca02:	2600      	movs	r6, #0
 800ca04:	341a      	adds	r4, #26
 800ca06:	42b5      	cmp	r5, r6
 800ca08:	d11a      	bne.n	800ca40 <_printf_common+0xc8>
 800ca0a:	2000      	movs	r0, #0
 800ca0c:	e008      	b.n	800ca20 <_printf_common+0xa8>
 800ca0e:	2301      	movs	r3, #1
 800ca10:	4652      	mov	r2, sl
 800ca12:	4641      	mov	r1, r8
 800ca14:	4638      	mov	r0, r7
 800ca16:	47c8      	blx	r9
 800ca18:	3001      	adds	r0, #1
 800ca1a:	d103      	bne.n	800ca24 <_printf_common+0xac>
 800ca1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca24:	3501      	adds	r5, #1
 800ca26:	e7c6      	b.n	800c9b6 <_printf_common+0x3e>
 800ca28:	18e1      	adds	r1, r4, r3
 800ca2a:	1c5a      	adds	r2, r3, #1
 800ca2c:	2030      	movs	r0, #48	@ 0x30
 800ca2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ca32:	4422      	add	r2, r4
 800ca34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ca38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ca3c:	3302      	adds	r3, #2
 800ca3e:	e7c7      	b.n	800c9d0 <_printf_common+0x58>
 800ca40:	2301      	movs	r3, #1
 800ca42:	4622      	mov	r2, r4
 800ca44:	4641      	mov	r1, r8
 800ca46:	4638      	mov	r0, r7
 800ca48:	47c8      	blx	r9
 800ca4a:	3001      	adds	r0, #1
 800ca4c:	d0e6      	beq.n	800ca1c <_printf_common+0xa4>
 800ca4e:	3601      	adds	r6, #1
 800ca50:	e7d9      	b.n	800ca06 <_printf_common+0x8e>
	...

0800ca54 <_printf_i>:
 800ca54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca58:	7e0f      	ldrb	r7, [r1, #24]
 800ca5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ca5c:	2f78      	cmp	r7, #120	@ 0x78
 800ca5e:	4691      	mov	r9, r2
 800ca60:	4680      	mov	r8, r0
 800ca62:	460c      	mov	r4, r1
 800ca64:	469a      	mov	sl, r3
 800ca66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ca6a:	d807      	bhi.n	800ca7c <_printf_i+0x28>
 800ca6c:	2f62      	cmp	r7, #98	@ 0x62
 800ca6e:	d80a      	bhi.n	800ca86 <_printf_i+0x32>
 800ca70:	2f00      	cmp	r7, #0
 800ca72:	f000 80d2 	beq.w	800cc1a <_printf_i+0x1c6>
 800ca76:	2f58      	cmp	r7, #88	@ 0x58
 800ca78:	f000 80b9 	beq.w	800cbee <_printf_i+0x19a>
 800ca7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ca84:	e03a      	b.n	800cafc <_printf_i+0xa8>
 800ca86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ca8a:	2b15      	cmp	r3, #21
 800ca8c:	d8f6      	bhi.n	800ca7c <_printf_i+0x28>
 800ca8e:	a101      	add	r1, pc, #4	@ (adr r1, 800ca94 <_printf_i+0x40>)
 800ca90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca94:	0800caed 	.word	0x0800caed
 800ca98:	0800cb01 	.word	0x0800cb01
 800ca9c:	0800ca7d 	.word	0x0800ca7d
 800caa0:	0800ca7d 	.word	0x0800ca7d
 800caa4:	0800ca7d 	.word	0x0800ca7d
 800caa8:	0800ca7d 	.word	0x0800ca7d
 800caac:	0800cb01 	.word	0x0800cb01
 800cab0:	0800ca7d 	.word	0x0800ca7d
 800cab4:	0800ca7d 	.word	0x0800ca7d
 800cab8:	0800ca7d 	.word	0x0800ca7d
 800cabc:	0800ca7d 	.word	0x0800ca7d
 800cac0:	0800cc01 	.word	0x0800cc01
 800cac4:	0800cb2b 	.word	0x0800cb2b
 800cac8:	0800cbbb 	.word	0x0800cbbb
 800cacc:	0800ca7d 	.word	0x0800ca7d
 800cad0:	0800ca7d 	.word	0x0800ca7d
 800cad4:	0800cc23 	.word	0x0800cc23
 800cad8:	0800ca7d 	.word	0x0800ca7d
 800cadc:	0800cb2b 	.word	0x0800cb2b
 800cae0:	0800ca7d 	.word	0x0800ca7d
 800cae4:	0800ca7d 	.word	0x0800ca7d
 800cae8:	0800cbc3 	.word	0x0800cbc3
 800caec:	6833      	ldr	r3, [r6, #0]
 800caee:	1d1a      	adds	r2, r3, #4
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	6032      	str	r2, [r6, #0]
 800caf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800caf8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cafc:	2301      	movs	r3, #1
 800cafe:	e09d      	b.n	800cc3c <_printf_i+0x1e8>
 800cb00:	6833      	ldr	r3, [r6, #0]
 800cb02:	6820      	ldr	r0, [r4, #0]
 800cb04:	1d19      	adds	r1, r3, #4
 800cb06:	6031      	str	r1, [r6, #0]
 800cb08:	0606      	lsls	r6, r0, #24
 800cb0a:	d501      	bpl.n	800cb10 <_printf_i+0xbc>
 800cb0c:	681d      	ldr	r5, [r3, #0]
 800cb0e:	e003      	b.n	800cb18 <_printf_i+0xc4>
 800cb10:	0645      	lsls	r5, r0, #25
 800cb12:	d5fb      	bpl.n	800cb0c <_printf_i+0xb8>
 800cb14:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cb18:	2d00      	cmp	r5, #0
 800cb1a:	da03      	bge.n	800cb24 <_printf_i+0xd0>
 800cb1c:	232d      	movs	r3, #45	@ 0x2d
 800cb1e:	426d      	negs	r5, r5
 800cb20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb24:	4859      	ldr	r0, [pc, #356]	@ (800cc8c <_printf_i+0x238>)
 800cb26:	230a      	movs	r3, #10
 800cb28:	e011      	b.n	800cb4e <_printf_i+0xfa>
 800cb2a:	6821      	ldr	r1, [r4, #0]
 800cb2c:	6833      	ldr	r3, [r6, #0]
 800cb2e:	0608      	lsls	r0, r1, #24
 800cb30:	f853 5b04 	ldr.w	r5, [r3], #4
 800cb34:	d402      	bmi.n	800cb3c <_printf_i+0xe8>
 800cb36:	0649      	lsls	r1, r1, #25
 800cb38:	bf48      	it	mi
 800cb3a:	b2ad      	uxthmi	r5, r5
 800cb3c:	2f6f      	cmp	r7, #111	@ 0x6f
 800cb3e:	4853      	ldr	r0, [pc, #332]	@ (800cc8c <_printf_i+0x238>)
 800cb40:	6033      	str	r3, [r6, #0]
 800cb42:	bf14      	ite	ne
 800cb44:	230a      	movne	r3, #10
 800cb46:	2308      	moveq	r3, #8
 800cb48:	2100      	movs	r1, #0
 800cb4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cb4e:	6866      	ldr	r6, [r4, #4]
 800cb50:	60a6      	str	r6, [r4, #8]
 800cb52:	2e00      	cmp	r6, #0
 800cb54:	bfa2      	ittt	ge
 800cb56:	6821      	ldrge	r1, [r4, #0]
 800cb58:	f021 0104 	bicge.w	r1, r1, #4
 800cb5c:	6021      	strge	r1, [r4, #0]
 800cb5e:	b90d      	cbnz	r5, 800cb64 <_printf_i+0x110>
 800cb60:	2e00      	cmp	r6, #0
 800cb62:	d04b      	beq.n	800cbfc <_printf_i+0x1a8>
 800cb64:	4616      	mov	r6, r2
 800cb66:	fbb5 f1f3 	udiv	r1, r5, r3
 800cb6a:	fb03 5711 	mls	r7, r3, r1, r5
 800cb6e:	5dc7      	ldrb	r7, [r0, r7]
 800cb70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cb74:	462f      	mov	r7, r5
 800cb76:	42bb      	cmp	r3, r7
 800cb78:	460d      	mov	r5, r1
 800cb7a:	d9f4      	bls.n	800cb66 <_printf_i+0x112>
 800cb7c:	2b08      	cmp	r3, #8
 800cb7e:	d10b      	bne.n	800cb98 <_printf_i+0x144>
 800cb80:	6823      	ldr	r3, [r4, #0]
 800cb82:	07df      	lsls	r7, r3, #31
 800cb84:	d508      	bpl.n	800cb98 <_printf_i+0x144>
 800cb86:	6923      	ldr	r3, [r4, #16]
 800cb88:	6861      	ldr	r1, [r4, #4]
 800cb8a:	4299      	cmp	r1, r3
 800cb8c:	bfde      	ittt	le
 800cb8e:	2330      	movle	r3, #48	@ 0x30
 800cb90:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cb94:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cb98:	1b92      	subs	r2, r2, r6
 800cb9a:	6122      	str	r2, [r4, #16]
 800cb9c:	f8cd a000 	str.w	sl, [sp]
 800cba0:	464b      	mov	r3, r9
 800cba2:	aa03      	add	r2, sp, #12
 800cba4:	4621      	mov	r1, r4
 800cba6:	4640      	mov	r0, r8
 800cba8:	f7ff fee6 	bl	800c978 <_printf_common>
 800cbac:	3001      	adds	r0, #1
 800cbae:	d14a      	bne.n	800cc46 <_printf_i+0x1f2>
 800cbb0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbb4:	b004      	add	sp, #16
 800cbb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbba:	6823      	ldr	r3, [r4, #0]
 800cbbc:	f043 0320 	orr.w	r3, r3, #32
 800cbc0:	6023      	str	r3, [r4, #0]
 800cbc2:	4833      	ldr	r0, [pc, #204]	@ (800cc90 <_printf_i+0x23c>)
 800cbc4:	2778      	movs	r7, #120	@ 0x78
 800cbc6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cbca:	6823      	ldr	r3, [r4, #0]
 800cbcc:	6831      	ldr	r1, [r6, #0]
 800cbce:	061f      	lsls	r7, r3, #24
 800cbd0:	f851 5b04 	ldr.w	r5, [r1], #4
 800cbd4:	d402      	bmi.n	800cbdc <_printf_i+0x188>
 800cbd6:	065f      	lsls	r7, r3, #25
 800cbd8:	bf48      	it	mi
 800cbda:	b2ad      	uxthmi	r5, r5
 800cbdc:	6031      	str	r1, [r6, #0]
 800cbde:	07d9      	lsls	r1, r3, #31
 800cbe0:	bf44      	itt	mi
 800cbe2:	f043 0320 	orrmi.w	r3, r3, #32
 800cbe6:	6023      	strmi	r3, [r4, #0]
 800cbe8:	b11d      	cbz	r5, 800cbf2 <_printf_i+0x19e>
 800cbea:	2310      	movs	r3, #16
 800cbec:	e7ac      	b.n	800cb48 <_printf_i+0xf4>
 800cbee:	4827      	ldr	r0, [pc, #156]	@ (800cc8c <_printf_i+0x238>)
 800cbf0:	e7e9      	b.n	800cbc6 <_printf_i+0x172>
 800cbf2:	6823      	ldr	r3, [r4, #0]
 800cbf4:	f023 0320 	bic.w	r3, r3, #32
 800cbf8:	6023      	str	r3, [r4, #0]
 800cbfa:	e7f6      	b.n	800cbea <_printf_i+0x196>
 800cbfc:	4616      	mov	r6, r2
 800cbfe:	e7bd      	b.n	800cb7c <_printf_i+0x128>
 800cc00:	6833      	ldr	r3, [r6, #0]
 800cc02:	6825      	ldr	r5, [r4, #0]
 800cc04:	6961      	ldr	r1, [r4, #20]
 800cc06:	1d18      	adds	r0, r3, #4
 800cc08:	6030      	str	r0, [r6, #0]
 800cc0a:	062e      	lsls	r6, r5, #24
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	d501      	bpl.n	800cc14 <_printf_i+0x1c0>
 800cc10:	6019      	str	r1, [r3, #0]
 800cc12:	e002      	b.n	800cc1a <_printf_i+0x1c6>
 800cc14:	0668      	lsls	r0, r5, #25
 800cc16:	d5fb      	bpl.n	800cc10 <_printf_i+0x1bc>
 800cc18:	8019      	strh	r1, [r3, #0]
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	6123      	str	r3, [r4, #16]
 800cc1e:	4616      	mov	r6, r2
 800cc20:	e7bc      	b.n	800cb9c <_printf_i+0x148>
 800cc22:	6833      	ldr	r3, [r6, #0]
 800cc24:	1d1a      	adds	r2, r3, #4
 800cc26:	6032      	str	r2, [r6, #0]
 800cc28:	681e      	ldr	r6, [r3, #0]
 800cc2a:	6862      	ldr	r2, [r4, #4]
 800cc2c:	2100      	movs	r1, #0
 800cc2e:	4630      	mov	r0, r6
 800cc30:	f7fb faee 	bl	8008210 <memchr>
 800cc34:	b108      	cbz	r0, 800cc3a <_printf_i+0x1e6>
 800cc36:	1b80      	subs	r0, r0, r6
 800cc38:	6060      	str	r0, [r4, #4]
 800cc3a:	6863      	ldr	r3, [r4, #4]
 800cc3c:	6123      	str	r3, [r4, #16]
 800cc3e:	2300      	movs	r3, #0
 800cc40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc44:	e7aa      	b.n	800cb9c <_printf_i+0x148>
 800cc46:	6923      	ldr	r3, [r4, #16]
 800cc48:	4632      	mov	r2, r6
 800cc4a:	4649      	mov	r1, r9
 800cc4c:	4640      	mov	r0, r8
 800cc4e:	47d0      	blx	sl
 800cc50:	3001      	adds	r0, #1
 800cc52:	d0ad      	beq.n	800cbb0 <_printf_i+0x15c>
 800cc54:	6823      	ldr	r3, [r4, #0]
 800cc56:	079b      	lsls	r3, r3, #30
 800cc58:	d413      	bmi.n	800cc82 <_printf_i+0x22e>
 800cc5a:	68e0      	ldr	r0, [r4, #12]
 800cc5c:	9b03      	ldr	r3, [sp, #12]
 800cc5e:	4298      	cmp	r0, r3
 800cc60:	bfb8      	it	lt
 800cc62:	4618      	movlt	r0, r3
 800cc64:	e7a6      	b.n	800cbb4 <_printf_i+0x160>
 800cc66:	2301      	movs	r3, #1
 800cc68:	4632      	mov	r2, r6
 800cc6a:	4649      	mov	r1, r9
 800cc6c:	4640      	mov	r0, r8
 800cc6e:	47d0      	blx	sl
 800cc70:	3001      	adds	r0, #1
 800cc72:	d09d      	beq.n	800cbb0 <_printf_i+0x15c>
 800cc74:	3501      	adds	r5, #1
 800cc76:	68e3      	ldr	r3, [r4, #12]
 800cc78:	9903      	ldr	r1, [sp, #12]
 800cc7a:	1a5b      	subs	r3, r3, r1
 800cc7c:	42ab      	cmp	r3, r5
 800cc7e:	dcf2      	bgt.n	800cc66 <_printf_i+0x212>
 800cc80:	e7eb      	b.n	800cc5a <_printf_i+0x206>
 800cc82:	2500      	movs	r5, #0
 800cc84:	f104 0619 	add.w	r6, r4, #25
 800cc88:	e7f5      	b.n	800cc76 <_printf_i+0x222>
 800cc8a:	bf00      	nop
 800cc8c:	0800e3a1 	.word	0x0800e3a1
 800cc90:	0800e3b2 	.word	0x0800e3b2

0800cc94 <__sflush_r>:
 800cc94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cc98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc9c:	0716      	lsls	r6, r2, #28
 800cc9e:	4605      	mov	r5, r0
 800cca0:	460c      	mov	r4, r1
 800cca2:	d454      	bmi.n	800cd4e <__sflush_r+0xba>
 800cca4:	684b      	ldr	r3, [r1, #4]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	dc02      	bgt.n	800ccb0 <__sflush_r+0x1c>
 800ccaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	dd48      	ble.n	800cd42 <__sflush_r+0xae>
 800ccb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ccb2:	2e00      	cmp	r6, #0
 800ccb4:	d045      	beq.n	800cd42 <__sflush_r+0xae>
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ccbc:	682f      	ldr	r7, [r5, #0]
 800ccbe:	6a21      	ldr	r1, [r4, #32]
 800ccc0:	602b      	str	r3, [r5, #0]
 800ccc2:	d030      	beq.n	800cd26 <__sflush_r+0x92>
 800ccc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ccc6:	89a3      	ldrh	r3, [r4, #12]
 800ccc8:	0759      	lsls	r1, r3, #29
 800ccca:	d505      	bpl.n	800ccd8 <__sflush_r+0x44>
 800cccc:	6863      	ldr	r3, [r4, #4]
 800ccce:	1ad2      	subs	r2, r2, r3
 800ccd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ccd2:	b10b      	cbz	r3, 800ccd8 <__sflush_r+0x44>
 800ccd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ccd6:	1ad2      	subs	r2, r2, r3
 800ccd8:	2300      	movs	r3, #0
 800ccda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ccdc:	6a21      	ldr	r1, [r4, #32]
 800ccde:	4628      	mov	r0, r5
 800cce0:	47b0      	blx	r6
 800cce2:	1c43      	adds	r3, r0, #1
 800cce4:	89a3      	ldrh	r3, [r4, #12]
 800cce6:	d106      	bne.n	800ccf6 <__sflush_r+0x62>
 800cce8:	6829      	ldr	r1, [r5, #0]
 800ccea:	291d      	cmp	r1, #29
 800ccec:	d82b      	bhi.n	800cd46 <__sflush_r+0xb2>
 800ccee:	4a2a      	ldr	r2, [pc, #168]	@ (800cd98 <__sflush_r+0x104>)
 800ccf0:	410a      	asrs	r2, r1
 800ccf2:	07d6      	lsls	r6, r2, #31
 800ccf4:	d427      	bmi.n	800cd46 <__sflush_r+0xb2>
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	6062      	str	r2, [r4, #4]
 800ccfa:	04d9      	lsls	r1, r3, #19
 800ccfc:	6922      	ldr	r2, [r4, #16]
 800ccfe:	6022      	str	r2, [r4, #0]
 800cd00:	d504      	bpl.n	800cd0c <__sflush_r+0x78>
 800cd02:	1c42      	adds	r2, r0, #1
 800cd04:	d101      	bne.n	800cd0a <__sflush_r+0x76>
 800cd06:	682b      	ldr	r3, [r5, #0]
 800cd08:	b903      	cbnz	r3, 800cd0c <__sflush_r+0x78>
 800cd0a:	6560      	str	r0, [r4, #84]	@ 0x54
 800cd0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd0e:	602f      	str	r7, [r5, #0]
 800cd10:	b1b9      	cbz	r1, 800cd42 <__sflush_r+0xae>
 800cd12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd16:	4299      	cmp	r1, r3
 800cd18:	d002      	beq.n	800cd20 <__sflush_r+0x8c>
 800cd1a:	4628      	mov	r0, r5
 800cd1c:	f7ff fbf2 	bl	800c504 <_free_r>
 800cd20:	2300      	movs	r3, #0
 800cd22:	6363      	str	r3, [r4, #52]	@ 0x34
 800cd24:	e00d      	b.n	800cd42 <__sflush_r+0xae>
 800cd26:	2301      	movs	r3, #1
 800cd28:	4628      	mov	r0, r5
 800cd2a:	47b0      	blx	r6
 800cd2c:	4602      	mov	r2, r0
 800cd2e:	1c50      	adds	r0, r2, #1
 800cd30:	d1c9      	bne.n	800ccc6 <__sflush_r+0x32>
 800cd32:	682b      	ldr	r3, [r5, #0]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d0c6      	beq.n	800ccc6 <__sflush_r+0x32>
 800cd38:	2b1d      	cmp	r3, #29
 800cd3a:	d001      	beq.n	800cd40 <__sflush_r+0xac>
 800cd3c:	2b16      	cmp	r3, #22
 800cd3e:	d11e      	bne.n	800cd7e <__sflush_r+0xea>
 800cd40:	602f      	str	r7, [r5, #0]
 800cd42:	2000      	movs	r0, #0
 800cd44:	e022      	b.n	800cd8c <__sflush_r+0xf8>
 800cd46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd4a:	b21b      	sxth	r3, r3
 800cd4c:	e01b      	b.n	800cd86 <__sflush_r+0xf2>
 800cd4e:	690f      	ldr	r7, [r1, #16]
 800cd50:	2f00      	cmp	r7, #0
 800cd52:	d0f6      	beq.n	800cd42 <__sflush_r+0xae>
 800cd54:	0793      	lsls	r3, r2, #30
 800cd56:	680e      	ldr	r6, [r1, #0]
 800cd58:	bf08      	it	eq
 800cd5a:	694b      	ldreq	r3, [r1, #20]
 800cd5c:	600f      	str	r7, [r1, #0]
 800cd5e:	bf18      	it	ne
 800cd60:	2300      	movne	r3, #0
 800cd62:	eba6 0807 	sub.w	r8, r6, r7
 800cd66:	608b      	str	r3, [r1, #8]
 800cd68:	f1b8 0f00 	cmp.w	r8, #0
 800cd6c:	dde9      	ble.n	800cd42 <__sflush_r+0xae>
 800cd6e:	6a21      	ldr	r1, [r4, #32]
 800cd70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cd72:	4643      	mov	r3, r8
 800cd74:	463a      	mov	r2, r7
 800cd76:	4628      	mov	r0, r5
 800cd78:	47b0      	blx	r6
 800cd7a:	2800      	cmp	r0, #0
 800cd7c:	dc08      	bgt.n	800cd90 <__sflush_r+0xfc>
 800cd7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd86:	81a3      	strh	r3, [r4, #12]
 800cd88:	f04f 30ff 	mov.w	r0, #4294967295
 800cd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd90:	4407      	add	r7, r0
 800cd92:	eba8 0800 	sub.w	r8, r8, r0
 800cd96:	e7e7      	b.n	800cd68 <__sflush_r+0xd4>
 800cd98:	dfbffffe 	.word	0xdfbffffe

0800cd9c <_fflush_r>:
 800cd9c:	b538      	push	{r3, r4, r5, lr}
 800cd9e:	690b      	ldr	r3, [r1, #16]
 800cda0:	4605      	mov	r5, r0
 800cda2:	460c      	mov	r4, r1
 800cda4:	b913      	cbnz	r3, 800cdac <_fflush_r+0x10>
 800cda6:	2500      	movs	r5, #0
 800cda8:	4628      	mov	r0, r5
 800cdaa:	bd38      	pop	{r3, r4, r5, pc}
 800cdac:	b118      	cbz	r0, 800cdb6 <_fflush_r+0x1a>
 800cdae:	6a03      	ldr	r3, [r0, #32]
 800cdb0:	b90b      	cbnz	r3, 800cdb6 <_fflush_r+0x1a>
 800cdb2:	f7ff f9ad 	bl	800c110 <__sinit>
 800cdb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d0f3      	beq.n	800cda6 <_fflush_r+0xa>
 800cdbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cdc0:	07d0      	lsls	r0, r2, #31
 800cdc2:	d404      	bmi.n	800cdce <_fflush_r+0x32>
 800cdc4:	0599      	lsls	r1, r3, #22
 800cdc6:	d402      	bmi.n	800cdce <_fflush_r+0x32>
 800cdc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cdca:	f7ff fb98 	bl	800c4fe <__retarget_lock_acquire_recursive>
 800cdce:	4628      	mov	r0, r5
 800cdd0:	4621      	mov	r1, r4
 800cdd2:	f7ff ff5f 	bl	800cc94 <__sflush_r>
 800cdd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cdd8:	07da      	lsls	r2, r3, #31
 800cdda:	4605      	mov	r5, r0
 800cddc:	d4e4      	bmi.n	800cda8 <_fflush_r+0xc>
 800cdde:	89a3      	ldrh	r3, [r4, #12]
 800cde0:	059b      	lsls	r3, r3, #22
 800cde2:	d4e1      	bmi.n	800cda8 <_fflush_r+0xc>
 800cde4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cde6:	f7ff fb8b 	bl	800c500 <__retarget_lock_release_recursive>
 800cdea:	e7dd      	b.n	800cda8 <_fflush_r+0xc>

0800cdec <__swhatbuf_r>:
 800cdec:	b570      	push	{r4, r5, r6, lr}
 800cdee:	460c      	mov	r4, r1
 800cdf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdf4:	2900      	cmp	r1, #0
 800cdf6:	b096      	sub	sp, #88	@ 0x58
 800cdf8:	4615      	mov	r5, r2
 800cdfa:	461e      	mov	r6, r3
 800cdfc:	da0d      	bge.n	800ce1a <__swhatbuf_r+0x2e>
 800cdfe:	89a3      	ldrh	r3, [r4, #12]
 800ce00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ce04:	f04f 0100 	mov.w	r1, #0
 800ce08:	bf14      	ite	ne
 800ce0a:	2340      	movne	r3, #64	@ 0x40
 800ce0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ce10:	2000      	movs	r0, #0
 800ce12:	6031      	str	r1, [r6, #0]
 800ce14:	602b      	str	r3, [r5, #0]
 800ce16:	b016      	add	sp, #88	@ 0x58
 800ce18:	bd70      	pop	{r4, r5, r6, pc}
 800ce1a:	466a      	mov	r2, sp
 800ce1c:	f000 f848 	bl	800ceb0 <_fstat_r>
 800ce20:	2800      	cmp	r0, #0
 800ce22:	dbec      	blt.n	800cdfe <__swhatbuf_r+0x12>
 800ce24:	9901      	ldr	r1, [sp, #4]
 800ce26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ce2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ce2e:	4259      	negs	r1, r3
 800ce30:	4159      	adcs	r1, r3
 800ce32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce36:	e7eb      	b.n	800ce10 <__swhatbuf_r+0x24>

0800ce38 <__smakebuf_r>:
 800ce38:	898b      	ldrh	r3, [r1, #12]
 800ce3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce3c:	079d      	lsls	r5, r3, #30
 800ce3e:	4606      	mov	r6, r0
 800ce40:	460c      	mov	r4, r1
 800ce42:	d507      	bpl.n	800ce54 <__smakebuf_r+0x1c>
 800ce44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ce48:	6023      	str	r3, [r4, #0]
 800ce4a:	6123      	str	r3, [r4, #16]
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	6163      	str	r3, [r4, #20]
 800ce50:	b003      	add	sp, #12
 800ce52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce54:	ab01      	add	r3, sp, #4
 800ce56:	466a      	mov	r2, sp
 800ce58:	f7ff ffc8 	bl	800cdec <__swhatbuf_r>
 800ce5c:	9f00      	ldr	r7, [sp, #0]
 800ce5e:	4605      	mov	r5, r0
 800ce60:	4639      	mov	r1, r7
 800ce62:	4630      	mov	r0, r6
 800ce64:	f7ff fbba 	bl	800c5dc <_malloc_r>
 800ce68:	b948      	cbnz	r0, 800ce7e <__smakebuf_r+0x46>
 800ce6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce6e:	059a      	lsls	r2, r3, #22
 800ce70:	d4ee      	bmi.n	800ce50 <__smakebuf_r+0x18>
 800ce72:	f023 0303 	bic.w	r3, r3, #3
 800ce76:	f043 0302 	orr.w	r3, r3, #2
 800ce7a:	81a3      	strh	r3, [r4, #12]
 800ce7c:	e7e2      	b.n	800ce44 <__smakebuf_r+0xc>
 800ce7e:	89a3      	ldrh	r3, [r4, #12]
 800ce80:	6020      	str	r0, [r4, #0]
 800ce82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce86:	81a3      	strh	r3, [r4, #12]
 800ce88:	9b01      	ldr	r3, [sp, #4]
 800ce8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ce8e:	b15b      	cbz	r3, 800cea8 <__smakebuf_r+0x70>
 800ce90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce94:	4630      	mov	r0, r6
 800ce96:	f000 f81d 	bl	800ced4 <_isatty_r>
 800ce9a:	b128      	cbz	r0, 800cea8 <__smakebuf_r+0x70>
 800ce9c:	89a3      	ldrh	r3, [r4, #12]
 800ce9e:	f023 0303 	bic.w	r3, r3, #3
 800cea2:	f043 0301 	orr.w	r3, r3, #1
 800cea6:	81a3      	strh	r3, [r4, #12]
 800cea8:	89a3      	ldrh	r3, [r4, #12]
 800ceaa:	431d      	orrs	r5, r3
 800ceac:	81a5      	strh	r5, [r4, #12]
 800ceae:	e7cf      	b.n	800ce50 <__smakebuf_r+0x18>

0800ceb0 <_fstat_r>:
 800ceb0:	b538      	push	{r3, r4, r5, lr}
 800ceb2:	4d07      	ldr	r5, [pc, #28]	@ (800ced0 <_fstat_r+0x20>)
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	4604      	mov	r4, r0
 800ceb8:	4608      	mov	r0, r1
 800ceba:	4611      	mov	r1, r2
 800cebc:	602b      	str	r3, [r5, #0]
 800cebe:	f7fc fb34 	bl	800952a <_fstat>
 800cec2:	1c43      	adds	r3, r0, #1
 800cec4:	d102      	bne.n	800cecc <_fstat_r+0x1c>
 800cec6:	682b      	ldr	r3, [r5, #0]
 800cec8:	b103      	cbz	r3, 800cecc <_fstat_r+0x1c>
 800ceca:	6023      	str	r3, [r4, #0]
 800cecc:	bd38      	pop	{r3, r4, r5, pc}
 800cece:	bf00      	nop
 800ced0:	20000340 	.word	0x20000340

0800ced4 <_isatty_r>:
 800ced4:	b538      	push	{r3, r4, r5, lr}
 800ced6:	4d06      	ldr	r5, [pc, #24]	@ (800cef0 <_isatty_r+0x1c>)
 800ced8:	2300      	movs	r3, #0
 800ceda:	4604      	mov	r4, r0
 800cedc:	4608      	mov	r0, r1
 800cede:	602b      	str	r3, [r5, #0]
 800cee0:	f7fc fb33 	bl	800954a <_isatty>
 800cee4:	1c43      	adds	r3, r0, #1
 800cee6:	d102      	bne.n	800ceee <_isatty_r+0x1a>
 800cee8:	682b      	ldr	r3, [r5, #0]
 800ceea:	b103      	cbz	r3, 800ceee <_isatty_r+0x1a>
 800ceec:	6023      	str	r3, [r4, #0]
 800ceee:	bd38      	pop	{r3, r4, r5, pc}
 800cef0:	20000340 	.word	0x20000340

0800cef4 <_sbrk_r>:
 800cef4:	b538      	push	{r3, r4, r5, lr}
 800cef6:	4d06      	ldr	r5, [pc, #24]	@ (800cf10 <_sbrk_r+0x1c>)
 800cef8:	2300      	movs	r3, #0
 800cefa:	4604      	mov	r4, r0
 800cefc:	4608      	mov	r0, r1
 800cefe:	602b      	str	r3, [r5, #0]
 800cf00:	f7fc fb3c 	bl	800957c <_sbrk>
 800cf04:	1c43      	adds	r3, r0, #1
 800cf06:	d102      	bne.n	800cf0e <_sbrk_r+0x1a>
 800cf08:	682b      	ldr	r3, [r5, #0]
 800cf0a:	b103      	cbz	r3, 800cf0e <_sbrk_r+0x1a>
 800cf0c:	6023      	str	r3, [r4, #0]
 800cf0e:	bd38      	pop	{r3, r4, r5, pc}
 800cf10:	20000340 	.word	0x20000340

0800cf14 <_init>:
 800cf14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf16:	bf00      	nop
 800cf18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf1a:	bc08      	pop	{r3}
 800cf1c:	469e      	mov	lr, r3
 800cf1e:	4770      	bx	lr

0800cf20 <_fini>:
 800cf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf22:	bf00      	nop
 800cf24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf26:	bc08      	pop	{r3}
 800cf28:	469e      	mov	lr, r3
 800cf2a:	4770      	bx	lr
