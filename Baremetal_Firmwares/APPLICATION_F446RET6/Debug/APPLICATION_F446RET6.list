
APPLICATION_F446RET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ecc  080081d0  080081d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800c09c  0800c09c  0000509c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c148  0800c148  00006098  2**0
                  CONTENTS
  4 .ARM          00000008  0800c148  0800c148  00005148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c150  0800c150  00006098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c150  0800c150  00005150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c154  0800c154  00005154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800c158  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000098  0800c1f0  00006098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  0800c1f0  0000629c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098bf  00000000  00000000  000060c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c8c  00000000  00000000  0000f987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  00011618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000063f  00000000  00000000  00011e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022026  00000000  00000000  00012497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b49c  00000000  00000000  000344bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca71c  00000000  00000000  0003f959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a075  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027f8  00000000  00000000  0010a0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0010c8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081d0 <__do_global_dtors_aux>:
 80081d0:	b510      	push	{r4, lr}
 80081d2:	4c05      	ldr	r4, [pc, #20]	@ (80081e8 <__do_global_dtors_aux+0x18>)
 80081d4:	7823      	ldrb	r3, [r4, #0]
 80081d6:	b933      	cbnz	r3, 80081e6 <__do_global_dtors_aux+0x16>
 80081d8:	4b04      	ldr	r3, [pc, #16]	@ (80081ec <__do_global_dtors_aux+0x1c>)
 80081da:	b113      	cbz	r3, 80081e2 <__do_global_dtors_aux+0x12>
 80081dc:	4804      	ldr	r0, [pc, #16]	@ (80081f0 <__do_global_dtors_aux+0x20>)
 80081de:	f3af 8000 	nop.w
 80081e2:	2301      	movs	r3, #1
 80081e4:	7023      	strb	r3, [r4, #0]
 80081e6:	bd10      	pop	{r4, pc}
 80081e8:	20000098 	.word	0x20000098
 80081ec:	00000000 	.word	0x00000000
 80081f0:	0800c084 	.word	0x0800c084

080081f4 <frame_dummy>:
 80081f4:	b508      	push	{r3, lr}
 80081f6:	4b03      	ldr	r3, [pc, #12]	@ (8008204 <frame_dummy+0x10>)
 80081f8:	b11b      	cbz	r3, 8008202 <frame_dummy+0xe>
 80081fa:	4903      	ldr	r1, [pc, #12]	@ (8008208 <frame_dummy+0x14>)
 80081fc:	4803      	ldr	r0, [pc, #12]	@ (800820c <frame_dummy+0x18>)
 80081fe:	f3af 8000 	nop.w
 8008202:	bd08      	pop	{r3, pc}
 8008204:	00000000 	.word	0x00000000
 8008208:	2000009c 	.word	0x2000009c
 800820c:	0800c084 	.word	0x0800c084

08008210 <memchr>:
 8008210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8008214:	2a10      	cmp	r2, #16
 8008216:	db2b      	blt.n	8008270 <memchr+0x60>
 8008218:	f010 0f07 	tst.w	r0, #7
 800821c:	d008      	beq.n	8008230 <memchr+0x20>
 800821e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008222:	3a01      	subs	r2, #1
 8008224:	428b      	cmp	r3, r1
 8008226:	d02d      	beq.n	8008284 <memchr+0x74>
 8008228:	f010 0f07 	tst.w	r0, #7
 800822c:	b342      	cbz	r2, 8008280 <memchr+0x70>
 800822e:	d1f6      	bne.n	800821e <memchr+0xe>
 8008230:	b4f0      	push	{r4, r5, r6, r7}
 8008232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800823a:	f022 0407 	bic.w	r4, r2, #7
 800823e:	f07f 0700 	mvns.w	r7, #0
 8008242:	2300      	movs	r3, #0
 8008244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008248:	3c08      	subs	r4, #8
 800824a:	ea85 0501 	eor.w	r5, r5, r1
 800824e:	ea86 0601 	eor.w	r6, r6, r1
 8008252:	fa85 f547 	uadd8	r5, r5, r7
 8008256:	faa3 f587 	sel	r5, r3, r7
 800825a:	fa86 f647 	uadd8	r6, r6, r7
 800825e:	faa5 f687 	sel	r6, r5, r7
 8008262:	b98e      	cbnz	r6, 8008288 <memchr+0x78>
 8008264:	d1ee      	bne.n	8008244 <memchr+0x34>
 8008266:	bcf0      	pop	{r4, r5, r6, r7}
 8008268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800826c:	f002 0207 	and.w	r2, r2, #7
 8008270:	b132      	cbz	r2, 8008280 <memchr+0x70>
 8008272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008276:	3a01      	subs	r2, #1
 8008278:	ea83 0301 	eor.w	r3, r3, r1
 800827c:	b113      	cbz	r3, 8008284 <memchr+0x74>
 800827e:	d1f8      	bne.n	8008272 <memchr+0x62>
 8008280:	2000      	movs	r0, #0
 8008282:	4770      	bx	lr
 8008284:	3801      	subs	r0, #1
 8008286:	4770      	bx	lr
 8008288:	2d00      	cmp	r5, #0
 800828a:	bf06      	itte	eq
 800828c:	4635      	moveq	r5, r6
 800828e:	3803      	subeq	r0, #3
 8008290:	3807      	subne	r0, #7
 8008292:	f015 0f01 	tst.w	r5, #1
 8008296:	d107      	bne.n	80082a8 <memchr+0x98>
 8008298:	3001      	adds	r0, #1
 800829a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800829e:	bf02      	ittt	eq
 80082a0:	3001      	addeq	r0, #1
 80082a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80082a6:	3001      	addeq	r0, #1
 80082a8:	bcf0      	pop	{r4, r5, r6, r7}
 80082aa:	3801      	subs	r0, #1
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop

080082b0 <__aeabi_uldivmod>:
 80082b0:	b953      	cbnz	r3, 80082c8 <__aeabi_uldivmod+0x18>
 80082b2:	b94a      	cbnz	r2, 80082c8 <__aeabi_uldivmod+0x18>
 80082b4:	2900      	cmp	r1, #0
 80082b6:	bf08      	it	eq
 80082b8:	2800      	cmpeq	r0, #0
 80082ba:	bf1c      	itt	ne
 80082bc:	f04f 31ff 	movne.w	r1, #4294967295
 80082c0:	f04f 30ff 	movne.w	r0, #4294967295
 80082c4:	f000 b96a 	b.w	800859c <__aeabi_idiv0>
 80082c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80082cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80082d0:	f000 f806 	bl	80082e0 <__udivmoddi4>
 80082d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80082d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082dc:	b004      	add	sp, #16
 80082de:	4770      	bx	lr

080082e0 <__udivmoddi4>:
 80082e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082e4:	9d08      	ldr	r5, [sp, #32]
 80082e6:	460c      	mov	r4, r1
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d14e      	bne.n	800838a <__udivmoddi4+0xaa>
 80082ec:	4694      	mov	ip, r2
 80082ee:	458c      	cmp	ip, r1
 80082f0:	4686      	mov	lr, r0
 80082f2:	fab2 f282 	clz	r2, r2
 80082f6:	d962      	bls.n	80083be <__udivmoddi4+0xde>
 80082f8:	b14a      	cbz	r2, 800830e <__udivmoddi4+0x2e>
 80082fa:	f1c2 0320 	rsb	r3, r2, #32
 80082fe:	4091      	lsls	r1, r2
 8008300:	fa20 f303 	lsr.w	r3, r0, r3
 8008304:	fa0c fc02 	lsl.w	ip, ip, r2
 8008308:	4319      	orrs	r1, r3
 800830a:	fa00 fe02 	lsl.w	lr, r0, r2
 800830e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008312:	fa1f f68c 	uxth.w	r6, ip
 8008316:	fbb1 f4f7 	udiv	r4, r1, r7
 800831a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800831e:	fb07 1114 	mls	r1, r7, r4, r1
 8008322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008326:	fb04 f106 	mul.w	r1, r4, r6
 800832a:	4299      	cmp	r1, r3
 800832c:	d90a      	bls.n	8008344 <__udivmoddi4+0x64>
 800832e:	eb1c 0303 	adds.w	r3, ip, r3
 8008332:	f104 30ff 	add.w	r0, r4, #4294967295
 8008336:	f080 8112 	bcs.w	800855e <__udivmoddi4+0x27e>
 800833a:	4299      	cmp	r1, r3
 800833c:	f240 810f 	bls.w	800855e <__udivmoddi4+0x27e>
 8008340:	3c02      	subs	r4, #2
 8008342:	4463      	add	r3, ip
 8008344:	1a59      	subs	r1, r3, r1
 8008346:	fa1f f38e 	uxth.w	r3, lr
 800834a:	fbb1 f0f7 	udiv	r0, r1, r7
 800834e:	fb07 1110 	mls	r1, r7, r0, r1
 8008352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008356:	fb00 f606 	mul.w	r6, r0, r6
 800835a:	429e      	cmp	r6, r3
 800835c:	d90a      	bls.n	8008374 <__udivmoddi4+0x94>
 800835e:	eb1c 0303 	adds.w	r3, ip, r3
 8008362:	f100 31ff 	add.w	r1, r0, #4294967295
 8008366:	f080 80fc 	bcs.w	8008562 <__udivmoddi4+0x282>
 800836a:	429e      	cmp	r6, r3
 800836c:	f240 80f9 	bls.w	8008562 <__udivmoddi4+0x282>
 8008370:	4463      	add	r3, ip
 8008372:	3802      	subs	r0, #2
 8008374:	1b9b      	subs	r3, r3, r6
 8008376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800837a:	2100      	movs	r1, #0
 800837c:	b11d      	cbz	r5, 8008386 <__udivmoddi4+0xa6>
 800837e:	40d3      	lsrs	r3, r2
 8008380:	2200      	movs	r2, #0
 8008382:	e9c5 3200 	strd	r3, r2, [r5]
 8008386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800838a:	428b      	cmp	r3, r1
 800838c:	d905      	bls.n	800839a <__udivmoddi4+0xba>
 800838e:	b10d      	cbz	r5, 8008394 <__udivmoddi4+0xb4>
 8008390:	e9c5 0100 	strd	r0, r1, [r5]
 8008394:	2100      	movs	r1, #0
 8008396:	4608      	mov	r0, r1
 8008398:	e7f5      	b.n	8008386 <__udivmoddi4+0xa6>
 800839a:	fab3 f183 	clz	r1, r3
 800839e:	2900      	cmp	r1, #0
 80083a0:	d146      	bne.n	8008430 <__udivmoddi4+0x150>
 80083a2:	42a3      	cmp	r3, r4
 80083a4:	d302      	bcc.n	80083ac <__udivmoddi4+0xcc>
 80083a6:	4290      	cmp	r0, r2
 80083a8:	f0c0 80f0 	bcc.w	800858c <__udivmoddi4+0x2ac>
 80083ac:	1a86      	subs	r6, r0, r2
 80083ae:	eb64 0303 	sbc.w	r3, r4, r3
 80083b2:	2001      	movs	r0, #1
 80083b4:	2d00      	cmp	r5, #0
 80083b6:	d0e6      	beq.n	8008386 <__udivmoddi4+0xa6>
 80083b8:	e9c5 6300 	strd	r6, r3, [r5]
 80083bc:	e7e3      	b.n	8008386 <__udivmoddi4+0xa6>
 80083be:	2a00      	cmp	r2, #0
 80083c0:	f040 8090 	bne.w	80084e4 <__udivmoddi4+0x204>
 80083c4:	eba1 040c 	sub.w	r4, r1, ip
 80083c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80083cc:	fa1f f78c 	uxth.w	r7, ip
 80083d0:	2101      	movs	r1, #1
 80083d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80083d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80083da:	fb08 4416 	mls	r4, r8, r6, r4
 80083de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80083e2:	fb07 f006 	mul.w	r0, r7, r6
 80083e6:	4298      	cmp	r0, r3
 80083e8:	d908      	bls.n	80083fc <__udivmoddi4+0x11c>
 80083ea:	eb1c 0303 	adds.w	r3, ip, r3
 80083ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80083f2:	d202      	bcs.n	80083fa <__udivmoddi4+0x11a>
 80083f4:	4298      	cmp	r0, r3
 80083f6:	f200 80cd 	bhi.w	8008594 <__udivmoddi4+0x2b4>
 80083fa:	4626      	mov	r6, r4
 80083fc:	1a1c      	subs	r4, r3, r0
 80083fe:	fa1f f38e 	uxth.w	r3, lr
 8008402:	fbb4 f0f8 	udiv	r0, r4, r8
 8008406:	fb08 4410 	mls	r4, r8, r0, r4
 800840a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800840e:	fb00 f707 	mul.w	r7, r0, r7
 8008412:	429f      	cmp	r7, r3
 8008414:	d908      	bls.n	8008428 <__udivmoddi4+0x148>
 8008416:	eb1c 0303 	adds.w	r3, ip, r3
 800841a:	f100 34ff 	add.w	r4, r0, #4294967295
 800841e:	d202      	bcs.n	8008426 <__udivmoddi4+0x146>
 8008420:	429f      	cmp	r7, r3
 8008422:	f200 80b0 	bhi.w	8008586 <__udivmoddi4+0x2a6>
 8008426:	4620      	mov	r0, r4
 8008428:	1bdb      	subs	r3, r3, r7
 800842a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800842e:	e7a5      	b.n	800837c <__udivmoddi4+0x9c>
 8008430:	f1c1 0620 	rsb	r6, r1, #32
 8008434:	408b      	lsls	r3, r1
 8008436:	fa22 f706 	lsr.w	r7, r2, r6
 800843a:	431f      	orrs	r7, r3
 800843c:	fa20 fc06 	lsr.w	ip, r0, r6
 8008440:	fa04 f301 	lsl.w	r3, r4, r1
 8008444:	ea43 030c 	orr.w	r3, r3, ip
 8008448:	40f4      	lsrs	r4, r6
 800844a:	fa00 f801 	lsl.w	r8, r0, r1
 800844e:	0c38      	lsrs	r0, r7, #16
 8008450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8008454:	fbb4 fef0 	udiv	lr, r4, r0
 8008458:	fa1f fc87 	uxth.w	ip, r7
 800845c:	fb00 441e 	mls	r4, r0, lr, r4
 8008460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8008464:	fb0e f90c 	mul.w	r9, lr, ip
 8008468:	45a1      	cmp	r9, r4
 800846a:	fa02 f201 	lsl.w	r2, r2, r1
 800846e:	d90a      	bls.n	8008486 <__udivmoddi4+0x1a6>
 8008470:	193c      	adds	r4, r7, r4
 8008472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8008476:	f080 8084 	bcs.w	8008582 <__udivmoddi4+0x2a2>
 800847a:	45a1      	cmp	r9, r4
 800847c:	f240 8081 	bls.w	8008582 <__udivmoddi4+0x2a2>
 8008480:	f1ae 0e02 	sub.w	lr, lr, #2
 8008484:	443c      	add	r4, r7
 8008486:	eba4 0409 	sub.w	r4, r4, r9
 800848a:	fa1f f983 	uxth.w	r9, r3
 800848e:	fbb4 f3f0 	udiv	r3, r4, r0
 8008492:	fb00 4413 	mls	r4, r0, r3, r4
 8008496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800849a:	fb03 fc0c 	mul.w	ip, r3, ip
 800849e:	45a4      	cmp	ip, r4
 80084a0:	d907      	bls.n	80084b2 <__udivmoddi4+0x1d2>
 80084a2:	193c      	adds	r4, r7, r4
 80084a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80084a8:	d267      	bcs.n	800857a <__udivmoddi4+0x29a>
 80084aa:	45a4      	cmp	ip, r4
 80084ac:	d965      	bls.n	800857a <__udivmoddi4+0x29a>
 80084ae:	3b02      	subs	r3, #2
 80084b0:	443c      	add	r4, r7
 80084b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80084b6:	fba0 9302 	umull	r9, r3, r0, r2
 80084ba:	eba4 040c 	sub.w	r4, r4, ip
 80084be:	429c      	cmp	r4, r3
 80084c0:	46ce      	mov	lr, r9
 80084c2:	469c      	mov	ip, r3
 80084c4:	d351      	bcc.n	800856a <__udivmoddi4+0x28a>
 80084c6:	d04e      	beq.n	8008566 <__udivmoddi4+0x286>
 80084c8:	b155      	cbz	r5, 80084e0 <__udivmoddi4+0x200>
 80084ca:	ebb8 030e 	subs.w	r3, r8, lr
 80084ce:	eb64 040c 	sbc.w	r4, r4, ip
 80084d2:	fa04 f606 	lsl.w	r6, r4, r6
 80084d6:	40cb      	lsrs	r3, r1
 80084d8:	431e      	orrs	r6, r3
 80084da:	40cc      	lsrs	r4, r1
 80084dc:	e9c5 6400 	strd	r6, r4, [r5]
 80084e0:	2100      	movs	r1, #0
 80084e2:	e750      	b.n	8008386 <__udivmoddi4+0xa6>
 80084e4:	f1c2 0320 	rsb	r3, r2, #32
 80084e8:	fa20 f103 	lsr.w	r1, r0, r3
 80084ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80084f0:	fa24 f303 	lsr.w	r3, r4, r3
 80084f4:	4094      	lsls	r4, r2
 80084f6:	430c      	orrs	r4, r1
 80084f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80084fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8008500:	fa1f f78c 	uxth.w	r7, ip
 8008504:	fbb3 f0f8 	udiv	r0, r3, r8
 8008508:	fb08 3110 	mls	r1, r8, r0, r3
 800850c:	0c23      	lsrs	r3, r4, #16
 800850e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008512:	fb00 f107 	mul.w	r1, r0, r7
 8008516:	4299      	cmp	r1, r3
 8008518:	d908      	bls.n	800852c <__udivmoddi4+0x24c>
 800851a:	eb1c 0303 	adds.w	r3, ip, r3
 800851e:	f100 36ff 	add.w	r6, r0, #4294967295
 8008522:	d22c      	bcs.n	800857e <__udivmoddi4+0x29e>
 8008524:	4299      	cmp	r1, r3
 8008526:	d92a      	bls.n	800857e <__udivmoddi4+0x29e>
 8008528:	3802      	subs	r0, #2
 800852a:	4463      	add	r3, ip
 800852c:	1a5b      	subs	r3, r3, r1
 800852e:	b2a4      	uxth	r4, r4
 8008530:	fbb3 f1f8 	udiv	r1, r3, r8
 8008534:	fb08 3311 	mls	r3, r8, r1, r3
 8008538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800853c:	fb01 f307 	mul.w	r3, r1, r7
 8008540:	42a3      	cmp	r3, r4
 8008542:	d908      	bls.n	8008556 <__udivmoddi4+0x276>
 8008544:	eb1c 0404 	adds.w	r4, ip, r4
 8008548:	f101 36ff 	add.w	r6, r1, #4294967295
 800854c:	d213      	bcs.n	8008576 <__udivmoddi4+0x296>
 800854e:	42a3      	cmp	r3, r4
 8008550:	d911      	bls.n	8008576 <__udivmoddi4+0x296>
 8008552:	3902      	subs	r1, #2
 8008554:	4464      	add	r4, ip
 8008556:	1ae4      	subs	r4, r4, r3
 8008558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800855c:	e739      	b.n	80083d2 <__udivmoddi4+0xf2>
 800855e:	4604      	mov	r4, r0
 8008560:	e6f0      	b.n	8008344 <__udivmoddi4+0x64>
 8008562:	4608      	mov	r0, r1
 8008564:	e706      	b.n	8008374 <__udivmoddi4+0x94>
 8008566:	45c8      	cmp	r8, r9
 8008568:	d2ae      	bcs.n	80084c8 <__udivmoddi4+0x1e8>
 800856a:	ebb9 0e02 	subs.w	lr, r9, r2
 800856e:	eb63 0c07 	sbc.w	ip, r3, r7
 8008572:	3801      	subs	r0, #1
 8008574:	e7a8      	b.n	80084c8 <__udivmoddi4+0x1e8>
 8008576:	4631      	mov	r1, r6
 8008578:	e7ed      	b.n	8008556 <__udivmoddi4+0x276>
 800857a:	4603      	mov	r3, r0
 800857c:	e799      	b.n	80084b2 <__udivmoddi4+0x1d2>
 800857e:	4630      	mov	r0, r6
 8008580:	e7d4      	b.n	800852c <__udivmoddi4+0x24c>
 8008582:	46d6      	mov	lr, sl
 8008584:	e77f      	b.n	8008486 <__udivmoddi4+0x1a6>
 8008586:	4463      	add	r3, ip
 8008588:	3802      	subs	r0, #2
 800858a:	e74d      	b.n	8008428 <__udivmoddi4+0x148>
 800858c:	4606      	mov	r6, r0
 800858e:	4623      	mov	r3, r4
 8008590:	4608      	mov	r0, r1
 8008592:	e70f      	b.n	80083b4 <__udivmoddi4+0xd4>
 8008594:	3e02      	subs	r6, #2
 8008596:	4463      	add	r3, ip
 8008598:	e730      	b.n	80083fc <__udivmoddi4+0x11c>
 800859a:	bf00      	nop

0800859c <__aeabi_idiv0>:
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop

080085a0 <scan_keypad>:
uint16_t rowPins[4]      = {KEYPAD_R1_Pin, KEYPAD_R2_Pin, KEYPAD_R3_Pin, KEYPAD_R4_Pin};

GPIO_TypeDef* colPorts[4] = {KEYPAD_C1_GPIO_Port, KEYPAD_C2_GPIO_Port, KEYPAD_C3_GPIO_Port, KEYPAD_C4_GPIO_Port};
uint16_t colPins[4]       = {KEYPAD_C1_Pin, KEYPAD_C2_Pin, KEYPAD_C3_Pin, KEYPAD_C4_Pin};

char scan_keypad(void) {
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
    for (int row = 0; row < 4; row++) {
 80085a6:	2300      	movs	r3, #0
 80085a8:	60fb      	str	r3, [r7, #12]
 80085aa:	e056      	b.n	800865a <scan_keypad+0xba>
        // Set all rows HIGH
        for (int i = 0; i < 4; i++) {
 80085ac:	2300      	movs	r3, #0
 80085ae:	60bb      	str	r3, [r7, #8]
 80085b0:	e00e      	b.n	80085d0 <scan_keypad+0x30>
            HAL_GPIO_WritePin(rowPorts[i], rowPins[i], GPIO_PIN_SET);
 80085b2:	4a2e      	ldr	r2, [pc, #184]	@ (800866c <scan_keypad+0xcc>)
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80085ba:	4a2d      	ldr	r2, [pc, #180]	@ (8008670 <scan_keypad+0xd0>)
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085c2:	2201      	movs	r2, #1
 80085c4:	4619      	mov	r1, r3
 80085c6:	f000 ffe7 	bl	8009598 <HAL_GPIO_WritePin>
        for (int i = 0; i < 4; i++) {
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	3301      	adds	r3, #1
 80085ce:	60bb      	str	r3, [r7, #8]
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	dded      	ble.n	80085b2 <scan_keypad+0x12>
        }

        // Set current row LOW
        HAL_GPIO_WritePin(rowPorts[row], rowPins[row], GPIO_PIN_RESET);
 80085d6:	4a25      	ldr	r2, [pc, #148]	@ (800866c <scan_keypad+0xcc>)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80085de:	4a24      	ldr	r2, [pc, #144]	@ (8008670 <scan_keypad+0xd0>)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085e6:	2200      	movs	r2, #0
 80085e8:	4619      	mov	r1, r3
 80085ea:	f000 ffd5 	bl	8009598 <HAL_GPIO_WritePin>

        // Check columns
        for (int col = 0; col < 4; col++) {
 80085ee:	2300      	movs	r3, #0
 80085f0:	607b      	str	r3, [r7, #4]
 80085f2:	e02c      	b.n	800864e <scan_keypad+0xae>
            if (HAL_GPIO_ReadPin(colPorts[col], colPins[col]) == GPIO_PIN_RESET) {
 80085f4:	4a1f      	ldr	r2, [pc, #124]	@ (8008674 <scan_keypad+0xd4>)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80085fc:	491e      	ldr	r1, [pc, #120]	@ (8008678 <scan_keypad+0xd8>)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008604:	4619      	mov	r1, r3
 8008606:	4610      	mov	r0, r2
 8008608:	f000 ffae 	bl	8009568 <HAL_GPIO_ReadPin>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d11a      	bne.n	8008648 <scan_keypad+0xa8>
                HAL_Delay(20);  // Debounce
 8008612:	2014      	movs	r0, #20
 8008614:	f000 fc4c 	bl	8008eb0 <HAL_Delay>
                while (HAL_GPIO_ReadPin(colPorts[col], colPins[col]) == GPIO_PIN_RESET);
 8008618:	bf00      	nop
 800861a:	4a16      	ldr	r2, [pc, #88]	@ (8008674 <scan_keypad+0xd4>)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008622:	4915      	ldr	r1, [pc, #84]	@ (8008678 <scan_keypad+0xd8>)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800862a:	4619      	mov	r1, r3
 800862c:	4610      	mov	r0, r2
 800862e:	f000 ff9b 	bl	8009568 <HAL_GPIO_ReadPin>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d0f0      	beq.n	800861a <scan_keypad+0x7a>
                return keymap[row][col];
 8008638:	4a10      	ldr	r2, [pc, #64]	@ (800867c <scan_keypad+0xdc>)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	441a      	add	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4413      	add	r3, r2
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	e00c      	b.n	8008662 <scan_keypad+0xc2>
        for (int col = 0; col < 4; col++) {
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	3301      	adds	r3, #1
 800864c:	607b      	str	r3, [r7, #4]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2b03      	cmp	r3, #3
 8008652:	ddcf      	ble.n	80085f4 <scan_keypad+0x54>
    for (int row = 0; row < 4; row++) {
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	3301      	adds	r3, #1
 8008658:	60fb      	str	r3, [r7, #12]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b03      	cmp	r3, #3
 800865e:	dda5      	ble.n	80085ac <scan_keypad+0xc>
            }
        }
    }
    return '\0'; // No key pressed
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	20000000 	.word	0x20000000
 8008670:	20000010 	.word	0x20000010
 8008674:	20000018 	.word	0x20000018
 8008678:	20000028 	.word	0x20000028
 800867c:	0800c0ec 	.word	0x0800c0ec

08008680 <JumpToBootloader>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void JumpToBootloader(uint32_t boot_start_address)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
	void (*boot_reset_handler)(void);
	uint32_t msp_value = *(volatile uint32_t*)boot_start_address;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	617b      	str	r3, [r7, #20]
	uint32_t reset_handler_address = *(volatile uint32_t*)(boot_start_address + 4);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	3304      	adds	r3, #4
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	613b      	str	r3, [r7, #16]
	printf("boot reset handler addr: 0x%08lx\n", reset_handler_address);
 8008696:	6939      	ldr	r1, [r7, #16]
 8008698:	4809      	ldr	r0, [pc, #36]	@ (80086c0 <JumpToBootloader+0x40>)
 800869a:	f002 fe27 	bl	800b2ec <iprintf>
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	f383 8808 	msr	MSP, r3
}
 80086a8:	bf00      	nop

	// Step 3: Set MSP to application's MSP
	__set_MSP(msp_value);

	// Step 4: Set the function pointer and jump
	boot_reset_handler = (void*) (reset_handler_address | 0x1);  // Ensure Thumb bit is set
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	f043 0301 	orr.w	r3, r3, #1
 80086b0:	60fb      	str	r3, [r7, #12]
	boot_reset_handler();
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	4798      	blx	r3
}
 80086b6:	bf00      	nop
 80086b8:	3718      	adds	r7, #24
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	0800c09c 	.word	0x0800c09c

080086c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a09      	ldr	r2, [pc, #36]	@ (80086f8 <HAL_UART_RxCpltCallback+0x34>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d10c      	bne.n	80086f0 <HAL_UART_RxCpltCallback+0x2c>
    {
        if (rx_byte == BOOT_CMD)
 80086d6:	4b09      	ldr	r3, [pc, #36]	@ (80086fc <HAL_UART_RxCpltCallback+0x38>)
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	2b50      	cmp	r3, #80	@ 0x50
 80086dc:	d103      	bne.n	80086e6 <HAL_UART_RxCpltCallback+0x22>
        {
            JumpToBootloader(BOOT_BASE_ADDRESS);
 80086de:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80086e2:	f7ff ffcd 	bl	8008680 <JumpToBootloader>
        }

        // Restart UART interrupt reception for next byte
        HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 80086e6:	2201      	movs	r2, #1
 80086e8:	4904      	ldr	r1, [pc, #16]	@ (80086fc <HAL_UART_RxCpltCallback+0x38>)
 80086ea:	4805      	ldr	r0, [pc, #20]	@ (8008700 <HAL_UART_RxCpltCallback+0x3c>)
 80086ec:	f001 fdab 	bl	800a246 <HAL_UART_Receive_IT>
    }
}
 80086f0:	bf00      	nop
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	40004800 	.word	0x40004800
 80086fc:	20000144 	.word	0x20000144
 8008700:	200000fc 	.word	0x200000fc

08008704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800870a:	f000 fb5f 	bl	8008dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800870e:	f000 f827 	bl	8008760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008712:	f000 f8e5 	bl	80088e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8008716:	f000 f88f 	bl	8008838 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800871a:	f000 f8b7 	bl	800888c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Application started....\n");
 800871e:	480c      	ldr	r0, [pc, #48]	@ (8008750 <main+0x4c>)
 8008720:	f002 fe4c 	bl	800b3bc <puts>
  HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 8008724:	2201      	movs	r2, #1
 8008726:	490b      	ldr	r1, [pc, #44]	@ (8008754 <main+0x50>)
 8008728:	480b      	ldr	r0, [pc, #44]	@ (8008758 <main+0x54>)
 800872a:	f001 fd8c 	bl	800a246 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char key = scan_keypad();
 800872e:	f7ff ff37 	bl	80085a0 <scan_keypad>
 8008732:	4603      	mov	r3, r0
 8008734:	71fb      	strb	r3, [r7, #7]
	  if (key != '\0') {
 8008736:	79fb      	ldrb	r3, [r7, #7]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d004      	beq.n	8008746 <main+0x42>
		printf("Key Pressed: %c\r\n", key);
 800873c:	79fb      	ldrb	r3, [r7, #7]
 800873e:	4619      	mov	r1, r3
 8008740:	4806      	ldr	r0, [pc, #24]	@ (800875c <main+0x58>)
 8008742:	f002 fdd3 	bl	800b2ec <iprintf>
	  }

	  HAL_Delay(100);
 8008746:	2064      	movs	r0, #100	@ 0x64
 8008748:	f000 fbb2 	bl	8008eb0 <HAL_Delay>
  {
 800874c:	e7ef      	b.n	800872e <main+0x2a>
 800874e:	bf00      	nop
 8008750:	0800c0c0 	.word	0x0800c0c0
 8008754:	20000144 	.word	0x20000144
 8008758:	200000fc 	.word	0x200000fc
 800875c:	0800c0d8 	.word	0x0800c0d8

08008760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b094      	sub	sp, #80	@ 0x50
 8008764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008766:	f107 031c 	add.w	r3, r7, #28
 800876a:	2234      	movs	r2, #52	@ 0x34
 800876c:	2100      	movs	r1, #0
 800876e:	4618      	mov	r0, r3
 8008770:	f002 ff04 	bl	800b57c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008774:	f107 0308 	add.w	r3, r7, #8
 8008778:	2200      	movs	r2, #0
 800877a:	601a      	str	r2, [r3, #0]
 800877c:	605a      	str	r2, [r3, #4]
 800877e:	609a      	str	r2, [r3, #8]
 8008780:	60da      	str	r2, [r3, #12]
 8008782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008784:	2300      	movs	r3, #0
 8008786:	607b      	str	r3, [r7, #4]
 8008788:	4b29      	ldr	r3, [pc, #164]	@ (8008830 <SystemClock_Config+0xd0>)
 800878a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800878c:	4a28      	ldr	r2, [pc, #160]	@ (8008830 <SystemClock_Config+0xd0>)
 800878e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008792:	6413      	str	r3, [r2, #64]	@ 0x40
 8008794:	4b26      	ldr	r3, [pc, #152]	@ (8008830 <SystemClock_Config+0xd0>)
 8008796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800879c:	607b      	str	r3, [r7, #4]
 800879e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80087a0:	2300      	movs	r3, #0
 80087a2:	603b      	str	r3, [r7, #0]
 80087a4:	4b23      	ldr	r3, [pc, #140]	@ (8008834 <SystemClock_Config+0xd4>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80087ac:	4a21      	ldr	r2, [pc, #132]	@ (8008834 <SystemClock_Config+0xd4>)
 80087ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80087b2:	6013      	str	r3, [r2, #0]
 80087b4:	4b1f      	ldr	r3, [pc, #124]	@ (8008834 <SystemClock_Config+0xd4>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80087bc:	603b      	str	r3, [r7, #0]
 80087be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80087c0:	2302      	movs	r3, #2
 80087c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80087c4:	2301      	movs	r3, #1
 80087c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80087c8:	2310      	movs	r3, #16
 80087ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80087cc:	2302      	movs	r3, #2
 80087ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80087d0:	2300      	movs	r3, #0
 80087d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80087d4:	2308      	movs	r3, #8
 80087d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80087d8:	2354      	movs	r3, #84	@ 0x54
 80087da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80087dc:	2302      	movs	r3, #2
 80087de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80087e0:	2302      	movs	r3, #2
 80087e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80087e4:	2302      	movs	r3, #2
 80087e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80087e8:	f107 031c 	add.w	r3, r7, #28
 80087ec:	4618      	mov	r0, r3
 80087ee:	f001 f9b1 	bl	8009b54 <HAL_RCC_OscConfig>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80087f8:	f000 f8f6 	bl	80089e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80087fc:	230f      	movs	r3, #15
 80087fe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008800:	2302      	movs	r3, #2
 8008802:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008804:	2300      	movs	r3, #0
 8008806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008808:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800880c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800880e:	2300      	movs	r3, #0
 8008810:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008812:	f107 0308 	add.w	r3, r7, #8
 8008816:	2102      	movs	r1, #2
 8008818:	4618      	mov	r0, r3
 800881a:	f000 fed7 	bl	80095cc <HAL_RCC_ClockConfig>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8008824:	f000 f8e0 	bl	80089e8 <Error_Handler>
  }
}
 8008828:	bf00      	nop
 800882a:	3750      	adds	r7, #80	@ 0x50
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	40023800 	.word	0x40023800
 8008834:	40007000 	.word	0x40007000

08008838 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800883c:	4b11      	ldr	r3, [pc, #68]	@ (8008884 <MX_USART2_UART_Init+0x4c>)
 800883e:	4a12      	ldr	r2, [pc, #72]	@ (8008888 <MX_USART2_UART_Init+0x50>)
 8008840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008842:	4b10      	ldr	r3, [pc, #64]	@ (8008884 <MX_USART2_UART_Init+0x4c>)
 8008844:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800884a:	4b0e      	ldr	r3, [pc, #56]	@ (8008884 <MX_USART2_UART_Init+0x4c>)
 800884c:	2200      	movs	r2, #0
 800884e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008850:	4b0c      	ldr	r3, [pc, #48]	@ (8008884 <MX_USART2_UART_Init+0x4c>)
 8008852:	2200      	movs	r2, #0
 8008854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008856:	4b0b      	ldr	r3, [pc, #44]	@ (8008884 <MX_USART2_UART_Init+0x4c>)
 8008858:	2200      	movs	r2, #0
 800885a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800885c:	4b09      	ldr	r3, [pc, #36]	@ (8008884 <MX_USART2_UART_Init+0x4c>)
 800885e:	220c      	movs	r2, #12
 8008860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008862:	4b08      	ldr	r3, [pc, #32]	@ (8008884 <MX_USART2_UART_Init+0x4c>)
 8008864:	2200      	movs	r2, #0
 8008866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008868:	4b06      	ldr	r3, [pc, #24]	@ (8008884 <MX_USART2_UART_Init+0x4c>)
 800886a:	2200      	movs	r2, #0
 800886c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800886e:	4805      	ldr	r0, [pc, #20]	@ (8008884 <MX_USART2_UART_Init+0x4c>)
 8008870:	f001 fc0e 	bl	800a090 <HAL_UART_Init>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800887a:	f000 f8b5 	bl	80089e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800887e:	bf00      	nop
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	200000b4 	.word	0x200000b4
 8008888:	40004400 	.word	0x40004400

0800888c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008890:	4b11      	ldr	r3, [pc, #68]	@ (80088d8 <MX_USART3_UART_Init+0x4c>)
 8008892:	4a12      	ldr	r2, [pc, #72]	@ (80088dc <MX_USART3_UART_Init+0x50>)
 8008894:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8008896:	4b10      	ldr	r3, [pc, #64]	@ (80088d8 <MX_USART3_UART_Init+0x4c>)
 8008898:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800889c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800889e:	4b0e      	ldr	r3, [pc, #56]	@ (80088d8 <MX_USART3_UART_Init+0x4c>)
 80088a0:	2200      	movs	r2, #0
 80088a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80088a4:	4b0c      	ldr	r3, [pc, #48]	@ (80088d8 <MX_USART3_UART_Init+0x4c>)
 80088a6:	2200      	movs	r2, #0
 80088a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80088aa:	4b0b      	ldr	r3, [pc, #44]	@ (80088d8 <MX_USART3_UART_Init+0x4c>)
 80088ac:	2200      	movs	r2, #0
 80088ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80088b0:	4b09      	ldr	r3, [pc, #36]	@ (80088d8 <MX_USART3_UART_Init+0x4c>)
 80088b2:	220c      	movs	r2, #12
 80088b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80088b6:	4b08      	ldr	r3, [pc, #32]	@ (80088d8 <MX_USART3_UART_Init+0x4c>)
 80088b8:	2200      	movs	r2, #0
 80088ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80088bc:	4b06      	ldr	r3, [pc, #24]	@ (80088d8 <MX_USART3_UART_Init+0x4c>)
 80088be:	2200      	movs	r2, #0
 80088c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80088c2:	4805      	ldr	r0, [pc, #20]	@ (80088d8 <MX_USART3_UART_Init+0x4c>)
 80088c4:	f001 fbe4 	bl	800a090 <HAL_UART_Init>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d001      	beq.n	80088d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80088ce:	f000 f88b 	bl	80089e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80088d2:	bf00      	nop
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	200000fc 	.word	0x200000fc
 80088dc:	40004800 	.word	0x40004800

080088e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b088      	sub	sp, #32
 80088e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088e6:	f107 030c 	add.w	r3, r7, #12
 80088ea:	2200      	movs	r2, #0
 80088ec:	601a      	str	r2, [r3, #0]
 80088ee:	605a      	str	r2, [r3, #4]
 80088f0:	609a      	str	r2, [r3, #8]
 80088f2:	60da      	str	r2, [r3, #12]
 80088f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80088f6:	2300      	movs	r3, #0
 80088f8:	60bb      	str	r3, [r7, #8]
 80088fa:	4b2f      	ldr	r3, [pc, #188]	@ (80089b8 <MX_GPIO_Init+0xd8>)
 80088fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088fe:	4a2e      	ldr	r2, [pc, #184]	@ (80089b8 <MX_GPIO_Init+0xd8>)
 8008900:	f043 0301 	orr.w	r3, r3, #1
 8008904:	6313      	str	r3, [r2, #48]	@ 0x30
 8008906:	4b2c      	ldr	r3, [pc, #176]	@ (80089b8 <MX_GPIO_Init+0xd8>)
 8008908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800890a:	f003 0301 	and.w	r3, r3, #1
 800890e:	60bb      	str	r3, [r7, #8]
 8008910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008912:	2300      	movs	r3, #0
 8008914:	607b      	str	r3, [r7, #4]
 8008916:	4b28      	ldr	r3, [pc, #160]	@ (80089b8 <MX_GPIO_Init+0xd8>)
 8008918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800891a:	4a27      	ldr	r2, [pc, #156]	@ (80089b8 <MX_GPIO_Init+0xd8>)
 800891c:	f043 0304 	orr.w	r3, r3, #4
 8008920:	6313      	str	r3, [r2, #48]	@ 0x30
 8008922:	4b25      	ldr	r3, [pc, #148]	@ (80089b8 <MX_GPIO_Init+0xd8>)
 8008924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008926:	f003 0304 	and.w	r3, r3, #4
 800892a:	607b      	str	r3, [r7, #4]
 800892c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800892e:	2300      	movs	r3, #0
 8008930:	603b      	str	r3, [r7, #0]
 8008932:	4b21      	ldr	r3, [pc, #132]	@ (80089b8 <MX_GPIO_Init+0xd8>)
 8008934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008936:	4a20      	ldr	r2, [pc, #128]	@ (80089b8 <MX_GPIO_Init+0xd8>)
 8008938:	f043 0302 	orr.w	r3, r3, #2
 800893c:	6313      	str	r3, [r2, #48]	@ 0x30
 800893e:	4b1e      	ldr	r3, [pc, #120]	@ (80089b8 <MX_GPIO_Init+0xd8>)
 8008940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008942:	f003 0302 	and.w	r3, r3, #2
 8008946:	603b      	str	r3, [r7, #0]
 8008948:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800894a:	2200      	movs	r2, #0
 800894c:	2120      	movs	r1, #32
 800894e:	481b      	ldr	r0, [pc, #108]	@ (80089bc <MX_GPIO_Init+0xdc>)
 8008950:	f000 fe22 	bl	8009598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KEYPAD_R1_Pin|KEYPAD_R2_Pin|KEYPAD_R3_Pin|KEYPAD_R4_Pin, GPIO_PIN_SET);
 8008954:	2201      	movs	r2, #1
 8008956:	210f      	movs	r1, #15
 8008958:	4819      	ldr	r0, [pc, #100]	@ (80089c0 <MX_GPIO_Init+0xe0>)
 800895a:	f000 fe1d 	bl	8009598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800895e:	2320      	movs	r3, #32
 8008960:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008962:	2301      	movs	r3, #1
 8008964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008966:	2300      	movs	r3, #0
 8008968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800896a:	2300      	movs	r3, #0
 800896c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800896e:	f107 030c 	add.w	r3, r7, #12
 8008972:	4619      	mov	r1, r3
 8008974:	4811      	ldr	r0, [pc, #68]	@ (80089bc <MX_GPIO_Init+0xdc>)
 8008976:	f000 fc63 	bl	8009240 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_R1_Pin KEYPAD_R2_Pin KEYPAD_R3_Pin KEYPAD_R4_Pin */
  GPIO_InitStruct.Pin = KEYPAD_R1_Pin|KEYPAD_R2_Pin|KEYPAD_R3_Pin|KEYPAD_R4_Pin;
 800897a:	230f      	movs	r3, #15
 800897c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800897e:	2301      	movs	r3, #1
 8008980:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008982:	2300      	movs	r3, #0
 8008984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008986:	2300      	movs	r3, #0
 8008988:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800898a:	f107 030c 	add.w	r3, r7, #12
 800898e:	4619      	mov	r1, r3
 8008990:	480b      	ldr	r0, [pc, #44]	@ (80089c0 <MX_GPIO_Init+0xe0>)
 8008992:	f000 fc55 	bl	8009240 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_C1_Pin KEYPAD_C2_Pin KEYPAD_C3_Pin KEYPAD_C4_Pin */
  GPIO_InitStruct.Pin = KEYPAD_C1_Pin|KEYPAD_C2_Pin|KEYPAD_C3_Pin|KEYPAD_C4_Pin;
 8008996:	23f0      	movs	r3, #240	@ 0xf0
 8008998:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800899a:	2300      	movs	r3, #0
 800899c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800899e:	2301      	movs	r3, #1
 80089a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089a2:	f107 030c 	add.w	r3, r7, #12
 80089a6:	4619      	mov	r1, r3
 80089a8:	4805      	ldr	r0, [pc, #20]	@ (80089c0 <MX_GPIO_Init+0xe0>)
 80089aa:	f000 fc49 	bl	8009240 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80089ae:	bf00      	nop
 80089b0:	3720      	adds	r7, #32
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	40023800 	.word	0x40023800
 80089bc:	40020000 	.word	0x40020000
 80089c0:	40020400 	.word	0x40020400

080089c4 <__io_putchar>:

/* USER CODE BEGIN 4 */
#define PRINTF   int __io_putchar(int ch)
PRINTF
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80089cc:	1d39      	adds	r1, r7, #4
 80089ce:	f04f 33ff 	mov.w	r3, #4294967295
 80089d2:	2201      	movs	r2, #1
 80089d4:	4803      	ldr	r0, [pc, #12]	@ (80089e4 <__io_putchar+0x20>)
 80089d6:	f001 fbab 	bl	800a130 <HAL_UART_Transmit>
	return ch;
 80089da:	687b      	ldr	r3, [r7, #4]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	200000b4 	.word	0x200000b4

080089e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80089e8:	b480      	push	{r7}
 80089ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80089ec:	b672      	cpsid	i
}
 80089ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80089f0:	bf00      	nop
 80089f2:	e7fd      	b.n	80089f0 <Error_Handler+0x8>

080089f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80089fa:	2300      	movs	r3, #0
 80089fc:	607b      	str	r3, [r7, #4]
 80089fe:	4b10      	ldr	r3, [pc, #64]	@ (8008a40 <HAL_MspInit+0x4c>)
 8008a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a02:	4a0f      	ldr	r2, [pc, #60]	@ (8008a40 <HAL_MspInit+0x4c>)
 8008a04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8008a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008a40 <HAL_MspInit+0x4c>)
 8008a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a12:	607b      	str	r3, [r7, #4]
 8008a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008a16:	2300      	movs	r3, #0
 8008a18:	603b      	str	r3, [r7, #0]
 8008a1a:	4b09      	ldr	r3, [pc, #36]	@ (8008a40 <HAL_MspInit+0x4c>)
 8008a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a1e:	4a08      	ldr	r2, [pc, #32]	@ (8008a40 <HAL_MspInit+0x4c>)
 8008a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a24:	6413      	str	r3, [r2, #64]	@ 0x40
 8008a26:	4b06      	ldr	r3, [pc, #24]	@ (8008a40 <HAL_MspInit+0x4c>)
 8008a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a2e:	603b      	str	r3, [r7, #0]
 8008a30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008a32:	bf00      	nop
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	40023800 	.word	0x40023800

08008a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b08c      	sub	sp, #48	@ 0x30
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a4c:	f107 031c 	add.w	r3, r7, #28
 8008a50:	2200      	movs	r2, #0
 8008a52:	601a      	str	r2, [r3, #0]
 8008a54:	605a      	str	r2, [r3, #4]
 8008a56:	609a      	str	r2, [r3, #8]
 8008a58:	60da      	str	r2, [r3, #12]
 8008a5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a45      	ldr	r2, [pc, #276]	@ (8008b78 <HAL_UART_MspInit+0x134>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d12c      	bne.n	8008ac0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008a66:	2300      	movs	r3, #0
 8008a68:	61bb      	str	r3, [r7, #24]
 8008a6a:	4b44      	ldr	r3, [pc, #272]	@ (8008b7c <HAL_UART_MspInit+0x138>)
 8008a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a6e:	4a43      	ldr	r2, [pc, #268]	@ (8008b7c <HAL_UART_MspInit+0x138>)
 8008a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8008a76:	4b41      	ldr	r3, [pc, #260]	@ (8008b7c <HAL_UART_MspInit+0x138>)
 8008a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a7e:	61bb      	str	r3, [r7, #24]
 8008a80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a82:	2300      	movs	r3, #0
 8008a84:	617b      	str	r3, [r7, #20]
 8008a86:	4b3d      	ldr	r3, [pc, #244]	@ (8008b7c <HAL_UART_MspInit+0x138>)
 8008a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a8a:	4a3c      	ldr	r2, [pc, #240]	@ (8008b7c <HAL_UART_MspInit+0x138>)
 8008a8c:	f043 0301 	orr.w	r3, r3, #1
 8008a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8008a92:	4b3a      	ldr	r3, [pc, #232]	@ (8008b7c <HAL_UART_MspInit+0x138>)
 8008a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	617b      	str	r3, [r7, #20]
 8008a9c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008a9e:	230c      	movs	r3, #12
 8008aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008aa2:	2302      	movs	r3, #2
 8008aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008aae:	2307      	movs	r3, #7
 8008ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ab2:	f107 031c 	add.w	r3, r7, #28
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	4831      	ldr	r0, [pc, #196]	@ (8008b80 <HAL_UART_MspInit+0x13c>)
 8008aba:	f000 fbc1 	bl	8009240 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008abe:	e057      	b.n	8008b70 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a2f      	ldr	r2, [pc, #188]	@ (8008b84 <HAL_UART_MspInit+0x140>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d152      	bne.n	8008b70 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8008aca:	2300      	movs	r3, #0
 8008acc:	613b      	str	r3, [r7, #16]
 8008ace:	4b2b      	ldr	r3, [pc, #172]	@ (8008b7c <HAL_UART_MspInit+0x138>)
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad2:	4a2a      	ldr	r2, [pc, #168]	@ (8008b7c <HAL_UART_MspInit+0x138>)
 8008ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8008ada:	4b28      	ldr	r3, [pc, #160]	@ (8008b7c <HAL_UART_MspInit+0x138>)
 8008adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ade:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008ae2:	613b      	str	r3, [r7, #16]
 8008ae4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	60fb      	str	r3, [r7, #12]
 8008aea:	4b24      	ldr	r3, [pc, #144]	@ (8008b7c <HAL_UART_MspInit+0x138>)
 8008aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aee:	4a23      	ldr	r2, [pc, #140]	@ (8008b7c <HAL_UART_MspInit+0x138>)
 8008af0:	f043 0304 	orr.w	r3, r3, #4
 8008af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8008af6:	4b21      	ldr	r3, [pc, #132]	@ (8008b7c <HAL_UART_MspInit+0x138>)
 8008af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008afa:	f003 0304 	and.w	r3, r3, #4
 8008afe:	60fb      	str	r3, [r7, #12]
 8008b00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b02:	2300      	movs	r3, #0
 8008b04:	60bb      	str	r3, [r7, #8]
 8008b06:	4b1d      	ldr	r3, [pc, #116]	@ (8008b7c <HAL_UART_MspInit+0x138>)
 8008b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8008b7c <HAL_UART_MspInit+0x138>)
 8008b0c:	f043 0302 	orr.w	r3, r3, #2
 8008b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8008b12:	4b1a      	ldr	r3, [pc, #104]	@ (8008b7c <HAL_UART_MspInit+0x138>)
 8008b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b16:	f003 0302 	and.w	r3, r3, #2
 8008b1a:	60bb      	str	r3, [r7, #8]
 8008b1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8008b1e:	2320      	movs	r3, #32
 8008b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b22:	2302      	movs	r3, #2
 8008b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b26:	2300      	movs	r3, #0
 8008b28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008b2e:	2307      	movs	r3, #7
 8008b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b32:	f107 031c 	add.w	r3, r7, #28
 8008b36:	4619      	mov	r1, r3
 8008b38:	4813      	ldr	r0, [pc, #76]	@ (8008b88 <HAL_UART_MspInit+0x144>)
 8008b3a:	f000 fb81 	bl	8009240 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008b3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b44:	2302      	movs	r3, #2
 8008b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008b50:	2307      	movs	r3, #7
 8008b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b54:	f107 031c 	add.w	r3, r7, #28
 8008b58:	4619      	mov	r1, r3
 8008b5a:	480c      	ldr	r0, [pc, #48]	@ (8008b8c <HAL_UART_MspInit+0x148>)
 8008b5c:	f000 fb70 	bl	8009240 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8008b60:	2200      	movs	r2, #0
 8008b62:	2100      	movs	r1, #0
 8008b64:	2027      	movs	r0, #39	@ 0x27
 8008b66:	f000 faa2 	bl	80090ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8008b6a:	2027      	movs	r0, #39	@ 0x27
 8008b6c:	f000 fabb 	bl	80090e6 <HAL_NVIC_EnableIRQ>
}
 8008b70:	bf00      	nop
 8008b72:	3730      	adds	r7, #48	@ 0x30
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	40004400 	.word	0x40004400
 8008b7c:	40023800 	.word	0x40023800
 8008b80:	40020000 	.word	0x40020000
 8008b84:	40004800 	.word	0x40004800
 8008b88:	40020800 	.word	0x40020800
 8008b8c:	40020400 	.word	0x40020400

08008b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008b90:	b480      	push	{r7}
 8008b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008b94:	bf00      	nop
 8008b96:	e7fd      	b.n	8008b94 <NMI_Handler+0x4>

08008b98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008b9c:	bf00      	nop
 8008b9e:	e7fd      	b.n	8008b9c <HardFault_Handler+0x4>

08008ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008ba4:	bf00      	nop
 8008ba6:	e7fd      	b.n	8008ba4 <MemManage_Handler+0x4>

08008ba8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008bac:	bf00      	nop
 8008bae:	e7fd      	b.n	8008bac <BusFault_Handler+0x4>

08008bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008bb4:	bf00      	nop
 8008bb6:	e7fd      	b.n	8008bb4 <UsageFault_Handler+0x4>

08008bb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008bbc:	bf00      	nop
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008bca:	bf00      	nop
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008bd8:	bf00      	nop
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008be6:	f000 f943 	bl	8008e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008bea:	bf00      	nop
 8008bec:	bd80      	pop	{r7, pc}
	...

08008bf0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008bf4:	4802      	ldr	r0, [pc, #8]	@ (8008c00 <USART3_IRQHandler+0x10>)
 8008bf6:	f001 fb4b 	bl	800a290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8008bfa:	bf00      	nop
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	200000fc 	.word	0x200000fc

08008c04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c10:	2300      	movs	r3, #0
 8008c12:	617b      	str	r3, [r7, #20]
 8008c14:	e00a      	b.n	8008c2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008c16:	f3af 8000 	nop.w
 8008c1a:	4601      	mov	r1, r0
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	1c5a      	adds	r2, r3, #1
 8008c20:	60ba      	str	r2, [r7, #8]
 8008c22:	b2ca      	uxtb	r2, r1
 8008c24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	617b      	str	r3, [r7, #20]
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	dbf0      	blt.n	8008c16 <_read+0x12>
  }

  return len;
 8008c34:	687b      	ldr	r3, [r7, #4]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3718      	adds	r7, #24
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b086      	sub	sp, #24
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	60f8      	str	r0, [r7, #12]
 8008c46:	60b9      	str	r1, [r7, #8]
 8008c48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	617b      	str	r3, [r7, #20]
 8008c4e:	e009      	b.n	8008c64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	1c5a      	adds	r2, r3, #1
 8008c54:	60ba      	str	r2, [r7, #8]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7ff feb3 	bl	80089c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	3301      	adds	r3, #1
 8008c62:	617b      	str	r3, [r7, #20]
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	dbf1      	blt.n	8008c50 <_write+0x12>
  }
  return len;
 8008c6c:	687b      	ldr	r3, [r7, #4]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3718      	adds	r7, #24
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <_close>:

int _close(int file)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b083      	sub	sp, #12
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008c7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	370c      	adds	r7, #12
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b083      	sub	sp, #12
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008c9e:	605a      	str	r2, [r3, #4]
  return 0;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	370c      	adds	r7, #12
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <_isatty>:

int _isatty(int file)
{
 8008cae:	b480      	push	{r7}
 8008cb0:	b083      	sub	sp, #12
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008cb6:	2301      	movs	r3, #1
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
	...

08008ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008ce8:	4a14      	ldr	r2, [pc, #80]	@ (8008d3c <_sbrk+0x5c>)
 8008cea:	4b15      	ldr	r3, [pc, #84]	@ (8008d40 <_sbrk+0x60>)
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008cf4:	4b13      	ldr	r3, [pc, #76]	@ (8008d44 <_sbrk+0x64>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d102      	bne.n	8008d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008cfc:	4b11      	ldr	r3, [pc, #68]	@ (8008d44 <_sbrk+0x64>)
 8008cfe:	4a12      	ldr	r2, [pc, #72]	@ (8008d48 <_sbrk+0x68>)
 8008d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008d02:	4b10      	ldr	r3, [pc, #64]	@ (8008d44 <_sbrk+0x64>)
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4413      	add	r3, r2
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d207      	bcs.n	8008d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008d10:	f002 fc82 	bl	800b618 <__errno>
 8008d14:	4603      	mov	r3, r0
 8008d16:	220c      	movs	r2, #12
 8008d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d1e:	e009      	b.n	8008d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008d20:	4b08      	ldr	r3, [pc, #32]	@ (8008d44 <_sbrk+0x64>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008d26:	4b07      	ldr	r3, [pc, #28]	@ (8008d44 <_sbrk+0x64>)
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	4a05      	ldr	r2, [pc, #20]	@ (8008d44 <_sbrk+0x64>)
 8008d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008d32:	68fb      	ldr	r3, [r7, #12]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3718      	adds	r7, #24
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	20020000 	.word	0x20020000
 8008d40:	00000400 	.word	0x00000400
 8008d44:	20000148 	.word	0x20000148
 8008d48:	200002a0 	.word	0x200002a0

08008d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008d50:	4b07      	ldr	r3, [pc, #28]	@ (8008d70 <SystemInit+0x24>)
 8008d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d56:	4a06      	ldr	r2, [pc, #24]	@ (8008d70 <SystemInit+0x24>)
 8008d58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008d5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8008d60:	4b03      	ldr	r3, [pc, #12]	@ (8008d70 <SystemInit+0x24>)
 8008d62:	4a04      	ldr	r2, [pc, #16]	@ (8008d74 <SystemInit+0x28>)
 8008d64:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008d66:	bf00      	nop
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	e000ed00 	.word	0xe000ed00
 8008d74:	08008000 	.word	0x08008000

08008d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008d78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008db0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008d7c:	f7ff ffe6 	bl	8008d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008d80:	480c      	ldr	r0, [pc, #48]	@ (8008db4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008d82:	490d      	ldr	r1, [pc, #52]	@ (8008db8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008d84:	4a0d      	ldr	r2, [pc, #52]	@ (8008dbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008d88:	e002      	b.n	8008d90 <LoopCopyDataInit>

08008d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008d8e:	3304      	adds	r3, #4

08008d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008d94:	d3f9      	bcc.n	8008d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008d96:	4a0a      	ldr	r2, [pc, #40]	@ (8008dc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008d98:	4c0a      	ldr	r4, [pc, #40]	@ (8008dc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008d9c:	e001      	b.n	8008da2 <LoopFillZerobss>

08008d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008da0:	3204      	adds	r2, #4

08008da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008da4:	d3fb      	bcc.n	8008d9e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8008da6:	f002 fc3d 	bl	800b624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008daa:	f7ff fcab 	bl	8008704 <main>
  bx  lr    
 8008dae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008db0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008db8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8008dbc:	0800c158 	.word	0x0800c158
  ldr r2, =_sbss
 8008dc0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8008dc4:	2000029c 	.word	0x2000029c

08008dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008dc8:	e7fe      	b.n	8008dc8 <ADC_IRQHandler>
	...

08008dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8008e0c <HAL_Init+0x40>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8008e0c <HAL_Init+0x40>)
 8008dd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8008e0c <HAL_Init+0x40>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a0a      	ldr	r2, [pc, #40]	@ (8008e0c <HAL_Init+0x40>)
 8008de2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008de8:	4b08      	ldr	r3, [pc, #32]	@ (8008e0c <HAL_Init+0x40>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a07      	ldr	r2, [pc, #28]	@ (8008e0c <HAL_Init+0x40>)
 8008dee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008df4:	2003      	movs	r0, #3
 8008df6:	f000 f94f 	bl	8009098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008dfa:	200f      	movs	r0, #15
 8008dfc:	f000 f808 	bl	8008e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008e00:	f7ff fdf8 	bl	80089f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	40023c00 	.word	0x40023c00

08008e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008e18:	4b12      	ldr	r3, [pc, #72]	@ (8008e64 <HAL_InitTick+0x54>)
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	4b12      	ldr	r3, [pc, #72]	@ (8008e68 <HAL_InitTick+0x58>)
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	4619      	mov	r1, r3
 8008e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 f967 	bl	8009102 <HAL_SYSTICK_Config>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e00e      	b.n	8008e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2b0f      	cmp	r3, #15
 8008e42:	d80a      	bhi.n	8008e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008e44:	2200      	movs	r2, #0
 8008e46:	6879      	ldr	r1, [r7, #4]
 8008e48:	f04f 30ff 	mov.w	r0, #4294967295
 8008e4c:	f000 f92f 	bl	80090ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008e50:	4a06      	ldr	r2, [pc, #24]	@ (8008e6c <HAL_InitTick+0x5c>)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	e000      	b.n	8008e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3708      	adds	r7, #8
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	20000030 	.word	0x20000030
 8008e68:	20000038 	.word	0x20000038
 8008e6c:	20000034 	.word	0x20000034

08008e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008e70:	b480      	push	{r7}
 8008e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008e74:	4b06      	ldr	r3, [pc, #24]	@ (8008e90 <HAL_IncTick+0x20>)
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	461a      	mov	r2, r3
 8008e7a:	4b06      	ldr	r3, [pc, #24]	@ (8008e94 <HAL_IncTick+0x24>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4413      	add	r3, r2
 8008e80:	4a04      	ldr	r2, [pc, #16]	@ (8008e94 <HAL_IncTick+0x24>)
 8008e82:	6013      	str	r3, [r2, #0]
}
 8008e84:	bf00      	nop
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	20000038 	.word	0x20000038
 8008e94:	2000014c 	.word	0x2000014c

08008e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8008e9c:	4b03      	ldr	r3, [pc, #12]	@ (8008eac <HAL_GetTick+0x14>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	2000014c 	.word	0x2000014c

08008eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008eb8:	f7ff ffee 	bl	8008e98 <HAL_GetTick>
 8008ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec8:	d005      	beq.n	8008ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008eca:	4b0a      	ldr	r3, [pc, #40]	@ (8008ef4 <HAL_Delay+0x44>)
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008ed6:	bf00      	nop
 8008ed8:	f7ff ffde 	bl	8008e98 <HAL_GetTick>
 8008edc:	4602      	mov	r2, r0
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	68fa      	ldr	r2, [r7, #12]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d8f7      	bhi.n	8008ed8 <HAL_Delay+0x28>
  {
  }
}
 8008ee8:	bf00      	nop
 8008eea:	bf00      	nop
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	20000038 	.word	0x20000038

08008ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f003 0307 	and.w	r3, r3, #7
 8008f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f08:	4b0c      	ldr	r3, [pc, #48]	@ (8008f3c <__NVIC_SetPriorityGrouping+0x44>)
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008f14:	4013      	ands	r3, r2
 8008f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f2a:	4a04      	ldr	r2, [pc, #16]	@ (8008f3c <__NVIC_SetPriorityGrouping+0x44>)
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	60d3      	str	r3, [r2, #12]
}
 8008f30:	bf00      	nop
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr
 8008f3c:	e000ed00 	.word	0xe000ed00

08008f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008f40:	b480      	push	{r7}
 8008f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f44:	4b04      	ldr	r3, [pc, #16]	@ (8008f58 <__NVIC_GetPriorityGrouping+0x18>)
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	0a1b      	lsrs	r3, r3, #8
 8008f4a:	f003 0307 	and.w	r3, r3, #7
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr
 8008f58:	e000ed00 	.word	0xe000ed00

08008f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	4603      	mov	r3, r0
 8008f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	db0b      	blt.n	8008f86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f6e:	79fb      	ldrb	r3, [r7, #7]
 8008f70:	f003 021f 	and.w	r2, r3, #31
 8008f74:	4907      	ldr	r1, [pc, #28]	@ (8008f94 <__NVIC_EnableIRQ+0x38>)
 8008f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f7a:	095b      	lsrs	r3, r3, #5
 8008f7c:	2001      	movs	r0, #1
 8008f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8008f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008f86:	bf00      	nop
 8008f88:	370c      	adds	r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	e000e100 	.word	0xe000e100

08008f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	6039      	str	r1, [r7, #0]
 8008fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	db0a      	blt.n	8008fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	b2da      	uxtb	r2, r3
 8008fb0:	490c      	ldr	r1, [pc, #48]	@ (8008fe4 <__NVIC_SetPriority+0x4c>)
 8008fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fb6:	0112      	lsls	r2, r2, #4
 8008fb8:	b2d2      	uxtb	r2, r2
 8008fba:	440b      	add	r3, r1
 8008fbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008fc0:	e00a      	b.n	8008fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	b2da      	uxtb	r2, r3
 8008fc6:	4908      	ldr	r1, [pc, #32]	@ (8008fe8 <__NVIC_SetPriority+0x50>)
 8008fc8:	79fb      	ldrb	r3, [r7, #7]
 8008fca:	f003 030f 	and.w	r3, r3, #15
 8008fce:	3b04      	subs	r3, #4
 8008fd0:	0112      	lsls	r2, r2, #4
 8008fd2:	b2d2      	uxtb	r2, r2
 8008fd4:	440b      	add	r3, r1
 8008fd6:	761a      	strb	r2, [r3, #24]
}
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr
 8008fe4:	e000e100 	.word	0xe000e100
 8008fe8:	e000ed00 	.word	0xe000ed00

08008fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b089      	sub	sp, #36	@ 0x24
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f003 0307 	and.w	r3, r3, #7
 8008ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	f1c3 0307 	rsb	r3, r3, #7
 8009006:	2b04      	cmp	r3, #4
 8009008:	bf28      	it	cs
 800900a:	2304      	movcs	r3, #4
 800900c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	3304      	adds	r3, #4
 8009012:	2b06      	cmp	r3, #6
 8009014:	d902      	bls.n	800901c <NVIC_EncodePriority+0x30>
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	3b03      	subs	r3, #3
 800901a:	e000      	b.n	800901e <NVIC_EncodePriority+0x32>
 800901c:	2300      	movs	r3, #0
 800901e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009020:	f04f 32ff 	mov.w	r2, #4294967295
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	fa02 f303 	lsl.w	r3, r2, r3
 800902a:	43da      	mvns	r2, r3
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	401a      	ands	r2, r3
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009034:	f04f 31ff 	mov.w	r1, #4294967295
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	fa01 f303 	lsl.w	r3, r1, r3
 800903e:	43d9      	mvns	r1, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009044:	4313      	orrs	r3, r2
         );
}
 8009046:	4618      	mov	r0, r3
 8009048:	3724      	adds	r7, #36	@ 0x24
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
	...

08009054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	3b01      	subs	r3, #1
 8009060:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009064:	d301      	bcc.n	800906a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009066:	2301      	movs	r3, #1
 8009068:	e00f      	b.n	800908a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800906a:	4a0a      	ldr	r2, [pc, #40]	@ (8009094 <SysTick_Config+0x40>)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	3b01      	subs	r3, #1
 8009070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009072:	210f      	movs	r1, #15
 8009074:	f04f 30ff 	mov.w	r0, #4294967295
 8009078:	f7ff ff8e 	bl	8008f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800907c:	4b05      	ldr	r3, [pc, #20]	@ (8009094 <SysTick_Config+0x40>)
 800907e:	2200      	movs	r2, #0
 8009080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009082:	4b04      	ldr	r3, [pc, #16]	@ (8009094 <SysTick_Config+0x40>)
 8009084:	2207      	movs	r2, #7
 8009086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	e000e010 	.word	0xe000e010

08009098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7ff ff29 	bl	8008ef8 <__NVIC_SetPriorityGrouping>
}
 80090a6:	bf00      	nop
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b086      	sub	sp, #24
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	4603      	mov	r3, r0
 80090b6:	60b9      	str	r1, [r7, #8]
 80090b8:	607a      	str	r2, [r7, #4]
 80090ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80090bc:	2300      	movs	r3, #0
 80090be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80090c0:	f7ff ff3e 	bl	8008f40 <__NVIC_GetPriorityGrouping>
 80090c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	68b9      	ldr	r1, [r7, #8]
 80090ca:	6978      	ldr	r0, [r7, #20]
 80090cc:	f7ff ff8e 	bl	8008fec <NVIC_EncodePriority>
 80090d0:	4602      	mov	r2, r0
 80090d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090d6:	4611      	mov	r1, r2
 80090d8:	4618      	mov	r0, r3
 80090da:	f7ff ff5d 	bl	8008f98 <__NVIC_SetPriority>
}
 80090de:	bf00      	nop
 80090e0:	3718      	adds	r7, #24
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b082      	sub	sp, #8
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	4603      	mov	r3, r0
 80090ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80090f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7ff ff31 	bl	8008f5c <__NVIC_EnableIRQ>
}
 80090fa:	bf00      	nop
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b082      	sub	sp, #8
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7ff ffa2 	bl	8009054 <SysTick_Config>
 8009110:	4603      	mov	r3, r0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b084      	sub	sp, #16
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009126:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009128:	f7ff feb6 	bl	8008e98 <HAL_GetTick>
 800912c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009134:	b2db      	uxtb	r3, r3
 8009136:	2b02      	cmp	r3, #2
 8009138:	d008      	beq.n	800914c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2280      	movs	r2, #128	@ 0x80
 800913e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e052      	b.n	80091f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f022 0216 	bic.w	r2, r2, #22
 800915a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	695a      	ldr	r2, [r3, #20]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800916a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009170:	2b00      	cmp	r3, #0
 8009172:	d103      	bne.n	800917c <HAL_DMA_Abort+0x62>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009178:	2b00      	cmp	r3, #0
 800917a:	d007      	beq.n	800918c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f022 0208 	bic.w	r2, r2, #8
 800918a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f022 0201 	bic.w	r2, r2, #1
 800919a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800919c:	e013      	b.n	80091c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800919e:	f7ff fe7b 	bl	8008e98 <HAL_GetTick>
 80091a2:	4602      	mov	r2, r0
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	1ad3      	subs	r3, r2, r3
 80091a8:	2b05      	cmp	r3, #5
 80091aa:	d90c      	bls.n	80091c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2220      	movs	r2, #32
 80091b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2203      	movs	r2, #3
 80091b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80091c2:	2303      	movs	r3, #3
 80091c4:	e015      	b.n	80091f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0301 	and.w	r3, r3, #1
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1e4      	bne.n	800919e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091d8:	223f      	movs	r2, #63	@ 0x3f
 80091da:	409a      	lsls	r2, r3
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80091fa:	b480      	push	{r7}
 80091fc:	b083      	sub	sp, #12
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2b02      	cmp	r3, #2
 800920c:	d004      	beq.n	8009218 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2280      	movs	r2, #128	@ 0x80
 8009212:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e00c      	b.n	8009232 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2205      	movs	r2, #5
 800921c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f022 0201 	bic.w	r2, r2, #1
 800922e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	370c      	adds	r7, #12
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr
	...

08009240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009240:	b480      	push	{r7}
 8009242:	b089      	sub	sp, #36	@ 0x24
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800924a:	2300      	movs	r3, #0
 800924c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800924e:	2300      	movs	r3, #0
 8009250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009252:	2300      	movs	r3, #0
 8009254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009256:	2300      	movs	r3, #0
 8009258:	61fb      	str	r3, [r7, #28]
 800925a:	e165      	b.n	8009528 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800925c:	2201      	movs	r2, #1
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	fa02 f303 	lsl.w	r3, r2, r3
 8009264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	4013      	ands	r3, r2
 800926e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009270:	693a      	ldr	r2, [r7, #16]
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	429a      	cmp	r2, r3
 8009276:	f040 8154 	bne.w	8009522 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	f003 0303 	and.w	r3, r3, #3
 8009282:	2b01      	cmp	r3, #1
 8009284:	d005      	beq.n	8009292 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800928e:	2b02      	cmp	r3, #2
 8009290:	d130      	bne.n	80092f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	005b      	lsls	r3, r3, #1
 800929c:	2203      	movs	r2, #3
 800929e:	fa02 f303 	lsl.w	r3, r2, r3
 80092a2:	43db      	mvns	r3, r3
 80092a4:	69ba      	ldr	r2, [r7, #24]
 80092a6:	4013      	ands	r3, r2
 80092a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	68da      	ldr	r2, [r3, #12]
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	005b      	lsls	r3, r3, #1
 80092b2:	fa02 f303 	lsl.w	r3, r2, r3
 80092b6:	69ba      	ldr	r2, [r7, #24]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	69ba      	ldr	r2, [r7, #24]
 80092c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80092c8:	2201      	movs	r2, #1
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	fa02 f303 	lsl.w	r3, r2, r3
 80092d0:	43db      	mvns	r3, r3
 80092d2:	69ba      	ldr	r2, [r7, #24]
 80092d4:	4013      	ands	r3, r2
 80092d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	091b      	lsrs	r3, r3, #4
 80092de:	f003 0201 	and.w	r2, r3, #1
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	fa02 f303 	lsl.w	r3, r2, r3
 80092e8:	69ba      	ldr	r2, [r7, #24]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	69ba      	ldr	r2, [r7, #24]
 80092f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	f003 0303 	and.w	r3, r3, #3
 80092fc:	2b03      	cmp	r3, #3
 80092fe:	d017      	beq.n	8009330 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	005b      	lsls	r3, r3, #1
 800930a:	2203      	movs	r2, #3
 800930c:	fa02 f303 	lsl.w	r3, r2, r3
 8009310:	43db      	mvns	r3, r3
 8009312:	69ba      	ldr	r2, [r7, #24]
 8009314:	4013      	ands	r3, r2
 8009316:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	689a      	ldr	r2, [r3, #8]
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	005b      	lsls	r3, r3, #1
 8009320:	fa02 f303 	lsl.w	r3, r2, r3
 8009324:	69ba      	ldr	r2, [r7, #24]
 8009326:	4313      	orrs	r3, r2
 8009328:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	69ba      	ldr	r2, [r7, #24]
 800932e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	f003 0303 	and.w	r3, r3, #3
 8009338:	2b02      	cmp	r3, #2
 800933a:	d123      	bne.n	8009384 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	08da      	lsrs	r2, r3, #3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	3208      	adds	r2, #8
 8009344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009348:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	f003 0307 	and.w	r3, r3, #7
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	220f      	movs	r2, #15
 8009354:	fa02 f303 	lsl.w	r3, r2, r3
 8009358:	43db      	mvns	r3, r3
 800935a:	69ba      	ldr	r2, [r7, #24]
 800935c:	4013      	ands	r3, r2
 800935e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	691a      	ldr	r2, [r3, #16]
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	f003 0307 	and.w	r3, r3, #7
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	fa02 f303 	lsl.w	r3, r2, r3
 8009370:	69ba      	ldr	r2, [r7, #24]
 8009372:	4313      	orrs	r3, r2
 8009374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	08da      	lsrs	r2, r3, #3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	3208      	adds	r2, #8
 800937e:	69b9      	ldr	r1, [r7, #24]
 8009380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	005b      	lsls	r3, r3, #1
 800938e:	2203      	movs	r2, #3
 8009390:	fa02 f303 	lsl.w	r3, r2, r3
 8009394:	43db      	mvns	r3, r3
 8009396:	69ba      	ldr	r2, [r7, #24]
 8009398:	4013      	ands	r3, r2
 800939a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	f003 0203 	and.w	r2, r3, #3
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	005b      	lsls	r3, r3, #1
 80093a8:	fa02 f303 	lsl.w	r3, r2, r3
 80093ac:	69ba      	ldr	r2, [r7, #24]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	69ba      	ldr	r2, [r7, #24]
 80093b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 80ae 	beq.w	8009522 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093c6:	2300      	movs	r3, #0
 80093c8:	60fb      	str	r3, [r7, #12]
 80093ca:	4b5d      	ldr	r3, [pc, #372]	@ (8009540 <HAL_GPIO_Init+0x300>)
 80093cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093ce:	4a5c      	ldr	r2, [pc, #368]	@ (8009540 <HAL_GPIO_Init+0x300>)
 80093d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80093d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80093d6:	4b5a      	ldr	r3, [pc, #360]	@ (8009540 <HAL_GPIO_Init+0x300>)
 80093d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093de:	60fb      	str	r3, [r7, #12]
 80093e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80093e2:	4a58      	ldr	r2, [pc, #352]	@ (8009544 <HAL_GPIO_Init+0x304>)
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	089b      	lsrs	r3, r3, #2
 80093e8:	3302      	adds	r3, #2
 80093ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	f003 0303 	and.w	r3, r3, #3
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	220f      	movs	r2, #15
 80093fa:	fa02 f303 	lsl.w	r3, r2, r3
 80093fe:	43db      	mvns	r3, r3
 8009400:	69ba      	ldr	r2, [r7, #24]
 8009402:	4013      	ands	r3, r2
 8009404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a4f      	ldr	r2, [pc, #316]	@ (8009548 <HAL_GPIO_Init+0x308>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d025      	beq.n	800945a <HAL_GPIO_Init+0x21a>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4a4e      	ldr	r2, [pc, #312]	@ (800954c <HAL_GPIO_Init+0x30c>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d01f      	beq.n	8009456 <HAL_GPIO_Init+0x216>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4a4d      	ldr	r2, [pc, #308]	@ (8009550 <HAL_GPIO_Init+0x310>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d019      	beq.n	8009452 <HAL_GPIO_Init+0x212>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a4c      	ldr	r2, [pc, #304]	@ (8009554 <HAL_GPIO_Init+0x314>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d013      	beq.n	800944e <HAL_GPIO_Init+0x20e>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4a4b      	ldr	r2, [pc, #300]	@ (8009558 <HAL_GPIO_Init+0x318>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d00d      	beq.n	800944a <HAL_GPIO_Init+0x20a>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a4a      	ldr	r2, [pc, #296]	@ (800955c <HAL_GPIO_Init+0x31c>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d007      	beq.n	8009446 <HAL_GPIO_Init+0x206>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a49      	ldr	r2, [pc, #292]	@ (8009560 <HAL_GPIO_Init+0x320>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d101      	bne.n	8009442 <HAL_GPIO_Init+0x202>
 800943e:	2306      	movs	r3, #6
 8009440:	e00c      	b.n	800945c <HAL_GPIO_Init+0x21c>
 8009442:	2307      	movs	r3, #7
 8009444:	e00a      	b.n	800945c <HAL_GPIO_Init+0x21c>
 8009446:	2305      	movs	r3, #5
 8009448:	e008      	b.n	800945c <HAL_GPIO_Init+0x21c>
 800944a:	2304      	movs	r3, #4
 800944c:	e006      	b.n	800945c <HAL_GPIO_Init+0x21c>
 800944e:	2303      	movs	r3, #3
 8009450:	e004      	b.n	800945c <HAL_GPIO_Init+0x21c>
 8009452:	2302      	movs	r3, #2
 8009454:	e002      	b.n	800945c <HAL_GPIO_Init+0x21c>
 8009456:	2301      	movs	r3, #1
 8009458:	e000      	b.n	800945c <HAL_GPIO_Init+0x21c>
 800945a:	2300      	movs	r3, #0
 800945c:	69fa      	ldr	r2, [r7, #28]
 800945e:	f002 0203 	and.w	r2, r2, #3
 8009462:	0092      	lsls	r2, r2, #2
 8009464:	4093      	lsls	r3, r2
 8009466:	69ba      	ldr	r2, [r7, #24]
 8009468:	4313      	orrs	r3, r2
 800946a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800946c:	4935      	ldr	r1, [pc, #212]	@ (8009544 <HAL_GPIO_Init+0x304>)
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	089b      	lsrs	r3, r3, #2
 8009472:	3302      	adds	r3, #2
 8009474:	69ba      	ldr	r2, [r7, #24]
 8009476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800947a:	4b3a      	ldr	r3, [pc, #232]	@ (8009564 <HAL_GPIO_Init+0x324>)
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	43db      	mvns	r3, r3
 8009484:	69ba      	ldr	r2, [r7, #24]
 8009486:	4013      	ands	r3, r2
 8009488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009492:	2b00      	cmp	r3, #0
 8009494:	d003      	beq.n	800949e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8009496:	69ba      	ldr	r2, [r7, #24]
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	4313      	orrs	r3, r2
 800949c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800949e:	4a31      	ldr	r2, [pc, #196]	@ (8009564 <HAL_GPIO_Init+0x324>)
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80094a4:	4b2f      	ldr	r3, [pc, #188]	@ (8009564 <HAL_GPIO_Init+0x324>)
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	43db      	mvns	r3, r3
 80094ae:	69ba      	ldr	r2, [r7, #24]
 80094b0:	4013      	ands	r3, r2
 80094b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d003      	beq.n	80094c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80094c0:	69ba      	ldr	r2, [r7, #24]
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80094c8:	4a26      	ldr	r2, [pc, #152]	@ (8009564 <HAL_GPIO_Init+0x324>)
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80094ce:	4b25      	ldr	r3, [pc, #148]	@ (8009564 <HAL_GPIO_Init+0x324>)
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	43db      	mvns	r3, r3
 80094d8:	69ba      	ldr	r2, [r7, #24]
 80094da:	4013      	ands	r3, r2
 80094dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d003      	beq.n	80094f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80094ea:	69ba      	ldr	r2, [r7, #24]
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80094f2:	4a1c      	ldr	r2, [pc, #112]	@ (8009564 <HAL_GPIO_Init+0x324>)
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80094f8:	4b1a      	ldr	r3, [pc, #104]	@ (8009564 <HAL_GPIO_Init+0x324>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	43db      	mvns	r3, r3
 8009502:	69ba      	ldr	r2, [r7, #24]
 8009504:	4013      	ands	r3, r2
 8009506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009510:	2b00      	cmp	r3, #0
 8009512:	d003      	beq.n	800951c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009514:	69ba      	ldr	r2, [r7, #24]
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	4313      	orrs	r3, r2
 800951a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800951c:	4a11      	ldr	r2, [pc, #68]	@ (8009564 <HAL_GPIO_Init+0x324>)
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	3301      	adds	r3, #1
 8009526:	61fb      	str	r3, [r7, #28]
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	2b0f      	cmp	r3, #15
 800952c:	f67f ae96 	bls.w	800925c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009530:	bf00      	nop
 8009532:	bf00      	nop
 8009534:	3724      	adds	r7, #36	@ 0x24
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	40023800 	.word	0x40023800
 8009544:	40013800 	.word	0x40013800
 8009548:	40020000 	.word	0x40020000
 800954c:	40020400 	.word	0x40020400
 8009550:	40020800 	.word	0x40020800
 8009554:	40020c00 	.word	0x40020c00
 8009558:	40021000 	.word	0x40021000
 800955c:	40021400 	.word	0x40021400
 8009560:	40021800 	.word	0x40021800
 8009564:	40013c00 	.word	0x40013c00

08009568 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	460b      	mov	r3, r1
 8009572:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	691a      	ldr	r2, [r3, #16]
 8009578:	887b      	ldrh	r3, [r7, #2]
 800957a:	4013      	ands	r3, r2
 800957c:	2b00      	cmp	r3, #0
 800957e:	d002      	beq.n	8009586 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009580:	2301      	movs	r3, #1
 8009582:	73fb      	strb	r3, [r7, #15]
 8009584:	e001      	b.n	800958a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009586:	2300      	movs	r3, #0
 8009588:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800958a:	7bfb      	ldrb	r3, [r7, #15]
}
 800958c:	4618      	mov	r0, r3
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	807b      	strh	r3, [r7, #2]
 80095a4:	4613      	mov	r3, r2
 80095a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80095a8:	787b      	ldrb	r3, [r7, #1]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d003      	beq.n	80095b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80095ae:	887a      	ldrh	r2, [r7, #2]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80095b4:	e003      	b.n	80095be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80095b6:	887b      	ldrh	r3, [r7, #2]
 80095b8:	041a      	lsls	r2, r3, #16
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	619a      	str	r2, [r3, #24]
}
 80095be:	bf00      	nop
 80095c0:	370c      	adds	r7, #12
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
	...

080095cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d101      	bne.n	80095e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80095dc:	2301      	movs	r3, #1
 80095de:	e0cc      	b.n	800977a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80095e0:	4b68      	ldr	r3, [pc, #416]	@ (8009784 <HAL_RCC_ClockConfig+0x1b8>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 030f 	and.w	r3, r3, #15
 80095e8:	683a      	ldr	r2, [r7, #0]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d90c      	bls.n	8009608 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095ee:	4b65      	ldr	r3, [pc, #404]	@ (8009784 <HAL_RCC_ClockConfig+0x1b8>)
 80095f0:	683a      	ldr	r2, [r7, #0]
 80095f2:	b2d2      	uxtb	r2, r2
 80095f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095f6:	4b63      	ldr	r3, [pc, #396]	@ (8009784 <HAL_RCC_ClockConfig+0x1b8>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f003 030f 	and.w	r3, r3, #15
 80095fe:	683a      	ldr	r2, [r7, #0]
 8009600:	429a      	cmp	r2, r3
 8009602:	d001      	beq.n	8009608 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	e0b8      	b.n	800977a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 0302 	and.w	r3, r3, #2
 8009610:	2b00      	cmp	r3, #0
 8009612:	d020      	beq.n	8009656 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 0304 	and.w	r3, r3, #4
 800961c:	2b00      	cmp	r3, #0
 800961e:	d005      	beq.n	800962c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009620:	4b59      	ldr	r3, [pc, #356]	@ (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	4a58      	ldr	r2, [pc, #352]	@ (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 8009626:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800962a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0308 	and.w	r3, r3, #8
 8009634:	2b00      	cmp	r3, #0
 8009636:	d005      	beq.n	8009644 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009638:	4b53      	ldr	r3, [pc, #332]	@ (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	4a52      	ldr	r2, [pc, #328]	@ (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 800963e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009642:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009644:	4b50      	ldr	r3, [pc, #320]	@ (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	494d      	ldr	r1, [pc, #308]	@ (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 8009652:	4313      	orrs	r3, r2
 8009654:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f003 0301 	and.w	r3, r3, #1
 800965e:	2b00      	cmp	r3, #0
 8009660:	d044      	beq.n	80096ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	2b01      	cmp	r3, #1
 8009668:	d107      	bne.n	800967a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800966a:	4b47      	ldr	r3, [pc, #284]	@ (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009672:	2b00      	cmp	r3, #0
 8009674:	d119      	bne.n	80096aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	e07f      	b.n	800977a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	2b02      	cmp	r3, #2
 8009680:	d003      	beq.n	800968a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009686:	2b03      	cmp	r3, #3
 8009688:	d107      	bne.n	800969a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800968a:	4b3f      	ldr	r3, [pc, #252]	@ (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009692:	2b00      	cmp	r3, #0
 8009694:	d109      	bne.n	80096aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e06f      	b.n	800977a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800969a:	4b3b      	ldr	r3, [pc, #236]	@ (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 0302 	and.w	r3, r3, #2
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d101      	bne.n	80096aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e067      	b.n	800977a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80096aa:	4b37      	ldr	r3, [pc, #220]	@ (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	f023 0203 	bic.w	r2, r3, #3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	4934      	ldr	r1, [pc, #208]	@ (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 80096b8:	4313      	orrs	r3, r2
 80096ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80096bc:	f7ff fbec 	bl	8008e98 <HAL_GetTick>
 80096c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096c2:	e00a      	b.n	80096da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096c4:	f7ff fbe8 	bl	8008e98 <HAL_GetTick>
 80096c8:	4602      	mov	r2, r0
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	1ad3      	subs	r3, r2, r3
 80096ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d901      	bls.n	80096da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80096d6:	2303      	movs	r3, #3
 80096d8:	e04f      	b.n	800977a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096da:	4b2b      	ldr	r3, [pc, #172]	@ (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	f003 020c 	and.w	r2, r3, #12
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d1eb      	bne.n	80096c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80096ec:	4b25      	ldr	r3, [pc, #148]	@ (8009784 <HAL_RCC_ClockConfig+0x1b8>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 030f 	and.w	r3, r3, #15
 80096f4:	683a      	ldr	r2, [r7, #0]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d20c      	bcs.n	8009714 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096fa:	4b22      	ldr	r3, [pc, #136]	@ (8009784 <HAL_RCC_ClockConfig+0x1b8>)
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	b2d2      	uxtb	r2, r2
 8009700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009702:	4b20      	ldr	r3, [pc, #128]	@ (8009784 <HAL_RCC_ClockConfig+0x1b8>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f003 030f 	and.w	r3, r3, #15
 800970a:	683a      	ldr	r2, [r7, #0]
 800970c:	429a      	cmp	r2, r3
 800970e:	d001      	beq.n	8009714 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	e032      	b.n	800977a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f003 0304 	and.w	r3, r3, #4
 800971c:	2b00      	cmp	r3, #0
 800971e:	d008      	beq.n	8009732 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009720:	4b19      	ldr	r3, [pc, #100]	@ (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	4916      	ldr	r1, [pc, #88]	@ (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 800972e:	4313      	orrs	r3, r2
 8009730:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 0308 	and.w	r3, r3, #8
 800973a:	2b00      	cmp	r3, #0
 800973c:	d009      	beq.n	8009752 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800973e:	4b12      	ldr	r3, [pc, #72]	@ (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	00db      	lsls	r3, r3, #3
 800974c:	490e      	ldr	r1, [pc, #56]	@ (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 800974e:	4313      	orrs	r3, r2
 8009750:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009752:	f000 f855 	bl	8009800 <HAL_RCC_GetSysClockFreq>
 8009756:	4602      	mov	r2, r0
 8009758:	4b0b      	ldr	r3, [pc, #44]	@ (8009788 <HAL_RCC_ClockConfig+0x1bc>)
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	091b      	lsrs	r3, r3, #4
 800975e:	f003 030f 	and.w	r3, r3, #15
 8009762:	490a      	ldr	r1, [pc, #40]	@ (800978c <HAL_RCC_ClockConfig+0x1c0>)
 8009764:	5ccb      	ldrb	r3, [r1, r3]
 8009766:	fa22 f303 	lsr.w	r3, r2, r3
 800976a:	4a09      	ldr	r2, [pc, #36]	@ (8009790 <HAL_RCC_ClockConfig+0x1c4>)
 800976c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800976e:	4b09      	ldr	r3, [pc, #36]	@ (8009794 <HAL_RCC_ClockConfig+0x1c8>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4618      	mov	r0, r3
 8009774:	f7ff fb4c 	bl	8008e10 <HAL_InitTick>

  return HAL_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	40023c00 	.word	0x40023c00
 8009788:	40023800 	.word	0x40023800
 800978c:	0800c0fc 	.word	0x0800c0fc
 8009790:	20000030 	.word	0x20000030
 8009794:	20000034 	.word	0x20000034

08009798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009798:	b480      	push	{r7}
 800979a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800979c:	4b03      	ldr	r3, [pc, #12]	@ (80097ac <HAL_RCC_GetHCLKFreq+0x14>)
 800979e:	681b      	ldr	r3, [r3, #0]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	20000030 	.word	0x20000030

080097b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80097b4:	f7ff fff0 	bl	8009798 <HAL_RCC_GetHCLKFreq>
 80097b8:	4602      	mov	r2, r0
 80097ba:	4b05      	ldr	r3, [pc, #20]	@ (80097d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	0a9b      	lsrs	r3, r3, #10
 80097c0:	f003 0307 	and.w	r3, r3, #7
 80097c4:	4903      	ldr	r1, [pc, #12]	@ (80097d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80097c6:	5ccb      	ldrb	r3, [r1, r3]
 80097c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	40023800 	.word	0x40023800
 80097d4:	0800c10c 	.word	0x0800c10c

080097d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80097dc:	f7ff ffdc 	bl	8009798 <HAL_RCC_GetHCLKFreq>
 80097e0:	4602      	mov	r2, r0
 80097e2:	4b05      	ldr	r3, [pc, #20]	@ (80097f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	0b5b      	lsrs	r3, r3, #13
 80097e8:	f003 0307 	and.w	r3, r3, #7
 80097ec:	4903      	ldr	r1, [pc, #12]	@ (80097fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80097ee:	5ccb      	ldrb	r3, [r1, r3]
 80097f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	40023800 	.word	0x40023800
 80097fc:	0800c10c 	.word	0x0800c10c

08009800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009804:	b0a6      	sub	sp, #152	@ 0x98
 8009806:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009808:	2300      	movs	r3, #0
 800980a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800980e:	2300      	movs	r3, #0
 8009810:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8009814:	2300      	movs	r3, #0
 8009816:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800981a:	2300      	movs	r3, #0
 800981c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8009820:	2300      	movs	r3, #0
 8009822:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009826:	4bc8      	ldr	r3, [pc, #800]	@ (8009b48 <HAL_RCC_GetSysClockFreq+0x348>)
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	f003 030c 	and.w	r3, r3, #12
 800982e:	2b0c      	cmp	r3, #12
 8009830:	f200 817e 	bhi.w	8009b30 <HAL_RCC_GetSysClockFreq+0x330>
 8009834:	a201      	add	r2, pc, #4	@ (adr r2, 800983c <HAL_RCC_GetSysClockFreq+0x3c>)
 8009836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800983a:	bf00      	nop
 800983c:	08009871 	.word	0x08009871
 8009840:	08009b31 	.word	0x08009b31
 8009844:	08009b31 	.word	0x08009b31
 8009848:	08009b31 	.word	0x08009b31
 800984c:	08009879 	.word	0x08009879
 8009850:	08009b31 	.word	0x08009b31
 8009854:	08009b31 	.word	0x08009b31
 8009858:	08009b31 	.word	0x08009b31
 800985c:	08009881 	.word	0x08009881
 8009860:	08009b31 	.word	0x08009b31
 8009864:	08009b31 	.word	0x08009b31
 8009868:	08009b31 	.word	0x08009b31
 800986c:	080099eb 	.word	0x080099eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009870:	4bb6      	ldr	r3, [pc, #728]	@ (8009b4c <HAL_RCC_GetSysClockFreq+0x34c>)
 8009872:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8009876:	e15f      	b.n	8009b38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009878:	4bb5      	ldr	r3, [pc, #724]	@ (8009b50 <HAL_RCC_GetSysClockFreq+0x350>)
 800987a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800987e:	e15b      	b.n	8009b38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009880:	4bb1      	ldr	r3, [pc, #708]	@ (8009b48 <HAL_RCC_GetSysClockFreq+0x348>)
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009888:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800988c:	4bae      	ldr	r3, [pc, #696]	@ (8009b48 <HAL_RCC_GetSysClockFreq+0x348>)
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009894:	2b00      	cmp	r3, #0
 8009896:	d031      	beq.n	80098fc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009898:	4bab      	ldr	r3, [pc, #684]	@ (8009b48 <HAL_RCC_GetSysClockFreq+0x348>)
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	099b      	lsrs	r3, r3, #6
 800989e:	2200      	movs	r2, #0
 80098a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80098a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80098a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80098a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80098ac:	2300      	movs	r3, #0
 80098ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80098b0:	4ba7      	ldr	r3, [pc, #668]	@ (8009b50 <HAL_RCC_GetSysClockFreq+0x350>)
 80098b2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80098b6:	462a      	mov	r2, r5
 80098b8:	fb03 f202 	mul.w	r2, r3, r2
 80098bc:	2300      	movs	r3, #0
 80098be:	4621      	mov	r1, r4
 80098c0:	fb01 f303 	mul.w	r3, r1, r3
 80098c4:	4413      	add	r3, r2
 80098c6:	4aa2      	ldr	r2, [pc, #648]	@ (8009b50 <HAL_RCC_GetSysClockFreq+0x350>)
 80098c8:	4621      	mov	r1, r4
 80098ca:	fba1 1202 	umull	r1, r2, r1, r2
 80098ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80098d0:	460a      	mov	r2, r1
 80098d2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80098d4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80098d6:	4413      	add	r3, r2
 80098d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80098da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80098de:	2200      	movs	r2, #0
 80098e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80098e2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80098e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80098e8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80098ec:	f7fe fce0 	bl	80082b0 <__aeabi_uldivmod>
 80098f0:	4602      	mov	r2, r0
 80098f2:	460b      	mov	r3, r1
 80098f4:	4613      	mov	r3, r2
 80098f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80098fa:	e064      	b.n	80099c6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80098fc:	4b92      	ldr	r3, [pc, #584]	@ (8009b48 <HAL_RCC_GetSysClockFreq+0x348>)
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	099b      	lsrs	r3, r3, #6
 8009902:	2200      	movs	r2, #0
 8009904:	653b      	str	r3, [r7, #80]	@ 0x50
 8009906:	657a      	str	r2, [r7, #84]	@ 0x54
 8009908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800990a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800990e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009910:	2300      	movs	r3, #0
 8009912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009914:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8009918:	4622      	mov	r2, r4
 800991a:	462b      	mov	r3, r5
 800991c:	f04f 0000 	mov.w	r0, #0
 8009920:	f04f 0100 	mov.w	r1, #0
 8009924:	0159      	lsls	r1, r3, #5
 8009926:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800992a:	0150      	lsls	r0, r2, #5
 800992c:	4602      	mov	r2, r0
 800992e:	460b      	mov	r3, r1
 8009930:	4621      	mov	r1, r4
 8009932:	1a51      	subs	r1, r2, r1
 8009934:	6139      	str	r1, [r7, #16]
 8009936:	4629      	mov	r1, r5
 8009938:	eb63 0301 	sbc.w	r3, r3, r1
 800993c:	617b      	str	r3, [r7, #20]
 800993e:	f04f 0200 	mov.w	r2, #0
 8009942:	f04f 0300 	mov.w	r3, #0
 8009946:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800994a:	4659      	mov	r1, fp
 800994c:	018b      	lsls	r3, r1, #6
 800994e:	4651      	mov	r1, sl
 8009950:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009954:	4651      	mov	r1, sl
 8009956:	018a      	lsls	r2, r1, #6
 8009958:	4651      	mov	r1, sl
 800995a:	ebb2 0801 	subs.w	r8, r2, r1
 800995e:	4659      	mov	r1, fp
 8009960:	eb63 0901 	sbc.w	r9, r3, r1
 8009964:	f04f 0200 	mov.w	r2, #0
 8009968:	f04f 0300 	mov.w	r3, #0
 800996c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009970:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009974:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009978:	4690      	mov	r8, r2
 800997a:	4699      	mov	r9, r3
 800997c:	4623      	mov	r3, r4
 800997e:	eb18 0303 	adds.w	r3, r8, r3
 8009982:	60bb      	str	r3, [r7, #8]
 8009984:	462b      	mov	r3, r5
 8009986:	eb49 0303 	adc.w	r3, r9, r3
 800998a:	60fb      	str	r3, [r7, #12]
 800998c:	f04f 0200 	mov.w	r2, #0
 8009990:	f04f 0300 	mov.w	r3, #0
 8009994:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009998:	4629      	mov	r1, r5
 800999a:	028b      	lsls	r3, r1, #10
 800999c:	4621      	mov	r1, r4
 800999e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80099a2:	4621      	mov	r1, r4
 80099a4:	028a      	lsls	r2, r1, #10
 80099a6:	4610      	mov	r0, r2
 80099a8:	4619      	mov	r1, r3
 80099aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099ae:	2200      	movs	r2, #0
 80099b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80099b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80099b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80099b8:	f7fe fc7a 	bl	80082b0 <__aeabi_uldivmod>
 80099bc:	4602      	mov	r2, r0
 80099be:	460b      	mov	r3, r1
 80099c0:	4613      	mov	r3, r2
 80099c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80099c6:	4b60      	ldr	r3, [pc, #384]	@ (8009b48 <HAL_RCC_GetSysClockFreq+0x348>)
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	0c1b      	lsrs	r3, r3, #16
 80099cc:	f003 0303 	and.w	r3, r3, #3
 80099d0:	3301      	adds	r3, #1
 80099d2:	005b      	lsls	r3, r3, #1
 80099d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80099d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80099dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80099e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80099e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80099e8:	e0a6      	b.n	8009b38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80099ea:	4b57      	ldr	r3, [pc, #348]	@ (8009b48 <HAL_RCC_GetSysClockFreq+0x348>)
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80099f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80099f6:	4b54      	ldr	r3, [pc, #336]	@ (8009b48 <HAL_RCC_GetSysClockFreq+0x348>)
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d02a      	beq.n	8009a58 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a02:	4b51      	ldr	r3, [pc, #324]	@ (8009b48 <HAL_RCC_GetSysClockFreq+0x348>)
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	099b      	lsrs	r3, r3, #6
 8009a08:	2200      	movs	r2, #0
 8009a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009a14:	2100      	movs	r1, #0
 8009a16:	4b4e      	ldr	r3, [pc, #312]	@ (8009b50 <HAL_RCC_GetSysClockFreq+0x350>)
 8009a18:	fb03 f201 	mul.w	r2, r3, r1
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	fb00 f303 	mul.w	r3, r0, r3
 8009a22:	4413      	add	r3, r2
 8009a24:	4a4a      	ldr	r2, [pc, #296]	@ (8009b50 <HAL_RCC_GetSysClockFreq+0x350>)
 8009a26:	fba0 1202 	umull	r1, r2, r0, r2
 8009a2a:	677a      	str	r2, [r7, #116]	@ 0x74
 8009a2c:	460a      	mov	r2, r1
 8009a2e:	673a      	str	r2, [r7, #112]	@ 0x70
 8009a30:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009a32:	4413      	add	r3, r2
 8009a34:	677b      	str	r3, [r7, #116]	@ 0x74
 8009a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a3e:	637a      	str	r2, [r7, #52]	@ 0x34
 8009a40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8009a44:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8009a48:	f7fe fc32 	bl	80082b0 <__aeabi_uldivmod>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	460b      	mov	r3, r1
 8009a50:	4613      	mov	r3, r2
 8009a52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009a56:	e05b      	b.n	8009b10 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a58:	4b3b      	ldr	r3, [pc, #236]	@ (8009b48 <HAL_RCC_GetSysClockFreq+0x348>)
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	099b      	lsrs	r3, r3, #6
 8009a5e:	2200      	movs	r2, #0
 8009a60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a6a:	623b      	str	r3, [r7, #32]
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009a74:	4642      	mov	r2, r8
 8009a76:	464b      	mov	r3, r9
 8009a78:	f04f 0000 	mov.w	r0, #0
 8009a7c:	f04f 0100 	mov.w	r1, #0
 8009a80:	0159      	lsls	r1, r3, #5
 8009a82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009a86:	0150      	lsls	r0, r2, #5
 8009a88:	4602      	mov	r2, r0
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	4641      	mov	r1, r8
 8009a8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8009a92:	4649      	mov	r1, r9
 8009a94:	eb63 0b01 	sbc.w	fp, r3, r1
 8009a98:	f04f 0200 	mov.w	r2, #0
 8009a9c:	f04f 0300 	mov.w	r3, #0
 8009aa0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009aa4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009aa8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009aac:	ebb2 040a 	subs.w	r4, r2, sl
 8009ab0:	eb63 050b 	sbc.w	r5, r3, fp
 8009ab4:	f04f 0200 	mov.w	r2, #0
 8009ab8:	f04f 0300 	mov.w	r3, #0
 8009abc:	00eb      	lsls	r3, r5, #3
 8009abe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ac2:	00e2      	lsls	r2, r4, #3
 8009ac4:	4614      	mov	r4, r2
 8009ac6:	461d      	mov	r5, r3
 8009ac8:	4643      	mov	r3, r8
 8009aca:	18e3      	adds	r3, r4, r3
 8009acc:	603b      	str	r3, [r7, #0]
 8009ace:	464b      	mov	r3, r9
 8009ad0:	eb45 0303 	adc.w	r3, r5, r3
 8009ad4:	607b      	str	r3, [r7, #4]
 8009ad6:	f04f 0200 	mov.w	r2, #0
 8009ada:	f04f 0300 	mov.w	r3, #0
 8009ade:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009ae2:	4629      	mov	r1, r5
 8009ae4:	028b      	lsls	r3, r1, #10
 8009ae6:	4621      	mov	r1, r4
 8009ae8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009aec:	4621      	mov	r1, r4
 8009aee:	028a      	lsls	r2, r1, #10
 8009af0:	4610      	mov	r0, r2
 8009af2:	4619      	mov	r1, r3
 8009af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009af8:	2200      	movs	r2, #0
 8009afa:	61bb      	str	r3, [r7, #24]
 8009afc:	61fa      	str	r2, [r7, #28]
 8009afe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009b02:	f7fe fbd5 	bl	80082b0 <__aeabi_uldivmod>
 8009b06:	4602      	mov	r2, r0
 8009b08:	460b      	mov	r3, r1
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009b10:	4b0d      	ldr	r3, [pc, #52]	@ (8009b48 <HAL_RCC_GetSysClockFreq+0x348>)
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	0f1b      	lsrs	r3, r3, #28
 8009b16:	f003 0307 	and.w	r3, r3, #7
 8009b1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8009b1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009b22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8009b2e:	e003      	b.n	8009b38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009b30:	4b06      	ldr	r3, [pc, #24]	@ (8009b4c <HAL_RCC_GetSysClockFreq+0x34c>)
 8009b32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8009b36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009b38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3798      	adds	r7, #152	@ 0x98
 8009b40:	46bd      	mov	sp, r7
 8009b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b46:	bf00      	nop
 8009b48:	40023800 	.word	0x40023800
 8009b4c:	00f42400 	.word	0x00f42400
 8009b50:	017d7840 	.word	0x017d7840

08009b54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b086      	sub	sp, #24
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d101      	bne.n	8009b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	e28d      	b.n	800a082 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 0301 	and.w	r3, r3, #1
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	f000 8083 	beq.w	8009c7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009b74:	4b94      	ldr	r3, [pc, #592]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	f003 030c 	and.w	r3, r3, #12
 8009b7c:	2b04      	cmp	r3, #4
 8009b7e:	d019      	beq.n	8009bb4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8009b80:	4b91      	ldr	r3, [pc, #580]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	f003 030c 	and.w	r3, r3, #12
        || \
 8009b88:	2b08      	cmp	r3, #8
 8009b8a:	d106      	bne.n	8009b9a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8009b8c:	4b8e      	ldr	r3, [pc, #568]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b98:	d00c      	beq.n	8009bb4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009b9a:	4b8b      	ldr	r3, [pc, #556]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8009ba2:	2b0c      	cmp	r3, #12
 8009ba4:	d112      	bne.n	8009bcc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009ba6:	4b88      	ldr	r3, [pc, #544]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009bae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009bb2:	d10b      	bne.n	8009bcc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009bb4:	4b84      	ldr	r3, [pc, #528]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d05b      	beq.n	8009c78 <HAL_RCC_OscConfig+0x124>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d157      	bne.n	8009c78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e25a      	b.n	800a082 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bd4:	d106      	bne.n	8009be4 <HAL_RCC_OscConfig+0x90>
 8009bd6:	4b7c      	ldr	r3, [pc, #496]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a7b      	ldr	r2, [pc, #492]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009be0:	6013      	str	r3, [r2, #0]
 8009be2:	e01d      	b.n	8009c20 <HAL_RCC_OscConfig+0xcc>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009bec:	d10c      	bne.n	8009c08 <HAL_RCC_OscConfig+0xb4>
 8009bee:	4b76      	ldr	r3, [pc, #472]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a75      	ldr	r2, [pc, #468]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009bf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009bf8:	6013      	str	r3, [r2, #0]
 8009bfa:	4b73      	ldr	r3, [pc, #460]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a72      	ldr	r2, [pc, #456]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c04:	6013      	str	r3, [r2, #0]
 8009c06:	e00b      	b.n	8009c20 <HAL_RCC_OscConfig+0xcc>
 8009c08:	4b6f      	ldr	r3, [pc, #444]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a6e      	ldr	r2, [pc, #440]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009c0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c12:	6013      	str	r3, [r2, #0]
 8009c14:	4b6c      	ldr	r3, [pc, #432]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a6b      	ldr	r2, [pc, #428]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009c1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d013      	beq.n	8009c50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c28:	f7ff f936 	bl	8008e98 <HAL_GetTick>
 8009c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c2e:	e008      	b.n	8009c42 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c30:	f7ff f932 	bl	8008e98 <HAL_GetTick>
 8009c34:	4602      	mov	r2, r0
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	2b64      	cmp	r3, #100	@ 0x64
 8009c3c:	d901      	bls.n	8009c42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009c3e:	2303      	movs	r3, #3
 8009c40:	e21f      	b.n	800a082 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c42:	4b61      	ldr	r3, [pc, #388]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d0f0      	beq.n	8009c30 <HAL_RCC_OscConfig+0xdc>
 8009c4e:	e014      	b.n	8009c7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c50:	f7ff f922 	bl	8008e98 <HAL_GetTick>
 8009c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009c56:	e008      	b.n	8009c6a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c58:	f7ff f91e 	bl	8008e98 <HAL_GetTick>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	2b64      	cmp	r3, #100	@ 0x64
 8009c64:	d901      	bls.n	8009c6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8009c66:	2303      	movs	r3, #3
 8009c68:	e20b      	b.n	800a082 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009c6a:	4b57      	ldr	r3, [pc, #348]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1f0      	bne.n	8009c58 <HAL_RCC_OscConfig+0x104>
 8009c76:	e000      	b.n	8009c7a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 0302 	and.w	r3, r3, #2
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d06f      	beq.n	8009d66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009c86:	4b50      	ldr	r3, [pc, #320]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	f003 030c 	and.w	r3, r3, #12
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d017      	beq.n	8009cc2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8009c92:	4b4d      	ldr	r3, [pc, #308]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	f003 030c 	and.w	r3, r3, #12
        || \
 8009c9a:	2b08      	cmp	r3, #8
 8009c9c:	d105      	bne.n	8009caa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8009c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00b      	beq.n	8009cc2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009caa:	4b47      	ldr	r3, [pc, #284]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8009cb2:	2b0c      	cmp	r3, #12
 8009cb4:	d11c      	bne.n	8009cf0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009cb6:	4b44      	ldr	r3, [pc, #272]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d116      	bne.n	8009cf0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009cc2:	4b41      	ldr	r3, [pc, #260]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f003 0302 	and.w	r3, r3, #2
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d005      	beq.n	8009cda <HAL_RCC_OscConfig+0x186>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d001      	beq.n	8009cda <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e1d3      	b.n	800a082 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009cda:	4b3b      	ldr	r3, [pc, #236]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	00db      	lsls	r3, r3, #3
 8009ce8:	4937      	ldr	r1, [pc, #220]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009cea:	4313      	orrs	r3, r2
 8009cec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009cee:	e03a      	b.n	8009d66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d020      	beq.n	8009d3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009cf8:	4b34      	ldr	r3, [pc, #208]	@ (8009dcc <HAL_RCC_OscConfig+0x278>)
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cfe:	f7ff f8cb 	bl	8008e98 <HAL_GetTick>
 8009d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d04:	e008      	b.n	8009d18 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d06:	f7ff f8c7 	bl	8008e98 <HAL_GetTick>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	1ad3      	subs	r3, r2, r3
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d901      	bls.n	8009d18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8009d14:	2303      	movs	r3, #3
 8009d16:	e1b4      	b.n	800a082 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d18:	4b2b      	ldr	r3, [pc, #172]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f003 0302 	and.w	r3, r3, #2
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d0f0      	beq.n	8009d06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d24:	4b28      	ldr	r3, [pc, #160]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	00db      	lsls	r3, r3, #3
 8009d32:	4925      	ldr	r1, [pc, #148]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009d34:	4313      	orrs	r3, r2
 8009d36:	600b      	str	r3, [r1, #0]
 8009d38:	e015      	b.n	8009d66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009d3a:	4b24      	ldr	r3, [pc, #144]	@ (8009dcc <HAL_RCC_OscConfig+0x278>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d40:	f7ff f8aa 	bl	8008e98 <HAL_GetTick>
 8009d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009d46:	e008      	b.n	8009d5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d48:	f7ff f8a6 	bl	8008e98 <HAL_GetTick>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	1ad3      	subs	r3, r2, r3
 8009d52:	2b02      	cmp	r3, #2
 8009d54:	d901      	bls.n	8009d5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009d56:	2303      	movs	r3, #3
 8009d58:	e193      	b.n	800a082 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f003 0302 	and.w	r3, r3, #2
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d1f0      	bne.n	8009d48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f003 0308 	and.w	r3, r3, #8
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d036      	beq.n	8009de0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	695b      	ldr	r3, [r3, #20]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d016      	beq.n	8009da8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d7a:	4b15      	ldr	r3, [pc, #84]	@ (8009dd0 <HAL_RCC_OscConfig+0x27c>)
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d80:	f7ff f88a 	bl	8008e98 <HAL_GetTick>
 8009d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d86:	e008      	b.n	8009d9a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d88:	f7ff f886 	bl	8008e98 <HAL_GetTick>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	1ad3      	subs	r3, r2, r3
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d901      	bls.n	8009d9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8009d96:	2303      	movs	r3, #3
 8009d98:	e173      	b.n	800a082 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8009dc8 <HAL_RCC_OscConfig+0x274>)
 8009d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d9e:	f003 0302 	and.w	r3, r3, #2
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d0f0      	beq.n	8009d88 <HAL_RCC_OscConfig+0x234>
 8009da6:	e01b      	b.n	8009de0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009da8:	4b09      	ldr	r3, [pc, #36]	@ (8009dd0 <HAL_RCC_OscConfig+0x27c>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dae:	f7ff f873 	bl	8008e98 <HAL_GetTick>
 8009db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009db4:	e00e      	b.n	8009dd4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009db6:	f7ff f86f 	bl	8008e98 <HAL_GetTick>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	1ad3      	subs	r3, r2, r3
 8009dc0:	2b02      	cmp	r3, #2
 8009dc2:	d907      	bls.n	8009dd4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	e15c      	b.n	800a082 <HAL_RCC_OscConfig+0x52e>
 8009dc8:	40023800 	.word	0x40023800
 8009dcc:	42470000 	.word	0x42470000
 8009dd0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009dd4:	4b8a      	ldr	r3, [pc, #552]	@ (800a000 <HAL_RCC_OscConfig+0x4ac>)
 8009dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009dd8:	f003 0302 	and.w	r3, r3, #2
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1ea      	bne.n	8009db6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f003 0304 	and.w	r3, r3, #4
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 8097 	beq.w	8009f1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009dee:	2300      	movs	r3, #0
 8009df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009df2:	4b83      	ldr	r3, [pc, #524]	@ (800a000 <HAL_RCC_OscConfig+0x4ac>)
 8009df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d10f      	bne.n	8009e1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009dfe:	2300      	movs	r3, #0
 8009e00:	60bb      	str	r3, [r7, #8]
 8009e02:	4b7f      	ldr	r3, [pc, #508]	@ (800a000 <HAL_RCC_OscConfig+0x4ac>)
 8009e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e06:	4a7e      	ldr	r2, [pc, #504]	@ (800a000 <HAL_RCC_OscConfig+0x4ac>)
 8009e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8009e0e:	4b7c      	ldr	r3, [pc, #496]	@ (800a000 <HAL_RCC_OscConfig+0x4ac>)
 8009e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e16:	60bb      	str	r3, [r7, #8]
 8009e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e1e:	4b79      	ldr	r3, [pc, #484]	@ (800a004 <HAL_RCC_OscConfig+0x4b0>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d118      	bne.n	8009e5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009e2a:	4b76      	ldr	r3, [pc, #472]	@ (800a004 <HAL_RCC_OscConfig+0x4b0>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a75      	ldr	r2, [pc, #468]	@ (800a004 <HAL_RCC_OscConfig+0x4b0>)
 8009e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009e36:	f7ff f82f 	bl	8008e98 <HAL_GetTick>
 8009e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e3c:	e008      	b.n	8009e50 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e3e:	f7ff f82b 	bl	8008e98 <HAL_GetTick>
 8009e42:	4602      	mov	r2, r0
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	2b02      	cmp	r3, #2
 8009e4a:	d901      	bls.n	8009e50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	e118      	b.n	800a082 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e50:	4b6c      	ldr	r3, [pc, #432]	@ (800a004 <HAL_RCC_OscConfig+0x4b0>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d0f0      	beq.n	8009e3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d106      	bne.n	8009e72 <HAL_RCC_OscConfig+0x31e>
 8009e64:	4b66      	ldr	r3, [pc, #408]	@ (800a000 <HAL_RCC_OscConfig+0x4ac>)
 8009e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e68:	4a65      	ldr	r2, [pc, #404]	@ (800a000 <HAL_RCC_OscConfig+0x4ac>)
 8009e6a:	f043 0301 	orr.w	r3, r3, #1
 8009e6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e70:	e01c      	b.n	8009eac <HAL_RCC_OscConfig+0x358>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	2b05      	cmp	r3, #5
 8009e78:	d10c      	bne.n	8009e94 <HAL_RCC_OscConfig+0x340>
 8009e7a:	4b61      	ldr	r3, [pc, #388]	@ (800a000 <HAL_RCC_OscConfig+0x4ac>)
 8009e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e7e:	4a60      	ldr	r2, [pc, #384]	@ (800a000 <HAL_RCC_OscConfig+0x4ac>)
 8009e80:	f043 0304 	orr.w	r3, r3, #4
 8009e84:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e86:	4b5e      	ldr	r3, [pc, #376]	@ (800a000 <HAL_RCC_OscConfig+0x4ac>)
 8009e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e8a:	4a5d      	ldr	r2, [pc, #372]	@ (800a000 <HAL_RCC_OscConfig+0x4ac>)
 8009e8c:	f043 0301 	orr.w	r3, r3, #1
 8009e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8009e92:	e00b      	b.n	8009eac <HAL_RCC_OscConfig+0x358>
 8009e94:	4b5a      	ldr	r3, [pc, #360]	@ (800a000 <HAL_RCC_OscConfig+0x4ac>)
 8009e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e98:	4a59      	ldr	r2, [pc, #356]	@ (800a000 <HAL_RCC_OscConfig+0x4ac>)
 8009e9a:	f023 0301 	bic.w	r3, r3, #1
 8009e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ea0:	4b57      	ldr	r3, [pc, #348]	@ (800a000 <HAL_RCC_OscConfig+0x4ac>)
 8009ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ea4:	4a56      	ldr	r2, [pc, #344]	@ (800a000 <HAL_RCC_OscConfig+0x4ac>)
 8009ea6:	f023 0304 	bic.w	r3, r3, #4
 8009eaa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d015      	beq.n	8009ee0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009eb4:	f7fe fff0 	bl	8008e98 <HAL_GetTick>
 8009eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009eba:	e00a      	b.n	8009ed2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ebc:	f7fe ffec 	bl	8008e98 <HAL_GetTick>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	1ad3      	subs	r3, r2, r3
 8009ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d901      	bls.n	8009ed2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	e0d7      	b.n	800a082 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ed2:	4b4b      	ldr	r3, [pc, #300]	@ (800a000 <HAL_RCC_OscConfig+0x4ac>)
 8009ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ed6:	f003 0302 	and.w	r3, r3, #2
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d0ee      	beq.n	8009ebc <HAL_RCC_OscConfig+0x368>
 8009ede:	e014      	b.n	8009f0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ee0:	f7fe ffda 	bl	8008e98 <HAL_GetTick>
 8009ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ee6:	e00a      	b.n	8009efe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ee8:	f7fe ffd6 	bl	8008e98 <HAL_GetTick>
 8009eec:	4602      	mov	r2, r0
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d901      	bls.n	8009efe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009efa:	2303      	movs	r3, #3
 8009efc:	e0c1      	b.n	800a082 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009efe:	4b40      	ldr	r3, [pc, #256]	@ (800a000 <HAL_RCC_OscConfig+0x4ac>)
 8009f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f02:	f003 0302 	and.w	r3, r3, #2
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d1ee      	bne.n	8009ee8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009f0a:	7dfb      	ldrb	r3, [r7, #23]
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d105      	bne.n	8009f1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f10:	4b3b      	ldr	r3, [pc, #236]	@ (800a000 <HAL_RCC_OscConfig+0x4ac>)
 8009f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f14:	4a3a      	ldr	r2, [pc, #232]	@ (800a000 <HAL_RCC_OscConfig+0x4ac>)
 8009f16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	699b      	ldr	r3, [r3, #24]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f000 80ad 	beq.w	800a080 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009f26:	4b36      	ldr	r3, [pc, #216]	@ (800a000 <HAL_RCC_OscConfig+0x4ac>)
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	f003 030c 	and.w	r3, r3, #12
 8009f2e:	2b08      	cmp	r3, #8
 8009f30:	d060      	beq.n	8009ff4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	699b      	ldr	r3, [r3, #24]
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d145      	bne.n	8009fc6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f3a:	4b33      	ldr	r3, [pc, #204]	@ (800a008 <HAL_RCC_OscConfig+0x4b4>)
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f40:	f7fe ffaa 	bl	8008e98 <HAL_GetTick>
 8009f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f46:	e008      	b.n	8009f5a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f48:	f7fe ffa6 	bl	8008e98 <HAL_GetTick>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	d901      	bls.n	8009f5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009f56:	2303      	movs	r3, #3
 8009f58:	e093      	b.n	800a082 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f5a:	4b29      	ldr	r3, [pc, #164]	@ (800a000 <HAL_RCC_OscConfig+0x4ac>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1f0      	bne.n	8009f48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	69da      	ldr	r2, [r3, #28]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a1b      	ldr	r3, [r3, #32]
 8009f6e:	431a      	orrs	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f74:	019b      	lsls	r3, r3, #6
 8009f76:	431a      	orrs	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f7c:	085b      	lsrs	r3, r3, #1
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	041b      	lsls	r3, r3, #16
 8009f82:	431a      	orrs	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f88:	061b      	lsls	r3, r3, #24
 8009f8a:	431a      	orrs	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f90:	071b      	lsls	r3, r3, #28
 8009f92:	491b      	ldr	r1, [pc, #108]	@ (800a000 <HAL_RCC_OscConfig+0x4ac>)
 8009f94:	4313      	orrs	r3, r2
 8009f96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f98:	4b1b      	ldr	r3, [pc, #108]	@ (800a008 <HAL_RCC_OscConfig+0x4b4>)
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f9e:	f7fe ff7b 	bl	8008e98 <HAL_GetTick>
 8009fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009fa4:	e008      	b.n	8009fb8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fa6:	f7fe ff77 	bl	8008e98 <HAL_GetTick>
 8009faa:	4602      	mov	r2, r0
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d901      	bls.n	8009fb8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	e064      	b.n	800a082 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009fb8:	4b11      	ldr	r3, [pc, #68]	@ (800a000 <HAL_RCC_OscConfig+0x4ac>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d0f0      	beq.n	8009fa6 <HAL_RCC_OscConfig+0x452>
 8009fc4:	e05c      	b.n	800a080 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fc6:	4b10      	ldr	r3, [pc, #64]	@ (800a008 <HAL_RCC_OscConfig+0x4b4>)
 8009fc8:	2200      	movs	r2, #0
 8009fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fcc:	f7fe ff64 	bl	8008e98 <HAL_GetTick>
 8009fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009fd2:	e008      	b.n	8009fe6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fd4:	f7fe ff60 	bl	8008e98 <HAL_GetTick>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	1ad3      	subs	r3, r2, r3
 8009fde:	2b02      	cmp	r3, #2
 8009fe0:	d901      	bls.n	8009fe6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8009fe2:	2303      	movs	r3, #3
 8009fe4:	e04d      	b.n	800a082 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009fe6:	4b06      	ldr	r3, [pc, #24]	@ (800a000 <HAL_RCC_OscConfig+0x4ac>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d1f0      	bne.n	8009fd4 <HAL_RCC_OscConfig+0x480>
 8009ff2:	e045      	b.n	800a080 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	699b      	ldr	r3, [r3, #24]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d107      	bne.n	800a00c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e040      	b.n	800a082 <HAL_RCC_OscConfig+0x52e>
 800a000:	40023800 	.word	0x40023800
 800a004:	40007000 	.word	0x40007000
 800a008:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a00c:	4b1f      	ldr	r3, [pc, #124]	@ (800a08c <HAL_RCC_OscConfig+0x538>)
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	2b01      	cmp	r3, #1
 800a018:	d030      	beq.n	800a07c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a024:	429a      	cmp	r2, r3
 800a026:	d129      	bne.n	800a07c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a032:	429a      	cmp	r2, r3
 800a034:	d122      	bne.n	800a07c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a03c:	4013      	ands	r3, r2
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a042:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a044:	4293      	cmp	r3, r2
 800a046:	d119      	bne.n	800a07c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a052:	085b      	lsrs	r3, r3, #1
 800a054:	3b01      	subs	r3, #1
 800a056:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a058:	429a      	cmp	r2, r3
 800a05a:	d10f      	bne.n	800a07c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a066:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a068:	429a      	cmp	r2, r3
 800a06a:	d107      	bne.n	800a07c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a076:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a078:	429a      	cmp	r2, r3
 800a07a:	d001      	beq.n	800a080 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	e000      	b.n	800a082 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3718      	adds	r7, #24
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	40023800 	.word	0x40023800

0800a090 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d101      	bne.n	800a0a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e042      	b.n	800a128 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d106      	bne.n	800a0bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f7fe fcc4 	bl	8008a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2224      	movs	r2, #36	@ 0x24
 800a0c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	68da      	ldr	r2, [r3, #12]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a0d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 fdd3 	bl	800ac80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	691a      	ldr	r2, [r3, #16]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a0e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	695a      	ldr	r2, [r3, #20]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a0f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	68da      	ldr	r2, [r3, #12]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a108:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2220      	movs	r2, #32
 800a114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2220      	movs	r2, #32
 800a11c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a126:	2300      	movs	r3, #0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b08a      	sub	sp, #40	@ 0x28
 800a134:	af02      	add	r7, sp, #8
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	603b      	str	r3, [r7, #0]
 800a13c:	4613      	mov	r3, r2
 800a13e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a140:	2300      	movs	r3, #0
 800a142:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	2b20      	cmp	r3, #32
 800a14e:	d175      	bne.n	800a23c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d002      	beq.n	800a15c <HAL_UART_Transmit+0x2c>
 800a156:	88fb      	ldrh	r3, [r7, #6]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d101      	bne.n	800a160 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	e06e      	b.n	800a23e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2200      	movs	r2, #0
 800a164:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2221      	movs	r2, #33	@ 0x21
 800a16a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a16e:	f7fe fe93 	bl	8008e98 <HAL_GetTick>
 800a172:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	88fa      	ldrh	r2, [r7, #6]
 800a178:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	88fa      	ldrh	r2, [r7, #6]
 800a17e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a188:	d108      	bne.n	800a19c <HAL_UART_Transmit+0x6c>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	691b      	ldr	r3, [r3, #16]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d104      	bne.n	800a19c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a192:	2300      	movs	r3, #0
 800a194:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	61bb      	str	r3, [r7, #24]
 800a19a:	e003      	b.n	800a1a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a1a4:	e02e      	b.n	800a204 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	9300      	str	r3, [sp, #0]
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	2180      	movs	r1, #128	@ 0x80
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f000 fb37 	bl	800a824 <UART_WaitOnFlagUntilTimeout>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d005      	beq.n	800a1c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2220      	movs	r2, #32
 800a1c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e03a      	b.n	800a23e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d10b      	bne.n	800a1e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	881b      	ldrh	r3, [r3, #0]
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	3302      	adds	r3, #2
 800a1e2:	61bb      	str	r3, [r7, #24]
 800a1e4:	e007      	b.n	800a1f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	781a      	ldrb	r2, [r3, #0]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a208:	b29b      	uxth	r3, r3
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d1cb      	bne.n	800a1a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	9300      	str	r3, [sp, #0]
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	2200      	movs	r2, #0
 800a216:	2140      	movs	r1, #64	@ 0x40
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f000 fb03 	bl	800a824 <UART_WaitOnFlagUntilTimeout>
 800a21e:	4603      	mov	r3, r0
 800a220:	2b00      	cmp	r3, #0
 800a222:	d005      	beq.n	800a230 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2220      	movs	r2, #32
 800a228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a22c:	2303      	movs	r3, #3
 800a22e:	e006      	b.n	800a23e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2220      	movs	r2, #32
 800a234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a238:	2300      	movs	r3, #0
 800a23a:	e000      	b.n	800a23e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a23c:	2302      	movs	r3, #2
  }
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3720      	adds	r7, #32
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}

0800a246 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b084      	sub	sp, #16
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	60f8      	str	r0, [r7, #12]
 800a24e:	60b9      	str	r1, [r7, #8]
 800a250:	4613      	mov	r3, r2
 800a252:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	2b20      	cmp	r3, #32
 800a25e:	d112      	bne.n	800a286 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d002      	beq.n	800a26c <HAL_UART_Receive_IT+0x26>
 800a266:	88fb      	ldrh	r3, [r7, #6]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d101      	bne.n	800a270 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a26c:	2301      	movs	r3, #1
 800a26e:	e00b      	b.n	800a288 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2200      	movs	r2, #0
 800a274:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a276:	88fb      	ldrh	r3, [r7, #6]
 800a278:	461a      	mov	r2, r3
 800a27a:	68b9      	ldr	r1, [r7, #8]
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f000 fb2a 	bl	800a8d6 <UART_Start_Receive_IT>
 800a282:	4603      	mov	r3, r0
 800a284:	e000      	b.n	800a288 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a286:	2302      	movs	r3, #2
  }
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b0ba      	sub	sp, #232	@ 0xe8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	695b      	ldr	r3, [r3, #20]
 800a2b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a2c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2c6:	f003 030f 	and.w	r3, r3, #15
 800a2ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a2ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d10f      	bne.n	800a2f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a2d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2da:	f003 0320 	and.w	r3, r3, #32
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d009      	beq.n	800a2f6 <HAL_UART_IRQHandler+0x66>
 800a2e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2e6:	f003 0320 	and.w	r3, r3, #32
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d003      	beq.n	800a2f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 fc07 	bl	800ab02 <UART_Receive_IT>
      return;
 800a2f4:	e273      	b.n	800a7de <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a2f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f000 80de 	beq.w	800a4bc <HAL_UART_IRQHandler+0x22c>
 800a300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a304:	f003 0301 	and.w	r3, r3, #1
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d106      	bne.n	800a31a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a30c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a310:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a314:	2b00      	cmp	r3, #0
 800a316:	f000 80d1 	beq.w	800a4bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a31a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a31e:	f003 0301 	and.w	r3, r3, #1
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00b      	beq.n	800a33e <HAL_UART_IRQHandler+0xae>
 800a326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a32a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d005      	beq.n	800a33e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a336:	f043 0201 	orr.w	r2, r3, #1
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a33e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a342:	f003 0304 	and.w	r3, r3, #4
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00b      	beq.n	800a362 <HAL_UART_IRQHandler+0xd2>
 800a34a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a34e:	f003 0301 	and.w	r3, r3, #1
 800a352:	2b00      	cmp	r3, #0
 800a354:	d005      	beq.n	800a362 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a35a:	f043 0202 	orr.w	r2, r3, #2
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a366:	f003 0302 	and.w	r3, r3, #2
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d00b      	beq.n	800a386 <HAL_UART_IRQHandler+0xf6>
 800a36e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a372:	f003 0301 	and.w	r3, r3, #1
 800a376:	2b00      	cmp	r3, #0
 800a378:	d005      	beq.n	800a386 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a37e:	f043 0204 	orr.w	r2, r3, #4
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a38a:	f003 0308 	and.w	r3, r3, #8
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d011      	beq.n	800a3b6 <HAL_UART_IRQHandler+0x126>
 800a392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a396:	f003 0320 	and.w	r3, r3, #32
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d105      	bne.n	800a3aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a39e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3a2:	f003 0301 	and.w	r3, r3, #1
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d005      	beq.n	800a3b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3ae:	f043 0208 	orr.w	r2, r3, #8
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	f000 820a 	beq.w	800a7d4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a3c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3c4:	f003 0320 	and.w	r3, r3, #32
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d008      	beq.n	800a3de <HAL_UART_IRQHandler+0x14e>
 800a3cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3d0:	f003 0320 	and.w	r3, r3, #32
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d002      	beq.n	800a3de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 fb92 	bl	800ab02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	695b      	ldr	r3, [r3, #20]
 800a3e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3e8:	2b40      	cmp	r3, #64	@ 0x40
 800a3ea:	bf0c      	ite	eq
 800a3ec:	2301      	moveq	r3, #1
 800a3ee:	2300      	movne	r3, #0
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3fa:	f003 0308 	and.w	r3, r3, #8
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d103      	bne.n	800a40a <HAL_UART_IRQHandler+0x17a>
 800a402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a406:	2b00      	cmp	r3, #0
 800a408:	d04f      	beq.n	800a4aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 fa9d 	bl	800a94a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	695b      	ldr	r3, [r3, #20]
 800a416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a41a:	2b40      	cmp	r3, #64	@ 0x40
 800a41c:	d141      	bne.n	800a4a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	3314      	adds	r3, #20
 800a424:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a428:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a42c:	e853 3f00 	ldrex	r3, [r3]
 800a430:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a434:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a438:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a43c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	3314      	adds	r3, #20
 800a446:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a44a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a44e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a452:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a456:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a45a:	e841 2300 	strex	r3, r2, [r1]
 800a45e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d1d9      	bne.n	800a41e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d013      	beq.n	800a49a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a476:	4a8a      	ldr	r2, [pc, #552]	@ (800a6a0 <HAL_UART_IRQHandler+0x410>)
 800a478:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a47e:	4618      	mov	r0, r3
 800a480:	f7fe febb 	bl	80091fa <HAL_DMA_Abort_IT>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d016      	beq.n	800a4b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a48e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a494:	4610      	mov	r0, r2
 800a496:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a498:	e00e      	b.n	800a4b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 f9ac 	bl	800a7f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4a0:	e00a      	b.n	800a4b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 f9a8 	bl	800a7f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4a8:	e006      	b.n	800a4b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 f9a4 	bl	800a7f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a4b6:	e18d      	b.n	800a7d4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4b8:	bf00      	nop
    return;
 800a4ba:	e18b      	b.n	800a7d4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	f040 8167 	bne.w	800a794 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a4c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4ca:	f003 0310 	and.w	r3, r3, #16
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f000 8160 	beq.w	800a794 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800a4d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4d8:	f003 0310 	and.w	r3, r3, #16
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f000 8159 	beq.w	800a794 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	60bb      	str	r3, [r7, #8]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	60bb      	str	r3, [r7, #8]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	60bb      	str	r3, [r7, #8]
 800a4f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	695b      	ldr	r3, [r3, #20]
 800a4fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a502:	2b40      	cmp	r3, #64	@ 0x40
 800a504:	f040 80ce 	bne.w	800a6a4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a514:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a518:	2b00      	cmp	r3, #0
 800a51a:	f000 80a9 	beq.w	800a670 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a522:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a526:	429a      	cmp	r2, r3
 800a528:	f080 80a2 	bcs.w	800a670 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a532:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a538:	69db      	ldr	r3, [r3, #28]
 800a53a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a53e:	f000 8088 	beq.w	800a652 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	330c      	adds	r3, #12
 800a548:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a550:	e853 3f00 	ldrex	r3, [r3]
 800a554:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a558:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a55c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a560:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	330c      	adds	r3, #12
 800a56a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a56e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a572:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a576:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a57a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a57e:	e841 2300 	strex	r3, r2, [r1]
 800a582:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a586:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d1d9      	bne.n	800a542 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	3314      	adds	r3, #20
 800a594:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a596:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a598:	e853 3f00 	ldrex	r3, [r3]
 800a59c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a59e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a5a0:	f023 0301 	bic.w	r3, r3, #1
 800a5a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	3314      	adds	r3, #20
 800a5ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a5b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a5b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a5ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a5be:	e841 2300 	strex	r3, r2, [r1]
 800a5c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a5c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1e1      	bne.n	800a58e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	3314      	adds	r3, #20
 800a5d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a5d4:	e853 3f00 	ldrex	r3, [r3]
 800a5d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a5da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	3314      	adds	r3, #20
 800a5ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a5ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a5f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a5f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a5f6:	e841 2300 	strex	r3, r2, [r1]
 800a5fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a5fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1e3      	bne.n	800a5ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2220      	movs	r2, #32
 800a606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	330c      	adds	r3, #12
 800a616:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a618:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a61a:	e853 3f00 	ldrex	r3, [r3]
 800a61e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a620:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a622:	f023 0310 	bic.w	r3, r3, #16
 800a626:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	330c      	adds	r3, #12
 800a630:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a634:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a636:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a638:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a63a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a63c:	e841 2300 	strex	r3, r2, [r1]
 800a640:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a642:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a644:	2b00      	cmp	r3, #0
 800a646:	d1e3      	bne.n	800a610 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7fe fd64 	bl	800911a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2202      	movs	r2, #2
 800a656:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a660:	b29b      	uxth	r3, r3
 800a662:	1ad3      	subs	r3, r2, r3
 800a664:	b29b      	uxth	r3, r3
 800a666:	4619      	mov	r1, r3
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 f8cf 	bl	800a80c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a66e:	e0b3      	b.n	800a7d8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a674:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a678:	429a      	cmp	r2, r3
 800a67a:	f040 80ad 	bne.w	800a7d8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a682:	69db      	ldr	r3, [r3, #28]
 800a684:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a688:	f040 80a6 	bne.w	800a7d8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2202      	movs	r2, #2
 800a690:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a696:	4619      	mov	r1, r3
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 f8b7 	bl	800a80c <HAL_UARTEx_RxEventCallback>
      return;
 800a69e:	e09b      	b.n	800a7d8 <HAL_UART_IRQHandler+0x548>
 800a6a0:	0800aa11 	.word	0x0800aa11
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	1ad3      	subs	r3, r2, r3
 800a6b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f000 808e 	beq.w	800a7dc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800a6c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f000 8089 	beq.w	800a7dc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	330c      	adds	r3, #12
 800a6d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d4:	e853 3f00 	ldrex	r3, [r3]
 800a6d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a6da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	330c      	adds	r3, #12
 800a6ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a6ee:	647a      	str	r2, [r7, #68]	@ 0x44
 800a6f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a6f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6f6:	e841 2300 	strex	r3, r2, [r1]
 800a6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d1e3      	bne.n	800a6ca <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	3314      	adds	r3, #20
 800a708:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a70c:	e853 3f00 	ldrex	r3, [r3]
 800a710:	623b      	str	r3, [r7, #32]
   return(result);
 800a712:	6a3b      	ldr	r3, [r7, #32]
 800a714:	f023 0301 	bic.w	r3, r3, #1
 800a718:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	3314      	adds	r3, #20
 800a722:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a726:	633a      	str	r2, [r7, #48]	@ 0x30
 800a728:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a72a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a72c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a72e:	e841 2300 	strex	r3, r2, [r1]
 800a732:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a736:	2b00      	cmp	r3, #0
 800a738:	d1e3      	bne.n	800a702 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2220      	movs	r2, #32
 800a73e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	330c      	adds	r3, #12
 800a74e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	e853 3f00 	ldrex	r3, [r3]
 800a756:	60fb      	str	r3, [r7, #12]
   return(result);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f023 0310 	bic.w	r3, r3, #16
 800a75e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	330c      	adds	r3, #12
 800a768:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a76c:	61fa      	str	r2, [r7, #28]
 800a76e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a770:	69b9      	ldr	r1, [r7, #24]
 800a772:	69fa      	ldr	r2, [r7, #28]
 800a774:	e841 2300 	strex	r3, r2, [r1]
 800a778:	617b      	str	r3, [r7, #20]
   return(result);
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1e3      	bne.n	800a748 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2202      	movs	r2, #2
 800a784:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a786:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a78a:	4619      	mov	r1, r3
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 f83d 	bl	800a80c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a792:	e023      	b.n	800a7dc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d009      	beq.n	800a7b4 <HAL_UART_IRQHandler+0x524>
 800a7a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d003      	beq.n	800a7b4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 f940 	bl	800aa32 <UART_Transmit_IT>
    return;
 800a7b2:	e014      	b.n	800a7de <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a7b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d00e      	beq.n	800a7de <HAL_UART_IRQHandler+0x54e>
 800a7c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d008      	beq.n	800a7de <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 f980 	bl	800aad2 <UART_EndTransmit_IT>
    return;
 800a7d2:	e004      	b.n	800a7de <HAL_UART_IRQHandler+0x54e>
    return;
 800a7d4:	bf00      	nop
 800a7d6:	e002      	b.n	800a7de <HAL_UART_IRQHandler+0x54e>
      return;
 800a7d8:	bf00      	nop
 800a7da:	e000      	b.n	800a7de <HAL_UART_IRQHandler+0x54e>
      return;
 800a7dc:	bf00      	nop
  }
}
 800a7de:	37e8      	adds	r7, #232	@ 0xe8
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a7ec:	bf00      	nop
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a800:	bf00      	nop
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	460b      	mov	r3, r1
 800a816:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b086      	sub	sp, #24
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	603b      	str	r3, [r7, #0]
 800a830:	4613      	mov	r3, r2
 800a832:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a834:	e03b      	b.n	800a8ae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a836:	6a3b      	ldr	r3, [r7, #32]
 800a838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a83c:	d037      	beq.n	800a8ae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a83e:	f7fe fb2b 	bl	8008e98 <HAL_GetTick>
 800a842:	4602      	mov	r2, r0
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	6a3a      	ldr	r2, [r7, #32]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d302      	bcc.n	800a854 <UART_WaitOnFlagUntilTimeout+0x30>
 800a84e:	6a3b      	ldr	r3, [r7, #32]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d101      	bne.n	800a858 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a854:	2303      	movs	r3, #3
 800a856:	e03a      	b.n	800a8ce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	f003 0304 	and.w	r3, r3, #4
 800a862:	2b00      	cmp	r3, #0
 800a864:	d023      	beq.n	800a8ae <UART_WaitOnFlagUntilTimeout+0x8a>
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	2b80      	cmp	r3, #128	@ 0x80
 800a86a:	d020      	beq.n	800a8ae <UART_WaitOnFlagUntilTimeout+0x8a>
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	2b40      	cmp	r3, #64	@ 0x40
 800a870:	d01d      	beq.n	800a8ae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 0308 	and.w	r3, r3, #8
 800a87c:	2b08      	cmp	r3, #8
 800a87e:	d116      	bne.n	800a8ae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a880:	2300      	movs	r3, #0
 800a882:	617b      	str	r3, [r7, #20]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	617b      	str	r3, [r7, #20]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	617b      	str	r3, [r7, #20]
 800a894:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f000 f857 	bl	800a94a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2208      	movs	r2, #8
 800a8a0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	e00f      	b.n	800a8ce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	68ba      	ldr	r2, [r7, #8]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	bf0c      	ite	eq
 800a8be:	2301      	moveq	r3, #1
 800a8c0:	2300      	movne	r3, #0
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	79fb      	ldrb	r3, [r7, #7]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d0b4      	beq.n	800a836 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a8cc:	2300      	movs	r3, #0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3718      	adds	r7, #24
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8d6:	b480      	push	{r7}
 800a8d8:	b085      	sub	sp, #20
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	60f8      	str	r0, [r7, #12]
 800a8de:	60b9      	str	r1, [r7, #8]
 800a8e0:	4613      	mov	r3, r2
 800a8e2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	68ba      	ldr	r2, [r7, #8]
 800a8e8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	88fa      	ldrh	r2, [r7, #6]
 800a8ee:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	88fa      	ldrh	r2, [r7, #6]
 800a8f4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2222      	movs	r2, #34	@ 0x22
 800a900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	691b      	ldr	r3, [r3, #16]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d007      	beq.n	800a91c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	68da      	ldr	r2, [r3, #12]
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a91a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	695a      	ldr	r2, [r3, #20]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f042 0201 	orr.w	r2, r2, #1
 800a92a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	68da      	ldr	r2, [r3, #12]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f042 0220 	orr.w	r2, r2, #32
 800a93a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3714      	adds	r7, #20
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a94a:	b480      	push	{r7}
 800a94c:	b095      	sub	sp, #84	@ 0x54
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	330c      	adds	r3, #12
 800a958:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a95a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a95c:	e853 3f00 	ldrex	r3, [r3]
 800a960:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a964:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a968:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	330c      	adds	r3, #12
 800a970:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a972:	643a      	str	r2, [r7, #64]	@ 0x40
 800a974:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a976:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a978:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a97a:	e841 2300 	strex	r3, r2, [r1]
 800a97e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a982:	2b00      	cmp	r3, #0
 800a984:	d1e5      	bne.n	800a952 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	3314      	adds	r3, #20
 800a98c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98e:	6a3b      	ldr	r3, [r7, #32]
 800a990:	e853 3f00 	ldrex	r3, [r3]
 800a994:	61fb      	str	r3, [r7, #28]
   return(result);
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	f023 0301 	bic.w	r3, r3, #1
 800a99c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	3314      	adds	r3, #20
 800a9a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a9a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a9a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9ae:	e841 2300 	strex	r3, r2, [r1]
 800a9b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d1e5      	bne.n	800a986 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d119      	bne.n	800a9f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	330c      	adds	r3, #12
 800a9c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	e853 3f00 	ldrex	r3, [r3]
 800a9d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	f023 0310 	bic.w	r3, r3, #16
 800a9d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	330c      	adds	r3, #12
 800a9e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a9e2:	61ba      	str	r2, [r7, #24]
 800a9e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e6:	6979      	ldr	r1, [r7, #20]
 800a9e8:	69ba      	ldr	r2, [r7, #24]
 800a9ea:	e841 2300 	strex	r3, r2, [r1]
 800a9ee:	613b      	str	r3, [r7, #16]
   return(result);
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d1e5      	bne.n	800a9c2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2220      	movs	r2, #32
 800a9fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800aa04:	bf00      	nop
 800aa06:	3754      	adds	r7, #84	@ 0x54
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f7ff fee7 	bl	800a7f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa2a:	bf00      	nop
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800aa32:	b480      	push	{r7}
 800aa34:	b085      	sub	sp, #20
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	2b21      	cmp	r3, #33	@ 0x21
 800aa44:	d13e      	bne.n	800aac4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa4e:	d114      	bne.n	800aa7a <UART_Transmit_IT+0x48>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d110      	bne.n	800aa7a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6a1b      	ldr	r3, [r3, #32]
 800aa5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	881b      	ldrh	r3, [r3, #0]
 800aa62:	461a      	mov	r2, r3
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6a1b      	ldr	r3, [r3, #32]
 800aa72:	1c9a      	adds	r2, r3, #2
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	621a      	str	r2, [r3, #32]
 800aa78:	e008      	b.n	800aa8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6a1b      	ldr	r3, [r3, #32]
 800aa7e:	1c59      	adds	r1, r3, #1
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	6211      	str	r1, [r2, #32]
 800aa84:	781a      	ldrb	r2, [r3, #0]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	3b01      	subs	r3, #1
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	4619      	mov	r1, r3
 800aa9a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d10f      	bne.n	800aac0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	68da      	ldr	r2, [r3, #12]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800aaae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	68da      	ldr	r2, [r3, #12]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aabe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aac0:	2300      	movs	r3, #0
 800aac2:	e000      	b.n	800aac6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800aac4:	2302      	movs	r3, #2
  }
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3714      	adds	r7, #20
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr

0800aad2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b082      	sub	sp, #8
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68da      	ldr	r2, [r3, #12]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aae8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2220      	movs	r2, #32
 800aaee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f7ff fe76 	bl	800a7e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b08c      	sub	sp, #48	@ 0x30
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	2b22      	cmp	r3, #34	@ 0x22
 800ab1c:	f040 80aa 	bne.w	800ac74 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab28:	d115      	bne.n	800ab56 <UART_Receive_IT+0x54>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d111      	bne.n	800ab56 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab36:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab4e:	1c9a      	adds	r2, r3, #2
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	629a      	str	r2, [r3, #40]	@ 0x28
 800ab54:	e024      	b.n	800aba0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab64:	d007      	beq.n	800ab76 <UART_Receive_IT+0x74>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d10a      	bne.n	800ab84 <UART_Receive_IT+0x82>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	691b      	ldr	r3, [r3, #16]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d106      	bne.n	800ab84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	b2da      	uxtb	r2, r3
 800ab7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab80:	701a      	strb	r2, [r3, #0]
 800ab82:	e008      	b.n	800ab96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab90:	b2da      	uxtb	r2, r3
 800ab92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab9a:	1c5a      	adds	r2, r3, #1
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	3b01      	subs	r3, #1
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	4619      	mov	r1, r3
 800abae:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d15d      	bne.n	800ac70 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	68da      	ldr	r2, [r3, #12]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f022 0220 	bic.w	r2, r2, #32
 800abc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	68da      	ldr	r2, [r3, #12]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800abd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	695a      	ldr	r2, [r3, #20]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f022 0201 	bic.w	r2, r2, #1
 800abe2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2220      	movs	r2, #32
 800abe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2200      	movs	r2, #0
 800abf0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d135      	bne.n	800ac66 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	330c      	adds	r3, #12
 800ac06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	e853 3f00 	ldrex	r3, [r3]
 800ac0e:	613b      	str	r3, [r7, #16]
   return(result);
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	f023 0310 	bic.w	r3, r3, #16
 800ac16:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	330c      	adds	r3, #12
 800ac1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac20:	623a      	str	r2, [r7, #32]
 800ac22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac24:	69f9      	ldr	r1, [r7, #28]
 800ac26:	6a3a      	ldr	r2, [r7, #32]
 800ac28:	e841 2300 	strex	r3, r2, [r1]
 800ac2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d1e5      	bne.n	800ac00 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f003 0310 	and.w	r3, r3, #16
 800ac3e:	2b10      	cmp	r3, #16
 800ac40:	d10a      	bne.n	800ac58 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ac42:	2300      	movs	r3, #0
 800ac44:	60fb      	str	r3, [r7, #12]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	60fb      	str	r3, [r7, #12]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	60fb      	str	r3, [r7, #12]
 800ac56:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f7ff fdd4 	bl	800a80c <HAL_UARTEx_RxEventCallback>
 800ac64:	e002      	b.n	800ac6c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f7fd fd2c 	bl	80086c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	e002      	b.n	800ac76 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ac70:	2300      	movs	r3, #0
 800ac72:	e000      	b.n	800ac76 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ac74:	2302      	movs	r3, #2
  }
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3730      	adds	r7, #48	@ 0x30
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
	...

0800ac80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac84:	b0c0      	sub	sp, #256	@ 0x100
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	691b      	ldr	r3, [r3, #16]
 800ac94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ac98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac9c:	68d9      	ldr	r1, [r3, #12]
 800ac9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	ea40 0301 	orr.w	r3, r0, r1
 800aca8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800acaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acae:	689a      	ldr	r2, [r3, #8]
 800acb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acb4:	691b      	ldr	r3, [r3, #16]
 800acb6:	431a      	orrs	r2, r3
 800acb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acbc:	695b      	ldr	r3, [r3, #20]
 800acbe:	431a      	orrs	r2, r3
 800acc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acc4:	69db      	ldr	r3, [r3, #28]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800accc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800acd8:	f021 010c 	bic.w	r1, r1, #12
 800acdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ace6:	430b      	orrs	r3, r1
 800ace8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800acea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	695b      	ldr	r3, [r3, #20]
 800acf2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800acf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acfa:	6999      	ldr	r1, [r3, #24]
 800acfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	ea40 0301 	orr.w	r3, r0, r1
 800ad06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ad08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	4b8f      	ldr	r3, [pc, #572]	@ (800af4c <UART_SetConfig+0x2cc>)
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d005      	beq.n	800ad20 <UART_SetConfig+0xa0>
 800ad14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	4b8d      	ldr	r3, [pc, #564]	@ (800af50 <UART_SetConfig+0x2d0>)
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d104      	bne.n	800ad2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ad20:	f7fe fd5a 	bl	80097d8 <HAL_RCC_GetPCLK2Freq>
 800ad24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800ad28:	e003      	b.n	800ad32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ad2a:	f7fe fd41 	bl	80097b0 <HAL_RCC_GetPCLK1Freq>
 800ad2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad36:	69db      	ldr	r3, [r3, #28]
 800ad38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad3c:	f040 810c 	bne.w	800af58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ad40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ad44:	2200      	movs	r2, #0
 800ad46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ad4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ad4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800ad52:	4622      	mov	r2, r4
 800ad54:	462b      	mov	r3, r5
 800ad56:	1891      	adds	r1, r2, r2
 800ad58:	65b9      	str	r1, [r7, #88]	@ 0x58
 800ad5a:	415b      	adcs	r3, r3
 800ad5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ad5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ad62:	4621      	mov	r1, r4
 800ad64:	eb12 0801 	adds.w	r8, r2, r1
 800ad68:	4629      	mov	r1, r5
 800ad6a:	eb43 0901 	adc.w	r9, r3, r1
 800ad6e:	f04f 0200 	mov.w	r2, #0
 800ad72:	f04f 0300 	mov.w	r3, #0
 800ad76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ad7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ad7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ad82:	4690      	mov	r8, r2
 800ad84:	4699      	mov	r9, r3
 800ad86:	4623      	mov	r3, r4
 800ad88:	eb18 0303 	adds.w	r3, r8, r3
 800ad8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ad90:	462b      	mov	r3, r5
 800ad92:	eb49 0303 	adc.w	r3, r9, r3
 800ad96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ad9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ada6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800adaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800adae:	460b      	mov	r3, r1
 800adb0:	18db      	adds	r3, r3, r3
 800adb2:	653b      	str	r3, [r7, #80]	@ 0x50
 800adb4:	4613      	mov	r3, r2
 800adb6:	eb42 0303 	adc.w	r3, r2, r3
 800adba:	657b      	str	r3, [r7, #84]	@ 0x54
 800adbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800adc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800adc4:	f7fd fa74 	bl	80082b0 <__aeabi_uldivmod>
 800adc8:	4602      	mov	r2, r0
 800adca:	460b      	mov	r3, r1
 800adcc:	4b61      	ldr	r3, [pc, #388]	@ (800af54 <UART_SetConfig+0x2d4>)
 800adce:	fba3 2302 	umull	r2, r3, r3, r2
 800add2:	095b      	lsrs	r3, r3, #5
 800add4:	011c      	lsls	r4, r3, #4
 800add6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800adda:	2200      	movs	r2, #0
 800addc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ade0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ade4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ade8:	4642      	mov	r2, r8
 800adea:	464b      	mov	r3, r9
 800adec:	1891      	adds	r1, r2, r2
 800adee:	64b9      	str	r1, [r7, #72]	@ 0x48
 800adf0:	415b      	adcs	r3, r3
 800adf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800adf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800adf8:	4641      	mov	r1, r8
 800adfa:	eb12 0a01 	adds.w	sl, r2, r1
 800adfe:	4649      	mov	r1, r9
 800ae00:	eb43 0b01 	adc.w	fp, r3, r1
 800ae04:	f04f 0200 	mov.w	r2, #0
 800ae08:	f04f 0300 	mov.w	r3, #0
 800ae0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ae10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ae14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ae18:	4692      	mov	sl, r2
 800ae1a:	469b      	mov	fp, r3
 800ae1c:	4643      	mov	r3, r8
 800ae1e:	eb1a 0303 	adds.w	r3, sl, r3
 800ae22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ae26:	464b      	mov	r3, r9
 800ae28:	eb4b 0303 	adc.w	r3, fp, r3
 800ae2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ae30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ae3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ae40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ae44:	460b      	mov	r3, r1
 800ae46:	18db      	adds	r3, r3, r3
 800ae48:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae4a:	4613      	mov	r3, r2
 800ae4c:	eb42 0303 	adc.w	r3, r2, r3
 800ae50:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ae56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ae5a:	f7fd fa29 	bl	80082b0 <__aeabi_uldivmod>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	460b      	mov	r3, r1
 800ae62:	4611      	mov	r1, r2
 800ae64:	4b3b      	ldr	r3, [pc, #236]	@ (800af54 <UART_SetConfig+0x2d4>)
 800ae66:	fba3 2301 	umull	r2, r3, r3, r1
 800ae6a:	095b      	lsrs	r3, r3, #5
 800ae6c:	2264      	movs	r2, #100	@ 0x64
 800ae6e:	fb02 f303 	mul.w	r3, r2, r3
 800ae72:	1acb      	subs	r3, r1, r3
 800ae74:	00db      	lsls	r3, r3, #3
 800ae76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800ae7a:	4b36      	ldr	r3, [pc, #216]	@ (800af54 <UART_SetConfig+0x2d4>)
 800ae7c:	fba3 2302 	umull	r2, r3, r3, r2
 800ae80:	095b      	lsrs	r3, r3, #5
 800ae82:	005b      	lsls	r3, r3, #1
 800ae84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ae88:	441c      	add	r4, r3
 800ae8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ae94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ae98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ae9c:	4642      	mov	r2, r8
 800ae9e:	464b      	mov	r3, r9
 800aea0:	1891      	adds	r1, r2, r2
 800aea2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800aea4:	415b      	adcs	r3, r3
 800aea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aea8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800aeac:	4641      	mov	r1, r8
 800aeae:	1851      	adds	r1, r2, r1
 800aeb0:	6339      	str	r1, [r7, #48]	@ 0x30
 800aeb2:	4649      	mov	r1, r9
 800aeb4:	414b      	adcs	r3, r1
 800aeb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800aeb8:	f04f 0200 	mov.w	r2, #0
 800aebc:	f04f 0300 	mov.w	r3, #0
 800aec0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800aec4:	4659      	mov	r1, fp
 800aec6:	00cb      	lsls	r3, r1, #3
 800aec8:	4651      	mov	r1, sl
 800aeca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aece:	4651      	mov	r1, sl
 800aed0:	00ca      	lsls	r2, r1, #3
 800aed2:	4610      	mov	r0, r2
 800aed4:	4619      	mov	r1, r3
 800aed6:	4603      	mov	r3, r0
 800aed8:	4642      	mov	r2, r8
 800aeda:	189b      	adds	r3, r3, r2
 800aedc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aee0:	464b      	mov	r3, r9
 800aee2:	460a      	mov	r2, r1
 800aee4:	eb42 0303 	adc.w	r3, r2, r3
 800aee8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aeec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800aef8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800aefc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800af00:	460b      	mov	r3, r1
 800af02:	18db      	adds	r3, r3, r3
 800af04:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af06:	4613      	mov	r3, r2
 800af08:	eb42 0303 	adc.w	r3, r2, r3
 800af0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800af12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800af16:	f7fd f9cb 	bl	80082b0 <__aeabi_uldivmod>
 800af1a:	4602      	mov	r2, r0
 800af1c:	460b      	mov	r3, r1
 800af1e:	4b0d      	ldr	r3, [pc, #52]	@ (800af54 <UART_SetConfig+0x2d4>)
 800af20:	fba3 1302 	umull	r1, r3, r3, r2
 800af24:	095b      	lsrs	r3, r3, #5
 800af26:	2164      	movs	r1, #100	@ 0x64
 800af28:	fb01 f303 	mul.w	r3, r1, r3
 800af2c:	1ad3      	subs	r3, r2, r3
 800af2e:	00db      	lsls	r3, r3, #3
 800af30:	3332      	adds	r3, #50	@ 0x32
 800af32:	4a08      	ldr	r2, [pc, #32]	@ (800af54 <UART_SetConfig+0x2d4>)
 800af34:	fba2 2303 	umull	r2, r3, r2, r3
 800af38:	095b      	lsrs	r3, r3, #5
 800af3a:	f003 0207 	and.w	r2, r3, #7
 800af3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4422      	add	r2, r4
 800af46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800af48:	e106      	b.n	800b158 <UART_SetConfig+0x4d8>
 800af4a:	bf00      	nop
 800af4c:	40011000 	.word	0x40011000
 800af50:	40011400 	.word	0x40011400
 800af54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800af58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800af5c:	2200      	movs	r2, #0
 800af5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800af62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800af66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800af6a:	4642      	mov	r2, r8
 800af6c:	464b      	mov	r3, r9
 800af6e:	1891      	adds	r1, r2, r2
 800af70:	6239      	str	r1, [r7, #32]
 800af72:	415b      	adcs	r3, r3
 800af74:	627b      	str	r3, [r7, #36]	@ 0x24
 800af76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800af7a:	4641      	mov	r1, r8
 800af7c:	1854      	adds	r4, r2, r1
 800af7e:	4649      	mov	r1, r9
 800af80:	eb43 0501 	adc.w	r5, r3, r1
 800af84:	f04f 0200 	mov.w	r2, #0
 800af88:	f04f 0300 	mov.w	r3, #0
 800af8c:	00eb      	lsls	r3, r5, #3
 800af8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800af92:	00e2      	lsls	r2, r4, #3
 800af94:	4614      	mov	r4, r2
 800af96:	461d      	mov	r5, r3
 800af98:	4643      	mov	r3, r8
 800af9a:	18e3      	adds	r3, r4, r3
 800af9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800afa0:	464b      	mov	r3, r9
 800afa2:	eb45 0303 	adc.w	r3, r5, r3
 800afa6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800afaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800afb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800afba:	f04f 0200 	mov.w	r2, #0
 800afbe:	f04f 0300 	mov.w	r3, #0
 800afc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800afc6:	4629      	mov	r1, r5
 800afc8:	008b      	lsls	r3, r1, #2
 800afca:	4621      	mov	r1, r4
 800afcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800afd0:	4621      	mov	r1, r4
 800afd2:	008a      	lsls	r2, r1, #2
 800afd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800afd8:	f7fd f96a 	bl	80082b0 <__aeabi_uldivmod>
 800afdc:	4602      	mov	r2, r0
 800afde:	460b      	mov	r3, r1
 800afe0:	4b60      	ldr	r3, [pc, #384]	@ (800b164 <UART_SetConfig+0x4e4>)
 800afe2:	fba3 2302 	umull	r2, r3, r3, r2
 800afe6:	095b      	lsrs	r3, r3, #5
 800afe8:	011c      	lsls	r4, r3, #4
 800afea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800afee:	2200      	movs	r2, #0
 800aff0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aff4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800aff8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800affc:	4642      	mov	r2, r8
 800affe:	464b      	mov	r3, r9
 800b000:	1891      	adds	r1, r2, r2
 800b002:	61b9      	str	r1, [r7, #24]
 800b004:	415b      	adcs	r3, r3
 800b006:	61fb      	str	r3, [r7, #28]
 800b008:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b00c:	4641      	mov	r1, r8
 800b00e:	1851      	adds	r1, r2, r1
 800b010:	6139      	str	r1, [r7, #16]
 800b012:	4649      	mov	r1, r9
 800b014:	414b      	adcs	r3, r1
 800b016:	617b      	str	r3, [r7, #20]
 800b018:	f04f 0200 	mov.w	r2, #0
 800b01c:	f04f 0300 	mov.w	r3, #0
 800b020:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b024:	4659      	mov	r1, fp
 800b026:	00cb      	lsls	r3, r1, #3
 800b028:	4651      	mov	r1, sl
 800b02a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b02e:	4651      	mov	r1, sl
 800b030:	00ca      	lsls	r2, r1, #3
 800b032:	4610      	mov	r0, r2
 800b034:	4619      	mov	r1, r3
 800b036:	4603      	mov	r3, r0
 800b038:	4642      	mov	r2, r8
 800b03a:	189b      	adds	r3, r3, r2
 800b03c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b040:	464b      	mov	r3, r9
 800b042:	460a      	mov	r2, r1
 800b044:	eb42 0303 	adc.w	r3, r2, r3
 800b048:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b04c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b056:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b058:	f04f 0200 	mov.w	r2, #0
 800b05c:	f04f 0300 	mov.w	r3, #0
 800b060:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b064:	4649      	mov	r1, r9
 800b066:	008b      	lsls	r3, r1, #2
 800b068:	4641      	mov	r1, r8
 800b06a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b06e:	4641      	mov	r1, r8
 800b070:	008a      	lsls	r2, r1, #2
 800b072:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b076:	f7fd f91b 	bl	80082b0 <__aeabi_uldivmod>
 800b07a:	4602      	mov	r2, r0
 800b07c:	460b      	mov	r3, r1
 800b07e:	4611      	mov	r1, r2
 800b080:	4b38      	ldr	r3, [pc, #224]	@ (800b164 <UART_SetConfig+0x4e4>)
 800b082:	fba3 2301 	umull	r2, r3, r3, r1
 800b086:	095b      	lsrs	r3, r3, #5
 800b088:	2264      	movs	r2, #100	@ 0x64
 800b08a:	fb02 f303 	mul.w	r3, r2, r3
 800b08e:	1acb      	subs	r3, r1, r3
 800b090:	011b      	lsls	r3, r3, #4
 800b092:	3332      	adds	r3, #50	@ 0x32
 800b094:	4a33      	ldr	r2, [pc, #204]	@ (800b164 <UART_SetConfig+0x4e4>)
 800b096:	fba2 2303 	umull	r2, r3, r2, r3
 800b09a:	095b      	lsrs	r3, r3, #5
 800b09c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b0a0:	441c      	add	r4, r3
 800b0a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	673b      	str	r3, [r7, #112]	@ 0x70
 800b0aa:	677a      	str	r2, [r7, #116]	@ 0x74
 800b0ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b0b0:	4642      	mov	r2, r8
 800b0b2:	464b      	mov	r3, r9
 800b0b4:	1891      	adds	r1, r2, r2
 800b0b6:	60b9      	str	r1, [r7, #8]
 800b0b8:	415b      	adcs	r3, r3
 800b0ba:	60fb      	str	r3, [r7, #12]
 800b0bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b0c0:	4641      	mov	r1, r8
 800b0c2:	1851      	adds	r1, r2, r1
 800b0c4:	6039      	str	r1, [r7, #0]
 800b0c6:	4649      	mov	r1, r9
 800b0c8:	414b      	adcs	r3, r1
 800b0ca:	607b      	str	r3, [r7, #4]
 800b0cc:	f04f 0200 	mov.w	r2, #0
 800b0d0:	f04f 0300 	mov.w	r3, #0
 800b0d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b0d8:	4659      	mov	r1, fp
 800b0da:	00cb      	lsls	r3, r1, #3
 800b0dc:	4651      	mov	r1, sl
 800b0de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b0e2:	4651      	mov	r1, sl
 800b0e4:	00ca      	lsls	r2, r1, #3
 800b0e6:	4610      	mov	r0, r2
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	4642      	mov	r2, r8
 800b0ee:	189b      	adds	r3, r3, r2
 800b0f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b0f2:	464b      	mov	r3, r9
 800b0f4:	460a      	mov	r2, r1
 800b0f6:	eb42 0303 	adc.w	r3, r2, r3
 800b0fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b0fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	663b      	str	r3, [r7, #96]	@ 0x60
 800b106:	667a      	str	r2, [r7, #100]	@ 0x64
 800b108:	f04f 0200 	mov.w	r2, #0
 800b10c:	f04f 0300 	mov.w	r3, #0
 800b110:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b114:	4649      	mov	r1, r9
 800b116:	008b      	lsls	r3, r1, #2
 800b118:	4641      	mov	r1, r8
 800b11a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b11e:	4641      	mov	r1, r8
 800b120:	008a      	lsls	r2, r1, #2
 800b122:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b126:	f7fd f8c3 	bl	80082b0 <__aeabi_uldivmod>
 800b12a:	4602      	mov	r2, r0
 800b12c:	460b      	mov	r3, r1
 800b12e:	4b0d      	ldr	r3, [pc, #52]	@ (800b164 <UART_SetConfig+0x4e4>)
 800b130:	fba3 1302 	umull	r1, r3, r3, r2
 800b134:	095b      	lsrs	r3, r3, #5
 800b136:	2164      	movs	r1, #100	@ 0x64
 800b138:	fb01 f303 	mul.w	r3, r1, r3
 800b13c:	1ad3      	subs	r3, r2, r3
 800b13e:	011b      	lsls	r3, r3, #4
 800b140:	3332      	adds	r3, #50	@ 0x32
 800b142:	4a08      	ldr	r2, [pc, #32]	@ (800b164 <UART_SetConfig+0x4e4>)
 800b144:	fba2 2303 	umull	r2, r3, r2, r3
 800b148:	095b      	lsrs	r3, r3, #5
 800b14a:	f003 020f 	and.w	r2, r3, #15
 800b14e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4422      	add	r2, r4
 800b156:	609a      	str	r2, [r3, #8]
}
 800b158:	bf00      	nop
 800b15a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b15e:	46bd      	mov	sp, r7
 800b160:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b164:	51eb851f 	.word	0x51eb851f

0800b168 <std>:
 800b168:	2300      	movs	r3, #0
 800b16a:	b510      	push	{r4, lr}
 800b16c:	4604      	mov	r4, r0
 800b16e:	e9c0 3300 	strd	r3, r3, [r0]
 800b172:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b176:	6083      	str	r3, [r0, #8]
 800b178:	8181      	strh	r1, [r0, #12]
 800b17a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b17c:	81c2      	strh	r2, [r0, #14]
 800b17e:	6183      	str	r3, [r0, #24]
 800b180:	4619      	mov	r1, r3
 800b182:	2208      	movs	r2, #8
 800b184:	305c      	adds	r0, #92	@ 0x5c
 800b186:	f000 f9f9 	bl	800b57c <memset>
 800b18a:	4b0d      	ldr	r3, [pc, #52]	@ (800b1c0 <std+0x58>)
 800b18c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b18e:	4b0d      	ldr	r3, [pc, #52]	@ (800b1c4 <std+0x5c>)
 800b190:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b192:	4b0d      	ldr	r3, [pc, #52]	@ (800b1c8 <std+0x60>)
 800b194:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b196:	4b0d      	ldr	r3, [pc, #52]	@ (800b1cc <std+0x64>)
 800b198:	6323      	str	r3, [r4, #48]	@ 0x30
 800b19a:	4b0d      	ldr	r3, [pc, #52]	@ (800b1d0 <std+0x68>)
 800b19c:	6224      	str	r4, [r4, #32]
 800b19e:	429c      	cmp	r4, r3
 800b1a0:	d006      	beq.n	800b1b0 <std+0x48>
 800b1a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b1a6:	4294      	cmp	r4, r2
 800b1a8:	d002      	beq.n	800b1b0 <std+0x48>
 800b1aa:	33d0      	adds	r3, #208	@ 0xd0
 800b1ac:	429c      	cmp	r4, r3
 800b1ae:	d105      	bne.n	800b1bc <std+0x54>
 800b1b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b1b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1b8:	f000 ba58 	b.w	800b66c <__retarget_lock_init_recursive>
 800b1bc:	bd10      	pop	{r4, pc}
 800b1be:	bf00      	nop
 800b1c0:	0800b3cd 	.word	0x0800b3cd
 800b1c4:	0800b3ef 	.word	0x0800b3ef
 800b1c8:	0800b427 	.word	0x0800b427
 800b1cc:	0800b44b 	.word	0x0800b44b
 800b1d0:	20000150 	.word	0x20000150

0800b1d4 <stdio_exit_handler>:
 800b1d4:	4a02      	ldr	r2, [pc, #8]	@ (800b1e0 <stdio_exit_handler+0xc>)
 800b1d6:	4903      	ldr	r1, [pc, #12]	@ (800b1e4 <stdio_exit_handler+0x10>)
 800b1d8:	4803      	ldr	r0, [pc, #12]	@ (800b1e8 <stdio_exit_handler+0x14>)
 800b1da:	f000 b869 	b.w	800b2b0 <_fwalk_sglue>
 800b1de:	bf00      	nop
 800b1e0:	2000003c 	.word	0x2000003c
 800b1e4:	0800bf0d 	.word	0x0800bf0d
 800b1e8:	2000004c 	.word	0x2000004c

0800b1ec <cleanup_stdio>:
 800b1ec:	6841      	ldr	r1, [r0, #4]
 800b1ee:	4b0c      	ldr	r3, [pc, #48]	@ (800b220 <cleanup_stdio+0x34>)
 800b1f0:	4299      	cmp	r1, r3
 800b1f2:	b510      	push	{r4, lr}
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	d001      	beq.n	800b1fc <cleanup_stdio+0x10>
 800b1f8:	f000 fe88 	bl	800bf0c <_fflush_r>
 800b1fc:	68a1      	ldr	r1, [r4, #8]
 800b1fe:	4b09      	ldr	r3, [pc, #36]	@ (800b224 <cleanup_stdio+0x38>)
 800b200:	4299      	cmp	r1, r3
 800b202:	d002      	beq.n	800b20a <cleanup_stdio+0x1e>
 800b204:	4620      	mov	r0, r4
 800b206:	f000 fe81 	bl	800bf0c <_fflush_r>
 800b20a:	68e1      	ldr	r1, [r4, #12]
 800b20c:	4b06      	ldr	r3, [pc, #24]	@ (800b228 <cleanup_stdio+0x3c>)
 800b20e:	4299      	cmp	r1, r3
 800b210:	d004      	beq.n	800b21c <cleanup_stdio+0x30>
 800b212:	4620      	mov	r0, r4
 800b214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b218:	f000 be78 	b.w	800bf0c <_fflush_r>
 800b21c:	bd10      	pop	{r4, pc}
 800b21e:	bf00      	nop
 800b220:	20000150 	.word	0x20000150
 800b224:	200001b8 	.word	0x200001b8
 800b228:	20000220 	.word	0x20000220

0800b22c <global_stdio_init.part.0>:
 800b22c:	b510      	push	{r4, lr}
 800b22e:	4b0b      	ldr	r3, [pc, #44]	@ (800b25c <global_stdio_init.part.0+0x30>)
 800b230:	4c0b      	ldr	r4, [pc, #44]	@ (800b260 <global_stdio_init.part.0+0x34>)
 800b232:	4a0c      	ldr	r2, [pc, #48]	@ (800b264 <global_stdio_init.part.0+0x38>)
 800b234:	601a      	str	r2, [r3, #0]
 800b236:	4620      	mov	r0, r4
 800b238:	2200      	movs	r2, #0
 800b23a:	2104      	movs	r1, #4
 800b23c:	f7ff ff94 	bl	800b168 <std>
 800b240:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b244:	2201      	movs	r2, #1
 800b246:	2109      	movs	r1, #9
 800b248:	f7ff ff8e 	bl	800b168 <std>
 800b24c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b250:	2202      	movs	r2, #2
 800b252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b256:	2112      	movs	r1, #18
 800b258:	f7ff bf86 	b.w	800b168 <std>
 800b25c:	20000288 	.word	0x20000288
 800b260:	20000150 	.word	0x20000150
 800b264:	0800b1d5 	.word	0x0800b1d5

0800b268 <__sfp_lock_acquire>:
 800b268:	4801      	ldr	r0, [pc, #4]	@ (800b270 <__sfp_lock_acquire+0x8>)
 800b26a:	f000 ba00 	b.w	800b66e <__retarget_lock_acquire_recursive>
 800b26e:	bf00      	nop
 800b270:	20000291 	.word	0x20000291

0800b274 <__sfp_lock_release>:
 800b274:	4801      	ldr	r0, [pc, #4]	@ (800b27c <__sfp_lock_release+0x8>)
 800b276:	f000 b9fb 	b.w	800b670 <__retarget_lock_release_recursive>
 800b27a:	bf00      	nop
 800b27c:	20000291 	.word	0x20000291

0800b280 <__sinit>:
 800b280:	b510      	push	{r4, lr}
 800b282:	4604      	mov	r4, r0
 800b284:	f7ff fff0 	bl	800b268 <__sfp_lock_acquire>
 800b288:	6a23      	ldr	r3, [r4, #32]
 800b28a:	b11b      	cbz	r3, 800b294 <__sinit+0x14>
 800b28c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b290:	f7ff bff0 	b.w	800b274 <__sfp_lock_release>
 800b294:	4b04      	ldr	r3, [pc, #16]	@ (800b2a8 <__sinit+0x28>)
 800b296:	6223      	str	r3, [r4, #32]
 800b298:	4b04      	ldr	r3, [pc, #16]	@ (800b2ac <__sinit+0x2c>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d1f5      	bne.n	800b28c <__sinit+0xc>
 800b2a0:	f7ff ffc4 	bl	800b22c <global_stdio_init.part.0>
 800b2a4:	e7f2      	b.n	800b28c <__sinit+0xc>
 800b2a6:	bf00      	nop
 800b2a8:	0800b1ed 	.word	0x0800b1ed
 800b2ac:	20000288 	.word	0x20000288

0800b2b0 <_fwalk_sglue>:
 800b2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2b4:	4607      	mov	r7, r0
 800b2b6:	4688      	mov	r8, r1
 800b2b8:	4614      	mov	r4, r2
 800b2ba:	2600      	movs	r6, #0
 800b2bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2c0:	f1b9 0901 	subs.w	r9, r9, #1
 800b2c4:	d505      	bpl.n	800b2d2 <_fwalk_sglue+0x22>
 800b2c6:	6824      	ldr	r4, [r4, #0]
 800b2c8:	2c00      	cmp	r4, #0
 800b2ca:	d1f7      	bne.n	800b2bc <_fwalk_sglue+0xc>
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2d2:	89ab      	ldrh	r3, [r5, #12]
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d907      	bls.n	800b2e8 <_fwalk_sglue+0x38>
 800b2d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	d003      	beq.n	800b2e8 <_fwalk_sglue+0x38>
 800b2e0:	4629      	mov	r1, r5
 800b2e2:	4638      	mov	r0, r7
 800b2e4:	47c0      	blx	r8
 800b2e6:	4306      	orrs	r6, r0
 800b2e8:	3568      	adds	r5, #104	@ 0x68
 800b2ea:	e7e9      	b.n	800b2c0 <_fwalk_sglue+0x10>

0800b2ec <iprintf>:
 800b2ec:	b40f      	push	{r0, r1, r2, r3}
 800b2ee:	b507      	push	{r0, r1, r2, lr}
 800b2f0:	4906      	ldr	r1, [pc, #24]	@ (800b30c <iprintf+0x20>)
 800b2f2:	ab04      	add	r3, sp, #16
 800b2f4:	6808      	ldr	r0, [r1, #0]
 800b2f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2fa:	6881      	ldr	r1, [r0, #8]
 800b2fc:	9301      	str	r3, [sp, #4]
 800b2fe:	f000 fadb 	bl	800b8b8 <_vfiprintf_r>
 800b302:	b003      	add	sp, #12
 800b304:	f85d eb04 	ldr.w	lr, [sp], #4
 800b308:	b004      	add	sp, #16
 800b30a:	4770      	bx	lr
 800b30c:	20000048 	.word	0x20000048

0800b310 <_puts_r>:
 800b310:	6a03      	ldr	r3, [r0, #32]
 800b312:	b570      	push	{r4, r5, r6, lr}
 800b314:	6884      	ldr	r4, [r0, #8]
 800b316:	4605      	mov	r5, r0
 800b318:	460e      	mov	r6, r1
 800b31a:	b90b      	cbnz	r3, 800b320 <_puts_r+0x10>
 800b31c:	f7ff ffb0 	bl	800b280 <__sinit>
 800b320:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b322:	07db      	lsls	r3, r3, #31
 800b324:	d405      	bmi.n	800b332 <_puts_r+0x22>
 800b326:	89a3      	ldrh	r3, [r4, #12]
 800b328:	0598      	lsls	r0, r3, #22
 800b32a:	d402      	bmi.n	800b332 <_puts_r+0x22>
 800b32c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b32e:	f000 f99e 	bl	800b66e <__retarget_lock_acquire_recursive>
 800b332:	89a3      	ldrh	r3, [r4, #12]
 800b334:	0719      	lsls	r1, r3, #28
 800b336:	d502      	bpl.n	800b33e <_puts_r+0x2e>
 800b338:	6923      	ldr	r3, [r4, #16]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d135      	bne.n	800b3aa <_puts_r+0x9a>
 800b33e:	4621      	mov	r1, r4
 800b340:	4628      	mov	r0, r5
 800b342:	f000 f8c5 	bl	800b4d0 <__swsetup_r>
 800b346:	b380      	cbz	r0, 800b3aa <_puts_r+0x9a>
 800b348:	f04f 35ff 	mov.w	r5, #4294967295
 800b34c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b34e:	07da      	lsls	r2, r3, #31
 800b350:	d405      	bmi.n	800b35e <_puts_r+0x4e>
 800b352:	89a3      	ldrh	r3, [r4, #12]
 800b354:	059b      	lsls	r3, r3, #22
 800b356:	d402      	bmi.n	800b35e <_puts_r+0x4e>
 800b358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b35a:	f000 f989 	bl	800b670 <__retarget_lock_release_recursive>
 800b35e:	4628      	mov	r0, r5
 800b360:	bd70      	pop	{r4, r5, r6, pc}
 800b362:	2b00      	cmp	r3, #0
 800b364:	da04      	bge.n	800b370 <_puts_r+0x60>
 800b366:	69a2      	ldr	r2, [r4, #24]
 800b368:	429a      	cmp	r2, r3
 800b36a:	dc17      	bgt.n	800b39c <_puts_r+0x8c>
 800b36c:	290a      	cmp	r1, #10
 800b36e:	d015      	beq.n	800b39c <_puts_r+0x8c>
 800b370:	6823      	ldr	r3, [r4, #0]
 800b372:	1c5a      	adds	r2, r3, #1
 800b374:	6022      	str	r2, [r4, #0]
 800b376:	7019      	strb	r1, [r3, #0]
 800b378:	68a3      	ldr	r3, [r4, #8]
 800b37a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b37e:	3b01      	subs	r3, #1
 800b380:	60a3      	str	r3, [r4, #8]
 800b382:	2900      	cmp	r1, #0
 800b384:	d1ed      	bne.n	800b362 <_puts_r+0x52>
 800b386:	2b00      	cmp	r3, #0
 800b388:	da11      	bge.n	800b3ae <_puts_r+0x9e>
 800b38a:	4622      	mov	r2, r4
 800b38c:	210a      	movs	r1, #10
 800b38e:	4628      	mov	r0, r5
 800b390:	f000 f85f 	bl	800b452 <__swbuf_r>
 800b394:	3001      	adds	r0, #1
 800b396:	d0d7      	beq.n	800b348 <_puts_r+0x38>
 800b398:	250a      	movs	r5, #10
 800b39a:	e7d7      	b.n	800b34c <_puts_r+0x3c>
 800b39c:	4622      	mov	r2, r4
 800b39e:	4628      	mov	r0, r5
 800b3a0:	f000 f857 	bl	800b452 <__swbuf_r>
 800b3a4:	3001      	adds	r0, #1
 800b3a6:	d1e7      	bne.n	800b378 <_puts_r+0x68>
 800b3a8:	e7ce      	b.n	800b348 <_puts_r+0x38>
 800b3aa:	3e01      	subs	r6, #1
 800b3ac:	e7e4      	b.n	800b378 <_puts_r+0x68>
 800b3ae:	6823      	ldr	r3, [r4, #0]
 800b3b0:	1c5a      	adds	r2, r3, #1
 800b3b2:	6022      	str	r2, [r4, #0]
 800b3b4:	220a      	movs	r2, #10
 800b3b6:	701a      	strb	r2, [r3, #0]
 800b3b8:	e7ee      	b.n	800b398 <_puts_r+0x88>
	...

0800b3bc <puts>:
 800b3bc:	4b02      	ldr	r3, [pc, #8]	@ (800b3c8 <puts+0xc>)
 800b3be:	4601      	mov	r1, r0
 800b3c0:	6818      	ldr	r0, [r3, #0]
 800b3c2:	f7ff bfa5 	b.w	800b310 <_puts_r>
 800b3c6:	bf00      	nop
 800b3c8:	20000048 	.word	0x20000048

0800b3cc <__sread>:
 800b3cc:	b510      	push	{r4, lr}
 800b3ce:	460c      	mov	r4, r1
 800b3d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3d4:	f000 f8fc 	bl	800b5d0 <_read_r>
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	bfab      	itete	ge
 800b3dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b3de:	89a3      	ldrhlt	r3, [r4, #12]
 800b3e0:	181b      	addge	r3, r3, r0
 800b3e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b3e6:	bfac      	ite	ge
 800b3e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b3ea:	81a3      	strhlt	r3, [r4, #12]
 800b3ec:	bd10      	pop	{r4, pc}

0800b3ee <__swrite>:
 800b3ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3f2:	461f      	mov	r7, r3
 800b3f4:	898b      	ldrh	r3, [r1, #12]
 800b3f6:	05db      	lsls	r3, r3, #23
 800b3f8:	4605      	mov	r5, r0
 800b3fa:	460c      	mov	r4, r1
 800b3fc:	4616      	mov	r6, r2
 800b3fe:	d505      	bpl.n	800b40c <__swrite+0x1e>
 800b400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b404:	2302      	movs	r3, #2
 800b406:	2200      	movs	r2, #0
 800b408:	f000 f8d0 	bl	800b5ac <_lseek_r>
 800b40c:	89a3      	ldrh	r3, [r4, #12]
 800b40e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b412:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b416:	81a3      	strh	r3, [r4, #12]
 800b418:	4632      	mov	r2, r6
 800b41a:	463b      	mov	r3, r7
 800b41c:	4628      	mov	r0, r5
 800b41e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b422:	f000 b8e7 	b.w	800b5f4 <_write_r>

0800b426 <__sseek>:
 800b426:	b510      	push	{r4, lr}
 800b428:	460c      	mov	r4, r1
 800b42a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b42e:	f000 f8bd 	bl	800b5ac <_lseek_r>
 800b432:	1c43      	adds	r3, r0, #1
 800b434:	89a3      	ldrh	r3, [r4, #12]
 800b436:	bf15      	itete	ne
 800b438:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b43a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b43e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b442:	81a3      	strheq	r3, [r4, #12]
 800b444:	bf18      	it	ne
 800b446:	81a3      	strhne	r3, [r4, #12]
 800b448:	bd10      	pop	{r4, pc}

0800b44a <__sclose>:
 800b44a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b44e:	f000 b89d 	b.w	800b58c <_close_r>

0800b452 <__swbuf_r>:
 800b452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b454:	460e      	mov	r6, r1
 800b456:	4614      	mov	r4, r2
 800b458:	4605      	mov	r5, r0
 800b45a:	b118      	cbz	r0, 800b464 <__swbuf_r+0x12>
 800b45c:	6a03      	ldr	r3, [r0, #32]
 800b45e:	b90b      	cbnz	r3, 800b464 <__swbuf_r+0x12>
 800b460:	f7ff ff0e 	bl	800b280 <__sinit>
 800b464:	69a3      	ldr	r3, [r4, #24]
 800b466:	60a3      	str	r3, [r4, #8]
 800b468:	89a3      	ldrh	r3, [r4, #12]
 800b46a:	071a      	lsls	r2, r3, #28
 800b46c:	d501      	bpl.n	800b472 <__swbuf_r+0x20>
 800b46e:	6923      	ldr	r3, [r4, #16]
 800b470:	b943      	cbnz	r3, 800b484 <__swbuf_r+0x32>
 800b472:	4621      	mov	r1, r4
 800b474:	4628      	mov	r0, r5
 800b476:	f000 f82b 	bl	800b4d0 <__swsetup_r>
 800b47a:	b118      	cbz	r0, 800b484 <__swbuf_r+0x32>
 800b47c:	f04f 37ff 	mov.w	r7, #4294967295
 800b480:	4638      	mov	r0, r7
 800b482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b484:	6823      	ldr	r3, [r4, #0]
 800b486:	6922      	ldr	r2, [r4, #16]
 800b488:	1a98      	subs	r0, r3, r2
 800b48a:	6963      	ldr	r3, [r4, #20]
 800b48c:	b2f6      	uxtb	r6, r6
 800b48e:	4283      	cmp	r3, r0
 800b490:	4637      	mov	r7, r6
 800b492:	dc05      	bgt.n	800b4a0 <__swbuf_r+0x4e>
 800b494:	4621      	mov	r1, r4
 800b496:	4628      	mov	r0, r5
 800b498:	f000 fd38 	bl	800bf0c <_fflush_r>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	d1ed      	bne.n	800b47c <__swbuf_r+0x2a>
 800b4a0:	68a3      	ldr	r3, [r4, #8]
 800b4a2:	3b01      	subs	r3, #1
 800b4a4:	60a3      	str	r3, [r4, #8]
 800b4a6:	6823      	ldr	r3, [r4, #0]
 800b4a8:	1c5a      	adds	r2, r3, #1
 800b4aa:	6022      	str	r2, [r4, #0]
 800b4ac:	701e      	strb	r6, [r3, #0]
 800b4ae:	6962      	ldr	r2, [r4, #20]
 800b4b0:	1c43      	adds	r3, r0, #1
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d004      	beq.n	800b4c0 <__swbuf_r+0x6e>
 800b4b6:	89a3      	ldrh	r3, [r4, #12]
 800b4b8:	07db      	lsls	r3, r3, #31
 800b4ba:	d5e1      	bpl.n	800b480 <__swbuf_r+0x2e>
 800b4bc:	2e0a      	cmp	r6, #10
 800b4be:	d1df      	bne.n	800b480 <__swbuf_r+0x2e>
 800b4c0:	4621      	mov	r1, r4
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	f000 fd22 	bl	800bf0c <_fflush_r>
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	d0d9      	beq.n	800b480 <__swbuf_r+0x2e>
 800b4cc:	e7d6      	b.n	800b47c <__swbuf_r+0x2a>
	...

0800b4d0 <__swsetup_r>:
 800b4d0:	b538      	push	{r3, r4, r5, lr}
 800b4d2:	4b29      	ldr	r3, [pc, #164]	@ (800b578 <__swsetup_r+0xa8>)
 800b4d4:	4605      	mov	r5, r0
 800b4d6:	6818      	ldr	r0, [r3, #0]
 800b4d8:	460c      	mov	r4, r1
 800b4da:	b118      	cbz	r0, 800b4e4 <__swsetup_r+0x14>
 800b4dc:	6a03      	ldr	r3, [r0, #32]
 800b4de:	b90b      	cbnz	r3, 800b4e4 <__swsetup_r+0x14>
 800b4e0:	f7ff fece 	bl	800b280 <__sinit>
 800b4e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4e8:	0719      	lsls	r1, r3, #28
 800b4ea:	d422      	bmi.n	800b532 <__swsetup_r+0x62>
 800b4ec:	06da      	lsls	r2, r3, #27
 800b4ee:	d407      	bmi.n	800b500 <__swsetup_r+0x30>
 800b4f0:	2209      	movs	r2, #9
 800b4f2:	602a      	str	r2, [r5, #0]
 800b4f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4f8:	81a3      	strh	r3, [r4, #12]
 800b4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b4fe:	e033      	b.n	800b568 <__swsetup_r+0x98>
 800b500:	0758      	lsls	r0, r3, #29
 800b502:	d512      	bpl.n	800b52a <__swsetup_r+0x5a>
 800b504:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b506:	b141      	cbz	r1, 800b51a <__swsetup_r+0x4a>
 800b508:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b50c:	4299      	cmp	r1, r3
 800b50e:	d002      	beq.n	800b516 <__swsetup_r+0x46>
 800b510:	4628      	mov	r0, r5
 800b512:	f000 f8af 	bl	800b674 <_free_r>
 800b516:	2300      	movs	r3, #0
 800b518:	6363      	str	r3, [r4, #52]	@ 0x34
 800b51a:	89a3      	ldrh	r3, [r4, #12]
 800b51c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b520:	81a3      	strh	r3, [r4, #12]
 800b522:	2300      	movs	r3, #0
 800b524:	6063      	str	r3, [r4, #4]
 800b526:	6923      	ldr	r3, [r4, #16]
 800b528:	6023      	str	r3, [r4, #0]
 800b52a:	89a3      	ldrh	r3, [r4, #12]
 800b52c:	f043 0308 	orr.w	r3, r3, #8
 800b530:	81a3      	strh	r3, [r4, #12]
 800b532:	6923      	ldr	r3, [r4, #16]
 800b534:	b94b      	cbnz	r3, 800b54a <__swsetup_r+0x7a>
 800b536:	89a3      	ldrh	r3, [r4, #12]
 800b538:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b53c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b540:	d003      	beq.n	800b54a <__swsetup_r+0x7a>
 800b542:	4621      	mov	r1, r4
 800b544:	4628      	mov	r0, r5
 800b546:	f000 fd2f 	bl	800bfa8 <__smakebuf_r>
 800b54a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b54e:	f013 0201 	ands.w	r2, r3, #1
 800b552:	d00a      	beq.n	800b56a <__swsetup_r+0x9a>
 800b554:	2200      	movs	r2, #0
 800b556:	60a2      	str	r2, [r4, #8]
 800b558:	6962      	ldr	r2, [r4, #20]
 800b55a:	4252      	negs	r2, r2
 800b55c:	61a2      	str	r2, [r4, #24]
 800b55e:	6922      	ldr	r2, [r4, #16]
 800b560:	b942      	cbnz	r2, 800b574 <__swsetup_r+0xa4>
 800b562:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b566:	d1c5      	bne.n	800b4f4 <__swsetup_r+0x24>
 800b568:	bd38      	pop	{r3, r4, r5, pc}
 800b56a:	0799      	lsls	r1, r3, #30
 800b56c:	bf58      	it	pl
 800b56e:	6962      	ldrpl	r2, [r4, #20]
 800b570:	60a2      	str	r2, [r4, #8]
 800b572:	e7f4      	b.n	800b55e <__swsetup_r+0x8e>
 800b574:	2000      	movs	r0, #0
 800b576:	e7f7      	b.n	800b568 <__swsetup_r+0x98>
 800b578:	20000048 	.word	0x20000048

0800b57c <memset>:
 800b57c:	4402      	add	r2, r0
 800b57e:	4603      	mov	r3, r0
 800b580:	4293      	cmp	r3, r2
 800b582:	d100      	bne.n	800b586 <memset+0xa>
 800b584:	4770      	bx	lr
 800b586:	f803 1b01 	strb.w	r1, [r3], #1
 800b58a:	e7f9      	b.n	800b580 <memset+0x4>

0800b58c <_close_r>:
 800b58c:	b538      	push	{r3, r4, r5, lr}
 800b58e:	4d06      	ldr	r5, [pc, #24]	@ (800b5a8 <_close_r+0x1c>)
 800b590:	2300      	movs	r3, #0
 800b592:	4604      	mov	r4, r0
 800b594:	4608      	mov	r0, r1
 800b596:	602b      	str	r3, [r5, #0]
 800b598:	f7fd fb6d 	bl	8008c76 <_close>
 800b59c:	1c43      	adds	r3, r0, #1
 800b59e:	d102      	bne.n	800b5a6 <_close_r+0x1a>
 800b5a0:	682b      	ldr	r3, [r5, #0]
 800b5a2:	b103      	cbz	r3, 800b5a6 <_close_r+0x1a>
 800b5a4:	6023      	str	r3, [r4, #0]
 800b5a6:	bd38      	pop	{r3, r4, r5, pc}
 800b5a8:	2000028c 	.word	0x2000028c

0800b5ac <_lseek_r>:
 800b5ac:	b538      	push	{r3, r4, r5, lr}
 800b5ae:	4d07      	ldr	r5, [pc, #28]	@ (800b5cc <_lseek_r+0x20>)
 800b5b0:	4604      	mov	r4, r0
 800b5b2:	4608      	mov	r0, r1
 800b5b4:	4611      	mov	r1, r2
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	602a      	str	r2, [r5, #0]
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	f7fd fb82 	bl	8008cc4 <_lseek>
 800b5c0:	1c43      	adds	r3, r0, #1
 800b5c2:	d102      	bne.n	800b5ca <_lseek_r+0x1e>
 800b5c4:	682b      	ldr	r3, [r5, #0]
 800b5c6:	b103      	cbz	r3, 800b5ca <_lseek_r+0x1e>
 800b5c8:	6023      	str	r3, [r4, #0]
 800b5ca:	bd38      	pop	{r3, r4, r5, pc}
 800b5cc:	2000028c 	.word	0x2000028c

0800b5d0 <_read_r>:
 800b5d0:	b538      	push	{r3, r4, r5, lr}
 800b5d2:	4d07      	ldr	r5, [pc, #28]	@ (800b5f0 <_read_r+0x20>)
 800b5d4:	4604      	mov	r4, r0
 800b5d6:	4608      	mov	r0, r1
 800b5d8:	4611      	mov	r1, r2
 800b5da:	2200      	movs	r2, #0
 800b5dc:	602a      	str	r2, [r5, #0]
 800b5de:	461a      	mov	r2, r3
 800b5e0:	f7fd fb10 	bl	8008c04 <_read>
 800b5e4:	1c43      	adds	r3, r0, #1
 800b5e6:	d102      	bne.n	800b5ee <_read_r+0x1e>
 800b5e8:	682b      	ldr	r3, [r5, #0]
 800b5ea:	b103      	cbz	r3, 800b5ee <_read_r+0x1e>
 800b5ec:	6023      	str	r3, [r4, #0]
 800b5ee:	bd38      	pop	{r3, r4, r5, pc}
 800b5f0:	2000028c 	.word	0x2000028c

0800b5f4 <_write_r>:
 800b5f4:	b538      	push	{r3, r4, r5, lr}
 800b5f6:	4d07      	ldr	r5, [pc, #28]	@ (800b614 <_write_r+0x20>)
 800b5f8:	4604      	mov	r4, r0
 800b5fa:	4608      	mov	r0, r1
 800b5fc:	4611      	mov	r1, r2
 800b5fe:	2200      	movs	r2, #0
 800b600:	602a      	str	r2, [r5, #0]
 800b602:	461a      	mov	r2, r3
 800b604:	f7fd fb1b 	bl	8008c3e <_write>
 800b608:	1c43      	adds	r3, r0, #1
 800b60a:	d102      	bne.n	800b612 <_write_r+0x1e>
 800b60c:	682b      	ldr	r3, [r5, #0]
 800b60e:	b103      	cbz	r3, 800b612 <_write_r+0x1e>
 800b610:	6023      	str	r3, [r4, #0]
 800b612:	bd38      	pop	{r3, r4, r5, pc}
 800b614:	2000028c 	.word	0x2000028c

0800b618 <__errno>:
 800b618:	4b01      	ldr	r3, [pc, #4]	@ (800b620 <__errno+0x8>)
 800b61a:	6818      	ldr	r0, [r3, #0]
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	20000048 	.word	0x20000048

0800b624 <__libc_init_array>:
 800b624:	b570      	push	{r4, r5, r6, lr}
 800b626:	4d0d      	ldr	r5, [pc, #52]	@ (800b65c <__libc_init_array+0x38>)
 800b628:	4c0d      	ldr	r4, [pc, #52]	@ (800b660 <__libc_init_array+0x3c>)
 800b62a:	1b64      	subs	r4, r4, r5
 800b62c:	10a4      	asrs	r4, r4, #2
 800b62e:	2600      	movs	r6, #0
 800b630:	42a6      	cmp	r6, r4
 800b632:	d109      	bne.n	800b648 <__libc_init_array+0x24>
 800b634:	4d0b      	ldr	r5, [pc, #44]	@ (800b664 <__libc_init_array+0x40>)
 800b636:	4c0c      	ldr	r4, [pc, #48]	@ (800b668 <__libc_init_array+0x44>)
 800b638:	f000 fd24 	bl	800c084 <_init>
 800b63c:	1b64      	subs	r4, r4, r5
 800b63e:	10a4      	asrs	r4, r4, #2
 800b640:	2600      	movs	r6, #0
 800b642:	42a6      	cmp	r6, r4
 800b644:	d105      	bne.n	800b652 <__libc_init_array+0x2e>
 800b646:	bd70      	pop	{r4, r5, r6, pc}
 800b648:	f855 3b04 	ldr.w	r3, [r5], #4
 800b64c:	4798      	blx	r3
 800b64e:	3601      	adds	r6, #1
 800b650:	e7ee      	b.n	800b630 <__libc_init_array+0xc>
 800b652:	f855 3b04 	ldr.w	r3, [r5], #4
 800b656:	4798      	blx	r3
 800b658:	3601      	adds	r6, #1
 800b65a:	e7f2      	b.n	800b642 <__libc_init_array+0x1e>
 800b65c:	0800c150 	.word	0x0800c150
 800b660:	0800c150 	.word	0x0800c150
 800b664:	0800c150 	.word	0x0800c150
 800b668:	0800c154 	.word	0x0800c154

0800b66c <__retarget_lock_init_recursive>:
 800b66c:	4770      	bx	lr

0800b66e <__retarget_lock_acquire_recursive>:
 800b66e:	4770      	bx	lr

0800b670 <__retarget_lock_release_recursive>:
 800b670:	4770      	bx	lr
	...

0800b674 <_free_r>:
 800b674:	b538      	push	{r3, r4, r5, lr}
 800b676:	4605      	mov	r5, r0
 800b678:	2900      	cmp	r1, #0
 800b67a:	d041      	beq.n	800b700 <_free_r+0x8c>
 800b67c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b680:	1f0c      	subs	r4, r1, #4
 800b682:	2b00      	cmp	r3, #0
 800b684:	bfb8      	it	lt
 800b686:	18e4      	addlt	r4, r4, r3
 800b688:	f000 f8e0 	bl	800b84c <__malloc_lock>
 800b68c:	4a1d      	ldr	r2, [pc, #116]	@ (800b704 <_free_r+0x90>)
 800b68e:	6813      	ldr	r3, [r2, #0]
 800b690:	b933      	cbnz	r3, 800b6a0 <_free_r+0x2c>
 800b692:	6063      	str	r3, [r4, #4]
 800b694:	6014      	str	r4, [r2, #0]
 800b696:	4628      	mov	r0, r5
 800b698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b69c:	f000 b8dc 	b.w	800b858 <__malloc_unlock>
 800b6a0:	42a3      	cmp	r3, r4
 800b6a2:	d908      	bls.n	800b6b6 <_free_r+0x42>
 800b6a4:	6820      	ldr	r0, [r4, #0]
 800b6a6:	1821      	adds	r1, r4, r0
 800b6a8:	428b      	cmp	r3, r1
 800b6aa:	bf01      	itttt	eq
 800b6ac:	6819      	ldreq	r1, [r3, #0]
 800b6ae:	685b      	ldreq	r3, [r3, #4]
 800b6b0:	1809      	addeq	r1, r1, r0
 800b6b2:	6021      	streq	r1, [r4, #0]
 800b6b4:	e7ed      	b.n	800b692 <_free_r+0x1e>
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	b10b      	cbz	r3, 800b6c0 <_free_r+0x4c>
 800b6bc:	42a3      	cmp	r3, r4
 800b6be:	d9fa      	bls.n	800b6b6 <_free_r+0x42>
 800b6c0:	6811      	ldr	r1, [r2, #0]
 800b6c2:	1850      	adds	r0, r2, r1
 800b6c4:	42a0      	cmp	r0, r4
 800b6c6:	d10b      	bne.n	800b6e0 <_free_r+0x6c>
 800b6c8:	6820      	ldr	r0, [r4, #0]
 800b6ca:	4401      	add	r1, r0
 800b6cc:	1850      	adds	r0, r2, r1
 800b6ce:	4283      	cmp	r3, r0
 800b6d0:	6011      	str	r1, [r2, #0]
 800b6d2:	d1e0      	bne.n	800b696 <_free_r+0x22>
 800b6d4:	6818      	ldr	r0, [r3, #0]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	6053      	str	r3, [r2, #4]
 800b6da:	4408      	add	r0, r1
 800b6dc:	6010      	str	r0, [r2, #0]
 800b6de:	e7da      	b.n	800b696 <_free_r+0x22>
 800b6e0:	d902      	bls.n	800b6e8 <_free_r+0x74>
 800b6e2:	230c      	movs	r3, #12
 800b6e4:	602b      	str	r3, [r5, #0]
 800b6e6:	e7d6      	b.n	800b696 <_free_r+0x22>
 800b6e8:	6820      	ldr	r0, [r4, #0]
 800b6ea:	1821      	adds	r1, r4, r0
 800b6ec:	428b      	cmp	r3, r1
 800b6ee:	bf04      	itt	eq
 800b6f0:	6819      	ldreq	r1, [r3, #0]
 800b6f2:	685b      	ldreq	r3, [r3, #4]
 800b6f4:	6063      	str	r3, [r4, #4]
 800b6f6:	bf04      	itt	eq
 800b6f8:	1809      	addeq	r1, r1, r0
 800b6fa:	6021      	streq	r1, [r4, #0]
 800b6fc:	6054      	str	r4, [r2, #4]
 800b6fe:	e7ca      	b.n	800b696 <_free_r+0x22>
 800b700:	bd38      	pop	{r3, r4, r5, pc}
 800b702:	bf00      	nop
 800b704:	20000298 	.word	0x20000298

0800b708 <sbrk_aligned>:
 800b708:	b570      	push	{r4, r5, r6, lr}
 800b70a:	4e0f      	ldr	r6, [pc, #60]	@ (800b748 <sbrk_aligned+0x40>)
 800b70c:	460c      	mov	r4, r1
 800b70e:	6831      	ldr	r1, [r6, #0]
 800b710:	4605      	mov	r5, r0
 800b712:	b911      	cbnz	r1, 800b71a <sbrk_aligned+0x12>
 800b714:	f000 fca6 	bl	800c064 <_sbrk_r>
 800b718:	6030      	str	r0, [r6, #0]
 800b71a:	4621      	mov	r1, r4
 800b71c:	4628      	mov	r0, r5
 800b71e:	f000 fca1 	bl	800c064 <_sbrk_r>
 800b722:	1c43      	adds	r3, r0, #1
 800b724:	d103      	bne.n	800b72e <sbrk_aligned+0x26>
 800b726:	f04f 34ff 	mov.w	r4, #4294967295
 800b72a:	4620      	mov	r0, r4
 800b72c:	bd70      	pop	{r4, r5, r6, pc}
 800b72e:	1cc4      	adds	r4, r0, #3
 800b730:	f024 0403 	bic.w	r4, r4, #3
 800b734:	42a0      	cmp	r0, r4
 800b736:	d0f8      	beq.n	800b72a <sbrk_aligned+0x22>
 800b738:	1a21      	subs	r1, r4, r0
 800b73a:	4628      	mov	r0, r5
 800b73c:	f000 fc92 	bl	800c064 <_sbrk_r>
 800b740:	3001      	adds	r0, #1
 800b742:	d1f2      	bne.n	800b72a <sbrk_aligned+0x22>
 800b744:	e7ef      	b.n	800b726 <sbrk_aligned+0x1e>
 800b746:	bf00      	nop
 800b748:	20000294 	.word	0x20000294

0800b74c <_malloc_r>:
 800b74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b750:	1ccd      	adds	r5, r1, #3
 800b752:	f025 0503 	bic.w	r5, r5, #3
 800b756:	3508      	adds	r5, #8
 800b758:	2d0c      	cmp	r5, #12
 800b75a:	bf38      	it	cc
 800b75c:	250c      	movcc	r5, #12
 800b75e:	2d00      	cmp	r5, #0
 800b760:	4606      	mov	r6, r0
 800b762:	db01      	blt.n	800b768 <_malloc_r+0x1c>
 800b764:	42a9      	cmp	r1, r5
 800b766:	d904      	bls.n	800b772 <_malloc_r+0x26>
 800b768:	230c      	movs	r3, #12
 800b76a:	6033      	str	r3, [r6, #0]
 800b76c:	2000      	movs	r0, #0
 800b76e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b772:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b848 <_malloc_r+0xfc>
 800b776:	f000 f869 	bl	800b84c <__malloc_lock>
 800b77a:	f8d8 3000 	ldr.w	r3, [r8]
 800b77e:	461c      	mov	r4, r3
 800b780:	bb44      	cbnz	r4, 800b7d4 <_malloc_r+0x88>
 800b782:	4629      	mov	r1, r5
 800b784:	4630      	mov	r0, r6
 800b786:	f7ff ffbf 	bl	800b708 <sbrk_aligned>
 800b78a:	1c43      	adds	r3, r0, #1
 800b78c:	4604      	mov	r4, r0
 800b78e:	d158      	bne.n	800b842 <_malloc_r+0xf6>
 800b790:	f8d8 4000 	ldr.w	r4, [r8]
 800b794:	4627      	mov	r7, r4
 800b796:	2f00      	cmp	r7, #0
 800b798:	d143      	bne.n	800b822 <_malloc_r+0xd6>
 800b79a:	2c00      	cmp	r4, #0
 800b79c:	d04b      	beq.n	800b836 <_malloc_r+0xea>
 800b79e:	6823      	ldr	r3, [r4, #0]
 800b7a0:	4639      	mov	r1, r7
 800b7a2:	4630      	mov	r0, r6
 800b7a4:	eb04 0903 	add.w	r9, r4, r3
 800b7a8:	f000 fc5c 	bl	800c064 <_sbrk_r>
 800b7ac:	4581      	cmp	r9, r0
 800b7ae:	d142      	bne.n	800b836 <_malloc_r+0xea>
 800b7b0:	6821      	ldr	r1, [r4, #0]
 800b7b2:	1a6d      	subs	r5, r5, r1
 800b7b4:	4629      	mov	r1, r5
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	f7ff ffa6 	bl	800b708 <sbrk_aligned>
 800b7bc:	3001      	adds	r0, #1
 800b7be:	d03a      	beq.n	800b836 <_malloc_r+0xea>
 800b7c0:	6823      	ldr	r3, [r4, #0]
 800b7c2:	442b      	add	r3, r5
 800b7c4:	6023      	str	r3, [r4, #0]
 800b7c6:	f8d8 3000 	ldr.w	r3, [r8]
 800b7ca:	685a      	ldr	r2, [r3, #4]
 800b7cc:	bb62      	cbnz	r2, 800b828 <_malloc_r+0xdc>
 800b7ce:	f8c8 7000 	str.w	r7, [r8]
 800b7d2:	e00f      	b.n	800b7f4 <_malloc_r+0xa8>
 800b7d4:	6822      	ldr	r2, [r4, #0]
 800b7d6:	1b52      	subs	r2, r2, r5
 800b7d8:	d420      	bmi.n	800b81c <_malloc_r+0xd0>
 800b7da:	2a0b      	cmp	r2, #11
 800b7dc:	d917      	bls.n	800b80e <_malloc_r+0xc2>
 800b7de:	1961      	adds	r1, r4, r5
 800b7e0:	42a3      	cmp	r3, r4
 800b7e2:	6025      	str	r5, [r4, #0]
 800b7e4:	bf18      	it	ne
 800b7e6:	6059      	strne	r1, [r3, #4]
 800b7e8:	6863      	ldr	r3, [r4, #4]
 800b7ea:	bf08      	it	eq
 800b7ec:	f8c8 1000 	streq.w	r1, [r8]
 800b7f0:	5162      	str	r2, [r4, r5]
 800b7f2:	604b      	str	r3, [r1, #4]
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	f000 f82f 	bl	800b858 <__malloc_unlock>
 800b7fa:	f104 000b 	add.w	r0, r4, #11
 800b7fe:	1d23      	adds	r3, r4, #4
 800b800:	f020 0007 	bic.w	r0, r0, #7
 800b804:	1ac2      	subs	r2, r0, r3
 800b806:	bf1c      	itt	ne
 800b808:	1a1b      	subne	r3, r3, r0
 800b80a:	50a3      	strne	r3, [r4, r2]
 800b80c:	e7af      	b.n	800b76e <_malloc_r+0x22>
 800b80e:	6862      	ldr	r2, [r4, #4]
 800b810:	42a3      	cmp	r3, r4
 800b812:	bf0c      	ite	eq
 800b814:	f8c8 2000 	streq.w	r2, [r8]
 800b818:	605a      	strne	r2, [r3, #4]
 800b81a:	e7eb      	b.n	800b7f4 <_malloc_r+0xa8>
 800b81c:	4623      	mov	r3, r4
 800b81e:	6864      	ldr	r4, [r4, #4]
 800b820:	e7ae      	b.n	800b780 <_malloc_r+0x34>
 800b822:	463c      	mov	r4, r7
 800b824:	687f      	ldr	r7, [r7, #4]
 800b826:	e7b6      	b.n	800b796 <_malloc_r+0x4a>
 800b828:	461a      	mov	r2, r3
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	42a3      	cmp	r3, r4
 800b82e:	d1fb      	bne.n	800b828 <_malloc_r+0xdc>
 800b830:	2300      	movs	r3, #0
 800b832:	6053      	str	r3, [r2, #4]
 800b834:	e7de      	b.n	800b7f4 <_malloc_r+0xa8>
 800b836:	230c      	movs	r3, #12
 800b838:	6033      	str	r3, [r6, #0]
 800b83a:	4630      	mov	r0, r6
 800b83c:	f000 f80c 	bl	800b858 <__malloc_unlock>
 800b840:	e794      	b.n	800b76c <_malloc_r+0x20>
 800b842:	6005      	str	r5, [r0, #0]
 800b844:	e7d6      	b.n	800b7f4 <_malloc_r+0xa8>
 800b846:	bf00      	nop
 800b848:	20000298 	.word	0x20000298

0800b84c <__malloc_lock>:
 800b84c:	4801      	ldr	r0, [pc, #4]	@ (800b854 <__malloc_lock+0x8>)
 800b84e:	f7ff bf0e 	b.w	800b66e <__retarget_lock_acquire_recursive>
 800b852:	bf00      	nop
 800b854:	20000290 	.word	0x20000290

0800b858 <__malloc_unlock>:
 800b858:	4801      	ldr	r0, [pc, #4]	@ (800b860 <__malloc_unlock+0x8>)
 800b85a:	f7ff bf09 	b.w	800b670 <__retarget_lock_release_recursive>
 800b85e:	bf00      	nop
 800b860:	20000290 	.word	0x20000290

0800b864 <__sfputc_r>:
 800b864:	6893      	ldr	r3, [r2, #8]
 800b866:	3b01      	subs	r3, #1
 800b868:	2b00      	cmp	r3, #0
 800b86a:	b410      	push	{r4}
 800b86c:	6093      	str	r3, [r2, #8]
 800b86e:	da08      	bge.n	800b882 <__sfputc_r+0x1e>
 800b870:	6994      	ldr	r4, [r2, #24]
 800b872:	42a3      	cmp	r3, r4
 800b874:	db01      	blt.n	800b87a <__sfputc_r+0x16>
 800b876:	290a      	cmp	r1, #10
 800b878:	d103      	bne.n	800b882 <__sfputc_r+0x1e>
 800b87a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b87e:	f7ff bde8 	b.w	800b452 <__swbuf_r>
 800b882:	6813      	ldr	r3, [r2, #0]
 800b884:	1c58      	adds	r0, r3, #1
 800b886:	6010      	str	r0, [r2, #0]
 800b888:	7019      	strb	r1, [r3, #0]
 800b88a:	4608      	mov	r0, r1
 800b88c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b890:	4770      	bx	lr

0800b892 <__sfputs_r>:
 800b892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b894:	4606      	mov	r6, r0
 800b896:	460f      	mov	r7, r1
 800b898:	4614      	mov	r4, r2
 800b89a:	18d5      	adds	r5, r2, r3
 800b89c:	42ac      	cmp	r4, r5
 800b89e:	d101      	bne.n	800b8a4 <__sfputs_r+0x12>
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	e007      	b.n	800b8b4 <__sfputs_r+0x22>
 800b8a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8a8:	463a      	mov	r2, r7
 800b8aa:	4630      	mov	r0, r6
 800b8ac:	f7ff ffda 	bl	800b864 <__sfputc_r>
 800b8b0:	1c43      	adds	r3, r0, #1
 800b8b2:	d1f3      	bne.n	800b89c <__sfputs_r+0xa>
 800b8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b8b8 <_vfiprintf_r>:
 800b8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8bc:	460d      	mov	r5, r1
 800b8be:	b09d      	sub	sp, #116	@ 0x74
 800b8c0:	4614      	mov	r4, r2
 800b8c2:	4698      	mov	r8, r3
 800b8c4:	4606      	mov	r6, r0
 800b8c6:	b118      	cbz	r0, 800b8d0 <_vfiprintf_r+0x18>
 800b8c8:	6a03      	ldr	r3, [r0, #32]
 800b8ca:	b90b      	cbnz	r3, 800b8d0 <_vfiprintf_r+0x18>
 800b8cc:	f7ff fcd8 	bl	800b280 <__sinit>
 800b8d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8d2:	07d9      	lsls	r1, r3, #31
 800b8d4:	d405      	bmi.n	800b8e2 <_vfiprintf_r+0x2a>
 800b8d6:	89ab      	ldrh	r3, [r5, #12]
 800b8d8:	059a      	lsls	r2, r3, #22
 800b8da:	d402      	bmi.n	800b8e2 <_vfiprintf_r+0x2a>
 800b8dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8de:	f7ff fec6 	bl	800b66e <__retarget_lock_acquire_recursive>
 800b8e2:	89ab      	ldrh	r3, [r5, #12]
 800b8e4:	071b      	lsls	r3, r3, #28
 800b8e6:	d501      	bpl.n	800b8ec <_vfiprintf_r+0x34>
 800b8e8:	692b      	ldr	r3, [r5, #16]
 800b8ea:	b99b      	cbnz	r3, 800b914 <_vfiprintf_r+0x5c>
 800b8ec:	4629      	mov	r1, r5
 800b8ee:	4630      	mov	r0, r6
 800b8f0:	f7ff fdee 	bl	800b4d0 <__swsetup_r>
 800b8f4:	b170      	cbz	r0, 800b914 <_vfiprintf_r+0x5c>
 800b8f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8f8:	07dc      	lsls	r4, r3, #31
 800b8fa:	d504      	bpl.n	800b906 <_vfiprintf_r+0x4e>
 800b8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b900:	b01d      	add	sp, #116	@ 0x74
 800b902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b906:	89ab      	ldrh	r3, [r5, #12]
 800b908:	0598      	lsls	r0, r3, #22
 800b90a:	d4f7      	bmi.n	800b8fc <_vfiprintf_r+0x44>
 800b90c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b90e:	f7ff feaf 	bl	800b670 <__retarget_lock_release_recursive>
 800b912:	e7f3      	b.n	800b8fc <_vfiprintf_r+0x44>
 800b914:	2300      	movs	r3, #0
 800b916:	9309      	str	r3, [sp, #36]	@ 0x24
 800b918:	2320      	movs	r3, #32
 800b91a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b91e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b922:	2330      	movs	r3, #48	@ 0x30
 800b924:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bad4 <_vfiprintf_r+0x21c>
 800b928:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b92c:	f04f 0901 	mov.w	r9, #1
 800b930:	4623      	mov	r3, r4
 800b932:	469a      	mov	sl, r3
 800b934:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b938:	b10a      	cbz	r2, 800b93e <_vfiprintf_r+0x86>
 800b93a:	2a25      	cmp	r2, #37	@ 0x25
 800b93c:	d1f9      	bne.n	800b932 <_vfiprintf_r+0x7a>
 800b93e:	ebba 0b04 	subs.w	fp, sl, r4
 800b942:	d00b      	beq.n	800b95c <_vfiprintf_r+0xa4>
 800b944:	465b      	mov	r3, fp
 800b946:	4622      	mov	r2, r4
 800b948:	4629      	mov	r1, r5
 800b94a:	4630      	mov	r0, r6
 800b94c:	f7ff ffa1 	bl	800b892 <__sfputs_r>
 800b950:	3001      	adds	r0, #1
 800b952:	f000 80a7 	beq.w	800baa4 <_vfiprintf_r+0x1ec>
 800b956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b958:	445a      	add	r2, fp
 800b95a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b95c:	f89a 3000 	ldrb.w	r3, [sl]
 800b960:	2b00      	cmp	r3, #0
 800b962:	f000 809f 	beq.w	800baa4 <_vfiprintf_r+0x1ec>
 800b966:	2300      	movs	r3, #0
 800b968:	f04f 32ff 	mov.w	r2, #4294967295
 800b96c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b970:	f10a 0a01 	add.w	sl, sl, #1
 800b974:	9304      	str	r3, [sp, #16]
 800b976:	9307      	str	r3, [sp, #28]
 800b978:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b97c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b97e:	4654      	mov	r4, sl
 800b980:	2205      	movs	r2, #5
 800b982:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b986:	4853      	ldr	r0, [pc, #332]	@ (800bad4 <_vfiprintf_r+0x21c>)
 800b988:	f7fc fc42 	bl	8008210 <memchr>
 800b98c:	9a04      	ldr	r2, [sp, #16]
 800b98e:	b9d8      	cbnz	r0, 800b9c8 <_vfiprintf_r+0x110>
 800b990:	06d1      	lsls	r1, r2, #27
 800b992:	bf44      	itt	mi
 800b994:	2320      	movmi	r3, #32
 800b996:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b99a:	0713      	lsls	r3, r2, #28
 800b99c:	bf44      	itt	mi
 800b99e:	232b      	movmi	r3, #43	@ 0x2b
 800b9a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9aa:	d015      	beq.n	800b9d8 <_vfiprintf_r+0x120>
 800b9ac:	9a07      	ldr	r2, [sp, #28]
 800b9ae:	4654      	mov	r4, sl
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	f04f 0c0a 	mov.w	ip, #10
 800b9b6:	4621      	mov	r1, r4
 800b9b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9bc:	3b30      	subs	r3, #48	@ 0x30
 800b9be:	2b09      	cmp	r3, #9
 800b9c0:	d94b      	bls.n	800ba5a <_vfiprintf_r+0x1a2>
 800b9c2:	b1b0      	cbz	r0, 800b9f2 <_vfiprintf_r+0x13a>
 800b9c4:	9207      	str	r2, [sp, #28]
 800b9c6:	e014      	b.n	800b9f2 <_vfiprintf_r+0x13a>
 800b9c8:	eba0 0308 	sub.w	r3, r0, r8
 800b9cc:	fa09 f303 	lsl.w	r3, r9, r3
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	9304      	str	r3, [sp, #16]
 800b9d4:	46a2      	mov	sl, r4
 800b9d6:	e7d2      	b.n	800b97e <_vfiprintf_r+0xc6>
 800b9d8:	9b03      	ldr	r3, [sp, #12]
 800b9da:	1d19      	adds	r1, r3, #4
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	9103      	str	r1, [sp, #12]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	bfbb      	ittet	lt
 800b9e4:	425b      	neglt	r3, r3
 800b9e6:	f042 0202 	orrlt.w	r2, r2, #2
 800b9ea:	9307      	strge	r3, [sp, #28]
 800b9ec:	9307      	strlt	r3, [sp, #28]
 800b9ee:	bfb8      	it	lt
 800b9f0:	9204      	strlt	r2, [sp, #16]
 800b9f2:	7823      	ldrb	r3, [r4, #0]
 800b9f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9f6:	d10a      	bne.n	800ba0e <_vfiprintf_r+0x156>
 800b9f8:	7863      	ldrb	r3, [r4, #1]
 800b9fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9fc:	d132      	bne.n	800ba64 <_vfiprintf_r+0x1ac>
 800b9fe:	9b03      	ldr	r3, [sp, #12]
 800ba00:	1d1a      	adds	r2, r3, #4
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	9203      	str	r2, [sp, #12]
 800ba06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba0a:	3402      	adds	r4, #2
 800ba0c:	9305      	str	r3, [sp, #20]
 800ba0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bae4 <_vfiprintf_r+0x22c>
 800ba12:	7821      	ldrb	r1, [r4, #0]
 800ba14:	2203      	movs	r2, #3
 800ba16:	4650      	mov	r0, sl
 800ba18:	f7fc fbfa 	bl	8008210 <memchr>
 800ba1c:	b138      	cbz	r0, 800ba2e <_vfiprintf_r+0x176>
 800ba1e:	9b04      	ldr	r3, [sp, #16]
 800ba20:	eba0 000a 	sub.w	r0, r0, sl
 800ba24:	2240      	movs	r2, #64	@ 0x40
 800ba26:	4082      	lsls	r2, r0
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	3401      	adds	r4, #1
 800ba2c:	9304      	str	r3, [sp, #16]
 800ba2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba32:	4829      	ldr	r0, [pc, #164]	@ (800bad8 <_vfiprintf_r+0x220>)
 800ba34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba38:	2206      	movs	r2, #6
 800ba3a:	f7fc fbe9 	bl	8008210 <memchr>
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	d03f      	beq.n	800bac2 <_vfiprintf_r+0x20a>
 800ba42:	4b26      	ldr	r3, [pc, #152]	@ (800badc <_vfiprintf_r+0x224>)
 800ba44:	bb1b      	cbnz	r3, 800ba8e <_vfiprintf_r+0x1d6>
 800ba46:	9b03      	ldr	r3, [sp, #12]
 800ba48:	3307      	adds	r3, #7
 800ba4a:	f023 0307 	bic.w	r3, r3, #7
 800ba4e:	3308      	adds	r3, #8
 800ba50:	9303      	str	r3, [sp, #12]
 800ba52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba54:	443b      	add	r3, r7
 800ba56:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba58:	e76a      	b.n	800b930 <_vfiprintf_r+0x78>
 800ba5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba5e:	460c      	mov	r4, r1
 800ba60:	2001      	movs	r0, #1
 800ba62:	e7a8      	b.n	800b9b6 <_vfiprintf_r+0xfe>
 800ba64:	2300      	movs	r3, #0
 800ba66:	3401      	adds	r4, #1
 800ba68:	9305      	str	r3, [sp, #20]
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	f04f 0c0a 	mov.w	ip, #10
 800ba70:	4620      	mov	r0, r4
 800ba72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba76:	3a30      	subs	r2, #48	@ 0x30
 800ba78:	2a09      	cmp	r2, #9
 800ba7a:	d903      	bls.n	800ba84 <_vfiprintf_r+0x1cc>
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d0c6      	beq.n	800ba0e <_vfiprintf_r+0x156>
 800ba80:	9105      	str	r1, [sp, #20]
 800ba82:	e7c4      	b.n	800ba0e <_vfiprintf_r+0x156>
 800ba84:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba88:	4604      	mov	r4, r0
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e7f0      	b.n	800ba70 <_vfiprintf_r+0x1b8>
 800ba8e:	ab03      	add	r3, sp, #12
 800ba90:	9300      	str	r3, [sp, #0]
 800ba92:	462a      	mov	r2, r5
 800ba94:	4b12      	ldr	r3, [pc, #72]	@ (800bae0 <_vfiprintf_r+0x228>)
 800ba96:	a904      	add	r1, sp, #16
 800ba98:	4630      	mov	r0, r6
 800ba9a:	f3af 8000 	nop.w
 800ba9e:	4607      	mov	r7, r0
 800baa0:	1c78      	adds	r0, r7, #1
 800baa2:	d1d6      	bne.n	800ba52 <_vfiprintf_r+0x19a>
 800baa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800baa6:	07d9      	lsls	r1, r3, #31
 800baa8:	d405      	bmi.n	800bab6 <_vfiprintf_r+0x1fe>
 800baaa:	89ab      	ldrh	r3, [r5, #12]
 800baac:	059a      	lsls	r2, r3, #22
 800baae:	d402      	bmi.n	800bab6 <_vfiprintf_r+0x1fe>
 800bab0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bab2:	f7ff fddd 	bl	800b670 <__retarget_lock_release_recursive>
 800bab6:	89ab      	ldrh	r3, [r5, #12]
 800bab8:	065b      	lsls	r3, r3, #25
 800baba:	f53f af1f 	bmi.w	800b8fc <_vfiprintf_r+0x44>
 800babe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bac0:	e71e      	b.n	800b900 <_vfiprintf_r+0x48>
 800bac2:	ab03      	add	r3, sp, #12
 800bac4:	9300      	str	r3, [sp, #0]
 800bac6:	462a      	mov	r2, r5
 800bac8:	4b05      	ldr	r3, [pc, #20]	@ (800bae0 <_vfiprintf_r+0x228>)
 800baca:	a904      	add	r1, sp, #16
 800bacc:	4630      	mov	r0, r6
 800bace:	f000 f879 	bl	800bbc4 <_printf_i>
 800bad2:	e7e4      	b.n	800ba9e <_vfiprintf_r+0x1e6>
 800bad4:	0800c114 	.word	0x0800c114
 800bad8:	0800c11e 	.word	0x0800c11e
 800badc:	00000000 	.word	0x00000000
 800bae0:	0800b893 	.word	0x0800b893
 800bae4:	0800c11a 	.word	0x0800c11a

0800bae8 <_printf_common>:
 800bae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baec:	4616      	mov	r6, r2
 800baee:	4698      	mov	r8, r3
 800baf0:	688a      	ldr	r2, [r1, #8]
 800baf2:	690b      	ldr	r3, [r1, #16]
 800baf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800baf8:	4293      	cmp	r3, r2
 800bafa:	bfb8      	it	lt
 800bafc:	4613      	movlt	r3, r2
 800bafe:	6033      	str	r3, [r6, #0]
 800bb00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bb04:	4607      	mov	r7, r0
 800bb06:	460c      	mov	r4, r1
 800bb08:	b10a      	cbz	r2, 800bb0e <_printf_common+0x26>
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	6033      	str	r3, [r6, #0]
 800bb0e:	6823      	ldr	r3, [r4, #0]
 800bb10:	0699      	lsls	r1, r3, #26
 800bb12:	bf42      	ittt	mi
 800bb14:	6833      	ldrmi	r3, [r6, #0]
 800bb16:	3302      	addmi	r3, #2
 800bb18:	6033      	strmi	r3, [r6, #0]
 800bb1a:	6825      	ldr	r5, [r4, #0]
 800bb1c:	f015 0506 	ands.w	r5, r5, #6
 800bb20:	d106      	bne.n	800bb30 <_printf_common+0x48>
 800bb22:	f104 0a19 	add.w	sl, r4, #25
 800bb26:	68e3      	ldr	r3, [r4, #12]
 800bb28:	6832      	ldr	r2, [r6, #0]
 800bb2a:	1a9b      	subs	r3, r3, r2
 800bb2c:	42ab      	cmp	r3, r5
 800bb2e:	dc26      	bgt.n	800bb7e <_printf_common+0x96>
 800bb30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bb34:	6822      	ldr	r2, [r4, #0]
 800bb36:	3b00      	subs	r3, #0
 800bb38:	bf18      	it	ne
 800bb3a:	2301      	movne	r3, #1
 800bb3c:	0692      	lsls	r2, r2, #26
 800bb3e:	d42b      	bmi.n	800bb98 <_printf_common+0xb0>
 800bb40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bb44:	4641      	mov	r1, r8
 800bb46:	4638      	mov	r0, r7
 800bb48:	47c8      	blx	r9
 800bb4a:	3001      	adds	r0, #1
 800bb4c:	d01e      	beq.n	800bb8c <_printf_common+0xa4>
 800bb4e:	6823      	ldr	r3, [r4, #0]
 800bb50:	6922      	ldr	r2, [r4, #16]
 800bb52:	f003 0306 	and.w	r3, r3, #6
 800bb56:	2b04      	cmp	r3, #4
 800bb58:	bf02      	ittt	eq
 800bb5a:	68e5      	ldreq	r5, [r4, #12]
 800bb5c:	6833      	ldreq	r3, [r6, #0]
 800bb5e:	1aed      	subeq	r5, r5, r3
 800bb60:	68a3      	ldr	r3, [r4, #8]
 800bb62:	bf0c      	ite	eq
 800bb64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb68:	2500      	movne	r5, #0
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	bfc4      	itt	gt
 800bb6e:	1a9b      	subgt	r3, r3, r2
 800bb70:	18ed      	addgt	r5, r5, r3
 800bb72:	2600      	movs	r6, #0
 800bb74:	341a      	adds	r4, #26
 800bb76:	42b5      	cmp	r5, r6
 800bb78:	d11a      	bne.n	800bbb0 <_printf_common+0xc8>
 800bb7a:	2000      	movs	r0, #0
 800bb7c:	e008      	b.n	800bb90 <_printf_common+0xa8>
 800bb7e:	2301      	movs	r3, #1
 800bb80:	4652      	mov	r2, sl
 800bb82:	4641      	mov	r1, r8
 800bb84:	4638      	mov	r0, r7
 800bb86:	47c8      	blx	r9
 800bb88:	3001      	adds	r0, #1
 800bb8a:	d103      	bne.n	800bb94 <_printf_common+0xac>
 800bb8c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb94:	3501      	adds	r5, #1
 800bb96:	e7c6      	b.n	800bb26 <_printf_common+0x3e>
 800bb98:	18e1      	adds	r1, r4, r3
 800bb9a:	1c5a      	adds	r2, r3, #1
 800bb9c:	2030      	movs	r0, #48	@ 0x30
 800bb9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bba2:	4422      	add	r2, r4
 800bba4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bba8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bbac:	3302      	adds	r3, #2
 800bbae:	e7c7      	b.n	800bb40 <_printf_common+0x58>
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	4622      	mov	r2, r4
 800bbb4:	4641      	mov	r1, r8
 800bbb6:	4638      	mov	r0, r7
 800bbb8:	47c8      	blx	r9
 800bbba:	3001      	adds	r0, #1
 800bbbc:	d0e6      	beq.n	800bb8c <_printf_common+0xa4>
 800bbbe:	3601      	adds	r6, #1
 800bbc0:	e7d9      	b.n	800bb76 <_printf_common+0x8e>
	...

0800bbc4 <_printf_i>:
 800bbc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbc8:	7e0f      	ldrb	r7, [r1, #24]
 800bbca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bbcc:	2f78      	cmp	r7, #120	@ 0x78
 800bbce:	4691      	mov	r9, r2
 800bbd0:	4680      	mov	r8, r0
 800bbd2:	460c      	mov	r4, r1
 800bbd4:	469a      	mov	sl, r3
 800bbd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bbda:	d807      	bhi.n	800bbec <_printf_i+0x28>
 800bbdc:	2f62      	cmp	r7, #98	@ 0x62
 800bbde:	d80a      	bhi.n	800bbf6 <_printf_i+0x32>
 800bbe0:	2f00      	cmp	r7, #0
 800bbe2:	f000 80d2 	beq.w	800bd8a <_printf_i+0x1c6>
 800bbe6:	2f58      	cmp	r7, #88	@ 0x58
 800bbe8:	f000 80b9 	beq.w	800bd5e <_printf_i+0x19a>
 800bbec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bbf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bbf4:	e03a      	b.n	800bc6c <_printf_i+0xa8>
 800bbf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bbfa:	2b15      	cmp	r3, #21
 800bbfc:	d8f6      	bhi.n	800bbec <_printf_i+0x28>
 800bbfe:	a101      	add	r1, pc, #4	@ (adr r1, 800bc04 <_printf_i+0x40>)
 800bc00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc04:	0800bc5d 	.word	0x0800bc5d
 800bc08:	0800bc71 	.word	0x0800bc71
 800bc0c:	0800bbed 	.word	0x0800bbed
 800bc10:	0800bbed 	.word	0x0800bbed
 800bc14:	0800bbed 	.word	0x0800bbed
 800bc18:	0800bbed 	.word	0x0800bbed
 800bc1c:	0800bc71 	.word	0x0800bc71
 800bc20:	0800bbed 	.word	0x0800bbed
 800bc24:	0800bbed 	.word	0x0800bbed
 800bc28:	0800bbed 	.word	0x0800bbed
 800bc2c:	0800bbed 	.word	0x0800bbed
 800bc30:	0800bd71 	.word	0x0800bd71
 800bc34:	0800bc9b 	.word	0x0800bc9b
 800bc38:	0800bd2b 	.word	0x0800bd2b
 800bc3c:	0800bbed 	.word	0x0800bbed
 800bc40:	0800bbed 	.word	0x0800bbed
 800bc44:	0800bd93 	.word	0x0800bd93
 800bc48:	0800bbed 	.word	0x0800bbed
 800bc4c:	0800bc9b 	.word	0x0800bc9b
 800bc50:	0800bbed 	.word	0x0800bbed
 800bc54:	0800bbed 	.word	0x0800bbed
 800bc58:	0800bd33 	.word	0x0800bd33
 800bc5c:	6833      	ldr	r3, [r6, #0]
 800bc5e:	1d1a      	adds	r2, r3, #4
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	6032      	str	r2, [r6, #0]
 800bc64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bc68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	e09d      	b.n	800bdac <_printf_i+0x1e8>
 800bc70:	6833      	ldr	r3, [r6, #0]
 800bc72:	6820      	ldr	r0, [r4, #0]
 800bc74:	1d19      	adds	r1, r3, #4
 800bc76:	6031      	str	r1, [r6, #0]
 800bc78:	0606      	lsls	r6, r0, #24
 800bc7a:	d501      	bpl.n	800bc80 <_printf_i+0xbc>
 800bc7c:	681d      	ldr	r5, [r3, #0]
 800bc7e:	e003      	b.n	800bc88 <_printf_i+0xc4>
 800bc80:	0645      	lsls	r5, r0, #25
 800bc82:	d5fb      	bpl.n	800bc7c <_printf_i+0xb8>
 800bc84:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bc88:	2d00      	cmp	r5, #0
 800bc8a:	da03      	bge.n	800bc94 <_printf_i+0xd0>
 800bc8c:	232d      	movs	r3, #45	@ 0x2d
 800bc8e:	426d      	negs	r5, r5
 800bc90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc94:	4859      	ldr	r0, [pc, #356]	@ (800bdfc <_printf_i+0x238>)
 800bc96:	230a      	movs	r3, #10
 800bc98:	e011      	b.n	800bcbe <_printf_i+0xfa>
 800bc9a:	6821      	ldr	r1, [r4, #0]
 800bc9c:	6833      	ldr	r3, [r6, #0]
 800bc9e:	0608      	lsls	r0, r1, #24
 800bca0:	f853 5b04 	ldr.w	r5, [r3], #4
 800bca4:	d402      	bmi.n	800bcac <_printf_i+0xe8>
 800bca6:	0649      	lsls	r1, r1, #25
 800bca8:	bf48      	it	mi
 800bcaa:	b2ad      	uxthmi	r5, r5
 800bcac:	2f6f      	cmp	r7, #111	@ 0x6f
 800bcae:	4853      	ldr	r0, [pc, #332]	@ (800bdfc <_printf_i+0x238>)
 800bcb0:	6033      	str	r3, [r6, #0]
 800bcb2:	bf14      	ite	ne
 800bcb4:	230a      	movne	r3, #10
 800bcb6:	2308      	moveq	r3, #8
 800bcb8:	2100      	movs	r1, #0
 800bcba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bcbe:	6866      	ldr	r6, [r4, #4]
 800bcc0:	60a6      	str	r6, [r4, #8]
 800bcc2:	2e00      	cmp	r6, #0
 800bcc4:	bfa2      	ittt	ge
 800bcc6:	6821      	ldrge	r1, [r4, #0]
 800bcc8:	f021 0104 	bicge.w	r1, r1, #4
 800bccc:	6021      	strge	r1, [r4, #0]
 800bcce:	b90d      	cbnz	r5, 800bcd4 <_printf_i+0x110>
 800bcd0:	2e00      	cmp	r6, #0
 800bcd2:	d04b      	beq.n	800bd6c <_printf_i+0x1a8>
 800bcd4:	4616      	mov	r6, r2
 800bcd6:	fbb5 f1f3 	udiv	r1, r5, r3
 800bcda:	fb03 5711 	mls	r7, r3, r1, r5
 800bcde:	5dc7      	ldrb	r7, [r0, r7]
 800bce0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bce4:	462f      	mov	r7, r5
 800bce6:	42bb      	cmp	r3, r7
 800bce8:	460d      	mov	r5, r1
 800bcea:	d9f4      	bls.n	800bcd6 <_printf_i+0x112>
 800bcec:	2b08      	cmp	r3, #8
 800bcee:	d10b      	bne.n	800bd08 <_printf_i+0x144>
 800bcf0:	6823      	ldr	r3, [r4, #0]
 800bcf2:	07df      	lsls	r7, r3, #31
 800bcf4:	d508      	bpl.n	800bd08 <_printf_i+0x144>
 800bcf6:	6923      	ldr	r3, [r4, #16]
 800bcf8:	6861      	ldr	r1, [r4, #4]
 800bcfa:	4299      	cmp	r1, r3
 800bcfc:	bfde      	ittt	le
 800bcfe:	2330      	movle	r3, #48	@ 0x30
 800bd00:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bd04:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bd08:	1b92      	subs	r2, r2, r6
 800bd0a:	6122      	str	r2, [r4, #16]
 800bd0c:	f8cd a000 	str.w	sl, [sp]
 800bd10:	464b      	mov	r3, r9
 800bd12:	aa03      	add	r2, sp, #12
 800bd14:	4621      	mov	r1, r4
 800bd16:	4640      	mov	r0, r8
 800bd18:	f7ff fee6 	bl	800bae8 <_printf_common>
 800bd1c:	3001      	adds	r0, #1
 800bd1e:	d14a      	bne.n	800bdb6 <_printf_i+0x1f2>
 800bd20:	f04f 30ff 	mov.w	r0, #4294967295
 800bd24:	b004      	add	sp, #16
 800bd26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd2a:	6823      	ldr	r3, [r4, #0]
 800bd2c:	f043 0320 	orr.w	r3, r3, #32
 800bd30:	6023      	str	r3, [r4, #0]
 800bd32:	4833      	ldr	r0, [pc, #204]	@ (800be00 <_printf_i+0x23c>)
 800bd34:	2778      	movs	r7, #120	@ 0x78
 800bd36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bd3a:	6823      	ldr	r3, [r4, #0]
 800bd3c:	6831      	ldr	r1, [r6, #0]
 800bd3e:	061f      	lsls	r7, r3, #24
 800bd40:	f851 5b04 	ldr.w	r5, [r1], #4
 800bd44:	d402      	bmi.n	800bd4c <_printf_i+0x188>
 800bd46:	065f      	lsls	r7, r3, #25
 800bd48:	bf48      	it	mi
 800bd4a:	b2ad      	uxthmi	r5, r5
 800bd4c:	6031      	str	r1, [r6, #0]
 800bd4e:	07d9      	lsls	r1, r3, #31
 800bd50:	bf44      	itt	mi
 800bd52:	f043 0320 	orrmi.w	r3, r3, #32
 800bd56:	6023      	strmi	r3, [r4, #0]
 800bd58:	b11d      	cbz	r5, 800bd62 <_printf_i+0x19e>
 800bd5a:	2310      	movs	r3, #16
 800bd5c:	e7ac      	b.n	800bcb8 <_printf_i+0xf4>
 800bd5e:	4827      	ldr	r0, [pc, #156]	@ (800bdfc <_printf_i+0x238>)
 800bd60:	e7e9      	b.n	800bd36 <_printf_i+0x172>
 800bd62:	6823      	ldr	r3, [r4, #0]
 800bd64:	f023 0320 	bic.w	r3, r3, #32
 800bd68:	6023      	str	r3, [r4, #0]
 800bd6a:	e7f6      	b.n	800bd5a <_printf_i+0x196>
 800bd6c:	4616      	mov	r6, r2
 800bd6e:	e7bd      	b.n	800bcec <_printf_i+0x128>
 800bd70:	6833      	ldr	r3, [r6, #0]
 800bd72:	6825      	ldr	r5, [r4, #0]
 800bd74:	6961      	ldr	r1, [r4, #20]
 800bd76:	1d18      	adds	r0, r3, #4
 800bd78:	6030      	str	r0, [r6, #0]
 800bd7a:	062e      	lsls	r6, r5, #24
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	d501      	bpl.n	800bd84 <_printf_i+0x1c0>
 800bd80:	6019      	str	r1, [r3, #0]
 800bd82:	e002      	b.n	800bd8a <_printf_i+0x1c6>
 800bd84:	0668      	lsls	r0, r5, #25
 800bd86:	d5fb      	bpl.n	800bd80 <_printf_i+0x1bc>
 800bd88:	8019      	strh	r1, [r3, #0]
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	6123      	str	r3, [r4, #16]
 800bd8e:	4616      	mov	r6, r2
 800bd90:	e7bc      	b.n	800bd0c <_printf_i+0x148>
 800bd92:	6833      	ldr	r3, [r6, #0]
 800bd94:	1d1a      	adds	r2, r3, #4
 800bd96:	6032      	str	r2, [r6, #0]
 800bd98:	681e      	ldr	r6, [r3, #0]
 800bd9a:	6862      	ldr	r2, [r4, #4]
 800bd9c:	2100      	movs	r1, #0
 800bd9e:	4630      	mov	r0, r6
 800bda0:	f7fc fa36 	bl	8008210 <memchr>
 800bda4:	b108      	cbz	r0, 800bdaa <_printf_i+0x1e6>
 800bda6:	1b80      	subs	r0, r0, r6
 800bda8:	6060      	str	r0, [r4, #4]
 800bdaa:	6863      	ldr	r3, [r4, #4]
 800bdac:	6123      	str	r3, [r4, #16]
 800bdae:	2300      	movs	r3, #0
 800bdb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bdb4:	e7aa      	b.n	800bd0c <_printf_i+0x148>
 800bdb6:	6923      	ldr	r3, [r4, #16]
 800bdb8:	4632      	mov	r2, r6
 800bdba:	4649      	mov	r1, r9
 800bdbc:	4640      	mov	r0, r8
 800bdbe:	47d0      	blx	sl
 800bdc0:	3001      	adds	r0, #1
 800bdc2:	d0ad      	beq.n	800bd20 <_printf_i+0x15c>
 800bdc4:	6823      	ldr	r3, [r4, #0]
 800bdc6:	079b      	lsls	r3, r3, #30
 800bdc8:	d413      	bmi.n	800bdf2 <_printf_i+0x22e>
 800bdca:	68e0      	ldr	r0, [r4, #12]
 800bdcc:	9b03      	ldr	r3, [sp, #12]
 800bdce:	4298      	cmp	r0, r3
 800bdd0:	bfb8      	it	lt
 800bdd2:	4618      	movlt	r0, r3
 800bdd4:	e7a6      	b.n	800bd24 <_printf_i+0x160>
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	4632      	mov	r2, r6
 800bdda:	4649      	mov	r1, r9
 800bddc:	4640      	mov	r0, r8
 800bdde:	47d0      	blx	sl
 800bde0:	3001      	adds	r0, #1
 800bde2:	d09d      	beq.n	800bd20 <_printf_i+0x15c>
 800bde4:	3501      	adds	r5, #1
 800bde6:	68e3      	ldr	r3, [r4, #12]
 800bde8:	9903      	ldr	r1, [sp, #12]
 800bdea:	1a5b      	subs	r3, r3, r1
 800bdec:	42ab      	cmp	r3, r5
 800bdee:	dcf2      	bgt.n	800bdd6 <_printf_i+0x212>
 800bdf0:	e7eb      	b.n	800bdca <_printf_i+0x206>
 800bdf2:	2500      	movs	r5, #0
 800bdf4:	f104 0619 	add.w	r6, r4, #25
 800bdf8:	e7f5      	b.n	800bde6 <_printf_i+0x222>
 800bdfa:	bf00      	nop
 800bdfc:	0800c125 	.word	0x0800c125
 800be00:	0800c136 	.word	0x0800c136

0800be04 <__sflush_r>:
 800be04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be0c:	0716      	lsls	r6, r2, #28
 800be0e:	4605      	mov	r5, r0
 800be10:	460c      	mov	r4, r1
 800be12:	d454      	bmi.n	800bebe <__sflush_r+0xba>
 800be14:	684b      	ldr	r3, [r1, #4]
 800be16:	2b00      	cmp	r3, #0
 800be18:	dc02      	bgt.n	800be20 <__sflush_r+0x1c>
 800be1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	dd48      	ble.n	800beb2 <__sflush_r+0xae>
 800be20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be22:	2e00      	cmp	r6, #0
 800be24:	d045      	beq.n	800beb2 <__sflush_r+0xae>
 800be26:	2300      	movs	r3, #0
 800be28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be2c:	682f      	ldr	r7, [r5, #0]
 800be2e:	6a21      	ldr	r1, [r4, #32]
 800be30:	602b      	str	r3, [r5, #0]
 800be32:	d030      	beq.n	800be96 <__sflush_r+0x92>
 800be34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be36:	89a3      	ldrh	r3, [r4, #12]
 800be38:	0759      	lsls	r1, r3, #29
 800be3a:	d505      	bpl.n	800be48 <__sflush_r+0x44>
 800be3c:	6863      	ldr	r3, [r4, #4]
 800be3e:	1ad2      	subs	r2, r2, r3
 800be40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be42:	b10b      	cbz	r3, 800be48 <__sflush_r+0x44>
 800be44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be46:	1ad2      	subs	r2, r2, r3
 800be48:	2300      	movs	r3, #0
 800be4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be4c:	6a21      	ldr	r1, [r4, #32]
 800be4e:	4628      	mov	r0, r5
 800be50:	47b0      	blx	r6
 800be52:	1c43      	adds	r3, r0, #1
 800be54:	89a3      	ldrh	r3, [r4, #12]
 800be56:	d106      	bne.n	800be66 <__sflush_r+0x62>
 800be58:	6829      	ldr	r1, [r5, #0]
 800be5a:	291d      	cmp	r1, #29
 800be5c:	d82b      	bhi.n	800beb6 <__sflush_r+0xb2>
 800be5e:	4a2a      	ldr	r2, [pc, #168]	@ (800bf08 <__sflush_r+0x104>)
 800be60:	410a      	asrs	r2, r1
 800be62:	07d6      	lsls	r6, r2, #31
 800be64:	d427      	bmi.n	800beb6 <__sflush_r+0xb2>
 800be66:	2200      	movs	r2, #0
 800be68:	6062      	str	r2, [r4, #4]
 800be6a:	04d9      	lsls	r1, r3, #19
 800be6c:	6922      	ldr	r2, [r4, #16]
 800be6e:	6022      	str	r2, [r4, #0]
 800be70:	d504      	bpl.n	800be7c <__sflush_r+0x78>
 800be72:	1c42      	adds	r2, r0, #1
 800be74:	d101      	bne.n	800be7a <__sflush_r+0x76>
 800be76:	682b      	ldr	r3, [r5, #0]
 800be78:	b903      	cbnz	r3, 800be7c <__sflush_r+0x78>
 800be7a:	6560      	str	r0, [r4, #84]	@ 0x54
 800be7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be7e:	602f      	str	r7, [r5, #0]
 800be80:	b1b9      	cbz	r1, 800beb2 <__sflush_r+0xae>
 800be82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be86:	4299      	cmp	r1, r3
 800be88:	d002      	beq.n	800be90 <__sflush_r+0x8c>
 800be8a:	4628      	mov	r0, r5
 800be8c:	f7ff fbf2 	bl	800b674 <_free_r>
 800be90:	2300      	movs	r3, #0
 800be92:	6363      	str	r3, [r4, #52]	@ 0x34
 800be94:	e00d      	b.n	800beb2 <__sflush_r+0xae>
 800be96:	2301      	movs	r3, #1
 800be98:	4628      	mov	r0, r5
 800be9a:	47b0      	blx	r6
 800be9c:	4602      	mov	r2, r0
 800be9e:	1c50      	adds	r0, r2, #1
 800bea0:	d1c9      	bne.n	800be36 <__sflush_r+0x32>
 800bea2:	682b      	ldr	r3, [r5, #0]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d0c6      	beq.n	800be36 <__sflush_r+0x32>
 800bea8:	2b1d      	cmp	r3, #29
 800beaa:	d001      	beq.n	800beb0 <__sflush_r+0xac>
 800beac:	2b16      	cmp	r3, #22
 800beae:	d11e      	bne.n	800beee <__sflush_r+0xea>
 800beb0:	602f      	str	r7, [r5, #0]
 800beb2:	2000      	movs	r0, #0
 800beb4:	e022      	b.n	800befc <__sflush_r+0xf8>
 800beb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beba:	b21b      	sxth	r3, r3
 800bebc:	e01b      	b.n	800bef6 <__sflush_r+0xf2>
 800bebe:	690f      	ldr	r7, [r1, #16]
 800bec0:	2f00      	cmp	r7, #0
 800bec2:	d0f6      	beq.n	800beb2 <__sflush_r+0xae>
 800bec4:	0793      	lsls	r3, r2, #30
 800bec6:	680e      	ldr	r6, [r1, #0]
 800bec8:	bf08      	it	eq
 800beca:	694b      	ldreq	r3, [r1, #20]
 800becc:	600f      	str	r7, [r1, #0]
 800bece:	bf18      	it	ne
 800bed0:	2300      	movne	r3, #0
 800bed2:	eba6 0807 	sub.w	r8, r6, r7
 800bed6:	608b      	str	r3, [r1, #8]
 800bed8:	f1b8 0f00 	cmp.w	r8, #0
 800bedc:	dde9      	ble.n	800beb2 <__sflush_r+0xae>
 800bede:	6a21      	ldr	r1, [r4, #32]
 800bee0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bee2:	4643      	mov	r3, r8
 800bee4:	463a      	mov	r2, r7
 800bee6:	4628      	mov	r0, r5
 800bee8:	47b0      	blx	r6
 800beea:	2800      	cmp	r0, #0
 800beec:	dc08      	bgt.n	800bf00 <__sflush_r+0xfc>
 800beee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bef6:	81a3      	strh	r3, [r4, #12]
 800bef8:	f04f 30ff 	mov.w	r0, #4294967295
 800befc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf00:	4407      	add	r7, r0
 800bf02:	eba8 0800 	sub.w	r8, r8, r0
 800bf06:	e7e7      	b.n	800bed8 <__sflush_r+0xd4>
 800bf08:	dfbffffe 	.word	0xdfbffffe

0800bf0c <_fflush_r>:
 800bf0c:	b538      	push	{r3, r4, r5, lr}
 800bf0e:	690b      	ldr	r3, [r1, #16]
 800bf10:	4605      	mov	r5, r0
 800bf12:	460c      	mov	r4, r1
 800bf14:	b913      	cbnz	r3, 800bf1c <_fflush_r+0x10>
 800bf16:	2500      	movs	r5, #0
 800bf18:	4628      	mov	r0, r5
 800bf1a:	bd38      	pop	{r3, r4, r5, pc}
 800bf1c:	b118      	cbz	r0, 800bf26 <_fflush_r+0x1a>
 800bf1e:	6a03      	ldr	r3, [r0, #32]
 800bf20:	b90b      	cbnz	r3, 800bf26 <_fflush_r+0x1a>
 800bf22:	f7ff f9ad 	bl	800b280 <__sinit>
 800bf26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d0f3      	beq.n	800bf16 <_fflush_r+0xa>
 800bf2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf30:	07d0      	lsls	r0, r2, #31
 800bf32:	d404      	bmi.n	800bf3e <_fflush_r+0x32>
 800bf34:	0599      	lsls	r1, r3, #22
 800bf36:	d402      	bmi.n	800bf3e <_fflush_r+0x32>
 800bf38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf3a:	f7ff fb98 	bl	800b66e <__retarget_lock_acquire_recursive>
 800bf3e:	4628      	mov	r0, r5
 800bf40:	4621      	mov	r1, r4
 800bf42:	f7ff ff5f 	bl	800be04 <__sflush_r>
 800bf46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf48:	07da      	lsls	r2, r3, #31
 800bf4a:	4605      	mov	r5, r0
 800bf4c:	d4e4      	bmi.n	800bf18 <_fflush_r+0xc>
 800bf4e:	89a3      	ldrh	r3, [r4, #12]
 800bf50:	059b      	lsls	r3, r3, #22
 800bf52:	d4e1      	bmi.n	800bf18 <_fflush_r+0xc>
 800bf54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf56:	f7ff fb8b 	bl	800b670 <__retarget_lock_release_recursive>
 800bf5a:	e7dd      	b.n	800bf18 <_fflush_r+0xc>

0800bf5c <__swhatbuf_r>:
 800bf5c:	b570      	push	{r4, r5, r6, lr}
 800bf5e:	460c      	mov	r4, r1
 800bf60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf64:	2900      	cmp	r1, #0
 800bf66:	b096      	sub	sp, #88	@ 0x58
 800bf68:	4615      	mov	r5, r2
 800bf6a:	461e      	mov	r6, r3
 800bf6c:	da0d      	bge.n	800bf8a <__swhatbuf_r+0x2e>
 800bf6e:	89a3      	ldrh	r3, [r4, #12]
 800bf70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bf74:	f04f 0100 	mov.w	r1, #0
 800bf78:	bf14      	ite	ne
 800bf7a:	2340      	movne	r3, #64	@ 0x40
 800bf7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bf80:	2000      	movs	r0, #0
 800bf82:	6031      	str	r1, [r6, #0]
 800bf84:	602b      	str	r3, [r5, #0]
 800bf86:	b016      	add	sp, #88	@ 0x58
 800bf88:	bd70      	pop	{r4, r5, r6, pc}
 800bf8a:	466a      	mov	r2, sp
 800bf8c:	f000 f848 	bl	800c020 <_fstat_r>
 800bf90:	2800      	cmp	r0, #0
 800bf92:	dbec      	blt.n	800bf6e <__swhatbuf_r+0x12>
 800bf94:	9901      	ldr	r1, [sp, #4]
 800bf96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bf9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bf9e:	4259      	negs	r1, r3
 800bfa0:	4159      	adcs	r1, r3
 800bfa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bfa6:	e7eb      	b.n	800bf80 <__swhatbuf_r+0x24>

0800bfa8 <__smakebuf_r>:
 800bfa8:	898b      	ldrh	r3, [r1, #12]
 800bfaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfac:	079d      	lsls	r5, r3, #30
 800bfae:	4606      	mov	r6, r0
 800bfb0:	460c      	mov	r4, r1
 800bfb2:	d507      	bpl.n	800bfc4 <__smakebuf_r+0x1c>
 800bfb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bfb8:	6023      	str	r3, [r4, #0]
 800bfba:	6123      	str	r3, [r4, #16]
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	6163      	str	r3, [r4, #20]
 800bfc0:	b003      	add	sp, #12
 800bfc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfc4:	ab01      	add	r3, sp, #4
 800bfc6:	466a      	mov	r2, sp
 800bfc8:	f7ff ffc8 	bl	800bf5c <__swhatbuf_r>
 800bfcc:	9f00      	ldr	r7, [sp, #0]
 800bfce:	4605      	mov	r5, r0
 800bfd0:	4639      	mov	r1, r7
 800bfd2:	4630      	mov	r0, r6
 800bfd4:	f7ff fbba 	bl	800b74c <_malloc_r>
 800bfd8:	b948      	cbnz	r0, 800bfee <__smakebuf_r+0x46>
 800bfda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfde:	059a      	lsls	r2, r3, #22
 800bfe0:	d4ee      	bmi.n	800bfc0 <__smakebuf_r+0x18>
 800bfe2:	f023 0303 	bic.w	r3, r3, #3
 800bfe6:	f043 0302 	orr.w	r3, r3, #2
 800bfea:	81a3      	strh	r3, [r4, #12]
 800bfec:	e7e2      	b.n	800bfb4 <__smakebuf_r+0xc>
 800bfee:	89a3      	ldrh	r3, [r4, #12]
 800bff0:	6020      	str	r0, [r4, #0]
 800bff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bff6:	81a3      	strh	r3, [r4, #12]
 800bff8:	9b01      	ldr	r3, [sp, #4]
 800bffa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bffe:	b15b      	cbz	r3, 800c018 <__smakebuf_r+0x70>
 800c000:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c004:	4630      	mov	r0, r6
 800c006:	f000 f81d 	bl	800c044 <_isatty_r>
 800c00a:	b128      	cbz	r0, 800c018 <__smakebuf_r+0x70>
 800c00c:	89a3      	ldrh	r3, [r4, #12]
 800c00e:	f023 0303 	bic.w	r3, r3, #3
 800c012:	f043 0301 	orr.w	r3, r3, #1
 800c016:	81a3      	strh	r3, [r4, #12]
 800c018:	89a3      	ldrh	r3, [r4, #12]
 800c01a:	431d      	orrs	r5, r3
 800c01c:	81a5      	strh	r5, [r4, #12]
 800c01e:	e7cf      	b.n	800bfc0 <__smakebuf_r+0x18>

0800c020 <_fstat_r>:
 800c020:	b538      	push	{r3, r4, r5, lr}
 800c022:	4d07      	ldr	r5, [pc, #28]	@ (800c040 <_fstat_r+0x20>)
 800c024:	2300      	movs	r3, #0
 800c026:	4604      	mov	r4, r0
 800c028:	4608      	mov	r0, r1
 800c02a:	4611      	mov	r1, r2
 800c02c:	602b      	str	r3, [r5, #0]
 800c02e:	f7fc fe2e 	bl	8008c8e <_fstat>
 800c032:	1c43      	adds	r3, r0, #1
 800c034:	d102      	bne.n	800c03c <_fstat_r+0x1c>
 800c036:	682b      	ldr	r3, [r5, #0]
 800c038:	b103      	cbz	r3, 800c03c <_fstat_r+0x1c>
 800c03a:	6023      	str	r3, [r4, #0]
 800c03c:	bd38      	pop	{r3, r4, r5, pc}
 800c03e:	bf00      	nop
 800c040:	2000028c 	.word	0x2000028c

0800c044 <_isatty_r>:
 800c044:	b538      	push	{r3, r4, r5, lr}
 800c046:	4d06      	ldr	r5, [pc, #24]	@ (800c060 <_isatty_r+0x1c>)
 800c048:	2300      	movs	r3, #0
 800c04a:	4604      	mov	r4, r0
 800c04c:	4608      	mov	r0, r1
 800c04e:	602b      	str	r3, [r5, #0]
 800c050:	f7fc fe2d 	bl	8008cae <_isatty>
 800c054:	1c43      	adds	r3, r0, #1
 800c056:	d102      	bne.n	800c05e <_isatty_r+0x1a>
 800c058:	682b      	ldr	r3, [r5, #0]
 800c05a:	b103      	cbz	r3, 800c05e <_isatty_r+0x1a>
 800c05c:	6023      	str	r3, [r4, #0]
 800c05e:	bd38      	pop	{r3, r4, r5, pc}
 800c060:	2000028c 	.word	0x2000028c

0800c064 <_sbrk_r>:
 800c064:	b538      	push	{r3, r4, r5, lr}
 800c066:	4d06      	ldr	r5, [pc, #24]	@ (800c080 <_sbrk_r+0x1c>)
 800c068:	2300      	movs	r3, #0
 800c06a:	4604      	mov	r4, r0
 800c06c:	4608      	mov	r0, r1
 800c06e:	602b      	str	r3, [r5, #0]
 800c070:	f7fc fe36 	bl	8008ce0 <_sbrk>
 800c074:	1c43      	adds	r3, r0, #1
 800c076:	d102      	bne.n	800c07e <_sbrk_r+0x1a>
 800c078:	682b      	ldr	r3, [r5, #0]
 800c07a:	b103      	cbz	r3, 800c07e <_sbrk_r+0x1a>
 800c07c:	6023      	str	r3, [r4, #0]
 800c07e:	bd38      	pop	{r3, r4, r5, pc}
 800c080:	2000028c 	.word	0x2000028c

0800c084 <_init>:
 800c084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c086:	bf00      	nop
 800c088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c08a:	bc08      	pop	{r3}
 800c08c:	469e      	mov	lr, r3
 800c08e:	4770      	bx	lr

0800c090 <_fini>:
 800c090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c092:	bf00      	nop
 800c094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c096:	bc08      	pop	{r3}
 800c098:	469e      	mov	lr, r3
 800c09a:	4770      	bx	lr
