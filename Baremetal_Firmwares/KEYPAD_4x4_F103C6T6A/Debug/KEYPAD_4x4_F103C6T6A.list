
KEYPAD_4x4_F103C6T6A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002400  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800250c  0800250c  0000350c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002548  08002548  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  08002548  08002548  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002548  08002548  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002548  08002548  00003548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800254c  0800254c  0000354c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002550  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  080025b8  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080025b8  00004220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b24  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014fe  00000000  00000000  0000abb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  0000c0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000521  00000000  00000000  0000c780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017440  00000000  00000000  0000cca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008464  00000000  00000000  000240e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081848  00000000  00000000  0002c545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000add8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020b4  00000000  00000000  000addd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  000afe84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080024f4 	.word	0x080024f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080024f4 	.word	0x080024f4

0800014c <read_keypad>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char read_keypad (void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);  //Pull the R1 low
 8000150:	2200      	movs	r2, #0
 8000152:	2180      	movs	r1, #128	@ 0x80
 8000154:	48b0      	ldr	r0, [pc, #704]	@ (8000418 <read_keypad+0x2cc>)
 8000156:	f000 fe9e 	bl	8000e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 800015a:	2201      	movs	r2, #1
 800015c:	2140      	movs	r1, #64	@ 0x40
 800015e:	48ae      	ldr	r0, [pc, #696]	@ (8000418 <read_keypad+0x2cc>)
 8000160:	f000 fe99 	bl	8000e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 8000164:	2201      	movs	r2, #1
 8000166:	2120      	movs	r1, #32
 8000168:	48ab      	ldr	r0, [pc, #684]	@ (8000418 <read_keypad+0x2cc>)
 800016a:	f000 fe94 	bl	8000e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 800016e:	2201      	movs	r2, #1
 8000170:	2110      	movs	r1, #16
 8000172:	48a9      	ldr	r0, [pc, #676]	@ (8000418 <read_keypad+0x2cc>)
 8000174:	f000 fe8f 	bl	8000e96 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 8000178:	2108      	movs	r1, #8
 800017a:	48a7      	ldr	r0, [pc, #668]	@ (8000418 <read_keypad+0x2cc>)
 800017c:	f000 fe74 	bl	8000e68 <HAL_GPIO_ReadPin>
 8000180:	4603      	mov	r3, r0
 8000182:	2b00      	cmp	r3, #0
 8000184:	d109      	bne.n	800019a <read_keypad+0x4e>
	{
		while (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)));   // wait till the button is pressed
 8000186:	bf00      	nop
 8000188:	2108      	movs	r1, #8
 800018a:	48a3      	ldr	r0, [pc, #652]	@ (8000418 <read_keypad+0x2cc>)
 800018c:	f000 fe6c 	bl	8000e68 <HAL_GPIO_ReadPin>
 8000190:	4603      	mov	r3, r0
 8000192:	2b00      	cmp	r3, #0
 8000194:	d0f8      	beq.n	8000188 <read_keypad+0x3c>
		return '1';
 8000196:	2331      	movs	r3, #49	@ 0x31
 8000198:	e13b      	b.n	8000412 <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 800019a:	2104      	movs	r1, #4
 800019c:	489e      	ldr	r0, [pc, #632]	@ (8000418 <read_keypad+0x2cc>)
 800019e:	f000 fe63 	bl	8000e68 <HAL_GPIO_ReadPin>
 80001a2:	4603      	mov	r3, r0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d109      	bne.n	80001bc <read_keypad+0x70>
	{
		while (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)));   // wait till the button is pressed
 80001a8:	bf00      	nop
 80001aa:	2104      	movs	r1, #4
 80001ac:	489a      	ldr	r0, [pc, #616]	@ (8000418 <read_keypad+0x2cc>)
 80001ae:	f000 fe5b 	bl	8000e68 <HAL_GPIO_ReadPin>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d0f8      	beq.n	80001aa <read_keypad+0x5e>
		return '2';
 80001b8:	2332      	movs	r3, #50	@ 0x32
 80001ba:	e12a      	b.n	8000412 <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 80001bc:	2102      	movs	r1, #2
 80001be:	4896      	ldr	r0, [pc, #600]	@ (8000418 <read_keypad+0x2cc>)
 80001c0:	f000 fe52 	bl	8000e68 <HAL_GPIO_ReadPin>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d109      	bne.n	80001de <read_keypad+0x92>
	{
		while (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)));   // wait till the button is pressed
 80001ca:	bf00      	nop
 80001cc:	2102      	movs	r1, #2
 80001ce:	4892      	ldr	r0, [pc, #584]	@ (8000418 <read_keypad+0x2cc>)
 80001d0:	f000 fe4a 	bl	8000e68 <HAL_GPIO_ReadPin>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d0f8      	beq.n	80001cc <read_keypad+0x80>
		return '3';
 80001da:	2333      	movs	r3, #51	@ 0x33
 80001dc:	e119      	b.n	8000412 <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 80001de:	2101      	movs	r1, #1
 80001e0:	488d      	ldr	r0, [pc, #564]	@ (8000418 <read_keypad+0x2cc>)
 80001e2:	f000 fe41 	bl	8000e68 <HAL_GPIO_ReadPin>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d109      	bne.n	8000200 <read_keypad+0xb4>
	{
		while (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)));   // wait till the button is pressed
 80001ec:	bf00      	nop
 80001ee:	2101      	movs	r1, #1
 80001f0:	4889      	ldr	r0, [pc, #548]	@ (8000418 <read_keypad+0x2cc>)
 80001f2:	f000 fe39 	bl	8000e68 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d0f8      	beq.n	80001ee <read_keypad+0xa2>
		return 'A';
 80001fc:	2341      	movs	r3, #65	@ 0x41
 80001fe:	e108      	b.n	8000412 <read_keypad+0x2c6>
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 8000200:	2201      	movs	r2, #1
 8000202:	2180      	movs	r1, #128	@ 0x80
 8000204:	4884      	ldr	r0, [pc, #528]	@ (8000418 <read_keypad+0x2cc>)
 8000206:	f000 fe46 	bl	8000e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);  // Pull the R2 High
 800020a:	2200      	movs	r2, #0
 800020c:	2140      	movs	r1, #64	@ 0x40
 800020e:	4882      	ldr	r0, [pc, #520]	@ (8000418 <read_keypad+0x2cc>)
 8000210:	f000 fe41 	bl	8000e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 8000214:	2201      	movs	r2, #1
 8000216:	2120      	movs	r1, #32
 8000218:	487f      	ldr	r0, [pc, #508]	@ (8000418 <read_keypad+0x2cc>)
 800021a:	f000 fe3c 	bl	8000e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 800021e:	2201      	movs	r2, #1
 8000220:	2110      	movs	r1, #16
 8000222:	487d      	ldr	r0, [pc, #500]	@ (8000418 <read_keypad+0x2cc>)
 8000224:	f000 fe37 	bl	8000e96 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 8000228:	2108      	movs	r1, #8
 800022a:	487b      	ldr	r0, [pc, #492]	@ (8000418 <read_keypad+0x2cc>)
 800022c:	f000 fe1c 	bl	8000e68 <HAL_GPIO_ReadPin>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d109      	bne.n	800024a <read_keypad+0xfe>
	{
		while (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)));   // wait till the button is pressed
 8000236:	bf00      	nop
 8000238:	2108      	movs	r1, #8
 800023a:	4877      	ldr	r0, [pc, #476]	@ (8000418 <read_keypad+0x2cc>)
 800023c:	f000 fe14 	bl	8000e68 <HAL_GPIO_ReadPin>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d0f8      	beq.n	8000238 <read_keypad+0xec>
		return '4';
 8000246:	2334      	movs	r3, #52	@ 0x34
 8000248:	e0e3      	b.n	8000412 <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 800024a:	2104      	movs	r1, #4
 800024c:	4872      	ldr	r0, [pc, #456]	@ (8000418 <read_keypad+0x2cc>)
 800024e:	f000 fe0b 	bl	8000e68 <HAL_GPIO_ReadPin>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d109      	bne.n	800026c <read_keypad+0x120>
	{
		while (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)));   // wait till the button is pressed
 8000258:	bf00      	nop
 800025a:	2104      	movs	r1, #4
 800025c:	486e      	ldr	r0, [pc, #440]	@ (8000418 <read_keypad+0x2cc>)
 800025e:	f000 fe03 	bl	8000e68 <HAL_GPIO_ReadPin>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d0f8      	beq.n	800025a <read_keypad+0x10e>
		return '5';
 8000268:	2335      	movs	r3, #53	@ 0x35
 800026a:	e0d2      	b.n	8000412 <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 800026c:	2102      	movs	r1, #2
 800026e:	486a      	ldr	r0, [pc, #424]	@ (8000418 <read_keypad+0x2cc>)
 8000270:	f000 fdfa 	bl	8000e68 <HAL_GPIO_ReadPin>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d109      	bne.n	800028e <read_keypad+0x142>
	{
		while (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)));   // wait till the button is pressed
 800027a:	bf00      	nop
 800027c:	2102      	movs	r1, #2
 800027e:	4866      	ldr	r0, [pc, #408]	@ (8000418 <read_keypad+0x2cc>)
 8000280:	f000 fdf2 	bl	8000e68 <HAL_GPIO_ReadPin>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d0f8      	beq.n	800027c <read_keypad+0x130>
		return '6';
 800028a:	2336      	movs	r3, #54	@ 0x36
 800028c:	e0c1      	b.n	8000412 <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 800028e:	2101      	movs	r1, #1
 8000290:	4861      	ldr	r0, [pc, #388]	@ (8000418 <read_keypad+0x2cc>)
 8000292:	f000 fde9 	bl	8000e68 <HAL_GPIO_ReadPin>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d109      	bne.n	80002b0 <read_keypad+0x164>
	{
		while (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)));   // wait till the button is pressed
 800029c:	bf00      	nop
 800029e:	2101      	movs	r1, #1
 80002a0:	485d      	ldr	r0, [pc, #372]	@ (8000418 <read_keypad+0x2cc>)
 80002a2:	f000 fde1 	bl	8000e68 <HAL_GPIO_ReadPin>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d0f8      	beq.n	800029e <read_keypad+0x152>
		return 'B';
 80002ac:	2342      	movs	r3, #66	@ 0x42
 80002ae:	e0b0      	b.n	8000412 <read_keypad+0x2c6>
	}


	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 80002b0:	2201      	movs	r2, #1
 80002b2:	2180      	movs	r1, #128	@ 0x80
 80002b4:	4858      	ldr	r0, [pc, #352]	@ (8000418 <read_keypad+0x2cc>)
 80002b6:	f000 fdee 	bl	8000e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 80002ba:	2201      	movs	r2, #1
 80002bc:	2140      	movs	r1, #64	@ 0x40
 80002be:	4856      	ldr	r0, [pc, #344]	@ (8000418 <read_keypad+0x2cc>)
 80002c0:	f000 fde9 	bl	8000e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);  // Pull the R3 High
 80002c4:	2200      	movs	r2, #0
 80002c6:	2120      	movs	r1, #32
 80002c8:	4853      	ldr	r0, [pc, #332]	@ (8000418 <read_keypad+0x2cc>)
 80002ca:	f000 fde4 	bl	8000e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 80002ce:	2201      	movs	r2, #1
 80002d0:	2110      	movs	r1, #16
 80002d2:	4851      	ldr	r0, [pc, #324]	@ (8000418 <read_keypad+0x2cc>)
 80002d4:	f000 fddf 	bl	8000e96 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 80002d8:	2108      	movs	r1, #8
 80002da:	484f      	ldr	r0, [pc, #316]	@ (8000418 <read_keypad+0x2cc>)
 80002dc:	f000 fdc4 	bl	8000e68 <HAL_GPIO_ReadPin>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d109      	bne.n	80002fa <read_keypad+0x1ae>
	{
		while (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)));   // wait till the button is pressed
 80002e6:	bf00      	nop
 80002e8:	2108      	movs	r1, #8
 80002ea:	484b      	ldr	r0, [pc, #300]	@ (8000418 <read_keypad+0x2cc>)
 80002ec:	f000 fdbc 	bl	8000e68 <HAL_GPIO_ReadPin>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0f8      	beq.n	80002e8 <read_keypad+0x19c>
		return '7';
 80002f6:	2337      	movs	r3, #55	@ 0x37
 80002f8:	e08b      	b.n	8000412 <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 80002fa:	2104      	movs	r1, #4
 80002fc:	4846      	ldr	r0, [pc, #280]	@ (8000418 <read_keypad+0x2cc>)
 80002fe:	f000 fdb3 	bl	8000e68 <HAL_GPIO_ReadPin>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d109      	bne.n	800031c <read_keypad+0x1d0>
	{
		while (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)));   // wait till the button is pressed
 8000308:	bf00      	nop
 800030a:	2104      	movs	r1, #4
 800030c:	4842      	ldr	r0, [pc, #264]	@ (8000418 <read_keypad+0x2cc>)
 800030e:	f000 fdab 	bl	8000e68 <HAL_GPIO_ReadPin>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d0f8      	beq.n	800030a <read_keypad+0x1be>
		return '8';
 8000318:	2338      	movs	r3, #56	@ 0x38
 800031a:	e07a      	b.n	8000412 <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 800031c:	2102      	movs	r1, #2
 800031e:	483e      	ldr	r0, [pc, #248]	@ (8000418 <read_keypad+0x2cc>)
 8000320:	f000 fda2 	bl	8000e68 <HAL_GPIO_ReadPin>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d109      	bne.n	800033e <read_keypad+0x1f2>
	{
		while (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)));   // wait till the button is pressed
 800032a:	bf00      	nop
 800032c:	2102      	movs	r1, #2
 800032e:	483a      	ldr	r0, [pc, #232]	@ (8000418 <read_keypad+0x2cc>)
 8000330:	f000 fd9a 	bl	8000e68 <HAL_GPIO_ReadPin>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d0f8      	beq.n	800032c <read_keypad+0x1e0>
		return '9';
 800033a:	2339      	movs	r3, #57	@ 0x39
 800033c:	e069      	b.n	8000412 <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 800033e:	2101      	movs	r1, #1
 8000340:	4835      	ldr	r0, [pc, #212]	@ (8000418 <read_keypad+0x2cc>)
 8000342:	f000 fd91 	bl	8000e68 <HAL_GPIO_ReadPin>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d109      	bne.n	8000360 <read_keypad+0x214>
	{
		while (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)));   // wait till the button is pressed
 800034c:	bf00      	nop
 800034e:	2101      	movs	r1, #1
 8000350:	4831      	ldr	r0, [pc, #196]	@ (8000418 <read_keypad+0x2cc>)
 8000352:	f000 fd89 	bl	8000e68 <HAL_GPIO_ReadPin>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d0f8      	beq.n	800034e <read_keypad+0x202>
		return 'C';
 800035c:	2343      	movs	r3, #67	@ 0x43
 800035e:	e058      	b.n	8000412 <read_keypad+0x2c6>
	}


	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 8000360:	2201      	movs	r2, #1
 8000362:	2180      	movs	r1, #128	@ 0x80
 8000364:	482c      	ldr	r0, [pc, #176]	@ (8000418 <read_keypad+0x2cc>)
 8000366:	f000 fd96 	bl	8000e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 800036a:	2201      	movs	r2, #1
 800036c:	2140      	movs	r1, #64	@ 0x40
 800036e:	482a      	ldr	r0, [pc, #168]	@ (8000418 <read_keypad+0x2cc>)
 8000370:	f000 fd91 	bl	8000e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 8000374:	2201      	movs	r2, #1
 8000376:	2120      	movs	r1, #32
 8000378:	4827      	ldr	r0, [pc, #156]	@ (8000418 <read_keypad+0x2cc>)
 800037a:	f000 fd8c 	bl	8000e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);  // Pull the R4 High
 800037e:	2200      	movs	r2, #0
 8000380:	2110      	movs	r1, #16
 8000382:	4825      	ldr	r0, [pc, #148]	@ (8000418 <read_keypad+0x2cc>)
 8000384:	f000 fd87 	bl	8000e96 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 8000388:	2108      	movs	r1, #8
 800038a:	4823      	ldr	r0, [pc, #140]	@ (8000418 <read_keypad+0x2cc>)
 800038c:	f000 fd6c 	bl	8000e68 <HAL_GPIO_ReadPin>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d109      	bne.n	80003aa <read_keypad+0x25e>
	{
		while (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)));   // wait till the button is pressed
 8000396:	bf00      	nop
 8000398:	2108      	movs	r1, #8
 800039a:	481f      	ldr	r0, [pc, #124]	@ (8000418 <read_keypad+0x2cc>)
 800039c:	f000 fd64 	bl	8000e68 <HAL_GPIO_ReadPin>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d0f8      	beq.n	8000398 <read_keypad+0x24c>
		return '*';
 80003a6:	232a      	movs	r3, #42	@ 0x2a
 80003a8:	e033      	b.n	8000412 <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 80003aa:	2104      	movs	r1, #4
 80003ac:	481a      	ldr	r0, [pc, #104]	@ (8000418 <read_keypad+0x2cc>)
 80003ae:	f000 fd5b 	bl	8000e68 <HAL_GPIO_ReadPin>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d109      	bne.n	80003cc <read_keypad+0x280>
	{
		while (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)));   // wait till the button is pressed
 80003b8:	bf00      	nop
 80003ba:	2104      	movs	r1, #4
 80003bc:	4816      	ldr	r0, [pc, #88]	@ (8000418 <read_keypad+0x2cc>)
 80003be:	f000 fd53 	bl	8000e68 <HAL_GPIO_ReadPin>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d0f8      	beq.n	80003ba <read_keypad+0x26e>
		return '0';
 80003c8:	2330      	movs	r3, #48	@ 0x30
 80003ca:	e022      	b.n	8000412 <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 80003cc:	2102      	movs	r1, #2
 80003ce:	4812      	ldr	r0, [pc, #72]	@ (8000418 <read_keypad+0x2cc>)
 80003d0:	f000 fd4a 	bl	8000e68 <HAL_GPIO_ReadPin>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d109      	bne.n	80003ee <read_keypad+0x2a2>
	{
		while (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)));   // wait till the button is pressed
 80003da:	bf00      	nop
 80003dc:	2102      	movs	r1, #2
 80003de:	480e      	ldr	r0, [pc, #56]	@ (8000418 <read_keypad+0x2cc>)
 80003e0:	f000 fd42 	bl	8000e68 <HAL_GPIO_ReadPin>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d0f8      	beq.n	80003dc <read_keypad+0x290>
		return '#';
 80003ea:	2323      	movs	r3, #35	@ 0x23
 80003ec:	e011      	b.n	8000412 <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 80003ee:	2101      	movs	r1, #1
 80003f0:	4809      	ldr	r0, [pc, #36]	@ (8000418 <read_keypad+0x2cc>)
 80003f2:	f000 fd39 	bl	8000e68 <HAL_GPIO_ReadPin>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d109      	bne.n	8000410 <read_keypad+0x2c4>
	{
		while (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)));   // wait till the button is pressed
 80003fc:	bf00      	nop
 80003fe:	2101      	movs	r1, #1
 8000400:	4805      	ldr	r0, [pc, #20]	@ (8000418 <read_keypad+0x2cc>)
 8000402:	f000 fd31 	bl	8000e68 <HAL_GPIO_ReadPin>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d0f8      	beq.n	80003fe <read_keypad+0x2b2>
		return 'D';
 800040c:	2344      	movs	r3, #68	@ 0x44
 800040e:	e000      	b.n	8000412 <read_keypad+0x2c6>
	}

	return 0x01;  // /if nothing is pressed
 8000410:	2301      	movs	r3, #1

}
 8000412:	4618      	mov	r0, r3
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40010800 	.word	0x40010800

0800041c <__io_putchar>:


#define PRINTF   int __io_putchar(int ch)
PRINTF
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000424:	1d39      	adds	r1, r7, #4
 8000426:	f04f 33ff 	mov.w	r3, #4294967295
 800042a:	2201      	movs	r2, #1
 800042c:	4803      	ldr	r0, [pc, #12]	@ (800043c <__io_putchar+0x20>)
 800042e:	f001 f9ab 	bl	8001788 <HAL_UART_Transmit>
	return ch;
 8000432:	687b      	ldr	r3, [r7, #4]
}
 8000434:	4618      	mov	r0, r3
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000084 	.word	0x20000084

08000440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000446:	f000 fa4d 	bl	80008e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800044a:	f000 f815 	bl	8000478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800044e:	f000 f883 	bl	8000558 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000452:	f000 f857 	bl	8000504 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("system started\r\n");
 8000456:	4807      	ldr	r0, [pc, #28]	@ (8000474 <main+0x34>)
 8000458:	f001 fc8a 	bl	8001d70 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char key = read_keypad();
 800045c:	f7ff fe76 	bl	800014c <read_keypad>
 8000460:	4603      	mov	r3, r0
 8000462:	71fb      	strb	r3, [r7, #7]
	  if (key!=0x01)
 8000464:	79fb      	ldrb	r3, [r7, #7]
 8000466:	2b01      	cmp	r3, #1
 8000468:	d0f8      	beq.n	800045c <main+0x1c>
	  {
		  printf("%c",key);
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	4618      	mov	r0, r3
 800046e:	f001 fc21 	bl	8001cb4 <putchar>
  {
 8000472:	e7f3      	b.n	800045c <main+0x1c>
 8000474:	0800250c 	.word	0x0800250c

08000478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b090      	sub	sp, #64	@ 0x40
 800047c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047e:	f107 0318 	add.w	r3, r7, #24
 8000482:	2228      	movs	r2, #40	@ 0x28
 8000484:	2100      	movs	r1, #0
 8000486:	4618      	mov	r0, r3
 8000488:	f001 fd52 	bl	8001f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
 8000498:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800049a:	2301      	movs	r3, #1
 800049c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800049e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004a4:	2300      	movs	r3, #0
 80004a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a8:	2301      	movs	r3, #1
 80004aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ac:	2302      	movs	r3, #2
 80004ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004b6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80004ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004bc:	f107 0318 	add.w	r3, r7, #24
 80004c0:	4618      	mov	r0, r3
 80004c2:	f000 fd01 	bl	8000ec8 <HAL_RCC_OscConfig>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004cc:	f000 f88e 	bl	80005ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d0:	230f      	movs	r3, #15
 80004d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d4:	2302      	movs	r3, #2
 80004d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d8:	2300      	movs	r3, #0
 80004da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2102      	movs	r1, #2
 80004ea:	4618      	mov	r0, r3
 80004ec:	f000 ff6e 	bl	80013cc <HAL_RCC_ClockConfig>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004f6:	f000 f879 	bl	80005ec <Error_Handler>
  }
}
 80004fa:	bf00      	nop
 80004fc:	3740      	adds	r7, #64	@ 0x40
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000508:	4b11      	ldr	r3, [pc, #68]	@ (8000550 <MX_USART1_UART_Init+0x4c>)
 800050a:	4a12      	ldr	r2, [pc, #72]	@ (8000554 <MX_USART1_UART_Init+0x50>)
 800050c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800050e:	4b10      	ldr	r3, [pc, #64]	@ (8000550 <MX_USART1_UART_Init+0x4c>)
 8000510:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000514:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000516:	4b0e      	ldr	r3, [pc, #56]	@ (8000550 <MX_USART1_UART_Init+0x4c>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800051c:	4b0c      	ldr	r3, [pc, #48]	@ (8000550 <MX_USART1_UART_Init+0x4c>)
 800051e:	2200      	movs	r2, #0
 8000520:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000522:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <MX_USART1_UART_Init+0x4c>)
 8000524:	2200      	movs	r2, #0
 8000526:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000528:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <MX_USART1_UART_Init+0x4c>)
 800052a:	220c      	movs	r2, #12
 800052c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800052e:	4b08      	ldr	r3, [pc, #32]	@ (8000550 <MX_USART1_UART_Init+0x4c>)
 8000530:	2200      	movs	r2, #0
 8000532:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000534:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <MX_USART1_UART_Init+0x4c>)
 8000536:	2200      	movs	r2, #0
 8000538:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800053a:	4805      	ldr	r0, [pc, #20]	@ (8000550 <MX_USART1_UART_Init+0x4c>)
 800053c:	f001 f8d4 	bl	80016e8 <HAL_UART_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000546:	f000 f851 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000084 	.word	0x20000084
 8000554:	40013800 	.word	0x40013800

08000558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	f107 0308 	add.w	r3, r7, #8
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056c:	4b1d      	ldr	r3, [pc, #116]	@ (80005e4 <MX_GPIO_Init+0x8c>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a1c      	ldr	r2, [pc, #112]	@ (80005e4 <MX_GPIO_Init+0x8c>)
 8000572:	f043 0320 	orr.w	r3, r3, #32
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b1a      	ldr	r3, [pc, #104]	@ (80005e4 <MX_GPIO_Init+0x8c>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f003 0320 	and.w	r3, r3, #32
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000584:	4b17      	ldr	r3, [pc, #92]	@ (80005e4 <MX_GPIO_Init+0x8c>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a16      	ldr	r2, [pc, #88]	@ (80005e4 <MX_GPIO_Init+0x8c>)
 800058a:	f043 0304 	orr.w	r3, r3, #4
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b14      	ldr	r3, [pc, #80]	@ (80005e4 <MX_GPIO_Init+0x8c>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0304 	and.w	r3, r3, #4
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R4_Pin|R3_Pin|R2_Pin|R1_Pin, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	21f0      	movs	r1, #240	@ 0xf0
 80005a0:	4811      	ldr	r0, [pc, #68]	@ (80005e8 <MX_GPIO_Init+0x90>)
 80005a2:	f000 fc78 	bl	8000e96 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C4_Pin C3_Pin C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin|C2_Pin|C1_Pin;
 80005a6:	230f      	movs	r3, #15
 80005a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b2:	f107 0308 	add.w	r3, r7, #8
 80005b6:	4619      	mov	r1, r3
 80005b8:	480b      	ldr	r0, [pc, #44]	@ (80005e8 <MX_GPIO_Init+0x90>)
 80005ba:	f000 fad9 	bl	8000b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : R4_Pin R3_Pin R2_Pin R1_Pin */
  GPIO_InitStruct.Pin = R4_Pin|R3_Pin|R2_Pin|R1_Pin;
 80005be:	23f0      	movs	r3, #240	@ 0xf0
 80005c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2302      	movs	r3, #2
 80005cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	4619      	mov	r1, r3
 80005d4:	4804      	ldr	r0, [pc, #16]	@ (80005e8 <MX_GPIO_Init+0x90>)
 80005d6:	f000 facb 	bl	8000b70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005da:	bf00      	nop
 80005dc:	3718      	adds	r7, #24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40010800 	.word	0x40010800

080005ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f0:	b672      	cpsid	i
}
 80005f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <Error_Handler+0x8>

080005f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005fe:	4b15      	ldr	r3, [pc, #84]	@ (8000654 <HAL_MspInit+0x5c>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	4a14      	ldr	r2, [pc, #80]	@ (8000654 <HAL_MspInit+0x5c>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6193      	str	r3, [r2, #24]
 800060a:	4b12      	ldr	r3, [pc, #72]	@ (8000654 <HAL_MspInit+0x5c>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000616:	4b0f      	ldr	r3, [pc, #60]	@ (8000654 <HAL_MspInit+0x5c>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	4a0e      	ldr	r2, [pc, #56]	@ (8000654 <HAL_MspInit+0x5c>)
 800061c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000620:	61d3      	str	r3, [r2, #28]
 8000622:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <HAL_MspInit+0x5c>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800062e:	4b0a      	ldr	r3, [pc, #40]	@ (8000658 <HAL_MspInit+0x60>)
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	4a04      	ldr	r2, [pc, #16]	@ (8000658 <HAL_MspInit+0x60>)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	40021000 	.word	0x40021000
 8000658:	40010000 	.word	0x40010000

0800065c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a1c      	ldr	r2, [pc, #112]	@ (80006e8 <HAL_UART_MspInit+0x8c>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d131      	bne.n	80006e0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800067c:	4b1b      	ldr	r3, [pc, #108]	@ (80006ec <HAL_UART_MspInit+0x90>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a1a      	ldr	r2, [pc, #104]	@ (80006ec <HAL_UART_MspInit+0x90>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b18      	ldr	r3, [pc, #96]	@ (80006ec <HAL_UART_MspInit+0x90>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000694:	4b15      	ldr	r3, [pc, #84]	@ (80006ec <HAL_UART_MspInit+0x90>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a14      	ldr	r2, [pc, #80]	@ (80006ec <HAL_UART_MspInit+0x90>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <HAL_UART_MspInit+0x90>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b2:	2302      	movs	r3, #2
 80006b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b6:	2303      	movs	r3, #3
 80006b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 0310 	add.w	r3, r7, #16
 80006be:	4619      	mov	r1, r3
 80006c0:	480b      	ldr	r0, [pc, #44]	@ (80006f0 <HAL_UART_MspInit+0x94>)
 80006c2:	f000 fa55 	bl	8000b70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	4619      	mov	r1, r3
 80006da:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <HAL_UART_MspInit+0x94>)
 80006dc:	f000 fa48 	bl	8000b70 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80006e0:	bf00      	nop
 80006e2:	3720      	adds	r7, #32
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40013800 	.word	0x40013800
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40010800 	.word	0x40010800

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <NMI_Handler+0x4>

080006fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000700:	bf00      	nop
 8000702:	e7fd      	b.n	8000700 <HardFault_Handler+0x4>

08000704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <MemManage_Handler+0x4>

0800070c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <BusFault_Handler+0x4>

08000714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000718:	bf00      	nop
 800071a:	e7fd      	b.n	8000718 <UsageFault_Handler+0x4>

0800071c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr

08000740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000744:	f000 f914 	bl	8000970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	e00a      	b.n	8000774 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800075e:	f3af 8000 	nop.w
 8000762:	4601      	mov	r1, r0
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	1c5a      	adds	r2, r3, #1
 8000768:	60ba      	str	r2, [r7, #8]
 800076a:	b2ca      	uxtb	r2, r1
 800076c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	3301      	adds	r3, #1
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	697a      	ldr	r2, [r7, #20]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	429a      	cmp	r2, r3
 800077a:	dbf0      	blt.n	800075e <_read+0x12>
  }

  return len;
 800077c:	687b      	ldr	r3, [r7, #4]
}
 800077e:	4618      	mov	r0, r3
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b086      	sub	sp, #24
 800078a:	af00      	add	r7, sp, #0
 800078c:	60f8      	str	r0, [r7, #12]
 800078e:	60b9      	str	r1, [r7, #8]
 8000790:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	e009      	b.n	80007ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	1c5a      	adds	r2, r3, #1
 800079c:	60ba      	str	r2, [r7, #8]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fe3b 	bl	800041c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	3301      	adds	r3, #1
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	697a      	ldr	r2, [r7, #20]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	dbf1      	blt.n	8000798 <_write+0x12>
  }
  return len;
 80007b4:	687b      	ldr	r3, [r7, #4]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <_close>:

int _close(int file)
{
 80007be:	b480      	push	{r7}
 80007c0:	b083      	sub	sp, #12
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007e4:	605a      	str	r2, [r3, #4]
  return 0;
 80007e6:	2300      	movs	r3, #0
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr

080007f2 <_isatty>:

int _isatty(int file)
{
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007fa:	2301      	movs	r3, #1
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr

08000806 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000806:	b480      	push	{r7}
 8000808:	b085      	sub	sp, #20
 800080a:	af00      	add	r7, sp, #0
 800080c:	60f8      	str	r0, [r7, #12]
 800080e:	60b9      	str	r1, [r7, #8]
 8000810:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000812:	2300      	movs	r3, #0
}
 8000814:	4618      	mov	r0, r3
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
	...

08000820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000828:	4a14      	ldr	r2, [pc, #80]	@ (800087c <_sbrk+0x5c>)
 800082a:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <_sbrk+0x60>)
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000834:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <_sbrk+0x64>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d102      	bne.n	8000842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <_sbrk+0x64>)
 800083e:	4a12      	ldr	r2, [pc, #72]	@ (8000888 <_sbrk+0x68>)
 8000840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000842:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <_sbrk+0x64>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	429a      	cmp	r2, r3
 800084e:	d207      	bcs.n	8000860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000850:	f001 fbbc 	bl	8001fcc <__errno>
 8000854:	4603      	mov	r3, r0
 8000856:	220c      	movs	r2, #12
 8000858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
 800085e:	e009      	b.n	8000874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000860:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <_sbrk+0x64>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000866:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <_sbrk+0x64>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	4a05      	ldr	r2, [pc, #20]	@ (8000884 <_sbrk+0x64>)
 8000870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000872:	68fb      	ldr	r3, [r7, #12]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20002800 	.word	0x20002800
 8000880:	00000400 	.word	0x00000400
 8000884:	200000cc 	.word	0x200000cc
 8000888:	20000220 	.word	0x20000220

0800088c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000898:	f7ff fff8 	bl	800088c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800089c:	480b      	ldr	r0, [pc, #44]	@ (80008cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800089e:	490c      	ldr	r1, [pc, #48]	@ (80008d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008a0:	4a0c      	ldr	r2, [pc, #48]	@ (80008d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a4:	e002      	b.n	80008ac <LoopCopyDataInit>

080008a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008aa:	3304      	adds	r3, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b0:	d3f9      	bcc.n	80008a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b2:	4a09      	ldr	r2, [pc, #36]	@ (80008d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008b4:	4c09      	ldr	r4, [pc, #36]	@ (80008dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b8:	e001      	b.n	80008be <LoopFillZerobss>

080008ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008bc:	3204      	adds	r2, #4

080008be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c0:	d3fb      	bcc.n	80008ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c2:	f001 fb89 	bl	8001fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008c6:	f7ff fdbb 	bl	8000440 <main>
  bx lr
 80008ca:	4770      	bx	lr
  ldr r0, =_sdata
 80008cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80008d4:	08002550 	.word	0x08002550
  ldr r2, =_sbss
 80008d8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80008dc:	20000220 	.word	0x20000220

080008e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e0:	e7fe      	b.n	80008e0 <ADC1_2_IRQHandler>
	...

080008e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e8:	4b08      	ldr	r3, [pc, #32]	@ (800090c <HAL_Init+0x28>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a07      	ldr	r2, [pc, #28]	@ (800090c <HAL_Init+0x28>)
 80008ee:	f043 0310 	orr.w	r3, r3, #16
 80008f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f4:	2003      	movs	r0, #3
 80008f6:	f000 f907 	bl	8000b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008fa:	200f      	movs	r0, #15
 80008fc:	f000 f808 	bl	8000910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000900:	f7ff fe7a 	bl	80005f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40022000 	.word	0x40022000

08000910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <HAL_InitTick+0x54>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <HAL_InitTick+0x58>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000926:	fbb3 f3f1 	udiv	r3, r3, r1
 800092a:	fbb2 f3f3 	udiv	r3, r2, r3
 800092e:	4618      	mov	r0, r3
 8000930:	f000 f911 	bl	8000b56 <HAL_SYSTICK_Config>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	e00e      	b.n	800095c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b0f      	cmp	r3, #15
 8000942:	d80a      	bhi.n	800095a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000944:	2200      	movs	r2, #0
 8000946:	6879      	ldr	r1, [r7, #4]
 8000948:	f04f 30ff 	mov.w	r0, #4294967295
 800094c:	f000 f8e7 	bl	8000b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000950:	4a06      	ldr	r2, [pc, #24]	@ (800096c <HAL_InitTick+0x5c>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000956:	2300      	movs	r3, #0
 8000958:	e000      	b.n	800095c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
}
 800095c:	4618      	mov	r0, r3
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000000 	.word	0x20000000
 8000968:	20000008 	.word	0x20000008
 800096c:	20000004 	.word	0x20000004

08000970 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000974:	4b05      	ldr	r3, [pc, #20]	@ (800098c <HAL_IncTick+0x1c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	4b05      	ldr	r3, [pc, #20]	@ (8000990 <HAL_IncTick+0x20>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4413      	add	r3, r2
 8000980:	4a03      	ldr	r2, [pc, #12]	@ (8000990 <HAL_IncTick+0x20>)
 8000982:	6013      	str	r3, [r2, #0]
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	20000008 	.word	0x20000008
 8000990:	200000d0 	.word	0x200000d0

08000994 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return uwTick;
 8000998:	4b02      	ldr	r3, [pc, #8]	@ (80009a4 <HAL_GetTick+0x10>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	4618      	mov	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	200000d0 	.word	0x200000d0

080009a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b8:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009c4:	4013      	ands	r3, r2
 80009c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009da:	4a04      	ldr	r2, [pc, #16]	@ (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	60d3      	str	r3, [r2, #12]
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f4:	4b04      	ldr	r3, [pc, #16]	@ (8000a08 <__NVIC_GetPriorityGrouping+0x18>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	0a1b      	lsrs	r3, r3, #8
 80009fa:	f003 0307 	and.w	r3, r3, #7
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	6039      	str	r1, [r7, #0]
 8000a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	db0a      	blt.n	8000a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	490c      	ldr	r1, [pc, #48]	@ (8000a58 <__NVIC_SetPriority+0x4c>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	0112      	lsls	r2, r2, #4
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	440b      	add	r3, r1
 8000a30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a34:	e00a      	b.n	8000a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4908      	ldr	r1, [pc, #32]	@ (8000a5c <__NVIC_SetPriority+0x50>)
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	f003 030f 	and.w	r3, r3, #15
 8000a42:	3b04      	subs	r3, #4
 8000a44:	0112      	lsls	r2, r2, #4
 8000a46:	b2d2      	uxtb	r2, r2
 8000a48:	440b      	add	r3, r1
 8000a4a:	761a      	strb	r2, [r3, #24]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000e100 	.word	0xe000e100
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b089      	sub	sp, #36	@ 0x24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	f1c3 0307 	rsb	r3, r3, #7
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	bf28      	it	cs
 8000a7e:	2304      	movcs	r3, #4
 8000a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3304      	adds	r3, #4
 8000a86:	2b06      	cmp	r3, #6
 8000a88:	d902      	bls.n	8000a90 <NVIC_EncodePriority+0x30>
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3b03      	subs	r3, #3
 8000a8e:	e000      	b.n	8000a92 <NVIC_EncodePriority+0x32>
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	f04f 32ff 	mov.w	r2, #4294967295
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43da      	mvns	r2, r3
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab2:	43d9      	mvns	r1, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	4313      	orrs	r3, r2
         );
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3724      	adds	r7, #36	@ 0x24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ad4:	d301      	bcc.n	8000ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e00f      	b.n	8000afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ada:	4a0a      	ldr	r2, [pc, #40]	@ (8000b04 <SysTick_Config+0x40>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae2:	210f      	movs	r1, #15
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	f7ff ff90 	bl	8000a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aec:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <SysTick_Config+0x40>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af2:	4b04      	ldr	r3, [pc, #16]	@ (8000b04 <SysTick_Config+0x40>)
 8000af4:	2207      	movs	r2, #7
 8000af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	e000e010 	.word	0xe000e010

08000b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff ff49 	bl	80009a8 <__NVIC_SetPriorityGrouping>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b086      	sub	sp, #24
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	4603      	mov	r3, r0
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
 8000b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b30:	f7ff ff5e 	bl	80009f0 <__NVIC_GetPriorityGrouping>
 8000b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	68b9      	ldr	r1, [r7, #8]
 8000b3a:	6978      	ldr	r0, [r7, #20]
 8000b3c:	f7ff ff90 	bl	8000a60 <NVIC_EncodePriority>
 8000b40:	4602      	mov	r2, r0
 8000b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b46:	4611      	mov	r1, r2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ff5f 	bl	8000a0c <__NVIC_SetPriority>
}
 8000b4e:	bf00      	nop
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff ffb0 	bl	8000ac4 <SysTick_Config>
 8000b64:	4603      	mov	r3, r0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b08b      	sub	sp, #44	@ 0x2c
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b82:	e161      	b.n	8000e48 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b84:	2201      	movs	r2, #1
 8000b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	69fa      	ldr	r2, [r7, #28]
 8000b94:	4013      	ands	r3, r2
 8000b96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	f040 8150 	bne.w	8000e42 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	4a97      	ldr	r2, [pc, #604]	@ (8000e04 <HAL_GPIO_Init+0x294>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d05e      	beq.n	8000c6a <HAL_GPIO_Init+0xfa>
 8000bac:	4a95      	ldr	r2, [pc, #596]	@ (8000e04 <HAL_GPIO_Init+0x294>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d875      	bhi.n	8000c9e <HAL_GPIO_Init+0x12e>
 8000bb2:	4a95      	ldr	r2, [pc, #596]	@ (8000e08 <HAL_GPIO_Init+0x298>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d058      	beq.n	8000c6a <HAL_GPIO_Init+0xfa>
 8000bb8:	4a93      	ldr	r2, [pc, #588]	@ (8000e08 <HAL_GPIO_Init+0x298>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d86f      	bhi.n	8000c9e <HAL_GPIO_Init+0x12e>
 8000bbe:	4a93      	ldr	r2, [pc, #588]	@ (8000e0c <HAL_GPIO_Init+0x29c>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d052      	beq.n	8000c6a <HAL_GPIO_Init+0xfa>
 8000bc4:	4a91      	ldr	r2, [pc, #580]	@ (8000e0c <HAL_GPIO_Init+0x29c>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d869      	bhi.n	8000c9e <HAL_GPIO_Init+0x12e>
 8000bca:	4a91      	ldr	r2, [pc, #580]	@ (8000e10 <HAL_GPIO_Init+0x2a0>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d04c      	beq.n	8000c6a <HAL_GPIO_Init+0xfa>
 8000bd0:	4a8f      	ldr	r2, [pc, #572]	@ (8000e10 <HAL_GPIO_Init+0x2a0>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d863      	bhi.n	8000c9e <HAL_GPIO_Init+0x12e>
 8000bd6:	4a8f      	ldr	r2, [pc, #572]	@ (8000e14 <HAL_GPIO_Init+0x2a4>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d046      	beq.n	8000c6a <HAL_GPIO_Init+0xfa>
 8000bdc:	4a8d      	ldr	r2, [pc, #564]	@ (8000e14 <HAL_GPIO_Init+0x2a4>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d85d      	bhi.n	8000c9e <HAL_GPIO_Init+0x12e>
 8000be2:	2b12      	cmp	r3, #18
 8000be4:	d82a      	bhi.n	8000c3c <HAL_GPIO_Init+0xcc>
 8000be6:	2b12      	cmp	r3, #18
 8000be8:	d859      	bhi.n	8000c9e <HAL_GPIO_Init+0x12e>
 8000bea:	a201      	add	r2, pc, #4	@ (adr r2, 8000bf0 <HAL_GPIO_Init+0x80>)
 8000bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf0:	08000c6b 	.word	0x08000c6b
 8000bf4:	08000c45 	.word	0x08000c45
 8000bf8:	08000c57 	.word	0x08000c57
 8000bfc:	08000c99 	.word	0x08000c99
 8000c00:	08000c9f 	.word	0x08000c9f
 8000c04:	08000c9f 	.word	0x08000c9f
 8000c08:	08000c9f 	.word	0x08000c9f
 8000c0c:	08000c9f 	.word	0x08000c9f
 8000c10:	08000c9f 	.word	0x08000c9f
 8000c14:	08000c9f 	.word	0x08000c9f
 8000c18:	08000c9f 	.word	0x08000c9f
 8000c1c:	08000c9f 	.word	0x08000c9f
 8000c20:	08000c9f 	.word	0x08000c9f
 8000c24:	08000c9f 	.word	0x08000c9f
 8000c28:	08000c9f 	.word	0x08000c9f
 8000c2c:	08000c9f 	.word	0x08000c9f
 8000c30:	08000c9f 	.word	0x08000c9f
 8000c34:	08000c4d 	.word	0x08000c4d
 8000c38:	08000c61 	.word	0x08000c61
 8000c3c:	4a76      	ldr	r2, [pc, #472]	@ (8000e18 <HAL_GPIO_Init+0x2a8>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d013      	beq.n	8000c6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c42:	e02c      	b.n	8000c9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	623b      	str	r3, [r7, #32]
          break;
 8000c4a:	e029      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	3304      	adds	r3, #4
 8000c52:	623b      	str	r3, [r7, #32]
          break;
 8000c54:	e024      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	3308      	adds	r3, #8
 8000c5c:	623b      	str	r3, [r7, #32]
          break;
 8000c5e:	e01f      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	330c      	adds	r3, #12
 8000c66:	623b      	str	r3, [r7, #32]
          break;
 8000c68:	e01a      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d102      	bne.n	8000c78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c72:	2304      	movs	r3, #4
 8000c74:	623b      	str	r3, [r7, #32]
          break;
 8000c76:	e013      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d105      	bne.n	8000c8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c80:	2308      	movs	r3, #8
 8000c82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	69fa      	ldr	r2, [r7, #28]
 8000c88:	611a      	str	r2, [r3, #16]
          break;
 8000c8a:	e009      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c8c:	2308      	movs	r3, #8
 8000c8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69fa      	ldr	r2, [r7, #28]
 8000c94:	615a      	str	r2, [r3, #20]
          break;
 8000c96:	e003      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	623b      	str	r3, [r7, #32]
          break;
 8000c9c:	e000      	b.n	8000ca0 <HAL_GPIO_Init+0x130>
          break;
 8000c9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	2bff      	cmp	r3, #255	@ 0xff
 8000ca4:	d801      	bhi.n	8000caa <HAL_GPIO_Init+0x13a>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	e001      	b.n	8000cae <HAL_GPIO_Init+0x13e>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3304      	adds	r3, #4
 8000cae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	2bff      	cmp	r3, #255	@ 0xff
 8000cb4:	d802      	bhi.n	8000cbc <HAL_GPIO_Init+0x14c>
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	e002      	b.n	8000cc2 <HAL_GPIO_Init+0x152>
 8000cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cbe:	3b08      	subs	r3, #8
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	210f      	movs	r1, #15
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	6a39      	ldr	r1, [r7, #32]
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f000 80a9 	beq.w	8000e42 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cf0:	4b4a      	ldr	r3, [pc, #296]	@ (8000e1c <HAL_GPIO_Init+0x2ac>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a49      	ldr	r2, [pc, #292]	@ (8000e1c <HAL_GPIO_Init+0x2ac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b47      	ldr	r3, [pc, #284]	@ (8000e1c <HAL_GPIO_Init+0x2ac>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d08:	4a45      	ldr	r2, [pc, #276]	@ (8000e20 <HAL_GPIO_Init+0x2b0>)
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d0c:	089b      	lsrs	r3, r3, #2
 8000d0e:	3302      	adds	r3, #2
 8000d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	220f      	movs	r2, #15
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a3d      	ldr	r2, [pc, #244]	@ (8000e24 <HAL_GPIO_Init+0x2b4>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d00d      	beq.n	8000d50 <HAL_GPIO_Init+0x1e0>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a3c      	ldr	r2, [pc, #240]	@ (8000e28 <HAL_GPIO_Init+0x2b8>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d007      	beq.n	8000d4c <HAL_GPIO_Init+0x1dc>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a3b      	ldr	r2, [pc, #236]	@ (8000e2c <HAL_GPIO_Init+0x2bc>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d101      	bne.n	8000d48 <HAL_GPIO_Init+0x1d8>
 8000d44:	2302      	movs	r3, #2
 8000d46:	e004      	b.n	8000d52 <HAL_GPIO_Init+0x1e2>
 8000d48:	2303      	movs	r3, #3
 8000d4a:	e002      	b.n	8000d52 <HAL_GPIO_Init+0x1e2>
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e000      	b.n	8000d52 <HAL_GPIO_Init+0x1e2>
 8000d50:	2300      	movs	r3, #0
 8000d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d54:	f002 0203 	and.w	r2, r2, #3
 8000d58:	0092      	lsls	r2, r2, #2
 8000d5a:	4093      	lsls	r3, r2
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d62:	492f      	ldr	r1, [pc, #188]	@ (8000e20 <HAL_GPIO_Init+0x2b0>)
 8000d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	3302      	adds	r3, #2
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d006      	beq.n	8000d8a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	492b      	ldr	r1, [pc, #172]	@ (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	608b      	str	r3, [r1, #8]
 8000d88:	e006      	b.n	8000d98 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d8a:	4b29      	ldr	r3, [pc, #164]	@ (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	4927      	ldr	r1, [pc, #156]	@ (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d006      	beq.n	8000db2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000da4:	4b22      	ldr	r3, [pc, #136]	@ (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000da6:	68da      	ldr	r2, [r3, #12]
 8000da8:	4921      	ldr	r1, [pc, #132]	@ (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	60cb      	str	r3, [r1, #12]
 8000db0:	e006      	b.n	8000dc0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000db2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000db4:	68da      	ldr	r2, [r3, #12]
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	43db      	mvns	r3, r3
 8000dba:	491d      	ldr	r1, [pc, #116]	@ (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d006      	beq.n	8000dda <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dcc:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	4917      	ldr	r1, [pc, #92]	@ (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	604b      	str	r3, [r1, #4]
 8000dd8:	e006      	b.n	8000de8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dda:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	4913      	ldr	r1, [pc, #76]	@ (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000de4:	4013      	ands	r3, r2
 8000de6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d01f      	beq.n	8000e34 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000df4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	490d      	ldr	r1, [pc, #52]	@ (8000e30 <HAL_GPIO_Init+0x2c0>)
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	600b      	str	r3, [r1, #0]
 8000e00:	e01f      	b.n	8000e42 <HAL_GPIO_Init+0x2d2>
 8000e02:	bf00      	nop
 8000e04:	10320000 	.word	0x10320000
 8000e08:	10310000 	.word	0x10310000
 8000e0c:	10220000 	.word	0x10220000
 8000e10:	10210000 	.word	0x10210000
 8000e14:	10120000 	.word	0x10120000
 8000e18:	10110000 	.word	0x10110000
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40010000 	.word	0x40010000
 8000e24:	40010800 	.word	0x40010800
 8000e28:	40010c00 	.word	0x40010c00
 8000e2c:	40011000 	.word	0x40011000
 8000e30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e34:	4b0b      	ldr	r3, [pc, #44]	@ (8000e64 <HAL_GPIO_Init+0x2f4>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	4909      	ldr	r1, [pc, #36]	@ (8000e64 <HAL_GPIO_Init+0x2f4>)
 8000e3e:	4013      	ands	r3, r2
 8000e40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e44:	3301      	adds	r3, #1
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f47f ae96 	bne.w	8000b84 <HAL_GPIO_Init+0x14>
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	372c      	adds	r7, #44	@ 0x2c
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	40010400 	.word	0x40010400

08000e68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	887b      	ldrh	r3, [r7, #2]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d002      	beq.n	8000e86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e80:	2301      	movs	r3, #1
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e001      	b.n	8000e8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e86:	2300      	movs	r3, #0
 8000e88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr

08000e96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	807b      	strh	r3, [r7, #2]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ea6:	787b      	ldrb	r3, [r7, #1]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eac:	887a      	ldrh	r2, [r7, #2]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000eb2:	e003      	b.n	8000ebc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eb4:	887b      	ldrh	r3, [r7, #2]
 8000eb6:	041a      	lsls	r2, r3, #16
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	611a      	str	r2, [r3, #16]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
	...

08000ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e272      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 8087 	beq.w	8000ff6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ee8:	4b92      	ldr	r3, [pc, #584]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 030c 	and.w	r3, r3, #12
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d00c      	beq.n	8000f0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ef4:	4b8f      	ldr	r3, [pc, #572]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 030c 	and.w	r3, r3, #12
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d112      	bne.n	8000f26 <HAL_RCC_OscConfig+0x5e>
 8000f00:	4b8c      	ldr	r3, [pc, #560]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f0c:	d10b      	bne.n	8000f26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0e:	4b89      	ldr	r3, [pc, #548]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d06c      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x12c>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d168      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e24c      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f2e:	d106      	bne.n	8000f3e <HAL_RCC_OscConfig+0x76>
 8000f30:	4b80      	ldr	r3, [pc, #512]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a7f      	ldr	r2, [pc, #508]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	e02e      	b.n	8000f9c <HAL_RCC_OscConfig+0xd4>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10c      	bne.n	8000f60 <HAL_RCC_OscConfig+0x98>
 8000f46:	4b7b      	ldr	r3, [pc, #492]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a7a      	ldr	r2, [pc, #488]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	4b78      	ldr	r3, [pc, #480]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a77      	ldr	r2, [pc, #476]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e01d      	b.n	8000f9c <HAL_RCC_OscConfig+0xd4>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f68:	d10c      	bne.n	8000f84 <HAL_RCC_OscConfig+0xbc>
 8000f6a:	4b72      	ldr	r3, [pc, #456]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a71      	ldr	r2, [pc, #452]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	4b6f      	ldr	r3, [pc, #444]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a6e      	ldr	r2, [pc, #440]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	e00b      	b.n	8000f9c <HAL_RCC_OscConfig+0xd4>
 8000f84:	4b6b      	ldr	r3, [pc, #428]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a6a      	ldr	r2, [pc, #424]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4b68      	ldr	r3, [pc, #416]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a67      	ldr	r2, [pc, #412]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000f96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d013      	beq.n	8000fcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fcf6 	bl	8000994 <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fac:	f7ff fcf2 	bl	8000994 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b64      	cmp	r3, #100	@ 0x64
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e200      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fbe:	4b5d      	ldr	r3, [pc, #372]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d0f0      	beq.n	8000fac <HAL_RCC_OscConfig+0xe4>
 8000fca:	e014      	b.n	8000ff6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fce2 	bl	8000994 <HAL_GetTick>
 8000fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd2:	e008      	b.n	8000fe6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd4:	f7ff fcde 	bl	8000994 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b64      	cmp	r3, #100	@ 0x64
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e1ec      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe6:	4b53      	ldr	r3, [pc, #332]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f0      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x10c>
 8000ff2:	e000      	b.n	8000ff6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d063      	beq.n	80010ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001002:	4b4c      	ldr	r3, [pc, #304]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 030c 	and.w	r3, r3, #12
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00b      	beq.n	8001026 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800100e:	4b49      	ldr	r3, [pc, #292]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 030c 	and.w	r3, r3, #12
 8001016:	2b08      	cmp	r3, #8
 8001018:	d11c      	bne.n	8001054 <HAL_RCC_OscConfig+0x18c>
 800101a:	4b46      	ldr	r3, [pc, #280]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d116      	bne.n	8001054 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001026:	4b43      	ldr	r3, [pc, #268]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d005      	beq.n	800103e <HAL_RCC_OscConfig+0x176>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d001      	beq.n	800103e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e1c0      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103e:	4b3d      	ldr	r3, [pc, #244]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	4939      	ldr	r1, [pc, #228]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 800104e:	4313      	orrs	r3, r2
 8001050:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001052:	e03a      	b.n	80010ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d020      	beq.n	800109e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800105c:	4b36      	ldr	r3, [pc, #216]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 800105e:	2201      	movs	r2, #1
 8001060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001062:	f7ff fc97 	bl	8000994 <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001068:	e008      	b.n	800107c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800106a:	f7ff fc93 	bl	8000994 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e1a1      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800107c:	4b2d      	ldr	r3, [pc, #180]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0f0      	beq.n	800106a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001088:	4b2a      	ldr	r3, [pc, #168]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	4927      	ldr	r1, [pc, #156]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001098:	4313      	orrs	r3, r2
 800109a:	600b      	str	r3, [r1, #0]
 800109c:	e015      	b.n	80010ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800109e:	4b26      	ldr	r3, [pc, #152]	@ (8001138 <HAL_RCC_OscConfig+0x270>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a4:	f7ff fc76 	bl	8000994 <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ac:	f7ff fc72 	bl	8000994 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e180      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010be:	4b1d      	ldr	r3, [pc, #116]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f0      	bne.n	80010ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d03a      	beq.n	800114c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d019      	beq.n	8001112 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010de:	4b17      	ldr	r3, [pc, #92]	@ (800113c <HAL_RCC_OscConfig+0x274>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e4:	f7ff fc56 	bl	8000994 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ec:	f7ff fc52 	bl	8000994 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e160      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001134 <HAL_RCC_OscConfig+0x26c>)
 8001100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f0      	beq.n	80010ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800110a:	2001      	movs	r0, #1
 800110c:	f000 face 	bl	80016ac <RCC_Delay>
 8001110:	e01c      	b.n	800114c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001112:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <HAL_RCC_OscConfig+0x274>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001118:	f7ff fc3c 	bl	8000994 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800111e:	e00f      	b.n	8001140 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001120:	f7ff fc38 	bl	8000994 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d908      	bls.n	8001140 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e146      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000
 8001138:	42420000 	.word	0x42420000
 800113c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001140:	4b92      	ldr	r3, [pc, #584]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1e9      	bne.n	8001120 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 80a6 	beq.w	80012a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800115e:	4b8b      	ldr	r3, [pc, #556]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10d      	bne.n	8001186 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	4b88      	ldr	r3, [pc, #544]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4a87      	ldr	r2, [pc, #540]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001174:	61d3      	str	r3, [r2, #28]
 8001176:	4b85      	ldr	r3, [pc, #532]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001182:	2301      	movs	r3, #1
 8001184:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001186:	4b82      	ldr	r3, [pc, #520]	@ (8001390 <HAL_RCC_OscConfig+0x4c8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800118e:	2b00      	cmp	r3, #0
 8001190:	d118      	bne.n	80011c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001192:	4b7f      	ldr	r3, [pc, #508]	@ (8001390 <HAL_RCC_OscConfig+0x4c8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a7e      	ldr	r2, [pc, #504]	@ (8001390 <HAL_RCC_OscConfig+0x4c8>)
 8001198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800119c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800119e:	f7ff fbf9 	bl	8000994 <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011a6:	f7ff fbf5 	bl	8000994 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b64      	cmp	r3, #100	@ 0x64
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e103      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b8:	4b75      	ldr	r3, [pc, #468]	@ (8001390 <HAL_RCC_OscConfig+0x4c8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f0      	beq.n	80011a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d106      	bne.n	80011da <HAL_RCC_OscConfig+0x312>
 80011cc:	4b6f      	ldr	r3, [pc, #444]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	4a6e      	ldr	r2, [pc, #440]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6213      	str	r3, [r2, #32]
 80011d8:	e02d      	b.n	8001236 <HAL_RCC_OscConfig+0x36e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10c      	bne.n	80011fc <HAL_RCC_OscConfig+0x334>
 80011e2:	4b6a      	ldr	r3, [pc, #424]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	4a69      	ldr	r2, [pc, #420]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	6213      	str	r3, [r2, #32]
 80011ee:	4b67      	ldr	r3, [pc, #412]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	4a66      	ldr	r2, [pc, #408]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	f023 0304 	bic.w	r3, r3, #4
 80011f8:	6213      	str	r3, [r2, #32]
 80011fa:	e01c      	b.n	8001236 <HAL_RCC_OscConfig+0x36e>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	2b05      	cmp	r3, #5
 8001202:	d10c      	bne.n	800121e <HAL_RCC_OscConfig+0x356>
 8001204:	4b61      	ldr	r3, [pc, #388]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	4a60      	ldr	r2, [pc, #384]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 800120a:	f043 0304 	orr.w	r3, r3, #4
 800120e:	6213      	str	r3, [r2, #32]
 8001210:	4b5e      	ldr	r3, [pc, #376]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	4a5d      	ldr	r2, [pc, #372]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6213      	str	r3, [r2, #32]
 800121c:	e00b      	b.n	8001236 <HAL_RCC_OscConfig+0x36e>
 800121e:	4b5b      	ldr	r3, [pc, #364]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	4a5a      	ldr	r2, [pc, #360]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001224:	f023 0301 	bic.w	r3, r3, #1
 8001228:	6213      	str	r3, [r2, #32]
 800122a:	4b58      	ldr	r3, [pc, #352]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	4a57      	ldr	r2, [pc, #348]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001230:	f023 0304 	bic.w	r3, r3, #4
 8001234:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d015      	beq.n	800126a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123e:	f7ff fba9 	bl	8000994 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001244:	e00a      	b.n	800125c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001246:	f7ff fba5 	bl	8000994 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001254:	4293      	cmp	r3, r2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e0b1      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800125c:	4b4b      	ldr	r3, [pc, #300]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0ee      	beq.n	8001246 <HAL_RCC_OscConfig+0x37e>
 8001268:	e014      	b.n	8001294 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126a:	f7ff fb93 	bl	8000994 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001270:	e00a      	b.n	8001288 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001272:	f7ff fb8f 	bl	8000994 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001280:	4293      	cmp	r3, r2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e09b      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001288:	4b40      	ldr	r3, [pc, #256]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1ee      	bne.n	8001272 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001294:	7dfb      	ldrb	r3, [r7, #23]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d105      	bne.n	80012a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800129a:	4b3c      	ldr	r3, [pc, #240]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	4a3b      	ldr	r2, [pc, #236]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 80012a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 8087 	beq.w	80013be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012b0:	4b36      	ldr	r3, [pc, #216]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d061      	beq.n	8001380 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d146      	bne.n	8001352 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c4:	4b33      	ldr	r3, [pc, #204]	@ (8001394 <HAL_RCC_OscConfig+0x4cc>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ca:	f7ff fb63 	bl	8000994 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d2:	f7ff fb5f 	bl	8000994 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e06d      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e4:	4b29      	ldr	r3, [pc, #164]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f0      	bne.n	80012d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012f8:	d108      	bne.n	800130c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012fa:	4b24      	ldr	r3, [pc, #144]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	4921      	ldr	r1, [pc, #132]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001308:	4313      	orrs	r3, r2
 800130a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800130c:	4b1f      	ldr	r3, [pc, #124]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a19      	ldr	r1, [r3, #32]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131c:	430b      	orrs	r3, r1
 800131e:	491b      	ldr	r1, [pc, #108]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001320:	4313      	orrs	r3, r2
 8001322:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001324:	4b1b      	ldr	r3, [pc, #108]	@ (8001394 <HAL_RCC_OscConfig+0x4cc>)
 8001326:	2201      	movs	r2, #1
 8001328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132a:	f7ff fb33 	bl	8000994 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001332:	f7ff fb2f 	bl	8000994 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e03d      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001344:	4b11      	ldr	r3, [pc, #68]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f0      	beq.n	8001332 <HAL_RCC_OscConfig+0x46a>
 8001350:	e035      	b.n	80013be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001352:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <HAL_RCC_OscConfig+0x4cc>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fb1c 	bl	8000994 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001360:	f7ff fb18 	bl	8000994 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e026      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001372:	4b06      	ldr	r3, [pc, #24]	@ (800138c <HAL_RCC_OscConfig+0x4c4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x498>
 800137e:	e01e      	b.n	80013be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d107      	bne.n	8001398 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e019      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
 800138c:	40021000 	.word	0x40021000
 8001390:	40007000 	.word	0x40007000
 8001394:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001398:	4b0b      	ldr	r3, [pc, #44]	@ (80013c8 <HAL_RCC_OscConfig+0x500>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d106      	bne.n	80013ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d001      	beq.n	80013be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40021000 	.word	0x40021000

080013cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e0d0      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013e0:	4b6a      	ldr	r3, [pc, #424]	@ (800158c <HAL_RCC_ClockConfig+0x1c0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d910      	bls.n	8001410 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ee:	4b67      	ldr	r3, [pc, #412]	@ (800158c <HAL_RCC_ClockConfig+0x1c0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f023 0207 	bic.w	r2, r3, #7
 80013f6:	4965      	ldr	r1, [pc, #404]	@ (800158c <HAL_RCC_ClockConfig+0x1c0>)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fe:	4b63      	ldr	r3, [pc, #396]	@ (800158c <HAL_RCC_ClockConfig+0x1c0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d001      	beq.n	8001410 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0b8      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d020      	beq.n	800145e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001428:	4b59      	ldr	r3, [pc, #356]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4a58      	ldr	r2, [pc, #352]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800142e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001432:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	2b00      	cmp	r3, #0
 800143e:	d005      	beq.n	800144c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001440:	4b53      	ldr	r3, [pc, #332]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	4a52      	ldr	r2, [pc, #328]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001446:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800144a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800144c:	4b50      	ldr	r3, [pc, #320]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	494d      	ldr	r1, [pc, #308]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800145a:	4313      	orrs	r3, r2
 800145c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d040      	beq.n	80014ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d107      	bne.n	8001482 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	4b47      	ldr	r3, [pc, #284]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d115      	bne.n	80014aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e07f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d107      	bne.n	800149a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800148a:	4b41      	ldr	r3, [pc, #260]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d109      	bne.n	80014aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e073      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149a:	4b3d      	ldr	r3, [pc, #244]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e06b      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014aa:	4b39      	ldr	r3, [pc, #228]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f023 0203 	bic.w	r2, r3, #3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	4936      	ldr	r1, [pc, #216]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014bc:	f7ff fa6a 	bl	8000994 <HAL_GetTick>
 80014c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c2:	e00a      	b.n	80014da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c4:	f7ff fa66 	bl	8000994 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e053      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014da:	4b2d      	ldr	r3, [pc, #180]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 020c 	and.w	r2, r3, #12
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d1eb      	bne.n	80014c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014ec:	4b27      	ldr	r3, [pc, #156]	@ (800158c <HAL_RCC_ClockConfig+0x1c0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d210      	bcs.n	800151c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fa:	4b24      	ldr	r3, [pc, #144]	@ (800158c <HAL_RCC_ClockConfig+0x1c0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 0207 	bic.w	r2, r3, #7
 8001502:	4922      	ldr	r1, [pc, #136]	@ (800158c <HAL_RCC_ClockConfig+0x1c0>)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	4313      	orrs	r3, r2
 8001508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800150a:	4b20      	ldr	r3, [pc, #128]	@ (800158c <HAL_RCC_ClockConfig+0x1c0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d001      	beq.n	800151c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e032      	b.n	8001582 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001528:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	4916      	ldr	r1, [pc, #88]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001536:	4313      	orrs	r3, r2
 8001538:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d009      	beq.n	800155a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001546:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	490e      	ldr	r1, [pc, #56]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001556:	4313      	orrs	r3, r2
 8001558:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800155a:	f000 f821 	bl	80015a0 <HAL_RCC_GetSysClockFreq>
 800155e:	4602      	mov	r2, r0
 8001560:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	490a      	ldr	r1, [pc, #40]	@ (8001594 <HAL_RCC_ClockConfig+0x1c8>)
 800156c:	5ccb      	ldrb	r3, [r1, r3]
 800156e:	fa22 f303 	lsr.w	r3, r2, r3
 8001572:	4a09      	ldr	r2, [pc, #36]	@ (8001598 <HAL_RCC_ClockConfig+0x1cc>)
 8001574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <HAL_RCC_ClockConfig+0x1d0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff f9c8 	bl	8000910 <HAL_InitTick>

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40022000 	.word	0x40022000
 8001590:	40021000 	.word	0x40021000
 8001594:	0800251c 	.word	0x0800251c
 8001598:	20000000 	.word	0x20000000
 800159c:	20000004 	.word	0x20000004

080015a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001634 <HAL_RCC_GetSysClockFreq+0x94>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 030c 	and.w	r3, r3, #12
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d002      	beq.n	80015d0 <HAL_RCC_GetSysClockFreq+0x30>
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d003      	beq.n	80015d6 <HAL_RCC_GetSysClockFreq+0x36>
 80015ce:	e027      	b.n	8001620 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015d0:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <HAL_RCC_GetSysClockFreq+0x98>)
 80015d2:	613b      	str	r3, [r7, #16]
      break;
 80015d4:	e027      	b.n	8001626 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	0c9b      	lsrs	r3, r3, #18
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	4a17      	ldr	r2, [pc, #92]	@ (800163c <HAL_RCC_GetSysClockFreq+0x9c>)
 80015e0:	5cd3      	ldrb	r3, [r2, r3]
 80015e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d010      	beq.n	8001610 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015ee:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <HAL_RCC_GetSysClockFreq+0x94>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	0c5b      	lsrs	r3, r3, #17
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	4a11      	ldr	r2, [pc, #68]	@ (8001640 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015fa:	5cd3      	ldrb	r3, [r2, r3]
 80015fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a0d      	ldr	r2, [pc, #52]	@ (8001638 <HAL_RCC_GetSysClockFreq+0x98>)
 8001602:	fb03 f202 	mul.w	r2, r3, r2
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	fbb2 f3f3 	udiv	r3, r2, r3
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	e004      	b.n	800161a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a0c      	ldr	r2, [pc, #48]	@ (8001644 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001614:	fb02 f303 	mul.w	r3, r2, r3
 8001618:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	613b      	str	r3, [r7, #16]
      break;
 800161e:	e002      	b.n	8001626 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001620:	4b05      	ldr	r3, [pc, #20]	@ (8001638 <HAL_RCC_GetSysClockFreq+0x98>)
 8001622:	613b      	str	r3, [r7, #16]
      break;
 8001624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001626:	693b      	ldr	r3, [r7, #16]
}
 8001628:	4618      	mov	r0, r3
 800162a:	371c      	adds	r7, #28
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000
 8001638:	007a1200 	.word	0x007a1200
 800163c:	08002534 	.word	0x08002534
 8001640:	08002544 	.word	0x08002544
 8001644:	003d0900 	.word	0x003d0900

08001648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800164c:	4b02      	ldr	r3, [pc, #8]	@ (8001658 <HAL_RCC_GetHCLKFreq+0x10>)
 800164e:	681b      	ldr	r3, [r3, #0]
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	20000000 	.word	0x20000000

0800165c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001660:	f7ff fff2 	bl	8001648 <HAL_RCC_GetHCLKFreq>
 8001664:	4602      	mov	r2, r0
 8001666:	4b05      	ldr	r3, [pc, #20]	@ (800167c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	4903      	ldr	r1, [pc, #12]	@ (8001680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001672:	5ccb      	ldrb	r3, [r1, r3]
 8001674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001678:	4618      	mov	r0, r3
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40021000 	.word	0x40021000
 8001680:	0800252c 	.word	0x0800252c

08001684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001688:	f7ff ffde 	bl	8001648 <HAL_RCC_GetHCLKFreq>
 800168c:	4602      	mov	r2, r0
 800168e:	4b05      	ldr	r3, [pc, #20]	@ (80016a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	0adb      	lsrs	r3, r3, #11
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	4903      	ldr	r1, [pc, #12]	@ (80016a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800169a:	5ccb      	ldrb	r3, [r1, r3]
 800169c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40021000 	.word	0x40021000
 80016a8:	0800252c 	.word	0x0800252c

080016ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016b4:	4b0a      	ldr	r3, [pc, #40]	@ (80016e0 <RCC_Delay+0x34>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <RCC_Delay+0x38>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	0a5b      	lsrs	r3, r3, #9
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	fb02 f303 	mul.w	r3, r2, r3
 80016c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016c8:	bf00      	nop
  }
  while (Delay --);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	1e5a      	subs	r2, r3, #1
 80016ce:	60fa      	str	r2, [r7, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f9      	bne.n	80016c8 <RCC_Delay+0x1c>
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	20000000 	.word	0x20000000
 80016e4:	10624dd3 	.word	0x10624dd3

080016e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e042      	b.n	8001780 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d106      	bne.n	8001714 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7fe ffa4 	bl	800065c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2224      	movs	r2, #36	@ 0x24
 8001718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68da      	ldr	r2, [r3, #12]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800172a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f971 	bl	8001a14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001740:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	695a      	ldr	r2, [r3, #20]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001750:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001760:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2220      	movs	r2, #32
 800176c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2220      	movs	r2, #32
 8001774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	@ 0x28
 800178c:	af02      	add	r7, sp, #8
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	4613      	mov	r3, r2
 8001796:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b20      	cmp	r3, #32
 80017a6:	d175      	bne.n	8001894 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <HAL_UART_Transmit+0x2c>
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e06e      	b.n	8001896 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2221      	movs	r2, #33	@ 0x21
 80017c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80017c6:	f7ff f8e5 	bl	8000994 <HAL_GetTick>
 80017ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	88fa      	ldrh	r2, [r7, #6]
 80017d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	88fa      	ldrh	r2, [r7, #6]
 80017d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017e0:	d108      	bne.n	80017f4 <HAL_UART_Transmit+0x6c>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d104      	bne.n	80017f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	61bb      	str	r3, [r7, #24]
 80017f2:	e003      	b.n	80017fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80017fc:	e02e      	b.n	800185c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2200      	movs	r2, #0
 8001806:	2180      	movs	r1, #128	@ 0x80
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	f000 f848 	bl	800189e <UART_WaitOnFlagUntilTimeout>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2220      	movs	r2, #32
 8001818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e03a      	b.n	8001896 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10b      	bne.n	800183e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001834:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	3302      	adds	r3, #2
 800183a:	61bb      	str	r3, [r7, #24]
 800183c:	e007      	b.n	800184e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	781a      	ldrb	r2, [r3, #0]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	3301      	adds	r3, #1
 800184c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001852:	b29b      	uxth	r3, r3
 8001854:	3b01      	subs	r3, #1
 8001856:	b29a      	uxth	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001860:	b29b      	uxth	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1cb      	bne.n	80017fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	2200      	movs	r2, #0
 800186e:	2140      	movs	r1, #64	@ 0x40
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f000 f814 	bl	800189e <UART_WaitOnFlagUntilTimeout>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2220      	movs	r2, #32
 8001880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e006      	b.n	8001896 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2220      	movs	r2, #32
 800188c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	e000      	b.n	8001896 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001894:	2302      	movs	r3, #2
  }
}
 8001896:	4618      	mov	r0, r3
 8001898:	3720      	adds	r7, #32
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b086      	sub	sp, #24
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	603b      	str	r3, [r7, #0]
 80018aa:	4613      	mov	r3, r2
 80018ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018ae:	e03b      	b.n	8001928 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b6:	d037      	beq.n	8001928 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018b8:	f7ff f86c 	bl	8000994 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	6a3a      	ldr	r2, [r7, #32]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d302      	bcc.n	80018ce <UART_WaitOnFlagUntilTimeout+0x30>
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e03a      	b.n	8001948 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d023      	beq.n	8001928 <UART_WaitOnFlagUntilTimeout+0x8a>
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2b80      	cmp	r3, #128	@ 0x80
 80018e4:	d020      	beq.n	8001928 <UART_WaitOnFlagUntilTimeout+0x8a>
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2b40      	cmp	r3, #64	@ 0x40
 80018ea:	d01d      	beq.n	8001928 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d116      	bne.n	8001928 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f000 f81d 	bl	8001950 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2208      	movs	r2, #8
 800191a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e00f      	b.n	8001948 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	4013      	ands	r3, r2
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	429a      	cmp	r2, r3
 8001936:	bf0c      	ite	eq
 8001938:	2301      	moveq	r3, #1
 800193a:	2300      	movne	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	461a      	mov	r2, r3
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	429a      	cmp	r2, r3
 8001944:	d0b4      	beq.n	80018b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001950:	b480      	push	{r7}
 8001952:	b095      	sub	sp, #84	@ 0x54
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	330c      	adds	r3, #12
 800195e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001962:	e853 3f00 	ldrex	r3, [r3]
 8001966:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800196a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800196e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	330c      	adds	r3, #12
 8001976:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001978:	643a      	str	r2, [r7, #64]	@ 0x40
 800197a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800197c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800197e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001980:	e841 2300 	strex	r3, r2, [r1]
 8001984:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1e5      	bne.n	8001958 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	3314      	adds	r3, #20
 8001992:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001994:	6a3b      	ldr	r3, [r7, #32]
 8001996:	e853 3f00 	ldrex	r3, [r3]
 800199a:	61fb      	str	r3, [r7, #28]
   return(result);
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f023 0301 	bic.w	r3, r3, #1
 80019a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	3314      	adds	r3, #20
 80019aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80019ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019b4:	e841 2300 	strex	r3, r2, [r1]
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80019ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1e5      	bne.n	800198c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d119      	bne.n	80019fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	330c      	adds	r3, #12
 80019ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	e853 3f00 	ldrex	r3, [r3]
 80019d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f023 0310 	bic.w	r3, r3, #16
 80019de:	647b      	str	r3, [r7, #68]	@ 0x44
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	330c      	adds	r3, #12
 80019e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80019e8:	61ba      	str	r2, [r7, #24]
 80019ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019ec:	6979      	ldr	r1, [r7, #20]
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	e841 2300 	strex	r3, r2, [r1]
 80019f4:	613b      	str	r3, [r7, #16]
   return(result);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1e5      	bne.n	80019c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2220      	movs	r2, #32
 8001a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001a0a:	bf00      	nop
 8001a0c:	3754      	adds	r7, #84	@ 0x54
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001a4e:	f023 030c 	bic.w	r3, r3, #12
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	68b9      	ldr	r1, [r7, #8]
 8001a58:	430b      	orrs	r3, r1
 8001a5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699a      	ldr	r2, [r3, #24]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a2c      	ldr	r2, [pc, #176]	@ (8001b28 <UART_SetConfig+0x114>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d103      	bne.n	8001a84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001a7c:	f7ff fe02 	bl	8001684 <HAL_RCC_GetPCLK2Freq>
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	e002      	b.n	8001a8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001a84:	f7ff fdea 	bl	800165c <HAL_RCC_GetPCLK1Freq>
 8001a88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	009a      	lsls	r2, r3, #2
 8001a94:	441a      	add	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa0:	4a22      	ldr	r2, [pc, #136]	@ (8001b2c <UART_SetConfig+0x118>)
 8001aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa6:	095b      	lsrs	r3, r3, #5
 8001aa8:	0119      	lsls	r1, r3, #4
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	009a      	lsls	r2, r3, #2
 8001ab4:	441a      	add	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b2c <UART_SetConfig+0x118>)
 8001ac2:	fba3 0302 	umull	r0, r3, r3, r2
 8001ac6:	095b      	lsrs	r3, r3, #5
 8001ac8:	2064      	movs	r0, #100	@ 0x64
 8001aca:	fb00 f303 	mul.w	r3, r0, r3
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	011b      	lsls	r3, r3, #4
 8001ad2:	3332      	adds	r3, #50	@ 0x32
 8001ad4:	4a15      	ldr	r2, [pc, #84]	@ (8001b2c <UART_SetConfig+0x118>)
 8001ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ae0:	4419      	add	r1, r3
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	009a      	lsls	r2, r3, #2
 8001aec:	441a      	add	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001af8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <UART_SetConfig+0x118>)
 8001afa:	fba3 0302 	umull	r0, r3, r3, r2
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	2064      	movs	r0, #100	@ 0x64
 8001b02:	fb00 f303 	mul.w	r3, r0, r3
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	3332      	adds	r3, #50	@ 0x32
 8001b0c:	4a07      	ldr	r2, [pc, #28]	@ (8001b2c <UART_SetConfig+0x118>)
 8001b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b12:	095b      	lsrs	r3, r3, #5
 8001b14:	f003 020f 	and.w	r2, r3, #15
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	440a      	add	r2, r1
 8001b1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001b20:	bf00      	nop
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40013800 	.word	0x40013800
 8001b2c:	51eb851f 	.word	0x51eb851f

08001b30 <std>:
 8001b30:	2300      	movs	r3, #0
 8001b32:	b510      	push	{r4, lr}
 8001b34:	4604      	mov	r4, r0
 8001b36:	e9c0 3300 	strd	r3, r3, [r0]
 8001b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b3e:	6083      	str	r3, [r0, #8]
 8001b40:	8181      	strh	r1, [r0, #12]
 8001b42:	6643      	str	r3, [r0, #100]	@ 0x64
 8001b44:	81c2      	strh	r2, [r0, #14]
 8001b46:	6183      	str	r3, [r0, #24]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	2208      	movs	r2, #8
 8001b4c:	305c      	adds	r0, #92	@ 0x5c
 8001b4e:	f000 f9ef 	bl	8001f30 <memset>
 8001b52:	4b0d      	ldr	r3, [pc, #52]	@ (8001b88 <std+0x58>)
 8001b54:	6224      	str	r4, [r4, #32]
 8001b56:	6263      	str	r3, [r4, #36]	@ 0x24
 8001b58:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <std+0x5c>)
 8001b5a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <std+0x60>)
 8001b5e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001b60:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <std+0x64>)
 8001b62:	6323      	str	r3, [r4, #48]	@ 0x30
 8001b64:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <std+0x68>)
 8001b66:	429c      	cmp	r4, r3
 8001b68:	d006      	beq.n	8001b78 <std+0x48>
 8001b6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001b6e:	4294      	cmp	r4, r2
 8001b70:	d002      	beq.n	8001b78 <std+0x48>
 8001b72:	33d0      	adds	r3, #208	@ 0xd0
 8001b74:	429c      	cmp	r4, r3
 8001b76:	d105      	bne.n	8001b84 <std+0x54>
 8001b78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b80:	f000 ba4e 	b.w	8002020 <__retarget_lock_init_recursive>
 8001b84:	bd10      	pop	{r4, pc}
 8001b86:	bf00      	nop
 8001b88:	08001d81 	.word	0x08001d81
 8001b8c:	08001da3 	.word	0x08001da3
 8001b90:	08001ddb 	.word	0x08001ddb
 8001b94:	08001dff 	.word	0x08001dff
 8001b98:	200000d4 	.word	0x200000d4

08001b9c <stdio_exit_handler>:
 8001b9c:	4a02      	ldr	r2, [pc, #8]	@ (8001ba8 <stdio_exit_handler+0xc>)
 8001b9e:	4903      	ldr	r1, [pc, #12]	@ (8001bac <stdio_exit_handler+0x10>)
 8001ba0:	4803      	ldr	r0, [pc, #12]	@ (8001bb0 <stdio_exit_handler+0x14>)
 8001ba2:	f000 b869 	b.w	8001c78 <_fwalk_sglue>
 8001ba6:	bf00      	nop
 8001ba8:	2000000c 	.word	0x2000000c
 8001bac:	08002315 	.word	0x08002315
 8001bb0:	2000001c 	.word	0x2000001c

08001bb4 <cleanup_stdio>:
 8001bb4:	6841      	ldr	r1, [r0, #4]
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <cleanup_stdio+0x34>)
 8001bb8:	b510      	push	{r4, lr}
 8001bba:	4299      	cmp	r1, r3
 8001bbc:	4604      	mov	r4, r0
 8001bbe:	d001      	beq.n	8001bc4 <cleanup_stdio+0x10>
 8001bc0:	f000 fba8 	bl	8002314 <_fflush_r>
 8001bc4:	68a1      	ldr	r1, [r4, #8]
 8001bc6:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <cleanup_stdio+0x38>)
 8001bc8:	4299      	cmp	r1, r3
 8001bca:	d002      	beq.n	8001bd2 <cleanup_stdio+0x1e>
 8001bcc:	4620      	mov	r0, r4
 8001bce:	f000 fba1 	bl	8002314 <_fflush_r>
 8001bd2:	68e1      	ldr	r1, [r4, #12]
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <cleanup_stdio+0x3c>)
 8001bd6:	4299      	cmp	r1, r3
 8001bd8:	d004      	beq.n	8001be4 <cleanup_stdio+0x30>
 8001bda:	4620      	mov	r0, r4
 8001bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001be0:	f000 bb98 	b.w	8002314 <_fflush_r>
 8001be4:	bd10      	pop	{r4, pc}
 8001be6:	bf00      	nop
 8001be8:	200000d4 	.word	0x200000d4
 8001bec:	2000013c 	.word	0x2000013c
 8001bf0:	200001a4 	.word	0x200001a4

08001bf4 <global_stdio_init.part.0>:
 8001bf4:	b510      	push	{r4, lr}
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <global_stdio_init.part.0+0x30>)
 8001bf8:	4c0b      	ldr	r4, [pc, #44]	@ (8001c28 <global_stdio_init.part.0+0x34>)
 8001bfa:	4a0c      	ldr	r2, [pc, #48]	@ (8001c2c <global_stdio_init.part.0+0x38>)
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	2104      	movs	r1, #4
 8001c02:	2200      	movs	r2, #0
 8001c04:	f7ff ff94 	bl	8001b30 <std>
 8001c08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	2109      	movs	r1, #9
 8001c10:	f7ff ff8e 	bl	8001b30 <std>
 8001c14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001c18:	2202      	movs	r2, #2
 8001c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c1e:	2112      	movs	r1, #18
 8001c20:	f7ff bf86 	b.w	8001b30 <std>
 8001c24:	2000020c 	.word	0x2000020c
 8001c28:	200000d4 	.word	0x200000d4
 8001c2c:	08001b9d 	.word	0x08001b9d

08001c30 <__sfp_lock_acquire>:
 8001c30:	4801      	ldr	r0, [pc, #4]	@ (8001c38 <__sfp_lock_acquire+0x8>)
 8001c32:	f000 b9f6 	b.w	8002022 <__retarget_lock_acquire_recursive>
 8001c36:	bf00      	nop
 8001c38:	20000215 	.word	0x20000215

08001c3c <__sfp_lock_release>:
 8001c3c:	4801      	ldr	r0, [pc, #4]	@ (8001c44 <__sfp_lock_release+0x8>)
 8001c3e:	f000 b9f1 	b.w	8002024 <__retarget_lock_release_recursive>
 8001c42:	bf00      	nop
 8001c44:	20000215 	.word	0x20000215

08001c48 <__sinit>:
 8001c48:	b510      	push	{r4, lr}
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	f7ff fff0 	bl	8001c30 <__sfp_lock_acquire>
 8001c50:	6a23      	ldr	r3, [r4, #32]
 8001c52:	b11b      	cbz	r3, 8001c5c <__sinit+0x14>
 8001c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c58:	f7ff bff0 	b.w	8001c3c <__sfp_lock_release>
 8001c5c:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <__sinit+0x28>)
 8001c5e:	6223      	str	r3, [r4, #32]
 8001c60:	4b04      	ldr	r3, [pc, #16]	@ (8001c74 <__sinit+0x2c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f5      	bne.n	8001c54 <__sinit+0xc>
 8001c68:	f7ff ffc4 	bl	8001bf4 <global_stdio_init.part.0>
 8001c6c:	e7f2      	b.n	8001c54 <__sinit+0xc>
 8001c6e:	bf00      	nop
 8001c70:	08001bb5 	.word	0x08001bb5
 8001c74:	2000020c 	.word	0x2000020c

08001c78 <_fwalk_sglue>:
 8001c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c7c:	4607      	mov	r7, r0
 8001c7e:	4688      	mov	r8, r1
 8001c80:	4614      	mov	r4, r2
 8001c82:	2600      	movs	r6, #0
 8001c84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001c88:	f1b9 0901 	subs.w	r9, r9, #1
 8001c8c:	d505      	bpl.n	8001c9a <_fwalk_sglue+0x22>
 8001c8e:	6824      	ldr	r4, [r4, #0]
 8001c90:	2c00      	cmp	r4, #0
 8001c92:	d1f7      	bne.n	8001c84 <_fwalk_sglue+0xc>
 8001c94:	4630      	mov	r0, r6
 8001c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c9a:	89ab      	ldrh	r3, [r5, #12]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d907      	bls.n	8001cb0 <_fwalk_sglue+0x38>
 8001ca0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	d003      	beq.n	8001cb0 <_fwalk_sglue+0x38>
 8001ca8:	4629      	mov	r1, r5
 8001caa:	4638      	mov	r0, r7
 8001cac:	47c0      	blx	r8
 8001cae:	4306      	orrs	r6, r0
 8001cb0:	3568      	adds	r5, #104	@ 0x68
 8001cb2:	e7e9      	b.n	8001c88 <_fwalk_sglue+0x10>

08001cb4 <putchar>:
 8001cb4:	4b02      	ldr	r3, [pc, #8]	@ (8001cc0 <putchar+0xc>)
 8001cb6:	4601      	mov	r1, r0
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	6882      	ldr	r2, [r0, #8]
 8001cbc:	f000 bbb3 	b.w	8002426 <_putc_r>
 8001cc0:	20000018 	.word	0x20000018

08001cc4 <_puts_r>:
 8001cc4:	6a03      	ldr	r3, [r0, #32]
 8001cc6:	b570      	push	{r4, r5, r6, lr}
 8001cc8:	4605      	mov	r5, r0
 8001cca:	460e      	mov	r6, r1
 8001ccc:	6884      	ldr	r4, [r0, #8]
 8001cce:	b90b      	cbnz	r3, 8001cd4 <_puts_r+0x10>
 8001cd0:	f7ff ffba 	bl	8001c48 <__sinit>
 8001cd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001cd6:	07db      	lsls	r3, r3, #31
 8001cd8:	d405      	bmi.n	8001ce6 <_puts_r+0x22>
 8001cda:	89a3      	ldrh	r3, [r4, #12]
 8001cdc:	0598      	lsls	r0, r3, #22
 8001cde:	d402      	bmi.n	8001ce6 <_puts_r+0x22>
 8001ce0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001ce2:	f000 f99e 	bl	8002022 <__retarget_lock_acquire_recursive>
 8001ce6:	89a3      	ldrh	r3, [r4, #12]
 8001ce8:	0719      	lsls	r1, r3, #28
 8001cea:	d502      	bpl.n	8001cf2 <_puts_r+0x2e>
 8001cec:	6923      	ldr	r3, [r4, #16]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d135      	bne.n	8001d5e <_puts_r+0x9a>
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	4628      	mov	r0, r5
 8001cf6:	f000 f8c5 	bl	8001e84 <__swsetup_r>
 8001cfa:	b380      	cbz	r0, 8001d5e <_puts_r+0x9a>
 8001cfc:	f04f 35ff 	mov.w	r5, #4294967295
 8001d00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001d02:	07da      	lsls	r2, r3, #31
 8001d04:	d405      	bmi.n	8001d12 <_puts_r+0x4e>
 8001d06:	89a3      	ldrh	r3, [r4, #12]
 8001d08:	059b      	lsls	r3, r3, #22
 8001d0a:	d402      	bmi.n	8001d12 <_puts_r+0x4e>
 8001d0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001d0e:	f000 f989 	bl	8002024 <__retarget_lock_release_recursive>
 8001d12:	4628      	mov	r0, r5
 8001d14:	bd70      	pop	{r4, r5, r6, pc}
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	da04      	bge.n	8001d24 <_puts_r+0x60>
 8001d1a:	69a2      	ldr	r2, [r4, #24]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	dc17      	bgt.n	8001d50 <_puts_r+0x8c>
 8001d20:	290a      	cmp	r1, #10
 8001d22:	d015      	beq.n	8001d50 <_puts_r+0x8c>
 8001d24:	6823      	ldr	r3, [r4, #0]
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	6022      	str	r2, [r4, #0]
 8001d2a:	7019      	strb	r1, [r3, #0]
 8001d2c:	68a3      	ldr	r3, [r4, #8]
 8001d2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001d32:	3b01      	subs	r3, #1
 8001d34:	60a3      	str	r3, [r4, #8]
 8001d36:	2900      	cmp	r1, #0
 8001d38:	d1ed      	bne.n	8001d16 <_puts_r+0x52>
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	da11      	bge.n	8001d62 <_puts_r+0x9e>
 8001d3e:	4622      	mov	r2, r4
 8001d40:	210a      	movs	r1, #10
 8001d42:	4628      	mov	r0, r5
 8001d44:	f000 f85f 	bl	8001e06 <__swbuf_r>
 8001d48:	3001      	adds	r0, #1
 8001d4a:	d0d7      	beq.n	8001cfc <_puts_r+0x38>
 8001d4c:	250a      	movs	r5, #10
 8001d4e:	e7d7      	b.n	8001d00 <_puts_r+0x3c>
 8001d50:	4622      	mov	r2, r4
 8001d52:	4628      	mov	r0, r5
 8001d54:	f000 f857 	bl	8001e06 <__swbuf_r>
 8001d58:	3001      	adds	r0, #1
 8001d5a:	d1e7      	bne.n	8001d2c <_puts_r+0x68>
 8001d5c:	e7ce      	b.n	8001cfc <_puts_r+0x38>
 8001d5e:	3e01      	subs	r6, #1
 8001d60:	e7e4      	b.n	8001d2c <_puts_r+0x68>
 8001d62:	6823      	ldr	r3, [r4, #0]
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	6022      	str	r2, [r4, #0]
 8001d68:	220a      	movs	r2, #10
 8001d6a:	701a      	strb	r2, [r3, #0]
 8001d6c:	e7ee      	b.n	8001d4c <_puts_r+0x88>
	...

08001d70 <puts>:
 8001d70:	4b02      	ldr	r3, [pc, #8]	@ (8001d7c <puts+0xc>)
 8001d72:	4601      	mov	r1, r0
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	f7ff bfa5 	b.w	8001cc4 <_puts_r>
 8001d7a:	bf00      	nop
 8001d7c:	20000018 	.word	0x20000018

08001d80 <__sread>:
 8001d80:	b510      	push	{r4, lr}
 8001d82:	460c      	mov	r4, r1
 8001d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d88:	f000 f8fc 	bl	8001f84 <_read_r>
 8001d8c:	2800      	cmp	r0, #0
 8001d8e:	bfab      	itete	ge
 8001d90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001d92:	89a3      	ldrhlt	r3, [r4, #12]
 8001d94:	181b      	addge	r3, r3, r0
 8001d96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001d9a:	bfac      	ite	ge
 8001d9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001d9e:	81a3      	strhlt	r3, [r4, #12]
 8001da0:	bd10      	pop	{r4, pc}

08001da2 <__swrite>:
 8001da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001da6:	461f      	mov	r7, r3
 8001da8:	898b      	ldrh	r3, [r1, #12]
 8001daa:	4605      	mov	r5, r0
 8001dac:	05db      	lsls	r3, r3, #23
 8001dae:	460c      	mov	r4, r1
 8001db0:	4616      	mov	r6, r2
 8001db2:	d505      	bpl.n	8001dc0 <__swrite+0x1e>
 8001db4:	2302      	movs	r3, #2
 8001db6:	2200      	movs	r2, #0
 8001db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dbc:	f000 f8d0 	bl	8001f60 <_lseek_r>
 8001dc0:	89a3      	ldrh	r3, [r4, #12]
 8001dc2:	4632      	mov	r2, r6
 8001dc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001dc8:	81a3      	strh	r3, [r4, #12]
 8001dca:	4628      	mov	r0, r5
 8001dcc:	463b      	mov	r3, r7
 8001dce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001dd6:	f000 b8e7 	b.w	8001fa8 <_write_r>

08001dda <__sseek>:
 8001dda:	b510      	push	{r4, lr}
 8001ddc:	460c      	mov	r4, r1
 8001dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001de2:	f000 f8bd 	bl	8001f60 <_lseek_r>
 8001de6:	1c43      	adds	r3, r0, #1
 8001de8:	89a3      	ldrh	r3, [r4, #12]
 8001dea:	bf15      	itete	ne
 8001dec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001dee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001df2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001df6:	81a3      	strheq	r3, [r4, #12]
 8001df8:	bf18      	it	ne
 8001dfa:	81a3      	strhne	r3, [r4, #12]
 8001dfc:	bd10      	pop	{r4, pc}

08001dfe <__sclose>:
 8001dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e02:	f000 b89d 	b.w	8001f40 <_close_r>

08001e06 <__swbuf_r>:
 8001e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e08:	460e      	mov	r6, r1
 8001e0a:	4614      	mov	r4, r2
 8001e0c:	4605      	mov	r5, r0
 8001e0e:	b118      	cbz	r0, 8001e18 <__swbuf_r+0x12>
 8001e10:	6a03      	ldr	r3, [r0, #32]
 8001e12:	b90b      	cbnz	r3, 8001e18 <__swbuf_r+0x12>
 8001e14:	f7ff ff18 	bl	8001c48 <__sinit>
 8001e18:	69a3      	ldr	r3, [r4, #24]
 8001e1a:	60a3      	str	r3, [r4, #8]
 8001e1c:	89a3      	ldrh	r3, [r4, #12]
 8001e1e:	071a      	lsls	r2, r3, #28
 8001e20:	d501      	bpl.n	8001e26 <__swbuf_r+0x20>
 8001e22:	6923      	ldr	r3, [r4, #16]
 8001e24:	b943      	cbnz	r3, 8001e38 <__swbuf_r+0x32>
 8001e26:	4621      	mov	r1, r4
 8001e28:	4628      	mov	r0, r5
 8001e2a:	f000 f82b 	bl	8001e84 <__swsetup_r>
 8001e2e:	b118      	cbz	r0, 8001e38 <__swbuf_r+0x32>
 8001e30:	f04f 37ff 	mov.w	r7, #4294967295
 8001e34:	4638      	mov	r0, r7
 8001e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e38:	6823      	ldr	r3, [r4, #0]
 8001e3a:	6922      	ldr	r2, [r4, #16]
 8001e3c:	b2f6      	uxtb	r6, r6
 8001e3e:	1a98      	subs	r0, r3, r2
 8001e40:	6963      	ldr	r3, [r4, #20]
 8001e42:	4637      	mov	r7, r6
 8001e44:	4283      	cmp	r3, r0
 8001e46:	dc05      	bgt.n	8001e54 <__swbuf_r+0x4e>
 8001e48:	4621      	mov	r1, r4
 8001e4a:	4628      	mov	r0, r5
 8001e4c:	f000 fa62 	bl	8002314 <_fflush_r>
 8001e50:	2800      	cmp	r0, #0
 8001e52:	d1ed      	bne.n	8001e30 <__swbuf_r+0x2a>
 8001e54:	68a3      	ldr	r3, [r4, #8]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	60a3      	str	r3, [r4, #8]
 8001e5a:	6823      	ldr	r3, [r4, #0]
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	6022      	str	r2, [r4, #0]
 8001e60:	701e      	strb	r6, [r3, #0]
 8001e62:	6962      	ldr	r2, [r4, #20]
 8001e64:	1c43      	adds	r3, r0, #1
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d004      	beq.n	8001e74 <__swbuf_r+0x6e>
 8001e6a:	89a3      	ldrh	r3, [r4, #12]
 8001e6c:	07db      	lsls	r3, r3, #31
 8001e6e:	d5e1      	bpl.n	8001e34 <__swbuf_r+0x2e>
 8001e70:	2e0a      	cmp	r6, #10
 8001e72:	d1df      	bne.n	8001e34 <__swbuf_r+0x2e>
 8001e74:	4621      	mov	r1, r4
 8001e76:	4628      	mov	r0, r5
 8001e78:	f000 fa4c 	bl	8002314 <_fflush_r>
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	d0d9      	beq.n	8001e34 <__swbuf_r+0x2e>
 8001e80:	e7d6      	b.n	8001e30 <__swbuf_r+0x2a>
	...

08001e84 <__swsetup_r>:
 8001e84:	b538      	push	{r3, r4, r5, lr}
 8001e86:	4b29      	ldr	r3, [pc, #164]	@ (8001f2c <__swsetup_r+0xa8>)
 8001e88:	4605      	mov	r5, r0
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	460c      	mov	r4, r1
 8001e8e:	b118      	cbz	r0, 8001e98 <__swsetup_r+0x14>
 8001e90:	6a03      	ldr	r3, [r0, #32]
 8001e92:	b90b      	cbnz	r3, 8001e98 <__swsetup_r+0x14>
 8001e94:	f7ff fed8 	bl	8001c48 <__sinit>
 8001e98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e9c:	0719      	lsls	r1, r3, #28
 8001e9e:	d422      	bmi.n	8001ee6 <__swsetup_r+0x62>
 8001ea0:	06da      	lsls	r2, r3, #27
 8001ea2:	d407      	bmi.n	8001eb4 <__swsetup_r+0x30>
 8001ea4:	2209      	movs	r2, #9
 8001ea6:	602a      	str	r2, [r5, #0]
 8001ea8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	81a3      	strh	r3, [r4, #12]
 8001eb2:	e033      	b.n	8001f1c <__swsetup_r+0x98>
 8001eb4:	0758      	lsls	r0, r3, #29
 8001eb6:	d512      	bpl.n	8001ede <__swsetup_r+0x5a>
 8001eb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001eba:	b141      	cbz	r1, 8001ece <__swsetup_r+0x4a>
 8001ebc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001ec0:	4299      	cmp	r1, r3
 8001ec2:	d002      	beq.n	8001eca <__swsetup_r+0x46>
 8001ec4:	4628      	mov	r0, r5
 8001ec6:	f000 f8af 	bl	8002028 <_free_r>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	6363      	str	r3, [r4, #52]	@ 0x34
 8001ece:	89a3      	ldrh	r3, [r4, #12]
 8001ed0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001ed4:	81a3      	strh	r3, [r4, #12]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	6063      	str	r3, [r4, #4]
 8001eda:	6923      	ldr	r3, [r4, #16]
 8001edc:	6023      	str	r3, [r4, #0]
 8001ede:	89a3      	ldrh	r3, [r4, #12]
 8001ee0:	f043 0308 	orr.w	r3, r3, #8
 8001ee4:	81a3      	strh	r3, [r4, #12]
 8001ee6:	6923      	ldr	r3, [r4, #16]
 8001ee8:	b94b      	cbnz	r3, 8001efe <__swsetup_r+0x7a>
 8001eea:	89a3      	ldrh	r3, [r4, #12]
 8001eec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ef4:	d003      	beq.n	8001efe <__swsetup_r+0x7a>
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	4628      	mov	r0, r5
 8001efa:	f000 fa58 	bl	80023ae <__smakebuf_r>
 8001efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f02:	f013 0201 	ands.w	r2, r3, #1
 8001f06:	d00a      	beq.n	8001f1e <__swsetup_r+0x9a>
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60a2      	str	r2, [r4, #8]
 8001f0c:	6962      	ldr	r2, [r4, #20]
 8001f0e:	4252      	negs	r2, r2
 8001f10:	61a2      	str	r2, [r4, #24]
 8001f12:	6922      	ldr	r2, [r4, #16]
 8001f14:	b942      	cbnz	r2, 8001f28 <__swsetup_r+0xa4>
 8001f16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001f1a:	d1c5      	bne.n	8001ea8 <__swsetup_r+0x24>
 8001f1c:	bd38      	pop	{r3, r4, r5, pc}
 8001f1e:	0799      	lsls	r1, r3, #30
 8001f20:	bf58      	it	pl
 8001f22:	6962      	ldrpl	r2, [r4, #20]
 8001f24:	60a2      	str	r2, [r4, #8]
 8001f26:	e7f4      	b.n	8001f12 <__swsetup_r+0x8e>
 8001f28:	2000      	movs	r0, #0
 8001f2a:	e7f7      	b.n	8001f1c <__swsetup_r+0x98>
 8001f2c:	20000018 	.word	0x20000018

08001f30 <memset>:
 8001f30:	4603      	mov	r3, r0
 8001f32:	4402      	add	r2, r0
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d100      	bne.n	8001f3a <memset+0xa>
 8001f38:	4770      	bx	lr
 8001f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8001f3e:	e7f9      	b.n	8001f34 <memset+0x4>

08001f40 <_close_r>:
 8001f40:	b538      	push	{r3, r4, r5, lr}
 8001f42:	2300      	movs	r3, #0
 8001f44:	4d05      	ldr	r5, [pc, #20]	@ (8001f5c <_close_r+0x1c>)
 8001f46:	4604      	mov	r4, r0
 8001f48:	4608      	mov	r0, r1
 8001f4a:	602b      	str	r3, [r5, #0]
 8001f4c:	f7fe fc37 	bl	80007be <_close>
 8001f50:	1c43      	adds	r3, r0, #1
 8001f52:	d102      	bne.n	8001f5a <_close_r+0x1a>
 8001f54:	682b      	ldr	r3, [r5, #0]
 8001f56:	b103      	cbz	r3, 8001f5a <_close_r+0x1a>
 8001f58:	6023      	str	r3, [r4, #0]
 8001f5a:	bd38      	pop	{r3, r4, r5, pc}
 8001f5c:	20000210 	.word	0x20000210

08001f60 <_lseek_r>:
 8001f60:	b538      	push	{r3, r4, r5, lr}
 8001f62:	4604      	mov	r4, r0
 8001f64:	4608      	mov	r0, r1
 8001f66:	4611      	mov	r1, r2
 8001f68:	2200      	movs	r2, #0
 8001f6a:	4d05      	ldr	r5, [pc, #20]	@ (8001f80 <_lseek_r+0x20>)
 8001f6c:	602a      	str	r2, [r5, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	f7fe fc49 	bl	8000806 <_lseek>
 8001f74:	1c43      	adds	r3, r0, #1
 8001f76:	d102      	bne.n	8001f7e <_lseek_r+0x1e>
 8001f78:	682b      	ldr	r3, [r5, #0]
 8001f7a:	b103      	cbz	r3, 8001f7e <_lseek_r+0x1e>
 8001f7c:	6023      	str	r3, [r4, #0]
 8001f7e:	bd38      	pop	{r3, r4, r5, pc}
 8001f80:	20000210 	.word	0x20000210

08001f84 <_read_r>:
 8001f84:	b538      	push	{r3, r4, r5, lr}
 8001f86:	4604      	mov	r4, r0
 8001f88:	4608      	mov	r0, r1
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	4d05      	ldr	r5, [pc, #20]	@ (8001fa4 <_read_r+0x20>)
 8001f90:	602a      	str	r2, [r5, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	f7fe fbda 	bl	800074c <_read>
 8001f98:	1c43      	adds	r3, r0, #1
 8001f9a:	d102      	bne.n	8001fa2 <_read_r+0x1e>
 8001f9c:	682b      	ldr	r3, [r5, #0]
 8001f9e:	b103      	cbz	r3, 8001fa2 <_read_r+0x1e>
 8001fa0:	6023      	str	r3, [r4, #0]
 8001fa2:	bd38      	pop	{r3, r4, r5, pc}
 8001fa4:	20000210 	.word	0x20000210

08001fa8 <_write_r>:
 8001fa8:	b538      	push	{r3, r4, r5, lr}
 8001faa:	4604      	mov	r4, r0
 8001fac:	4608      	mov	r0, r1
 8001fae:	4611      	mov	r1, r2
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	4d05      	ldr	r5, [pc, #20]	@ (8001fc8 <_write_r+0x20>)
 8001fb4:	602a      	str	r2, [r5, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f7fe fbe5 	bl	8000786 <_write>
 8001fbc:	1c43      	adds	r3, r0, #1
 8001fbe:	d102      	bne.n	8001fc6 <_write_r+0x1e>
 8001fc0:	682b      	ldr	r3, [r5, #0]
 8001fc2:	b103      	cbz	r3, 8001fc6 <_write_r+0x1e>
 8001fc4:	6023      	str	r3, [r4, #0]
 8001fc6:	bd38      	pop	{r3, r4, r5, pc}
 8001fc8:	20000210 	.word	0x20000210

08001fcc <__errno>:
 8001fcc:	4b01      	ldr	r3, [pc, #4]	@ (8001fd4 <__errno+0x8>)
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20000018 	.word	0x20000018

08001fd8 <__libc_init_array>:
 8001fd8:	b570      	push	{r4, r5, r6, lr}
 8001fda:	2600      	movs	r6, #0
 8001fdc:	4d0c      	ldr	r5, [pc, #48]	@ (8002010 <__libc_init_array+0x38>)
 8001fde:	4c0d      	ldr	r4, [pc, #52]	@ (8002014 <__libc_init_array+0x3c>)
 8001fe0:	1b64      	subs	r4, r4, r5
 8001fe2:	10a4      	asrs	r4, r4, #2
 8001fe4:	42a6      	cmp	r6, r4
 8001fe6:	d109      	bne.n	8001ffc <__libc_init_array+0x24>
 8001fe8:	f000 fa84 	bl	80024f4 <_init>
 8001fec:	2600      	movs	r6, #0
 8001fee:	4d0a      	ldr	r5, [pc, #40]	@ (8002018 <__libc_init_array+0x40>)
 8001ff0:	4c0a      	ldr	r4, [pc, #40]	@ (800201c <__libc_init_array+0x44>)
 8001ff2:	1b64      	subs	r4, r4, r5
 8001ff4:	10a4      	asrs	r4, r4, #2
 8001ff6:	42a6      	cmp	r6, r4
 8001ff8:	d105      	bne.n	8002006 <__libc_init_array+0x2e>
 8001ffa:	bd70      	pop	{r4, r5, r6, pc}
 8001ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002000:	4798      	blx	r3
 8002002:	3601      	adds	r6, #1
 8002004:	e7ee      	b.n	8001fe4 <__libc_init_array+0xc>
 8002006:	f855 3b04 	ldr.w	r3, [r5], #4
 800200a:	4798      	blx	r3
 800200c:	3601      	adds	r6, #1
 800200e:	e7f2      	b.n	8001ff6 <__libc_init_array+0x1e>
 8002010:	08002548 	.word	0x08002548
 8002014:	08002548 	.word	0x08002548
 8002018:	08002548 	.word	0x08002548
 800201c:	0800254c 	.word	0x0800254c

08002020 <__retarget_lock_init_recursive>:
 8002020:	4770      	bx	lr

08002022 <__retarget_lock_acquire_recursive>:
 8002022:	4770      	bx	lr

08002024 <__retarget_lock_release_recursive>:
 8002024:	4770      	bx	lr
	...

08002028 <_free_r>:
 8002028:	b538      	push	{r3, r4, r5, lr}
 800202a:	4605      	mov	r5, r0
 800202c:	2900      	cmp	r1, #0
 800202e:	d040      	beq.n	80020b2 <_free_r+0x8a>
 8002030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002034:	1f0c      	subs	r4, r1, #4
 8002036:	2b00      	cmp	r3, #0
 8002038:	bfb8      	it	lt
 800203a:	18e4      	addlt	r4, r4, r3
 800203c:	f000 f8de 	bl	80021fc <__malloc_lock>
 8002040:	4a1c      	ldr	r2, [pc, #112]	@ (80020b4 <_free_r+0x8c>)
 8002042:	6813      	ldr	r3, [r2, #0]
 8002044:	b933      	cbnz	r3, 8002054 <_free_r+0x2c>
 8002046:	6063      	str	r3, [r4, #4]
 8002048:	6014      	str	r4, [r2, #0]
 800204a:	4628      	mov	r0, r5
 800204c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002050:	f000 b8da 	b.w	8002208 <__malloc_unlock>
 8002054:	42a3      	cmp	r3, r4
 8002056:	d908      	bls.n	800206a <_free_r+0x42>
 8002058:	6820      	ldr	r0, [r4, #0]
 800205a:	1821      	adds	r1, r4, r0
 800205c:	428b      	cmp	r3, r1
 800205e:	bf01      	itttt	eq
 8002060:	6819      	ldreq	r1, [r3, #0]
 8002062:	685b      	ldreq	r3, [r3, #4]
 8002064:	1809      	addeq	r1, r1, r0
 8002066:	6021      	streq	r1, [r4, #0]
 8002068:	e7ed      	b.n	8002046 <_free_r+0x1e>
 800206a:	461a      	mov	r2, r3
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	b10b      	cbz	r3, 8002074 <_free_r+0x4c>
 8002070:	42a3      	cmp	r3, r4
 8002072:	d9fa      	bls.n	800206a <_free_r+0x42>
 8002074:	6811      	ldr	r1, [r2, #0]
 8002076:	1850      	adds	r0, r2, r1
 8002078:	42a0      	cmp	r0, r4
 800207a:	d10b      	bne.n	8002094 <_free_r+0x6c>
 800207c:	6820      	ldr	r0, [r4, #0]
 800207e:	4401      	add	r1, r0
 8002080:	1850      	adds	r0, r2, r1
 8002082:	4283      	cmp	r3, r0
 8002084:	6011      	str	r1, [r2, #0]
 8002086:	d1e0      	bne.n	800204a <_free_r+0x22>
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	4408      	add	r0, r1
 800208e:	6010      	str	r0, [r2, #0]
 8002090:	6053      	str	r3, [r2, #4]
 8002092:	e7da      	b.n	800204a <_free_r+0x22>
 8002094:	d902      	bls.n	800209c <_free_r+0x74>
 8002096:	230c      	movs	r3, #12
 8002098:	602b      	str	r3, [r5, #0]
 800209a:	e7d6      	b.n	800204a <_free_r+0x22>
 800209c:	6820      	ldr	r0, [r4, #0]
 800209e:	1821      	adds	r1, r4, r0
 80020a0:	428b      	cmp	r3, r1
 80020a2:	bf01      	itttt	eq
 80020a4:	6819      	ldreq	r1, [r3, #0]
 80020a6:	685b      	ldreq	r3, [r3, #4]
 80020a8:	1809      	addeq	r1, r1, r0
 80020aa:	6021      	streq	r1, [r4, #0]
 80020ac:	6063      	str	r3, [r4, #4]
 80020ae:	6054      	str	r4, [r2, #4]
 80020b0:	e7cb      	b.n	800204a <_free_r+0x22>
 80020b2:	bd38      	pop	{r3, r4, r5, pc}
 80020b4:	2000021c 	.word	0x2000021c

080020b8 <sbrk_aligned>:
 80020b8:	b570      	push	{r4, r5, r6, lr}
 80020ba:	4e0f      	ldr	r6, [pc, #60]	@ (80020f8 <sbrk_aligned+0x40>)
 80020bc:	460c      	mov	r4, r1
 80020be:	6831      	ldr	r1, [r6, #0]
 80020c0:	4605      	mov	r5, r0
 80020c2:	b911      	cbnz	r1, 80020ca <sbrk_aligned+0x12>
 80020c4:	f000 fa06 	bl	80024d4 <_sbrk_r>
 80020c8:	6030      	str	r0, [r6, #0]
 80020ca:	4621      	mov	r1, r4
 80020cc:	4628      	mov	r0, r5
 80020ce:	f000 fa01 	bl	80024d4 <_sbrk_r>
 80020d2:	1c43      	adds	r3, r0, #1
 80020d4:	d103      	bne.n	80020de <sbrk_aligned+0x26>
 80020d6:	f04f 34ff 	mov.w	r4, #4294967295
 80020da:	4620      	mov	r0, r4
 80020dc:	bd70      	pop	{r4, r5, r6, pc}
 80020de:	1cc4      	adds	r4, r0, #3
 80020e0:	f024 0403 	bic.w	r4, r4, #3
 80020e4:	42a0      	cmp	r0, r4
 80020e6:	d0f8      	beq.n	80020da <sbrk_aligned+0x22>
 80020e8:	1a21      	subs	r1, r4, r0
 80020ea:	4628      	mov	r0, r5
 80020ec:	f000 f9f2 	bl	80024d4 <_sbrk_r>
 80020f0:	3001      	adds	r0, #1
 80020f2:	d1f2      	bne.n	80020da <sbrk_aligned+0x22>
 80020f4:	e7ef      	b.n	80020d6 <sbrk_aligned+0x1e>
 80020f6:	bf00      	nop
 80020f8:	20000218 	.word	0x20000218

080020fc <_malloc_r>:
 80020fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002100:	1ccd      	adds	r5, r1, #3
 8002102:	f025 0503 	bic.w	r5, r5, #3
 8002106:	3508      	adds	r5, #8
 8002108:	2d0c      	cmp	r5, #12
 800210a:	bf38      	it	cc
 800210c:	250c      	movcc	r5, #12
 800210e:	2d00      	cmp	r5, #0
 8002110:	4606      	mov	r6, r0
 8002112:	db01      	blt.n	8002118 <_malloc_r+0x1c>
 8002114:	42a9      	cmp	r1, r5
 8002116:	d904      	bls.n	8002122 <_malloc_r+0x26>
 8002118:	230c      	movs	r3, #12
 800211a:	6033      	str	r3, [r6, #0]
 800211c:	2000      	movs	r0, #0
 800211e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002122:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80021f8 <_malloc_r+0xfc>
 8002126:	f000 f869 	bl	80021fc <__malloc_lock>
 800212a:	f8d8 3000 	ldr.w	r3, [r8]
 800212e:	461c      	mov	r4, r3
 8002130:	bb44      	cbnz	r4, 8002184 <_malloc_r+0x88>
 8002132:	4629      	mov	r1, r5
 8002134:	4630      	mov	r0, r6
 8002136:	f7ff ffbf 	bl	80020b8 <sbrk_aligned>
 800213a:	1c43      	adds	r3, r0, #1
 800213c:	4604      	mov	r4, r0
 800213e:	d158      	bne.n	80021f2 <_malloc_r+0xf6>
 8002140:	f8d8 4000 	ldr.w	r4, [r8]
 8002144:	4627      	mov	r7, r4
 8002146:	2f00      	cmp	r7, #0
 8002148:	d143      	bne.n	80021d2 <_malloc_r+0xd6>
 800214a:	2c00      	cmp	r4, #0
 800214c:	d04b      	beq.n	80021e6 <_malloc_r+0xea>
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	4639      	mov	r1, r7
 8002152:	4630      	mov	r0, r6
 8002154:	eb04 0903 	add.w	r9, r4, r3
 8002158:	f000 f9bc 	bl	80024d4 <_sbrk_r>
 800215c:	4581      	cmp	r9, r0
 800215e:	d142      	bne.n	80021e6 <_malloc_r+0xea>
 8002160:	6821      	ldr	r1, [r4, #0]
 8002162:	4630      	mov	r0, r6
 8002164:	1a6d      	subs	r5, r5, r1
 8002166:	4629      	mov	r1, r5
 8002168:	f7ff ffa6 	bl	80020b8 <sbrk_aligned>
 800216c:	3001      	adds	r0, #1
 800216e:	d03a      	beq.n	80021e6 <_malloc_r+0xea>
 8002170:	6823      	ldr	r3, [r4, #0]
 8002172:	442b      	add	r3, r5
 8002174:	6023      	str	r3, [r4, #0]
 8002176:	f8d8 3000 	ldr.w	r3, [r8]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	bb62      	cbnz	r2, 80021d8 <_malloc_r+0xdc>
 800217e:	f8c8 7000 	str.w	r7, [r8]
 8002182:	e00f      	b.n	80021a4 <_malloc_r+0xa8>
 8002184:	6822      	ldr	r2, [r4, #0]
 8002186:	1b52      	subs	r2, r2, r5
 8002188:	d420      	bmi.n	80021cc <_malloc_r+0xd0>
 800218a:	2a0b      	cmp	r2, #11
 800218c:	d917      	bls.n	80021be <_malloc_r+0xc2>
 800218e:	1961      	adds	r1, r4, r5
 8002190:	42a3      	cmp	r3, r4
 8002192:	6025      	str	r5, [r4, #0]
 8002194:	bf18      	it	ne
 8002196:	6059      	strne	r1, [r3, #4]
 8002198:	6863      	ldr	r3, [r4, #4]
 800219a:	bf08      	it	eq
 800219c:	f8c8 1000 	streq.w	r1, [r8]
 80021a0:	5162      	str	r2, [r4, r5]
 80021a2:	604b      	str	r3, [r1, #4]
 80021a4:	4630      	mov	r0, r6
 80021a6:	f000 f82f 	bl	8002208 <__malloc_unlock>
 80021aa:	f104 000b 	add.w	r0, r4, #11
 80021ae:	1d23      	adds	r3, r4, #4
 80021b0:	f020 0007 	bic.w	r0, r0, #7
 80021b4:	1ac2      	subs	r2, r0, r3
 80021b6:	bf1c      	itt	ne
 80021b8:	1a1b      	subne	r3, r3, r0
 80021ba:	50a3      	strne	r3, [r4, r2]
 80021bc:	e7af      	b.n	800211e <_malloc_r+0x22>
 80021be:	6862      	ldr	r2, [r4, #4]
 80021c0:	42a3      	cmp	r3, r4
 80021c2:	bf0c      	ite	eq
 80021c4:	f8c8 2000 	streq.w	r2, [r8]
 80021c8:	605a      	strne	r2, [r3, #4]
 80021ca:	e7eb      	b.n	80021a4 <_malloc_r+0xa8>
 80021cc:	4623      	mov	r3, r4
 80021ce:	6864      	ldr	r4, [r4, #4]
 80021d0:	e7ae      	b.n	8002130 <_malloc_r+0x34>
 80021d2:	463c      	mov	r4, r7
 80021d4:	687f      	ldr	r7, [r7, #4]
 80021d6:	e7b6      	b.n	8002146 <_malloc_r+0x4a>
 80021d8:	461a      	mov	r2, r3
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	42a3      	cmp	r3, r4
 80021de:	d1fb      	bne.n	80021d8 <_malloc_r+0xdc>
 80021e0:	2300      	movs	r3, #0
 80021e2:	6053      	str	r3, [r2, #4]
 80021e4:	e7de      	b.n	80021a4 <_malloc_r+0xa8>
 80021e6:	230c      	movs	r3, #12
 80021e8:	4630      	mov	r0, r6
 80021ea:	6033      	str	r3, [r6, #0]
 80021ec:	f000 f80c 	bl	8002208 <__malloc_unlock>
 80021f0:	e794      	b.n	800211c <_malloc_r+0x20>
 80021f2:	6005      	str	r5, [r0, #0]
 80021f4:	e7d6      	b.n	80021a4 <_malloc_r+0xa8>
 80021f6:	bf00      	nop
 80021f8:	2000021c 	.word	0x2000021c

080021fc <__malloc_lock>:
 80021fc:	4801      	ldr	r0, [pc, #4]	@ (8002204 <__malloc_lock+0x8>)
 80021fe:	f7ff bf10 	b.w	8002022 <__retarget_lock_acquire_recursive>
 8002202:	bf00      	nop
 8002204:	20000214 	.word	0x20000214

08002208 <__malloc_unlock>:
 8002208:	4801      	ldr	r0, [pc, #4]	@ (8002210 <__malloc_unlock+0x8>)
 800220a:	f7ff bf0b 	b.w	8002024 <__retarget_lock_release_recursive>
 800220e:	bf00      	nop
 8002210:	20000214 	.word	0x20000214

08002214 <__sflush_r>:
 8002214:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221a:	0716      	lsls	r6, r2, #28
 800221c:	4605      	mov	r5, r0
 800221e:	460c      	mov	r4, r1
 8002220:	d454      	bmi.n	80022cc <__sflush_r+0xb8>
 8002222:	684b      	ldr	r3, [r1, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	dc02      	bgt.n	800222e <__sflush_r+0x1a>
 8002228:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800222a:	2b00      	cmp	r3, #0
 800222c:	dd48      	ble.n	80022c0 <__sflush_r+0xac>
 800222e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002230:	2e00      	cmp	r6, #0
 8002232:	d045      	beq.n	80022c0 <__sflush_r+0xac>
 8002234:	2300      	movs	r3, #0
 8002236:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800223a:	682f      	ldr	r7, [r5, #0]
 800223c:	6a21      	ldr	r1, [r4, #32]
 800223e:	602b      	str	r3, [r5, #0]
 8002240:	d030      	beq.n	80022a4 <__sflush_r+0x90>
 8002242:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002244:	89a3      	ldrh	r3, [r4, #12]
 8002246:	0759      	lsls	r1, r3, #29
 8002248:	d505      	bpl.n	8002256 <__sflush_r+0x42>
 800224a:	6863      	ldr	r3, [r4, #4]
 800224c:	1ad2      	subs	r2, r2, r3
 800224e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002250:	b10b      	cbz	r3, 8002256 <__sflush_r+0x42>
 8002252:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002254:	1ad2      	subs	r2, r2, r3
 8002256:	2300      	movs	r3, #0
 8002258:	4628      	mov	r0, r5
 800225a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800225c:	6a21      	ldr	r1, [r4, #32]
 800225e:	47b0      	blx	r6
 8002260:	1c43      	adds	r3, r0, #1
 8002262:	89a3      	ldrh	r3, [r4, #12]
 8002264:	d106      	bne.n	8002274 <__sflush_r+0x60>
 8002266:	6829      	ldr	r1, [r5, #0]
 8002268:	291d      	cmp	r1, #29
 800226a:	d82b      	bhi.n	80022c4 <__sflush_r+0xb0>
 800226c:	4a28      	ldr	r2, [pc, #160]	@ (8002310 <__sflush_r+0xfc>)
 800226e:	410a      	asrs	r2, r1
 8002270:	07d6      	lsls	r6, r2, #31
 8002272:	d427      	bmi.n	80022c4 <__sflush_r+0xb0>
 8002274:	2200      	movs	r2, #0
 8002276:	6062      	str	r2, [r4, #4]
 8002278:	6922      	ldr	r2, [r4, #16]
 800227a:	04d9      	lsls	r1, r3, #19
 800227c:	6022      	str	r2, [r4, #0]
 800227e:	d504      	bpl.n	800228a <__sflush_r+0x76>
 8002280:	1c42      	adds	r2, r0, #1
 8002282:	d101      	bne.n	8002288 <__sflush_r+0x74>
 8002284:	682b      	ldr	r3, [r5, #0]
 8002286:	b903      	cbnz	r3, 800228a <__sflush_r+0x76>
 8002288:	6560      	str	r0, [r4, #84]	@ 0x54
 800228a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800228c:	602f      	str	r7, [r5, #0]
 800228e:	b1b9      	cbz	r1, 80022c0 <__sflush_r+0xac>
 8002290:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002294:	4299      	cmp	r1, r3
 8002296:	d002      	beq.n	800229e <__sflush_r+0x8a>
 8002298:	4628      	mov	r0, r5
 800229a:	f7ff fec5 	bl	8002028 <_free_r>
 800229e:	2300      	movs	r3, #0
 80022a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80022a2:	e00d      	b.n	80022c0 <__sflush_r+0xac>
 80022a4:	2301      	movs	r3, #1
 80022a6:	4628      	mov	r0, r5
 80022a8:	47b0      	blx	r6
 80022aa:	4602      	mov	r2, r0
 80022ac:	1c50      	adds	r0, r2, #1
 80022ae:	d1c9      	bne.n	8002244 <__sflush_r+0x30>
 80022b0:	682b      	ldr	r3, [r5, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0c6      	beq.n	8002244 <__sflush_r+0x30>
 80022b6:	2b1d      	cmp	r3, #29
 80022b8:	d001      	beq.n	80022be <__sflush_r+0xaa>
 80022ba:	2b16      	cmp	r3, #22
 80022bc:	d11d      	bne.n	80022fa <__sflush_r+0xe6>
 80022be:	602f      	str	r7, [r5, #0]
 80022c0:	2000      	movs	r0, #0
 80022c2:	e021      	b.n	8002308 <__sflush_r+0xf4>
 80022c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022c8:	b21b      	sxth	r3, r3
 80022ca:	e01a      	b.n	8002302 <__sflush_r+0xee>
 80022cc:	690f      	ldr	r7, [r1, #16]
 80022ce:	2f00      	cmp	r7, #0
 80022d0:	d0f6      	beq.n	80022c0 <__sflush_r+0xac>
 80022d2:	0793      	lsls	r3, r2, #30
 80022d4:	bf18      	it	ne
 80022d6:	2300      	movne	r3, #0
 80022d8:	680e      	ldr	r6, [r1, #0]
 80022da:	bf08      	it	eq
 80022dc:	694b      	ldreq	r3, [r1, #20]
 80022de:	1bf6      	subs	r6, r6, r7
 80022e0:	600f      	str	r7, [r1, #0]
 80022e2:	608b      	str	r3, [r1, #8]
 80022e4:	2e00      	cmp	r6, #0
 80022e6:	ddeb      	ble.n	80022c0 <__sflush_r+0xac>
 80022e8:	4633      	mov	r3, r6
 80022ea:	463a      	mov	r2, r7
 80022ec:	4628      	mov	r0, r5
 80022ee:	6a21      	ldr	r1, [r4, #32]
 80022f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80022f4:	47e0      	blx	ip
 80022f6:	2800      	cmp	r0, #0
 80022f8:	dc07      	bgt.n	800230a <__sflush_r+0xf6>
 80022fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002302:	f04f 30ff 	mov.w	r0, #4294967295
 8002306:	81a3      	strh	r3, [r4, #12]
 8002308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800230a:	4407      	add	r7, r0
 800230c:	1a36      	subs	r6, r6, r0
 800230e:	e7e9      	b.n	80022e4 <__sflush_r+0xd0>
 8002310:	dfbffffe 	.word	0xdfbffffe

08002314 <_fflush_r>:
 8002314:	b538      	push	{r3, r4, r5, lr}
 8002316:	690b      	ldr	r3, [r1, #16]
 8002318:	4605      	mov	r5, r0
 800231a:	460c      	mov	r4, r1
 800231c:	b913      	cbnz	r3, 8002324 <_fflush_r+0x10>
 800231e:	2500      	movs	r5, #0
 8002320:	4628      	mov	r0, r5
 8002322:	bd38      	pop	{r3, r4, r5, pc}
 8002324:	b118      	cbz	r0, 800232e <_fflush_r+0x1a>
 8002326:	6a03      	ldr	r3, [r0, #32]
 8002328:	b90b      	cbnz	r3, 800232e <_fflush_r+0x1a>
 800232a:	f7ff fc8d 	bl	8001c48 <__sinit>
 800232e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f3      	beq.n	800231e <_fflush_r+0xa>
 8002336:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002338:	07d0      	lsls	r0, r2, #31
 800233a:	d404      	bmi.n	8002346 <_fflush_r+0x32>
 800233c:	0599      	lsls	r1, r3, #22
 800233e:	d402      	bmi.n	8002346 <_fflush_r+0x32>
 8002340:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002342:	f7ff fe6e 	bl	8002022 <__retarget_lock_acquire_recursive>
 8002346:	4628      	mov	r0, r5
 8002348:	4621      	mov	r1, r4
 800234a:	f7ff ff63 	bl	8002214 <__sflush_r>
 800234e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002350:	4605      	mov	r5, r0
 8002352:	07da      	lsls	r2, r3, #31
 8002354:	d4e4      	bmi.n	8002320 <_fflush_r+0xc>
 8002356:	89a3      	ldrh	r3, [r4, #12]
 8002358:	059b      	lsls	r3, r3, #22
 800235a:	d4e1      	bmi.n	8002320 <_fflush_r+0xc>
 800235c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800235e:	f7ff fe61 	bl	8002024 <__retarget_lock_release_recursive>
 8002362:	e7dd      	b.n	8002320 <_fflush_r+0xc>

08002364 <__swhatbuf_r>:
 8002364:	b570      	push	{r4, r5, r6, lr}
 8002366:	460c      	mov	r4, r1
 8002368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800236c:	4615      	mov	r5, r2
 800236e:	2900      	cmp	r1, #0
 8002370:	461e      	mov	r6, r3
 8002372:	b096      	sub	sp, #88	@ 0x58
 8002374:	da0c      	bge.n	8002390 <__swhatbuf_r+0x2c>
 8002376:	89a3      	ldrh	r3, [r4, #12]
 8002378:	2100      	movs	r1, #0
 800237a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800237e:	bf14      	ite	ne
 8002380:	2340      	movne	r3, #64	@ 0x40
 8002382:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002386:	2000      	movs	r0, #0
 8002388:	6031      	str	r1, [r6, #0]
 800238a:	602b      	str	r3, [r5, #0]
 800238c:	b016      	add	sp, #88	@ 0x58
 800238e:	bd70      	pop	{r4, r5, r6, pc}
 8002390:	466a      	mov	r2, sp
 8002392:	f000 f87d 	bl	8002490 <_fstat_r>
 8002396:	2800      	cmp	r0, #0
 8002398:	dbed      	blt.n	8002376 <__swhatbuf_r+0x12>
 800239a:	9901      	ldr	r1, [sp, #4]
 800239c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80023a0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80023a4:	4259      	negs	r1, r3
 80023a6:	4159      	adcs	r1, r3
 80023a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023ac:	e7eb      	b.n	8002386 <__swhatbuf_r+0x22>

080023ae <__smakebuf_r>:
 80023ae:	898b      	ldrh	r3, [r1, #12]
 80023b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023b2:	079d      	lsls	r5, r3, #30
 80023b4:	4606      	mov	r6, r0
 80023b6:	460c      	mov	r4, r1
 80023b8:	d507      	bpl.n	80023ca <__smakebuf_r+0x1c>
 80023ba:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80023be:	6023      	str	r3, [r4, #0]
 80023c0:	6123      	str	r3, [r4, #16]
 80023c2:	2301      	movs	r3, #1
 80023c4:	6163      	str	r3, [r4, #20]
 80023c6:	b003      	add	sp, #12
 80023c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ca:	466a      	mov	r2, sp
 80023cc:	ab01      	add	r3, sp, #4
 80023ce:	f7ff ffc9 	bl	8002364 <__swhatbuf_r>
 80023d2:	9f00      	ldr	r7, [sp, #0]
 80023d4:	4605      	mov	r5, r0
 80023d6:	4639      	mov	r1, r7
 80023d8:	4630      	mov	r0, r6
 80023da:	f7ff fe8f 	bl	80020fc <_malloc_r>
 80023de:	b948      	cbnz	r0, 80023f4 <__smakebuf_r+0x46>
 80023e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023e4:	059a      	lsls	r2, r3, #22
 80023e6:	d4ee      	bmi.n	80023c6 <__smakebuf_r+0x18>
 80023e8:	f023 0303 	bic.w	r3, r3, #3
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	81a3      	strh	r3, [r4, #12]
 80023f2:	e7e2      	b.n	80023ba <__smakebuf_r+0xc>
 80023f4:	89a3      	ldrh	r3, [r4, #12]
 80023f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80023fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023fe:	81a3      	strh	r3, [r4, #12]
 8002400:	9b01      	ldr	r3, [sp, #4]
 8002402:	6020      	str	r0, [r4, #0]
 8002404:	b15b      	cbz	r3, 800241e <__smakebuf_r+0x70>
 8002406:	4630      	mov	r0, r6
 8002408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800240c:	f000 f852 	bl	80024b4 <_isatty_r>
 8002410:	b128      	cbz	r0, 800241e <__smakebuf_r+0x70>
 8002412:	89a3      	ldrh	r3, [r4, #12]
 8002414:	f023 0303 	bic.w	r3, r3, #3
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	81a3      	strh	r3, [r4, #12]
 800241e:	89a3      	ldrh	r3, [r4, #12]
 8002420:	431d      	orrs	r5, r3
 8002422:	81a5      	strh	r5, [r4, #12]
 8002424:	e7cf      	b.n	80023c6 <__smakebuf_r+0x18>

08002426 <_putc_r>:
 8002426:	b570      	push	{r4, r5, r6, lr}
 8002428:	460d      	mov	r5, r1
 800242a:	4614      	mov	r4, r2
 800242c:	4606      	mov	r6, r0
 800242e:	b118      	cbz	r0, 8002438 <_putc_r+0x12>
 8002430:	6a03      	ldr	r3, [r0, #32]
 8002432:	b90b      	cbnz	r3, 8002438 <_putc_r+0x12>
 8002434:	f7ff fc08 	bl	8001c48 <__sinit>
 8002438:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800243a:	07d8      	lsls	r0, r3, #31
 800243c:	d405      	bmi.n	800244a <_putc_r+0x24>
 800243e:	89a3      	ldrh	r3, [r4, #12]
 8002440:	0599      	lsls	r1, r3, #22
 8002442:	d402      	bmi.n	800244a <_putc_r+0x24>
 8002444:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002446:	f7ff fdec 	bl	8002022 <__retarget_lock_acquire_recursive>
 800244a:	68a3      	ldr	r3, [r4, #8]
 800244c:	3b01      	subs	r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	60a3      	str	r3, [r4, #8]
 8002452:	da05      	bge.n	8002460 <_putc_r+0x3a>
 8002454:	69a2      	ldr	r2, [r4, #24]
 8002456:	4293      	cmp	r3, r2
 8002458:	db12      	blt.n	8002480 <_putc_r+0x5a>
 800245a:	b2eb      	uxtb	r3, r5
 800245c:	2b0a      	cmp	r3, #10
 800245e:	d00f      	beq.n	8002480 <_putc_r+0x5a>
 8002460:	6823      	ldr	r3, [r4, #0]
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	6022      	str	r2, [r4, #0]
 8002466:	701d      	strb	r5, [r3, #0]
 8002468:	b2ed      	uxtb	r5, r5
 800246a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800246c:	07da      	lsls	r2, r3, #31
 800246e:	d405      	bmi.n	800247c <_putc_r+0x56>
 8002470:	89a3      	ldrh	r3, [r4, #12]
 8002472:	059b      	lsls	r3, r3, #22
 8002474:	d402      	bmi.n	800247c <_putc_r+0x56>
 8002476:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002478:	f7ff fdd4 	bl	8002024 <__retarget_lock_release_recursive>
 800247c:	4628      	mov	r0, r5
 800247e:	bd70      	pop	{r4, r5, r6, pc}
 8002480:	4629      	mov	r1, r5
 8002482:	4622      	mov	r2, r4
 8002484:	4630      	mov	r0, r6
 8002486:	f7ff fcbe 	bl	8001e06 <__swbuf_r>
 800248a:	4605      	mov	r5, r0
 800248c:	e7ed      	b.n	800246a <_putc_r+0x44>
	...

08002490 <_fstat_r>:
 8002490:	b538      	push	{r3, r4, r5, lr}
 8002492:	2300      	movs	r3, #0
 8002494:	4d06      	ldr	r5, [pc, #24]	@ (80024b0 <_fstat_r+0x20>)
 8002496:	4604      	mov	r4, r0
 8002498:	4608      	mov	r0, r1
 800249a:	4611      	mov	r1, r2
 800249c:	602b      	str	r3, [r5, #0]
 800249e:	f7fe f999 	bl	80007d4 <_fstat>
 80024a2:	1c43      	adds	r3, r0, #1
 80024a4:	d102      	bne.n	80024ac <_fstat_r+0x1c>
 80024a6:	682b      	ldr	r3, [r5, #0]
 80024a8:	b103      	cbz	r3, 80024ac <_fstat_r+0x1c>
 80024aa:	6023      	str	r3, [r4, #0]
 80024ac:	bd38      	pop	{r3, r4, r5, pc}
 80024ae:	bf00      	nop
 80024b0:	20000210 	.word	0x20000210

080024b4 <_isatty_r>:
 80024b4:	b538      	push	{r3, r4, r5, lr}
 80024b6:	2300      	movs	r3, #0
 80024b8:	4d05      	ldr	r5, [pc, #20]	@ (80024d0 <_isatty_r+0x1c>)
 80024ba:	4604      	mov	r4, r0
 80024bc:	4608      	mov	r0, r1
 80024be:	602b      	str	r3, [r5, #0]
 80024c0:	f7fe f997 	bl	80007f2 <_isatty>
 80024c4:	1c43      	adds	r3, r0, #1
 80024c6:	d102      	bne.n	80024ce <_isatty_r+0x1a>
 80024c8:	682b      	ldr	r3, [r5, #0]
 80024ca:	b103      	cbz	r3, 80024ce <_isatty_r+0x1a>
 80024cc:	6023      	str	r3, [r4, #0]
 80024ce:	bd38      	pop	{r3, r4, r5, pc}
 80024d0:	20000210 	.word	0x20000210

080024d4 <_sbrk_r>:
 80024d4:	b538      	push	{r3, r4, r5, lr}
 80024d6:	2300      	movs	r3, #0
 80024d8:	4d05      	ldr	r5, [pc, #20]	@ (80024f0 <_sbrk_r+0x1c>)
 80024da:	4604      	mov	r4, r0
 80024dc:	4608      	mov	r0, r1
 80024de:	602b      	str	r3, [r5, #0]
 80024e0:	f7fe f99e 	bl	8000820 <_sbrk>
 80024e4:	1c43      	adds	r3, r0, #1
 80024e6:	d102      	bne.n	80024ee <_sbrk_r+0x1a>
 80024e8:	682b      	ldr	r3, [r5, #0]
 80024ea:	b103      	cbz	r3, 80024ee <_sbrk_r+0x1a>
 80024ec:	6023      	str	r3, [r4, #0]
 80024ee:	bd38      	pop	{r3, r4, r5, pc}
 80024f0:	20000210 	.word	0x20000210

080024f4 <_init>:
 80024f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f6:	bf00      	nop
 80024f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024fa:	bc08      	pop	{r3}
 80024fc:	469e      	mov	lr, r3
 80024fe:	4770      	bx	lr

08002500 <_fini>:
 8002500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002502:	bf00      	nop
 8002504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002506:	bc08      	pop	{r3}
 8002508:	469e      	mov	lr, r3
 800250a:	4770      	bx	lr
