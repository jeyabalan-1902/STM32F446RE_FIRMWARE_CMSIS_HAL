/*
 * ota_update.c
 *
 *  Created on: May 10, 2025
 *      Author: kjeyabalan
 */

#include "ota_update.h"



void bootloader_read_uart_data(void)
{
	uint8_t rcv_len = 0;
	while(1)
	{
		memset(bl_rx_buffer, 0, 200);
		HAL_UART_Receive(&huart3, &bl_rx_buffer, 1, HAL_MAX_DELAY);
		rcv_len = bl_rx_buffer[0];
		HAL_UART_Receive(&huart3, &bl_rx_buffer[1], rcv_len, HAL_MAX_DELAY);
		switch(bl_rx_buffer[1])
		{
			case BL_GET_VER:
				bootloader_handle_getver_cmd(bl_rx_buffer);
				break;
			case BL_GET_HELP:
				bootloader_handle_gethelp_cmd(bl_rx_buffer);
				break;
			case BL_GET_CID:
				bootloader_handle_getcid_cmd(bl_rx_buffer);
				break;
			case BL_GET_RDP_STATUS:
				bootloader_handle_getrdp_cmd(bl_rx_buffer);
		 	    break;
			case BL_GO_TO_ADDR:
				bootloader_handle_go_cmd(bl_rx_buffer);
				break;
			case BL_FLASH_ERASE:
				bootloader_handle_flash_erase_cmd(bl_rx_buffer);
				break;
			case BL_MEM_WRITE:
				bootloader_handle_mem_write_cmd(bl_rx_buffer);
				break;
			case BL_EN_RW_PROTECT:
				bootloader_handle_endis_rw_protect(bl_rx_buffer);
				break;
			case BL_MEM_READ:
				bootloader_handle_mem_read(bl_rx_buffer);
				break;
			case BL_READ_SECTOR_STATUS:
				bootloader_handle_read_sector_status(bl_rx_buffer);
				break;
			case BL_OTP_READ:
				bootloader_handle_read_otp(bl_rx_buffer);
				break;
			default:
				break;

		}
	}
}

void bootloader_jump_to_user_app(uint32_t app_start_address)
{
    void (*app_reset_handler)(void);
    uint32_t msp_value = *(volatile uint32_t*)app_start_address;
    uint32_t reset_handler_address = *(volatile uint32_t*)(app_start_address + 4);

    printf("app reset handler addr: 0x%08lx\n", reset_handler_address);
    __set_MSP(msp_value);
    app_reset_handler = (void*) (reset_handler_address | 0x1);  // Ensure Thumb bit is set
    app_reset_handler();
}

void jump_to_updated_application(uint32_t app_start_address)
{
	void (*app_reset_handler)(void);
	uint32_t msp_value = *(volatile uint32_t*)app_start_address;
	uint32_t reset_handler_address = *(volatile uint32_t*)(app_start_address + 4);

	printf("app reset handler addr: 0x%08lx\n", reset_handler_address);

	HAL_RCC_DeInit();
	HAL_DeInit();
	__disable_irq();
	__set_MSP(msp_value);
	SCB->VTOR = app_start_address;

	SysTick->CTRL = 0;
	SysTick->LOAD = 0;
	SysTick->VAL = 0;
	NVIC_SystemReset();

	app_reset_handler = (void*) (reset_handler_address | 0x1);
	app_reset_handler();

}

void bootloader_handle_read_sector_status(uint8_t *bl_rx_buffer)
{
	uint16_t status;
	printf("BL_DEBUG_MSG:bootloader_handle_read_sector_protection_status\n");
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
		bootloader_send_ack(bl_rx_buffer[0],2);
		status=read_OB_rw_protection_status();
		printf("BL_DEBUG_MSG: nWRP status: %#x\n",status);
		bootloader_uart_write_data((uint8_t*)&status,2);
	}
	else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}

void bootloader_handle_read_otp(uint8_t *bl_rx_buffer)
{

}

void bootloader_handle_mem_read(uint8_t *bl_rx_buffer)
{


}

void bootloader_handle_dis_rw_protect(uint8_t *bl_rx_buffer)
{
    uint8_t status = 0x00;
    printf("BL_DEBUG_MSG:bootloader_handle_dis_rw_protect\n");
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
	{
        printf("BL_DEBUG_MSG:checksum success !!\n");
        bootloader_send_ack(bl_rx_buffer[0],1);

        status = configure_flash_sector_rw_protection(0,0,1);

        printf("BL_DEBUG_MSG: flash erase status: %#x\n",status);

        bootloader_uart_write_data(&status,1);

	}
	else
	{
        printf("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}
}

void bootloader_handle_endis_rw_protect(uint8_t *bl_rx_buffer)
{
	uint8_t status = 0x00;
	printf("BL_DEBUG_MSG:bootloader_handle_endis_rw_protect\n");
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
		bootloader_send_ack(bl_rx_buffer[0],1);
		status = configure_flash_sector_rw_protection(bl_rx_buffer[2] , bl_rx_buffer[3],0);
		printf("BL_DEBUG_MSG: flash erase status: %#x\n",status);
		bootloader_uart_write_data(&status,1);

	}else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}

void bootloader_handle_mem_write_cmd(uint8_t *bl_rx_buffer)
{
	uint8_t write_status = 0x00;
	uint8_t chksum =0, len=0;
	len = bl_rx_buffer[0];
	uint8_t payload_len = bl_rx_buffer[6];
	uint32_t mem_address = *((uint32_t *) ( &bl_rx_buffer[2]) );
	chksum = bl_rx_buffer[len];
	printf("BL_DEBUG_MSG:bootloader_handle_mem_write_cmd\n");
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;


	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");

		bootloader_send_ack(bl_rx_buffer[0],1);

		printf("BL_DEBUG_MSG: mem write address : %#x\n",mem_address);

		if( verify_address(mem_address) == ADDR_VALID )
		{
			printf("BL_DEBUG_MSG: valid mem write address\n");
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
			write_status = execute_mem_write(&bl_rx_buffer[7],mem_address, payload_len);
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
			bootloader_uart_write_data(&write_status,1);
		}
		else
		{
			printf("BL_DEBUG_MSG: invalid mem write address\n");
			write_status = ADDR_INVALID;
			bootloader_uart_write_data(&write_status,1);
		}
	}
	else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}

void bootloader_handle_flash_erase_cmd(uint8_t *bl_rx_buffer)
{
	uint8_t erase_status = 0x00;
	printf("BL_DEBUG_MSG:bootloader_handle_flash_erase_cmd\n");
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
		bootloader_send_ack(bl_rx_buffer[0],1);
		printf("BL_DEBUG_MSG:initial_sector : %d  no_ofsectors: %d\n",bl_rx_buffer[2],bl_rx_buffer[3]);

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,1);
		erase_status = execute_flash_erase(bl_rx_buffer[2] , bl_rx_buffer[3]);
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,0);

		printf("BL_DEBUG_MSG: flash erase status: %#x\n",erase_status);

		bootloader_uart_write_data(&erase_status,1);

	}else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}

void bootloader_handle_go_cmd(uint8_t *bl_rx_buffer)
{
	uint32_t go_address=0;
	uint8_t addr_valid = ADDR_VALID;
	uint8_t addr_invalid = ADDR_INVALID;

	printf("BL_DEBUG_MSG:bootloader_handle_go_cmd\n");
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");

		bootloader_send_ack(bl_rx_buffer[0],1);

		//extract the go address
		go_address = *((uint32_t *)&bl_rx_buffer[2] );
		printf("BL_DEBUG_MSG:GO addr: %#x\n",go_address);

		if( verify_address(go_address) == ADDR_VALID )
		{
			bootloader_uart_write_data(&addr_valid,1);
            jump_to_updated_application(go_address);
		}
		else
		{
			printf("BL_DEBUG_MSG:GO addr invalid ! \n");
			bootloader_uart_write_data(&addr_invalid,1);
		}

	}else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}

void bootloader_handle_getrdp_cmd(uint8_t *bl_rx_buffer)
{
	uint8_t rdp_level = 0x00;
	printf("BL_DEBUG_MSG:bootloader_handle_getrdp_cmd\n");
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
		bootloader_send_ack(bl_rx_buffer[0],1);
		rdp_level = get_flash_rdp_level();
		printf("BL_DEBUG_MSG:RDP level: %d %#x\n",rdp_level,rdp_level);
		bootloader_uart_write_data(&rdp_level,1);

	}else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}

void bootloader_handle_getcid_cmd(uint8_t *bl_rx_buffer)
{
	uint16_t bl_cid_num = 0;
	printf("BL_DEBUG_MSG:bootloader_handle_getcid_cmd\n");
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
		bootloader_send_ack(bl_rx_buffer[0],2);
		bl_cid_num = get_mcu_chip_id();
		printf("BL_DEBUG_MSG:MCU id : %d %#x !!\n",bl_cid_num, bl_cid_num);
		bootloader_uart_write_data((uint8_t *)&bl_cid_num,2);

	}else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}

void bootloader_handle_gethelp_cmd(uint8_t *bl_rx_buffer)
{
	printf("BL_DEBUG_MSG:bootloader_handle_gethelp_cmd\n");
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
	{
		printf("BL_DEBUG_MSG:checksum success !!\n");
		bootloader_send_ack(bl_rx_buffer[0],sizeof(supported_commands));
		bootloader_uart_write_data(supported_commands,sizeof(supported_commands) );

	}else
	{
		printf("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}

void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
	uint8_t bl_version;
	printf("bootloader handle get version command\n");
	uint32_t command_packet_len = bl_rx_buffer[0] + 1;
	uint32_t host_crc = *((uint32_t *) (bl_rx_buffer + command_packet_len - 4));
	if (! bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len-4, host_crc))
	{
		printf("checksum success !!\n");
		bootloader_send_ack(bl_rx_buffer[0], 1);
		bl_version = get_bootloader_version();
		printf("BL VERSION: %d %#x\n", bl_version, bl_version);
		bootloader_uart_write_data(&bl_version, 1);
	}
	else
	{
		printf("checksum failed !!\n");
		bootloader_send_nack();
	}
}

void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
	ack_buf[1] = follow_len;
	HAL_UART_Transmit(&huart3, ack_buf, 2, HAL_MAX_DELAY);
}

void bootloader_send_nack(void)
{
	uint8_t nack = BL_NACK;
	HAL_UART_Transmit(&huart3, &nack, 1, HAL_MAX_DELAY);
}

uint8_t bootloader_verify_crc(uint8_t *pData, uint32_t len, uint32_t crc_host)
{
	uint32_t uwCRCValue = 0xff;
	__HAL_CRC_DR_RESET(&hcrc);
	for (uint32_t i = 0; i < len; i++)
	{
		uint32_t i_data = pData[i];
		uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
	}
	if(uwCRCValue == crc_host)
	{
		return VERIFY_CRC_SUCCESS;
	}
	return VERIFY_CRC_FAIL;
}

void bootloader_uart_write_data(uint8_t *pBuffer, uint32_t len)
{
	HAL_UART_Transmit(&huart3, pBuffer, len, HAL_MAX_DELAY);
}

uint8_t get_bootloader_version(void)
{
	return (uint8_t)BL_VERSION;
}


uint16_t get_mcu_chip_id(void)
{
	uint16_t cid;
	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
	return  cid;
}

uint8_t get_flash_rdp_level(void)
{

	uint8_t rdp_status=0;
#if 0
	FLASH_OBProgramInitTypeDef  ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
	rdp_status = (uint8_t)ob_handle.RDPLevel;
#else

	 volatile uint32_t *pOB_addr = (uint32_t*) 0x1FFFC000;
	 rdp_status =  (uint8_t)(*pOB_addr >> 8) ;
#endif

	return rdp_status;

}

uint8_t verify_address(uint32_t go_address)
{
	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END)
	{
		return ADDR_VALID;
	}
	else if ( go_address >= SRAM2_BASE && go_address <= SRAM2_END)
	{
		return ADDR_VALID;
	}
	else if ( go_address >= FLASH_BASE && go_address <= FLASH_END)
	{
		return ADDR_VALID;
	}
	else if ( go_address >= BKPSRAM_BASE && go_address <= BKPSRAM_END)
	{
		return ADDR_VALID;
	}
	else
		return ADDR_INVALID;
}

 uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
{
	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;


	if( number_of_sector > 8 )
		return INVALID_SECTOR;

	if( (sector_number == 0xff ) || (sector_number <= 7) )
	{
		if(sector_number == (uint8_t) 0xff)
		{
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
		}else
		{
			uint8_t remanining_sector = 8 - sector_number;
            if( number_of_sector > remanining_sector)
            {
            	number_of_sector = remanining_sector;
            }
			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
			flashErase_handle.Sector = sector_number;
			flashErase_handle.NbSectors = number_of_sector;
		}
		flashErase_handle.Banks = FLASH_BANK_1;
		HAL_FLASH_Unlock();
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
		HAL_FLASH_Lock();

		return status;
	}
	return INVALID_SECTOR;
}

uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
    uint8_t status=HAL_OK;
    HAL_FLASH_Unlock();

    for(uint32_t i = 0 ; i <len ; i++)
    {
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,mem_address+i,pBuffer[i] );
    }

    HAL_FLASH_Lock();
    return status;
}

uint8_t configure_flash_sector_rw_protection(uint8_t sector_details, uint8_t protection_mode, uint8_t disable)
{
    volatile uint32_t *pOPTCR = (uint32_t*) 0x40023C14;

	if(disable)
	{
		HAL_FLASH_OB_Unlock();
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
		*pOPTCR &= ~(1 << 31);
		*pOPTCR |= (0xFF << 16);
		*pOPTCR |= ( 1 << 1);
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);

		HAL_FLASH_OB_Lock();

		return 0;

	}

	if(protection_mode == (uint8_t) 1)
    {
		HAL_FLASH_OB_Unlock();
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
		*pOPTCR &= ~(1 << 31);

		//put write protection on sectors
		*pOPTCR &= ~ (sector_details << 16);

		//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
		*pOPTCR |= ( 1 << 1);

		//wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);

		HAL_FLASH_OB_Lock();
	}

	else if (protection_mode == (uint8_t) 2)
    {

		HAL_FLASH_OB_Unlock();

		//wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);

		//here wer are setting read and write protection for the sectors
		//set the 31st bit
		//please refer : Flash option control register (FLASH_OPTCR) in RM
		*pOPTCR |= (1 << 31);

		//put read and write protection on sectors
		*pOPTCR &= ~(0xff << 16);
		*pOPTCR |= (sector_details << 16);

		//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
		*pOPTCR |= ( 1 << 1);

		//wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);

		HAL_FLASH_OB_Lock();
    }

		return 0;
}

uint16_t read_OB_rw_protection_status(void)
{
	FLASH_OBProgramInitTypeDef OBInit;
	HAL_FLASH_OB_Unlock();
	HAL_FLASHEx_OBGetConfig(&OBInit);
	HAL_FLASH_Lock();
	return (uint16_t)OBInit.WRPSector;

}
