/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include "i2c.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <math.h>
#include <string.h>
#include "MPU6050.h"
#include "CalculateAngle.h"
#include "I2Cdev.h"
#include "HMC5883L.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;
extern I2C_HandleTypeDef hi2c2;

int16_t mx, my, mz;
char buffer[100];
float pitch, roll;
char uartBuf[50];
float mx_comp, my_comp;
float yaw;

TaskHandle_t mpu6050_Handler;
TaskHandle_t HMC5883L_Handler;
osMutexId_t uart2MutexHandle;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uart2Mutex(void)
{
    const osMutexAttr_t uart2Mutex_attributes = {
        .name = "uart2Mutex"
    };
    uart2MutexHandle = osMutexNew(&uart2Mutex_attributes);
}

void HMC8388L_setup(void)
{
	 HMC5883L_initialize();

	 if (HMC5883L_testConnection())
	 {
		 osMutexAcquire(uart2MutexHandle, osWaitForever);
		 printf("HMC5883L Connection Success\n\r");
		 osMutexRelease(uart2MutexHandle);
	 }
	 else
	 {
		 osMutexAcquire(uart2MutexHandle, osWaitForever);
		 printf("HMC5883L Connection Failed\n\r");
		 osMutexRelease(uart2MutexHandle);
	 }
}

void computeYawFromMag() {
    HMC5883L_getHeading(&mx, &my, &mz);
    float fx = (float)mx;
    float fy = (float)my;
    float fz = (float)mz;
    float pitchRad = pitch * M_PI / 180.0;
    float rollRad  = roll  * M_PI / 180.0;

    mx_comp = fx * cos(pitchRad) + fz * sin(pitchRad);
    my_comp = fx * sin(rollRad) * sin(pitchRad) + fy * cos(rollRad) - fz * sin(rollRad) * cos(pitchRad);

    yaw = atan2(my_comp, mx_comp) * 180.0 / M_PI;

    if (yaw < 0)
        yaw += 360;
}

void Send_Yaw_Angle_UART(float yaw)
{
    int len = snprintf(uartBuf, sizeof(uartBuf), "%f\r\n", yaw);
    HAL_UART_Transmit(&huart1, (uint8_t*)uartBuf, len, HAL_MAX_DELAY);
}

void MPU6050_Task(void *argument)
{
	MPU6050_Initialization();
	osDelay(1000);
    while (1) {
    	if(MPU6050_DataReady() == 1)
		{
			MPU6050_ProcessData(&MPU6050);
			CalculateCompliFilter(&Angle, &MPU6050);
			osMutexAcquire(uart2MutexHandle, osWaitForever);
			printf("MPU6050 Yaw: %f\n\r",Angle.ComFilt_yaw);
			osMutexRelease(uart2MutexHandle);
			osDelay(10);
		}
    }
}

void HMC5883L_Task(void *argument) {
	HMC8388L_setup();
    while (1) {
    	char buffer[64];
    	sprintf(buffer, "HMC5883L Yaw: %.2fÂ°\r\n", yaw);
    	osMutexAcquire(uart2MutexHandle, osWaitForever);
    	printf("%s", buffer);
    	osMutexRelease(uart2MutexHandle);
        osDelay(10);
    }
}


#ifdef __GNUC__
#define UART_printf   int __io_putchar(int ch)
UART_printf
{
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
	return ch;
}
#endif
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_USART2_UART_Init();
  MX_USART1_UART_Init();
  MX_I2C2_Init();
  /* USER CODE BEGIN 2 */
  I2Cdev_init(&hi2c2);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();

  uart2Mutex();

  const osThreadAttr_t mpu6050Task_attributes = {
    .name = "MPU6050",
    .priority = (osPriority_t) osPriorityAboveNormal,
    .stack_size = 128 * 4
  };
  mpu6050_Handler = osThreadNew(MPU6050_Task, NULL, &mpu6050Task_attributes);

  const osThreadAttr_t hmc5883lTask_attributes = {
	.name = "HMC5883L",
	.priority = (osPriority_t) osPriorityAboveNormal1,
	.stack_size = 128 * 4
  };
  HMC5883L_Handler = osThreadNew(HMC5883L_Task, NULL, &hmc5883lTask_attributes);
  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  HMC5883L_getHeading(&mx, &my, &mz);  // Reads raw magnetometer data
//	  sprintf(buffer, "Mag X: %d\tY: %d\tZ: %d\r\n", mx, my, mz);
//	  printf("%s \n", buffer);
//	  computeYawFromMag();
//	  HAL_Delay(10);
//	  if(MPU6050_DataReady() == 1)
//		{
//			MPU6050_ProcessData(&MPU6050);
//			CalculateCompliFilter(&Angle, &MPU6050);
//			printf("%f\n\r",Angle.ComFilt_yaw);
//			Send_Yaw_Angle_UART(Angle.ComFilt_yaw);
//			//HAL_Delay(10);
//	//	  			printf("%f, %f, %f\n", Angle.ComFilt_roll,Angle.ComFilt_pitch,Angle.ComFilt_yaw);
//		}

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 96;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM1 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
