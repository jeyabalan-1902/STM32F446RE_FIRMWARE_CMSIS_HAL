
uart_rtos_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008928  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08008ac8  08008ac8  00009ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ba8  08008ba8  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  08008ba8  08008ba8  00009ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bb0  08008bb0  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bb0  08008bb0  00009bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008bb4  08008bb4  00009bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008bb8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051a0  2000006c  08008c24  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000520c  08008c24  0000a20c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b88f  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a07  00000000  00000000  0002592b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001820  00000000  00000000  00029338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012e5  00000000  00000000  0002ab58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004d20  00000000  00000000  0002be3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b925  00000000  00000000  00030b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cf2b  00000000  00000000  0004c482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e93ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e64  00000000  00000000  000e93f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f0254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008ab0 	.word	0x08008ab0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08008ab0 	.word	0x08008ab0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <StartUARTDMAReception>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void StartUARTDMAReception(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
    HAL_UART_Receive_DMA(&huart1, dmaRxBuffer_uart1, UART_BUFFER_SIZE);
 8000584:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000588:	490d      	ldr	r1, [pc, #52]	@ (80005c0 <StartUARTDMAReception+0x40>)
 800058a:	480e      	ldr	r0, [pc, #56]	@ (80005c4 <StartUARTDMAReception+0x44>)
 800058c:	f002 fed7 	bl	800333e <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart6, dmaRxBuffer_uart6, UART_BUFFER_SIZE);
 8000590:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000594:	490c      	ldr	r1, [pc, #48]	@ (80005c8 <StartUARTDMAReception+0x48>)
 8000596:	480d      	ldr	r0, [pc, #52]	@ (80005cc <StartUARTDMAReception+0x4c>)
 8000598:	f002 fed1 	bl	800333e <HAL_UART_Receive_DMA>

    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);  // Enable IDLE interrupt
 800059c:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <StartUARTDMAReception+0x44>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	68da      	ldr	r2, [r3, #12]
 80005a2:	4b08      	ldr	r3, [pc, #32]	@ (80005c4 <StartUARTDMAReception+0x44>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f042 0210 	orr.w	r2, r2, #16
 80005aa:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 80005ac:	4b07      	ldr	r3, [pc, #28]	@ (80005cc <StartUARTDMAReception+0x4c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	68da      	ldr	r2, [r3, #12]
 80005b2:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <StartUARTDMAReception+0x4c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f042 0210 	orr.w	r2, r2, #16
 80005ba:	60da      	str	r2, [r3, #12]
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000278 	.word	0x20000278
 80005c4:	200000dc 	.word	0x200000dc
 80005c8:	20000378 	.word	0x20000378
 80005cc:	2000016c 	.word	0x2000016c

080005d0 <StartMutex>:

void StartMutex(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
    const osMutexAttr_t uart2Mutex_attributes = {
 80005d6:	463b      	mov	r3, r7
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <StartMutex+0x2c>)
 80005e4:	603b      	str	r3, [r7, #0]
        .name = "uart2Mutex"
    };
    uart2MutexHandle = osMutexNew(&uart2Mutex_attributes);
 80005e6:	463b      	mov	r3, r7
 80005e8:	4618      	mov	r0, r3
 80005ea:	f004 f8fa 	bl	80047e2 <osMutexNew>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a03      	ldr	r2, [pc, #12]	@ (8000600 <StartMutex+0x30>)
 80005f2:	6013      	str	r3, [r2, #0]
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	08008ad4 	.word	0x08008ad4
 8000600:	20000684 	.word	0x20000684

08000604 <UART1_Task>:


void UART1_Task(void *argument)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    uint16_t newPos = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	81fb      	strh	r3, [r7, #14]
    for (;;)
    {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);  // Wait until IDLE detected
 8000610:	f04f 31ff 	mov.w	r1, #4294967295
 8000614:	2001      	movs	r0, #1
 8000616:	f006 f9e7 	bl	80069e8 <ulTaskNotifyTake>

        newPos = UART_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart1.hdmarx);
 800061a:	4b3d      	ldr	r3, [pc, #244]	@ (8000710 <UART1_Task+0x10c>)
 800061c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	b29b      	uxth	r3, r3
 8000624:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000628:	81fb      	strh	r3, [r7, #14]

        if (newPos != oldPos_uart1)
 800062a:	4b3a      	ldr	r3, [pc, #232]	@ (8000714 <UART1_Task+0x110>)
 800062c:	881b      	ldrh	r3, [r3, #0]
 800062e:	b29b      	uxth	r3, r3
 8000630:	89fa      	ldrh	r2, [r7, #14]
 8000632:	429a      	cmp	r2, r3
 8000634:	d0ec      	beq.n	8000610 <UART1_Task+0xc>
        {
            if (newPos > oldPos_uart1)
 8000636:	4b37      	ldr	r3, [pc, #220]	@ (8000714 <UART1_Task+0x110>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	b29b      	uxth	r3, r3
 800063c:	89fa      	ldrh	r2, [r7, #14]
 800063e:	429a      	cmp	r2, r3
 8000640:	d917      	bls.n	8000672 <UART1_Task+0x6e>
            {
                memcpy(ringBuffer_uart1, &dmaRxBuffer_uart1[oldPos_uart1], newPos - oldPos_uart1);
 8000642:	4b34      	ldr	r3, [pc, #208]	@ (8000714 <UART1_Task+0x110>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	b29b      	uxth	r3, r3
 8000648:	461a      	mov	r2, r3
 800064a:	4b33      	ldr	r3, [pc, #204]	@ (8000718 <UART1_Task+0x114>)
 800064c:	18d1      	adds	r1, r2, r3
 800064e:	89fb      	ldrh	r3, [r7, #14]
 8000650:	4a30      	ldr	r2, [pc, #192]	@ (8000714 <UART1_Task+0x110>)
 8000652:	8812      	ldrh	r2, [r2, #0]
 8000654:	b292      	uxth	r2, r2
 8000656:	1a9b      	subs	r3, r3, r2
 8000658:	461a      	mov	r2, r3
 800065a:	4830      	ldr	r0, [pc, #192]	@ (800071c <UART1_Task+0x118>)
 800065c:	f007 fc7d 	bl	8007f5a <memcpy>
                ringBuffer_uart1[newPos - oldPos_uart1] = '\0';
 8000660:	89fb      	ldrh	r3, [r7, #14]
 8000662:	4a2c      	ldr	r2, [pc, #176]	@ (8000714 <UART1_Task+0x110>)
 8000664:	8812      	ldrh	r2, [r2, #0]
 8000666:	b292      	uxth	r2, r2
 8000668:	1a9b      	subs	r3, r3, r2
 800066a:	4a2c      	ldr	r2, [pc, #176]	@ (800071c <UART1_Task+0x118>)
 800066c:	2100      	movs	r1, #0
 800066e:	54d1      	strb	r1, [r2, r3]
 8000670:	e024      	b.n	80006bc <UART1_Task+0xb8>
            }
            else
            {
                // buffer wrapped
                memcpy(ringBuffer_uart1, &dmaRxBuffer_uart1[oldPos_uart1], UART_BUFFER_SIZE - oldPos_uart1);
 8000672:	4b28      	ldr	r3, [pc, #160]	@ (8000714 <UART1_Task+0x110>)
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	b29b      	uxth	r3, r3
 8000678:	461a      	mov	r2, r3
 800067a:	4b27      	ldr	r3, [pc, #156]	@ (8000718 <UART1_Task+0x114>)
 800067c:	4413      	add	r3, r2
 800067e:	4a25      	ldr	r2, [pc, #148]	@ (8000714 <UART1_Task+0x110>)
 8000680:	8812      	ldrh	r2, [r2, #0]
 8000682:	b292      	uxth	r2, r2
 8000684:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8000688:	4619      	mov	r1, r3
 800068a:	4824      	ldr	r0, [pc, #144]	@ (800071c <UART1_Task+0x118>)
 800068c:	f007 fc65 	bl	8007f5a <memcpy>
                memcpy(&ringBuffer_uart1[UART_BUFFER_SIZE - oldPos_uart1], dmaRxBuffer_uart1, newPos);
 8000690:	4b20      	ldr	r3, [pc, #128]	@ (8000714 <UART1_Task+0x110>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	b29b      	uxth	r3, r3
 8000696:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800069a:	4a20      	ldr	r2, [pc, #128]	@ (800071c <UART1_Task+0x118>)
 800069c:	4413      	add	r3, r2
 800069e:	89fa      	ldrh	r2, [r7, #14]
 80006a0:	491d      	ldr	r1, [pc, #116]	@ (8000718 <UART1_Task+0x114>)
 80006a2:	4618      	mov	r0, r3
 80006a4:	f007 fc59 	bl	8007f5a <memcpy>
                ringBuffer_uart1[(UART_BUFFER_SIZE - oldPos_uart1) + newPos] = '\0';
 80006a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000714 <UART1_Task+0x110>)
 80006aa:	881b      	ldrh	r3, [r3, #0]
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	f5c3 7280 	rsb	r2, r3, #256	@ 0x100
 80006b2:	89fb      	ldrh	r3, [r7, #14]
 80006b4:	4413      	add	r3, r2
 80006b6:	4a19      	ldr	r2, [pc, #100]	@ (800071c <UART1_Task+0x118>)
 80006b8:	2100      	movs	r1, #0
 80006ba:	54d1      	strb	r1, [r2, r3]
            }

            oldPos_uart1 = newPos;
 80006bc:	4a15      	ldr	r2, [pc, #84]	@ (8000714 <UART1_Task+0x110>)
 80006be:	89fb      	ldrh	r3, [r7, #14]
 80006c0:	8013      	strh	r3, [r2, #0]

            // Send to UART2
            osMutexAcquire(uart2MutexHandle, osWaitForever);
 80006c2:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <UART1_Task+0x11c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f04f 31ff 	mov.w	r1, #4294967295
 80006ca:	4618      	mov	r0, r3
 80006cc:	f004 f90f 	bl	80048ee <osMutexAcquire>
            HAL_UART_Transmit(&huart2, (uint8_t*)"UART1: ", 7, HAL_MAX_DELAY);
 80006d0:	f04f 33ff 	mov.w	r3, #4294967295
 80006d4:	2207      	movs	r2, #7
 80006d6:	4913      	ldr	r1, [pc, #76]	@ (8000724 <UART1_Task+0x120>)
 80006d8:	4813      	ldr	r0, [pc, #76]	@ (8000728 <UART1_Task+0x124>)
 80006da:	f002 fda5 	bl	8003228 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*)ringBuffer_uart1, strlen((char*)ringBuffer_uart1), HAL_MAX_DELAY);
 80006de:	480f      	ldr	r0, [pc, #60]	@ (800071c <UART1_Task+0x118>)
 80006e0:	f7ff fd7e 	bl	80001e0 <strlen>
 80006e4:	4603      	mov	r3, r0
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ec:	490b      	ldr	r1, [pc, #44]	@ (800071c <UART1_Task+0x118>)
 80006ee:	480e      	ldr	r0, [pc, #56]	@ (8000728 <UART1_Task+0x124>)
 80006f0:	f002 fd9a 	bl	8003228 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295
 80006f8:	2202      	movs	r2, #2
 80006fa:	490c      	ldr	r1, [pc, #48]	@ (800072c <UART1_Task+0x128>)
 80006fc:	480a      	ldr	r0, [pc, #40]	@ (8000728 <UART1_Task+0x124>)
 80006fe:	f002 fd93 	bl	8003228 <HAL_UART_Transmit>
            osMutexRelease(uart2MutexHandle);
 8000702:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <UART1_Task+0x11c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f004 f93c 	bl	8004984 <osMutexRelease>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);  // Wait until IDLE detected
 800070c:	e780      	b.n	8000610 <UART1_Task+0xc>
 800070e:	bf00      	nop
 8000710:	200000dc 	.word	0x200000dc
 8000714:	20000678 	.word	0x20000678
 8000718:	20000278 	.word	0x20000278
 800071c:	20000478 	.word	0x20000478
 8000720:	20000684 	.word	0x20000684
 8000724:	08008ae0 	.word	0x08008ae0
 8000728:	20000124 	.word	0x20000124
 800072c:	08008ae8 	.word	0x08008ae8

08000730 <UART6_Task>:
        }
    }
}

void UART6_Task(void *argument)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
    uint16_t newPos = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	81fb      	strh	r3, [r7, #14]
    for (;;)
    {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);  // Wait until IDLE detected
 800073c:	f04f 31ff 	mov.w	r1, #4294967295
 8000740:	2001      	movs	r0, #1
 8000742:	f006 f951 	bl	80069e8 <ulTaskNotifyTake>

        newPos = UART_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart6.hdmarx);
 8000746:	4b3d      	ldr	r3, [pc, #244]	@ (800083c <UART6_Task+0x10c>)
 8000748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	b29b      	uxth	r3, r3
 8000750:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000754:	81fb      	strh	r3, [r7, #14]

        if (newPos != oldPos_uart6)
 8000756:	4b3a      	ldr	r3, [pc, #232]	@ (8000840 <UART6_Task+0x110>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	b29b      	uxth	r3, r3
 800075c:	89fa      	ldrh	r2, [r7, #14]
 800075e:	429a      	cmp	r2, r3
 8000760:	d0ec      	beq.n	800073c <UART6_Task+0xc>
        {
            if (newPos > oldPos_uart6)
 8000762:	4b37      	ldr	r3, [pc, #220]	@ (8000840 <UART6_Task+0x110>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	b29b      	uxth	r3, r3
 8000768:	89fa      	ldrh	r2, [r7, #14]
 800076a:	429a      	cmp	r2, r3
 800076c:	d917      	bls.n	800079e <UART6_Task+0x6e>
            {
                memcpy(ringBuffer_uart6, &dmaRxBuffer_uart6[oldPos_uart6], newPos - oldPos_uart6);
 800076e:	4b34      	ldr	r3, [pc, #208]	@ (8000840 <UART6_Task+0x110>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	b29b      	uxth	r3, r3
 8000774:	461a      	mov	r2, r3
 8000776:	4b33      	ldr	r3, [pc, #204]	@ (8000844 <UART6_Task+0x114>)
 8000778:	18d1      	adds	r1, r2, r3
 800077a:	89fb      	ldrh	r3, [r7, #14]
 800077c:	4a30      	ldr	r2, [pc, #192]	@ (8000840 <UART6_Task+0x110>)
 800077e:	8812      	ldrh	r2, [r2, #0]
 8000780:	b292      	uxth	r2, r2
 8000782:	1a9b      	subs	r3, r3, r2
 8000784:	461a      	mov	r2, r3
 8000786:	4830      	ldr	r0, [pc, #192]	@ (8000848 <UART6_Task+0x118>)
 8000788:	f007 fbe7 	bl	8007f5a <memcpy>
                ringBuffer_uart6[newPos - oldPos_uart6] = '\0';
 800078c:	89fb      	ldrh	r3, [r7, #14]
 800078e:	4a2c      	ldr	r2, [pc, #176]	@ (8000840 <UART6_Task+0x110>)
 8000790:	8812      	ldrh	r2, [r2, #0]
 8000792:	b292      	uxth	r2, r2
 8000794:	1a9b      	subs	r3, r3, r2
 8000796:	4a2c      	ldr	r2, [pc, #176]	@ (8000848 <UART6_Task+0x118>)
 8000798:	2100      	movs	r1, #0
 800079a:	54d1      	strb	r1, [r2, r3]
 800079c:	e024      	b.n	80007e8 <UART6_Task+0xb8>
            }
            else
            {
                memcpy(ringBuffer_uart6, &dmaRxBuffer_uart6[oldPos_uart6], UART_BUFFER_SIZE - oldPos_uart6);
 800079e:	4b28      	ldr	r3, [pc, #160]	@ (8000840 <UART6_Task+0x110>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b27      	ldr	r3, [pc, #156]	@ (8000844 <UART6_Task+0x114>)
 80007a8:	4413      	add	r3, r2
 80007aa:	4a25      	ldr	r2, [pc, #148]	@ (8000840 <UART6_Task+0x110>)
 80007ac:	8812      	ldrh	r2, [r2, #0]
 80007ae:	b292      	uxth	r2, r2
 80007b0:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80007b4:	4619      	mov	r1, r3
 80007b6:	4824      	ldr	r0, [pc, #144]	@ (8000848 <UART6_Task+0x118>)
 80007b8:	f007 fbcf 	bl	8007f5a <memcpy>
                memcpy(&ringBuffer_uart6[UART_BUFFER_SIZE - oldPos_uart6], dmaRxBuffer_uart6, newPos);
 80007bc:	4b20      	ldr	r3, [pc, #128]	@ (8000840 <UART6_Task+0x110>)
 80007be:	881b      	ldrh	r3, [r3, #0]
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80007c6:	4a20      	ldr	r2, [pc, #128]	@ (8000848 <UART6_Task+0x118>)
 80007c8:	4413      	add	r3, r2
 80007ca:	89fa      	ldrh	r2, [r7, #14]
 80007cc:	491d      	ldr	r1, [pc, #116]	@ (8000844 <UART6_Task+0x114>)
 80007ce:	4618      	mov	r0, r3
 80007d0:	f007 fbc3 	bl	8007f5a <memcpy>
                ringBuffer_uart6[(UART_BUFFER_SIZE - oldPos_uart6) + newPos] = '\0';
 80007d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000840 <UART6_Task+0x110>)
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	b29b      	uxth	r3, r3
 80007da:	f5c3 7280 	rsb	r2, r3, #256	@ 0x100
 80007de:	89fb      	ldrh	r3, [r7, #14]
 80007e0:	4413      	add	r3, r2
 80007e2:	4a19      	ldr	r2, [pc, #100]	@ (8000848 <UART6_Task+0x118>)
 80007e4:	2100      	movs	r1, #0
 80007e6:	54d1      	strb	r1, [r2, r3]
            }

            oldPos_uart6 = newPos;
 80007e8:	4a15      	ldr	r2, [pc, #84]	@ (8000840 <UART6_Task+0x110>)
 80007ea:	89fb      	ldrh	r3, [r7, #14]
 80007ec:	8013      	strh	r3, [r2, #0]

            // Send to UART2
            osMutexAcquire(uart2MutexHandle, osWaitForever);
 80007ee:	4b17      	ldr	r3, [pc, #92]	@ (800084c <UART6_Task+0x11c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f04f 31ff 	mov.w	r1, #4294967295
 80007f6:	4618      	mov	r0, r3
 80007f8:	f004 f879 	bl	80048ee <osMutexAcquire>
            HAL_UART_Transmit(&huart2, (uint8_t*)"UART6: ", 7, HAL_MAX_DELAY);
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000800:	2207      	movs	r2, #7
 8000802:	4913      	ldr	r1, [pc, #76]	@ (8000850 <UART6_Task+0x120>)
 8000804:	4813      	ldr	r0, [pc, #76]	@ (8000854 <UART6_Task+0x124>)
 8000806:	f002 fd0f 	bl	8003228 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*)ringBuffer_uart6, strlen((char*)ringBuffer_uart6), HAL_MAX_DELAY);
 800080a:	480f      	ldr	r0, [pc, #60]	@ (8000848 <UART6_Task+0x118>)
 800080c:	f7ff fce8 	bl	80001e0 <strlen>
 8000810:	4603      	mov	r3, r0
 8000812:	b29a      	uxth	r2, r3
 8000814:	f04f 33ff 	mov.w	r3, #4294967295
 8000818:	490b      	ldr	r1, [pc, #44]	@ (8000848 <UART6_Task+0x118>)
 800081a:	480e      	ldr	r0, [pc, #56]	@ (8000854 <UART6_Task+0x124>)
 800081c:	f002 fd04 	bl	8003228 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000820:	f04f 33ff 	mov.w	r3, #4294967295
 8000824:	2202      	movs	r2, #2
 8000826:	490c      	ldr	r1, [pc, #48]	@ (8000858 <UART6_Task+0x128>)
 8000828:	480a      	ldr	r0, [pc, #40]	@ (8000854 <UART6_Task+0x124>)
 800082a:	f002 fcfd 	bl	8003228 <HAL_UART_Transmit>
            osMutexRelease(uart2MutexHandle);
 800082e:	4b07      	ldr	r3, [pc, #28]	@ (800084c <UART6_Task+0x11c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4618      	mov	r0, r3
 8000834:	f004 f8a6 	bl	8004984 <osMutexRelease>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);  // Wait until IDLE detected
 8000838:	e780      	b.n	800073c <UART6_Task+0xc>
 800083a:	bf00      	nop
 800083c:	2000016c 	.word	0x2000016c
 8000840:	2000067a 	.word	0x2000067a
 8000844:	20000378 	.word	0x20000378
 8000848:	20000578 	.word	0x20000578
 800084c:	20000684 	.word	0x20000684
 8000850:	08008aec 	.word	0x08008aec
 8000854:	20000124 	.word	0x20000124
 8000858:	08008ae8 	.word	0x08008ae8

0800085c <__io_putchar>:


#ifdef __GNUC__
#define UART_printf   int __io_putchar(int ch)
UART_printf
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000864:	1d39      	adds	r1, r7, #4
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
 800086a:	2201      	movs	r2, #1
 800086c:	4803      	ldr	r0, [pc, #12]	@ (800087c <__io_putchar+0x20>)
 800086e:	f002 fcdb 	bl	8003228 <HAL_UART_Transmit>
	return ch;
 8000872:	687b      	ldr	r3, [r7, #4]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000124 	.word	0x20000124

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b092      	sub	sp, #72	@ 0x48
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000886:	f000 fd93 	bl	80013b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088a:	f000 f863 	bl	8000954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088e:	f000 f99f 	bl	8000bd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000892:	f000 f975 	bl	8000b80 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000896:	f000 f8f5 	bl	8000a84 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800089a:	f000 f947 	bl	8000b2c <MX_USART6_UART_Init>
  MX_I2C1_Init();
 800089e:	f000 f8c3 	bl	8000a28 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80008a2:	f000 f919 	bl	8000ad8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("sys_Start\n\r");
 80008a6:	4821      	ldr	r0, [pc, #132]	@ (800092c <main+0xac>)
 80008a8:	f007 fa30 	bl	8007d0c <iprintf>
  StartUARTDMAReception();
 80008ac:	f7ff fe68 	bl	8000580 <StartUARTDMAReception>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008b0:	f003 fea0 	bl	80045f4 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  StartMutex();
 80008b4:	f7ff fe8c 	bl	80005d0 <StartMutex>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008b8:	4a1d      	ldr	r2, [pc, #116]	@ (8000930 <main+0xb0>)
 80008ba:	2100      	movs	r1, #0
 80008bc:	481d      	ldr	r0, [pc, #116]	@ (8000934 <main+0xb4>)
 80008be:	f003 fee3 	bl	8004688 <osThreadNew>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4a1c      	ldr	r2, [pc, #112]	@ (8000938 <main+0xb8>)
 80008c6:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */

  osThreadAttr_t uart1Task_attributes = {
 80008c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008cc:	2224      	movs	r2, #36	@ 0x24
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f007 fa70 	bl	8007db6 <memset>
 80008d6:	4b19      	ldr	r3, [pc, #100]	@ (800093c <main+0xbc>)
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80008da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80008e0:	2318      	movs	r3, #24
 80008e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    .name = "uart1Task",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 256 * 4
  };
  uart1TaskHandle = osThreadNew(UART1_Task, NULL, &uart1Task_attributes);
 80008e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e8:	461a      	mov	r2, r3
 80008ea:	2100      	movs	r1, #0
 80008ec:	4814      	ldr	r0, [pc, #80]	@ (8000940 <main+0xc0>)
 80008ee:	f003 fecb 	bl	8004688 <osThreadNew>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4a13      	ldr	r2, [pc, #76]	@ (8000944 <main+0xc4>)
 80008f6:	6013      	str	r3, [r2, #0]

  osThreadAttr_t uart6Task_attributes = {
 80008f8:	463b      	mov	r3, r7
 80008fa:	2224      	movs	r2, #36	@ 0x24
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f007 fa59 	bl	8007db6 <memset>
 8000904:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <main+0xc8>)
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	2318      	movs	r3, #24
 8000910:	61bb      	str	r3, [r7, #24]
    .name = "uart6Task",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 256 * 4
  };
  uart6TaskHandle = osThreadNew(UART6_Task, NULL, &uart6Task_attributes);
 8000912:	463b      	mov	r3, r7
 8000914:	461a      	mov	r2, r3
 8000916:	2100      	movs	r1, #0
 8000918:	480c      	ldr	r0, [pc, #48]	@ (800094c <main+0xcc>)
 800091a:	f003 feb5 	bl	8004688 <osThreadNew>
 800091e:	4603      	mov	r3, r0
 8000920:	4a0b      	ldr	r2, [pc, #44]	@ (8000950 <main+0xd0>)
 8000922:	6013      	str	r3, [r2, #0]
//	});
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000924:	f003 fe8a 	bl	800463c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <main+0xa8>
 800092c:	08008af4 	.word	0x08008af4
 8000930:	08008b30 	.word	0x08008b30
 8000934:	08000c3d 	.word	0x08000c3d
 8000938:	20000274 	.word	0x20000274
 800093c:	08008b00 	.word	0x08008b00
 8000940:	08000605 	.word	0x08000605
 8000944:	2000067c 	.word	0x2000067c
 8000948:	08008b0c 	.word	0x08008b0c
 800094c:	08000731 	.word	0x08000731
 8000950:	20000680 	.word	0x20000680

08000954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b094      	sub	sp, #80	@ 0x50
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	f107 0320 	add.w	r3, r7, #32
 800095e:	2230      	movs	r2, #48	@ 0x30
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f007 fa27 	bl	8007db6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	4b28      	ldr	r3, [pc, #160]	@ (8000a20 <SystemClock_Config+0xcc>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000980:	4a27      	ldr	r2, [pc, #156]	@ (8000a20 <SystemClock_Config+0xcc>)
 8000982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000986:	6413      	str	r3, [r2, #64]	@ 0x40
 8000988:	4b25      	ldr	r3, [pc, #148]	@ (8000a20 <SystemClock_Config+0xcc>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	4b22      	ldr	r3, [pc, #136]	@ (8000a24 <SystemClock_Config+0xd0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009a0:	4a20      	ldr	r2, [pc, #128]	@ (8000a24 <SystemClock_Config+0xd0>)
 80009a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a24 <SystemClock_Config+0xd0>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b4:	2302      	movs	r3, #2
 80009b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b8:	2301      	movs	r3, #1
 80009ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009bc:	2310      	movs	r3, #16
 80009be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c0:	2302      	movs	r3, #2
 80009c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009c4:	2300      	movs	r3, #0
 80009c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009c8:	2308      	movs	r3, #8
 80009ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009cc:	2360      	movs	r3, #96	@ 0x60
 80009ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009d0:	2304      	movs	r3, #4
 80009d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009d4:	2304      	movs	r3, #4
 80009d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d8:	f107 0320 	add.w	r3, r7, #32
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 fcd5 	bl	800238c <HAL_RCC_OscConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009e8:	f000 f942 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ec:	230f      	movs	r3, #15
 80009ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f0:	2302      	movs	r3, #2
 80009f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	2101      	movs	r1, #1
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f001 ff37 	bl	800287c <HAL_RCC_ClockConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a14:	f000 f92c 	bl	8000c70 <Error_Handler>
  }
}
 8000a18:	bf00      	nop
 8000a1a:	3750      	adds	r7, #80	@ 0x50
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40007000 	.word	0x40007000

08000a28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a2e:	4a13      	ldr	r2, [pc, #76]	@ (8000a7c <MX_I2C1_Init+0x54>)
 8000a30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a32:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a34:	4a12      	ldr	r2, [pc, #72]	@ (8000a80 <MX_I2C1_Init+0x58>)
 8000a36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a52:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a58:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	@ (8000a78 <MX_I2C1_Init+0x50>)
 8000a66:	f001 fb4d 	bl	8002104 <HAL_I2C_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a70:	f000 f8fe 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000088 	.word	0x20000088
 8000a7c:	40005400 	.word	0x40005400
 8000a80:	000186a0 	.word	0x000186a0

08000a84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a88:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	@ (8000ad4 <MX_USART1_UART_Init+0x50>)
 8000a8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000a90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aae:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aba:	4805      	ldr	r0, [pc, #20]	@ (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000abc:	f002 fb64 	bl	8003188 <HAL_UART_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ac6:	f000 f8d3 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200000dc 	.word	0x200000dc
 8000ad4:	40011000 	.word	0x40011000

08000ad8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000adc:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	@ (8000b28 <MX_USART2_UART_Init+0x50>)
 8000ae0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000ae4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ae8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <MX_USART2_UART_Init+0x4c>)
 8000b10:	f002 fb3a 	bl	8003188 <HAL_UART_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b1a:	f000 f8a9 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000124 	.word	0x20000124
 8000b28:	40004400 	.word	0x40004400

08000b2c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b30:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <MX_USART6_UART_Init+0x4c>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	@ (8000b7c <MX_USART6_UART_Init+0x50>)
 8000b34:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b36:	4b10      	ldr	r3, [pc, #64]	@ (8000b78 <MX_USART6_UART_Init+0x4c>)
 8000b38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b3c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <MX_USART6_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <MX_USART6_UART_Init+0x4c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <MX_USART6_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <MX_USART6_UART_Init+0x4c>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <MX_USART6_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <MX_USART6_UART_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <MX_USART6_UART_Init+0x4c>)
 8000b64:	f002 fb10 	bl	8003188 <HAL_UART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b6e:	f000 f87f 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2000016c 	.word	0x2000016c
 8000b7c:	40011400 	.word	0x40011400

08000b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <MX_DMA_Init+0x4c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bcc <MX_DMA_Init+0x4c>)
 8000b90:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <MX_DMA_Init+0x4c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2105      	movs	r1, #5
 8000ba6:	2039      	movs	r0, #57	@ 0x39
 8000ba8:	f000 fcfc 	bl	80015a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000bac:	2039      	movs	r0, #57	@ 0x39
 8000bae:	f000 fd15 	bl	80015dc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2105      	movs	r1, #5
 8000bb6:	203a      	movs	r0, #58	@ 0x3a
 8000bb8:	f000 fcf4 	bl	80015a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000bbc:	203a      	movs	r0, #58	@ 0x3a
 8000bbe:	f000 fd0d 	bl	80015dc <HAL_NVIC_EnableIRQ>

}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <MX_GPIO_Init+0x68>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a16      	ldr	r2, [pc, #88]	@ (8000c38 <MX_GPIO_Init+0x68>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <MX_GPIO_Init+0x68>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	4b10      	ldr	r3, [pc, #64]	@ (8000c38 <MX_GPIO_Init+0x68>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a0f      	ldr	r2, [pc, #60]	@ (8000c38 <MX_GPIO_Init+0x68>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <MX_GPIO_Init+0x68>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <MX_GPIO_Init+0x68>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4a08      	ldr	r2, [pc, #32]	@ (8000c38 <MX_GPIO_Init+0x68>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <MX_GPIO_Init+0x68>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800

08000c3c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c44:	2001      	movs	r0, #1
 8000c46:	f003 fdb1 	bl	80047ac <osDelay>
 8000c4a:	e7fb      	b.n	8000c44 <StartDefaultTask+0x8>

08000c4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a04      	ldr	r2, [pc, #16]	@ (8000c6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d101      	bne.n	8000c62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c5e:	f000 fbc9 	bl	80013f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40010000 	.word	0x40010000

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <Error_Handler+0x8>

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <HAL_MspInit+0x54>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8a:	4a11      	ldr	r2, [pc, #68]	@ (8000cd0 <HAL_MspInit+0x54>)
 8000c8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c92:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <HAL_MspInit+0x54>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd0 <HAL_MspInit+0x54>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <HAL_MspInit+0x54>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cae:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <HAL_MspInit+0x54>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	210f      	movs	r1, #15
 8000cbe:	f06f 0001 	mvn.w	r0, #1
 8000cc2:	f000 fc6f 	bl	80015a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	@ 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a19      	ldr	r2, [pc, #100]	@ (8000d58 <HAL_I2C_MspInit+0x84>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d12b      	bne.n	8000d4e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <HAL_I2C_MspInit+0x88>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a17      	ldr	r2, [pc, #92]	@ (8000d5c <HAL_I2C_MspInit+0x88>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <HAL_I2C_MspInit+0x88>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d12:	23c0      	movs	r3, #192	@ 0xc0
 8000d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d16:	2312      	movs	r3, #18
 8000d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d22:	2304      	movs	r3, #4
 8000d24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480c      	ldr	r0, [pc, #48]	@ (8000d60 <HAL_I2C_MspInit+0x8c>)
 8000d2e:	f001 f865 	bl	8001dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <HAL_I2C_MspInit+0x88>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3a:	4a08      	ldr	r2, [pc, #32]	@ (8000d5c <HAL_I2C_MspInit+0x88>)
 8000d3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d42:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <HAL_I2C_MspInit+0x88>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d4e:	bf00      	nop
 8000d50:	3728      	adds	r7, #40	@ 0x28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020400 	.word	0x40020400

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08e      	sub	sp, #56	@ 0x38
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a81      	ldr	r2, [pc, #516]	@ (8000f88 <HAL_UART_MspInit+0x224>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d163      	bne.n	8000e4e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
 8000d8a:	4b80      	ldr	r3, [pc, #512]	@ (8000f8c <HAL_UART_MspInit+0x228>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8e:	4a7f      	ldr	r2, [pc, #508]	@ (8000f8c <HAL_UART_MspInit+0x228>)
 8000d90:	f043 0310 	orr.w	r3, r3, #16
 8000d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d96:	4b7d      	ldr	r3, [pc, #500]	@ (8000f8c <HAL_UART_MspInit+0x228>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9a:	f003 0310 	and.w	r3, r3, #16
 8000d9e:	623b      	str	r3, [r7, #32]
 8000da0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
 8000da6:	4b79      	ldr	r3, [pc, #484]	@ (8000f8c <HAL_UART_MspInit+0x228>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a78      	ldr	r2, [pc, #480]	@ (8000f8c <HAL_UART_MspInit+0x228>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b76      	ldr	r3, [pc, #472]	@ (8000f8c <HAL_UART_MspInit+0x228>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	61fb      	str	r3, [r7, #28]
 8000dbc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dbe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd8:	4619      	mov	r1, r3
 8000dda:	486d      	ldr	r0, [pc, #436]	@ (8000f90 <HAL_UART_MspInit+0x22c>)
 8000ddc:	f001 f80e 	bl	8001dfc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000de0:	4b6c      	ldr	r3, [pc, #432]	@ (8000f94 <HAL_UART_MspInit+0x230>)
 8000de2:	4a6d      	ldr	r2, [pc, #436]	@ (8000f98 <HAL_UART_MspInit+0x234>)
 8000de4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000de6:	4b6b      	ldr	r3, [pc, #428]	@ (8000f94 <HAL_UART_MspInit+0x230>)
 8000de8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000dec:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dee:	4b69      	ldr	r3, [pc, #420]	@ (8000f94 <HAL_UART_MspInit+0x230>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df4:	4b67      	ldr	r3, [pc, #412]	@ (8000f94 <HAL_UART_MspInit+0x230>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dfa:	4b66      	ldr	r3, [pc, #408]	@ (8000f94 <HAL_UART_MspInit+0x230>)
 8000dfc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e00:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e02:	4b64      	ldr	r3, [pc, #400]	@ (8000f94 <HAL_UART_MspInit+0x230>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e08:	4b62      	ldr	r3, [pc, #392]	@ (8000f94 <HAL_UART_MspInit+0x230>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000e0e:	4b61      	ldr	r3, [pc, #388]	@ (8000f94 <HAL_UART_MspInit+0x230>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e14:	4b5f      	ldr	r3, [pc, #380]	@ (8000f94 <HAL_UART_MspInit+0x230>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e1a:	4b5e      	ldr	r3, [pc, #376]	@ (8000f94 <HAL_UART_MspInit+0x230>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e20:	485c      	ldr	r0, [pc, #368]	@ (8000f94 <HAL_UART_MspInit+0x230>)
 8000e22:	f000 fbe9 	bl	80015f8 <HAL_DMA_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000e2c:	f7ff ff20 	bl	8000c70 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a58      	ldr	r2, [pc, #352]	@ (8000f94 <HAL_UART_MspInit+0x230>)
 8000e34:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e36:	4a57      	ldr	r2, [pc, #348]	@ (8000f94 <HAL_UART_MspInit+0x230>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2105      	movs	r1, #5
 8000e40:	2025      	movs	r0, #37	@ 0x25
 8000e42:	f000 fbaf 	bl	80015a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e46:	2025      	movs	r0, #37	@ 0x25
 8000e48:	f000 fbc8 	bl	80015dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000e4c:	e098      	b.n	8000f80 <HAL_UART_MspInit+0x21c>
  else if(huart->Instance==USART2)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a52      	ldr	r2, [pc, #328]	@ (8000f9c <HAL_UART_MspInit+0x238>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d12c      	bne.n	8000eb2 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
 8000e5c:	4b4b      	ldr	r3, [pc, #300]	@ (8000f8c <HAL_UART_MspInit+0x228>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e60:	4a4a      	ldr	r2, [pc, #296]	@ (8000f8c <HAL_UART_MspInit+0x228>)
 8000e62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e68:	4b48      	ldr	r3, [pc, #288]	@ (8000f8c <HAL_UART_MspInit+0x228>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e70:	61bb      	str	r3, [r7, #24]
 8000e72:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	4b44      	ldr	r3, [pc, #272]	@ (8000f8c <HAL_UART_MspInit+0x228>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7c:	4a43      	ldr	r2, [pc, #268]	@ (8000f8c <HAL_UART_MspInit+0x228>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e84:	4b41      	ldr	r3, [pc, #260]	@ (8000f8c <HAL_UART_MspInit+0x228>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e90:	230c      	movs	r3, #12
 8000e92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea0:	2307      	movs	r3, #7
 8000ea2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4839      	ldr	r0, [pc, #228]	@ (8000f90 <HAL_UART_MspInit+0x22c>)
 8000eac:	f000 ffa6 	bl	8001dfc <HAL_GPIO_Init>
}
 8000eb0:	e066      	b.n	8000f80 <HAL_UART_MspInit+0x21c>
  else if(huart->Instance==USART6)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a3a      	ldr	r2, [pc, #232]	@ (8000fa0 <HAL_UART_MspInit+0x23c>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d161      	bne.n	8000f80 <HAL_UART_MspInit+0x21c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	4b32      	ldr	r3, [pc, #200]	@ (8000f8c <HAL_UART_MspInit+0x228>)
 8000ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec4:	4a31      	ldr	r2, [pc, #196]	@ (8000f8c <HAL_UART_MspInit+0x228>)
 8000ec6:	f043 0320 	orr.w	r3, r3, #32
 8000eca:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ecc:	4b2f      	ldr	r3, [pc, #188]	@ (8000f8c <HAL_UART_MspInit+0x228>)
 8000ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed0:	f003 0320 	and.w	r3, r3, #32
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	4b2b      	ldr	r3, [pc, #172]	@ (8000f8c <HAL_UART_MspInit+0x228>)
 8000ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8000f8c <HAL_UART_MspInit+0x228>)
 8000ee2:	f043 0304 	orr.w	r3, r3, #4
 8000ee6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee8:	4b28      	ldr	r3, [pc, #160]	@ (8000f8c <HAL_UART_MspInit+0x228>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ef4:	23c0      	movs	r3, #192	@ 0xc0
 8000ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f04:	2308      	movs	r3, #8
 8000f06:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4825      	ldr	r0, [pc, #148]	@ (8000fa4 <HAL_UART_MspInit+0x240>)
 8000f10:	f000 ff74 	bl	8001dfc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8000f14:	4b24      	ldr	r3, [pc, #144]	@ (8000fa8 <HAL_UART_MspInit+0x244>)
 8000f16:	4a25      	ldr	r2, [pc, #148]	@ (8000fac <HAL_UART_MspInit+0x248>)
 8000f18:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8000f1a:	4b23      	ldr	r3, [pc, #140]	@ (8000fa8 <HAL_UART_MspInit+0x244>)
 8000f1c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8000f20:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f22:	4b21      	ldr	r3, [pc, #132]	@ (8000fa8 <HAL_UART_MspInit+0x244>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f28:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa8 <HAL_UART_MspInit+0x244>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa8 <HAL_UART_MspInit+0x244>)
 8000f30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f34:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f36:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa8 <HAL_UART_MspInit+0x244>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <HAL_UART_MspInit+0x244>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8000f42:	4b19      	ldr	r3, [pc, #100]	@ (8000fa8 <HAL_UART_MspInit+0x244>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f48:	4b17      	ldr	r3, [pc, #92]	@ (8000fa8 <HAL_UART_MspInit+0x244>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f4e:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <HAL_UART_MspInit+0x244>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8000f54:	4814      	ldr	r0, [pc, #80]	@ (8000fa8 <HAL_UART_MspInit+0x244>)
 8000f56:	f000 fb4f 	bl	80015f8 <HAL_DMA_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <HAL_UART_MspInit+0x200>
      Error_Handler();
 8000f60:	f7ff fe86 	bl	8000c70 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a10      	ldr	r2, [pc, #64]	@ (8000fa8 <HAL_UART_MspInit+0x244>)
 8000f68:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa8 <HAL_UART_MspInit+0x244>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2105      	movs	r1, #5
 8000f74:	2047      	movs	r0, #71	@ 0x47
 8000f76:	f000 fb15 	bl	80015a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000f7a:	2047      	movs	r0, #71	@ 0x47
 8000f7c:	f000 fb2e 	bl	80015dc <HAL_NVIC_EnableIRQ>
}
 8000f80:	bf00      	nop
 8000f82:	3738      	adds	r7, #56	@ 0x38
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40011000 	.word	0x40011000
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020000 	.word	0x40020000
 8000f94:	200001b4 	.word	0x200001b4
 8000f98:	40026440 	.word	0x40026440
 8000f9c:	40004400 	.word	0x40004400
 8000fa0:	40011400 	.word	0x40011400
 8000fa4:	40020800 	.word	0x40020800
 8000fa8:	20000214 	.word	0x20000214
 8000fac:	40026428 	.word	0x40026428

08000fb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08c      	sub	sp, #48	@ 0x30
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	4b2e      	ldr	r3, [pc, #184]	@ (8001080 <HAL_InitTick+0xd0>)
 8000fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc8:	4a2d      	ldr	r2, [pc, #180]	@ (8001080 <HAL_InitTick+0xd0>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fd0:	4b2b      	ldr	r3, [pc, #172]	@ (8001080 <HAL_InitTick+0xd0>)
 8000fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fdc:	f107 020c 	add.w	r2, r7, #12
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 fe28 	bl	8002c3c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000fec:	f001 fe12 	bl	8002c14 <HAL_RCC_GetPCLK2Freq>
 8000ff0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ff4:	4a23      	ldr	r2, [pc, #140]	@ (8001084 <HAL_InitTick+0xd4>)
 8000ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffa:	0c9b      	lsrs	r3, r3, #18
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001000:	4b21      	ldr	r3, [pc, #132]	@ (8001088 <HAL_InitTick+0xd8>)
 8001002:	4a22      	ldr	r2, [pc, #136]	@ (800108c <HAL_InitTick+0xdc>)
 8001004:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001006:	4b20      	ldr	r3, [pc, #128]	@ (8001088 <HAL_InitTick+0xd8>)
 8001008:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800100c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800100e:	4a1e      	ldr	r2, [pc, #120]	@ (8001088 <HAL_InitTick+0xd8>)
 8001010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001012:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001014:	4b1c      	ldr	r3, [pc, #112]	@ (8001088 <HAL_InitTick+0xd8>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101a:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <HAL_InitTick+0xd8>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001020:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <HAL_InitTick+0xd8>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001026:	4818      	ldr	r0, [pc, #96]	@ (8001088 <HAL_InitTick+0xd8>)
 8001028:	f001 fe3a 	bl	8002ca0 <HAL_TIM_Base_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001032:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001036:	2b00      	cmp	r3, #0
 8001038:	d11b      	bne.n	8001072 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800103a:	4813      	ldr	r0, [pc, #76]	@ (8001088 <HAL_InitTick+0xd8>)
 800103c:	f001 fe8a 	bl	8002d54 <HAL_TIM_Base_Start_IT>
 8001040:	4603      	mov	r3, r0
 8001042:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001046:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800104a:	2b00      	cmp	r3, #0
 800104c:	d111      	bne.n	8001072 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800104e:	2019      	movs	r0, #25
 8001050:	f000 fac4 	bl	80015dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b0f      	cmp	r3, #15
 8001058:	d808      	bhi.n	800106c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800105a:	2200      	movs	r2, #0
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	2019      	movs	r0, #25
 8001060:	f000 faa0 	bl	80015a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001064:	4a0a      	ldr	r2, [pc, #40]	@ (8001090 <HAL_InitTick+0xe0>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	e002      	b.n	8001072 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001072:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001076:	4618      	mov	r0, r3
 8001078:	3730      	adds	r7, #48	@ 0x30
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	431bde83 	.word	0x431bde83
 8001088:	20000688 	.word	0x20000688
 800108c:	40010000 	.word	0x40010000
 8001090:	20000004 	.word	0x20000004

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <NMI_Handler+0x4>

0800109c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <HardFault_Handler+0x4>

080010a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <MemManage_Handler+0x4>

080010ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <BusFault_Handler+0x4>

080010b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <UsageFault_Handler+0x4>

080010bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010d0:	4802      	ldr	r0, [pc, #8]	@ (80010dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010d2:	f001 fea1 	bl	8002e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000688 	.word	0x20000688

080010e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010e6:	4818      	ldr	r0, [pc, #96]	@ (8001148 <USART1_IRQHandler+0x68>)
 80010e8:	f002 f94e 	bl	8003388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 80010ec:	4b16      	ldr	r3, [pc, #88]	@ (8001148 <USART1_IRQHandler+0x68>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	2b10      	cmp	r3, #16
 80010f8:	d11e      	bne.n	8001138 <USART1_IRQHandler+0x58>
  {
	  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80010fa:	2300      	movs	r3, #0
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <USART1_IRQHandler+0x68>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <USART1_IRQHandler+0x68>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	683b      	ldr	r3, [r7, #0]

	  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001110:	2300      	movs	r3, #0
 8001112:	607b      	str	r3, [r7, #4]
	  vTaskNotifyGiveFromISR(uart1TaskHandle, &xHigherPriorityTaskWoken);
 8001114:	4b0d      	ldr	r3, [pc, #52]	@ (800114c <USART1_IRQHandler+0x6c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	1d3a      	adds	r2, r7, #4
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f005 fcaf 	bl	8006a80 <vTaskNotifyGiveFromISR>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d007      	beq.n	8001138 <USART1_IRQHandler+0x58>
 8001128:	4b09      	ldr	r3, [pc, #36]	@ (8001150 <USART1_IRQHandler+0x70>)
 800112a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	f3bf 8f4f 	dsb	sy
 8001134:	f3bf 8f6f 	isb	sy
  }

  HAL_UART_IRQHandler(&huart1);
 8001138:	4803      	ldr	r0, [pc, #12]	@ (8001148 <USART1_IRQHandler+0x68>)
 800113a:	f002 f925 	bl	8003388 <HAL_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200000dc 	.word	0x200000dc
 800114c:	2000067c 	.word	0x2000067c
 8001150:	e000ed04 	.word	0xe000ed04

08001154 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001158:	4802      	ldr	r0, [pc, #8]	@ (8001164 <DMA2_Stream1_IRQHandler+0x10>)
 800115a:	f000 fbe5 	bl	8001928 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000214 	.word	0x20000214

08001168 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800116c:	4802      	ldr	r0, [pc, #8]	@ (8001178 <DMA2_Stream2_IRQHandler+0x10>)
 800116e:	f000 fbdb 	bl	8001928 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200001b4 	.word	0x200001b4

0800117c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001182:	4818      	ldr	r0, [pc, #96]	@ (80011e4 <USART6_IRQHandler+0x68>)
 8001184:	f002 f900 	bl	8003388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE))
 8001188:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <USART6_IRQHandler+0x68>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	2b10      	cmp	r3, #16
 8001194:	d11e      	bne.n	80011d4 <USART6_IRQHandler+0x58>
  {
	  __HAL_UART_CLEAR_IDLEFLAG(&huart6);
 8001196:	2300      	movs	r3, #0
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <USART6_IRQHandler+0x68>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	603b      	str	r3, [r7, #0]
 80011a2:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <USART6_IRQHandler+0x68>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	683b      	ldr	r3, [r7, #0]

	  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	607b      	str	r3, [r7, #4]
	  vTaskNotifyGiveFromISR(uart6TaskHandle, &xHigherPriorityTaskWoken);
 80011b0:	4b0d      	ldr	r3, [pc, #52]	@ (80011e8 <USART6_IRQHandler+0x6c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	1d3a      	adds	r2, r7, #4
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f005 fc61 	bl	8006a80 <vTaskNotifyGiveFromISR>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d007      	beq.n	80011d4 <USART6_IRQHandler+0x58>
 80011c4:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <USART6_IRQHandler+0x70>)
 80011c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	f3bf 8f4f 	dsb	sy
 80011d0:	f3bf 8f6f 	isb	sy
  }

  HAL_UART_IRQHandler(&huart6);
 80011d4:	4803      	ldr	r0, [pc, #12]	@ (80011e4 <USART6_IRQHandler+0x68>)
 80011d6:	f002 f8d7 	bl	8003388 <HAL_UART_IRQHandler>
  /* USER CODE END USART6_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000016c 	.word	0x2000016c
 80011e8:	20000680 	.word	0x20000680
 80011ec:	e000ed04 	.word	0xe000ed04

080011f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	e00a      	b.n	8001218 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001202:	f3af 8000 	nop.w
 8001206:	4601      	mov	r1, r0
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	1c5a      	adds	r2, r3, #1
 800120c:	60ba      	str	r2, [r7, #8]
 800120e:	b2ca      	uxtb	r2, r1
 8001210:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	3301      	adds	r3, #1
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	429a      	cmp	r2, r3
 800121e:	dbf0      	blt.n	8001202 <_read+0x12>
  }

  return len;
 8001220:	687b      	ldr	r3, [r7, #4]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	60f8      	str	r0, [r7, #12]
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	e009      	b.n	8001250 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	60ba      	str	r2, [r7, #8]
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fb09 	bl	800085c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	3301      	adds	r3, #1
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	429a      	cmp	r2, r3
 8001256:	dbf1      	blt.n	800123c <_write+0x12>
  }
  return len;
 8001258:	687b      	ldr	r3, [r7, #4]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <_close>:

int _close(int file)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800126a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800128a:	605a      	str	r2, [r3, #4]
  return 0;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <_isatty>:

int _isatty(int file)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012a2:	2301      	movs	r3, #1
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d4:	4a14      	ldr	r2, [pc, #80]	@ (8001328 <_sbrk+0x5c>)
 80012d6:	4b15      	ldr	r3, [pc, #84]	@ (800132c <_sbrk+0x60>)
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e0:	4b13      	ldr	r3, [pc, #76]	@ (8001330 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e8:	4b11      	ldr	r3, [pc, #68]	@ (8001330 <_sbrk+0x64>)
 80012ea:	4a12      	ldr	r2, [pc, #72]	@ (8001334 <_sbrk+0x68>)
 80012ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ee:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <_sbrk+0x64>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d207      	bcs.n	800130c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012fc:	f006 fe00 	bl	8007f00 <__errno>
 8001300:	4603      	mov	r3, r0
 8001302:	220c      	movs	r2, #12
 8001304:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
 800130a:	e009      	b.n	8001320 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800130c:	4b08      	ldr	r3, [pc, #32]	@ (8001330 <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001312:	4b07      	ldr	r3, [pc, #28]	@ (8001330 <_sbrk+0x64>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	4a05      	ldr	r2, [pc, #20]	@ (8001330 <_sbrk+0x64>)
 800131c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20018000 	.word	0x20018000
 800132c:	00000400 	.word	0x00000400
 8001330:	200006d0 	.word	0x200006d0
 8001334:	20005210 	.word	0x20005210

08001338 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <SystemInit+0x20>)
 800133e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001342:	4a05      	ldr	r2, [pc, #20]	@ (8001358 <SystemInit+0x20>)
 8001344:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001348:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800135c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001394 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001360:	f7ff ffea 	bl	8001338 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001364:	480c      	ldr	r0, [pc, #48]	@ (8001398 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001366:	490d      	ldr	r1, [pc, #52]	@ (800139c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001368:	4a0d      	ldr	r2, [pc, #52]	@ (80013a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800136c:	e002      	b.n	8001374 <LoopCopyDataInit>

0800136e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001372:	3304      	adds	r3, #4

08001374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001378:	d3f9      	bcc.n	800136e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137a:	4a0a      	ldr	r2, [pc, #40]	@ (80013a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800137c:	4c0a      	ldr	r4, [pc, #40]	@ (80013a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001380:	e001      	b.n	8001386 <LoopFillZerobss>

08001382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001384:	3204      	adds	r2, #4

08001386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001388:	d3fb      	bcc.n	8001382 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800138a:	f006 fdbf 	bl	8007f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138e:	f7ff fa77 	bl	8000880 <main>
  bx  lr    
 8001392:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001394:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800139c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80013a0:	08008bb8 	.word	0x08008bb8
  ldr r2, =_sbss
 80013a4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80013a8:	2000520c 	.word	0x2000520c

080013ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC_IRQHandler>
	...

080013b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b4:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <HAL_Init+0x40>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0d      	ldr	r2, [pc, #52]	@ (80013f0 <HAL_Init+0x40>)
 80013ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c0:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <HAL_Init+0x40>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <HAL_Init+0x40>)
 80013c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013cc:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <HAL_Init+0x40>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a07      	ldr	r2, [pc, #28]	@ (80013f0 <HAL_Init+0x40>)
 80013d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d8:	2003      	movs	r0, #3
 80013da:	f000 f8d8 	bl	800158e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013de:	200f      	movs	r0, #15
 80013e0:	f7ff fde6 	bl	8000fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e4:	f7ff fc4a 	bl	8000c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023c00 	.word	0x40023c00

080013f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f8:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <HAL_IncTick+0x20>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <HAL_IncTick+0x24>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4413      	add	r3, r2
 8001404:	4a04      	ldr	r2, [pc, #16]	@ (8001418 <HAL_IncTick+0x24>)
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000008 	.word	0x20000008
 8001418:	200006d4 	.word	0x200006d4

0800141c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;
 8001420:	4b03      	ldr	r3, [pc, #12]	@ (8001430 <HAL_GetTick+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	200006d4 	.word	0x200006d4

08001434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001444:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <__NVIC_SetPriorityGrouping+0x44>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001450:	4013      	ands	r3, r2
 8001452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800145c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001466:	4a04      	ldr	r2, [pc, #16]	@ (8001478 <__NVIC_SetPriorityGrouping+0x44>)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	60d3      	str	r3, [r2, #12]
}
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001480:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <__NVIC_GetPriorityGrouping+0x18>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	f003 0307 	and.w	r3, r3, #7
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	db0b      	blt.n	80014c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	f003 021f 	and.w	r2, r3, #31
 80014b0:	4907      	ldr	r1, [pc, #28]	@ (80014d0 <__NVIC_EnableIRQ+0x38>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	095b      	lsrs	r3, r3, #5
 80014b8:	2001      	movs	r0, #1
 80014ba:	fa00 f202 	lsl.w	r2, r0, r2
 80014be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000e100 	.word	0xe000e100

080014d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	db0a      	blt.n	80014fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	490c      	ldr	r1, [pc, #48]	@ (8001520 <__NVIC_SetPriority+0x4c>)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	0112      	lsls	r2, r2, #4
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	440b      	add	r3, r1
 80014f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014fc:	e00a      	b.n	8001514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4908      	ldr	r1, [pc, #32]	@ (8001524 <__NVIC_SetPriority+0x50>)
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	3b04      	subs	r3, #4
 800150c:	0112      	lsls	r2, r2, #4
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	440b      	add	r3, r1
 8001512:	761a      	strb	r2, [r3, #24]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000e100 	.word	0xe000e100
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001528:	b480      	push	{r7}
 800152a:	b089      	sub	sp, #36	@ 0x24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f1c3 0307 	rsb	r3, r3, #7
 8001542:	2b04      	cmp	r3, #4
 8001544:	bf28      	it	cs
 8001546:	2304      	movcs	r3, #4
 8001548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3304      	adds	r3, #4
 800154e:	2b06      	cmp	r3, #6
 8001550:	d902      	bls.n	8001558 <NVIC_EncodePriority+0x30>
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3b03      	subs	r3, #3
 8001556:	e000      	b.n	800155a <NVIC_EncodePriority+0x32>
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	f04f 32ff 	mov.w	r2, #4294967295
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43da      	mvns	r2, r3
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	401a      	ands	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001570:	f04f 31ff 	mov.w	r1, #4294967295
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	fa01 f303 	lsl.w	r3, r1, r3
 800157a:	43d9      	mvns	r1, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	4313      	orrs	r3, r2
         );
}
 8001582:	4618      	mov	r0, r3
 8001584:	3724      	adds	r7, #36	@ 0x24
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ff4c 	bl	8001434 <__NVIC_SetPriorityGrouping>
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b6:	f7ff ff61 	bl	800147c <__NVIC_GetPriorityGrouping>
 80015ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	68b9      	ldr	r1, [r7, #8]
 80015c0:	6978      	ldr	r0, [r7, #20]
 80015c2:	f7ff ffb1 	bl	8001528 <NVIC_EncodePriority>
 80015c6:	4602      	mov	r2, r0
 80015c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015cc:	4611      	mov	r1, r2
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ff80 	bl	80014d4 <__NVIC_SetPriority>
}
 80015d4:	bf00      	nop
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ff54 	bl	8001498 <__NVIC_EnableIRQ>
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff ff0a 	bl	800141c <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e099      	b.n	8001748 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2202      	movs	r2, #2
 8001618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001634:	e00f      	b.n	8001656 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001636:	f7ff fef1 	bl	800141c <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b05      	cmp	r3, #5
 8001642:	d908      	bls.n	8001656 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2220      	movs	r2, #32
 8001648:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2203      	movs	r2, #3
 800164e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e078      	b.n	8001748 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1e8      	bne.n	8001636 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	4b38      	ldr	r3, [pc, #224]	@ (8001750 <HAL_DMA_Init+0x158>)
 8001670:	4013      	ands	r3, r2
 8001672:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001682:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800168e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800169a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d107      	bne.n	80016c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b8:	4313      	orrs	r3, r2
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4313      	orrs	r3, r2
 80016be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f023 0307 	bic.w	r3, r3, #7
 80016d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	4313      	orrs	r3, r2
 80016e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d117      	bne.n	800171a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00e      	beq.n	800171a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 fb01 	bl	8001d04 <DMA_CheckFifoParam>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d008      	beq.n	800171a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2240      	movs	r2, #64	@ 0x40
 800170c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001716:	2301      	movs	r3, #1
 8001718:	e016      	b.n	8001748 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 fab8 	bl	8001c98 <DMA_CalcBaseAndBitshift>
 8001728:	4603      	mov	r3, r0
 800172a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001730:	223f      	movs	r2, #63	@ 0x3f
 8001732:	409a      	lsls	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	f010803f 	.word	0xf010803f

08001754 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_DMA_Start_IT+0x26>
 8001776:	2302      	movs	r3, #2
 8001778:	e040      	b.n	80017fc <HAL_DMA_Start_IT+0xa8>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b01      	cmp	r3, #1
 800178c:	d12f      	bne.n	80017ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2202      	movs	r2, #2
 8001792:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2200      	movs	r2, #0
 800179a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	68b9      	ldr	r1, [r7, #8]
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 fa4a 	bl	8001c3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ac:	223f      	movs	r2, #63	@ 0x3f
 80017ae:	409a      	lsls	r2, r3
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0216 	orr.w	r2, r2, #22
 80017c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d007      	beq.n	80017dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 0208 	orr.w	r2, r2, #8
 80017da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0201 	orr.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	e005      	b.n	80017fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80017f6:	2302      	movs	r3, #2
 80017f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001810:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001812:	f7ff fe03 	bl	800141c <HAL_GetTick>
 8001816:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d008      	beq.n	8001836 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2280      	movs	r2, #128	@ 0x80
 8001828:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e052      	b.n	80018dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0216 	bic.w	r2, r2, #22
 8001844:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695a      	ldr	r2, [r3, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001854:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	2b00      	cmp	r3, #0
 800185c:	d103      	bne.n	8001866 <HAL_DMA_Abort+0x62>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001862:	2b00      	cmp	r3, #0
 8001864:	d007      	beq.n	8001876 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0208 	bic.w	r2, r2, #8
 8001874:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0201 	bic.w	r2, r2, #1
 8001884:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001886:	e013      	b.n	80018b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001888:	f7ff fdc8 	bl	800141c <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b05      	cmp	r3, #5
 8001894:	d90c      	bls.n	80018b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2220      	movs	r2, #32
 800189a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2203      	movs	r2, #3
 80018a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e015      	b.n	80018dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1e4      	bne.n	8001888 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c2:	223f      	movs	r2, #63	@ 0x3f
 80018c4:	409a      	lsls	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d004      	beq.n	8001902 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2280      	movs	r2, #128	@ 0x80
 80018fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e00c      	b.n	800191c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2205      	movs	r2, #5
 8001906:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0201 	bic.w	r2, r2, #1
 8001918:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001934:	4b8e      	ldr	r3, [pc, #568]	@ (8001b70 <HAL_DMA_IRQHandler+0x248>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a8e      	ldr	r2, [pc, #568]	@ (8001b74 <HAL_DMA_IRQHandler+0x24c>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	0a9b      	lsrs	r3, r3, #10
 8001940:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001946:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001952:	2208      	movs	r2, #8
 8001954:	409a      	lsls	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4013      	ands	r3, r2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d01a      	beq.n	8001994 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d013      	beq.n	8001994 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 0204 	bic.w	r2, r2, #4
 800197a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001980:	2208      	movs	r2, #8
 8001982:	409a      	lsls	r2, r3
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800198c:	f043 0201 	orr.w	r2, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001998:	2201      	movs	r2, #1
 800199a:	409a      	lsls	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4013      	ands	r3, r2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d012      	beq.n	80019ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00b      	beq.n	80019ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b6:	2201      	movs	r2, #1
 80019b8:	409a      	lsls	r2, r3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c2:	f043 0202 	orr.w	r2, r3, #2
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ce:	2204      	movs	r2, #4
 80019d0:	409a      	lsls	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d012      	beq.n	8001a00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00b      	beq.n	8001a00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ec:	2204      	movs	r2, #4
 80019ee:	409a      	lsls	r2, r3
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f8:	f043 0204 	orr.w	r2, r3, #4
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a04:	2210      	movs	r2, #16
 8001a06:	409a      	lsls	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d043      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d03c      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a22:	2210      	movs	r2, #16
 8001a24:	409a      	lsls	r2, r3
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d018      	beq.n	8001a6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d108      	bne.n	8001a58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d024      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	4798      	blx	r3
 8001a56:	e01f      	b.n	8001a98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d01b      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	4798      	blx	r3
 8001a68:	e016      	b.n	8001a98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d107      	bne.n	8001a88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0208 	bic.w	r2, r2, #8
 8001a86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a9c:	2220      	movs	r2, #32
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 808f 	beq.w	8001bc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0310 	and.w	r3, r3, #16
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 8087 	beq.w	8001bc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001abe:	2220      	movs	r2, #32
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b05      	cmp	r3, #5
 8001ad0:	d136      	bne.n	8001b40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0216 	bic.w	r2, r2, #22
 8001ae0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	695a      	ldr	r2, [r3, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001af0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d103      	bne.n	8001b02 <HAL_DMA_IRQHandler+0x1da>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d007      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0208 	bic.w	r2, r2, #8
 8001b10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b16:	223f      	movs	r2, #63	@ 0x3f
 8001b18:	409a      	lsls	r2, r3
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d07e      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	4798      	blx	r3
        }
        return;
 8001b3e:	e079      	b.n	8001c34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d01d      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10d      	bne.n	8001b78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d031      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	4798      	blx	r3
 8001b6c:	e02c      	b.n	8001bc8 <HAL_DMA_IRQHandler+0x2a0>
 8001b6e:	bf00      	nop
 8001b70:	20000000 	.word	0x20000000
 8001b74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d023      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	4798      	blx	r3
 8001b88:	e01e      	b.n	8001bc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10f      	bne.n	8001bb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0210 	bic.w	r2, r2, #16
 8001ba6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d032      	beq.n	8001c36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d022      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2205      	movs	r2, #5
 8001be0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0201 	bic.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d307      	bcc.n	8001c10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f2      	bne.n	8001bf4 <HAL_DMA_IRQHandler+0x2cc>
 8001c0e:	e000      	b.n	8001c12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	4798      	blx	r3
 8001c32:	e000      	b.n	8001c36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c34:	bf00      	nop
    }
  }
}
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001c58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2b40      	cmp	r3, #64	@ 0x40
 8001c68:	d108      	bne.n	8001c7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c7a:	e007      	b.n	8001c8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	60da      	str	r2, [r3, #12]
}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	3b10      	subs	r3, #16
 8001ca8:	4a14      	ldr	r2, [pc, #80]	@ (8001cfc <DMA_CalcBaseAndBitshift+0x64>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cb2:	4a13      	ldr	r2, [pc, #76]	@ (8001d00 <DMA_CalcBaseAndBitshift+0x68>)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d909      	bls.n	8001cda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001cce:	f023 0303 	bic.w	r3, r3, #3
 8001cd2:	1d1a      	adds	r2, r3, #4
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	659a      	str	r2, [r3, #88]	@ 0x58
 8001cd8:	e007      	b.n	8001cea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ce2:	f023 0303 	bic.w	r3, r3, #3
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	aaaaaaab 	.word	0xaaaaaaab
 8001d00:	08008b6c 	.word	0x08008b6c

08001d04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d11f      	bne.n	8001d5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d856      	bhi.n	8001dd2 <DMA_CheckFifoParam+0xce>
 8001d24:	a201      	add	r2, pc, #4	@ (adr r2, 8001d2c <DMA_CheckFifoParam+0x28>)
 8001d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2a:	bf00      	nop
 8001d2c:	08001d3d 	.word	0x08001d3d
 8001d30:	08001d4f 	.word	0x08001d4f
 8001d34:	08001d3d 	.word	0x08001d3d
 8001d38:	08001dd3 	.word	0x08001dd3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d046      	beq.n	8001dd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d4c:	e043      	b.n	8001dd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d56:	d140      	bne.n	8001dda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d5c:	e03d      	b.n	8001dda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d66:	d121      	bne.n	8001dac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d837      	bhi.n	8001dde <DMA_CheckFifoParam+0xda>
 8001d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d74 <DMA_CheckFifoParam+0x70>)
 8001d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d74:	08001d85 	.word	0x08001d85
 8001d78:	08001d8b 	.word	0x08001d8b
 8001d7c:	08001d85 	.word	0x08001d85
 8001d80:	08001d9d 	.word	0x08001d9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
      break;
 8001d88:	e030      	b.n	8001dec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d025      	beq.n	8001de2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d9a:	e022      	b.n	8001de2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001da4:	d11f      	bne.n	8001de6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001daa:	e01c      	b.n	8001de6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d903      	bls.n	8001dba <DMA_CheckFifoParam+0xb6>
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	d003      	beq.n	8001dc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001db8:	e018      	b.n	8001dec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	73fb      	strb	r3, [r7, #15]
      break;
 8001dbe:	e015      	b.n	8001dec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00e      	beq.n	8001dea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
      break;
 8001dd0:	e00b      	b.n	8001dea <DMA_CheckFifoParam+0xe6>
      break;
 8001dd2:	bf00      	nop
 8001dd4:	e00a      	b.n	8001dec <DMA_CheckFifoParam+0xe8>
      break;
 8001dd6:	bf00      	nop
 8001dd8:	e008      	b.n	8001dec <DMA_CheckFifoParam+0xe8>
      break;
 8001dda:	bf00      	nop
 8001ddc:	e006      	b.n	8001dec <DMA_CheckFifoParam+0xe8>
      break;
 8001dde:	bf00      	nop
 8001de0:	e004      	b.n	8001dec <DMA_CheckFifoParam+0xe8>
      break;
 8001de2:	bf00      	nop
 8001de4:	e002      	b.n	8001dec <DMA_CheckFifoParam+0xe8>
      break;   
 8001de6:	bf00      	nop
 8001de8:	e000      	b.n	8001dec <DMA_CheckFifoParam+0xe8>
      break;
 8001dea:	bf00      	nop
    }
  } 
  
  return status; 
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop

08001dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	@ 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
 8001e16:	e159      	b.n	80020cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e18:	2201      	movs	r2, #1
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	f040 8148 	bne.w	80020c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d005      	beq.n	8001e4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d130      	bne.n	8001eb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	2203      	movs	r2, #3
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e84:	2201      	movs	r2, #1
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	f003 0201 	and.w	r2, r3, #1
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d017      	beq.n	8001eec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d123      	bne.n	8001f40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	08da      	lsrs	r2, r3, #3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3208      	adds	r2, #8
 8001f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	220f      	movs	r2, #15
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	08da      	lsrs	r2, r3, #3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3208      	adds	r2, #8
 8001f3a:	69b9      	ldr	r1, [r7, #24]
 8001f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0203 	and.w	r2, r3, #3
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 80a2 	beq.w	80020c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	4b57      	ldr	r3, [pc, #348]	@ (80020e4 <HAL_GPIO_Init+0x2e8>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	4a56      	ldr	r2, [pc, #344]	@ (80020e4 <HAL_GPIO_Init+0x2e8>)
 8001f8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f92:	4b54      	ldr	r3, [pc, #336]	@ (80020e4 <HAL_GPIO_Init+0x2e8>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f9e:	4a52      	ldr	r2, [pc, #328]	@ (80020e8 <HAL_GPIO_Init+0x2ec>)
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	089b      	lsrs	r3, r3, #2
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	220f      	movs	r2, #15
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a49      	ldr	r2, [pc, #292]	@ (80020ec <HAL_GPIO_Init+0x2f0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d019      	beq.n	8001ffe <HAL_GPIO_Init+0x202>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a48      	ldr	r2, [pc, #288]	@ (80020f0 <HAL_GPIO_Init+0x2f4>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d013      	beq.n	8001ffa <HAL_GPIO_Init+0x1fe>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a47      	ldr	r2, [pc, #284]	@ (80020f4 <HAL_GPIO_Init+0x2f8>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00d      	beq.n	8001ff6 <HAL_GPIO_Init+0x1fa>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a46      	ldr	r2, [pc, #280]	@ (80020f8 <HAL_GPIO_Init+0x2fc>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d007      	beq.n	8001ff2 <HAL_GPIO_Init+0x1f6>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a45      	ldr	r2, [pc, #276]	@ (80020fc <HAL_GPIO_Init+0x300>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d101      	bne.n	8001fee <HAL_GPIO_Init+0x1f2>
 8001fea:	2304      	movs	r3, #4
 8001fec:	e008      	b.n	8002000 <HAL_GPIO_Init+0x204>
 8001fee:	2307      	movs	r3, #7
 8001ff0:	e006      	b.n	8002000 <HAL_GPIO_Init+0x204>
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e004      	b.n	8002000 <HAL_GPIO_Init+0x204>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e002      	b.n	8002000 <HAL_GPIO_Init+0x204>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_GPIO_Init+0x204>
 8001ffe:	2300      	movs	r3, #0
 8002000:	69fa      	ldr	r2, [r7, #28]
 8002002:	f002 0203 	and.w	r2, r2, #3
 8002006:	0092      	lsls	r2, r2, #2
 8002008:	4093      	lsls	r3, r2
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002010:	4935      	ldr	r1, [pc, #212]	@ (80020e8 <HAL_GPIO_Init+0x2ec>)
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	3302      	adds	r3, #2
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800201e:	4b38      	ldr	r3, [pc, #224]	@ (8002100 <HAL_GPIO_Init+0x304>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002042:	4a2f      	ldr	r2, [pc, #188]	@ (8002100 <HAL_GPIO_Init+0x304>)
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002048:	4b2d      	ldr	r3, [pc, #180]	@ (8002100 <HAL_GPIO_Init+0x304>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800206c:	4a24      	ldr	r2, [pc, #144]	@ (8002100 <HAL_GPIO_Init+0x304>)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002072:	4b23      	ldr	r3, [pc, #140]	@ (8002100 <HAL_GPIO_Init+0x304>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002096:	4a1a      	ldr	r2, [pc, #104]	@ (8002100 <HAL_GPIO_Init+0x304>)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800209c:	4b18      	ldr	r3, [pc, #96]	@ (8002100 <HAL_GPIO_Init+0x304>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020c0:	4a0f      	ldr	r2, [pc, #60]	@ (8002100 <HAL_GPIO_Init+0x304>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3301      	adds	r3, #1
 80020ca:	61fb      	str	r3, [r7, #28]
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	2b0f      	cmp	r3, #15
 80020d0:	f67f aea2 	bls.w	8001e18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	3724      	adds	r7, #36	@ 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40013800 	.word	0x40013800
 80020ec:	40020000 	.word	0x40020000
 80020f0:	40020400 	.word	0x40020400
 80020f4:	40020800 	.word	0x40020800
 80020f8:	40020c00 	.word	0x40020c00
 80020fc:	40021000 	.word	0x40021000
 8002100:	40013c00 	.word	0x40013c00

08002104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e12b      	b.n	800236e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe fdd2 	bl	8000cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2224      	movs	r2, #36	@ 0x24
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002168:	f000 fd40 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 800216c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	4a81      	ldr	r2, [pc, #516]	@ (8002378 <HAL_I2C_Init+0x274>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d807      	bhi.n	8002188 <HAL_I2C_Init+0x84>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4a80      	ldr	r2, [pc, #512]	@ (800237c <HAL_I2C_Init+0x278>)
 800217c:	4293      	cmp	r3, r2
 800217e:	bf94      	ite	ls
 8002180:	2301      	movls	r3, #1
 8002182:	2300      	movhi	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	e006      	b.n	8002196 <HAL_I2C_Init+0x92>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4a7d      	ldr	r2, [pc, #500]	@ (8002380 <HAL_I2C_Init+0x27c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	bf94      	ite	ls
 8002190:	2301      	movls	r3, #1
 8002192:	2300      	movhi	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e0e7      	b.n	800236e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4a78      	ldr	r2, [pc, #480]	@ (8002384 <HAL_I2C_Init+0x280>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	0c9b      	lsrs	r3, r3, #18
 80021a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4a6a      	ldr	r2, [pc, #424]	@ (8002378 <HAL_I2C_Init+0x274>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d802      	bhi.n	80021d8 <HAL_I2C_Init+0xd4>
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	3301      	adds	r3, #1
 80021d6:	e009      	b.n	80021ec <HAL_I2C_Init+0xe8>
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80021de:	fb02 f303 	mul.w	r3, r2, r3
 80021e2:	4a69      	ldr	r2, [pc, #420]	@ (8002388 <HAL_I2C_Init+0x284>)
 80021e4:	fba2 2303 	umull	r2, r3, r2, r3
 80021e8:	099b      	lsrs	r3, r3, #6
 80021ea:	3301      	adds	r3, #1
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	430b      	orrs	r3, r1
 80021f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80021fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	495c      	ldr	r1, [pc, #368]	@ (8002378 <HAL_I2C_Init+0x274>)
 8002208:	428b      	cmp	r3, r1
 800220a:	d819      	bhi.n	8002240 <HAL_I2C_Init+0x13c>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	1e59      	subs	r1, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	fbb1 f3f3 	udiv	r3, r1, r3
 800221a:	1c59      	adds	r1, r3, #1
 800221c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002220:	400b      	ands	r3, r1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_I2C_Init+0x138>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1e59      	subs	r1, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fbb1 f3f3 	udiv	r3, r1, r3
 8002234:	3301      	adds	r3, #1
 8002236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800223a:	e051      	b.n	80022e0 <HAL_I2C_Init+0x1dc>
 800223c:	2304      	movs	r3, #4
 800223e:	e04f      	b.n	80022e0 <HAL_I2C_Init+0x1dc>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d111      	bne.n	800226c <HAL_I2C_Init+0x168>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1e58      	subs	r0, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	440b      	add	r3, r1
 8002256:	fbb0 f3f3 	udiv	r3, r0, r3
 800225a:	3301      	adds	r3, #1
 800225c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf0c      	ite	eq
 8002264:	2301      	moveq	r3, #1
 8002266:	2300      	movne	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	e012      	b.n	8002292 <HAL_I2C_Init+0x18e>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1e58      	subs	r0, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6859      	ldr	r1, [r3, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	0099      	lsls	r1, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002282:	3301      	adds	r3, #1
 8002284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002288:	2b00      	cmp	r3, #0
 800228a:	bf0c      	ite	eq
 800228c:	2301      	moveq	r3, #1
 800228e:	2300      	movne	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_I2C_Init+0x196>
 8002296:	2301      	movs	r3, #1
 8002298:	e022      	b.n	80022e0 <HAL_I2C_Init+0x1dc>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10e      	bne.n	80022c0 <HAL_I2C_Init+0x1bc>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1e58      	subs	r0, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6859      	ldr	r1, [r3, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	440b      	add	r3, r1
 80022b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b4:	3301      	adds	r3, #1
 80022b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022be:	e00f      	b.n	80022e0 <HAL_I2C_Init+0x1dc>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1e58      	subs	r0, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6859      	ldr	r1, [r3, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	0099      	lsls	r1, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d6:	3301      	adds	r3, #1
 80022d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	6809      	ldr	r1, [r1, #0]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69da      	ldr	r2, [r3, #28]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800230e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6911      	ldr	r1, [r2, #16]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68d2      	ldr	r2, [r2, #12]
 800231a:	4311      	orrs	r1, r2
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	430b      	orrs	r3, r1
 8002322:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2220      	movs	r2, #32
 800235a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	000186a0 	.word	0x000186a0
 800237c:	001e847f 	.word	0x001e847f
 8002380:	003d08ff 	.word	0x003d08ff
 8002384:	431bde83 	.word	0x431bde83
 8002388:	10624dd3 	.word	0x10624dd3

0800238c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e267      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d075      	beq.n	8002496 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023aa:	4b88      	ldr	r3, [pc, #544]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d00c      	beq.n	80023d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023b6:	4b85      	ldr	r3, [pc, #532]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d112      	bne.n	80023e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023c2:	4b82      	ldr	r3, [pc, #520]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023ce:	d10b      	bne.n	80023e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d0:	4b7e      	ldr	r3, [pc, #504]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d05b      	beq.n	8002494 <HAL_RCC_OscConfig+0x108>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d157      	bne.n	8002494 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e242      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023f0:	d106      	bne.n	8002400 <HAL_RCC_OscConfig+0x74>
 80023f2:	4b76      	ldr	r3, [pc, #472]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a75      	ldr	r2, [pc, #468]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e01d      	b.n	800243c <HAL_RCC_OscConfig+0xb0>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0x98>
 800240a:	4b70      	ldr	r3, [pc, #448]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a6f      	ldr	r2, [pc, #444]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002410:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	4b6d      	ldr	r3, [pc, #436]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a6c      	ldr	r2, [pc, #432]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 800241c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e00b      	b.n	800243c <HAL_RCC_OscConfig+0xb0>
 8002424:	4b69      	ldr	r3, [pc, #420]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a68      	ldr	r2, [pc, #416]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 800242a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	4b66      	ldr	r3, [pc, #408]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a65      	ldr	r2, [pc, #404]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002436:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800243a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d013      	beq.n	800246c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7fe ffea 	bl	800141c <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800244c:	f7fe ffe6 	bl	800141c <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	@ 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e207      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	4b5b      	ldr	r3, [pc, #364]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0xc0>
 800246a:	e014      	b.n	8002496 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246c:	f7fe ffd6 	bl	800141c <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002474:	f7fe ffd2 	bl	800141c <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	@ 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e1f3      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002486:	4b51      	ldr	r3, [pc, #324]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0xe8>
 8002492:	e000      	b.n	8002496 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d063      	beq.n	800256a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024a2:	4b4a      	ldr	r3, [pc, #296]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00b      	beq.n	80024c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ae:	4b47      	ldr	r3, [pc, #284]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d11c      	bne.n	80024f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ba:	4b44      	ldr	r3, [pc, #272]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d116      	bne.n	80024f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c6:	4b41      	ldr	r3, [pc, #260]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d005      	beq.n	80024de <HAL_RCC_OscConfig+0x152>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d001      	beq.n	80024de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e1c7      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024de:	4b3b      	ldr	r3, [pc, #236]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4937      	ldr	r1, [pc, #220]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f2:	e03a      	b.n	800256a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d020      	beq.n	800253e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024fc:	4b34      	ldr	r3, [pc, #208]	@ (80025d0 <HAL_RCC_OscConfig+0x244>)
 80024fe:	2201      	movs	r2, #1
 8002500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002502:	f7fe ff8b 	bl	800141c <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800250a:	f7fe ff87 	bl	800141c <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e1a8      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251c:	4b2b      	ldr	r3, [pc, #172]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002528:	4b28      	ldr	r3, [pc, #160]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4925      	ldr	r1, [pc, #148]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002538:	4313      	orrs	r3, r2
 800253a:	600b      	str	r3, [r1, #0]
 800253c:	e015      	b.n	800256a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800253e:	4b24      	ldr	r3, [pc, #144]	@ (80025d0 <HAL_RCC_OscConfig+0x244>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7fe ff6a 	bl	800141c <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800254c:	f7fe ff66 	bl	800141c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e187      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255e:	4b1b      	ldr	r3, [pc, #108]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d036      	beq.n	80025e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d016      	beq.n	80025ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800257e:	4b15      	ldr	r3, [pc, #84]	@ (80025d4 <HAL_RCC_OscConfig+0x248>)
 8002580:	2201      	movs	r2, #1
 8002582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002584:	f7fe ff4a 	bl	800141c <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800258c:	f7fe ff46 	bl	800141c <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e167      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259e:	4b0b      	ldr	r3, [pc, #44]	@ (80025cc <HAL_RCC_OscConfig+0x240>)
 80025a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0x200>
 80025aa:	e01b      	b.n	80025e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ac:	4b09      	ldr	r3, [pc, #36]	@ (80025d4 <HAL_RCC_OscConfig+0x248>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b2:	f7fe ff33 	bl	800141c <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b8:	e00e      	b.n	80025d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ba:	f7fe ff2f 	bl	800141c <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d907      	bls.n	80025d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e150      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
 80025cc:	40023800 	.word	0x40023800
 80025d0:	42470000 	.word	0x42470000
 80025d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d8:	4b88      	ldr	r3, [pc, #544]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 80025da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1ea      	bne.n	80025ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 8097 	beq.w	8002720 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f6:	4b81      	ldr	r3, [pc, #516]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10f      	bne.n	8002622 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	4b7d      	ldr	r3, [pc, #500]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260a:	4a7c      	ldr	r2, [pc, #496]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 800260c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002610:	6413      	str	r3, [r2, #64]	@ 0x40
 8002612:	4b7a      	ldr	r3, [pc, #488]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800261e:	2301      	movs	r3, #1
 8002620:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002622:	4b77      	ldr	r3, [pc, #476]	@ (8002800 <HAL_RCC_OscConfig+0x474>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262a:	2b00      	cmp	r3, #0
 800262c:	d118      	bne.n	8002660 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800262e:	4b74      	ldr	r3, [pc, #464]	@ (8002800 <HAL_RCC_OscConfig+0x474>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a73      	ldr	r2, [pc, #460]	@ (8002800 <HAL_RCC_OscConfig+0x474>)
 8002634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800263a:	f7fe feef 	bl	800141c <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002642:	f7fe feeb 	bl	800141c <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e10c      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002654:	4b6a      	ldr	r3, [pc, #424]	@ (8002800 <HAL_RCC_OscConfig+0x474>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d106      	bne.n	8002676 <HAL_RCC_OscConfig+0x2ea>
 8002668:	4b64      	ldr	r3, [pc, #400]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 800266a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266c:	4a63      	ldr	r2, [pc, #396]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6713      	str	r3, [r2, #112]	@ 0x70
 8002674:	e01c      	b.n	80026b0 <HAL_RCC_OscConfig+0x324>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b05      	cmp	r3, #5
 800267c:	d10c      	bne.n	8002698 <HAL_RCC_OscConfig+0x30c>
 800267e:	4b5f      	ldr	r3, [pc, #380]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002682:	4a5e      	ldr	r2, [pc, #376]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002684:	f043 0304 	orr.w	r3, r3, #4
 8002688:	6713      	str	r3, [r2, #112]	@ 0x70
 800268a:	4b5c      	ldr	r3, [pc, #368]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268e:	4a5b      	ldr	r2, [pc, #364]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6713      	str	r3, [r2, #112]	@ 0x70
 8002696:	e00b      	b.n	80026b0 <HAL_RCC_OscConfig+0x324>
 8002698:	4b58      	ldr	r3, [pc, #352]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269c:	4a57      	ldr	r2, [pc, #348]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 800269e:	f023 0301 	bic.w	r3, r3, #1
 80026a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026a4:	4b55      	ldr	r3, [pc, #340]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a8:	4a54      	ldr	r2, [pc, #336]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 80026aa:	f023 0304 	bic.w	r3, r3, #4
 80026ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d015      	beq.n	80026e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b8:	f7fe feb0 	bl	800141c <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026be:	e00a      	b.n	80026d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c0:	f7fe feac 	bl	800141c <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e0cb      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d6:	4b49      	ldr	r3, [pc, #292]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0ee      	beq.n	80026c0 <HAL_RCC_OscConfig+0x334>
 80026e2:	e014      	b.n	800270e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e4:	f7fe fe9a 	bl	800141c <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ec:	f7fe fe96 	bl	800141c <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e0b5      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002702:	4b3e      	ldr	r3, [pc, #248]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1ee      	bne.n	80026ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800270e:	7dfb      	ldrb	r3, [r7, #23]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d105      	bne.n	8002720 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002714:	4b39      	ldr	r3, [pc, #228]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002718:	4a38      	ldr	r2, [pc, #224]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 800271a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800271e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80a1 	beq.w	800286c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800272a:	4b34      	ldr	r3, [pc, #208]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b08      	cmp	r3, #8
 8002734:	d05c      	beq.n	80027f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d141      	bne.n	80027c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273e:	4b31      	ldr	r3, [pc, #196]	@ (8002804 <HAL_RCC_OscConfig+0x478>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7fe fe6a 	bl	800141c <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274c:	f7fe fe66 	bl	800141c <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e087      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275e:	4b27      	ldr	r3, [pc, #156]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69da      	ldr	r2, [r3, #28]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002778:	019b      	lsls	r3, r3, #6
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002780:	085b      	lsrs	r3, r3, #1
 8002782:	3b01      	subs	r3, #1
 8002784:	041b      	lsls	r3, r3, #16
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278c:	061b      	lsls	r3, r3, #24
 800278e:	491b      	ldr	r1, [pc, #108]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002794:	4b1b      	ldr	r3, [pc, #108]	@ (8002804 <HAL_RCC_OscConfig+0x478>)
 8002796:	2201      	movs	r2, #1
 8002798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279a:	f7fe fe3f 	bl	800141c <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a2:	f7fe fe3b 	bl	800141c <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e05c      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b4:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x416>
 80027c0:	e054      	b.n	800286c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c2:	4b10      	ldr	r3, [pc, #64]	@ (8002804 <HAL_RCC_OscConfig+0x478>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c8:	f7fe fe28 	bl	800141c <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d0:	f7fe fe24 	bl	800141c <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e045      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e2:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <HAL_RCC_OscConfig+0x470>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x444>
 80027ee:	e03d      	b.n	800286c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d107      	bne.n	8002808 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e038      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
 80027fc:	40023800 	.word	0x40023800
 8002800:	40007000 	.word	0x40007000
 8002804:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002808:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <HAL_RCC_OscConfig+0x4ec>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d028      	beq.n	8002868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002820:	429a      	cmp	r2, r3
 8002822:	d121      	bne.n	8002868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282e:	429a      	cmp	r2, r3
 8002830:	d11a      	bne.n	8002868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002838:	4013      	ands	r3, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800283e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002840:	4293      	cmp	r3, r2
 8002842:	d111      	bne.n	8002868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284e:	085b      	lsrs	r3, r3, #1
 8002850:	3b01      	subs	r3, #1
 8002852:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002854:	429a      	cmp	r2, r3
 8002856:	d107      	bne.n	8002868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002862:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d001      	beq.n	800286c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800

0800287c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0cc      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002890:	4b68      	ldr	r3, [pc, #416]	@ (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d90c      	bls.n	80028b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289e:	4b65      	ldr	r3, [pc, #404]	@ (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a6:	4b63      	ldr	r3, [pc, #396]	@ (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0b8      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d020      	beq.n	8002906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028d0:	4b59      	ldr	r3, [pc, #356]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	4a58      	ldr	r2, [pc, #352]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028e8:	4b53      	ldr	r3, [pc, #332]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	4a52      	ldr	r2, [pc, #328]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f4:	4b50      	ldr	r3, [pc, #320]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	494d      	ldr	r1, [pc, #308]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d044      	beq.n	800299c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d107      	bne.n	800292a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	4b47      	ldr	r3, [pc, #284]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d119      	bne.n	800295a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e07f      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d003      	beq.n	800293a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002936:	2b03      	cmp	r3, #3
 8002938:	d107      	bne.n	800294a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d109      	bne.n	800295a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e06f      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e067      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800295a:	4b37      	ldr	r3, [pc, #220]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f023 0203 	bic.w	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4934      	ldr	r1, [pc, #208]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	4313      	orrs	r3, r2
 800296a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800296c:	f7fe fd56 	bl	800141c <HAL_GetTick>
 8002970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002972:	e00a      	b.n	800298a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002974:	f7fe fd52 	bl	800141c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002982:	4293      	cmp	r3, r2
 8002984:	d901      	bls.n	800298a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e04f      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298a:	4b2b      	ldr	r3, [pc, #172]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 020c 	and.w	r2, r3, #12
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	429a      	cmp	r2, r3
 800299a:	d1eb      	bne.n	8002974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800299c:	4b25      	ldr	r3, [pc, #148]	@ (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d20c      	bcs.n	80029c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029aa:	4b22      	ldr	r3, [pc, #136]	@ (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	4b20      	ldr	r3, [pc, #128]	@ (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e032      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029d0:	4b19      	ldr	r3, [pc, #100]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4916      	ldr	r1, [pc, #88]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d009      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ee:	4b12      	ldr	r3, [pc, #72]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	490e      	ldr	r1, [pc, #56]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a02:	f000 f821 	bl	8002a48 <HAL_RCC_GetSysClockFreq>
 8002a06:	4602      	mov	r2, r0
 8002a08:	4b0b      	ldr	r3, [pc, #44]	@ (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	091b      	lsrs	r3, r3, #4
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	490a      	ldr	r1, [pc, #40]	@ (8002a3c <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	5ccb      	ldrb	r3, [r1, r3]
 8002a16:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1a:	4a09      	ldr	r2, [pc, #36]	@ (8002a40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a1e:	4b09      	ldr	r3, [pc, #36]	@ (8002a44 <HAL_RCC_ClockConfig+0x1c8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe fac4 	bl	8000fb0 <HAL_InitTick>

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40023c00 	.word	0x40023c00
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	08008b54 	.word	0x08008b54
 8002a40:	20000000 	.word	0x20000000
 8002a44:	20000004 	.word	0x20000004

08002a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a4c:	b090      	sub	sp, #64	@ 0x40
 8002a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a60:	4b59      	ldr	r3, [pc, #356]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 030c 	and.w	r3, r3, #12
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d00d      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x40>
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	f200 80a1 	bhi.w	8002bb4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <HAL_RCC_GetSysClockFreq+0x34>
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d003      	beq.n	8002a82 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a7a:	e09b      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a7c:	4b53      	ldr	r3, [pc, #332]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0x184>)
 8002a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a80:	e09b      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a82:	4b53      	ldr	r3, [pc, #332]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a86:	e098      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a88:	4b4f      	ldr	r3, [pc, #316]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a90:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a92:	4b4d      	ldr	r3, [pc, #308]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d028      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	099b      	lsrs	r3, r3, #6
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	623b      	str	r3, [r7, #32]
 8002aa8:	627a      	str	r2, [r7, #36]	@ 0x24
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4b47      	ldr	r3, [pc, #284]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ab4:	fb03 f201 	mul.w	r2, r3, r1
 8002ab8:	2300      	movs	r3, #0
 8002aba:	fb00 f303 	mul.w	r3, r0, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	4a43      	ldr	r2, [pc, #268]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ac2:	fba0 1202 	umull	r1, r2, r0, r2
 8002ac6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ac8:	460a      	mov	r2, r1
 8002aca:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002acc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ace:	4413      	add	r3, r2
 8002ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	61bb      	str	r3, [r7, #24]
 8002ad8:	61fa      	str	r2, [r7, #28]
 8002ada:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ade:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002ae2:	f7fd fbd5 	bl	8000290 <__aeabi_uldivmod>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4613      	mov	r3, r2
 8002aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002aee:	e053      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af0:	4b35      	ldr	r3, [pc, #212]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	099b      	lsrs	r3, r3, #6
 8002af6:	2200      	movs	r2, #0
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	617a      	str	r2, [r7, #20]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b02:	f04f 0b00 	mov.w	fp, #0
 8002b06:	4652      	mov	r2, sl
 8002b08:	465b      	mov	r3, fp
 8002b0a:	f04f 0000 	mov.w	r0, #0
 8002b0e:	f04f 0100 	mov.w	r1, #0
 8002b12:	0159      	lsls	r1, r3, #5
 8002b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b18:	0150      	lsls	r0, r2, #5
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	ebb2 080a 	subs.w	r8, r2, sl
 8002b22:	eb63 090b 	sbc.w	r9, r3, fp
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b3a:	ebb2 0408 	subs.w	r4, r2, r8
 8002b3e:	eb63 0509 	sbc.w	r5, r3, r9
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	f04f 0300 	mov.w	r3, #0
 8002b4a:	00eb      	lsls	r3, r5, #3
 8002b4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b50:	00e2      	lsls	r2, r4, #3
 8002b52:	4614      	mov	r4, r2
 8002b54:	461d      	mov	r5, r3
 8002b56:	eb14 030a 	adds.w	r3, r4, sl
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	eb45 030b 	adc.w	r3, r5, fp
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b6e:	4629      	mov	r1, r5
 8002b70:	028b      	lsls	r3, r1, #10
 8002b72:	4621      	mov	r1, r4
 8002b74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b78:	4621      	mov	r1, r4
 8002b7a:	028a      	lsls	r2, r1, #10
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	4619      	mov	r1, r3
 8002b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b82:	2200      	movs	r2, #0
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	60fa      	str	r2, [r7, #12]
 8002b88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b8c:	f7fd fb80 	bl	8000290 <__aeabi_uldivmod>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4613      	mov	r3, r2
 8002b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b98:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002ba8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bb2:	e002      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bb4:	4b05      	ldr	r3, [pc, #20]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0x184>)
 8002bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3740      	adds	r7, #64	@ 0x40
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	00f42400 	.word	0x00f42400
 8002bd0:	017d7840 	.word	0x017d7840

08002bd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd8:	4b03      	ldr	r3, [pc, #12]	@ (8002be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bda:	681b      	ldr	r3, [r3, #0]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20000000 	.word	0x20000000

08002bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bf0:	f7ff fff0 	bl	8002bd4 <HAL_RCC_GetHCLKFreq>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	4b05      	ldr	r3, [pc, #20]	@ (8002c0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	0a9b      	lsrs	r3, r3, #10
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	4903      	ldr	r1, [pc, #12]	@ (8002c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c02:	5ccb      	ldrb	r3, [r1, r3]
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	08008b64 	.word	0x08008b64

08002c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c18:	f7ff ffdc 	bl	8002bd4 <HAL_RCC_GetHCLKFreq>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	4b05      	ldr	r3, [pc, #20]	@ (8002c34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	0b5b      	lsrs	r3, r3, #13
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	4903      	ldr	r1, [pc, #12]	@ (8002c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c2a:	5ccb      	ldrb	r3, [r1, r3]
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40023800 	.word	0x40023800
 8002c38:	08008b64 	.word	0x08008b64

08002c3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	220f      	movs	r2, #15
 8002c4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c4c:	4b12      	ldr	r3, [pc, #72]	@ (8002c98 <HAL_RCC_GetClockConfig+0x5c>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 0203 	and.w	r2, r3, #3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c58:	4b0f      	ldr	r3, [pc, #60]	@ (8002c98 <HAL_RCC_GetClockConfig+0x5c>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c64:	4b0c      	ldr	r3, [pc, #48]	@ (8002c98 <HAL_RCC_GetClockConfig+0x5c>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c70:	4b09      	ldr	r3, [pc, #36]	@ (8002c98 <HAL_RCC_GetClockConfig+0x5c>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	08db      	lsrs	r3, r3, #3
 8002c76:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c7e:	4b07      	ldr	r3, [pc, #28]	@ (8002c9c <HAL_RCC_GetClockConfig+0x60>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0207 	and.w	r2, r3, #7
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	601a      	str	r2, [r3, #0]
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40023c00 	.word	0x40023c00

08002ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e041      	b.n	8002d36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f839 	bl	8002d3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3304      	adds	r3, #4
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4610      	mov	r0, r2
 8002ce0:	f000 f9b2 	bl	8003048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d001      	beq.n	8002d6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e044      	b.n	8002df6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a1e      	ldr	r2, [pc, #120]	@ (8002e04 <HAL_TIM_Base_Start_IT+0xb0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d018      	beq.n	8002dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d96:	d013      	beq.n	8002dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a1a      	ldr	r2, [pc, #104]	@ (8002e08 <HAL_TIM_Base_Start_IT+0xb4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00e      	beq.n	8002dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a19      	ldr	r2, [pc, #100]	@ (8002e0c <HAL_TIM_Base_Start_IT+0xb8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d009      	beq.n	8002dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a17      	ldr	r2, [pc, #92]	@ (8002e10 <HAL_TIM_Base_Start_IT+0xbc>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d004      	beq.n	8002dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a16      	ldr	r2, [pc, #88]	@ (8002e14 <HAL_TIM_Base_Start_IT+0xc0>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d111      	bne.n	8002de4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2b06      	cmp	r3, #6
 8002dd0:	d010      	beq.n	8002df4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f042 0201 	orr.w	r2, r2, #1
 8002de0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de2:	e007      	b.n	8002df4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40010000 	.word	0x40010000
 8002e08:	40000400 	.word	0x40000400
 8002e0c:	40000800 	.word	0x40000800
 8002e10:	40000c00 	.word	0x40000c00
 8002e14:	40014000 	.word	0x40014000

08002e18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d020      	beq.n	8002e7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d01b      	beq.n	8002e7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0202 	mvn.w	r2, #2
 8002e4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f8d2 	bl	800300c <HAL_TIM_IC_CaptureCallback>
 8002e68:	e005      	b.n	8002e76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f8c4 	bl	8002ff8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f8d5 	bl	8003020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d020      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d01b      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0204 	mvn.w	r2, #4
 8002e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f8ac 	bl	800300c <HAL_TIM_IC_CaptureCallback>
 8002eb4:	e005      	b.n	8002ec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f89e 	bl	8002ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f8af 	bl	8003020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d020      	beq.n	8002f14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d01b      	beq.n	8002f14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f06f 0208 	mvn.w	r2, #8
 8002ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2204      	movs	r2, #4
 8002eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f886 	bl	800300c <HAL_TIM_IC_CaptureCallback>
 8002f00:	e005      	b.n	8002f0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f878 	bl	8002ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f889 	bl	8003020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d020      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d01b      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0210 	mvn.w	r2, #16
 8002f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2208      	movs	r2, #8
 8002f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f860 	bl	800300c <HAL_TIM_IC_CaptureCallback>
 8002f4c:	e005      	b.n	8002f5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f852 	bl	8002ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f863 	bl	8003020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00c      	beq.n	8002f84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d007      	beq.n	8002f84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0201 	mvn.w	r2, #1
 8002f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fd fe64 	bl	8000c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00c      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d007      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f8e6 	bl	8003174 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00c      	beq.n	8002fcc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d007      	beq.n	8002fcc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f834 	bl	8003034 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f003 0320 	and.w	r3, r3, #32
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00c      	beq.n	8002ff0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d007      	beq.n	8002ff0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f06f 0220 	mvn.w	r2, #32
 8002fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f8b8 	bl	8003160 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ff0:	bf00      	nop
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a3a      	ldr	r2, [pc, #232]	@ (8003144 <TIM_Base_SetConfig+0xfc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00f      	beq.n	8003080 <TIM_Base_SetConfig+0x38>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003066:	d00b      	beq.n	8003080 <TIM_Base_SetConfig+0x38>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a37      	ldr	r2, [pc, #220]	@ (8003148 <TIM_Base_SetConfig+0x100>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d007      	beq.n	8003080 <TIM_Base_SetConfig+0x38>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a36      	ldr	r2, [pc, #216]	@ (800314c <TIM_Base_SetConfig+0x104>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d003      	beq.n	8003080 <TIM_Base_SetConfig+0x38>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a35      	ldr	r2, [pc, #212]	@ (8003150 <TIM_Base_SetConfig+0x108>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d108      	bne.n	8003092 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a2b      	ldr	r2, [pc, #172]	@ (8003144 <TIM_Base_SetConfig+0xfc>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d01b      	beq.n	80030d2 <TIM_Base_SetConfig+0x8a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030a0:	d017      	beq.n	80030d2 <TIM_Base_SetConfig+0x8a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a28      	ldr	r2, [pc, #160]	@ (8003148 <TIM_Base_SetConfig+0x100>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d013      	beq.n	80030d2 <TIM_Base_SetConfig+0x8a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a27      	ldr	r2, [pc, #156]	@ (800314c <TIM_Base_SetConfig+0x104>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00f      	beq.n	80030d2 <TIM_Base_SetConfig+0x8a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a26      	ldr	r2, [pc, #152]	@ (8003150 <TIM_Base_SetConfig+0x108>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00b      	beq.n	80030d2 <TIM_Base_SetConfig+0x8a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a25      	ldr	r2, [pc, #148]	@ (8003154 <TIM_Base_SetConfig+0x10c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d007      	beq.n	80030d2 <TIM_Base_SetConfig+0x8a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a24      	ldr	r2, [pc, #144]	@ (8003158 <TIM_Base_SetConfig+0x110>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d003      	beq.n	80030d2 <TIM_Base_SetConfig+0x8a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a23      	ldr	r2, [pc, #140]	@ (800315c <TIM_Base_SetConfig+0x114>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d108      	bne.n	80030e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a0e      	ldr	r2, [pc, #56]	@ (8003144 <TIM_Base_SetConfig+0xfc>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d103      	bne.n	8003118 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b01      	cmp	r3, #1
 8003128:	d105      	bne.n	8003136 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f023 0201 	bic.w	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	611a      	str	r2, [r3, #16]
  }
}
 8003136:	bf00      	nop
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40010000 	.word	0x40010000
 8003148:	40000400 	.word	0x40000400
 800314c:	40000800 	.word	0x40000800
 8003150:	40000c00 	.word	0x40000c00
 8003154:	40014000 	.word	0x40014000
 8003158:	40014400 	.word	0x40014400
 800315c:	40014800 	.word	0x40014800

08003160 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e042      	b.n	8003220 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d106      	bne.n	80031b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7fd fdd8 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2224      	movs	r2, #36	@ 0x24
 80031b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 ff59 	bl	8004084 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695a      	ldr	r2, [r3, #20]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003200:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08a      	sub	sp, #40	@ 0x28
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	603b      	str	r3, [r7, #0]
 8003234:	4613      	mov	r3, r2
 8003236:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b20      	cmp	r3, #32
 8003246:	d175      	bne.n	8003334 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <HAL_UART_Transmit+0x2c>
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e06e      	b.n	8003336 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2221      	movs	r2, #33	@ 0x21
 8003262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003266:	f7fe f8d9 	bl	800141c <HAL_GetTick>
 800326a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	88fa      	ldrh	r2, [r7, #6]
 8003270:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	88fa      	ldrh	r2, [r7, #6]
 8003276:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003280:	d108      	bne.n	8003294 <HAL_UART_Transmit+0x6c>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d104      	bne.n	8003294 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	61bb      	str	r3, [r7, #24]
 8003292:	e003      	b.n	800329c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003298:	2300      	movs	r3, #0
 800329a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800329c:	e02e      	b.n	80032fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2200      	movs	r2, #0
 80032a6:	2180      	movs	r1, #128	@ 0x80
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 fc31 	bl	8003b10 <UART_WaitOnFlagUntilTimeout>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e03a      	b.n	8003336 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10b      	bne.n	80032de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	3302      	adds	r3, #2
 80032da:	61bb      	str	r3, [r7, #24]
 80032dc:	e007      	b.n	80032ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	781a      	ldrb	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	3301      	adds	r3, #1
 80032ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003300:	b29b      	uxth	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1cb      	bne.n	800329e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2200      	movs	r2, #0
 800330e:	2140      	movs	r1, #64	@ 0x40
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 fbfd 	bl	8003b10 <UART_WaitOnFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e006      	b.n	8003336 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	e000      	b.n	8003336 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003334:	2302      	movs	r3, #2
  }
}
 8003336:	4618      	mov	r0, r3
 8003338:	3720      	adds	r7, #32
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	60f8      	str	r0, [r7, #12]
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	4613      	mov	r3, r2
 800334a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b20      	cmp	r3, #32
 8003356:	d112      	bne.n	800337e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <HAL_UART_Receive_DMA+0x26>
 800335e:	88fb      	ldrh	r3, [r7, #6]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e00b      	b.n	8003380 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	461a      	mov	r2, r3
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 fc25 	bl	8003bc4 <UART_Start_Receive_DMA>
 800337a:	4603      	mov	r3, r0
 800337c:	e000      	b.n	8003380 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800337e:	2302      	movs	r3, #2
  }
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b0ba      	sub	sp, #232	@ 0xe8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80033c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10f      	bne.n	80033ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033d2:	f003 0320 	and.w	r3, r3, #32
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d009      	beq.n	80033ee <HAL_UART_IRQHandler+0x66>
 80033da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fd8d 	bl	8003f06 <UART_Receive_IT>
      return;
 80033ec:	e25b      	b.n	80038a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 80de 	beq.w	80035b4 <HAL_UART_IRQHandler+0x22c>
 80033f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d106      	bne.n	8003412 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003408:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 80d1 	beq.w	80035b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00b      	beq.n	8003436 <HAL_UART_IRQHandler+0xae>
 800341e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342e:	f043 0201 	orr.w	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00b      	beq.n	800345a <HAL_UART_IRQHandler+0xd2>
 8003442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003452:	f043 0202 	orr.w	r2, r3, #2
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800345a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00b      	beq.n	800347e <HAL_UART_IRQHandler+0xf6>
 8003466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003476:	f043 0204 	orr.w	r2, r3, #4
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800347e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d011      	beq.n	80034ae <HAL_UART_IRQHandler+0x126>
 800348a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	2b00      	cmp	r3, #0
 8003494:	d105      	bne.n	80034a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a6:	f043 0208 	orr.w	r2, r3, #8
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 81f2 	beq.w	800389c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_UART_IRQHandler+0x14e>
 80034c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 fd18 	bl	8003f06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e0:	2b40      	cmp	r3, #64	@ 0x40
 80034e2:	bf0c      	ite	eq
 80034e4:	2301      	moveq	r3, #1
 80034e6:	2300      	movne	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d103      	bne.n	8003502 <HAL_UART_IRQHandler+0x17a>
 80034fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d04f      	beq.n	80035a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fc20 	bl	8003d48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003512:	2b40      	cmp	r3, #64	@ 0x40
 8003514:	d141      	bne.n	800359a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3314      	adds	r3, #20
 800351c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003520:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003524:	e853 3f00 	ldrex	r3, [r3]
 8003528:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800352c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003530:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003534:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3314      	adds	r3, #20
 800353e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003542:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003546:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800354e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003552:	e841 2300 	strex	r3, r2, [r1]
 8003556:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800355a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1d9      	bne.n	8003516 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003566:	2b00      	cmp	r3, #0
 8003568:	d013      	beq.n	8003592 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800356e:	4a7e      	ldr	r2, [pc, #504]	@ (8003768 <HAL_UART_IRQHandler+0x3e0>)
 8003570:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe f9b4 	bl	80018e4 <HAL_DMA_Abort_IT>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d016      	beq.n	80035b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800358c:	4610      	mov	r0, r2
 800358e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003590:	e00e      	b.n	80035b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f9a8 	bl	80038e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003598:	e00a      	b.n	80035b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f9a4 	bl	80038e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a0:	e006      	b.n	80035b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f9a0 	bl	80038e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80035ae:	e175      	b.n	800389c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b0:	bf00      	nop
    return;
 80035b2:	e173      	b.n	800389c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	f040 814f 	bne.w	800385c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80035be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035c2:	f003 0310 	and.w	r3, r3, #16
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 8148 	beq.w	800385c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8141 	beq.w	800385c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035da:	2300      	movs	r3, #0
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035fa:	2b40      	cmp	r3, #64	@ 0x40
 80035fc:	f040 80b6 	bne.w	800376c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800360c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 8145 	beq.w	80038a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800361a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800361e:	429a      	cmp	r2, r3
 8003620:	f080 813e 	bcs.w	80038a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800362a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003636:	f000 8088 	beq.w	800374a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	330c      	adds	r3, #12
 8003640:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003644:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003648:	e853 3f00 	ldrex	r3, [r3]
 800364c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003650:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003658:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	330c      	adds	r3, #12
 8003662:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003666:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800366a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003672:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003676:	e841 2300 	strex	r3, r2, [r1]
 800367a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800367e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1d9      	bne.n	800363a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	3314      	adds	r3, #20
 800368c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003690:	e853 3f00 	ldrex	r3, [r3]
 8003694:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003696:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3314      	adds	r3, #20
 80036a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80036aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80036ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80036b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80036b6:	e841 2300 	strex	r3, r2, [r1]
 80036ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80036bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1e1      	bne.n	8003686 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3314      	adds	r3, #20
 80036c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036cc:	e853 3f00 	ldrex	r3, [r3]
 80036d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80036d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3314      	adds	r3, #20
 80036e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80036e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80036e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80036ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80036ee:	e841 2300 	strex	r3, r2, [r1]
 80036f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80036f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1e3      	bne.n	80036c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	330c      	adds	r3, #12
 800370e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003712:	e853 3f00 	ldrex	r3, [r3]
 8003716:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003718:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800371a:	f023 0310 	bic.w	r3, r3, #16
 800371e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	330c      	adds	r3, #12
 8003728:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800372c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800372e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003730:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003732:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003734:	e841 2300 	strex	r3, r2, [r1]
 8003738:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800373a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1e3      	bne.n	8003708 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003744:	4618      	mov	r0, r3
 8003746:	f7fe f85d 	bl	8001804 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2202      	movs	r2, #2
 800374e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003758:	b29b      	uxth	r3, r3
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	b29b      	uxth	r3, r3
 800375e:	4619      	mov	r1, r3
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f8cb 	bl	80038fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003766:	e09b      	b.n	80038a0 <HAL_UART_IRQHandler+0x518>
 8003768:	08003e0f 	.word	0x08003e0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003774:	b29b      	uxth	r3, r3
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 808e 	beq.w	80038a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003788:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8089 	beq.w	80038a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	330c      	adds	r3, #12
 8003798:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800379c:	e853 3f00 	ldrex	r3, [r3]
 80037a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	330c      	adds	r3, #12
 80037b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80037b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80037b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037be:	e841 2300 	strex	r3, r2, [r1]
 80037c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1e3      	bne.n	8003792 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3314      	adds	r3, #20
 80037d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d4:	e853 3f00 	ldrex	r3, [r3]
 80037d8:	623b      	str	r3, [r7, #32]
   return(result);
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	f023 0301 	bic.w	r3, r3, #1
 80037e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3314      	adds	r3, #20
 80037ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80037ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80037f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037f6:	e841 2300 	strex	r3, r2, [r1]
 80037fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1e3      	bne.n	80037ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	330c      	adds	r3, #12
 8003816:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	e853 3f00 	ldrex	r3, [r3]
 800381e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0310 	bic.w	r3, r3, #16
 8003826:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	330c      	adds	r3, #12
 8003830:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003834:	61fa      	str	r2, [r7, #28]
 8003836:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003838:	69b9      	ldr	r1, [r7, #24]
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	e841 2300 	strex	r3, r2, [r1]
 8003840:	617b      	str	r3, [r7, #20]
   return(result);
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e3      	bne.n	8003810 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800384e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003852:	4619      	mov	r1, r3
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f851 	bl	80038fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800385a:	e023      	b.n	80038a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800385c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003864:	2b00      	cmp	r3, #0
 8003866:	d009      	beq.n	800387c <HAL_UART_IRQHandler+0x4f4>
 8003868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800386c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 fade 	bl	8003e36 <UART_Transmit_IT>
    return;
 800387a:	e014      	b.n	80038a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800387c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00e      	beq.n	80038a6 <HAL_UART_IRQHandler+0x51e>
 8003888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800388c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 fb1e 	bl	8003ed6 <UART_EndTransmit_IT>
    return;
 800389a:	e004      	b.n	80038a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800389c:	bf00      	nop
 800389e:	e002      	b.n	80038a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80038a0:	bf00      	nop
 80038a2:	e000      	b.n	80038a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80038a4:	bf00      	nop
  }
}
 80038a6:	37e8      	adds	r7, #232	@ 0xe8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b09c      	sub	sp, #112	@ 0x70
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003920:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d172      	bne.n	8003a16 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003930:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003932:	2200      	movs	r2, #0
 8003934:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003936:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	330c      	adds	r3, #12
 800393c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003940:	e853 3f00 	ldrex	r3, [r3]
 8003944:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003948:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800394c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800394e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	330c      	adds	r3, #12
 8003954:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003956:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003958:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800395c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800395e:	e841 2300 	strex	r3, r2, [r1]
 8003962:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1e5      	bne.n	8003936 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800396a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3314      	adds	r3, #20
 8003970:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003974:	e853 3f00 	ldrex	r3, [r3]
 8003978:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800397a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800397c:	f023 0301 	bic.w	r3, r3, #1
 8003980:	667b      	str	r3, [r7, #100]	@ 0x64
 8003982:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	3314      	adds	r3, #20
 8003988:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800398a:	647a      	str	r2, [r7, #68]	@ 0x44
 800398c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003990:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003992:	e841 2300 	strex	r3, r2, [r1]
 8003996:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1e5      	bne.n	800396a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800399e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3314      	adds	r3, #20
 80039a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	e853 3f00 	ldrex	r3, [r3]
 80039ac:	623b      	str	r3, [r7, #32]
   return(result);
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80039b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3314      	adds	r3, #20
 80039bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80039be:	633a      	str	r2, [r7, #48]	@ 0x30
 80039c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039c6:	e841 2300 	strex	r3, r2, [r1]
 80039ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1e5      	bne.n	800399e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d119      	bne.n	8003a16 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	330c      	adds	r3, #12
 80039e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	e853 3f00 	ldrex	r3, [r3]
 80039f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f023 0310 	bic.w	r3, r3, #16
 80039f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	330c      	adds	r3, #12
 8003a00:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003a02:	61fa      	str	r2, [r7, #28]
 8003a04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a06:	69b9      	ldr	r1, [r7, #24]
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	e841 2300 	strex	r3, r2, [r1]
 8003a0e:	617b      	str	r3, [r7, #20]
   return(result);
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1e5      	bne.n	80039e2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a18:	2200      	movs	r2, #0
 8003a1a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d106      	bne.n	8003a32 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a26:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a28:	4619      	mov	r1, r3
 8003a2a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003a2c:	f7ff ff66 	bl	80038fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a30:	e002      	b.n	8003a38 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003a32:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003a34:	f7ff ff44 	bl	80038c0 <HAL_UART_RxCpltCallback>
}
 8003a38:	bf00      	nop
 8003a3a:	3770      	adds	r7, #112	@ 0x70
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a4c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2201      	movs	r2, #1
 8003a52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d108      	bne.n	8003a6e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a60:	085b      	lsrs	r3, r3, #1
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	4619      	mov	r1, r3
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f7ff ff48 	bl	80038fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a6c:	e002      	b.n	8003a74 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f7ff ff30 	bl	80038d4 <HAL_UART_RxHalfCpltCallback>
}
 8003a74:	bf00      	nop
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a98:	2b80      	cmp	r3, #128	@ 0x80
 8003a9a:	bf0c      	ite	eq
 8003a9c:	2301      	moveq	r3, #1
 8003a9e:	2300      	movne	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b21      	cmp	r3, #33	@ 0x21
 8003aae:	d108      	bne.n	8003ac2 <UART_DMAError+0x46>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003abc:	68b8      	ldr	r0, [r7, #8]
 8003abe:	f000 f91b 	bl	8003cf8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003acc:	2b40      	cmp	r3, #64	@ 0x40
 8003ace:	bf0c      	ite	eq
 8003ad0:	2301      	moveq	r3, #1
 8003ad2:	2300      	movne	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b22      	cmp	r3, #34	@ 0x22
 8003ae2:	d108      	bne.n	8003af6 <UART_DMAError+0x7a>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2200      	movs	r2, #0
 8003aee:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003af0:	68b8      	ldr	r0, [r7, #8]
 8003af2:	f000 f929 	bl	8003d48 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003afa:	f043 0210 	orr.w	r2, r3, #16
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b02:	68b8      	ldr	r0, [r7, #8]
 8003b04:	f7ff fef0 	bl	80038e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b08:	bf00      	nop
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b20:	e03b      	b.n	8003b9a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b28:	d037      	beq.n	8003b9a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b2a:	f7fd fc77 	bl	800141c <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	6a3a      	ldr	r2, [r7, #32]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d302      	bcc.n	8003b40 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e03a      	b.n	8003bba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d023      	beq.n	8003b9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b80      	cmp	r3, #128	@ 0x80
 8003b56:	d020      	beq.n	8003b9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b40      	cmp	r3, #64	@ 0x40
 8003b5c:	d01d      	beq.n	8003b9a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d116      	bne.n	8003b9a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 f8e0 	bl	8003d48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2208      	movs	r2, #8
 8003b8c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e00f      	b.n	8003bba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	bf0c      	ite	eq
 8003baa:	2301      	moveq	r3, #1
 8003bac:	2300      	movne	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d0b4      	beq.n	8003b22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b098      	sub	sp, #96	@ 0x60
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	88fa      	ldrh	r2, [r7, #6]
 8003bdc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2222      	movs	r2, #34	@ 0x22
 8003be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf0:	4a3e      	ldr	r2, [pc, #248]	@ (8003cec <UART_Start_Receive_DMA+0x128>)
 8003bf2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf8:	4a3d      	ldr	r2, [pc, #244]	@ (8003cf0 <UART_Start_Receive_DMA+0x12c>)
 8003bfa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c00:	4a3c      	ldr	r2, [pc, #240]	@ (8003cf4 <UART_Start_Receive_DMA+0x130>)
 8003c02:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c08:	2200      	movs	r2, #0
 8003c0a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003c0c:	f107 0308 	add.w	r3, r7, #8
 8003c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	88fb      	ldrh	r3, [r7, #6]
 8003c24:	f7fd fd96 	bl	8001754 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003c28:	2300      	movs	r3, #0
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	613b      	str	r3, [r7, #16]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d019      	beq.n	8003c7a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c50:	e853 3f00 	ldrex	r3, [r3]
 8003c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	330c      	adds	r3, #12
 8003c64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c66:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003c68:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003c6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e5      	bne.n	8003c46 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3314      	adds	r3, #20
 8003c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3314      	adds	r3, #20
 8003c98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c9a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003c9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003ca0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1e5      	bne.n	8003c7a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3314      	adds	r3, #20
 8003cb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	617b      	str	r3, [r7, #20]
   return(result);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3314      	adds	r3, #20
 8003ccc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003cce:	627a      	str	r2, [r7, #36]	@ 0x24
 8003cd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	6a39      	ldr	r1, [r7, #32]
 8003cd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e5      	bne.n	8003cae <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3760      	adds	r7, #96	@ 0x60
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	08003915 	.word	0x08003915
 8003cf0:	08003a41 	.word	0x08003a41
 8003cf4:	08003a7d 	.word	0x08003a7d

08003cf8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b089      	sub	sp, #36	@ 0x24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	330c      	adds	r3, #12
 8003d06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	e853 3f00 	ldrex	r3, [r3]
 8003d0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003d16:	61fb      	str	r3, [r7, #28]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	330c      	adds	r3, #12
 8003d1e:	69fa      	ldr	r2, [r7, #28]
 8003d20:	61ba      	str	r2, [r7, #24]
 8003d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d24:	6979      	ldr	r1, [r7, #20]
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	e841 2300 	strex	r3, r2, [r1]
 8003d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1e5      	bne.n	8003d00 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003d3c:	bf00      	nop
 8003d3e:	3724      	adds	r7, #36	@ 0x24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b095      	sub	sp, #84	@ 0x54
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	330c      	adds	r3, #12
 8003d56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d5a:	e853 3f00 	ldrex	r3, [r3]
 8003d5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	330c      	adds	r3, #12
 8003d6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d70:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d78:	e841 2300 	strex	r3, r2, [r1]
 8003d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e5      	bne.n	8003d50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3314      	adds	r3, #20
 8003d8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	e853 3f00 	ldrex	r3, [r3]
 8003d92:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f023 0301 	bic.w	r3, r3, #1
 8003d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3314      	adds	r3, #20
 8003da2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003da4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003da6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003daa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dac:	e841 2300 	strex	r3, r2, [r1]
 8003db0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e5      	bne.n	8003d84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d119      	bne.n	8003df4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	330c      	adds	r3, #12
 8003dc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	e853 3f00 	ldrex	r3, [r3]
 8003dce:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f023 0310 	bic.w	r3, r3, #16
 8003dd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	330c      	adds	r3, #12
 8003dde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003de0:	61ba      	str	r2, [r7, #24]
 8003de2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de4:	6979      	ldr	r1, [r7, #20]
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	e841 2300 	strex	r3, r2, [r1]
 8003dec:	613b      	str	r3, [r7, #16]
   return(result);
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e5      	bne.n	8003dc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e02:	bf00      	nop
 8003e04:	3754      	adds	r7, #84	@ 0x54
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f7ff fd5d 	bl	80038e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e2e:	bf00      	nop
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b085      	sub	sp, #20
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b21      	cmp	r3, #33	@ 0x21
 8003e48:	d13e      	bne.n	8003ec8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e52:	d114      	bne.n	8003e7e <UART_Transmit_IT+0x48>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d110      	bne.n	8003e7e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	461a      	mov	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	1c9a      	adds	r2, r3, #2
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	621a      	str	r2, [r3, #32]
 8003e7c:	e008      	b.n	8003e90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	1c59      	adds	r1, r3, #1
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6211      	str	r1, [r2, #32]
 8003e88:	781a      	ldrb	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10f      	bne.n	8003ec4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003eb2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ec2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	e000      	b.n	8003eca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ec8:	2302      	movs	r3, #2
  }
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff fcd8 	bl	80038ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b08c      	sub	sp, #48	@ 0x30
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b22      	cmp	r3, #34	@ 0x22
 8003f18:	f040 80ae 	bne.w	8004078 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f24:	d117      	bne.n	8003f56 <UART_Receive_IT+0x50>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d113      	bne.n	8003f56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f36:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4e:	1c9a      	adds	r2, r3, #2
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f54:	e026      	b.n	8003fa4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f68:	d007      	beq.n	8003f7a <UART_Receive_IT+0x74>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10a      	bne.n	8003f88 <UART_Receive_IT+0x82>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d106      	bne.n	8003f88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f84:	701a      	strb	r2, [r3, #0]
 8003f86:	e008      	b.n	8003f9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d15d      	bne.n	8004074 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0220 	bic.w	r2, r2, #32
 8003fc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695a      	ldr	r2, [r3, #20]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0201 	bic.w	r2, r2, #1
 8003fe6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d135      	bne.n	800406a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	330c      	adds	r3, #12
 800400a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	e853 3f00 	ldrex	r3, [r3]
 8004012:	613b      	str	r3, [r7, #16]
   return(result);
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f023 0310 	bic.w	r3, r3, #16
 800401a:	627b      	str	r3, [r7, #36]	@ 0x24
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	330c      	adds	r3, #12
 8004022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004024:	623a      	str	r2, [r7, #32]
 8004026:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004028:	69f9      	ldr	r1, [r7, #28]
 800402a:	6a3a      	ldr	r2, [r7, #32]
 800402c:	e841 2300 	strex	r3, r2, [r1]
 8004030:	61bb      	str	r3, [r7, #24]
   return(result);
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1e5      	bne.n	8004004 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0310 	and.w	r3, r3, #16
 8004042:	2b10      	cmp	r3, #16
 8004044:	d10a      	bne.n	800405c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004060:	4619      	mov	r1, r3
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff fc4a 	bl	80038fc <HAL_UARTEx_RxEventCallback>
 8004068:	e002      	b.n	8004070 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff fc28 	bl	80038c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004070:	2300      	movs	r3, #0
 8004072:	e002      	b.n	800407a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	e000      	b.n	800407a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004078:	2302      	movs	r3, #2
  }
}
 800407a:	4618      	mov	r0, r3
 800407c:	3730      	adds	r7, #48	@ 0x30
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004088:	b0c0      	sub	sp, #256	@ 0x100
 800408a:	af00      	add	r7, sp, #0
 800408c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a0:	68d9      	ldr	r1, [r3, #12]
 80040a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	ea40 0301 	orr.w	r3, r0, r1
 80040ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	431a      	orrs	r2, r3
 80040bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80040dc:	f021 010c 	bic.w	r1, r1, #12
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80040ea:	430b      	orrs	r3, r1
 80040ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fe:	6999      	ldr	r1, [r3, #24]
 8004100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	ea40 0301 	orr.w	r3, r0, r1
 800410a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800410c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	4b8f      	ldr	r3, [pc, #572]	@ (8004350 <UART_SetConfig+0x2cc>)
 8004114:	429a      	cmp	r2, r3
 8004116:	d005      	beq.n	8004124 <UART_SetConfig+0xa0>
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	4b8d      	ldr	r3, [pc, #564]	@ (8004354 <UART_SetConfig+0x2d0>)
 8004120:	429a      	cmp	r2, r3
 8004122:	d104      	bne.n	800412e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004124:	f7fe fd76 	bl	8002c14 <HAL_RCC_GetPCLK2Freq>
 8004128:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800412c:	e003      	b.n	8004136 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800412e:	f7fe fd5d 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8004132:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004140:	f040 810c 	bne.w	800435c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004148:	2200      	movs	r2, #0
 800414a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800414e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004152:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004156:	4622      	mov	r2, r4
 8004158:	462b      	mov	r3, r5
 800415a:	1891      	adds	r1, r2, r2
 800415c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800415e:	415b      	adcs	r3, r3
 8004160:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004162:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004166:	4621      	mov	r1, r4
 8004168:	eb12 0801 	adds.w	r8, r2, r1
 800416c:	4629      	mov	r1, r5
 800416e:	eb43 0901 	adc.w	r9, r3, r1
 8004172:	f04f 0200 	mov.w	r2, #0
 8004176:	f04f 0300 	mov.w	r3, #0
 800417a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800417e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004182:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004186:	4690      	mov	r8, r2
 8004188:	4699      	mov	r9, r3
 800418a:	4623      	mov	r3, r4
 800418c:	eb18 0303 	adds.w	r3, r8, r3
 8004190:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004194:	462b      	mov	r3, r5
 8004196:	eb49 0303 	adc.w	r3, r9, r3
 800419a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800419e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80041ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80041b2:	460b      	mov	r3, r1
 80041b4:	18db      	adds	r3, r3, r3
 80041b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80041b8:	4613      	mov	r3, r2
 80041ba:	eb42 0303 	adc.w	r3, r2, r3
 80041be:	657b      	str	r3, [r7, #84]	@ 0x54
 80041c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80041c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80041c8:	f7fc f862 	bl	8000290 <__aeabi_uldivmod>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4b61      	ldr	r3, [pc, #388]	@ (8004358 <UART_SetConfig+0x2d4>)
 80041d2:	fba3 2302 	umull	r2, r3, r3, r2
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	011c      	lsls	r4, r3, #4
 80041da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041de:	2200      	movs	r2, #0
 80041e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80041e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80041ec:	4642      	mov	r2, r8
 80041ee:	464b      	mov	r3, r9
 80041f0:	1891      	adds	r1, r2, r2
 80041f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80041f4:	415b      	adcs	r3, r3
 80041f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041fc:	4641      	mov	r1, r8
 80041fe:	eb12 0a01 	adds.w	sl, r2, r1
 8004202:	4649      	mov	r1, r9
 8004204:	eb43 0b01 	adc.w	fp, r3, r1
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004214:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004218:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800421c:	4692      	mov	sl, r2
 800421e:	469b      	mov	fp, r3
 8004220:	4643      	mov	r3, r8
 8004222:	eb1a 0303 	adds.w	r3, sl, r3
 8004226:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800422a:	464b      	mov	r3, r9
 800422c:	eb4b 0303 	adc.w	r3, fp, r3
 8004230:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004240:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004244:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004248:	460b      	mov	r3, r1
 800424a:	18db      	adds	r3, r3, r3
 800424c:	643b      	str	r3, [r7, #64]	@ 0x40
 800424e:	4613      	mov	r3, r2
 8004250:	eb42 0303 	adc.w	r3, r2, r3
 8004254:	647b      	str	r3, [r7, #68]	@ 0x44
 8004256:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800425a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800425e:	f7fc f817 	bl	8000290 <__aeabi_uldivmod>
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4611      	mov	r1, r2
 8004268:	4b3b      	ldr	r3, [pc, #236]	@ (8004358 <UART_SetConfig+0x2d4>)
 800426a:	fba3 2301 	umull	r2, r3, r3, r1
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	2264      	movs	r2, #100	@ 0x64
 8004272:	fb02 f303 	mul.w	r3, r2, r3
 8004276:	1acb      	subs	r3, r1, r3
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800427e:	4b36      	ldr	r3, [pc, #216]	@ (8004358 <UART_SetConfig+0x2d4>)
 8004280:	fba3 2302 	umull	r2, r3, r3, r2
 8004284:	095b      	lsrs	r3, r3, #5
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800428c:	441c      	add	r4, r3
 800428e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004292:	2200      	movs	r2, #0
 8004294:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004298:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800429c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80042a0:	4642      	mov	r2, r8
 80042a2:	464b      	mov	r3, r9
 80042a4:	1891      	adds	r1, r2, r2
 80042a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042a8:	415b      	adcs	r3, r3
 80042aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80042b0:	4641      	mov	r1, r8
 80042b2:	1851      	adds	r1, r2, r1
 80042b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80042b6:	4649      	mov	r1, r9
 80042b8:	414b      	adcs	r3, r1
 80042ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80042c8:	4659      	mov	r1, fp
 80042ca:	00cb      	lsls	r3, r1, #3
 80042cc:	4651      	mov	r1, sl
 80042ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042d2:	4651      	mov	r1, sl
 80042d4:	00ca      	lsls	r2, r1, #3
 80042d6:	4610      	mov	r0, r2
 80042d8:	4619      	mov	r1, r3
 80042da:	4603      	mov	r3, r0
 80042dc:	4642      	mov	r2, r8
 80042de:	189b      	adds	r3, r3, r2
 80042e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042e4:	464b      	mov	r3, r9
 80042e6:	460a      	mov	r2, r1
 80042e8:	eb42 0303 	adc.w	r3, r2, r3
 80042ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004300:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004304:	460b      	mov	r3, r1
 8004306:	18db      	adds	r3, r3, r3
 8004308:	62bb      	str	r3, [r7, #40]	@ 0x28
 800430a:	4613      	mov	r3, r2
 800430c:	eb42 0303 	adc.w	r3, r2, r3
 8004310:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004312:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004316:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800431a:	f7fb ffb9 	bl	8000290 <__aeabi_uldivmod>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4b0d      	ldr	r3, [pc, #52]	@ (8004358 <UART_SetConfig+0x2d4>)
 8004324:	fba3 1302 	umull	r1, r3, r3, r2
 8004328:	095b      	lsrs	r3, r3, #5
 800432a:	2164      	movs	r1, #100	@ 0x64
 800432c:	fb01 f303 	mul.w	r3, r1, r3
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	3332      	adds	r3, #50	@ 0x32
 8004336:	4a08      	ldr	r2, [pc, #32]	@ (8004358 <UART_SetConfig+0x2d4>)
 8004338:	fba2 2303 	umull	r2, r3, r2, r3
 800433c:	095b      	lsrs	r3, r3, #5
 800433e:	f003 0207 	and.w	r2, r3, #7
 8004342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4422      	add	r2, r4
 800434a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800434c:	e106      	b.n	800455c <UART_SetConfig+0x4d8>
 800434e:	bf00      	nop
 8004350:	40011000 	.word	0x40011000
 8004354:	40011400 	.word	0x40011400
 8004358:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800435c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004360:	2200      	movs	r2, #0
 8004362:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004366:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800436a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800436e:	4642      	mov	r2, r8
 8004370:	464b      	mov	r3, r9
 8004372:	1891      	adds	r1, r2, r2
 8004374:	6239      	str	r1, [r7, #32]
 8004376:	415b      	adcs	r3, r3
 8004378:	627b      	str	r3, [r7, #36]	@ 0x24
 800437a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800437e:	4641      	mov	r1, r8
 8004380:	1854      	adds	r4, r2, r1
 8004382:	4649      	mov	r1, r9
 8004384:	eb43 0501 	adc.w	r5, r3, r1
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	00eb      	lsls	r3, r5, #3
 8004392:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004396:	00e2      	lsls	r2, r4, #3
 8004398:	4614      	mov	r4, r2
 800439a:	461d      	mov	r5, r3
 800439c:	4643      	mov	r3, r8
 800439e:	18e3      	adds	r3, r4, r3
 80043a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043a4:	464b      	mov	r3, r9
 80043a6:	eb45 0303 	adc.w	r3, r5, r3
 80043aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80043ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043ca:	4629      	mov	r1, r5
 80043cc:	008b      	lsls	r3, r1, #2
 80043ce:	4621      	mov	r1, r4
 80043d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043d4:	4621      	mov	r1, r4
 80043d6:	008a      	lsls	r2, r1, #2
 80043d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80043dc:	f7fb ff58 	bl	8000290 <__aeabi_uldivmod>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4b60      	ldr	r3, [pc, #384]	@ (8004568 <UART_SetConfig+0x4e4>)
 80043e6:	fba3 2302 	umull	r2, r3, r3, r2
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	011c      	lsls	r4, r3, #4
 80043ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043f2:	2200      	movs	r2, #0
 80043f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004400:	4642      	mov	r2, r8
 8004402:	464b      	mov	r3, r9
 8004404:	1891      	adds	r1, r2, r2
 8004406:	61b9      	str	r1, [r7, #24]
 8004408:	415b      	adcs	r3, r3
 800440a:	61fb      	str	r3, [r7, #28]
 800440c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004410:	4641      	mov	r1, r8
 8004412:	1851      	adds	r1, r2, r1
 8004414:	6139      	str	r1, [r7, #16]
 8004416:	4649      	mov	r1, r9
 8004418:	414b      	adcs	r3, r1
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004428:	4659      	mov	r1, fp
 800442a:	00cb      	lsls	r3, r1, #3
 800442c:	4651      	mov	r1, sl
 800442e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004432:	4651      	mov	r1, sl
 8004434:	00ca      	lsls	r2, r1, #3
 8004436:	4610      	mov	r0, r2
 8004438:	4619      	mov	r1, r3
 800443a:	4603      	mov	r3, r0
 800443c:	4642      	mov	r2, r8
 800443e:	189b      	adds	r3, r3, r2
 8004440:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004444:	464b      	mov	r3, r9
 8004446:	460a      	mov	r2, r1
 8004448:	eb42 0303 	adc.w	r3, r2, r3
 800444c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	67bb      	str	r3, [r7, #120]	@ 0x78
 800445a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004468:	4649      	mov	r1, r9
 800446a:	008b      	lsls	r3, r1, #2
 800446c:	4641      	mov	r1, r8
 800446e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004472:	4641      	mov	r1, r8
 8004474:	008a      	lsls	r2, r1, #2
 8004476:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800447a:	f7fb ff09 	bl	8000290 <__aeabi_uldivmod>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	4611      	mov	r1, r2
 8004484:	4b38      	ldr	r3, [pc, #224]	@ (8004568 <UART_SetConfig+0x4e4>)
 8004486:	fba3 2301 	umull	r2, r3, r3, r1
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	2264      	movs	r2, #100	@ 0x64
 800448e:	fb02 f303 	mul.w	r3, r2, r3
 8004492:	1acb      	subs	r3, r1, r3
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	3332      	adds	r3, #50	@ 0x32
 8004498:	4a33      	ldr	r2, [pc, #204]	@ (8004568 <UART_SetConfig+0x4e4>)
 800449a:	fba2 2303 	umull	r2, r3, r2, r3
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044a4:	441c      	add	r4, r3
 80044a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044aa:	2200      	movs	r2, #0
 80044ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80044ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80044b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80044b4:	4642      	mov	r2, r8
 80044b6:	464b      	mov	r3, r9
 80044b8:	1891      	adds	r1, r2, r2
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	415b      	adcs	r3, r3
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044c4:	4641      	mov	r1, r8
 80044c6:	1851      	adds	r1, r2, r1
 80044c8:	6039      	str	r1, [r7, #0]
 80044ca:	4649      	mov	r1, r9
 80044cc:	414b      	adcs	r3, r1
 80044ce:	607b      	str	r3, [r7, #4]
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044dc:	4659      	mov	r1, fp
 80044de:	00cb      	lsls	r3, r1, #3
 80044e0:	4651      	mov	r1, sl
 80044e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044e6:	4651      	mov	r1, sl
 80044e8:	00ca      	lsls	r2, r1, #3
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	4603      	mov	r3, r0
 80044f0:	4642      	mov	r2, r8
 80044f2:	189b      	adds	r3, r3, r2
 80044f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044f6:	464b      	mov	r3, r9
 80044f8:	460a      	mov	r2, r1
 80044fa:	eb42 0303 	adc.w	r3, r2, r3
 80044fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	663b      	str	r3, [r7, #96]	@ 0x60
 800450a:	667a      	str	r2, [r7, #100]	@ 0x64
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004518:	4649      	mov	r1, r9
 800451a:	008b      	lsls	r3, r1, #2
 800451c:	4641      	mov	r1, r8
 800451e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004522:	4641      	mov	r1, r8
 8004524:	008a      	lsls	r2, r1, #2
 8004526:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800452a:	f7fb feb1 	bl	8000290 <__aeabi_uldivmod>
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	4b0d      	ldr	r3, [pc, #52]	@ (8004568 <UART_SetConfig+0x4e4>)
 8004534:	fba3 1302 	umull	r1, r3, r3, r2
 8004538:	095b      	lsrs	r3, r3, #5
 800453a:	2164      	movs	r1, #100	@ 0x64
 800453c:	fb01 f303 	mul.w	r3, r1, r3
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	3332      	adds	r3, #50	@ 0x32
 8004546:	4a08      	ldr	r2, [pc, #32]	@ (8004568 <UART_SetConfig+0x4e4>)
 8004548:	fba2 2303 	umull	r2, r3, r2, r3
 800454c:	095b      	lsrs	r3, r3, #5
 800454e:	f003 020f 	and.w	r2, r3, #15
 8004552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4422      	add	r2, r4
 800455a:	609a      	str	r2, [r3, #8]
}
 800455c:	bf00      	nop
 800455e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004562:	46bd      	mov	sp, r7
 8004564:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004568:	51eb851f 	.word	0x51eb851f

0800456c <__NVIC_SetPriority>:
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	6039      	str	r1, [r7, #0]
 8004576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457c:	2b00      	cmp	r3, #0
 800457e:	db0a      	blt.n	8004596 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	b2da      	uxtb	r2, r3
 8004584:	490c      	ldr	r1, [pc, #48]	@ (80045b8 <__NVIC_SetPriority+0x4c>)
 8004586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458a:	0112      	lsls	r2, r2, #4
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	440b      	add	r3, r1
 8004590:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004594:	e00a      	b.n	80045ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	b2da      	uxtb	r2, r3
 800459a:	4908      	ldr	r1, [pc, #32]	@ (80045bc <__NVIC_SetPriority+0x50>)
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	3b04      	subs	r3, #4
 80045a4:	0112      	lsls	r2, r2, #4
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	440b      	add	r3, r1
 80045aa:	761a      	strb	r2, [r3, #24]
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	e000e100 	.word	0xe000e100
 80045bc:	e000ed00 	.word	0xe000ed00

080045c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80045c4:	4b05      	ldr	r3, [pc, #20]	@ (80045dc <SysTick_Handler+0x1c>)
 80045c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80045c8:	f002 f880 	bl	80066cc <xTaskGetSchedulerState>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d001      	beq.n	80045d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80045d2:	f003 f859 	bl	8007688 <xPortSysTickHandler>
  }
}
 80045d6:	bf00      	nop
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	e000e010 	.word	0xe000e010

080045e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80045e4:	2100      	movs	r1, #0
 80045e6:	f06f 0004 	mvn.w	r0, #4
 80045ea:	f7ff ffbf 	bl	800456c <__NVIC_SetPriority>
#endif
}
 80045ee:	bf00      	nop
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045fa:	f3ef 8305 	mrs	r3, IPSR
 80045fe:	603b      	str	r3, [r7, #0]
  return(result);
 8004600:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004606:	f06f 0305 	mvn.w	r3, #5
 800460a:	607b      	str	r3, [r7, #4]
 800460c:	e00c      	b.n	8004628 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800460e:	4b0a      	ldr	r3, [pc, #40]	@ (8004638 <osKernelInitialize+0x44>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d105      	bne.n	8004622 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004616:	4b08      	ldr	r3, [pc, #32]	@ (8004638 <osKernelInitialize+0x44>)
 8004618:	2201      	movs	r2, #1
 800461a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800461c:	2300      	movs	r3, #0
 800461e:	607b      	str	r3, [r7, #4]
 8004620:	e002      	b.n	8004628 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004622:	f04f 33ff 	mov.w	r3, #4294967295
 8004626:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004628:	687b      	ldr	r3, [r7, #4]
}
 800462a:	4618      	mov	r0, r3
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	200006d8 	.word	0x200006d8

0800463c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004642:	f3ef 8305 	mrs	r3, IPSR
 8004646:	603b      	str	r3, [r7, #0]
  return(result);
 8004648:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <osKernelStart+0x1a>
    stat = osErrorISR;
 800464e:	f06f 0305 	mvn.w	r3, #5
 8004652:	607b      	str	r3, [r7, #4]
 8004654:	e010      	b.n	8004678 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004656:	4b0b      	ldr	r3, [pc, #44]	@ (8004684 <osKernelStart+0x48>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d109      	bne.n	8004672 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800465e:	f7ff ffbf 	bl	80045e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004662:	4b08      	ldr	r3, [pc, #32]	@ (8004684 <osKernelStart+0x48>)
 8004664:	2202      	movs	r2, #2
 8004666:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004668:	f001 fbbc 	bl	8005de4 <vTaskStartScheduler>
      stat = osOK;
 800466c:	2300      	movs	r3, #0
 800466e:	607b      	str	r3, [r7, #4]
 8004670:	e002      	b.n	8004678 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004672:	f04f 33ff 	mov.w	r3, #4294967295
 8004676:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004678:	687b      	ldr	r3, [r7, #4]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	200006d8 	.word	0x200006d8

08004688 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004688:	b580      	push	{r7, lr}
 800468a:	b08e      	sub	sp, #56	@ 0x38
 800468c:	af04      	add	r7, sp, #16
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004694:	2300      	movs	r3, #0
 8004696:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004698:	f3ef 8305 	mrs	r3, IPSR
 800469c:	617b      	str	r3, [r7, #20]
  return(result);
 800469e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d17e      	bne.n	80047a2 <osThreadNew+0x11a>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d07b      	beq.n	80047a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80046aa:	2380      	movs	r3, #128	@ 0x80
 80046ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80046ae:	2318      	movs	r3, #24
 80046b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80046b2:	2300      	movs	r3, #0
 80046b4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80046b6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d045      	beq.n	800474e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <osThreadNew+0x48>
        name = attr->name;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d008      	beq.n	80046f6 <osThreadNew+0x6e>
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	2b38      	cmp	r3, #56	@ 0x38
 80046e8:	d805      	bhi.n	80046f6 <osThreadNew+0x6e>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <osThreadNew+0x72>
        return (NULL);
 80046f6:	2300      	movs	r3, #0
 80046f8:	e054      	b.n	80047a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	089b      	lsrs	r3, r3, #2
 8004708:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00e      	beq.n	8004730 <osThreadNew+0xa8>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	2ba7      	cmp	r3, #167	@ 0xa7
 8004718:	d90a      	bls.n	8004730 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800471e:	2b00      	cmp	r3, #0
 8004720:	d006      	beq.n	8004730 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <osThreadNew+0xa8>
        mem = 1;
 800472a:	2301      	movs	r3, #1
 800472c:	61bb      	str	r3, [r7, #24]
 800472e:	e010      	b.n	8004752 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10c      	bne.n	8004752 <osThreadNew+0xca>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d108      	bne.n	8004752 <osThreadNew+0xca>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d104      	bne.n	8004752 <osThreadNew+0xca>
          mem = 0;
 8004748:	2300      	movs	r3, #0
 800474a:	61bb      	str	r3, [r7, #24]
 800474c:	e001      	b.n	8004752 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800474e:	2300      	movs	r3, #0
 8004750:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d110      	bne.n	800477a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004760:	9202      	str	r2, [sp, #8]
 8004762:	9301      	str	r3, [sp, #4]
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	6a3a      	ldr	r2, [r7, #32]
 800476c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f001 f944 	bl	80059fc <xTaskCreateStatic>
 8004774:	4603      	mov	r3, r0
 8004776:	613b      	str	r3, [r7, #16]
 8004778:	e013      	b.n	80047a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d110      	bne.n	80047a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	b29a      	uxth	r2, r3
 8004784:	f107 0310 	add.w	r3, r7, #16
 8004788:	9301      	str	r3, [sp, #4]
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f001 f992 	bl	8005abc <xTaskCreate>
 8004798:	4603      	mov	r3, r0
 800479a:	2b01      	cmp	r3, #1
 800479c:	d001      	beq.n	80047a2 <osThreadNew+0x11a>
            hTask = NULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047a2:	693b      	ldr	r3, [r7, #16]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3728      	adds	r7, #40	@ 0x28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047b4:	f3ef 8305 	mrs	r3, IPSR
 80047b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80047ba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <osDelay+0x1c>
    stat = osErrorISR;
 80047c0:	f06f 0305 	mvn.w	r3, #5
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	e007      	b.n	80047d8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d002      	beq.n	80047d8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f001 fad0 	bl	8005d78 <vTaskDelay>
    }
  }

  return (stat);
 80047d8:	68fb      	ldr	r3, [r7, #12]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b088      	sub	sp, #32
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80047ea:	2300      	movs	r3, #0
 80047ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047ee:	f3ef 8305 	mrs	r3, IPSR
 80047f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80047f4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d174      	bne.n	80048e4 <osMutexNew+0x102>
    if (attr != NULL) {
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	e001      	b.n	800480c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <osMutexNew+0x3a>
      rmtx = 1U;
 8004816:	2301      	movs	r3, #1
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	e001      	b.n	8004820 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d15c      	bne.n	80048e4 <osMutexNew+0x102>
      mem = -1;
 800482a:	f04f 33ff 	mov.w	r3, #4294967295
 800482e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d015      	beq.n	8004862 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d006      	beq.n	800484c <osMutexNew+0x6a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	2b4f      	cmp	r3, #79	@ 0x4f
 8004844:	d902      	bls.n	800484c <osMutexNew+0x6a>
          mem = 1;
 8004846:	2301      	movs	r3, #1
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	e00c      	b.n	8004866 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d108      	bne.n	8004866 <osMutexNew+0x84>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d104      	bne.n	8004866 <osMutexNew+0x84>
            mem = 0;
 800485c:	2300      	movs	r3, #0
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	e001      	b.n	8004866 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004862:	2300      	movs	r3, #0
 8004864:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d112      	bne.n	8004892 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d007      	beq.n	8004882 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	4619      	mov	r1, r3
 8004878:	2004      	movs	r0, #4
 800487a:	f000 fb20 	bl	8004ebe <xQueueCreateMutexStatic>
 800487e:	61f8      	str	r0, [r7, #28]
 8004880:	e016      	b.n	80048b0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	4619      	mov	r1, r3
 8004888:	2001      	movs	r0, #1
 800488a:	f000 fb18 	bl	8004ebe <xQueueCreateMutexStatic>
 800488e:	61f8      	str	r0, [r7, #28]
 8004890:	e00e      	b.n	80048b0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10b      	bne.n	80048b0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d004      	beq.n	80048a8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800489e:	2004      	movs	r0, #4
 80048a0:	f000 faf5 	bl	8004e8e <xQueueCreateMutex>
 80048a4:	61f8      	str	r0, [r7, #28]
 80048a6:	e003      	b.n	80048b0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80048a8:	2001      	movs	r0, #1
 80048aa:	f000 faf0 	bl	8004e8e <xQueueCreateMutex>
 80048ae:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00c      	beq.n	80048d0 <osMutexNew+0xee>
        if (attr != NULL) {
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <osMutexNew+0xe2>
          name = attr->name;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	e001      	b.n	80048c8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80048c4:	2300      	movs	r3, #0
 80048c6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80048c8:	68f9      	ldr	r1, [r7, #12]
 80048ca:	69f8      	ldr	r0, [r7, #28]
 80048cc:	f001 f838 	bl	8005940 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d006      	beq.n	80048e4 <osMutexNew+0x102>
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80048e4:	69fb      	ldr	r3, [r7, #28]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3720      	adds	r7, #32
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b086      	sub	sp, #24
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f023 0301 	bic.w	r3, r3, #1
 80048fe:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004908:	2300      	movs	r3, #0
 800490a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800490c:	f3ef 8305 	mrs	r3, IPSR
 8004910:	60bb      	str	r3, [r7, #8]
  return(result);
 8004912:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004918:	f06f 0305 	mvn.w	r3, #5
 800491c:	617b      	str	r3, [r7, #20]
 800491e:	e02c      	b.n	800497a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d103      	bne.n	800492e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004926:	f06f 0303 	mvn.w	r3, #3
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	e025      	b.n	800497a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d011      	beq.n	8004958 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004934:	6839      	ldr	r1, [r7, #0]
 8004936:	6938      	ldr	r0, [r7, #16]
 8004938:	f000 fb11 	bl	8004f5e <xQueueTakeMutexRecursive>
 800493c:	4603      	mov	r3, r0
 800493e:	2b01      	cmp	r3, #1
 8004940:	d01b      	beq.n	800497a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004948:	f06f 0301 	mvn.w	r3, #1
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	e014      	b.n	800497a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004950:	f06f 0302 	mvn.w	r3, #2
 8004954:	617b      	str	r3, [r7, #20]
 8004956:	e010      	b.n	800497a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004958:	6839      	ldr	r1, [r7, #0]
 800495a:	6938      	ldr	r0, [r7, #16]
 800495c:	f000 fdb8 	bl	80054d0 <xQueueSemaphoreTake>
 8004960:	4603      	mov	r3, r0
 8004962:	2b01      	cmp	r3, #1
 8004964:	d009      	beq.n	800497a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800496c:	f06f 0301 	mvn.w	r3, #1
 8004970:	617b      	str	r3, [r7, #20]
 8004972:	e002      	b.n	800497a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004974:	f06f 0302 	mvn.w	r3, #2
 8004978:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800497a:	697b      	ldr	r3, [r7, #20]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f023 0301 	bic.w	r3, r3, #1
 8004992:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800499c:	2300      	movs	r3, #0
 800499e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049a0:	f3ef 8305 	mrs	r3, IPSR
 80049a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80049a6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <osMutexRelease+0x30>
    stat = osErrorISR;
 80049ac:	f06f 0305 	mvn.w	r3, #5
 80049b0:	617b      	str	r3, [r7, #20]
 80049b2:	e01f      	b.n	80049f4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d103      	bne.n	80049c2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80049ba:	f06f 0303 	mvn.w	r3, #3
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	e018      	b.n	80049f4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d009      	beq.n	80049dc <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80049c8:	6938      	ldr	r0, [r7, #16]
 80049ca:	f000 fa93 	bl	8004ef4 <xQueueGiveMutexRecursive>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d00f      	beq.n	80049f4 <osMutexRelease+0x70>
        stat = osErrorResource;
 80049d4:	f06f 0302 	mvn.w	r3, #2
 80049d8:	617b      	str	r3, [r7, #20]
 80049da:	e00b      	b.n	80049f4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80049dc:	2300      	movs	r3, #0
 80049de:	2200      	movs	r2, #0
 80049e0:	2100      	movs	r1, #0
 80049e2:	6938      	ldr	r0, [r7, #16]
 80049e4:	f000 faf2 	bl	8004fcc <xQueueGenericSend>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d002      	beq.n	80049f4 <osMutexRelease+0x70>
        stat = osErrorResource;
 80049ee:	f06f 0302 	mvn.w	r3, #2
 80049f2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80049f4:	697b      	ldr	r3, [r7, #20]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4a07      	ldr	r2, [pc, #28]	@ (8004a2c <vApplicationGetIdleTaskMemory+0x2c>)
 8004a10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	4a06      	ldr	r2, [pc, #24]	@ (8004a30 <vApplicationGetIdleTaskMemory+0x30>)
 8004a16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2280      	movs	r2, #128	@ 0x80
 8004a1c:	601a      	str	r2, [r3, #0]
}
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	200006dc 	.word	0x200006dc
 8004a30:	20000784 	.word	0x20000784

08004a34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4a07      	ldr	r2, [pc, #28]	@ (8004a60 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	4a06      	ldr	r2, [pc, #24]	@ (8004a64 <vApplicationGetTimerTaskMemory+0x30>)
 8004a4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a52:	601a      	str	r2, [r3, #0]
}
 8004a54:	bf00      	nop
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	20000984 	.word	0x20000984
 8004a64:	20000a2c 	.word	0x20000a2c

08004a68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f103 0208 	add.w	r2, r3, #8
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f103 0208 	add.w	r2, r3, #8
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f103 0208 	add.w	r2, r3, #8
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b085      	sub	sp, #20
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	601a      	str	r2, [r3, #0]
}
 8004afe:	bf00      	nop
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b085      	sub	sp, #20
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b20:	d103      	bne.n	8004b2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	e00c      	b.n	8004b44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3308      	adds	r3, #8
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	e002      	b.n	8004b38 <vListInsert+0x2e>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d2f6      	bcs.n	8004b32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	601a      	str	r2, [r3, #0]
}
 8004b70:	bf00      	nop
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	6892      	ldr	r2, [r2, #8]
 8004b92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6852      	ldr	r2, [r2, #4]
 8004b9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d103      	bne.n	8004bb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	1e5a      	subs	r2, r3, #1
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10b      	bne.n	8004bfc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004bf6:	bf00      	nop
 8004bf8:	bf00      	nop
 8004bfa:	e7fd      	b.n	8004bf8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004bfc:	f002 fcb4 	bl	8007568 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c08:	68f9      	ldr	r1, [r7, #12]
 8004c0a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c0c:	fb01 f303 	mul.w	r3, r1, r3
 8004c10:	441a      	add	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	68f9      	ldr	r1, [r7, #12]
 8004c30:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c32:	fb01 f303 	mul.w	r3, r1, r3
 8004c36:	441a      	add	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	22ff      	movs	r2, #255	@ 0xff
 8004c40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	22ff      	movs	r2, #255	@ 0xff
 8004c48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d114      	bne.n	8004c7c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d01a      	beq.n	8004c90 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	3310      	adds	r3, #16
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f001 fb5e 	bl	8006320 <xTaskRemoveFromEventList>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d012      	beq.n	8004c90 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca0 <xQueueGenericReset+0xd0>)
 8004c6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	e009      	b.n	8004c90 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3310      	adds	r3, #16
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff fef1 	bl	8004a68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3324      	adds	r3, #36	@ 0x24
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff feec 	bl	8004a68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c90:	f002 fc9c 	bl	80075cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c94:	2301      	movs	r3, #1
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	e000ed04 	.word	0xe000ed04

08004ca4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08e      	sub	sp, #56	@ 0x38
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10b      	bne.n	8004cd0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004cca:	bf00      	nop
 8004ccc:	bf00      	nop
 8004cce:	e7fd      	b.n	8004ccc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10b      	bne.n	8004cee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ce8:	bf00      	nop
 8004cea:	bf00      	nop
 8004cec:	e7fd      	b.n	8004cea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <xQueueGenericCreateStatic+0x56>
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <xQueueGenericCreateStatic+0x5a>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <xQueueGenericCreateStatic+0x5c>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10b      	bne.n	8004d1c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	623b      	str	r3, [r7, #32]
}
 8004d16:	bf00      	nop
 8004d18:	bf00      	nop
 8004d1a:	e7fd      	b.n	8004d18 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d102      	bne.n	8004d28 <xQueueGenericCreateStatic+0x84>
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <xQueueGenericCreateStatic+0x88>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e000      	b.n	8004d2e <xQueueGenericCreateStatic+0x8a>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10b      	bne.n	8004d4a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	61fb      	str	r3, [r7, #28]
}
 8004d44:	bf00      	nop
 8004d46:	bf00      	nop
 8004d48:	e7fd      	b.n	8004d46 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d4a:	2350      	movs	r3, #80	@ 0x50
 8004d4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2b50      	cmp	r3, #80	@ 0x50
 8004d52:	d00b      	beq.n	8004d6c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	61bb      	str	r3, [r7, #24]
}
 8004d66:	bf00      	nop
 8004d68:	bf00      	nop
 8004d6a:	e7fd      	b.n	8004d68 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d6c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00d      	beq.n	8004d94 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d80:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	68b9      	ldr	r1, [r7, #8]
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 f840 	bl	8004e14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3730      	adds	r7, #48	@ 0x30
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b08a      	sub	sp, #40	@ 0x28
 8004da2:	af02      	add	r7, sp, #8
 8004da4:	60f8      	str	r0, [r7, #12]
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	4613      	mov	r3, r2
 8004daa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10b      	bne.n	8004dca <xQueueGenericCreate+0x2c>
	__asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	613b      	str	r3, [r7, #16]
}
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop
 8004dc8:	e7fd      	b.n	8004dc6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	fb02 f303 	mul.w	r3, r2, r3
 8004dd2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	3350      	adds	r3, #80	@ 0x50
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f002 fce7 	bl	80077ac <pvPortMalloc>
 8004dde:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d011      	beq.n	8004e0a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	3350      	adds	r3, #80	@ 0x50
 8004dee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004df8:	79fa      	ldrb	r2, [r7, #7]
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	68b9      	ldr	r1, [r7, #8]
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 f805 	bl	8004e14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e0a:	69bb      	ldr	r3, [r7, #24]
	}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3720      	adds	r7, #32
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d103      	bne.n	8004e30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	e002      	b.n	8004e36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e42:	2101      	movs	r1, #1
 8004e44:	69b8      	ldr	r0, [r7, #24]
 8004e46:	f7ff fec3 	bl	8004bd0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	78fa      	ldrb	r2, [r7, #3]
 8004e4e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e52:	bf00      	nop
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b082      	sub	sp, #8
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00e      	beq.n	8004e86 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2100      	movs	r1, #0
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f8a3 	bl	8004fcc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b086      	sub	sp, #24
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	4603      	mov	r3, r0
 8004e96:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004ea0:	79fb      	ldrb	r3, [r7, #7]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	6939      	ldr	r1, [r7, #16]
 8004ea6:	6978      	ldr	r0, [r7, #20]
 8004ea8:	f7ff ff79 	bl	8004d9e <xQueueGenericCreate>
 8004eac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f7ff ffd3 	bl	8004e5a <prvInitialiseMutex>

		return xNewQueue;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
	}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b088      	sub	sp, #32
 8004ec2:	af02      	add	r7, sp, #8
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	6039      	str	r1, [r7, #0]
 8004ec8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004ed2:	79fb      	ldrb	r3, [r7, #7]
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	6939      	ldr	r1, [r7, #16]
 8004edc:	6978      	ldr	r0, [r7, #20]
 8004ede:	f7ff fee1 	bl	8004ca4 <xQueueGenericCreateStatic>
 8004ee2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f7ff ffb8 	bl	8004e5a <prvInitialiseMutex>

		return xNewQueue;
 8004eea:	68fb      	ldr	r3, [r7, #12]
	}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004ef4:	b590      	push	{r4, r7, lr}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10b      	bne.n	8004f1e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8004f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	60fb      	str	r3, [r7, #12]
}
 8004f18:	bf00      	nop
 8004f1a:	bf00      	nop
 8004f1c:	e7fd      	b.n	8004f1a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	689c      	ldr	r4, [r3, #8]
 8004f22:	f001 fbc3 	bl	80066ac <xTaskGetCurrentTaskHandle>
 8004f26:	4603      	mov	r3, r0
 8004f28:	429c      	cmp	r4, r3
 8004f2a:	d111      	bne.n	8004f50 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	1e5a      	subs	r2, r3, #1
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d105      	bne.n	8004f4a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004f3e:	2300      	movs	r3, #0
 8004f40:	2200      	movs	r2, #0
 8004f42:	2100      	movs	r1, #0
 8004f44:	6938      	ldr	r0, [r7, #16]
 8004f46:	f000 f841 	bl	8004fcc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	e001      	b.n	8004f54 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004f54:	697b      	ldr	r3, [r7, #20]
	}
 8004f56:	4618      	mov	r0, r3
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd90      	pop	{r4, r7, pc}

08004f5e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004f5e:	b590      	push	{r4, r7, lr}
 8004f60:	b087      	sub	sp, #28
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10b      	bne.n	8004f8a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	60fb      	str	r3, [r7, #12]
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop
 8004f88:	e7fd      	b.n	8004f86 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	689c      	ldr	r4, [r3, #8]
 8004f8e:	f001 fb8d 	bl	80066ac <xTaskGetCurrentTaskHandle>
 8004f92:	4603      	mov	r3, r0
 8004f94:	429c      	cmp	r4, r3
 8004f96:	d107      	bne.n	8004fa8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	e00c      	b.n	8004fc2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004fa8:	6839      	ldr	r1, [r7, #0]
 8004faa:	6938      	ldr	r0, [r7, #16]
 8004fac:	f000 fa90 	bl	80054d0 <xQueueSemaphoreTake>
 8004fb0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d004      	beq.n	8004fc2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004fc2:	697b      	ldr	r3, [r7, #20]
	}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	371c      	adds	r7, #28
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd90      	pop	{r4, r7, pc}

08004fcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08e      	sub	sp, #56	@ 0x38
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10b      	bne.n	8005000 <xQueueGenericSend+0x34>
	__asm volatile
 8004fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ffa:	bf00      	nop
 8004ffc:	bf00      	nop
 8004ffe:	e7fd      	b.n	8004ffc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d103      	bne.n	800500e <xQueueGenericSend+0x42>
 8005006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <xQueueGenericSend+0x46>
 800500e:	2301      	movs	r3, #1
 8005010:	e000      	b.n	8005014 <xQueueGenericSend+0x48>
 8005012:	2300      	movs	r3, #0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10b      	bne.n	8005030 <xQueueGenericSend+0x64>
	__asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800502a:	bf00      	nop
 800502c:	bf00      	nop
 800502e:	e7fd      	b.n	800502c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	2b02      	cmp	r3, #2
 8005034:	d103      	bne.n	800503e <xQueueGenericSend+0x72>
 8005036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800503a:	2b01      	cmp	r3, #1
 800503c:	d101      	bne.n	8005042 <xQueueGenericSend+0x76>
 800503e:	2301      	movs	r3, #1
 8005040:	e000      	b.n	8005044 <xQueueGenericSend+0x78>
 8005042:	2300      	movs	r3, #0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10b      	bne.n	8005060 <xQueueGenericSend+0x94>
	__asm volatile
 8005048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504c:	f383 8811 	msr	BASEPRI, r3
 8005050:	f3bf 8f6f 	isb	sy
 8005054:	f3bf 8f4f 	dsb	sy
 8005058:	623b      	str	r3, [r7, #32]
}
 800505a:	bf00      	nop
 800505c:	bf00      	nop
 800505e:	e7fd      	b.n	800505c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005060:	f001 fb34 	bl	80066cc <xTaskGetSchedulerState>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d102      	bne.n	8005070 <xQueueGenericSend+0xa4>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <xQueueGenericSend+0xa8>
 8005070:	2301      	movs	r3, #1
 8005072:	e000      	b.n	8005076 <xQueueGenericSend+0xaa>
 8005074:	2300      	movs	r3, #0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10b      	bne.n	8005092 <xQueueGenericSend+0xc6>
	__asm volatile
 800507a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	61fb      	str	r3, [r7, #28]
}
 800508c:	bf00      	nop
 800508e:	bf00      	nop
 8005090:	e7fd      	b.n	800508e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005092:	f002 fa69 	bl	8007568 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005098:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800509a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800509e:	429a      	cmp	r2, r3
 80050a0:	d302      	bcc.n	80050a8 <xQueueGenericSend+0xdc>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d129      	bne.n	80050fc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	68b9      	ldr	r1, [r7, #8]
 80050ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050ae:	f000 fb37 	bl	8005720 <prvCopyDataToQueue>
 80050b2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d010      	beq.n	80050de <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050be:	3324      	adds	r3, #36	@ 0x24
 80050c0:	4618      	mov	r0, r3
 80050c2:	f001 f92d 	bl	8006320 <xTaskRemoveFromEventList>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d013      	beq.n	80050f4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80050cc:	4b3f      	ldr	r3, [pc, #252]	@ (80051cc <xQueueGenericSend+0x200>)
 80050ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	e00a      	b.n	80050f4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80050de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80050e4:	4b39      	ldr	r3, [pc, #228]	@ (80051cc <xQueueGenericSend+0x200>)
 80050e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80050f4:	f002 fa6a 	bl	80075cc <vPortExitCritical>
				return pdPASS;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e063      	b.n	80051c4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d103      	bne.n	800510a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005102:	f002 fa63 	bl	80075cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005106:	2300      	movs	r3, #0
 8005108:	e05c      	b.n	80051c4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800510a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800510c:	2b00      	cmp	r3, #0
 800510e:	d106      	bne.n	800511e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005110:	f107 0314 	add.w	r3, r7, #20
 8005114:	4618      	mov	r0, r3
 8005116:	f001 f967 	bl	80063e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800511a:	2301      	movs	r3, #1
 800511c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800511e:	f002 fa55 	bl	80075cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005122:	f000 fecf 	bl	8005ec4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005126:	f002 fa1f 	bl	8007568 <vPortEnterCritical>
 800512a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005130:	b25b      	sxtb	r3, r3
 8005132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005136:	d103      	bne.n	8005140 <xQueueGenericSend+0x174>
 8005138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005142:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005146:	b25b      	sxtb	r3, r3
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514c:	d103      	bne.n	8005156 <xQueueGenericSend+0x18a>
 800514e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005156:	f002 fa39 	bl	80075cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800515a:	1d3a      	adds	r2, r7, #4
 800515c:	f107 0314 	add.w	r3, r7, #20
 8005160:	4611      	mov	r1, r2
 8005162:	4618      	mov	r0, r3
 8005164:	f001 f956 	bl	8006414 <xTaskCheckForTimeOut>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d124      	bne.n	80051b8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800516e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005170:	f000 fbce 	bl	8005910 <prvIsQueueFull>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d018      	beq.n	80051ac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800517a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517c:	3310      	adds	r3, #16
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	4611      	mov	r1, r2
 8005182:	4618      	mov	r0, r3
 8005184:	f001 f87a 	bl	800627c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005188:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800518a:	f000 fb59 	bl	8005840 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800518e:	f000 fea7 	bl	8005ee0 <xTaskResumeAll>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	f47f af7c 	bne.w	8005092 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800519a:	4b0c      	ldr	r3, [pc, #48]	@ (80051cc <xQueueGenericSend+0x200>)
 800519c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	e772      	b.n	8005092 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80051ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051ae:	f000 fb47 	bl	8005840 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051b2:	f000 fe95 	bl	8005ee0 <xTaskResumeAll>
 80051b6:	e76c      	b.n	8005092 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80051b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051ba:	f000 fb41 	bl	8005840 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051be:	f000 fe8f 	bl	8005ee0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80051c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3738      	adds	r7, #56	@ 0x38
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	e000ed04 	.word	0xe000ed04

080051d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b090      	sub	sp, #64	@ 0x40
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
 80051dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80051e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10b      	bne.n	8005200 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051fa:	bf00      	nop
 80051fc:	bf00      	nop
 80051fe:	e7fd      	b.n	80051fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d103      	bne.n	800520e <xQueueGenericSendFromISR+0x3e>
 8005206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <xQueueGenericSendFromISR+0x42>
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <xQueueGenericSendFromISR+0x44>
 8005212:	2300      	movs	r3, #0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10b      	bne.n	8005230 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800522a:	bf00      	nop
 800522c:	bf00      	nop
 800522e:	e7fd      	b.n	800522c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d103      	bne.n	800523e <xQueueGenericSendFromISR+0x6e>
 8005236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800523a:	2b01      	cmp	r3, #1
 800523c:	d101      	bne.n	8005242 <xQueueGenericSendFromISR+0x72>
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <xQueueGenericSendFromISR+0x74>
 8005242:	2300      	movs	r3, #0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10b      	bne.n	8005260 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	623b      	str	r3, [r7, #32]
}
 800525a:	bf00      	nop
 800525c:	bf00      	nop
 800525e:	e7fd      	b.n	800525c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005260:	f002 fa62 	bl	8007728 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005264:	f3ef 8211 	mrs	r2, BASEPRI
 8005268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	61fa      	str	r2, [r7, #28]
 800527a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800527c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800527e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005282:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005288:	429a      	cmp	r2, r3
 800528a:	d302      	bcc.n	8005292 <xQueueGenericSendFromISR+0xc2>
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2b02      	cmp	r3, #2
 8005290:	d12f      	bne.n	80052f2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005294:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005298:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800529c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800529e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80052a8:	f000 fa3a 	bl	8005720 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80052ac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80052b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b4:	d112      	bne.n	80052dc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d016      	beq.n	80052ec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c0:	3324      	adds	r3, #36	@ 0x24
 80052c2:	4618      	mov	r0, r3
 80052c4:	f001 f82c 	bl	8006320 <xTaskRemoveFromEventList>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00e      	beq.n	80052ec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00b      	beq.n	80052ec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	e007      	b.n	80052ec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80052dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80052e0:	3301      	adds	r3, #1
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	b25a      	sxtb	r2, r3
 80052e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80052ec:	2301      	movs	r3, #1
 80052ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80052f0:	e001      	b.n	80052f6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80052f2:	2300      	movs	r3, #0
 80052f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052f8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005300:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005304:	4618      	mov	r0, r3
 8005306:	3740      	adds	r7, #64	@ 0x40
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08c      	sub	sp, #48	@ 0x30
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005318:	2300      	movs	r3, #0
 800531a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10b      	bne.n	800533e <xQueueReceive+0x32>
	__asm volatile
 8005326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	623b      	str	r3, [r7, #32]
}
 8005338:	bf00      	nop
 800533a:	bf00      	nop
 800533c:	e7fd      	b.n	800533a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d103      	bne.n	800534c <xQueueReceive+0x40>
 8005344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <xQueueReceive+0x44>
 800534c:	2301      	movs	r3, #1
 800534e:	e000      	b.n	8005352 <xQueueReceive+0x46>
 8005350:	2300      	movs	r3, #0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10b      	bne.n	800536e <xQueueReceive+0x62>
	__asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	61fb      	str	r3, [r7, #28]
}
 8005368:	bf00      	nop
 800536a:	bf00      	nop
 800536c:	e7fd      	b.n	800536a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800536e:	f001 f9ad 	bl	80066cc <xTaskGetSchedulerState>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d102      	bne.n	800537e <xQueueReceive+0x72>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <xQueueReceive+0x76>
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <xQueueReceive+0x78>
 8005382:	2300      	movs	r3, #0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10b      	bne.n	80053a0 <xQueueReceive+0x94>
	__asm volatile
 8005388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	61bb      	str	r3, [r7, #24]
}
 800539a:	bf00      	nop
 800539c:	bf00      	nop
 800539e:	e7fd      	b.n	800539c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053a0:	f002 f8e2 	bl	8007568 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d01f      	beq.n	80053f0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053b0:	68b9      	ldr	r1, [r7, #8]
 80053b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053b4:	f000 fa1e 	bl	80057f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ba:	1e5a      	subs	r2, r3, #1
 80053bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053be:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00f      	beq.n	80053e8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ca:	3310      	adds	r3, #16
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 ffa7 	bl	8006320 <xTaskRemoveFromEventList>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d007      	beq.n	80053e8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80053d8:	4b3c      	ldr	r3, [pc, #240]	@ (80054cc <xQueueReceive+0x1c0>)
 80053da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80053e8:	f002 f8f0 	bl	80075cc <vPortExitCritical>
				return pdPASS;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e069      	b.n	80054c4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d103      	bne.n	80053fe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053f6:	f002 f8e9 	bl	80075cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053fa:	2300      	movs	r3, #0
 80053fc:	e062      	b.n	80054c4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005400:	2b00      	cmp	r3, #0
 8005402:	d106      	bne.n	8005412 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005404:	f107 0310 	add.w	r3, r7, #16
 8005408:	4618      	mov	r0, r3
 800540a:	f000 ffed 	bl	80063e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800540e:	2301      	movs	r3, #1
 8005410:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005412:	f002 f8db 	bl	80075cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005416:	f000 fd55 	bl	8005ec4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800541a:	f002 f8a5 	bl	8007568 <vPortEnterCritical>
 800541e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005420:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005424:	b25b      	sxtb	r3, r3
 8005426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542a:	d103      	bne.n	8005434 <xQueueReceive+0x128>
 800542c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005436:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800543a:	b25b      	sxtb	r3, r3
 800543c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005440:	d103      	bne.n	800544a <xQueueReceive+0x13e>
 8005442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800544a:	f002 f8bf 	bl	80075cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800544e:	1d3a      	adds	r2, r7, #4
 8005450:	f107 0310 	add.w	r3, r7, #16
 8005454:	4611      	mov	r1, r2
 8005456:	4618      	mov	r0, r3
 8005458:	f000 ffdc 	bl	8006414 <xTaskCheckForTimeOut>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d123      	bne.n	80054aa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005462:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005464:	f000 fa3e 	bl	80058e4 <prvIsQueueEmpty>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d017      	beq.n	800549e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800546e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005470:	3324      	adds	r3, #36	@ 0x24
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	4611      	mov	r1, r2
 8005476:	4618      	mov	r0, r3
 8005478:	f000 ff00 	bl	800627c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800547c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800547e:	f000 f9df 	bl	8005840 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005482:	f000 fd2d 	bl	8005ee0 <xTaskResumeAll>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d189      	bne.n	80053a0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800548c:	4b0f      	ldr	r3, [pc, #60]	@ (80054cc <xQueueReceive+0x1c0>)
 800548e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	e780      	b.n	80053a0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800549e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054a0:	f000 f9ce 	bl	8005840 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054a4:	f000 fd1c 	bl	8005ee0 <xTaskResumeAll>
 80054a8:	e77a      	b.n	80053a0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80054aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054ac:	f000 f9c8 	bl	8005840 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054b0:	f000 fd16 	bl	8005ee0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054b6:	f000 fa15 	bl	80058e4 <prvIsQueueEmpty>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f43f af6f 	beq.w	80053a0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80054c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3730      	adds	r7, #48	@ 0x30
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	e000ed04 	.word	0xe000ed04

080054d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08e      	sub	sp, #56	@ 0x38
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80054da:	2300      	movs	r3, #0
 80054dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80054e2:	2300      	movs	r3, #0
 80054e4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10b      	bne.n	8005504 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	623b      	str	r3, [r7, #32]
}
 80054fe:	bf00      	nop
 8005500:	bf00      	nop
 8005502:	e7fd      	b.n	8005500 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00b      	beq.n	8005524 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800550c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	61fb      	str	r3, [r7, #28]
}
 800551e:	bf00      	nop
 8005520:	bf00      	nop
 8005522:	e7fd      	b.n	8005520 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005524:	f001 f8d2 	bl	80066cc <xTaskGetSchedulerState>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d102      	bne.n	8005534 <xQueueSemaphoreTake+0x64>
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <xQueueSemaphoreTake+0x68>
 8005534:	2301      	movs	r3, #1
 8005536:	e000      	b.n	800553a <xQueueSemaphoreTake+0x6a>
 8005538:	2300      	movs	r3, #0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10b      	bne.n	8005556 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	61bb      	str	r3, [r7, #24]
}
 8005550:	bf00      	nop
 8005552:	bf00      	nop
 8005554:	e7fd      	b.n	8005552 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005556:	f002 f807 	bl	8007568 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800555a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800555c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800555e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005562:	2b00      	cmp	r3, #0
 8005564:	d024      	beq.n	80055b0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005568:	1e5a      	subs	r2, r3, #1
 800556a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800556e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d104      	bne.n	8005580 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005576:	f001 fa23 	bl	80069c0 <pvTaskIncrementMutexHeldCount>
 800557a:	4602      	mov	r2, r0
 800557c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800557e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00f      	beq.n	80055a8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558a:	3310      	adds	r3, #16
 800558c:	4618      	mov	r0, r3
 800558e:	f000 fec7 	bl	8006320 <xTaskRemoveFromEventList>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d007      	beq.n	80055a8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005598:	4b54      	ldr	r3, [pc, #336]	@ (80056ec <xQueueSemaphoreTake+0x21c>)
 800559a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055a8:	f002 f810 	bl	80075cc <vPortExitCritical>
				return pdPASS;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e098      	b.n	80056e2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d112      	bne.n	80055dc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80055b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00b      	beq.n	80055d4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	617b      	str	r3, [r7, #20]
}
 80055ce:	bf00      	nop
 80055d0:	bf00      	nop
 80055d2:	e7fd      	b.n	80055d0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80055d4:	f001 fffa 	bl	80075cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055d8:	2300      	movs	r3, #0
 80055da:	e082      	b.n	80056e2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d106      	bne.n	80055f0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055e2:	f107 030c 	add.w	r3, r7, #12
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fefe 	bl	80063e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055ec:	2301      	movs	r3, #1
 80055ee:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055f0:	f001 ffec 	bl	80075cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055f4:	f000 fc66 	bl	8005ec4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055f8:	f001 ffb6 	bl	8007568 <vPortEnterCritical>
 80055fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005602:	b25b      	sxtb	r3, r3
 8005604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005608:	d103      	bne.n	8005612 <xQueueSemaphoreTake+0x142>
 800560a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005614:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005618:	b25b      	sxtb	r3, r3
 800561a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561e:	d103      	bne.n	8005628 <xQueueSemaphoreTake+0x158>
 8005620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005628:	f001 ffd0 	bl	80075cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800562c:	463a      	mov	r2, r7
 800562e:	f107 030c 	add.w	r3, r7, #12
 8005632:	4611      	mov	r1, r2
 8005634:	4618      	mov	r0, r3
 8005636:	f000 feed 	bl	8006414 <xTaskCheckForTimeOut>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d132      	bne.n	80056a6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005640:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005642:	f000 f94f 	bl	80058e4 <prvIsQueueEmpty>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d026      	beq.n	800569a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800564c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d109      	bne.n	8005668 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005654:	f001 ff88 	bl	8007568 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	4618      	mov	r0, r3
 800565e:	f001 f853 	bl	8006708 <xTaskPriorityInherit>
 8005662:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005664:	f001 ffb2 	bl	80075cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800566a:	3324      	adds	r3, #36	@ 0x24
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	4611      	mov	r1, r2
 8005670:	4618      	mov	r0, r3
 8005672:	f000 fe03 	bl	800627c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005676:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005678:	f000 f8e2 	bl	8005840 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800567c:	f000 fc30 	bl	8005ee0 <xTaskResumeAll>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	f47f af67 	bne.w	8005556 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005688:	4b18      	ldr	r3, [pc, #96]	@ (80056ec <xQueueSemaphoreTake+0x21c>)
 800568a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	e75d      	b.n	8005556 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800569a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800569c:	f000 f8d0 	bl	8005840 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056a0:	f000 fc1e 	bl	8005ee0 <xTaskResumeAll>
 80056a4:	e757      	b.n	8005556 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80056a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80056a8:	f000 f8ca 	bl	8005840 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056ac:	f000 fc18 	bl	8005ee0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80056b2:	f000 f917 	bl	80058e4 <prvIsQueueEmpty>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f43f af4c 	beq.w	8005556 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80056be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00d      	beq.n	80056e0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80056c4:	f001 ff50 	bl	8007568 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80056c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80056ca:	f000 f811 	bl	80056f0 <prvGetDisinheritPriorityAfterTimeout>
 80056ce:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80056d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056d6:	4618      	mov	r0, r3
 80056d8:	f001 f8ee 	bl	80068b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80056dc:	f001 ff76 	bl	80075cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80056e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3738      	adds	r7, #56	@ 0x38
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	e000ed04 	.word	0xe000ed04

080056f0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d006      	beq.n	800570e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	e001      	b.n	8005712 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800570e:	2300      	movs	r3, #0
 8005710:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005712:	68fb      	ldr	r3, [r7, #12]
	}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800572c:	2300      	movs	r3, #0
 800572e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005734:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10d      	bne.n	800575a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d14d      	bne.n	80057e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	4618      	mov	r0, r3
 800574c:	f001 f844 	bl	80067d8 <xTaskPriorityDisinherit>
 8005750:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	609a      	str	r2, [r3, #8]
 8005758:	e043      	b.n	80057e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d119      	bne.n	8005794 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6858      	ldr	r0, [r3, #4]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005768:	461a      	mov	r2, r3
 800576a:	68b9      	ldr	r1, [r7, #8]
 800576c:	f002 fbf5 	bl	8007f5a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005778:	441a      	add	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	429a      	cmp	r2, r3
 8005788:	d32b      	bcc.n	80057e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	605a      	str	r2, [r3, #4]
 8005792:	e026      	b.n	80057e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	68d8      	ldr	r0, [r3, #12]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579c:	461a      	mov	r2, r3
 800579e:	68b9      	ldr	r1, [r7, #8]
 80057a0:	f002 fbdb 	bl	8007f5a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	68da      	ldr	r2, [r3, #12]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ac:	425b      	negs	r3, r3
 80057ae:	441a      	add	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	68da      	ldr	r2, [r3, #12]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d207      	bcs.n	80057d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c8:	425b      	negs	r3, r3
 80057ca:	441a      	add	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d105      	bne.n	80057e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	3b01      	subs	r3, #1
 80057e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80057ea:	697b      	ldr	r3, [r7, #20]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3718      	adds	r7, #24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005802:	2b00      	cmp	r3, #0
 8005804:	d018      	beq.n	8005838 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580e:	441a      	add	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	429a      	cmp	r2, r3
 800581e:	d303      	bcc.n	8005828 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68d9      	ldr	r1, [r3, #12]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005830:	461a      	mov	r2, r3
 8005832:	6838      	ldr	r0, [r7, #0]
 8005834:	f002 fb91 	bl	8007f5a <memcpy>
	}
}
 8005838:	bf00      	nop
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005848:	f001 fe8e 	bl	8007568 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005852:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005854:	e011      	b.n	800587a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585a:	2b00      	cmp	r3, #0
 800585c:	d012      	beq.n	8005884 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	3324      	adds	r3, #36	@ 0x24
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fd5c 	bl	8006320 <xTaskRemoveFromEventList>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800586e:	f000 fe35 	bl	80064dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005872:	7bfb      	ldrb	r3, [r7, #15]
 8005874:	3b01      	subs	r3, #1
 8005876:	b2db      	uxtb	r3, r3
 8005878:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800587a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800587e:	2b00      	cmp	r3, #0
 8005880:	dce9      	bgt.n	8005856 <prvUnlockQueue+0x16>
 8005882:	e000      	b.n	8005886 <prvUnlockQueue+0x46>
					break;
 8005884:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	22ff      	movs	r2, #255	@ 0xff
 800588a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800588e:	f001 fe9d 	bl	80075cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005892:	f001 fe69 	bl	8007568 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800589c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800589e:	e011      	b.n	80058c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d012      	beq.n	80058ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3310      	adds	r3, #16
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 fd37 	bl	8006320 <xTaskRemoveFromEventList>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80058b8:	f000 fe10 	bl	80064dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80058bc:	7bbb      	ldrb	r3, [r7, #14]
 80058be:	3b01      	subs	r3, #1
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	dce9      	bgt.n	80058a0 <prvUnlockQueue+0x60>
 80058cc:	e000      	b.n	80058d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80058ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	22ff      	movs	r2, #255	@ 0xff
 80058d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80058d8:	f001 fe78 	bl	80075cc <vPortExitCritical>
}
 80058dc:	bf00      	nop
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058ec:	f001 fe3c 	bl	8007568 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d102      	bne.n	80058fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80058f8:	2301      	movs	r3, #1
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	e001      	b.n	8005902 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80058fe:	2300      	movs	r3, #0
 8005900:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005902:	f001 fe63 	bl	80075cc <vPortExitCritical>

	return xReturn;
 8005906:	68fb      	ldr	r3, [r7, #12]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005918:	f001 fe26 	bl	8007568 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005924:	429a      	cmp	r2, r3
 8005926:	d102      	bne.n	800592e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005928:	2301      	movs	r3, #1
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	e001      	b.n	8005932 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800592e:	2300      	movs	r3, #0
 8005930:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005932:	f001 fe4b 	bl	80075cc <vPortExitCritical>

	return xReturn;
 8005936:	68fb      	ldr	r3, [r7, #12]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800594a:	2300      	movs	r3, #0
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	e014      	b.n	800597a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005950:	4a0f      	ldr	r2, [pc, #60]	@ (8005990 <vQueueAddToRegistry+0x50>)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10b      	bne.n	8005974 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800595c:	490c      	ldr	r1, [pc, #48]	@ (8005990 <vQueueAddToRegistry+0x50>)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005966:	4a0a      	ldr	r2, [pc, #40]	@ (8005990 <vQueueAddToRegistry+0x50>)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	4413      	add	r3, r2
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005972:	e006      	b.n	8005982 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	3301      	adds	r3, #1
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2b07      	cmp	r3, #7
 800597e:	d9e7      	bls.n	8005950 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005980:	bf00      	nop
 8005982:	bf00      	nop
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	20000e2c 	.word	0x20000e2c

08005994 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80059a4:	f001 fde0 	bl	8007568 <vPortEnterCritical>
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059ae:	b25b      	sxtb	r3, r3
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b4:	d103      	bne.n	80059be <vQueueWaitForMessageRestricted+0x2a>
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059c4:	b25b      	sxtb	r3, r3
 80059c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ca:	d103      	bne.n	80059d4 <vQueueWaitForMessageRestricted+0x40>
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059d4:	f001 fdfa 	bl	80075cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d106      	bne.n	80059ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	3324      	adds	r3, #36	@ 0x24
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 fc6d 	bl	80062c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80059ee:	6978      	ldr	r0, [r7, #20]
 80059f0:	f7ff ff26 	bl	8005840 <prvUnlockQueue>
	}
 80059f4:	bf00      	nop
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08e      	sub	sp, #56	@ 0x38
 8005a00:	af04      	add	r7, sp, #16
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10b      	bne.n	8005a28 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	623b      	str	r3, [r7, #32]
}
 8005a22:	bf00      	nop
 8005a24:	bf00      	nop
 8005a26:	e7fd      	b.n	8005a24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10b      	bne.n	8005a46 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	61fb      	str	r3, [r7, #28]
}
 8005a40:	bf00      	nop
 8005a42:	bf00      	nop
 8005a44:	e7fd      	b.n	8005a42 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a46:	23a8      	movs	r3, #168	@ 0xa8
 8005a48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	2ba8      	cmp	r3, #168	@ 0xa8
 8005a4e:	d00b      	beq.n	8005a68 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	61bb      	str	r3, [r7, #24]
}
 8005a62:	bf00      	nop
 8005a64:	bf00      	nop
 8005a66:	e7fd      	b.n	8005a64 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01e      	beq.n	8005aae <xTaskCreateStatic+0xb2>
 8005a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d01b      	beq.n	8005aae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a78:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a7e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a88:	2300      	movs	r3, #0
 8005a8a:	9303      	str	r3, [sp, #12]
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8e:	9302      	str	r3, [sp, #8]
 8005a90:	f107 0314 	add.w	r3, r7, #20
 8005a94:	9301      	str	r3, [sp, #4]
 8005a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	68b9      	ldr	r1, [r7, #8]
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 f851 	bl	8005b48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005aa6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005aa8:	f000 f8f6 	bl	8005c98 <prvAddNewTaskToReadyList>
 8005aac:	e001      	b.n	8005ab2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ab2:	697b      	ldr	r3, [r7, #20]
	}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3728      	adds	r7, #40	@ 0x28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08c      	sub	sp, #48	@ 0x30
 8005ac0:	af04      	add	r7, sp, #16
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	603b      	str	r3, [r7, #0]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005acc:	88fb      	ldrh	r3, [r7, #6]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f001 fe6b 	bl	80077ac <pvPortMalloc>
 8005ad6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00e      	beq.n	8005afc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ade:	20a8      	movs	r0, #168	@ 0xa8
 8005ae0:	f001 fe64 	bl	80077ac <pvPortMalloc>
 8005ae4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	631a      	str	r2, [r3, #48]	@ 0x30
 8005af2:	e005      	b.n	8005b00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005af4:	6978      	ldr	r0, [r7, #20]
 8005af6:	f001 ff27 	bl	8007948 <vPortFree>
 8005afa:	e001      	b.n	8005b00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005afc:	2300      	movs	r3, #0
 8005afe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d017      	beq.n	8005b36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b0e:	88fa      	ldrh	r2, [r7, #6]
 8005b10:	2300      	movs	r3, #0
 8005b12:	9303      	str	r3, [sp, #12]
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	9302      	str	r3, [sp, #8]
 8005b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1a:	9301      	str	r3, [sp, #4]
 8005b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	68b9      	ldr	r1, [r7, #8]
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 f80f 	bl	8005b48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b2a:	69f8      	ldr	r0, [r7, #28]
 8005b2c:	f000 f8b4 	bl	8005c98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b30:	2301      	movs	r3, #1
 8005b32:	61bb      	str	r3, [r7, #24]
 8005b34:	e002      	b.n	8005b3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b36:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b3c:	69bb      	ldr	r3, [r7, #24]
	}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3720      	adds	r7, #32
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
	...

08005b48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b088      	sub	sp, #32
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b58:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	461a      	mov	r2, r3
 8005b60:	21a5      	movs	r1, #165	@ 0xa5
 8005b62:	f002 f928 	bl	8007db6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b70:	3b01      	subs	r3, #1
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	f023 0307 	bic.w	r3, r3, #7
 8005b7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00b      	beq.n	8005ba2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	617b      	str	r3, [r7, #20]
}
 8005b9c:	bf00      	nop
 8005b9e:	bf00      	nop
 8005ba0:	e7fd      	b.n	8005b9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d01f      	beq.n	8005be8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ba8:	2300      	movs	r3, #0
 8005baa:	61fb      	str	r3, [r7, #28]
 8005bac:	e012      	b.n	8005bd4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	7819      	ldrb	r1, [r3, #0]
 8005bb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	4413      	add	r3, r2
 8005bbc:	3334      	adds	r3, #52	@ 0x34
 8005bbe:	460a      	mov	r2, r1
 8005bc0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d006      	beq.n	8005bdc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	61fb      	str	r3, [r7, #28]
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	2b0f      	cmp	r3, #15
 8005bd8:	d9e9      	bls.n	8005bae <prvInitialiseNewTask+0x66>
 8005bda:	e000      	b.n	8005bde <prvInitialiseNewTask+0x96>
			{
				break;
 8005bdc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005be6:	e003      	b.n	8005bf0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf2:	2b37      	cmp	r3, #55	@ 0x37
 8005bf4:	d901      	bls.n	8005bfa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005bf6:	2337      	movs	r3, #55	@ 0x37
 8005bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bfe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c04:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c08:	2200      	movs	r2, #0
 8005c0a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0e:	3304      	adds	r3, #4
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fe ff49 	bl	8004aa8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c18:	3318      	adds	r3, #24
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fe ff44 	bl	8004aa8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c28:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c34:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c48:	3354      	adds	r3, #84	@ 0x54
 8005c4a:	224c      	movs	r2, #76	@ 0x4c
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f002 f8b1 	bl	8007db6 <memset>
 8005c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c56:	4a0d      	ldr	r2, [pc, #52]	@ (8005c8c <prvInitialiseNewTask+0x144>)
 8005c58:	659a      	str	r2, [r3, #88]	@ 0x58
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5c:	4a0c      	ldr	r2, [pc, #48]	@ (8005c90 <prvInitialiseNewTask+0x148>)
 8005c5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c62:	4a0c      	ldr	r2, [pc, #48]	@ (8005c94 <prvInitialiseNewTask+0x14c>)
 8005c64:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	68f9      	ldr	r1, [r7, #12]
 8005c6a:	69b8      	ldr	r0, [r7, #24]
 8005c6c:	f001 fb4c 	bl	8007308 <pxPortInitialiseStack>
 8005c70:	4602      	mov	r2, r0
 8005c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c82:	bf00      	nop
 8005c84:	3720      	adds	r7, #32
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	200050c0 	.word	0x200050c0
 8005c90:	20005128 	.word	0x20005128
 8005c94:	20005190 	.word	0x20005190

08005c98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ca0:	f001 fc62 	bl	8007568 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8005d5c <prvAddNewTaskToReadyList+0xc4>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	4a2c      	ldr	r2, [pc, #176]	@ (8005d5c <prvAddNewTaskToReadyList+0xc4>)
 8005cac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005cae:	4b2c      	ldr	r3, [pc, #176]	@ (8005d60 <prvAddNewTaskToReadyList+0xc8>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d109      	bne.n	8005cca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8005d60 <prvAddNewTaskToReadyList+0xc8>)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005cbc:	4b27      	ldr	r3, [pc, #156]	@ (8005d5c <prvAddNewTaskToReadyList+0xc4>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d110      	bne.n	8005ce6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005cc4:	f000 fc2e 	bl	8006524 <prvInitialiseTaskLists>
 8005cc8:	e00d      	b.n	8005ce6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005cca:	4b26      	ldr	r3, [pc, #152]	@ (8005d64 <prvAddNewTaskToReadyList+0xcc>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d109      	bne.n	8005ce6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005cd2:	4b23      	ldr	r3, [pc, #140]	@ (8005d60 <prvAddNewTaskToReadyList+0xc8>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d802      	bhi.n	8005ce6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8005d60 <prvAddNewTaskToReadyList+0xc8>)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ce6:	4b20      	ldr	r3, [pc, #128]	@ (8005d68 <prvAddNewTaskToReadyList+0xd0>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3301      	adds	r3, #1
 8005cec:	4a1e      	ldr	r2, [pc, #120]	@ (8005d68 <prvAddNewTaskToReadyList+0xd0>)
 8005cee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8005d68 <prvAddNewTaskToReadyList+0xd0>)
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8005d6c <prvAddNewTaskToReadyList+0xd4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d903      	bls.n	8005d0c <prvAddNewTaskToReadyList+0x74>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d08:	4a18      	ldr	r2, [pc, #96]	@ (8005d6c <prvAddNewTaskToReadyList+0xd4>)
 8005d0a:	6013      	str	r3, [r2, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d10:	4613      	mov	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4a15      	ldr	r2, [pc, #84]	@ (8005d70 <prvAddNewTaskToReadyList+0xd8>)
 8005d1a:	441a      	add	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3304      	adds	r3, #4
 8005d20:	4619      	mov	r1, r3
 8005d22:	4610      	mov	r0, r2
 8005d24:	f7fe fecd 	bl	8004ac2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d28:	f001 fc50 	bl	80075cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8005d64 <prvAddNewTaskToReadyList+0xcc>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00e      	beq.n	8005d52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d34:	4b0a      	ldr	r3, [pc, #40]	@ (8005d60 <prvAddNewTaskToReadyList+0xc8>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d207      	bcs.n	8005d52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d42:	4b0c      	ldr	r3, [pc, #48]	@ (8005d74 <prvAddNewTaskToReadyList+0xdc>)
 8005d44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d52:	bf00      	nop
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20001340 	.word	0x20001340
 8005d60:	20000e6c 	.word	0x20000e6c
 8005d64:	2000134c 	.word	0x2000134c
 8005d68:	2000135c 	.word	0x2000135c
 8005d6c:	20001348 	.word	0x20001348
 8005d70:	20000e70 	.word	0x20000e70
 8005d74:	e000ed04 	.word	0xe000ed04

08005d78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d80:	2300      	movs	r3, #0
 8005d82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d018      	beq.n	8005dbc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d8a:	4b14      	ldr	r3, [pc, #80]	@ (8005ddc <vTaskDelay+0x64>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00b      	beq.n	8005daa <vTaskDelay+0x32>
	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	60bb      	str	r3, [r7, #8]
}
 8005da4:	bf00      	nop
 8005da6:	bf00      	nop
 8005da8:	e7fd      	b.n	8005da6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005daa:	f000 f88b 	bl	8005ec4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005dae:	2100      	movs	r1, #0
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 fefb 	bl	8006bac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005db6:	f000 f893 	bl	8005ee0 <xTaskResumeAll>
 8005dba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d107      	bne.n	8005dd2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005dc2:	4b07      	ldr	r3, [pc, #28]	@ (8005de0 <vTaskDelay+0x68>)
 8005dc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005dd2:	bf00      	nop
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	20001368 	.word	0x20001368
 8005de0:	e000ed04 	.word	0xe000ed04

08005de4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08a      	sub	sp, #40	@ 0x28
 8005de8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005dea:	2300      	movs	r3, #0
 8005dec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005dee:	2300      	movs	r3, #0
 8005df0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005df2:	463a      	mov	r2, r7
 8005df4:	1d39      	adds	r1, r7, #4
 8005df6:	f107 0308 	add.w	r3, r7, #8
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fe fe00 	bl	8004a00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e00:	6839      	ldr	r1, [r7, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	9202      	str	r2, [sp, #8]
 8005e08:	9301      	str	r3, [sp, #4]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	460a      	mov	r2, r1
 8005e12:	4924      	ldr	r1, [pc, #144]	@ (8005ea4 <vTaskStartScheduler+0xc0>)
 8005e14:	4824      	ldr	r0, [pc, #144]	@ (8005ea8 <vTaskStartScheduler+0xc4>)
 8005e16:	f7ff fdf1 	bl	80059fc <xTaskCreateStatic>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	4a23      	ldr	r2, [pc, #140]	@ (8005eac <vTaskStartScheduler+0xc8>)
 8005e1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e20:	4b22      	ldr	r3, [pc, #136]	@ (8005eac <vTaskStartScheduler+0xc8>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d002      	beq.n	8005e2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	617b      	str	r3, [r7, #20]
 8005e2c:	e001      	b.n	8005e32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d102      	bne.n	8005e3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e38:	f000 ff0c 	bl	8006c54 <xTimerCreateTimerTask>
 8005e3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d11b      	bne.n	8005e7c <vTaskStartScheduler+0x98>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	613b      	str	r3, [r7, #16]
}
 8005e56:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e58:	4b15      	ldr	r3, [pc, #84]	@ (8005eb0 <vTaskStartScheduler+0xcc>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3354      	adds	r3, #84	@ 0x54
 8005e5e:	4a15      	ldr	r2, [pc, #84]	@ (8005eb4 <vTaskStartScheduler+0xd0>)
 8005e60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e62:	4b15      	ldr	r3, [pc, #84]	@ (8005eb8 <vTaskStartScheduler+0xd4>)
 8005e64:	f04f 32ff 	mov.w	r2, #4294967295
 8005e68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e6a:	4b14      	ldr	r3, [pc, #80]	@ (8005ebc <vTaskStartScheduler+0xd8>)
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e70:	4b13      	ldr	r3, [pc, #76]	@ (8005ec0 <vTaskStartScheduler+0xdc>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e76:	f001 fad3 	bl	8007420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e7a:	e00f      	b.n	8005e9c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e82:	d10b      	bne.n	8005e9c <vTaskStartScheduler+0xb8>
	__asm volatile
 8005e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	60fb      	str	r3, [r7, #12]
}
 8005e96:	bf00      	nop
 8005e98:	bf00      	nop
 8005e9a:	e7fd      	b.n	8005e98 <vTaskStartScheduler+0xb4>
}
 8005e9c:	bf00      	nop
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	08008b18 	.word	0x08008b18
 8005ea8:	080064f5 	.word	0x080064f5
 8005eac:	20001364 	.word	0x20001364
 8005eb0:	20000e6c 	.word	0x20000e6c
 8005eb4:	2000001c 	.word	0x2000001c
 8005eb8:	20001360 	.word	0x20001360
 8005ebc:	2000134c 	.word	0x2000134c
 8005ec0:	20001344 	.word	0x20001344

08005ec4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ec8:	4b04      	ldr	r3, [pc, #16]	@ (8005edc <vTaskSuspendAll+0x18>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	4a03      	ldr	r2, [pc, #12]	@ (8005edc <vTaskSuspendAll+0x18>)
 8005ed0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005ed2:	bf00      	nop
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	20001368 	.word	0x20001368

08005ee0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005eea:	2300      	movs	r3, #0
 8005eec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005eee:	4b42      	ldr	r3, [pc, #264]	@ (8005ff8 <xTaskResumeAll+0x118>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10b      	bne.n	8005f0e <xTaskResumeAll+0x2e>
	__asm volatile
 8005ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	603b      	str	r3, [r7, #0]
}
 8005f08:	bf00      	nop
 8005f0a:	bf00      	nop
 8005f0c:	e7fd      	b.n	8005f0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f0e:	f001 fb2b 	bl	8007568 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f12:	4b39      	ldr	r3, [pc, #228]	@ (8005ff8 <xTaskResumeAll+0x118>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	4a37      	ldr	r2, [pc, #220]	@ (8005ff8 <xTaskResumeAll+0x118>)
 8005f1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f1c:	4b36      	ldr	r3, [pc, #216]	@ (8005ff8 <xTaskResumeAll+0x118>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d162      	bne.n	8005fea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f24:	4b35      	ldr	r3, [pc, #212]	@ (8005ffc <xTaskResumeAll+0x11c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d05e      	beq.n	8005fea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f2c:	e02f      	b.n	8005f8e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f2e:	4b34      	ldr	r3, [pc, #208]	@ (8006000 <xTaskResumeAll+0x120>)
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3318      	adds	r3, #24
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fe fe1e 	bl	8004b7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	3304      	adds	r3, #4
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7fe fe19 	bl	8004b7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8006004 <xTaskResumeAll+0x124>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d903      	bls.n	8005f5e <xTaskResumeAll+0x7e>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5a:	4a2a      	ldr	r2, [pc, #168]	@ (8006004 <xTaskResumeAll+0x124>)
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f62:	4613      	mov	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4a27      	ldr	r2, [pc, #156]	@ (8006008 <xTaskResumeAll+0x128>)
 8005f6c:	441a      	add	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	3304      	adds	r3, #4
 8005f72:	4619      	mov	r1, r3
 8005f74:	4610      	mov	r0, r2
 8005f76:	f7fe fda4 	bl	8004ac2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f7e:	4b23      	ldr	r3, [pc, #140]	@ (800600c <xTaskResumeAll+0x12c>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d302      	bcc.n	8005f8e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005f88:	4b21      	ldr	r3, [pc, #132]	@ (8006010 <xTaskResumeAll+0x130>)
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8006000 <xTaskResumeAll+0x120>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1cb      	bne.n	8005f2e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f9c:	f000 fb66 	bl	800666c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005fa0:	4b1c      	ldr	r3, [pc, #112]	@ (8006014 <xTaskResumeAll+0x134>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d010      	beq.n	8005fce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005fac:	f000 f846 	bl	800603c <xTaskIncrementTick>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005fb6:	4b16      	ldr	r3, [pc, #88]	@ (8006010 <xTaskResumeAll+0x130>)
 8005fb8:	2201      	movs	r2, #1
 8005fba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1f1      	bne.n	8005fac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005fc8:	4b12      	ldr	r3, [pc, #72]	@ (8006014 <xTaskResumeAll+0x134>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005fce:	4b10      	ldr	r3, [pc, #64]	@ (8006010 <xTaskResumeAll+0x130>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d009      	beq.n	8005fea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005fda:	4b0f      	ldr	r3, [pc, #60]	@ (8006018 <xTaskResumeAll+0x138>)
 8005fdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005fea:	f001 faef 	bl	80075cc <vPortExitCritical>

	return xAlreadyYielded;
 8005fee:	68bb      	ldr	r3, [r7, #8]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	20001368 	.word	0x20001368
 8005ffc:	20001340 	.word	0x20001340
 8006000:	20001300 	.word	0x20001300
 8006004:	20001348 	.word	0x20001348
 8006008:	20000e70 	.word	0x20000e70
 800600c:	20000e6c 	.word	0x20000e6c
 8006010:	20001354 	.word	0x20001354
 8006014:	20001350 	.word	0x20001350
 8006018:	e000ed04 	.word	0xe000ed04

0800601c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006022:	4b05      	ldr	r3, [pc, #20]	@ (8006038 <xTaskGetTickCount+0x1c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006028:	687b      	ldr	r3, [r7, #4]
}
 800602a:	4618      	mov	r0, r3
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	20001344 	.word	0x20001344

0800603c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006042:	2300      	movs	r3, #0
 8006044:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006046:	4b4f      	ldr	r3, [pc, #316]	@ (8006184 <xTaskIncrementTick+0x148>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	f040 8090 	bne.w	8006170 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006050:	4b4d      	ldr	r3, [pc, #308]	@ (8006188 <xTaskIncrementTick+0x14c>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	3301      	adds	r3, #1
 8006056:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006058:	4a4b      	ldr	r2, [pc, #300]	@ (8006188 <xTaskIncrementTick+0x14c>)
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d121      	bne.n	80060a8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006064:	4b49      	ldr	r3, [pc, #292]	@ (800618c <xTaskIncrementTick+0x150>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00b      	beq.n	8006086 <xTaskIncrementTick+0x4a>
	__asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	603b      	str	r3, [r7, #0]
}
 8006080:	bf00      	nop
 8006082:	bf00      	nop
 8006084:	e7fd      	b.n	8006082 <xTaskIncrementTick+0x46>
 8006086:	4b41      	ldr	r3, [pc, #260]	@ (800618c <xTaskIncrementTick+0x150>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	60fb      	str	r3, [r7, #12]
 800608c:	4b40      	ldr	r3, [pc, #256]	@ (8006190 <xTaskIncrementTick+0x154>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a3e      	ldr	r2, [pc, #248]	@ (800618c <xTaskIncrementTick+0x150>)
 8006092:	6013      	str	r3, [r2, #0]
 8006094:	4a3e      	ldr	r2, [pc, #248]	@ (8006190 <xTaskIncrementTick+0x154>)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6013      	str	r3, [r2, #0]
 800609a:	4b3e      	ldr	r3, [pc, #248]	@ (8006194 <xTaskIncrementTick+0x158>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	3301      	adds	r3, #1
 80060a0:	4a3c      	ldr	r2, [pc, #240]	@ (8006194 <xTaskIncrementTick+0x158>)
 80060a2:	6013      	str	r3, [r2, #0]
 80060a4:	f000 fae2 	bl	800666c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060a8:	4b3b      	ldr	r3, [pc, #236]	@ (8006198 <xTaskIncrementTick+0x15c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d349      	bcc.n	8006146 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060b2:	4b36      	ldr	r3, [pc, #216]	@ (800618c <xTaskIncrementTick+0x150>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d104      	bne.n	80060c6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060bc:	4b36      	ldr	r3, [pc, #216]	@ (8006198 <xTaskIncrementTick+0x15c>)
 80060be:	f04f 32ff 	mov.w	r2, #4294967295
 80060c2:	601a      	str	r2, [r3, #0]
					break;
 80060c4:	e03f      	b.n	8006146 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060c6:	4b31      	ldr	r3, [pc, #196]	@ (800618c <xTaskIncrementTick+0x150>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d203      	bcs.n	80060e6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80060de:	4a2e      	ldr	r2, [pc, #184]	@ (8006198 <xTaskIncrementTick+0x15c>)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80060e4:	e02f      	b.n	8006146 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	3304      	adds	r3, #4
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fe fd46 	bl	8004b7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d004      	beq.n	8006102 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	3318      	adds	r3, #24
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7fe fd3d 	bl	8004b7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006106:	4b25      	ldr	r3, [pc, #148]	@ (800619c <xTaskIncrementTick+0x160>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	429a      	cmp	r2, r3
 800610c:	d903      	bls.n	8006116 <xTaskIncrementTick+0xda>
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006112:	4a22      	ldr	r2, [pc, #136]	@ (800619c <xTaskIncrementTick+0x160>)
 8006114:	6013      	str	r3, [r2, #0]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800611a:	4613      	mov	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4a1f      	ldr	r2, [pc, #124]	@ (80061a0 <xTaskIncrementTick+0x164>)
 8006124:	441a      	add	r2, r3
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	3304      	adds	r3, #4
 800612a:	4619      	mov	r1, r3
 800612c:	4610      	mov	r0, r2
 800612e:	f7fe fcc8 	bl	8004ac2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006136:	4b1b      	ldr	r3, [pc, #108]	@ (80061a4 <xTaskIncrementTick+0x168>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613c:	429a      	cmp	r2, r3
 800613e:	d3b8      	bcc.n	80060b2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006140:	2301      	movs	r3, #1
 8006142:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006144:	e7b5      	b.n	80060b2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006146:	4b17      	ldr	r3, [pc, #92]	@ (80061a4 <xTaskIncrementTick+0x168>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800614c:	4914      	ldr	r1, [pc, #80]	@ (80061a0 <xTaskIncrementTick+0x164>)
 800614e:	4613      	mov	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	440b      	add	r3, r1
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d901      	bls.n	8006162 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800615e:	2301      	movs	r3, #1
 8006160:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006162:	4b11      	ldr	r3, [pc, #68]	@ (80061a8 <xTaskIncrementTick+0x16c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d007      	beq.n	800617a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800616a:	2301      	movs	r3, #1
 800616c:	617b      	str	r3, [r7, #20]
 800616e:	e004      	b.n	800617a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006170:	4b0e      	ldr	r3, [pc, #56]	@ (80061ac <xTaskIncrementTick+0x170>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3301      	adds	r3, #1
 8006176:	4a0d      	ldr	r2, [pc, #52]	@ (80061ac <xTaskIncrementTick+0x170>)
 8006178:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800617a:	697b      	ldr	r3, [r7, #20]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	20001368 	.word	0x20001368
 8006188:	20001344 	.word	0x20001344
 800618c:	200012f8 	.word	0x200012f8
 8006190:	200012fc 	.word	0x200012fc
 8006194:	20001358 	.word	0x20001358
 8006198:	20001360 	.word	0x20001360
 800619c:	20001348 	.word	0x20001348
 80061a0:	20000e70 	.word	0x20000e70
 80061a4:	20000e6c 	.word	0x20000e6c
 80061a8:	20001354 	.word	0x20001354
 80061ac:	20001350 	.word	0x20001350

080061b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061b6:	4b2b      	ldr	r3, [pc, #172]	@ (8006264 <vTaskSwitchContext+0xb4>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061be:	4b2a      	ldr	r3, [pc, #168]	@ (8006268 <vTaskSwitchContext+0xb8>)
 80061c0:	2201      	movs	r2, #1
 80061c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061c4:	e047      	b.n	8006256 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80061c6:	4b28      	ldr	r3, [pc, #160]	@ (8006268 <vTaskSwitchContext+0xb8>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061cc:	4b27      	ldr	r3, [pc, #156]	@ (800626c <vTaskSwitchContext+0xbc>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	60fb      	str	r3, [r7, #12]
 80061d2:	e011      	b.n	80061f8 <vTaskSwitchContext+0x48>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10b      	bne.n	80061f2 <vTaskSwitchContext+0x42>
	__asm volatile
 80061da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	607b      	str	r3, [r7, #4]
}
 80061ec:	bf00      	nop
 80061ee:	bf00      	nop
 80061f0:	e7fd      	b.n	80061ee <vTaskSwitchContext+0x3e>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	3b01      	subs	r3, #1
 80061f6:	60fb      	str	r3, [r7, #12]
 80061f8:	491d      	ldr	r1, [pc, #116]	@ (8006270 <vTaskSwitchContext+0xc0>)
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	4613      	mov	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	440b      	add	r3, r1
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0e3      	beq.n	80061d4 <vTaskSwitchContext+0x24>
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4a16      	ldr	r2, [pc, #88]	@ (8006270 <vTaskSwitchContext+0xc0>)
 8006218:	4413      	add	r3, r2
 800621a:	60bb      	str	r3, [r7, #8]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	605a      	str	r2, [r3, #4]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	3308      	adds	r3, #8
 800622e:	429a      	cmp	r2, r3
 8006230:	d104      	bne.n	800623c <vTaskSwitchContext+0x8c>
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	605a      	str	r2, [r3, #4]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	4a0c      	ldr	r2, [pc, #48]	@ (8006274 <vTaskSwitchContext+0xc4>)
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	4a09      	ldr	r2, [pc, #36]	@ (800626c <vTaskSwitchContext+0xbc>)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800624c:	4b09      	ldr	r3, [pc, #36]	@ (8006274 <vTaskSwitchContext+0xc4>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3354      	adds	r3, #84	@ 0x54
 8006252:	4a09      	ldr	r2, [pc, #36]	@ (8006278 <vTaskSwitchContext+0xc8>)
 8006254:	6013      	str	r3, [r2, #0]
}
 8006256:	bf00      	nop
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	20001368 	.word	0x20001368
 8006268:	20001354 	.word	0x20001354
 800626c:	20001348 	.word	0x20001348
 8006270:	20000e70 	.word	0x20000e70
 8006274:	20000e6c 	.word	0x20000e6c
 8006278:	2000001c 	.word	0x2000001c

0800627c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10b      	bne.n	80062a4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800628c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	60fb      	str	r3, [r7, #12]
}
 800629e:	bf00      	nop
 80062a0:	bf00      	nop
 80062a2:	e7fd      	b.n	80062a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062a4:	4b07      	ldr	r3, [pc, #28]	@ (80062c4 <vTaskPlaceOnEventList+0x48>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3318      	adds	r3, #24
 80062aa:	4619      	mov	r1, r3
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7fe fc2c 	bl	8004b0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062b2:	2101      	movs	r1, #1
 80062b4:	6838      	ldr	r0, [r7, #0]
 80062b6:	f000 fc79 	bl	8006bac <prvAddCurrentTaskToDelayedList>
}
 80062ba:	bf00      	nop
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20000e6c 	.word	0x20000e6c

080062c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10b      	bne.n	80062f2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80062da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062de:	f383 8811 	msr	BASEPRI, r3
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	617b      	str	r3, [r7, #20]
}
 80062ec:	bf00      	nop
 80062ee:	bf00      	nop
 80062f0:	e7fd      	b.n	80062ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062f2:	4b0a      	ldr	r3, [pc, #40]	@ (800631c <vTaskPlaceOnEventListRestricted+0x54>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3318      	adds	r3, #24
 80062f8:	4619      	mov	r1, r3
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f7fe fbe1 	bl	8004ac2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006306:	f04f 33ff 	mov.w	r3, #4294967295
 800630a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800630c:	6879      	ldr	r1, [r7, #4]
 800630e:	68b8      	ldr	r0, [r7, #8]
 8006310:	f000 fc4c 	bl	8006bac <prvAddCurrentTaskToDelayedList>
	}
 8006314:	bf00      	nop
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	20000e6c 	.word	0x20000e6c

08006320 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10b      	bne.n	800634e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	60fb      	str	r3, [r7, #12]
}
 8006348:	bf00      	nop
 800634a:	bf00      	nop
 800634c:	e7fd      	b.n	800634a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	3318      	adds	r3, #24
 8006352:	4618      	mov	r0, r3
 8006354:	f7fe fc12 	bl	8004b7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006358:	4b1d      	ldr	r3, [pc, #116]	@ (80063d0 <xTaskRemoveFromEventList+0xb0>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d11d      	bne.n	800639c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	3304      	adds	r3, #4
 8006364:	4618      	mov	r0, r3
 8006366:	f7fe fc09 	bl	8004b7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800636e:	4b19      	ldr	r3, [pc, #100]	@ (80063d4 <xTaskRemoveFromEventList+0xb4>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	429a      	cmp	r2, r3
 8006374:	d903      	bls.n	800637e <xTaskRemoveFromEventList+0x5e>
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800637a:	4a16      	ldr	r2, [pc, #88]	@ (80063d4 <xTaskRemoveFromEventList+0xb4>)
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006382:	4613      	mov	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4a13      	ldr	r2, [pc, #76]	@ (80063d8 <xTaskRemoveFromEventList+0xb8>)
 800638c:	441a      	add	r2, r3
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	3304      	adds	r3, #4
 8006392:	4619      	mov	r1, r3
 8006394:	4610      	mov	r0, r2
 8006396:	f7fe fb94 	bl	8004ac2 <vListInsertEnd>
 800639a:	e005      	b.n	80063a8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	3318      	adds	r3, #24
 80063a0:	4619      	mov	r1, r3
 80063a2:	480e      	ldr	r0, [pc, #56]	@ (80063dc <xTaskRemoveFromEventList+0xbc>)
 80063a4:	f7fe fb8d 	bl	8004ac2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ac:	4b0c      	ldr	r3, [pc, #48]	@ (80063e0 <xTaskRemoveFromEventList+0xc0>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d905      	bls.n	80063c2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063b6:	2301      	movs	r3, #1
 80063b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063ba:	4b0a      	ldr	r3, [pc, #40]	@ (80063e4 <xTaskRemoveFromEventList+0xc4>)
 80063bc:	2201      	movs	r2, #1
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	e001      	b.n	80063c6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80063c2:	2300      	movs	r3, #0
 80063c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80063c6:	697b      	ldr	r3, [r7, #20]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	20001368 	.word	0x20001368
 80063d4:	20001348 	.word	0x20001348
 80063d8:	20000e70 	.word	0x20000e70
 80063dc:	20001300 	.word	0x20001300
 80063e0:	20000e6c 	.word	0x20000e6c
 80063e4:	20001354 	.word	0x20001354

080063e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80063f0:	4b06      	ldr	r3, [pc, #24]	@ (800640c <vTaskInternalSetTimeOutState+0x24>)
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80063f8:	4b05      	ldr	r3, [pc, #20]	@ (8006410 <vTaskInternalSetTimeOutState+0x28>)
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	605a      	str	r2, [r3, #4]
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	20001358 	.word	0x20001358
 8006410:	20001344 	.word	0x20001344

08006414 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10b      	bne.n	800643c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	613b      	str	r3, [r7, #16]
}
 8006436:	bf00      	nop
 8006438:	bf00      	nop
 800643a:	e7fd      	b.n	8006438 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10b      	bne.n	800645a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	60fb      	str	r3, [r7, #12]
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop
 8006458:	e7fd      	b.n	8006456 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800645a:	f001 f885 	bl	8007568 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800645e:	4b1d      	ldr	r3, [pc, #116]	@ (80064d4 <xTaskCheckForTimeOut+0xc0>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006476:	d102      	bne.n	800647e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006478:	2300      	movs	r3, #0
 800647a:	61fb      	str	r3, [r7, #28]
 800647c:	e023      	b.n	80064c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	4b15      	ldr	r3, [pc, #84]	@ (80064d8 <xTaskCheckForTimeOut+0xc4>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d007      	beq.n	800649a <xTaskCheckForTimeOut+0x86>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	69ba      	ldr	r2, [r7, #24]
 8006490:	429a      	cmp	r2, r3
 8006492:	d302      	bcc.n	800649a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006494:	2301      	movs	r3, #1
 8006496:	61fb      	str	r3, [r7, #28]
 8006498:	e015      	b.n	80064c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d20b      	bcs.n	80064bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	1ad2      	subs	r2, r2, r3
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7ff ff99 	bl	80063e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064b6:	2300      	movs	r3, #0
 80064b8:	61fb      	str	r3, [r7, #28]
 80064ba:	e004      	b.n	80064c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2200      	movs	r2, #0
 80064c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80064c2:	2301      	movs	r3, #1
 80064c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80064c6:	f001 f881 	bl	80075cc <vPortExitCritical>

	return xReturn;
 80064ca:	69fb      	ldr	r3, [r7, #28]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3720      	adds	r7, #32
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	20001344 	.word	0x20001344
 80064d8:	20001358 	.word	0x20001358

080064dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80064e0:	4b03      	ldr	r3, [pc, #12]	@ (80064f0 <vTaskMissedYield+0x14>)
 80064e2:	2201      	movs	r2, #1
 80064e4:	601a      	str	r2, [r3, #0]
}
 80064e6:	bf00      	nop
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	20001354 	.word	0x20001354

080064f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80064fc:	f000 f852 	bl	80065a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006500:	4b06      	ldr	r3, [pc, #24]	@ (800651c <prvIdleTask+0x28>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d9f9      	bls.n	80064fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006508:	4b05      	ldr	r3, [pc, #20]	@ (8006520 <prvIdleTask+0x2c>)
 800650a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006518:	e7f0      	b.n	80064fc <prvIdleTask+0x8>
 800651a:	bf00      	nop
 800651c:	20000e70 	.word	0x20000e70
 8006520:	e000ed04 	.word	0xe000ed04

08006524 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800652a:	2300      	movs	r3, #0
 800652c:	607b      	str	r3, [r7, #4]
 800652e:	e00c      	b.n	800654a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	4613      	mov	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4a12      	ldr	r2, [pc, #72]	@ (8006584 <prvInitialiseTaskLists+0x60>)
 800653c:	4413      	add	r3, r2
 800653e:	4618      	mov	r0, r3
 8006540:	f7fe fa92 	bl	8004a68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3301      	adds	r3, #1
 8006548:	607b      	str	r3, [r7, #4]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b37      	cmp	r3, #55	@ 0x37
 800654e:	d9ef      	bls.n	8006530 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006550:	480d      	ldr	r0, [pc, #52]	@ (8006588 <prvInitialiseTaskLists+0x64>)
 8006552:	f7fe fa89 	bl	8004a68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006556:	480d      	ldr	r0, [pc, #52]	@ (800658c <prvInitialiseTaskLists+0x68>)
 8006558:	f7fe fa86 	bl	8004a68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800655c:	480c      	ldr	r0, [pc, #48]	@ (8006590 <prvInitialiseTaskLists+0x6c>)
 800655e:	f7fe fa83 	bl	8004a68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006562:	480c      	ldr	r0, [pc, #48]	@ (8006594 <prvInitialiseTaskLists+0x70>)
 8006564:	f7fe fa80 	bl	8004a68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006568:	480b      	ldr	r0, [pc, #44]	@ (8006598 <prvInitialiseTaskLists+0x74>)
 800656a:	f7fe fa7d 	bl	8004a68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800656e:	4b0b      	ldr	r3, [pc, #44]	@ (800659c <prvInitialiseTaskLists+0x78>)
 8006570:	4a05      	ldr	r2, [pc, #20]	@ (8006588 <prvInitialiseTaskLists+0x64>)
 8006572:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006574:	4b0a      	ldr	r3, [pc, #40]	@ (80065a0 <prvInitialiseTaskLists+0x7c>)
 8006576:	4a05      	ldr	r2, [pc, #20]	@ (800658c <prvInitialiseTaskLists+0x68>)
 8006578:	601a      	str	r2, [r3, #0]
}
 800657a:	bf00      	nop
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	20000e70 	.word	0x20000e70
 8006588:	200012d0 	.word	0x200012d0
 800658c:	200012e4 	.word	0x200012e4
 8006590:	20001300 	.word	0x20001300
 8006594:	20001314 	.word	0x20001314
 8006598:	2000132c 	.word	0x2000132c
 800659c:	200012f8 	.word	0x200012f8
 80065a0:	200012fc 	.word	0x200012fc

080065a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065aa:	e019      	b.n	80065e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065ac:	f000 ffdc 	bl	8007568 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065b0:	4b10      	ldr	r3, [pc, #64]	@ (80065f4 <prvCheckTasksWaitingTermination+0x50>)
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	3304      	adds	r3, #4
 80065bc:	4618      	mov	r0, r3
 80065be:	f7fe fadd 	bl	8004b7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065c2:	4b0d      	ldr	r3, [pc, #52]	@ (80065f8 <prvCheckTasksWaitingTermination+0x54>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	4a0b      	ldr	r2, [pc, #44]	@ (80065f8 <prvCheckTasksWaitingTermination+0x54>)
 80065ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065cc:	4b0b      	ldr	r3, [pc, #44]	@ (80065fc <prvCheckTasksWaitingTermination+0x58>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	4a0a      	ldr	r2, [pc, #40]	@ (80065fc <prvCheckTasksWaitingTermination+0x58>)
 80065d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80065d6:	f000 fff9 	bl	80075cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f810 	bl	8006600 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065e0:	4b06      	ldr	r3, [pc, #24]	@ (80065fc <prvCheckTasksWaitingTermination+0x58>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1e1      	bne.n	80065ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80065e8:	bf00      	nop
 80065ea:	bf00      	nop
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	20001314 	.word	0x20001314
 80065f8:	20001340 	.word	0x20001340
 80065fc:	20001328 	.word	0x20001328

08006600 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3354      	adds	r3, #84	@ 0x54
 800660c:	4618      	mov	r0, r3
 800660e:	f001 fbeb 	bl	8007de8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006618:	2b00      	cmp	r3, #0
 800661a:	d108      	bne.n	800662e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006620:	4618      	mov	r0, r3
 8006622:	f001 f991 	bl	8007948 <vPortFree>
				vPortFree( pxTCB );
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f001 f98e 	bl	8007948 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800662c:	e019      	b.n	8006662 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006634:	2b01      	cmp	r3, #1
 8006636:	d103      	bne.n	8006640 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f001 f985 	bl	8007948 <vPortFree>
	}
 800663e:	e010      	b.n	8006662 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006646:	2b02      	cmp	r3, #2
 8006648:	d00b      	beq.n	8006662 <prvDeleteTCB+0x62>
	__asm volatile
 800664a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	60fb      	str	r3, [r7, #12]
}
 800665c:	bf00      	nop
 800665e:	bf00      	nop
 8006660:	e7fd      	b.n	800665e <prvDeleteTCB+0x5e>
	}
 8006662:	bf00      	nop
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
	...

0800666c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006672:	4b0c      	ldr	r3, [pc, #48]	@ (80066a4 <prvResetNextTaskUnblockTime+0x38>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d104      	bne.n	8006686 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800667c:	4b0a      	ldr	r3, [pc, #40]	@ (80066a8 <prvResetNextTaskUnblockTime+0x3c>)
 800667e:	f04f 32ff 	mov.w	r2, #4294967295
 8006682:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006684:	e008      	b.n	8006698 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006686:	4b07      	ldr	r3, [pc, #28]	@ (80066a4 <prvResetNextTaskUnblockTime+0x38>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	4a04      	ldr	r2, [pc, #16]	@ (80066a8 <prvResetNextTaskUnblockTime+0x3c>)
 8006696:	6013      	str	r3, [r2, #0]
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	200012f8 	.word	0x200012f8
 80066a8:	20001360 	.word	0x20001360

080066ac <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80066b2:	4b05      	ldr	r3, [pc, #20]	@ (80066c8 <xTaskGetCurrentTaskHandle+0x1c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80066b8:	687b      	ldr	r3, [r7, #4]
	}
 80066ba:	4618      	mov	r0, r3
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	20000e6c 	.word	0x20000e6c

080066cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006700 <xTaskGetSchedulerState+0x34>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d102      	bne.n	80066e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066da:	2301      	movs	r3, #1
 80066dc:	607b      	str	r3, [r7, #4]
 80066de:	e008      	b.n	80066f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066e0:	4b08      	ldr	r3, [pc, #32]	@ (8006704 <xTaskGetSchedulerState+0x38>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d102      	bne.n	80066ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066e8:	2302      	movs	r3, #2
 80066ea:	607b      	str	r3, [r7, #4]
 80066ec:	e001      	b.n	80066f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066ee:	2300      	movs	r3, #0
 80066f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80066f2:	687b      	ldr	r3, [r7, #4]
	}
 80066f4:	4618      	mov	r0, r3
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	2000134c 	.word	0x2000134c
 8006704:	20001368 	.word	0x20001368

08006708 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006714:	2300      	movs	r3, #0
 8006716:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d051      	beq.n	80067c2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006722:	4b2a      	ldr	r3, [pc, #168]	@ (80067cc <xTaskPriorityInherit+0xc4>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006728:	429a      	cmp	r2, r3
 800672a:	d241      	bcs.n	80067b0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	2b00      	cmp	r3, #0
 8006732:	db06      	blt.n	8006742 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006734:	4b25      	ldr	r3, [pc, #148]	@ (80067cc <xTaskPriorityInherit+0xc4>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	6959      	ldr	r1, [r3, #20]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800674a:	4613      	mov	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4a1f      	ldr	r2, [pc, #124]	@ (80067d0 <xTaskPriorityInherit+0xc8>)
 8006754:	4413      	add	r3, r2
 8006756:	4299      	cmp	r1, r3
 8006758:	d122      	bne.n	80067a0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	3304      	adds	r3, #4
 800675e:	4618      	mov	r0, r3
 8006760:	f7fe fa0c 	bl	8004b7c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006764:	4b19      	ldr	r3, [pc, #100]	@ (80067cc <xTaskPriorityInherit+0xc4>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006772:	4b18      	ldr	r3, [pc, #96]	@ (80067d4 <xTaskPriorityInherit+0xcc>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	429a      	cmp	r2, r3
 8006778:	d903      	bls.n	8006782 <xTaskPriorityInherit+0x7a>
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677e:	4a15      	ldr	r2, [pc, #84]	@ (80067d4 <xTaskPriorityInherit+0xcc>)
 8006780:	6013      	str	r3, [r2, #0]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006786:	4613      	mov	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4a10      	ldr	r2, [pc, #64]	@ (80067d0 <xTaskPriorityInherit+0xc8>)
 8006790:	441a      	add	r2, r3
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	3304      	adds	r3, #4
 8006796:	4619      	mov	r1, r3
 8006798:	4610      	mov	r0, r2
 800679a:	f7fe f992 	bl	8004ac2 <vListInsertEnd>
 800679e:	e004      	b.n	80067aa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80067a0:	4b0a      	ldr	r3, [pc, #40]	@ (80067cc <xTaskPriorityInherit+0xc4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80067aa:	2301      	movs	r3, #1
 80067ac:	60fb      	str	r3, [r7, #12]
 80067ae:	e008      	b.n	80067c2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80067b4:	4b05      	ldr	r3, [pc, #20]	@ (80067cc <xTaskPriorityInherit+0xc4>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d201      	bcs.n	80067c2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80067be:	2301      	movs	r3, #1
 80067c0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067c2:	68fb      	ldr	r3, [r7, #12]
	}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	20000e6c 	.word	0x20000e6c
 80067d0:	20000e70 	.word	0x20000e70
 80067d4:	20001348 	.word	0x20001348

080067d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80067e4:	2300      	movs	r3, #0
 80067e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d058      	beq.n	80068a0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80067ee:	4b2f      	ldr	r3, [pc, #188]	@ (80068ac <xTaskPriorityDisinherit+0xd4>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d00b      	beq.n	8006810 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	60fb      	str	r3, [r7, #12]
}
 800680a:	bf00      	nop
 800680c:	bf00      	nop
 800680e:	e7fd      	b.n	800680c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10b      	bne.n	8006830 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681c:	f383 8811 	msr	BASEPRI, r3
 8006820:	f3bf 8f6f 	isb	sy
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	60bb      	str	r3, [r7, #8]
}
 800682a:	bf00      	nop
 800682c:	bf00      	nop
 800682e:	e7fd      	b.n	800682c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006834:	1e5a      	subs	r2, r3, #1
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006842:	429a      	cmp	r2, r3
 8006844:	d02c      	beq.n	80068a0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800684a:	2b00      	cmp	r3, #0
 800684c:	d128      	bne.n	80068a0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	3304      	adds	r3, #4
 8006852:	4618      	mov	r0, r3
 8006854:	f7fe f992 	bl	8004b7c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006864:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006870:	4b0f      	ldr	r3, [pc, #60]	@ (80068b0 <xTaskPriorityDisinherit+0xd8>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	429a      	cmp	r2, r3
 8006876:	d903      	bls.n	8006880 <xTaskPriorityDisinherit+0xa8>
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687c:	4a0c      	ldr	r2, [pc, #48]	@ (80068b0 <xTaskPriorityDisinherit+0xd8>)
 800687e:	6013      	str	r3, [r2, #0]
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006884:	4613      	mov	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4a09      	ldr	r2, [pc, #36]	@ (80068b4 <xTaskPriorityDisinherit+0xdc>)
 800688e:	441a      	add	r2, r3
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	3304      	adds	r3, #4
 8006894:	4619      	mov	r1, r3
 8006896:	4610      	mov	r0, r2
 8006898:	f7fe f913 	bl	8004ac2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800689c:	2301      	movs	r3, #1
 800689e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80068a0:	697b      	ldr	r3, [r7, #20]
	}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	20000e6c 	.word	0x20000e6c
 80068b0:	20001348 	.word	0x20001348
 80068b4:	20000e70 	.word	0x20000e70

080068b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b088      	sub	sp, #32
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80068c6:	2301      	movs	r3, #1
 80068c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d06c      	beq.n	80069aa <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10b      	bne.n	80068f0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80068d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	60fb      	str	r3, [r7, #12]
}
 80068ea:	bf00      	nop
 80068ec:	bf00      	nop
 80068ee:	e7fd      	b.n	80068ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d902      	bls.n	8006900 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	61fb      	str	r3, [r7, #28]
 80068fe:	e002      	b.n	8006906 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006904:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800690a:	69fa      	ldr	r2, [r7, #28]
 800690c:	429a      	cmp	r2, r3
 800690e:	d04c      	beq.n	80069aa <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	429a      	cmp	r2, r3
 8006918:	d147      	bne.n	80069aa <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800691a:	4b26      	ldr	r3, [pc, #152]	@ (80069b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	429a      	cmp	r2, r3
 8006922:	d10b      	bne.n	800693c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	60bb      	str	r3, [r7, #8]
}
 8006936:	bf00      	nop
 8006938:	bf00      	nop
 800693a:	e7fd      	b.n	8006938 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006940:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	69fa      	ldr	r2, [r7, #28]
 8006946:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	2b00      	cmp	r3, #0
 800694e:	db04      	blt.n	800695a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	6959      	ldr	r1, [r3, #20]
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	4613      	mov	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4a13      	ldr	r2, [pc, #76]	@ (80069b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800696a:	4413      	add	r3, r2
 800696c:	4299      	cmp	r1, r3
 800696e:	d11c      	bne.n	80069aa <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	3304      	adds	r3, #4
 8006974:	4618      	mov	r0, r3
 8006976:	f7fe f901 	bl	8004b7c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800697e:	4b0f      	ldr	r3, [pc, #60]	@ (80069bc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	429a      	cmp	r2, r3
 8006984:	d903      	bls.n	800698e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800698a:	4a0c      	ldr	r2, [pc, #48]	@ (80069bc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006992:	4613      	mov	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4a07      	ldr	r2, [pc, #28]	@ (80069b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800699c:	441a      	add	r2, r3
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	3304      	adds	r3, #4
 80069a2:	4619      	mov	r1, r3
 80069a4:	4610      	mov	r0, r2
 80069a6:	f7fe f88c 	bl	8004ac2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069aa:	bf00      	nop
 80069ac:	3720      	adds	r7, #32
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	20000e6c 	.word	0x20000e6c
 80069b8:	20000e70 	.word	0x20000e70
 80069bc:	20001348 	.word	0x20001348

080069c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80069c0:	b480      	push	{r7}
 80069c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80069c4:	4b07      	ldr	r3, [pc, #28]	@ (80069e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d004      	beq.n	80069d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80069cc:	4b05      	ldr	r3, [pc, #20]	@ (80069e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80069d2:	3201      	adds	r2, #1
 80069d4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80069d6:	4b03      	ldr	r3, [pc, #12]	@ (80069e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80069d8:	681b      	ldr	r3, [r3, #0]
	}
 80069da:	4618      	mov	r0, r3
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	20000e6c 	.word	0x20000e6c

080069e8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80069f2:	f000 fdb9 	bl	8007568 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80069f6:	4b20      	ldr	r3, [pc, #128]	@ (8006a78 <ulTaskNotifyTake+0x90>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d113      	bne.n	8006a2a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006a02:	4b1d      	ldr	r3, [pc, #116]	@ (8006a78 <ulTaskNotifyTake+0x90>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00b      	beq.n	8006a2a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a12:	2101      	movs	r1, #1
 8006a14:	6838      	ldr	r0, [r7, #0]
 8006a16:	f000 f8c9 	bl	8006bac <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006a1a:	4b18      	ldr	r3, [pc, #96]	@ (8006a7c <ulTaskNotifyTake+0x94>)
 8006a1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006a2a:	f000 fdcf 	bl	80075cc <vPortExitCritical>

		taskENTER_CRITICAL();
 8006a2e:	f000 fd9b 	bl	8007568 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8006a32:	4b11      	ldr	r3, [pc, #68]	@ (8006a78 <ulTaskNotifyTake+0x90>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a3a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00e      	beq.n	8006a60 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d005      	beq.n	8006a54 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8006a48:	4b0b      	ldr	r3, [pc, #44]	@ (8006a78 <ulTaskNotifyTake+0x90>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8006a52:	e005      	b.n	8006a60 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8006a54:	4b08      	ldr	r3, [pc, #32]	@ (8006a78 <ulTaskNotifyTake+0x90>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	3a01      	subs	r2, #1
 8006a5c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a60:	4b05      	ldr	r3, [pc, #20]	@ (8006a78 <ulTaskNotifyTake+0x90>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8006a6a:	f000 fdaf 	bl	80075cc <vPortExitCritical>

		return ulReturn;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
	}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	20000e6c 	.word	0x20000e6c
 8006a7c:	e000ed04 	.word	0xe000ed04

08006a80 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b08a      	sub	sp, #40	@ 0x28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d10b      	bne.n	8006aa8 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8006a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a94:	f383 8811 	msr	BASEPRI, r3
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	61bb      	str	r3, [r7, #24]
}
 8006aa2:	bf00      	nop
 8006aa4:	bf00      	nop
 8006aa6:	e7fd      	b.n	8006aa4 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006aa8:	f000 fe3e 	bl	8007728 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8006ab0:	f3ef 8211 	mrs	r2, BASEPRI
 8006ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	617a      	str	r2, [r7, #20]
 8006ac6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006ac8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006aca:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ace:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006ad2:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8006adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ade:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006aea:	7ffb      	ldrb	r3, [r7, #31]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d147      	bne.n	8006b80 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00b      	beq.n	8006b10 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	60fb      	str	r3, [r7, #12]
}
 8006b0a:	bf00      	nop
 8006b0c:	bf00      	nop
 8006b0e:	e7fd      	b.n	8006b0c <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b10:	4b20      	ldr	r3, [pc, #128]	@ (8006b94 <vTaskNotifyGiveFromISR+0x114>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d11d      	bne.n	8006b54 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fe f82d 	bl	8004b7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b26:	4b1c      	ldr	r3, [pc, #112]	@ (8006b98 <vTaskNotifyGiveFromISR+0x118>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d903      	bls.n	8006b36 <vTaskNotifyGiveFromISR+0xb6>
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b32:	4a19      	ldr	r2, [pc, #100]	@ (8006b98 <vTaskNotifyGiveFromISR+0x118>)
 8006b34:	6013      	str	r3, [r2, #0]
 8006b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4a16      	ldr	r2, [pc, #88]	@ (8006b9c <vTaskNotifyGiveFromISR+0x11c>)
 8006b44:	441a      	add	r2, r3
 8006b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b48:	3304      	adds	r3, #4
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	f7fd ffb8 	bl	8004ac2 <vListInsertEnd>
 8006b52:	e005      	b.n	8006b60 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b56:	3318      	adds	r3, #24
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4811      	ldr	r0, [pc, #68]	@ (8006ba0 <vTaskNotifyGiveFromISR+0x120>)
 8006b5c:	f7fd ffb1 	bl	8004ac2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b64:	4b0f      	ldr	r3, [pc, #60]	@ (8006ba4 <vTaskNotifyGiveFromISR+0x124>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d908      	bls.n	8006b80 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d002      	beq.n	8006b7a <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	2201      	movs	r2, #1
 8006b78:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba8 <vTaskNotifyGiveFromISR+0x128>)
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f383 8811 	msr	BASEPRI, r3
}
 8006b8a:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8006b8c:	bf00      	nop
 8006b8e:	3728      	adds	r7, #40	@ 0x28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	20001368 	.word	0x20001368
 8006b98:	20001348 	.word	0x20001348
 8006b9c:	20000e70 	.word	0x20000e70
 8006ba0:	20001300 	.word	0x20001300
 8006ba4:	20000e6c 	.word	0x20000e6c
 8006ba8:	20001354 	.word	0x20001354

08006bac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006bb6:	4b21      	ldr	r3, [pc, #132]	@ (8006c3c <prvAddCurrentTaskToDelayedList+0x90>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bbc:	4b20      	ldr	r3, [pc, #128]	@ (8006c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fd ffda 	bl	8004b7c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bce:	d10a      	bne.n	8006be6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d007      	beq.n	8006be6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8006c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3304      	adds	r3, #4
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4819      	ldr	r0, [pc, #100]	@ (8006c44 <prvAddCurrentTaskToDelayedList+0x98>)
 8006be0:	f7fd ff6f 	bl	8004ac2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006be4:	e026      	b.n	8006c34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4413      	add	r3, r2
 8006bec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006bee:	4b14      	ldr	r3, [pc, #80]	@ (8006c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d209      	bcs.n	8006c12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bfe:	4b12      	ldr	r3, [pc, #72]	@ (8006c48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	4b0f      	ldr	r3, [pc, #60]	@ (8006c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3304      	adds	r3, #4
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4610      	mov	r0, r2
 8006c0c:	f7fd ff7d 	bl	8004b0a <vListInsert>
}
 8006c10:	e010      	b.n	8006c34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c12:	4b0e      	ldr	r3, [pc, #56]	@ (8006c4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	4b0a      	ldr	r3, [pc, #40]	@ (8006c40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	4610      	mov	r0, r2
 8006c20:	f7fd ff73 	bl	8004b0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c24:	4b0a      	ldr	r3, [pc, #40]	@ (8006c50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d202      	bcs.n	8006c34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c2e:	4a08      	ldr	r2, [pc, #32]	@ (8006c50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	6013      	str	r3, [r2, #0]
}
 8006c34:	bf00      	nop
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	20001344 	.word	0x20001344
 8006c40:	20000e6c 	.word	0x20000e6c
 8006c44:	2000132c 	.word	0x2000132c
 8006c48:	200012fc 	.word	0x200012fc
 8006c4c:	200012f8 	.word	0x200012f8
 8006c50:	20001360 	.word	0x20001360

08006c54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08a      	sub	sp, #40	@ 0x28
 8006c58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c5e:	f000 fb13 	bl	8007288 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c62:	4b1d      	ldr	r3, [pc, #116]	@ (8006cd8 <xTimerCreateTimerTask+0x84>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d021      	beq.n	8006cae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c72:	1d3a      	adds	r2, r7, #4
 8006c74:	f107 0108 	add.w	r1, r7, #8
 8006c78:	f107 030c 	add.w	r3, r7, #12
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fd fed9 	bl	8004a34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c82:	6879      	ldr	r1, [r7, #4]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	9202      	str	r2, [sp, #8]
 8006c8a:	9301      	str	r3, [sp, #4]
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	2300      	movs	r3, #0
 8006c92:	460a      	mov	r2, r1
 8006c94:	4911      	ldr	r1, [pc, #68]	@ (8006cdc <xTimerCreateTimerTask+0x88>)
 8006c96:	4812      	ldr	r0, [pc, #72]	@ (8006ce0 <xTimerCreateTimerTask+0x8c>)
 8006c98:	f7fe feb0 	bl	80059fc <xTaskCreateStatic>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	4a11      	ldr	r2, [pc, #68]	@ (8006ce4 <xTimerCreateTimerTask+0x90>)
 8006ca0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006ca2:	4b10      	ldr	r3, [pc, #64]	@ (8006ce4 <xTimerCreateTimerTask+0x90>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006caa:	2301      	movs	r3, #1
 8006cac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10b      	bne.n	8006ccc <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	613b      	str	r3, [r7, #16]
}
 8006cc6:	bf00      	nop
 8006cc8:	bf00      	nop
 8006cca:	e7fd      	b.n	8006cc8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006ccc:	697b      	ldr	r3, [r7, #20]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3718      	adds	r7, #24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	2000139c 	.word	0x2000139c
 8006cdc:	08008b20 	.word	0x08008b20
 8006ce0:	08006e21 	.word	0x08006e21
 8006ce4:	200013a0 	.word	0x200013a0

08006ce8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b08a      	sub	sp, #40	@ 0x28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
 8006cf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10b      	bne.n	8006d18 <xTimerGenericCommand+0x30>
	__asm volatile
 8006d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	623b      	str	r3, [r7, #32]
}
 8006d12:	bf00      	nop
 8006d14:	bf00      	nop
 8006d16:	e7fd      	b.n	8006d14 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d18:	4b19      	ldr	r3, [pc, #100]	@ (8006d80 <xTimerGenericCommand+0x98>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d02a      	beq.n	8006d76 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2b05      	cmp	r3, #5
 8006d30:	dc18      	bgt.n	8006d64 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d32:	f7ff fccb 	bl	80066cc <xTaskGetSchedulerState>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d109      	bne.n	8006d50 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d3c:	4b10      	ldr	r3, [pc, #64]	@ (8006d80 <xTimerGenericCommand+0x98>)
 8006d3e:	6818      	ldr	r0, [r3, #0]
 8006d40:	f107 0110 	add.w	r1, r7, #16
 8006d44:	2300      	movs	r3, #0
 8006d46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d48:	f7fe f940 	bl	8004fcc <xQueueGenericSend>
 8006d4c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006d4e:	e012      	b.n	8006d76 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d50:	4b0b      	ldr	r3, [pc, #44]	@ (8006d80 <xTimerGenericCommand+0x98>)
 8006d52:	6818      	ldr	r0, [r3, #0]
 8006d54:	f107 0110 	add.w	r1, r7, #16
 8006d58:	2300      	movs	r3, #0
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f7fe f936 	bl	8004fcc <xQueueGenericSend>
 8006d60:	6278      	str	r0, [r7, #36]	@ 0x24
 8006d62:	e008      	b.n	8006d76 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d64:	4b06      	ldr	r3, [pc, #24]	@ (8006d80 <xTimerGenericCommand+0x98>)
 8006d66:	6818      	ldr	r0, [r3, #0]
 8006d68:	f107 0110 	add.w	r1, r7, #16
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	f7fe fa2e 	bl	80051d0 <xQueueGenericSendFromISR>
 8006d74:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3728      	adds	r7, #40	@ 0x28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	2000139c 	.word	0x2000139c

08006d84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b088      	sub	sp, #32
 8006d88:	af02      	add	r7, sp, #8
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d8e:	4b23      	ldr	r3, [pc, #140]	@ (8006e1c <prvProcessExpiredTimer+0x98>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fd feed 	bl	8004b7c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d023      	beq.n	8006df8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	699a      	ldr	r2, [r3, #24]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	18d1      	adds	r1, r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	6978      	ldr	r0, [r7, #20]
 8006dbe:	f000 f8d5 	bl	8006f6c <prvInsertTimerInActiveList>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d020      	beq.n	8006e0a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dc8:	2300      	movs	r3, #0
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	2300      	movs	r3, #0
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	6978      	ldr	r0, [r7, #20]
 8006dd4:	f7ff ff88 	bl	8006ce8 <xTimerGenericCommand>
 8006dd8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d114      	bne.n	8006e0a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	60fb      	str	r3, [r7, #12]
}
 8006df2:	bf00      	nop
 8006df4:	bf00      	nop
 8006df6:	e7fd      	b.n	8006df4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006dfe:	f023 0301 	bic.w	r3, r3, #1
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	6978      	ldr	r0, [r7, #20]
 8006e10:	4798      	blx	r3
}
 8006e12:	bf00      	nop
 8006e14:	3718      	adds	r7, #24
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	20001394 	.word	0x20001394

08006e20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e28:	f107 0308 	add.w	r3, r7, #8
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f000 f859 	bl	8006ee4 <prvGetNextExpireTime>
 8006e32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	4619      	mov	r1, r3
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f000 f805 	bl	8006e48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e3e:	f000 f8d7 	bl	8006ff0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e42:	bf00      	nop
 8006e44:	e7f0      	b.n	8006e28 <prvTimerTask+0x8>
	...

08006e48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e52:	f7ff f837 	bl	8005ec4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e56:	f107 0308 	add.w	r3, r7, #8
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 f866 	bl	8006f2c <prvSampleTimeNow>
 8006e60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d130      	bne.n	8006eca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10a      	bne.n	8006e84 <prvProcessTimerOrBlockTask+0x3c>
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d806      	bhi.n	8006e84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e76:	f7ff f833 	bl	8005ee0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e7a:	68f9      	ldr	r1, [r7, #12]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7ff ff81 	bl	8006d84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e82:	e024      	b.n	8006ece <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d008      	beq.n	8006e9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e8a:	4b13      	ldr	r3, [pc, #76]	@ (8006ed8 <prvProcessTimerOrBlockTask+0x90>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <prvProcessTimerOrBlockTask+0x50>
 8006e94:	2301      	movs	r3, #1
 8006e96:	e000      	b.n	8006e9a <prvProcessTimerOrBlockTask+0x52>
 8006e98:	2300      	movs	r3, #0
 8006e9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8006edc <prvProcessTimerOrBlockTask+0x94>)
 8006e9e:	6818      	ldr	r0, [r3, #0]
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	f7fe fd73 	bl	8005994 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006eae:	f7ff f817 	bl	8005ee0 <xTaskResumeAll>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10a      	bne.n	8006ece <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006eb8:	4b09      	ldr	r3, [pc, #36]	@ (8006ee0 <prvProcessTimerOrBlockTask+0x98>)
 8006eba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ebe:	601a      	str	r2, [r3, #0]
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	f3bf 8f6f 	isb	sy
}
 8006ec8:	e001      	b.n	8006ece <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006eca:	f7ff f809 	bl	8005ee0 <xTaskResumeAll>
}
 8006ece:	bf00      	nop
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20001398 	.word	0x20001398
 8006edc:	2000139c 	.word	0x2000139c
 8006ee0:	e000ed04 	.word	0xe000ed04

08006ee4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006eec:	4b0e      	ldr	r3, [pc, #56]	@ (8006f28 <prvGetNextExpireTime+0x44>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <prvGetNextExpireTime+0x16>
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	e000      	b.n	8006efc <prvGetNextExpireTime+0x18>
 8006efa:	2200      	movs	r2, #0
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d105      	bne.n	8006f14 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f08:	4b07      	ldr	r3, [pc, #28]	@ (8006f28 <prvGetNextExpireTime+0x44>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	e001      	b.n	8006f18 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f14:	2300      	movs	r3, #0
 8006f16:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f18:	68fb      	ldr	r3, [r7, #12]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	20001394 	.word	0x20001394

08006f2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f34:	f7ff f872 	bl	800601c <xTaskGetTickCount>
 8006f38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f68 <prvSampleTimeNow+0x3c>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d205      	bcs.n	8006f50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f44:	f000 f93a 	bl	80071bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	e002      	b.n	8006f56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f56:	4a04      	ldr	r2, [pc, #16]	@ (8006f68 <prvSampleTimeNow+0x3c>)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	200013a4 	.word	0x200013a4

08006f6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
 8006f78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d812      	bhi.n	8006fb8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	1ad2      	subs	r2, r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d302      	bcc.n	8006fa6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	e01b      	b.n	8006fde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006fa6:	4b10      	ldr	r3, [pc, #64]	@ (8006fe8 <prvInsertTimerInActiveList+0x7c>)
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	3304      	adds	r3, #4
 8006fae:	4619      	mov	r1, r3
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	f7fd fdaa 	bl	8004b0a <vListInsert>
 8006fb6:	e012      	b.n	8006fde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d206      	bcs.n	8006fce <prvInsertTimerInActiveList+0x62>
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d302      	bcc.n	8006fce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	617b      	str	r3, [r7, #20]
 8006fcc:	e007      	b.n	8006fde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fce:	4b07      	ldr	r3, [pc, #28]	@ (8006fec <prvInsertTimerInActiveList+0x80>)
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4610      	mov	r0, r2
 8006fda:	f7fd fd96 	bl	8004b0a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006fde:	697b      	ldr	r3, [r7, #20]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3718      	adds	r7, #24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	20001398 	.word	0x20001398
 8006fec:	20001394 	.word	0x20001394

08006ff0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b08e      	sub	sp, #56	@ 0x38
 8006ff4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ff6:	e0ce      	b.n	8007196 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	da19      	bge.n	8007032 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ffe:	1d3b      	adds	r3, r7, #4
 8007000:	3304      	adds	r3, #4
 8007002:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10b      	bne.n	8007022 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	61fb      	str	r3, [r7, #28]
}
 800701c:	bf00      	nop
 800701e:	bf00      	nop
 8007020:	e7fd      	b.n	800701e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007028:	6850      	ldr	r0, [r2, #4]
 800702a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800702c:	6892      	ldr	r2, [r2, #8]
 800702e:	4611      	mov	r1, r2
 8007030:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	f2c0 80ae 	blt.w	8007196 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800703e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d004      	beq.n	8007050 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007048:	3304      	adds	r3, #4
 800704a:	4618      	mov	r0, r3
 800704c:	f7fd fd96 	bl	8004b7c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007050:	463b      	mov	r3, r7
 8007052:	4618      	mov	r0, r3
 8007054:	f7ff ff6a 	bl	8006f2c <prvSampleTimeNow>
 8007058:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b09      	cmp	r3, #9
 800705e:	f200 8097 	bhi.w	8007190 <prvProcessReceivedCommands+0x1a0>
 8007062:	a201      	add	r2, pc, #4	@ (adr r2, 8007068 <prvProcessReceivedCommands+0x78>)
 8007064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007068:	08007091 	.word	0x08007091
 800706c:	08007091 	.word	0x08007091
 8007070:	08007091 	.word	0x08007091
 8007074:	08007107 	.word	0x08007107
 8007078:	0800711b 	.word	0x0800711b
 800707c:	08007167 	.word	0x08007167
 8007080:	08007091 	.word	0x08007091
 8007084:	08007091 	.word	0x08007091
 8007088:	08007107 	.word	0x08007107
 800708c:	0800711b 	.word	0x0800711b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007092:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007096:	f043 0301 	orr.w	r3, r3, #1
 800709a:	b2da      	uxtb	r2, r3
 800709c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	18d1      	adds	r1, r2, r3
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070b0:	f7ff ff5c 	bl	8006f6c <prvInsertTimerInActiveList>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d06c      	beq.n	8007194 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070c8:	f003 0304 	and.w	r3, r3, #4
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d061      	beq.n	8007194 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	441a      	add	r2, r3
 80070d8:	2300      	movs	r3, #0
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	2300      	movs	r3, #0
 80070de:	2100      	movs	r1, #0
 80070e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070e2:	f7ff fe01 	bl	8006ce8 <xTimerGenericCommand>
 80070e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d152      	bne.n	8007194 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	61bb      	str	r3, [r7, #24]
}
 8007100:	bf00      	nop
 8007102:	bf00      	nop
 8007104:	e7fd      	b.n	8007102 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007108:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800710c:	f023 0301 	bic.w	r3, r3, #1
 8007110:	b2da      	uxtb	r2, r3
 8007112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007114:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007118:	e03d      	b.n	8007196 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800711a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007120:	f043 0301 	orr.w	r3, r3, #1
 8007124:	b2da      	uxtb	r2, r3
 8007126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007128:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007130:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10b      	bne.n	8007152 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800713a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	617b      	str	r3, [r7, #20]
}
 800714c:	bf00      	nop
 800714e:	bf00      	nop
 8007150:	e7fd      	b.n	800714e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007154:	699a      	ldr	r2, [r3, #24]
 8007156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007158:	18d1      	adds	r1, r2, r3
 800715a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800715e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007160:	f7ff ff04 	bl	8006f6c <prvInsertTimerInActiveList>
					break;
 8007164:	e017      	b.n	8007196 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007168:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800716c:	f003 0302 	and.w	r3, r3, #2
 8007170:	2b00      	cmp	r3, #0
 8007172:	d103      	bne.n	800717c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007174:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007176:	f000 fbe7 	bl	8007948 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800717a:	e00c      	b.n	8007196 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800717c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007182:	f023 0301 	bic.w	r3, r3, #1
 8007186:	b2da      	uxtb	r2, r3
 8007188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800718e:	e002      	b.n	8007196 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007190:	bf00      	nop
 8007192:	e000      	b.n	8007196 <prvProcessReceivedCommands+0x1a6>
					break;
 8007194:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007196:	4b08      	ldr	r3, [pc, #32]	@ (80071b8 <prvProcessReceivedCommands+0x1c8>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	1d39      	adds	r1, r7, #4
 800719c:	2200      	movs	r2, #0
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fe f8b4 	bl	800530c <xQueueReceive>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f47f af26 	bne.w	8006ff8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80071ac:	bf00      	nop
 80071ae:	bf00      	nop
 80071b0:	3730      	adds	r7, #48	@ 0x30
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	2000139c 	.word	0x2000139c

080071bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b088      	sub	sp, #32
 80071c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071c2:	e049      	b.n	8007258 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071c4:	4b2e      	ldr	r3, [pc, #184]	@ (8007280 <prvSwitchTimerLists+0xc4>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ce:	4b2c      	ldr	r3, [pc, #176]	@ (8007280 <prvSwitchTimerLists+0xc4>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	3304      	adds	r3, #4
 80071dc:	4618      	mov	r0, r3
 80071de:	f7fd fccd 	bl	8004b7c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d02f      	beq.n	8007258 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	4413      	add	r3, r2
 8007200:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	429a      	cmp	r2, r3
 8007208:	d90e      	bls.n	8007228 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007216:	4b1a      	ldr	r3, [pc, #104]	@ (8007280 <prvSwitchTimerLists+0xc4>)
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	3304      	adds	r3, #4
 800721e:	4619      	mov	r1, r3
 8007220:	4610      	mov	r0, r2
 8007222:	f7fd fc72 	bl	8004b0a <vListInsert>
 8007226:	e017      	b.n	8007258 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007228:	2300      	movs	r3, #0
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	2300      	movs	r3, #0
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	2100      	movs	r1, #0
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f7ff fd58 	bl	8006ce8 <xTimerGenericCommand>
 8007238:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10b      	bne.n	8007258 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	603b      	str	r3, [r7, #0]
}
 8007252:	bf00      	nop
 8007254:	bf00      	nop
 8007256:	e7fd      	b.n	8007254 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007258:	4b09      	ldr	r3, [pc, #36]	@ (8007280 <prvSwitchTimerLists+0xc4>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1b0      	bne.n	80071c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007262:	4b07      	ldr	r3, [pc, #28]	@ (8007280 <prvSwitchTimerLists+0xc4>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007268:	4b06      	ldr	r3, [pc, #24]	@ (8007284 <prvSwitchTimerLists+0xc8>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a04      	ldr	r2, [pc, #16]	@ (8007280 <prvSwitchTimerLists+0xc4>)
 800726e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007270:	4a04      	ldr	r2, [pc, #16]	@ (8007284 <prvSwitchTimerLists+0xc8>)
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	6013      	str	r3, [r2, #0]
}
 8007276:	bf00      	nop
 8007278:	3718      	adds	r7, #24
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	20001394 	.word	0x20001394
 8007284:	20001398 	.word	0x20001398

08007288 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800728e:	f000 f96b 	bl	8007568 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007292:	4b15      	ldr	r3, [pc, #84]	@ (80072e8 <prvCheckForValidListAndQueue+0x60>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d120      	bne.n	80072dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800729a:	4814      	ldr	r0, [pc, #80]	@ (80072ec <prvCheckForValidListAndQueue+0x64>)
 800729c:	f7fd fbe4 	bl	8004a68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80072a0:	4813      	ldr	r0, [pc, #76]	@ (80072f0 <prvCheckForValidListAndQueue+0x68>)
 80072a2:	f7fd fbe1 	bl	8004a68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80072a6:	4b13      	ldr	r3, [pc, #76]	@ (80072f4 <prvCheckForValidListAndQueue+0x6c>)
 80072a8:	4a10      	ldr	r2, [pc, #64]	@ (80072ec <prvCheckForValidListAndQueue+0x64>)
 80072aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80072ac:	4b12      	ldr	r3, [pc, #72]	@ (80072f8 <prvCheckForValidListAndQueue+0x70>)
 80072ae:	4a10      	ldr	r2, [pc, #64]	@ (80072f0 <prvCheckForValidListAndQueue+0x68>)
 80072b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80072b2:	2300      	movs	r3, #0
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	4b11      	ldr	r3, [pc, #68]	@ (80072fc <prvCheckForValidListAndQueue+0x74>)
 80072b8:	4a11      	ldr	r2, [pc, #68]	@ (8007300 <prvCheckForValidListAndQueue+0x78>)
 80072ba:	2110      	movs	r1, #16
 80072bc:	200a      	movs	r0, #10
 80072be:	f7fd fcf1 	bl	8004ca4 <xQueueGenericCreateStatic>
 80072c2:	4603      	mov	r3, r0
 80072c4:	4a08      	ldr	r2, [pc, #32]	@ (80072e8 <prvCheckForValidListAndQueue+0x60>)
 80072c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80072c8:	4b07      	ldr	r3, [pc, #28]	@ (80072e8 <prvCheckForValidListAndQueue+0x60>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d005      	beq.n	80072dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80072d0:	4b05      	ldr	r3, [pc, #20]	@ (80072e8 <prvCheckForValidListAndQueue+0x60>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	490b      	ldr	r1, [pc, #44]	@ (8007304 <prvCheckForValidListAndQueue+0x7c>)
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fe fb32 	bl	8005940 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072dc:	f000 f976 	bl	80075cc <vPortExitCritical>
}
 80072e0:	bf00      	nop
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	2000139c 	.word	0x2000139c
 80072ec:	2000136c 	.word	0x2000136c
 80072f0:	20001380 	.word	0x20001380
 80072f4:	20001394 	.word	0x20001394
 80072f8:	20001398 	.word	0x20001398
 80072fc:	20001448 	.word	0x20001448
 8007300:	200013a8 	.word	0x200013a8
 8007304:	08008b28 	.word	0x08008b28

08007308 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3b04      	subs	r3, #4
 8007318:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007320:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	3b04      	subs	r3, #4
 8007326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	f023 0201 	bic.w	r2, r3, #1
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	3b04      	subs	r3, #4
 8007336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007338:	4a0c      	ldr	r2, [pc, #48]	@ (800736c <pxPortInitialiseStack+0x64>)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	3b14      	subs	r3, #20
 8007342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	3b04      	subs	r3, #4
 800734e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f06f 0202 	mvn.w	r2, #2
 8007356:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	3b20      	subs	r3, #32
 800735c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800735e:	68fb      	ldr	r3, [r7, #12]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	08007371 	.word	0x08007371

08007370 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007376:	2300      	movs	r3, #0
 8007378:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800737a:	4b13      	ldr	r3, [pc, #76]	@ (80073c8 <prvTaskExitError+0x58>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007382:	d00b      	beq.n	800739c <prvTaskExitError+0x2c>
	__asm volatile
 8007384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	60fb      	str	r3, [r7, #12]
}
 8007396:	bf00      	nop
 8007398:	bf00      	nop
 800739a:	e7fd      	b.n	8007398 <prvTaskExitError+0x28>
	__asm volatile
 800739c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a0:	f383 8811 	msr	BASEPRI, r3
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	60bb      	str	r3, [r7, #8]
}
 80073ae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073b0:	bf00      	nop
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d0fc      	beq.n	80073b2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073b8:	bf00      	nop
 80073ba:	bf00      	nop
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	2000000c 	.word	0x2000000c
 80073cc:	00000000 	.word	0x00000000

080073d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80073d0:	4b07      	ldr	r3, [pc, #28]	@ (80073f0 <pxCurrentTCBConst2>)
 80073d2:	6819      	ldr	r1, [r3, #0]
 80073d4:	6808      	ldr	r0, [r1, #0]
 80073d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073da:	f380 8809 	msr	PSP, r0
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f04f 0000 	mov.w	r0, #0
 80073e6:	f380 8811 	msr	BASEPRI, r0
 80073ea:	4770      	bx	lr
 80073ec:	f3af 8000 	nop.w

080073f0 <pxCurrentTCBConst2>:
 80073f0:	20000e6c 	.word	0x20000e6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop

080073f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80073f8:	4808      	ldr	r0, [pc, #32]	@ (800741c <prvPortStartFirstTask+0x24>)
 80073fa:	6800      	ldr	r0, [r0, #0]
 80073fc:	6800      	ldr	r0, [r0, #0]
 80073fe:	f380 8808 	msr	MSP, r0
 8007402:	f04f 0000 	mov.w	r0, #0
 8007406:	f380 8814 	msr	CONTROL, r0
 800740a:	b662      	cpsie	i
 800740c:	b661      	cpsie	f
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	df00      	svc	0
 8007418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800741a:	bf00      	nop
 800741c:	e000ed08 	.word	0xe000ed08

08007420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007426:	4b47      	ldr	r3, [pc, #284]	@ (8007544 <xPortStartScheduler+0x124>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a47      	ldr	r2, [pc, #284]	@ (8007548 <xPortStartScheduler+0x128>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d10b      	bne.n	8007448 <xPortStartScheduler+0x28>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	613b      	str	r3, [r7, #16]
}
 8007442:	bf00      	nop
 8007444:	bf00      	nop
 8007446:	e7fd      	b.n	8007444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007448:	4b3e      	ldr	r3, [pc, #248]	@ (8007544 <xPortStartScheduler+0x124>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a3f      	ldr	r2, [pc, #252]	@ (800754c <xPortStartScheduler+0x12c>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d10b      	bne.n	800746a <xPortStartScheduler+0x4a>
	__asm volatile
 8007452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	60fb      	str	r3, [r7, #12]
}
 8007464:	bf00      	nop
 8007466:	bf00      	nop
 8007468:	e7fd      	b.n	8007466 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800746a:	4b39      	ldr	r3, [pc, #228]	@ (8007550 <xPortStartScheduler+0x130>)
 800746c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	b2db      	uxtb	r3, r3
 8007474:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	22ff      	movs	r2, #255	@ 0xff
 800747a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	b2db      	uxtb	r3, r3
 8007482:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007484:	78fb      	ldrb	r3, [r7, #3]
 8007486:	b2db      	uxtb	r3, r3
 8007488:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800748c:	b2da      	uxtb	r2, r3
 800748e:	4b31      	ldr	r3, [pc, #196]	@ (8007554 <xPortStartScheduler+0x134>)
 8007490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007492:	4b31      	ldr	r3, [pc, #196]	@ (8007558 <xPortStartScheduler+0x138>)
 8007494:	2207      	movs	r2, #7
 8007496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007498:	e009      	b.n	80074ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800749a:	4b2f      	ldr	r3, [pc, #188]	@ (8007558 <xPortStartScheduler+0x138>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	3b01      	subs	r3, #1
 80074a0:	4a2d      	ldr	r2, [pc, #180]	@ (8007558 <xPortStartScheduler+0x138>)
 80074a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80074a4:	78fb      	ldrb	r3, [r7, #3]
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	005b      	lsls	r3, r3, #1
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074ae:	78fb      	ldrb	r3, [r7, #3]
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074b6:	2b80      	cmp	r3, #128	@ 0x80
 80074b8:	d0ef      	beq.n	800749a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074ba:	4b27      	ldr	r3, [pc, #156]	@ (8007558 <xPortStartScheduler+0x138>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f1c3 0307 	rsb	r3, r3, #7
 80074c2:	2b04      	cmp	r3, #4
 80074c4:	d00b      	beq.n	80074de <xPortStartScheduler+0xbe>
	__asm volatile
 80074c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ca:	f383 8811 	msr	BASEPRI, r3
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f3bf 8f4f 	dsb	sy
 80074d6:	60bb      	str	r3, [r7, #8]
}
 80074d8:	bf00      	nop
 80074da:	bf00      	nop
 80074dc:	e7fd      	b.n	80074da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074de:	4b1e      	ldr	r3, [pc, #120]	@ (8007558 <xPortStartScheduler+0x138>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	021b      	lsls	r3, r3, #8
 80074e4:	4a1c      	ldr	r2, [pc, #112]	@ (8007558 <xPortStartScheduler+0x138>)
 80074e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007558 <xPortStartScheduler+0x138>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80074f0:	4a19      	ldr	r2, [pc, #100]	@ (8007558 <xPortStartScheduler+0x138>)
 80074f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074fc:	4b17      	ldr	r3, [pc, #92]	@ (800755c <xPortStartScheduler+0x13c>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a16      	ldr	r2, [pc, #88]	@ (800755c <xPortStartScheduler+0x13c>)
 8007502:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007506:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007508:	4b14      	ldr	r3, [pc, #80]	@ (800755c <xPortStartScheduler+0x13c>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a13      	ldr	r2, [pc, #76]	@ (800755c <xPortStartScheduler+0x13c>)
 800750e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007512:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007514:	f000 f8da 	bl	80076cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007518:	4b11      	ldr	r3, [pc, #68]	@ (8007560 <xPortStartScheduler+0x140>)
 800751a:	2200      	movs	r2, #0
 800751c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800751e:	f000 f8f9 	bl	8007714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007522:	4b10      	ldr	r3, [pc, #64]	@ (8007564 <xPortStartScheduler+0x144>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a0f      	ldr	r2, [pc, #60]	@ (8007564 <xPortStartScheduler+0x144>)
 8007528:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800752c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800752e:	f7ff ff63 	bl	80073f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007532:	f7fe fe3d 	bl	80061b0 <vTaskSwitchContext>
	prvTaskExitError();
 8007536:	f7ff ff1b 	bl	8007370 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3718      	adds	r7, #24
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	e000ed00 	.word	0xe000ed00
 8007548:	410fc271 	.word	0x410fc271
 800754c:	410fc270 	.word	0x410fc270
 8007550:	e000e400 	.word	0xe000e400
 8007554:	20001498 	.word	0x20001498
 8007558:	2000149c 	.word	0x2000149c
 800755c:	e000ed20 	.word	0xe000ed20
 8007560:	2000000c 	.word	0x2000000c
 8007564:	e000ef34 	.word	0xe000ef34

08007568 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	607b      	str	r3, [r7, #4]
}
 8007580:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007582:	4b10      	ldr	r3, [pc, #64]	@ (80075c4 <vPortEnterCritical+0x5c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	3301      	adds	r3, #1
 8007588:	4a0e      	ldr	r2, [pc, #56]	@ (80075c4 <vPortEnterCritical+0x5c>)
 800758a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800758c:	4b0d      	ldr	r3, [pc, #52]	@ (80075c4 <vPortEnterCritical+0x5c>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d110      	bne.n	80075b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007594:	4b0c      	ldr	r3, [pc, #48]	@ (80075c8 <vPortEnterCritical+0x60>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00b      	beq.n	80075b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	603b      	str	r3, [r7, #0]
}
 80075b0:	bf00      	nop
 80075b2:	bf00      	nop
 80075b4:	e7fd      	b.n	80075b2 <vPortEnterCritical+0x4a>
	}
}
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	2000000c 	.word	0x2000000c
 80075c8:	e000ed04 	.word	0xe000ed04

080075cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075d2:	4b12      	ldr	r3, [pc, #72]	@ (800761c <vPortExitCritical+0x50>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10b      	bne.n	80075f2 <vPortExitCritical+0x26>
	__asm volatile
 80075da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075de:	f383 8811 	msr	BASEPRI, r3
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	607b      	str	r3, [r7, #4]
}
 80075ec:	bf00      	nop
 80075ee:	bf00      	nop
 80075f0:	e7fd      	b.n	80075ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80075f2:	4b0a      	ldr	r3, [pc, #40]	@ (800761c <vPortExitCritical+0x50>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	4a08      	ldr	r2, [pc, #32]	@ (800761c <vPortExitCritical+0x50>)
 80075fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075fc:	4b07      	ldr	r3, [pc, #28]	@ (800761c <vPortExitCritical+0x50>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d105      	bne.n	8007610 <vPortExitCritical+0x44>
 8007604:	2300      	movs	r3, #0
 8007606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	f383 8811 	msr	BASEPRI, r3
}
 800760e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	2000000c 	.word	0x2000000c

08007620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007620:	f3ef 8009 	mrs	r0, PSP
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	4b15      	ldr	r3, [pc, #84]	@ (8007680 <pxCurrentTCBConst>)
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	f01e 0f10 	tst.w	lr, #16
 8007630:	bf08      	it	eq
 8007632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800763a:	6010      	str	r0, [r2, #0]
 800763c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007640:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007644:	f380 8811 	msr	BASEPRI, r0
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f7fe fdae 	bl	80061b0 <vTaskSwitchContext>
 8007654:	f04f 0000 	mov.w	r0, #0
 8007658:	f380 8811 	msr	BASEPRI, r0
 800765c:	bc09      	pop	{r0, r3}
 800765e:	6819      	ldr	r1, [r3, #0]
 8007660:	6808      	ldr	r0, [r1, #0]
 8007662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007666:	f01e 0f10 	tst.w	lr, #16
 800766a:	bf08      	it	eq
 800766c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007670:	f380 8809 	msr	PSP, r0
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	f3af 8000 	nop.w

08007680 <pxCurrentTCBConst>:
 8007680:	20000e6c 	.word	0x20000e6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007684:	bf00      	nop
 8007686:	bf00      	nop

08007688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	607b      	str	r3, [r7, #4]
}
 80076a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076a2:	f7fe fccb 	bl	800603c <xTaskIncrementTick>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d003      	beq.n	80076b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076ac:	4b06      	ldr	r3, [pc, #24]	@ (80076c8 <xPortSysTickHandler+0x40>)
 80076ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	2300      	movs	r3, #0
 80076b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	f383 8811 	msr	BASEPRI, r3
}
 80076be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076c0:	bf00      	nop
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	e000ed04 	.word	0xe000ed04

080076cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076cc:	b480      	push	{r7}
 80076ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007700 <vPortSetupTimerInterrupt+0x34>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007704 <vPortSetupTimerInterrupt+0x38>)
 80076d8:	2200      	movs	r2, #0
 80076da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007708 <vPortSetupTimerInterrupt+0x3c>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a0a      	ldr	r2, [pc, #40]	@ (800770c <vPortSetupTimerInterrupt+0x40>)
 80076e2:	fba2 2303 	umull	r2, r3, r2, r3
 80076e6:	099b      	lsrs	r3, r3, #6
 80076e8:	4a09      	ldr	r2, [pc, #36]	@ (8007710 <vPortSetupTimerInterrupt+0x44>)
 80076ea:	3b01      	subs	r3, #1
 80076ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076ee:	4b04      	ldr	r3, [pc, #16]	@ (8007700 <vPortSetupTimerInterrupt+0x34>)
 80076f0:	2207      	movs	r2, #7
 80076f2:	601a      	str	r2, [r3, #0]
}
 80076f4:	bf00      	nop
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	e000e010 	.word	0xe000e010
 8007704:	e000e018 	.word	0xe000e018
 8007708:	20000000 	.word	0x20000000
 800770c:	10624dd3 	.word	0x10624dd3
 8007710:	e000e014 	.word	0xe000e014

08007714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007714:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007724 <vPortEnableVFP+0x10>
 8007718:	6801      	ldr	r1, [r0, #0]
 800771a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800771e:	6001      	str	r1, [r0, #0]
 8007720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007722:	bf00      	nop
 8007724:	e000ed88 	.word	0xe000ed88

08007728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800772e:	f3ef 8305 	mrs	r3, IPSR
 8007732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2b0f      	cmp	r3, #15
 8007738:	d915      	bls.n	8007766 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800773a:	4a18      	ldr	r2, [pc, #96]	@ (800779c <vPortValidateInterruptPriority+0x74>)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	4413      	add	r3, r2
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007744:	4b16      	ldr	r3, [pc, #88]	@ (80077a0 <vPortValidateInterruptPriority+0x78>)
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	7afa      	ldrb	r2, [r7, #11]
 800774a:	429a      	cmp	r2, r3
 800774c:	d20b      	bcs.n	8007766 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	607b      	str	r3, [r7, #4]
}
 8007760:	bf00      	nop
 8007762:	bf00      	nop
 8007764:	e7fd      	b.n	8007762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007766:	4b0f      	ldr	r3, [pc, #60]	@ (80077a4 <vPortValidateInterruptPriority+0x7c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800776e:	4b0e      	ldr	r3, [pc, #56]	@ (80077a8 <vPortValidateInterruptPriority+0x80>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	429a      	cmp	r2, r3
 8007774:	d90b      	bls.n	800778e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	603b      	str	r3, [r7, #0]
}
 8007788:	bf00      	nop
 800778a:	bf00      	nop
 800778c:	e7fd      	b.n	800778a <vPortValidateInterruptPriority+0x62>
	}
 800778e:	bf00      	nop
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	e000e3f0 	.word	0xe000e3f0
 80077a0:	20001498 	.word	0x20001498
 80077a4:	e000ed0c 	.word	0xe000ed0c
 80077a8:	2000149c 	.word	0x2000149c

080077ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b08a      	sub	sp, #40	@ 0x28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077b4:	2300      	movs	r3, #0
 80077b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80077b8:	f7fe fb84 	bl	8005ec4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077bc:	4b5c      	ldr	r3, [pc, #368]	@ (8007930 <pvPortMalloc+0x184>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077c4:	f000 f924 	bl	8007a10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077c8:	4b5a      	ldr	r3, [pc, #360]	@ (8007934 <pvPortMalloc+0x188>)
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4013      	ands	r3, r2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f040 8095 	bne.w	8007900 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d01e      	beq.n	800781a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80077dc:	2208      	movs	r2, #8
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4413      	add	r3, r2
 80077e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f003 0307 	and.w	r3, r3, #7
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d015      	beq.n	800781a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f023 0307 	bic.w	r3, r3, #7
 80077f4:	3308      	adds	r3, #8
 80077f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f003 0307 	and.w	r3, r3, #7
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00b      	beq.n	800781a <pvPortMalloc+0x6e>
	__asm volatile
 8007802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	617b      	str	r3, [r7, #20]
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop
 8007818:	e7fd      	b.n	8007816 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d06f      	beq.n	8007900 <pvPortMalloc+0x154>
 8007820:	4b45      	ldr	r3, [pc, #276]	@ (8007938 <pvPortMalloc+0x18c>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	429a      	cmp	r2, r3
 8007828:	d86a      	bhi.n	8007900 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800782a:	4b44      	ldr	r3, [pc, #272]	@ (800793c <pvPortMalloc+0x190>)
 800782c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800782e:	4b43      	ldr	r3, [pc, #268]	@ (800793c <pvPortMalloc+0x190>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007834:	e004      	b.n	8007840 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007838:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800783a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	429a      	cmp	r2, r3
 8007848:	d903      	bls.n	8007852 <pvPortMalloc+0xa6>
 800784a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1f1      	bne.n	8007836 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007852:	4b37      	ldr	r3, [pc, #220]	@ (8007930 <pvPortMalloc+0x184>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007858:	429a      	cmp	r2, r3
 800785a:	d051      	beq.n	8007900 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2208      	movs	r2, #8
 8007862:	4413      	add	r3, r2
 8007864:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800786e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007870:	685a      	ldr	r2, [r3, #4]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	1ad2      	subs	r2, r2, r3
 8007876:	2308      	movs	r3, #8
 8007878:	005b      	lsls	r3, r3, #1
 800787a:	429a      	cmp	r2, r3
 800787c:	d920      	bls.n	80078c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800787e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4413      	add	r3, r2
 8007884:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	f003 0307 	and.w	r3, r3, #7
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00b      	beq.n	80078a8 <pvPortMalloc+0xfc>
	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	613b      	str	r3, [r7, #16]
}
 80078a2:	bf00      	nop
 80078a4:	bf00      	nop
 80078a6:	e7fd      	b.n	80078a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	1ad2      	subs	r2, r2, r3
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078ba:	69b8      	ldr	r0, [r7, #24]
 80078bc:	f000 f90a 	bl	8007ad4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007938 <pvPortMalloc+0x18c>)
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	4a1b      	ldr	r2, [pc, #108]	@ (8007938 <pvPortMalloc+0x18c>)
 80078cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078ce:	4b1a      	ldr	r3, [pc, #104]	@ (8007938 <pvPortMalloc+0x18c>)
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	4b1b      	ldr	r3, [pc, #108]	@ (8007940 <pvPortMalloc+0x194>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d203      	bcs.n	80078e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078da:	4b17      	ldr	r3, [pc, #92]	@ (8007938 <pvPortMalloc+0x18c>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a18      	ldr	r2, [pc, #96]	@ (8007940 <pvPortMalloc+0x194>)
 80078e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	4b13      	ldr	r3, [pc, #76]	@ (8007934 <pvPortMalloc+0x188>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	431a      	orrs	r2, r3
 80078ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80078f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80078f6:	4b13      	ldr	r3, [pc, #76]	@ (8007944 <pvPortMalloc+0x198>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3301      	adds	r3, #1
 80078fc:	4a11      	ldr	r2, [pc, #68]	@ (8007944 <pvPortMalloc+0x198>)
 80078fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007900:	f7fe faee 	bl	8005ee0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	f003 0307 	and.w	r3, r3, #7
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00b      	beq.n	8007926 <pvPortMalloc+0x17a>
	__asm volatile
 800790e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	60fb      	str	r3, [r7, #12]
}
 8007920:	bf00      	nop
 8007922:	bf00      	nop
 8007924:	e7fd      	b.n	8007922 <pvPortMalloc+0x176>
	return pvReturn;
 8007926:	69fb      	ldr	r3, [r7, #28]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3728      	adds	r7, #40	@ 0x28
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	200050a8 	.word	0x200050a8
 8007934:	200050bc 	.word	0x200050bc
 8007938:	200050ac 	.word	0x200050ac
 800793c:	200050a0 	.word	0x200050a0
 8007940:	200050b0 	.word	0x200050b0
 8007944:	200050b4 	.word	0x200050b4

08007948 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d04f      	beq.n	80079fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800795a:	2308      	movs	r3, #8
 800795c:	425b      	negs	r3, r3
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	4413      	add	r3, r2
 8007962:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	4b25      	ldr	r3, [pc, #148]	@ (8007a04 <vPortFree+0xbc>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4013      	ands	r3, r2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10b      	bne.n	800798e <vPortFree+0x46>
	__asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	60fb      	str	r3, [r7, #12]
}
 8007988:	bf00      	nop
 800798a:	bf00      	nop
 800798c:	e7fd      	b.n	800798a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00b      	beq.n	80079ae <vPortFree+0x66>
	__asm volatile
 8007996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799a:	f383 8811 	msr	BASEPRI, r3
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	60bb      	str	r3, [r7, #8]
}
 80079a8:	bf00      	nop
 80079aa:	bf00      	nop
 80079ac:	e7fd      	b.n	80079aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	685a      	ldr	r2, [r3, #4]
 80079b2:	4b14      	ldr	r3, [pc, #80]	@ (8007a04 <vPortFree+0xbc>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4013      	ands	r3, r2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d01e      	beq.n	80079fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d11a      	bne.n	80079fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007a04 <vPortFree+0xbc>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	43db      	mvns	r3, r3
 80079ce:	401a      	ands	r2, r3
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079d4:	f7fe fa76 	bl	8005ec4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007a08 <vPortFree+0xc0>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4413      	add	r3, r2
 80079e2:	4a09      	ldr	r2, [pc, #36]	@ (8007a08 <vPortFree+0xc0>)
 80079e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079e6:	6938      	ldr	r0, [r7, #16]
 80079e8:	f000 f874 	bl	8007ad4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80079ec:	4b07      	ldr	r3, [pc, #28]	@ (8007a0c <vPortFree+0xc4>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3301      	adds	r3, #1
 80079f2:	4a06      	ldr	r2, [pc, #24]	@ (8007a0c <vPortFree+0xc4>)
 80079f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80079f6:	f7fe fa73 	bl	8005ee0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80079fa:	bf00      	nop
 80079fc:	3718      	adds	r7, #24
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	200050bc 	.word	0x200050bc
 8007a08:	200050ac 	.word	0x200050ac
 8007a0c:	200050b8 	.word	0x200050b8

08007a10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a16:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007a1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a1c:	4b27      	ldr	r3, [pc, #156]	@ (8007abc <prvHeapInit+0xac>)
 8007a1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f003 0307 	and.w	r3, r3, #7
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00c      	beq.n	8007a44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	3307      	adds	r3, #7
 8007a2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f023 0307 	bic.w	r3, r3, #7
 8007a36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8007abc <prvHeapInit+0xac>)
 8007a40:	4413      	add	r3, r2
 8007a42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a48:	4a1d      	ldr	r2, [pc, #116]	@ (8007ac0 <prvHeapInit+0xb0>)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8007ac0 <prvHeapInit+0xb0>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	4413      	add	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a5c:	2208      	movs	r2, #8
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	1a9b      	subs	r3, r3, r2
 8007a62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f023 0307 	bic.w	r3, r3, #7
 8007a6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4a15      	ldr	r2, [pc, #84]	@ (8007ac4 <prvHeapInit+0xb4>)
 8007a70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a72:	4b14      	ldr	r3, [pc, #80]	@ (8007ac4 <prvHeapInit+0xb4>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2200      	movs	r2, #0
 8007a78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a7a:	4b12      	ldr	r3, [pc, #72]	@ (8007ac4 <prvHeapInit+0xb4>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	1ad2      	subs	r2, r2, r3
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a90:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac4 <prvHeapInit+0xb4>)
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8007ac8 <prvHeapInit+0xb8>)
 8007a9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	4a09      	ldr	r2, [pc, #36]	@ (8007acc <prvHeapInit+0xbc>)
 8007aa6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007aa8:	4b09      	ldr	r3, [pc, #36]	@ (8007ad0 <prvHeapInit+0xc0>)
 8007aaa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007aae:	601a      	str	r2, [r3, #0]
}
 8007ab0:	bf00      	nop
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	200014a0 	.word	0x200014a0
 8007ac0:	200050a0 	.word	0x200050a0
 8007ac4:	200050a8 	.word	0x200050a8
 8007ac8:	200050b0 	.word	0x200050b0
 8007acc:	200050ac 	.word	0x200050ac
 8007ad0:	200050bc 	.word	0x200050bc

08007ad4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007adc:	4b28      	ldr	r3, [pc, #160]	@ (8007b80 <prvInsertBlockIntoFreeList+0xac>)
 8007ade:	60fb      	str	r3, [r7, #12]
 8007ae0:	e002      	b.n	8007ae8 <prvInsertBlockIntoFreeList+0x14>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	60fb      	str	r3, [r7, #12]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d8f7      	bhi.n	8007ae2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	4413      	add	r3, r2
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d108      	bne.n	8007b16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	685a      	ldr	r2, [r3, #4]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	441a      	add	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	441a      	add	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d118      	bne.n	8007b5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	4b15      	ldr	r3, [pc, #84]	@ (8007b84 <prvInsertBlockIntoFreeList+0xb0>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d00d      	beq.n	8007b52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	685a      	ldr	r2, [r3, #4]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	441a      	add	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	601a      	str	r2, [r3, #0]
 8007b50:	e008      	b.n	8007b64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b52:	4b0c      	ldr	r3, [pc, #48]	@ (8007b84 <prvInsertBlockIntoFreeList+0xb0>)
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	601a      	str	r2, [r3, #0]
 8007b5a:	e003      	b.n	8007b64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d002      	beq.n	8007b72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b72:	bf00      	nop
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	200050a0 	.word	0x200050a0
 8007b84:	200050a8 	.word	0x200050a8

08007b88 <std>:
 8007b88:	2300      	movs	r3, #0
 8007b8a:	b510      	push	{r4, lr}
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	e9c0 3300 	strd	r3, r3, [r0]
 8007b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b96:	6083      	str	r3, [r0, #8]
 8007b98:	8181      	strh	r1, [r0, #12]
 8007b9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007b9c:	81c2      	strh	r2, [r0, #14]
 8007b9e:	6183      	str	r3, [r0, #24]
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	2208      	movs	r2, #8
 8007ba4:	305c      	adds	r0, #92	@ 0x5c
 8007ba6:	f000 f906 	bl	8007db6 <memset>
 8007baa:	4b0d      	ldr	r3, [pc, #52]	@ (8007be0 <std+0x58>)
 8007bac:	6263      	str	r3, [r4, #36]	@ 0x24
 8007bae:	4b0d      	ldr	r3, [pc, #52]	@ (8007be4 <std+0x5c>)
 8007bb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8007be8 <std+0x60>)
 8007bb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007bec <std+0x64>)
 8007bb8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007bba:	4b0d      	ldr	r3, [pc, #52]	@ (8007bf0 <std+0x68>)
 8007bbc:	6224      	str	r4, [r4, #32]
 8007bbe:	429c      	cmp	r4, r3
 8007bc0:	d006      	beq.n	8007bd0 <std+0x48>
 8007bc2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007bc6:	4294      	cmp	r4, r2
 8007bc8:	d002      	beq.n	8007bd0 <std+0x48>
 8007bca:	33d0      	adds	r3, #208	@ 0xd0
 8007bcc:	429c      	cmp	r4, r3
 8007bce:	d105      	bne.n	8007bdc <std+0x54>
 8007bd0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bd8:	f000 b9bc 	b.w	8007f54 <__retarget_lock_init_recursive>
 8007bdc:	bd10      	pop	{r4, pc}
 8007bde:	bf00      	nop
 8007be0:	08007d31 	.word	0x08007d31
 8007be4:	08007d53 	.word	0x08007d53
 8007be8:	08007d8b 	.word	0x08007d8b
 8007bec:	08007daf 	.word	0x08007daf
 8007bf0:	200050c0 	.word	0x200050c0

08007bf4 <stdio_exit_handler>:
 8007bf4:	4a02      	ldr	r2, [pc, #8]	@ (8007c00 <stdio_exit_handler+0xc>)
 8007bf6:	4903      	ldr	r1, [pc, #12]	@ (8007c04 <stdio_exit_handler+0x10>)
 8007bf8:	4803      	ldr	r0, [pc, #12]	@ (8007c08 <stdio_exit_handler+0x14>)
 8007bfa:	f000 b869 	b.w	8007cd0 <_fwalk_sglue>
 8007bfe:	bf00      	nop
 8007c00:	20000010 	.word	0x20000010
 8007c04:	08008811 	.word	0x08008811
 8007c08:	20000020 	.word	0x20000020

08007c0c <cleanup_stdio>:
 8007c0c:	6841      	ldr	r1, [r0, #4]
 8007c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8007c40 <cleanup_stdio+0x34>)
 8007c10:	4299      	cmp	r1, r3
 8007c12:	b510      	push	{r4, lr}
 8007c14:	4604      	mov	r4, r0
 8007c16:	d001      	beq.n	8007c1c <cleanup_stdio+0x10>
 8007c18:	f000 fdfa 	bl	8008810 <_fflush_r>
 8007c1c:	68a1      	ldr	r1, [r4, #8]
 8007c1e:	4b09      	ldr	r3, [pc, #36]	@ (8007c44 <cleanup_stdio+0x38>)
 8007c20:	4299      	cmp	r1, r3
 8007c22:	d002      	beq.n	8007c2a <cleanup_stdio+0x1e>
 8007c24:	4620      	mov	r0, r4
 8007c26:	f000 fdf3 	bl	8008810 <_fflush_r>
 8007c2a:	68e1      	ldr	r1, [r4, #12]
 8007c2c:	4b06      	ldr	r3, [pc, #24]	@ (8007c48 <cleanup_stdio+0x3c>)
 8007c2e:	4299      	cmp	r1, r3
 8007c30:	d004      	beq.n	8007c3c <cleanup_stdio+0x30>
 8007c32:	4620      	mov	r0, r4
 8007c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c38:	f000 bdea 	b.w	8008810 <_fflush_r>
 8007c3c:	bd10      	pop	{r4, pc}
 8007c3e:	bf00      	nop
 8007c40:	200050c0 	.word	0x200050c0
 8007c44:	20005128 	.word	0x20005128
 8007c48:	20005190 	.word	0x20005190

08007c4c <global_stdio_init.part.0>:
 8007c4c:	b510      	push	{r4, lr}
 8007c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c7c <global_stdio_init.part.0+0x30>)
 8007c50:	4c0b      	ldr	r4, [pc, #44]	@ (8007c80 <global_stdio_init.part.0+0x34>)
 8007c52:	4a0c      	ldr	r2, [pc, #48]	@ (8007c84 <global_stdio_init.part.0+0x38>)
 8007c54:	601a      	str	r2, [r3, #0]
 8007c56:	4620      	mov	r0, r4
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2104      	movs	r1, #4
 8007c5c:	f7ff ff94 	bl	8007b88 <std>
 8007c60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c64:	2201      	movs	r2, #1
 8007c66:	2109      	movs	r1, #9
 8007c68:	f7ff ff8e 	bl	8007b88 <std>
 8007c6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c70:	2202      	movs	r2, #2
 8007c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c76:	2112      	movs	r1, #18
 8007c78:	f7ff bf86 	b.w	8007b88 <std>
 8007c7c:	200051f8 	.word	0x200051f8
 8007c80:	200050c0 	.word	0x200050c0
 8007c84:	08007bf5 	.word	0x08007bf5

08007c88 <__sfp_lock_acquire>:
 8007c88:	4801      	ldr	r0, [pc, #4]	@ (8007c90 <__sfp_lock_acquire+0x8>)
 8007c8a:	f000 b964 	b.w	8007f56 <__retarget_lock_acquire_recursive>
 8007c8e:	bf00      	nop
 8007c90:	20005201 	.word	0x20005201

08007c94 <__sfp_lock_release>:
 8007c94:	4801      	ldr	r0, [pc, #4]	@ (8007c9c <__sfp_lock_release+0x8>)
 8007c96:	f000 b95f 	b.w	8007f58 <__retarget_lock_release_recursive>
 8007c9a:	bf00      	nop
 8007c9c:	20005201 	.word	0x20005201

08007ca0 <__sinit>:
 8007ca0:	b510      	push	{r4, lr}
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	f7ff fff0 	bl	8007c88 <__sfp_lock_acquire>
 8007ca8:	6a23      	ldr	r3, [r4, #32]
 8007caa:	b11b      	cbz	r3, 8007cb4 <__sinit+0x14>
 8007cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cb0:	f7ff bff0 	b.w	8007c94 <__sfp_lock_release>
 8007cb4:	4b04      	ldr	r3, [pc, #16]	@ (8007cc8 <__sinit+0x28>)
 8007cb6:	6223      	str	r3, [r4, #32]
 8007cb8:	4b04      	ldr	r3, [pc, #16]	@ (8007ccc <__sinit+0x2c>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1f5      	bne.n	8007cac <__sinit+0xc>
 8007cc0:	f7ff ffc4 	bl	8007c4c <global_stdio_init.part.0>
 8007cc4:	e7f2      	b.n	8007cac <__sinit+0xc>
 8007cc6:	bf00      	nop
 8007cc8:	08007c0d 	.word	0x08007c0d
 8007ccc:	200051f8 	.word	0x200051f8

08007cd0 <_fwalk_sglue>:
 8007cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cd4:	4607      	mov	r7, r0
 8007cd6:	4688      	mov	r8, r1
 8007cd8:	4614      	mov	r4, r2
 8007cda:	2600      	movs	r6, #0
 8007cdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ce0:	f1b9 0901 	subs.w	r9, r9, #1
 8007ce4:	d505      	bpl.n	8007cf2 <_fwalk_sglue+0x22>
 8007ce6:	6824      	ldr	r4, [r4, #0]
 8007ce8:	2c00      	cmp	r4, #0
 8007cea:	d1f7      	bne.n	8007cdc <_fwalk_sglue+0xc>
 8007cec:	4630      	mov	r0, r6
 8007cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cf2:	89ab      	ldrh	r3, [r5, #12]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d907      	bls.n	8007d08 <_fwalk_sglue+0x38>
 8007cf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	d003      	beq.n	8007d08 <_fwalk_sglue+0x38>
 8007d00:	4629      	mov	r1, r5
 8007d02:	4638      	mov	r0, r7
 8007d04:	47c0      	blx	r8
 8007d06:	4306      	orrs	r6, r0
 8007d08:	3568      	adds	r5, #104	@ 0x68
 8007d0a:	e7e9      	b.n	8007ce0 <_fwalk_sglue+0x10>

08007d0c <iprintf>:
 8007d0c:	b40f      	push	{r0, r1, r2, r3}
 8007d0e:	b507      	push	{r0, r1, r2, lr}
 8007d10:	4906      	ldr	r1, [pc, #24]	@ (8007d2c <iprintf+0x20>)
 8007d12:	ab04      	add	r3, sp, #16
 8007d14:	6808      	ldr	r0, [r1, #0]
 8007d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d1a:	6881      	ldr	r1, [r0, #8]
 8007d1c:	9301      	str	r3, [sp, #4]
 8007d1e:	f000 fa4d 	bl	80081bc <_vfiprintf_r>
 8007d22:	b003      	add	sp, #12
 8007d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d28:	b004      	add	sp, #16
 8007d2a:	4770      	bx	lr
 8007d2c:	2000001c 	.word	0x2000001c

08007d30 <__sread>:
 8007d30:	b510      	push	{r4, lr}
 8007d32:	460c      	mov	r4, r1
 8007d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d38:	f000 f8be 	bl	8007eb8 <_read_r>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	bfab      	itete	ge
 8007d40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d42:	89a3      	ldrhlt	r3, [r4, #12]
 8007d44:	181b      	addge	r3, r3, r0
 8007d46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d4a:	bfac      	ite	ge
 8007d4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d4e:	81a3      	strhlt	r3, [r4, #12]
 8007d50:	bd10      	pop	{r4, pc}

08007d52 <__swrite>:
 8007d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d56:	461f      	mov	r7, r3
 8007d58:	898b      	ldrh	r3, [r1, #12]
 8007d5a:	05db      	lsls	r3, r3, #23
 8007d5c:	4605      	mov	r5, r0
 8007d5e:	460c      	mov	r4, r1
 8007d60:	4616      	mov	r6, r2
 8007d62:	d505      	bpl.n	8007d70 <__swrite+0x1e>
 8007d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d68:	2302      	movs	r3, #2
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f000 f892 	bl	8007e94 <_lseek_r>
 8007d70:	89a3      	ldrh	r3, [r4, #12]
 8007d72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d7a:	81a3      	strh	r3, [r4, #12]
 8007d7c:	4632      	mov	r2, r6
 8007d7e:	463b      	mov	r3, r7
 8007d80:	4628      	mov	r0, r5
 8007d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d86:	f000 b8a9 	b.w	8007edc <_write_r>

08007d8a <__sseek>:
 8007d8a:	b510      	push	{r4, lr}
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d92:	f000 f87f 	bl	8007e94 <_lseek_r>
 8007d96:	1c43      	adds	r3, r0, #1
 8007d98:	89a3      	ldrh	r3, [r4, #12]
 8007d9a:	bf15      	itete	ne
 8007d9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007d9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007da2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007da6:	81a3      	strheq	r3, [r4, #12]
 8007da8:	bf18      	it	ne
 8007daa:	81a3      	strhne	r3, [r4, #12]
 8007dac:	bd10      	pop	{r4, pc}

08007dae <__sclose>:
 8007dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007db2:	f000 b809 	b.w	8007dc8 <_close_r>

08007db6 <memset>:
 8007db6:	4402      	add	r2, r0
 8007db8:	4603      	mov	r3, r0
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d100      	bne.n	8007dc0 <memset+0xa>
 8007dbe:	4770      	bx	lr
 8007dc0:	f803 1b01 	strb.w	r1, [r3], #1
 8007dc4:	e7f9      	b.n	8007dba <memset+0x4>
	...

08007dc8 <_close_r>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	4d06      	ldr	r5, [pc, #24]	@ (8007de4 <_close_r+0x1c>)
 8007dcc:	2300      	movs	r3, #0
 8007dce:	4604      	mov	r4, r0
 8007dd0:	4608      	mov	r0, r1
 8007dd2:	602b      	str	r3, [r5, #0]
 8007dd4:	f7f9 fa45 	bl	8001262 <_close>
 8007dd8:	1c43      	adds	r3, r0, #1
 8007dda:	d102      	bne.n	8007de2 <_close_r+0x1a>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	b103      	cbz	r3, 8007de2 <_close_r+0x1a>
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	bd38      	pop	{r3, r4, r5, pc}
 8007de4:	200051fc 	.word	0x200051fc

08007de8 <_reclaim_reent>:
 8007de8:	4b29      	ldr	r3, [pc, #164]	@ (8007e90 <_reclaim_reent+0xa8>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4283      	cmp	r3, r0
 8007dee:	b570      	push	{r4, r5, r6, lr}
 8007df0:	4604      	mov	r4, r0
 8007df2:	d04b      	beq.n	8007e8c <_reclaim_reent+0xa4>
 8007df4:	69c3      	ldr	r3, [r0, #28]
 8007df6:	b1ab      	cbz	r3, 8007e24 <_reclaim_reent+0x3c>
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	b16b      	cbz	r3, 8007e18 <_reclaim_reent+0x30>
 8007dfc:	2500      	movs	r5, #0
 8007dfe:	69e3      	ldr	r3, [r4, #28]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	5959      	ldr	r1, [r3, r5]
 8007e04:	2900      	cmp	r1, #0
 8007e06:	d13b      	bne.n	8007e80 <_reclaim_reent+0x98>
 8007e08:	3504      	adds	r5, #4
 8007e0a:	2d80      	cmp	r5, #128	@ 0x80
 8007e0c:	d1f7      	bne.n	8007dfe <_reclaim_reent+0x16>
 8007e0e:	69e3      	ldr	r3, [r4, #28]
 8007e10:	4620      	mov	r0, r4
 8007e12:	68d9      	ldr	r1, [r3, #12]
 8007e14:	f000 f8b0 	bl	8007f78 <_free_r>
 8007e18:	69e3      	ldr	r3, [r4, #28]
 8007e1a:	6819      	ldr	r1, [r3, #0]
 8007e1c:	b111      	cbz	r1, 8007e24 <_reclaim_reent+0x3c>
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f000 f8aa 	bl	8007f78 <_free_r>
 8007e24:	6961      	ldr	r1, [r4, #20]
 8007e26:	b111      	cbz	r1, 8007e2e <_reclaim_reent+0x46>
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f000 f8a5 	bl	8007f78 <_free_r>
 8007e2e:	69e1      	ldr	r1, [r4, #28]
 8007e30:	b111      	cbz	r1, 8007e38 <_reclaim_reent+0x50>
 8007e32:	4620      	mov	r0, r4
 8007e34:	f000 f8a0 	bl	8007f78 <_free_r>
 8007e38:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007e3a:	b111      	cbz	r1, 8007e42 <_reclaim_reent+0x5a>
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	f000 f89b 	bl	8007f78 <_free_r>
 8007e42:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e44:	b111      	cbz	r1, 8007e4c <_reclaim_reent+0x64>
 8007e46:	4620      	mov	r0, r4
 8007e48:	f000 f896 	bl	8007f78 <_free_r>
 8007e4c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007e4e:	b111      	cbz	r1, 8007e56 <_reclaim_reent+0x6e>
 8007e50:	4620      	mov	r0, r4
 8007e52:	f000 f891 	bl	8007f78 <_free_r>
 8007e56:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007e58:	b111      	cbz	r1, 8007e60 <_reclaim_reent+0x78>
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f000 f88c 	bl	8007f78 <_free_r>
 8007e60:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007e62:	b111      	cbz	r1, 8007e6a <_reclaim_reent+0x82>
 8007e64:	4620      	mov	r0, r4
 8007e66:	f000 f887 	bl	8007f78 <_free_r>
 8007e6a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007e6c:	b111      	cbz	r1, 8007e74 <_reclaim_reent+0x8c>
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f000 f882 	bl	8007f78 <_free_r>
 8007e74:	6a23      	ldr	r3, [r4, #32]
 8007e76:	b14b      	cbz	r3, 8007e8c <_reclaim_reent+0xa4>
 8007e78:	4620      	mov	r0, r4
 8007e7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e7e:	4718      	bx	r3
 8007e80:	680e      	ldr	r6, [r1, #0]
 8007e82:	4620      	mov	r0, r4
 8007e84:	f000 f878 	bl	8007f78 <_free_r>
 8007e88:	4631      	mov	r1, r6
 8007e8a:	e7bb      	b.n	8007e04 <_reclaim_reent+0x1c>
 8007e8c:	bd70      	pop	{r4, r5, r6, pc}
 8007e8e:	bf00      	nop
 8007e90:	2000001c 	.word	0x2000001c

08007e94 <_lseek_r>:
 8007e94:	b538      	push	{r3, r4, r5, lr}
 8007e96:	4d07      	ldr	r5, [pc, #28]	@ (8007eb4 <_lseek_r+0x20>)
 8007e98:	4604      	mov	r4, r0
 8007e9a:	4608      	mov	r0, r1
 8007e9c:	4611      	mov	r1, r2
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	602a      	str	r2, [r5, #0]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f7f9 fa04 	bl	80012b0 <_lseek>
 8007ea8:	1c43      	adds	r3, r0, #1
 8007eaa:	d102      	bne.n	8007eb2 <_lseek_r+0x1e>
 8007eac:	682b      	ldr	r3, [r5, #0]
 8007eae:	b103      	cbz	r3, 8007eb2 <_lseek_r+0x1e>
 8007eb0:	6023      	str	r3, [r4, #0]
 8007eb2:	bd38      	pop	{r3, r4, r5, pc}
 8007eb4:	200051fc 	.word	0x200051fc

08007eb8 <_read_r>:
 8007eb8:	b538      	push	{r3, r4, r5, lr}
 8007eba:	4d07      	ldr	r5, [pc, #28]	@ (8007ed8 <_read_r+0x20>)
 8007ebc:	4604      	mov	r4, r0
 8007ebe:	4608      	mov	r0, r1
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	602a      	str	r2, [r5, #0]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	f7f9 f992 	bl	80011f0 <_read>
 8007ecc:	1c43      	adds	r3, r0, #1
 8007ece:	d102      	bne.n	8007ed6 <_read_r+0x1e>
 8007ed0:	682b      	ldr	r3, [r5, #0]
 8007ed2:	b103      	cbz	r3, 8007ed6 <_read_r+0x1e>
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	bd38      	pop	{r3, r4, r5, pc}
 8007ed8:	200051fc 	.word	0x200051fc

08007edc <_write_r>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	4d07      	ldr	r5, [pc, #28]	@ (8007efc <_write_r+0x20>)
 8007ee0:	4604      	mov	r4, r0
 8007ee2:	4608      	mov	r0, r1
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	602a      	str	r2, [r5, #0]
 8007eea:	461a      	mov	r2, r3
 8007eec:	f7f9 f99d 	bl	800122a <_write>
 8007ef0:	1c43      	adds	r3, r0, #1
 8007ef2:	d102      	bne.n	8007efa <_write_r+0x1e>
 8007ef4:	682b      	ldr	r3, [r5, #0]
 8007ef6:	b103      	cbz	r3, 8007efa <_write_r+0x1e>
 8007ef8:	6023      	str	r3, [r4, #0]
 8007efa:	bd38      	pop	{r3, r4, r5, pc}
 8007efc:	200051fc 	.word	0x200051fc

08007f00 <__errno>:
 8007f00:	4b01      	ldr	r3, [pc, #4]	@ (8007f08 <__errno+0x8>)
 8007f02:	6818      	ldr	r0, [r3, #0]
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	2000001c 	.word	0x2000001c

08007f0c <__libc_init_array>:
 8007f0c:	b570      	push	{r4, r5, r6, lr}
 8007f0e:	4d0d      	ldr	r5, [pc, #52]	@ (8007f44 <__libc_init_array+0x38>)
 8007f10:	4c0d      	ldr	r4, [pc, #52]	@ (8007f48 <__libc_init_array+0x3c>)
 8007f12:	1b64      	subs	r4, r4, r5
 8007f14:	10a4      	asrs	r4, r4, #2
 8007f16:	2600      	movs	r6, #0
 8007f18:	42a6      	cmp	r6, r4
 8007f1a:	d109      	bne.n	8007f30 <__libc_init_array+0x24>
 8007f1c:	4d0b      	ldr	r5, [pc, #44]	@ (8007f4c <__libc_init_array+0x40>)
 8007f1e:	4c0c      	ldr	r4, [pc, #48]	@ (8007f50 <__libc_init_array+0x44>)
 8007f20:	f000 fdc6 	bl	8008ab0 <_init>
 8007f24:	1b64      	subs	r4, r4, r5
 8007f26:	10a4      	asrs	r4, r4, #2
 8007f28:	2600      	movs	r6, #0
 8007f2a:	42a6      	cmp	r6, r4
 8007f2c:	d105      	bne.n	8007f3a <__libc_init_array+0x2e>
 8007f2e:	bd70      	pop	{r4, r5, r6, pc}
 8007f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f34:	4798      	blx	r3
 8007f36:	3601      	adds	r6, #1
 8007f38:	e7ee      	b.n	8007f18 <__libc_init_array+0xc>
 8007f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f3e:	4798      	blx	r3
 8007f40:	3601      	adds	r6, #1
 8007f42:	e7f2      	b.n	8007f2a <__libc_init_array+0x1e>
 8007f44:	08008bb0 	.word	0x08008bb0
 8007f48:	08008bb0 	.word	0x08008bb0
 8007f4c:	08008bb0 	.word	0x08008bb0
 8007f50:	08008bb4 	.word	0x08008bb4

08007f54 <__retarget_lock_init_recursive>:
 8007f54:	4770      	bx	lr

08007f56 <__retarget_lock_acquire_recursive>:
 8007f56:	4770      	bx	lr

08007f58 <__retarget_lock_release_recursive>:
 8007f58:	4770      	bx	lr

08007f5a <memcpy>:
 8007f5a:	440a      	add	r2, r1
 8007f5c:	4291      	cmp	r1, r2
 8007f5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f62:	d100      	bne.n	8007f66 <memcpy+0xc>
 8007f64:	4770      	bx	lr
 8007f66:	b510      	push	{r4, lr}
 8007f68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f70:	4291      	cmp	r1, r2
 8007f72:	d1f9      	bne.n	8007f68 <memcpy+0xe>
 8007f74:	bd10      	pop	{r4, pc}
	...

08007f78 <_free_r>:
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	4605      	mov	r5, r0
 8007f7c:	2900      	cmp	r1, #0
 8007f7e:	d041      	beq.n	8008004 <_free_r+0x8c>
 8007f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f84:	1f0c      	subs	r4, r1, #4
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	bfb8      	it	lt
 8007f8a:	18e4      	addlt	r4, r4, r3
 8007f8c:	f000 f8e0 	bl	8008150 <__malloc_lock>
 8007f90:	4a1d      	ldr	r2, [pc, #116]	@ (8008008 <_free_r+0x90>)
 8007f92:	6813      	ldr	r3, [r2, #0]
 8007f94:	b933      	cbnz	r3, 8007fa4 <_free_r+0x2c>
 8007f96:	6063      	str	r3, [r4, #4]
 8007f98:	6014      	str	r4, [r2, #0]
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fa0:	f000 b8dc 	b.w	800815c <__malloc_unlock>
 8007fa4:	42a3      	cmp	r3, r4
 8007fa6:	d908      	bls.n	8007fba <_free_r+0x42>
 8007fa8:	6820      	ldr	r0, [r4, #0]
 8007faa:	1821      	adds	r1, r4, r0
 8007fac:	428b      	cmp	r3, r1
 8007fae:	bf01      	itttt	eq
 8007fb0:	6819      	ldreq	r1, [r3, #0]
 8007fb2:	685b      	ldreq	r3, [r3, #4]
 8007fb4:	1809      	addeq	r1, r1, r0
 8007fb6:	6021      	streq	r1, [r4, #0]
 8007fb8:	e7ed      	b.n	8007f96 <_free_r+0x1e>
 8007fba:	461a      	mov	r2, r3
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	b10b      	cbz	r3, 8007fc4 <_free_r+0x4c>
 8007fc0:	42a3      	cmp	r3, r4
 8007fc2:	d9fa      	bls.n	8007fba <_free_r+0x42>
 8007fc4:	6811      	ldr	r1, [r2, #0]
 8007fc6:	1850      	adds	r0, r2, r1
 8007fc8:	42a0      	cmp	r0, r4
 8007fca:	d10b      	bne.n	8007fe4 <_free_r+0x6c>
 8007fcc:	6820      	ldr	r0, [r4, #0]
 8007fce:	4401      	add	r1, r0
 8007fd0:	1850      	adds	r0, r2, r1
 8007fd2:	4283      	cmp	r3, r0
 8007fd4:	6011      	str	r1, [r2, #0]
 8007fd6:	d1e0      	bne.n	8007f9a <_free_r+0x22>
 8007fd8:	6818      	ldr	r0, [r3, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	6053      	str	r3, [r2, #4]
 8007fde:	4408      	add	r0, r1
 8007fe0:	6010      	str	r0, [r2, #0]
 8007fe2:	e7da      	b.n	8007f9a <_free_r+0x22>
 8007fe4:	d902      	bls.n	8007fec <_free_r+0x74>
 8007fe6:	230c      	movs	r3, #12
 8007fe8:	602b      	str	r3, [r5, #0]
 8007fea:	e7d6      	b.n	8007f9a <_free_r+0x22>
 8007fec:	6820      	ldr	r0, [r4, #0]
 8007fee:	1821      	adds	r1, r4, r0
 8007ff0:	428b      	cmp	r3, r1
 8007ff2:	bf04      	itt	eq
 8007ff4:	6819      	ldreq	r1, [r3, #0]
 8007ff6:	685b      	ldreq	r3, [r3, #4]
 8007ff8:	6063      	str	r3, [r4, #4]
 8007ffa:	bf04      	itt	eq
 8007ffc:	1809      	addeq	r1, r1, r0
 8007ffe:	6021      	streq	r1, [r4, #0]
 8008000:	6054      	str	r4, [r2, #4]
 8008002:	e7ca      	b.n	8007f9a <_free_r+0x22>
 8008004:	bd38      	pop	{r3, r4, r5, pc}
 8008006:	bf00      	nop
 8008008:	20005208 	.word	0x20005208

0800800c <sbrk_aligned>:
 800800c:	b570      	push	{r4, r5, r6, lr}
 800800e:	4e0f      	ldr	r6, [pc, #60]	@ (800804c <sbrk_aligned+0x40>)
 8008010:	460c      	mov	r4, r1
 8008012:	6831      	ldr	r1, [r6, #0]
 8008014:	4605      	mov	r5, r0
 8008016:	b911      	cbnz	r1, 800801e <sbrk_aligned+0x12>
 8008018:	f000 fcb6 	bl	8008988 <_sbrk_r>
 800801c:	6030      	str	r0, [r6, #0]
 800801e:	4621      	mov	r1, r4
 8008020:	4628      	mov	r0, r5
 8008022:	f000 fcb1 	bl	8008988 <_sbrk_r>
 8008026:	1c43      	adds	r3, r0, #1
 8008028:	d103      	bne.n	8008032 <sbrk_aligned+0x26>
 800802a:	f04f 34ff 	mov.w	r4, #4294967295
 800802e:	4620      	mov	r0, r4
 8008030:	bd70      	pop	{r4, r5, r6, pc}
 8008032:	1cc4      	adds	r4, r0, #3
 8008034:	f024 0403 	bic.w	r4, r4, #3
 8008038:	42a0      	cmp	r0, r4
 800803a:	d0f8      	beq.n	800802e <sbrk_aligned+0x22>
 800803c:	1a21      	subs	r1, r4, r0
 800803e:	4628      	mov	r0, r5
 8008040:	f000 fca2 	bl	8008988 <_sbrk_r>
 8008044:	3001      	adds	r0, #1
 8008046:	d1f2      	bne.n	800802e <sbrk_aligned+0x22>
 8008048:	e7ef      	b.n	800802a <sbrk_aligned+0x1e>
 800804a:	bf00      	nop
 800804c:	20005204 	.word	0x20005204

08008050 <_malloc_r>:
 8008050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008054:	1ccd      	adds	r5, r1, #3
 8008056:	f025 0503 	bic.w	r5, r5, #3
 800805a:	3508      	adds	r5, #8
 800805c:	2d0c      	cmp	r5, #12
 800805e:	bf38      	it	cc
 8008060:	250c      	movcc	r5, #12
 8008062:	2d00      	cmp	r5, #0
 8008064:	4606      	mov	r6, r0
 8008066:	db01      	blt.n	800806c <_malloc_r+0x1c>
 8008068:	42a9      	cmp	r1, r5
 800806a:	d904      	bls.n	8008076 <_malloc_r+0x26>
 800806c:	230c      	movs	r3, #12
 800806e:	6033      	str	r3, [r6, #0]
 8008070:	2000      	movs	r0, #0
 8008072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008076:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800814c <_malloc_r+0xfc>
 800807a:	f000 f869 	bl	8008150 <__malloc_lock>
 800807e:	f8d8 3000 	ldr.w	r3, [r8]
 8008082:	461c      	mov	r4, r3
 8008084:	bb44      	cbnz	r4, 80080d8 <_malloc_r+0x88>
 8008086:	4629      	mov	r1, r5
 8008088:	4630      	mov	r0, r6
 800808a:	f7ff ffbf 	bl	800800c <sbrk_aligned>
 800808e:	1c43      	adds	r3, r0, #1
 8008090:	4604      	mov	r4, r0
 8008092:	d158      	bne.n	8008146 <_malloc_r+0xf6>
 8008094:	f8d8 4000 	ldr.w	r4, [r8]
 8008098:	4627      	mov	r7, r4
 800809a:	2f00      	cmp	r7, #0
 800809c:	d143      	bne.n	8008126 <_malloc_r+0xd6>
 800809e:	2c00      	cmp	r4, #0
 80080a0:	d04b      	beq.n	800813a <_malloc_r+0xea>
 80080a2:	6823      	ldr	r3, [r4, #0]
 80080a4:	4639      	mov	r1, r7
 80080a6:	4630      	mov	r0, r6
 80080a8:	eb04 0903 	add.w	r9, r4, r3
 80080ac:	f000 fc6c 	bl	8008988 <_sbrk_r>
 80080b0:	4581      	cmp	r9, r0
 80080b2:	d142      	bne.n	800813a <_malloc_r+0xea>
 80080b4:	6821      	ldr	r1, [r4, #0]
 80080b6:	1a6d      	subs	r5, r5, r1
 80080b8:	4629      	mov	r1, r5
 80080ba:	4630      	mov	r0, r6
 80080bc:	f7ff ffa6 	bl	800800c <sbrk_aligned>
 80080c0:	3001      	adds	r0, #1
 80080c2:	d03a      	beq.n	800813a <_malloc_r+0xea>
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	442b      	add	r3, r5
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	f8d8 3000 	ldr.w	r3, [r8]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	bb62      	cbnz	r2, 800812c <_malloc_r+0xdc>
 80080d2:	f8c8 7000 	str.w	r7, [r8]
 80080d6:	e00f      	b.n	80080f8 <_malloc_r+0xa8>
 80080d8:	6822      	ldr	r2, [r4, #0]
 80080da:	1b52      	subs	r2, r2, r5
 80080dc:	d420      	bmi.n	8008120 <_malloc_r+0xd0>
 80080de:	2a0b      	cmp	r2, #11
 80080e0:	d917      	bls.n	8008112 <_malloc_r+0xc2>
 80080e2:	1961      	adds	r1, r4, r5
 80080e4:	42a3      	cmp	r3, r4
 80080e6:	6025      	str	r5, [r4, #0]
 80080e8:	bf18      	it	ne
 80080ea:	6059      	strne	r1, [r3, #4]
 80080ec:	6863      	ldr	r3, [r4, #4]
 80080ee:	bf08      	it	eq
 80080f0:	f8c8 1000 	streq.w	r1, [r8]
 80080f4:	5162      	str	r2, [r4, r5]
 80080f6:	604b      	str	r3, [r1, #4]
 80080f8:	4630      	mov	r0, r6
 80080fa:	f000 f82f 	bl	800815c <__malloc_unlock>
 80080fe:	f104 000b 	add.w	r0, r4, #11
 8008102:	1d23      	adds	r3, r4, #4
 8008104:	f020 0007 	bic.w	r0, r0, #7
 8008108:	1ac2      	subs	r2, r0, r3
 800810a:	bf1c      	itt	ne
 800810c:	1a1b      	subne	r3, r3, r0
 800810e:	50a3      	strne	r3, [r4, r2]
 8008110:	e7af      	b.n	8008072 <_malloc_r+0x22>
 8008112:	6862      	ldr	r2, [r4, #4]
 8008114:	42a3      	cmp	r3, r4
 8008116:	bf0c      	ite	eq
 8008118:	f8c8 2000 	streq.w	r2, [r8]
 800811c:	605a      	strne	r2, [r3, #4]
 800811e:	e7eb      	b.n	80080f8 <_malloc_r+0xa8>
 8008120:	4623      	mov	r3, r4
 8008122:	6864      	ldr	r4, [r4, #4]
 8008124:	e7ae      	b.n	8008084 <_malloc_r+0x34>
 8008126:	463c      	mov	r4, r7
 8008128:	687f      	ldr	r7, [r7, #4]
 800812a:	e7b6      	b.n	800809a <_malloc_r+0x4a>
 800812c:	461a      	mov	r2, r3
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	42a3      	cmp	r3, r4
 8008132:	d1fb      	bne.n	800812c <_malloc_r+0xdc>
 8008134:	2300      	movs	r3, #0
 8008136:	6053      	str	r3, [r2, #4]
 8008138:	e7de      	b.n	80080f8 <_malloc_r+0xa8>
 800813a:	230c      	movs	r3, #12
 800813c:	6033      	str	r3, [r6, #0]
 800813e:	4630      	mov	r0, r6
 8008140:	f000 f80c 	bl	800815c <__malloc_unlock>
 8008144:	e794      	b.n	8008070 <_malloc_r+0x20>
 8008146:	6005      	str	r5, [r0, #0]
 8008148:	e7d6      	b.n	80080f8 <_malloc_r+0xa8>
 800814a:	bf00      	nop
 800814c:	20005208 	.word	0x20005208

08008150 <__malloc_lock>:
 8008150:	4801      	ldr	r0, [pc, #4]	@ (8008158 <__malloc_lock+0x8>)
 8008152:	f7ff bf00 	b.w	8007f56 <__retarget_lock_acquire_recursive>
 8008156:	bf00      	nop
 8008158:	20005200 	.word	0x20005200

0800815c <__malloc_unlock>:
 800815c:	4801      	ldr	r0, [pc, #4]	@ (8008164 <__malloc_unlock+0x8>)
 800815e:	f7ff befb 	b.w	8007f58 <__retarget_lock_release_recursive>
 8008162:	bf00      	nop
 8008164:	20005200 	.word	0x20005200

08008168 <__sfputc_r>:
 8008168:	6893      	ldr	r3, [r2, #8]
 800816a:	3b01      	subs	r3, #1
 800816c:	2b00      	cmp	r3, #0
 800816e:	b410      	push	{r4}
 8008170:	6093      	str	r3, [r2, #8]
 8008172:	da08      	bge.n	8008186 <__sfputc_r+0x1e>
 8008174:	6994      	ldr	r4, [r2, #24]
 8008176:	42a3      	cmp	r3, r4
 8008178:	db01      	blt.n	800817e <__sfputc_r+0x16>
 800817a:	290a      	cmp	r1, #10
 800817c:	d103      	bne.n	8008186 <__sfputc_r+0x1e>
 800817e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008182:	f000 bb6d 	b.w	8008860 <__swbuf_r>
 8008186:	6813      	ldr	r3, [r2, #0]
 8008188:	1c58      	adds	r0, r3, #1
 800818a:	6010      	str	r0, [r2, #0]
 800818c:	7019      	strb	r1, [r3, #0]
 800818e:	4608      	mov	r0, r1
 8008190:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008194:	4770      	bx	lr

08008196 <__sfputs_r>:
 8008196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008198:	4606      	mov	r6, r0
 800819a:	460f      	mov	r7, r1
 800819c:	4614      	mov	r4, r2
 800819e:	18d5      	adds	r5, r2, r3
 80081a0:	42ac      	cmp	r4, r5
 80081a2:	d101      	bne.n	80081a8 <__sfputs_r+0x12>
 80081a4:	2000      	movs	r0, #0
 80081a6:	e007      	b.n	80081b8 <__sfputs_r+0x22>
 80081a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ac:	463a      	mov	r2, r7
 80081ae:	4630      	mov	r0, r6
 80081b0:	f7ff ffda 	bl	8008168 <__sfputc_r>
 80081b4:	1c43      	adds	r3, r0, #1
 80081b6:	d1f3      	bne.n	80081a0 <__sfputs_r+0xa>
 80081b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081bc <_vfiprintf_r>:
 80081bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c0:	460d      	mov	r5, r1
 80081c2:	b09d      	sub	sp, #116	@ 0x74
 80081c4:	4614      	mov	r4, r2
 80081c6:	4698      	mov	r8, r3
 80081c8:	4606      	mov	r6, r0
 80081ca:	b118      	cbz	r0, 80081d4 <_vfiprintf_r+0x18>
 80081cc:	6a03      	ldr	r3, [r0, #32]
 80081ce:	b90b      	cbnz	r3, 80081d4 <_vfiprintf_r+0x18>
 80081d0:	f7ff fd66 	bl	8007ca0 <__sinit>
 80081d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081d6:	07d9      	lsls	r1, r3, #31
 80081d8:	d405      	bmi.n	80081e6 <_vfiprintf_r+0x2a>
 80081da:	89ab      	ldrh	r3, [r5, #12]
 80081dc:	059a      	lsls	r2, r3, #22
 80081de:	d402      	bmi.n	80081e6 <_vfiprintf_r+0x2a>
 80081e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081e2:	f7ff feb8 	bl	8007f56 <__retarget_lock_acquire_recursive>
 80081e6:	89ab      	ldrh	r3, [r5, #12]
 80081e8:	071b      	lsls	r3, r3, #28
 80081ea:	d501      	bpl.n	80081f0 <_vfiprintf_r+0x34>
 80081ec:	692b      	ldr	r3, [r5, #16]
 80081ee:	b99b      	cbnz	r3, 8008218 <_vfiprintf_r+0x5c>
 80081f0:	4629      	mov	r1, r5
 80081f2:	4630      	mov	r0, r6
 80081f4:	f000 fb72 	bl	80088dc <__swsetup_r>
 80081f8:	b170      	cbz	r0, 8008218 <_vfiprintf_r+0x5c>
 80081fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081fc:	07dc      	lsls	r4, r3, #31
 80081fe:	d504      	bpl.n	800820a <_vfiprintf_r+0x4e>
 8008200:	f04f 30ff 	mov.w	r0, #4294967295
 8008204:	b01d      	add	sp, #116	@ 0x74
 8008206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820a:	89ab      	ldrh	r3, [r5, #12]
 800820c:	0598      	lsls	r0, r3, #22
 800820e:	d4f7      	bmi.n	8008200 <_vfiprintf_r+0x44>
 8008210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008212:	f7ff fea1 	bl	8007f58 <__retarget_lock_release_recursive>
 8008216:	e7f3      	b.n	8008200 <_vfiprintf_r+0x44>
 8008218:	2300      	movs	r3, #0
 800821a:	9309      	str	r3, [sp, #36]	@ 0x24
 800821c:	2320      	movs	r3, #32
 800821e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008222:	f8cd 800c 	str.w	r8, [sp, #12]
 8008226:	2330      	movs	r3, #48	@ 0x30
 8008228:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80083d8 <_vfiprintf_r+0x21c>
 800822c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008230:	f04f 0901 	mov.w	r9, #1
 8008234:	4623      	mov	r3, r4
 8008236:	469a      	mov	sl, r3
 8008238:	f813 2b01 	ldrb.w	r2, [r3], #1
 800823c:	b10a      	cbz	r2, 8008242 <_vfiprintf_r+0x86>
 800823e:	2a25      	cmp	r2, #37	@ 0x25
 8008240:	d1f9      	bne.n	8008236 <_vfiprintf_r+0x7a>
 8008242:	ebba 0b04 	subs.w	fp, sl, r4
 8008246:	d00b      	beq.n	8008260 <_vfiprintf_r+0xa4>
 8008248:	465b      	mov	r3, fp
 800824a:	4622      	mov	r2, r4
 800824c:	4629      	mov	r1, r5
 800824e:	4630      	mov	r0, r6
 8008250:	f7ff ffa1 	bl	8008196 <__sfputs_r>
 8008254:	3001      	adds	r0, #1
 8008256:	f000 80a7 	beq.w	80083a8 <_vfiprintf_r+0x1ec>
 800825a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800825c:	445a      	add	r2, fp
 800825e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008260:	f89a 3000 	ldrb.w	r3, [sl]
 8008264:	2b00      	cmp	r3, #0
 8008266:	f000 809f 	beq.w	80083a8 <_vfiprintf_r+0x1ec>
 800826a:	2300      	movs	r3, #0
 800826c:	f04f 32ff 	mov.w	r2, #4294967295
 8008270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008274:	f10a 0a01 	add.w	sl, sl, #1
 8008278:	9304      	str	r3, [sp, #16]
 800827a:	9307      	str	r3, [sp, #28]
 800827c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008280:	931a      	str	r3, [sp, #104]	@ 0x68
 8008282:	4654      	mov	r4, sl
 8008284:	2205      	movs	r2, #5
 8008286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800828a:	4853      	ldr	r0, [pc, #332]	@ (80083d8 <_vfiprintf_r+0x21c>)
 800828c:	f7f7 ffb0 	bl	80001f0 <memchr>
 8008290:	9a04      	ldr	r2, [sp, #16]
 8008292:	b9d8      	cbnz	r0, 80082cc <_vfiprintf_r+0x110>
 8008294:	06d1      	lsls	r1, r2, #27
 8008296:	bf44      	itt	mi
 8008298:	2320      	movmi	r3, #32
 800829a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800829e:	0713      	lsls	r3, r2, #28
 80082a0:	bf44      	itt	mi
 80082a2:	232b      	movmi	r3, #43	@ 0x2b
 80082a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082a8:	f89a 3000 	ldrb.w	r3, [sl]
 80082ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80082ae:	d015      	beq.n	80082dc <_vfiprintf_r+0x120>
 80082b0:	9a07      	ldr	r2, [sp, #28]
 80082b2:	4654      	mov	r4, sl
 80082b4:	2000      	movs	r0, #0
 80082b6:	f04f 0c0a 	mov.w	ip, #10
 80082ba:	4621      	mov	r1, r4
 80082bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082c0:	3b30      	subs	r3, #48	@ 0x30
 80082c2:	2b09      	cmp	r3, #9
 80082c4:	d94b      	bls.n	800835e <_vfiprintf_r+0x1a2>
 80082c6:	b1b0      	cbz	r0, 80082f6 <_vfiprintf_r+0x13a>
 80082c8:	9207      	str	r2, [sp, #28]
 80082ca:	e014      	b.n	80082f6 <_vfiprintf_r+0x13a>
 80082cc:	eba0 0308 	sub.w	r3, r0, r8
 80082d0:	fa09 f303 	lsl.w	r3, r9, r3
 80082d4:	4313      	orrs	r3, r2
 80082d6:	9304      	str	r3, [sp, #16]
 80082d8:	46a2      	mov	sl, r4
 80082da:	e7d2      	b.n	8008282 <_vfiprintf_r+0xc6>
 80082dc:	9b03      	ldr	r3, [sp, #12]
 80082de:	1d19      	adds	r1, r3, #4
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	9103      	str	r1, [sp, #12]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	bfbb      	ittet	lt
 80082e8:	425b      	neglt	r3, r3
 80082ea:	f042 0202 	orrlt.w	r2, r2, #2
 80082ee:	9307      	strge	r3, [sp, #28]
 80082f0:	9307      	strlt	r3, [sp, #28]
 80082f2:	bfb8      	it	lt
 80082f4:	9204      	strlt	r2, [sp, #16]
 80082f6:	7823      	ldrb	r3, [r4, #0]
 80082f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80082fa:	d10a      	bne.n	8008312 <_vfiprintf_r+0x156>
 80082fc:	7863      	ldrb	r3, [r4, #1]
 80082fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008300:	d132      	bne.n	8008368 <_vfiprintf_r+0x1ac>
 8008302:	9b03      	ldr	r3, [sp, #12]
 8008304:	1d1a      	adds	r2, r3, #4
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	9203      	str	r2, [sp, #12]
 800830a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800830e:	3402      	adds	r4, #2
 8008310:	9305      	str	r3, [sp, #20]
 8008312:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80083e8 <_vfiprintf_r+0x22c>
 8008316:	7821      	ldrb	r1, [r4, #0]
 8008318:	2203      	movs	r2, #3
 800831a:	4650      	mov	r0, sl
 800831c:	f7f7 ff68 	bl	80001f0 <memchr>
 8008320:	b138      	cbz	r0, 8008332 <_vfiprintf_r+0x176>
 8008322:	9b04      	ldr	r3, [sp, #16]
 8008324:	eba0 000a 	sub.w	r0, r0, sl
 8008328:	2240      	movs	r2, #64	@ 0x40
 800832a:	4082      	lsls	r2, r0
 800832c:	4313      	orrs	r3, r2
 800832e:	3401      	adds	r4, #1
 8008330:	9304      	str	r3, [sp, #16]
 8008332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008336:	4829      	ldr	r0, [pc, #164]	@ (80083dc <_vfiprintf_r+0x220>)
 8008338:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800833c:	2206      	movs	r2, #6
 800833e:	f7f7 ff57 	bl	80001f0 <memchr>
 8008342:	2800      	cmp	r0, #0
 8008344:	d03f      	beq.n	80083c6 <_vfiprintf_r+0x20a>
 8008346:	4b26      	ldr	r3, [pc, #152]	@ (80083e0 <_vfiprintf_r+0x224>)
 8008348:	bb1b      	cbnz	r3, 8008392 <_vfiprintf_r+0x1d6>
 800834a:	9b03      	ldr	r3, [sp, #12]
 800834c:	3307      	adds	r3, #7
 800834e:	f023 0307 	bic.w	r3, r3, #7
 8008352:	3308      	adds	r3, #8
 8008354:	9303      	str	r3, [sp, #12]
 8008356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008358:	443b      	add	r3, r7
 800835a:	9309      	str	r3, [sp, #36]	@ 0x24
 800835c:	e76a      	b.n	8008234 <_vfiprintf_r+0x78>
 800835e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008362:	460c      	mov	r4, r1
 8008364:	2001      	movs	r0, #1
 8008366:	e7a8      	b.n	80082ba <_vfiprintf_r+0xfe>
 8008368:	2300      	movs	r3, #0
 800836a:	3401      	adds	r4, #1
 800836c:	9305      	str	r3, [sp, #20]
 800836e:	4619      	mov	r1, r3
 8008370:	f04f 0c0a 	mov.w	ip, #10
 8008374:	4620      	mov	r0, r4
 8008376:	f810 2b01 	ldrb.w	r2, [r0], #1
 800837a:	3a30      	subs	r2, #48	@ 0x30
 800837c:	2a09      	cmp	r2, #9
 800837e:	d903      	bls.n	8008388 <_vfiprintf_r+0x1cc>
 8008380:	2b00      	cmp	r3, #0
 8008382:	d0c6      	beq.n	8008312 <_vfiprintf_r+0x156>
 8008384:	9105      	str	r1, [sp, #20]
 8008386:	e7c4      	b.n	8008312 <_vfiprintf_r+0x156>
 8008388:	fb0c 2101 	mla	r1, ip, r1, r2
 800838c:	4604      	mov	r4, r0
 800838e:	2301      	movs	r3, #1
 8008390:	e7f0      	b.n	8008374 <_vfiprintf_r+0x1b8>
 8008392:	ab03      	add	r3, sp, #12
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	462a      	mov	r2, r5
 8008398:	4b12      	ldr	r3, [pc, #72]	@ (80083e4 <_vfiprintf_r+0x228>)
 800839a:	a904      	add	r1, sp, #16
 800839c:	4630      	mov	r0, r6
 800839e:	f3af 8000 	nop.w
 80083a2:	4607      	mov	r7, r0
 80083a4:	1c78      	adds	r0, r7, #1
 80083a6:	d1d6      	bne.n	8008356 <_vfiprintf_r+0x19a>
 80083a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083aa:	07d9      	lsls	r1, r3, #31
 80083ac:	d405      	bmi.n	80083ba <_vfiprintf_r+0x1fe>
 80083ae:	89ab      	ldrh	r3, [r5, #12]
 80083b0:	059a      	lsls	r2, r3, #22
 80083b2:	d402      	bmi.n	80083ba <_vfiprintf_r+0x1fe>
 80083b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083b6:	f7ff fdcf 	bl	8007f58 <__retarget_lock_release_recursive>
 80083ba:	89ab      	ldrh	r3, [r5, #12]
 80083bc:	065b      	lsls	r3, r3, #25
 80083be:	f53f af1f 	bmi.w	8008200 <_vfiprintf_r+0x44>
 80083c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083c4:	e71e      	b.n	8008204 <_vfiprintf_r+0x48>
 80083c6:	ab03      	add	r3, sp, #12
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	462a      	mov	r2, r5
 80083cc:	4b05      	ldr	r3, [pc, #20]	@ (80083e4 <_vfiprintf_r+0x228>)
 80083ce:	a904      	add	r1, sp, #16
 80083d0:	4630      	mov	r0, r6
 80083d2:	f000 f879 	bl	80084c8 <_printf_i>
 80083d6:	e7e4      	b.n	80083a2 <_vfiprintf_r+0x1e6>
 80083d8:	08008b74 	.word	0x08008b74
 80083dc:	08008b7e 	.word	0x08008b7e
 80083e0:	00000000 	.word	0x00000000
 80083e4:	08008197 	.word	0x08008197
 80083e8:	08008b7a 	.word	0x08008b7a

080083ec <_printf_common>:
 80083ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f0:	4616      	mov	r6, r2
 80083f2:	4698      	mov	r8, r3
 80083f4:	688a      	ldr	r2, [r1, #8]
 80083f6:	690b      	ldr	r3, [r1, #16]
 80083f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80083fc:	4293      	cmp	r3, r2
 80083fe:	bfb8      	it	lt
 8008400:	4613      	movlt	r3, r2
 8008402:	6033      	str	r3, [r6, #0]
 8008404:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008408:	4607      	mov	r7, r0
 800840a:	460c      	mov	r4, r1
 800840c:	b10a      	cbz	r2, 8008412 <_printf_common+0x26>
 800840e:	3301      	adds	r3, #1
 8008410:	6033      	str	r3, [r6, #0]
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	0699      	lsls	r1, r3, #26
 8008416:	bf42      	ittt	mi
 8008418:	6833      	ldrmi	r3, [r6, #0]
 800841a:	3302      	addmi	r3, #2
 800841c:	6033      	strmi	r3, [r6, #0]
 800841e:	6825      	ldr	r5, [r4, #0]
 8008420:	f015 0506 	ands.w	r5, r5, #6
 8008424:	d106      	bne.n	8008434 <_printf_common+0x48>
 8008426:	f104 0a19 	add.w	sl, r4, #25
 800842a:	68e3      	ldr	r3, [r4, #12]
 800842c:	6832      	ldr	r2, [r6, #0]
 800842e:	1a9b      	subs	r3, r3, r2
 8008430:	42ab      	cmp	r3, r5
 8008432:	dc26      	bgt.n	8008482 <_printf_common+0x96>
 8008434:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008438:	6822      	ldr	r2, [r4, #0]
 800843a:	3b00      	subs	r3, #0
 800843c:	bf18      	it	ne
 800843e:	2301      	movne	r3, #1
 8008440:	0692      	lsls	r2, r2, #26
 8008442:	d42b      	bmi.n	800849c <_printf_common+0xb0>
 8008444:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008448:	4641      	mov	r1, r8
 800844a:	4638      	mov	r0, r7
 800844c:	47c8      	blx	r9
 800844e:	3001      	adds	r0, #1
 8008450:	d01e      	beq.n	8008490 <_printf_common+0xa4>
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	6922      	ldr	r2, [r4, #16]
 8008456:	f003 0306 	and.w	r3, r3, #6
 800845a:	2b04      	cmp	r3, #4
 800845c:	bf02      	ittt	eq
 800845e:	68e5      	ldreq	r5, [r4, #12]
 8008460:	6833      	ldreq	r3, [r6, #0]
 8008462:	1aed      	subeq	r5, r5, r3
 8008464:	68a3      	ldr	r3, [r4, #8]
 8008466:	bf0c      	ite	eq
 8008468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800846c:	2500      	movne	r5, #0
 800846e:	4293      	cmp	r3, r2
 8008470:	bfc4      	itt	gt
 8008472:	1a9b      	subgt	r3, r3, r2
 8008474:	18ed      	addgt	r5, r5, r3
 8008476:	2600      	movs	r6, #0
 8008478:	341a      	adds	r4, #26
 800847a:	42b5      	cmp	r5, r6
 800847c:	d11a      	bne.n	80084b4 <_printf_common+0xc8>
 800847e:	2000      	movs	r0, #0
 8008480:	e008      	b.n	8008494 <_printf_common+0xa8>
 8008482:	2301      	movs	r3, #1
 8008484:	4652      	mov	r2, sl
 8008486:	4641      	mov	r1, r8
 8008488:	4638      	mov	r0, r7
 800848a:	47c8      	blx	r9
 800848c:	3001      	adds	r0, #1
 800848e:	d103      	bne.n	8008498 <_printf_common+0xac>
 8008490:	f04f 30ff 	mov.w	r0, #4294967295
 8008494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008498:	3501      	adds	r5, #1
 800849a:	e7c6      	b.n	800842a <_printf_common+0x3e>
 800849c:	18e1      	adds	r1, r4, r3
 800849e:	1c5a      	adds	r2, r3, #1
 80084a0:	2030      	movs	r0, #48	@ 0x30
 80084a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80084a6:	4422      	add	r2, r4
 80084a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80084ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80084b0:	3302      	adds	r3, #2
 80084b2:	e7c7      	b.n	8008444 <_printf_common+0x58>
 80084b4:	2301      	movs	r3, #1
 80084b6:	4622      	mov	r2, r4
 80084b8:	4641      	mov	r1, r8
 80084ba:	4638      	mov	r0, r7
 80084bc:	47c8      	blx	r9
 80084be:	3001      	adds	r0, #1
 80084c0:	d0e6      	beq.n	8008490 <_printf_common+0xa4>
 80084c2:	3601      	adds	r6, #1
 80084c4:	e7d9      	b.n	800847a <_printf_common+0x8e>
	...

080084c8 <_printf_i>:
 80084c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084cc:	7e0f      	ldrb	r7, [r1, #24]
 80084ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80084d0:	2f78      	cmp	r7, #120	@ 0x78
 80084d2:	4691      	mov	r9, r2
 80084d4:	4680      	mov	r8, r0
 80084d6:	460c      	mov	r4, r1
 80084d8:	469a      	mov	sl, r3
 80084da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80084de:	d807      	bhi.n	80084f0 <_printf_i+0x28>
 80084e0:	2f62      	cmp	r7, #98	@ 0x62
 80084e2:	d80a      	bhi.n	80084fa <_printf_i+0x32>
 80084e4:	2f00      	cmp	r7, #0
 80084e6:	f000 80d2 	beq.w	800868e <_printf_i+0x1c6>
 80084ea:	2f58      	cmp	r7, #88	@ 0x58
 80084ec:	f000 80b9 	beq.w	8008662 <_printf_i+0x19a>
 80084f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80084f8:	e03a      	b.n	8008570 <_printf_i+0xa8>
 80084fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80084fe:	2b15      	cmp	r3, #21
 8008500:	d8f6      	bhi.n	80084f0 <_printf_i+0x28>
 8008502:	a101      	add	r1, pc, #4	@ (adr r1, 8008508 <_printf_i+0x40>)
 8008504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008508:	08008561 	.word	0x08008561
 800850c:	08008575 	.word	0x08008575
 8008510:	080084f1 	.word	0x080084f1
 8008514:	080084f1 	.word	0x080084f1
 8008518:	080084f1 	.word	0x080084f1
 800851c:	080084f1 	.word	0x080084f1
 8008520:	08008575 	.word	0x08008575
 8008524:	080084f1 	.word	0x080084f1
 8008528:	080084f1 	.word	0x080084f1
 800852c:	080084f1 	.word	0x080084f1
 8008530:	080084f1 	.word	0x080084f1
 8008534:	08008675 	.word	0x08008675
 8008538:	0800859f 	.word	0x0800859f
 800853c:	0800862f 	.word	0x0800862f
 8008540:	080084f1 	.word	0x080084f1
 8008544:	080084f1 	.word	0x080084f1
 8008548:	08008697 	.word	0x08008697
 800854c:	080084f1 	.word	0x080084f1
 8008550:	0800859f 	.word	0x0800859f
 8008554:	080084f1 	.word	0x080084f1
 8008558:	080084f1 	.word	0x080084f1
 800855c:	08008637 	.word	0x08008637
 8008560:	6833      	ldr	r3, [r6, #0]
 8008562:	1d1a      	adds	r2, r3, #4
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	6032      	str	r2, [r6, #0]
 8008568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800856c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008570:	2301      	movs	r3, #1
 8008572:	e09d      	b.n	80086b0 <_printf_i+0x1e8>
 8008574:	6833      	ldr	r3, [r6, #0]
 8008576:	6820      	ldr	r0, [r4, #0]
 8008578:	1d19      	adds	r1, r3, #4
 800857a:	6031      	str	r1, [r6, #0]
 800857c:	0606      	lsls	r6, r0, #24
 800857e:	d501      	bpl.n	8008584 <_printf_i+0xbc>
 8008580:	681d      	ldr	r5, [r3, #0]
 8008582:	e003      	b.n	800858c <_printf_i+0xc4>
 8008584:	0645      	lsls	r5, r0, #25
 8008586:	d5fb      	bpl.n	8008580 <_printf_i+0xb8>
 8008588:	f9b3 5000 	ldrsh.w	r5, [r3]
 800858c:	2d00      	cmp	r5, #0
 800858e:	da03      	bge.n	8008598 <_printf_i+0xd0>
 8008590:	232d      	movs	r3, #45	@ 0x2d
 8008592:	426d      	negs	r5, r5
 8008594:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008598:	4859      	ldr	r0, [pc, #356]	@ (8008700 <_printf_i+0x238>)
 800859a:	230a      	movs	r3, #10
 800859c:	e011      	b.n	80085c2 <_printf_i+0xfa>
 800859e:	6821      	ldr	r1, [r4, #0]
 80085a0:	6833      	ldr	r3, [r6, #0]
 80085a2:	0608      	lsls	r0, r1, #24
 80085a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80085a8:	d402      	bmi.n	80085b0 <_printf_i+0xe8>
 80085aa:	0649      	lsls	r1, r1, #25
 80085ac:	bf48      	it	mi
 80085ae:	b2ad      	uxthmi	r5, r5
 80085b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80085b2:	4853      	ldr	r0, [pc, #332]	@ (8008700 <_printf_i+0x238>)
 80085b4:	6033      	str	r3, [r6, #0]
 80085b6:	bf14      	ite	ne
 80085b8:	230a      	movne	r3, #10
 80085ba:	2308      	moveq	r3, #8
 80085bc:	2100      	movs	r1, #0
 80085be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80085c2:	6866      	ldr	r6, [r4, #4]
 80085c4:	60a6      	str	r6, [r4, #8]
 80085c6:	2e00      	cmp	r6, #0
 80085c8:	bfa2      	ittt	ge
 80085ca:	6821      	ldrge	r1, [r4, #0]
 80085cc:	f021 0104 	bicge.w	r1, r1, #4
 80085d0:	6021      	strge	r1, [r4, #0]
 80085d2:	b90d      	cbnz	r5, 80085d8 <_printf_i+0x110>
 80085d4:	2e00      	cmp	r6, #0
 80085d6:	d04b      	beq.n	8008670 <_printf_i+0x1a8>
 80085d8:	4616      	mov	r6, r2
 80085da:	fbb5 f1f3 	udiv	r1, r5, r3
 80085de:	fb03 5711 	mls	r7, r3, r1, r5
 80085e2:	5dc7      	ldrb	r7, [r0, r7]
 80085e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085e8:	462f      	mov	r7, r5
 80085ea:	42bb      	cmp	r3, r7
 80085ec:	460d      	mov	r5, r1
 80085ee:	d9f4      	bls.n	80085da <_printf_i+0x112>
 80085f0:	2b08      	cmp	r3, #8
 80085f2:	d10b      	bne.n	800860c <_printf_i+0x144>
 80085f4:	6823      	ldr	r3, [r4, #0]
 80085f6:	07df      	lsls	r7, r3, #31
 80085f8:	d508      	bpl.n	800860c <_printf_i+0x144>
 80085fa:	6923      	ldr	r3, [r4, #16]
 80085fc:	6861      	ldr	r1, [r4, #4]
 80085fe:	4299      	cmp	r1, r3
 8008600:	bfde      	ittt	le
 8008602:	2330      	movle	r3, #48	@ 0x30
 8008604:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008608:	f106 36ff 	addle.w	r6, r6, #4294967295
 800860c:	1b92      	subs	r2, r2, r6
 800860e:	6122      	str	r2, [r4, #16]
 8008610:	f8cd a000 	str.w	sl, [sp]
 8008614:	464b      	mov	r3, r9
 8008616:	aa03      	add	r2, sp, #12
 8008618:	4621      	mov	r1, r4
 800861a:	4640      	mov	r0, r8
 800861c:	f7ff fee6 	bl	80083ec <_printf_common>
 8008620:	3001      	adds	r0, #1
 8008622:	d14a      	bne.n	80086ba <_printf_i+0x1f2>
 8008624:	f04f 30ff 	mov.w	r0, #4294967295
 8008628:	b004      	add	sp, #16
 800862a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	f043 0320 	orr.w	r3, r3, #32
 8008634:	6023      	str	r3, [r4, #0]
 8008636:	4833      	ldr	r0, [pc, #204]	@ (8008704 <_printf_i+0x23c>)
 8008638:	2778      	movs	r7, #120	@ 0x78
 800863a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800863e:	6823      	ldr	r3, [r4, #0]
 8008640:	6831      	ldr	r1, [r6, #0]
 8008642:	061f      	lsls	r7, r3, #24
 8008644:	f851 5b04 	ldr.w	r5, [r1], #4
 8008648:	d402      	bmi.n	8008650 <_printf_i+0x188>
 800864a:	065f      	lsls	r7, r3, #25
 800864c:	bf48      	it	mi
 800864e:	b2ad      	uxthmi	r5, r5
 8008650:	6031      	str	r1, [r6, #0]
 8008652:	07d9      	lsls	r1, r3, #31
 8008654:	bf44      	itt	mi
 8008656:	f043 0320 	orrmi.w	r3, r3, #32
 800865a:	6023      	strmi	r3, [r4, #0]
 800865c:	b11d      	cbz	r5, 8008666 <_printf_i+0x19e>
 800865e:	2310      	movs	r3, #16
 8008660:	e7ac      	b.n	80085bc <_printf_i+0xf4>
 8008662:	4827      	ldr	r0, [pc, #156]	@ (8008700 <_printf_i+0x238>)
 8008664:	e7e9      	b.n	800863a <_printf_i+0x172>
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	f023 0320 	bic.w	r3, r3, #32
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	e7f6      	b.n	800865e <_printf_i+0x196>
 8008670:	4616      	mov	r6, r2
 8008672:	e7bd      	b.n	80085f0 <_printf_i+0x128>
 8008674:	6833      	ldr	r3, [r6, #0]
 8008676:	6825      	ldr	r5, [r4, #0]
 8008678:	6961      	ldr	r1, [r4, #20]
 800867a:	1d18      	adds	r0, r3, #4
 800867c:	6030      	str	r0, [r6, #0]
 800867e:	062e      	lsls	r6, r5, #24
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	d501      	bpl.n	8008688 <_printf_i+0x1c0>
 8008684:	6019      	str	r1, [r3, #0]
 8008686:	e002      	b.n	800868e <_printf_i+0x1c6>
 8008688:	0668      	lsls	r0, r5, #25
 800868a:	d5fb      	bpl.n	8008684 <_printf_i+0x1bc>
 800868c:	8019      	strh	r1, [r3, #0]
 800868e:	2300      	movs	r3, #0
 8008690:	6123      	str	r3, [r4, #16]
 8008692:	4616      	mov	r6, r2
 8008694:	e7bc      	b.n	8008610 <_printf_i+0x148>
 8008696:	6833      	ldr	r3, [r6, #0]
 8008698:	1d1a      	adds	r2, r3, #4
 800869a:	6032      	str	r2, [r6, #0]
 800869c:	681e      	ldr	r6, [r3, #0]
 800869e:	6862      	ldr	r2, [r4, #4]
 80086a0:	2100      	movs	r1, #0
 80086a2:	4630      	mov	r0, r6
 80086a4:	f7f7 fda4 	bl	80001f0 <memchr>
 80086a8:	b108      	cbz	r0, 80086ae <_printf_i+0x1e6>
 80086aa:	1b80      	subs	r0, r0, r6
 80086ac:	6060      	str	r0, [r4, #4]
 80086ae:	6863      	ldr	r3, [r4, #4]
 80086b0:	6123      	str	r3, [r4, #16]
 80086b2:	2300      	movs	r3, #0
 80086b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086b8:	e7aa      	b.n	8008610 <_printf_i+0x148>
 80086ba:	6923      	ldr	r3, [r4, #16]
 80086bc:	4632      	mov	r2, r6
 80086be:	4649      	mov	r1, r9
 80086c0:	4640      	mov	r0, r8
 80086c2:	47d0      	blx	sl
 80086c4:	3001      	adds	r0, #1
 80086c6:	d0ad      	beq.n	8008624 <_printf_i+0x15c>
 80086c8:	6823      	ldr	r3, [r4, #0]
 80086ca:	079b      	lsls	r3, r3, #30
 80086cc:	d413      	bmi.n	80086f6 <_printf_i+0x22e>
 80086ce:	68e0      	ldr	r0, [r4, #12]
 80086d0:	9b03      	ldr	r3, [sp, #12]
 80086d2:	4298      	cmp	r0, r3
 80086d4:	bfb8      	it	lt
 80086d6:	4618      	movlt	r0, r3
 80086d8:	e7a6      	b.n	8008628 <_printf_i+0x160>
 80086da:	2301      	movs	r3, #1
 80086dc:	4632      	mov	r2, r6
 80086de:	4649      	mov	r1, r9
 80086e0:	4640      	mov	r0, r8
 80086e2:	47d0      	blx	sl
 80086e4:	3001      	adds	r0, #1
 80086e6:	d09d      	beq.n	8008624 <_printf_i+0x15c>
 80086e8:	3501      	adds	r5, #1
 80086ea:	68e3      	ldr	r3, [r4, #12]
 80086ec:	9903      	ldr	r1, [sp, #12]
 80086ee:	1a5b      	subs	r3, r3, r1
 80086f0:	42ab      	cmp	r3, r5
 80086f2:	dcf2      	bgt.n	80086da <_printf_i+0x212>
 80086f4:	e7eb      	b.n	80086ce <_printf_i+0x206>
 80086f6:	2500      	movs	r5, #0
 80086f8:	f104 0619 	add.w	r6, r4, #25
 80086fc:	e7f5      	b.n	80086ea <_printf_i+0x222>
 80086fe:	bf00      	nop
 8008700:	08008b85 	.word	0x08008b85
 8008704:	08008b96 	.word	0x08008b96

08008708 <__sflush_r>:
 8008708:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800870c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008710:	0716      	lsls	r6, r2, #28
 8008712:	4605      	mov	r5, r0
 8008714:	460c      	mov	r4, r1
 8008716:	d454      	bmi.n	80087c2 <__sflush_r+0xba>
 8008718:	684b      	ldr	r3, [r1, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	dc02      	bgt.n	8008724 <__sflush_r+0x1c>
 800871e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008720:	2b00      	cmp	r3, #0
 8008722:	dd48      	ble.n	80087b6 <__sflush_r+0xae>
 8008724:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008726:	2e00      	cmp	r6, #0
 8008728:	d045      	beq.n	80087b6 <__sflush_r+0xae>
 800872a:	2300      	movs	r3, #0
 800872c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008730:	682f      	ldr	r7, [r5, #0]
 8008732:	6a21      	ldr	r1, [r4, #32]
 8008734:	602b      	str	r3, [r5, #0]
 8008736:	d030      	beq.n	800879a <__sflush_r+0x92>
 8008738:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800873a:	89a3      	ldrh	r3, [r4, #12]
 800873c:	0759      	lsls	r1, r3, #29
 800873e:	d505      	bpl.n	800874c <__sflush_r+0x44>
 8008740:	6863      	ldr	r3, [r4, #4]
 8008742:	1ad2      	subs	r2, r2, r3
 8008744:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008746:	b10b      	cbz	r3, 800874c <__sflush_r+0x44>
 8008748:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800874a:	1ad2      	subs	r2, r2, r3
 800874c:	2300      	movs	r3, #0
 800874e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008750:	6a21      	ldr	r1, [r4, #32]
 8008752:	4628      	mov	r0, r5
 8008754:	47b0      	blx	r6
 8008756:	1c43      	adds	r3, r0, #1
 8008758:	89a3      	ldrh	r3, [r4, #12]
 800875a:	d106      	bne.n	800876a <__sflush_r+0x62>
 800875c:	6829      	ldr	r1, [r5, #0]
 800875e:	291d      	cmp	r1, #29
 8008760:	d82b      	bhi.n	80087ba <__sflush_r+0xb2>
 8008762:	4a2a      	ldr	r2, [pc, #168]	@ (800880c <__sflush_r+0x104>)
 8008764:	410a      	asrs	r2, r1
 8008766:	07d6      	lsls	r6, r2, #31
 8008768:	d427      	bmi.n	80087ba <__sflush_r+0xb2>
 800876a:	2200      	movs	r2, #0
 800876c:	6062      	str	r2, [r4, #4]
 800876e:	04d9      	lsls	r1, r3, #19
 8008770:	6922      	ldr	r2, [r4, #16]
 8008772:	6022      	str	r2, [r4, #0]
 8008774:	d504      	bpl.n	8008780 <__sflush_r+0x78>
 8008776:	1c42      	adds	r2, r0, #1
 8008778:	d101      	bne.n	800877e <__sflush_r+0x76>
 800877a:	682b      	ldr	r3, [r5, #0]
 800877c:	b903      	cbnz	r3, 8008780 <__sflush_r+0x78>
 800877e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008780:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008782:	602f      	str	r7, [r5, #0]
 8008784:	b1b9      	cbz	r1, 80087b6 <__sflush_r+0xae>
 8008786:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800878a:	4299      	cmp	r1, r3
 800878c:	d002      	beq.n	8008794 <__sflush_r+0x8c>
 800878e:	4628      	mov	r0, r5
 8008790:	f7ff fbf2 	bl	8007f78 <_free_r>
 8008794:	2300      	movs	r3, #0
 8008796:	6363      	str	r3, [r4, #52]	@ 0x34
 8008798:	e00d      	b.n	80087b6 <__sflush_r+0xae>
 800879a:	2301      	movs	r3, #1
 800879c:	4628      	mov	r0, r5
 800879e:	47b0      	blx	r6
 80087a0:	4602      	mov	r2, r0
 80087a2:	1c50      	adds	r0, r2, #1
 80087a4:	d1c9      	bne.n	800873a <__sflush_r+0x32>
 80087a6:	682b      	ldr	r3, [r5, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d0c6      	beq.n	800873a <__sflush_r+0x32>
 80087ac:	2b1d      	cmp	r3, #29
 80087ae:	d001      	beq.n	80087b4 <__sflush_r+0xac>
 80087b0:	2b16      	cmp	r3, #22
 80087b2:	d11e      	bne.n	80087f2 <__sflush_r+0xea>
 80087b4:	602f      	str	r7, [r5, #0]
 80087b6:	2000      	movs	r0, #0
 80087b8:	e022      	b.n	8008800 <__sflush_r+0xf8>
 80087ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087be:	b21b      	sxth	r3, r3
 80087c0:	e01b      	b.n	80087fa <__sflush_r+0xf2>
 80087c2:	690f      	ldr	r7, [r1, #16]
 80087c4:	2f00      	cmp	r7, #0
 80087c6:	d0f6      	beq.n	80087b6 <__sflush_r+0xae>
 80087c8:	0793      	lsls	r3, r2, #30
 80087ca:	680e      	ldr	r6, [r1, #0]
 80087cc:	bf08      	it	eq
 80087ce:	694b      	ldreq	r3, [r1, #20]
 80087d0:	600f      	str	r7, [r1, #0]
 80087d2:	bf18      	it	ne
 80087d4:	2300      	movne	r3, #0
 80087d6:	eba6 0807 	sub.w	r8, r6, r7
 80087da:	608b      	str	r3, [r1, #8]
 80087dc:	f1b8 0f00 	cmp.w	r8, #0
 80087e0:	dde9      	ble.n	80087b6 <__sflush_r+0xae>
 80087e2:	6a21      	ldr	r1, [r4, #32]
 80087e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80087e6:	4643      	mov	r3, r8
 80087e8:	463a      	mov	r2, r7
 80087ea:	4628      	mov	r0, r5
 80087ec:	47b0      	blx	r6
 80087ee:	2800      	cmp	r0, #0
 80087f0:	dc08      	bgt.n	8008804 <__sflush_r+0xfc>
 80087f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087fa:	81a3      	strh	r3, [r4, #12]
 80087fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008804:	4407      	add	r7, r0
 8008806:	eba8 0800 	sub.w	r8, r8, r0
 800880a:	e7e7      	b.n	80087dc <__sflush_r+0xd4>
 800880c:	dfbffffe 	.word	0xdfbffffe

08008810 <_fflush_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	690b      	ldr	r3, [r1, #16]
 8008814:	4605      	mov	r5, r0
 8008816:	460c      	mov	r4, r1
 8008818:	b913      	cbnz	r3, 8008820 <_fflush_r+0x10>
 800881a:	2500      	movs	r5, #0
 800881c:	4628      	mov	r0, r5
 800881e:	bd38      	pop	{r3, r4, r5, pc}
 8008820:	b118      	cbz	r0, 800882a <_fflush_r+0x1a>
 8008822:	6a03      	ldr	r3, [r0, #32]
 8008824:	b90b      	cbnz	r3, 800882a <_fflush_r+0x1a>
 8008826:	f7ff fa3b 	bl	8007ca0 <__sinit>
 800882a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d0f3      	beq.n	800881a <_fflush_r+0xa>
 8008832:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008834:	07d0      	lsls	r0, r2, #31
 8008836:	d404      	bmi.n	8008842 <_fflush_r+0x32>
 8008838:	0599      	lsls	r1, r3, #22
 800883a:	d402      	bmi.n	8008842 <_fflush_r+0x32>
 800883c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800883e:	f7ff fb8a 	bl	8007f56 <__retarget_lock_acquire_recursive>
 8008842:	4628      	mov	r0, r5
 8008844:	4621      	mov	r1, r4
 8008846:	f7ff ff5f 	bl	8008708 <__sflush_r>
 800884a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800884c:	07da      	lsls	r2, r3, #31
 800884e:	4605      	mov	r5, r0
 8008850:	d4e4      	bmi.n	800881c <_fflush_r+0xc>
 8008852:	89a3      	ldrh	r3, [r4, #12]
 8008854:	059b      	lsls	r3, r3, #22
 8008856:	d4e1      	bmi.n	800881c <_fflush_r+0xc>
 8008858:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800885a:	f7ff fb7d 	bl	8007f58 <__retarget_lock_release_recursive>
 800885e:	e7dd      	b.n	800881c <_fflush_r+0xc>

08008860 <__swbuf_r>:
 8008860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008862:	460e      	mov	r6, r1
 8008864:	4614      	mov	r4, r2
 8008866:	4605      	mov	r5, r0
 8008868:	b118      	cbz	r0, 8008872 <__swbuf_r+0x12>
 800886a:	6a03      	ldr	r3, [r0, #32]
 800886c:	b90b      	cbnz	r3, 8008872 <__swbuf_r+0x12>
 800886e:	f7ff fa17 	bl	8007ca0 <__sinit>
 8008872:	69a3      	ldr	r3, [r4, #24]
 8008874:	60a3      	str	r3, [r4, #8]
 8008876:	89a3      	ldrh	r3, [r4, #12]
 8008878:	071a      	lsls	r2, r3, #28
 800887a:	d501      	bpl.n	8008880 <__swbuf_r+0x20>
 800887c:	6923      	ldr	r3, [r4, #16]
 800887e:	b943      	cbnz	r3, 8008892 <__swbuf_r+0x32>
 8008880:	4621      	mov	r1, r4
 8008882:	4628      	mov	r0, r5
 8008884:	f000 f82a 	bl	80088dc <__swsetup_r>
 8008888:	b118      	cbz	r0, 8008892 <__swbuf_r+0x32>
 800888a:	f04f 37ff 	mov.w	r7, #4294967295
 800888e:	4638      	mov	r0, r7
 8008890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	6922      	ldr	r2, [r4, #16]
 8008896:	1a98      	subs	r0, r3, r2
 8008898:	6963      	ldr	r3, [r4, #20]
 800889a:	b2f6      	uxtb	r6, r6
 800889c:	4283      	cmp	r3, r0
 800889e:	4637      	mov	r7, r6
 80088a0:	dc05      	bgt.n	80088ae <__swbuf_r+0x4e>
 80088a2:	4621      	mov	r1, r4
 80088a4:	4628      	mov	r0, r5
 80088a6:	f7ff ffb3 	bl	8008810 <_fflush_r>
 80088aa:	2800      	cmp	r0, #0
 80088ac:	d1ed      	bne.n	800888a <__swbuf_r+0x2a>
 80088ae:	68a3      	ldr	r3, [r4, #8]
 80088b0:	3b01      	subs	r3, #1
 80088b2:	60a3      	str	r3, [r4, #8]
 80088b4:	6823      	ldr	r3, [r4, #0]
 80088b6:	1c5a      	adds	r2, r3, #1
 80088b8:	6022      	str	r2, [r4, #0]
 80088ba:	701e      	strb	r6, [r3, #0]
 80088bc:	6962      	ldr	r2, [r4, #20]
 80088be:	1c43      	adds	r3, r0, #1
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d004      	beq.n	80088ce <__swbuf_r+0x6e>
 80088c4:	89a3      	ldrh	r3, [r4, #12]
 80088c6:	07db      	lsls	r3, r3, #31
 80088c8:	d5e1      	bpl.n	800888e <__swbuf_r+0x2e>
 80088ca:	2e0a      	cmp	r6, #10
 80088cc:	d1df      	bne.n	800888e <__swbuf_r+0x2e>
 80088ce:	4621      	mov	r1, r4
 80088d0:	4628      	mov	r0, r5
 80088d2:	f7ff ff9d 	bl	8008810 <_fflush_r>
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d0d9      	beq.n	800888e <__swbuf_r+0x2e>
 80088da:	e7d6      	b.n	800888a <__swbuf_r+0x2a>

080088dc <__swsetup_r>:
 80088dc:	b538      	push	{r3, r4, r5, lr}
 80088de:	4b29      	ldr	r3, [pc, #164]	@ (8008984 <__swsetup_r+0xa8>)
 80088e0:	4605      	mov	r5, r0
 80088e2:	6818      	ldr	r0, [r3, #0]
 80088e4:	460c      	mov	r4, r1
 80088e6:	b118      	cbz	r0, 80088f0 <__swsetup_r+0x14>
 80088e8:	6a03      	ldr	r3, [r0, #32]
 80088ea:	b90b      	cbnz	r3, 80088f0 <__swsetup_r+0x14>
 80088ec:	f7ff f9d8 	bl	8007ca0 <__sinit>
 80088f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088f4:	0719      	lsls	r1, r3, #28
 80088f6:	d422      	bmi.n	800893e <__swsetup_r+0x62>
 80088f8:	06da      	lsls	r2, r3, #27
 80088fa:	d407      	bmi.n	800890c <__swsetup_r+0x30>
 80088fc:	2209      	movs	r2, #9
 80088fe:	602a      	str	r2, [r5, #0]
 8008900:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008904:	81a3      	strh	r3, [r4, #12]
 8008906:	f04f 30ff 	mov.w	r0, #4294967295
 800890a:	e033      	b.n	8008974 <__swsetup_r+0x98>
 800890c:	0758      	lsls	r0, r3, #29
 800890e:	d512      	bpl.n	8008936 <__swsetup_r+0x5a>
 8008910:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008912:	b141      	cbz	r1, 8008926 <__swsetup_r+0x4a>
 8008914:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008918:	4299      	cmp	r1, r3
 800891a:	d002      	beq.n	8008922 <__swsetup_r+0x46>
 800891c:	4628      	mov	r0, r5
 800891e:	f7ff fb2b 	bl	8007f78 <_free_r>
 8008922:	2300      	movs	r3, #0
 8008924:	6363      	str	r3, [r4, #52]	@ 0x34
 8008926:	89a3      	ldrh	r3, [r4, #12]
 8008928:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800892c:	81a3      	strh	r3, [r4, #12]
 800892e:	2300      	movs	r3, #0
 8008930:	6063      	str	r3, [r4, #4]
 8008932:	6923      	ldr	r3, [r4, #16]
 8008934:	6023      	str	r3, [r4, #0]
 8008936:	89a3      	ldrh	r3, [r4, #12]
 8008938:	f043 0308 	orr.w	r3, r3, #8
 800893c:	81a3      	strh	r3, [r4, #12]
 800893e:	6923      	ldr	r3, [r4, #16]
 8008940:	b94b      	cbnz	r3, 8008956 <__swsetup_r+0x7a>
 8008942:	89a3      	ldrh	r3, [r4, #12]
 8008944:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800894c:	d003      	beq.n	8008956 <__swsetup_r+0x7a>
 800894e:	4621      	mov	r1, r4
 8008950:	4628      	mov	r0, r5
 8008952:	f000 f84f 	bl	80089f4 <__smakebuf_r>
 8008956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800895a:	f013 0201 	ands.w	r2, r3, #1
 800895e:	d00a      	beq.n	8008976 <__swsetup_r+0x9a>
 8008960:	2200      	movs	r2, #0
 8008962:	60a2      	str	r2, [r4, #8]
 8008964:	6962      	ldr	r2, [r4, #20]
 8008966:	4252      	negs	r2, r2
 8008968:	61a2      	str	r2, [r4, #24]
 800896a:	6922      	ldr	r2, [r4, #16]
 800896c:	b942      	cbnz	r2, 8008980 <__swsetup_r+0xa4>
 800896e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008972:	d1c5      	bne.n	8008900 <__swsetup_r+0x24>
 8008974:	bd38      	pop	{r3, r4, r5, pc}
 8008976:	0799      	lsls	r1, r3, #30
 8008978:	bf58      	it	pl
 800897a:	6962      	ldrpl	r2, [r4, #20]
 800897c:	60a2      	str	r2, [r4, #8]
 800897e:	e7f4      	b.n	800896a <__swsetup_r+0x8e>
 8008980:	2000      	movs	r0, #0
 8008982:	e7f7      	b.n	8008974 <__swsetup_r+0x98>
 8008984:	2000001c 	.word	0x2000001c

08008988 <_sbrk_r>:
 8008988:	b538      	push	{r3, r4, r5, lr}
 800898a:	4d06      	ldr	r5, [pc, #24]	@ (80089a4 <_sbrk_r+0x1c>)
 800898c:	2300      	movs	r3, #0
 800898e:	4604      	mov	r4, r0
 8008990:	4608      	mov	r0, r1
 8008992:	602b      	str	r3, [r5, #0]
 8008994:	f7f8 fc9a 	bl	80012cc <_sbrk>
 8008998:	1c43      	adds	r3, r0, #1
 800899a:	d102      	bne.n	80089a2 <_sbrk_r+0x1a>
 800899c:	682b      	ldr	r3, [r5, #0]
 800899e:	b103      	cbz	r3, 80089a2 <_sbrk_r+0x1a>
 80089a0:	6023      	str	r3, [r4, #0]
 80089a2:	bd38      	pop	{r3, r4, r5, pc}
 80089a4:	200051fc 	.word	0x200051fc

080089a8 <__swhatbuf_r>:
 80089a8:	b570      	push	{r4, r5, r6, lr}
 80089aa:	460c      	mov	r4, r1
 80089ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b0:	2900      	cmp	r1, #0
 80089b2:	b096      	sub	sp, #88	@ 0x58
 80089b4:	4615      	mov	r5, r2
 80089b6:	461e      	mov	r6, r3
 80089b8:	da0d      	bge.n	80089d6 <__swhatbuf_r+0x2e>
 80089ba:	89a3      	ldrh	r3, [r4, #12]
 80089bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089c0:	f04f 0100 	mov.w	r1, #0
 80089c4:	bf14      	ite	ne
 80089c6:	2340      	movne	r3, #64	@ 0x40
 80089c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089cc:	2000      	movs	r0, #0
 80089ce:	6031      	str	r1, [r6, #0]
 80089d0:	602b      	str	r3, [r5, #0]
 80089d2:	b016      	add	sp, #88	@ 0x58
 80089d4:	bd70      	pop	{r4, r5, r6, pc}
 80089d6:	466a      	mov	r2, sp
 80089d8:	f000 f848 	bl	8008a6c <_fstat_r>
 80089dc:	2800      	cmp	r0, #0
 80089de:	dbec      	blt.n	80089ba <__swhatbuf_r+0x12>
 80089e0:	9901      	ldr	r1, [sp, #4]
 80089e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089ea:	4259      	negs	r1, r3
 80089ec:	4159      	adcs	r1, r3
 80089ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089f2:	e7eb      	b.n	80089cc <__swhatbuf_r+0x24>

080089f4 <__smakebuf_r>:
 80089f4:	898b      	ldrh	r3, [r1, #12]
 80089f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089f8:	079d      	lsls	r5, r3, #30
 80089fa:	4606      	mov	r6, r0
 80089fc:	460c      	mov	r4, r1
 80089fe:	d507      	bpl.n	8008a10 <__smakebuf_r+0x1c>
 8008a00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a04:	6023      	str	r3, [r4, #0]
 8008a06:	6123      	str	r3, [r4, #16]
 8008a08:	2301      	movs	r3, #1
 8008a0a:	6163      	str	r3, [r4, #20]
 8008a0c:	b003      	add	sp, #12
 8008a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a10:	ab01      	add	r3, sp, #4
 8008a12:	466a      	mov	r2, sp
 8008a14:	f7ff ffc8 	bl	80089a8 <__swhatbuf_r>
 8008a18:	9f00      	ldr	r7, [sp, #0]
 8008a1a:	4605      	mov	r5, r0
 8008a1c:	4639      	mov	r1, r7
 8008a1e:	4630      	mov	r0, r6
 8008a20:	f7ff fb16 	bl	8008050 <_malloc_r>
 8008a24:	b948      	cbnz	r0, 8008a3a <__smakebuf_r+0x46>
 8008a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a2a:	059a      	lsls	r2, r3, #22
 8008a2c:	d4ee      	bmi.n	8008a0c <__smakebuf_r+0x18>
 8008a2e:	f023 0303 	bic.w	r3, r3, #3
 8008a32:	f043 0302 	orr.w	r3, r3, #2
 8008a36:	81a3      	strh	r3, [r4, #12]
 8008a38:	e7e2      	b.n	8008a00 <__smakebuf_r+0xc>
 8008a3a:	89a3      	ldrh	r3, [r4, #12]
 8008a3c:	6020      	str	r0, [r4, #0]
 8008a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a42:	81a3      	strh	r3, [r4, #12]
 8008a44:	9b01      	ldr	r3, [sp, #4]
 8008a46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a4a:	b15b      	cbz	r3, 8008a64 <__smakebuf_r+0x70>
 8008a4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a50:	4630      	mov	r0, r6
 8008a52:	f000 f81d 	bl	8008a90 <_isatty_r>
 8008a56:	b128      	cbz	r0, 8008a64 <__smakebuf_r+0x70>
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	f023 0303 	bic.w	r3, r3, #3
 8008a5e:	f043 0301 	orr.w	r3, r3, #1
 8008a62:	81a3      	strh	r3, [r4, #12]
 8008a64:	89a3      	ldrh	r3, [r4, #12]
 8008a66:	431d      	orrs	r5, r3
 8008a68:	81a5      	strh	r5, [r4, #12]
 8008a6a:	e7cf      	b.n	8008a0c <__smakebuf_r+0x18>

08008a6c <_fstat_r>:
 8008a6c:	b538      	push	{r3, r4, r5, lr}
 8008a6e:	4d07      	ldr	r5, [pc, #28]	@ (8008a8c <_fstat_r+0x20>)
 8008a70:	2300      	movs	r3, #0
 8008a72:	4604      	mov	r4, r0
 8008a74:	4608      	mov	r0, r1
 8008a76:	4611      	mov	r1, r2
 8008a78:	602b      	str	r3, [r5, #0]
 8008a7a:	f7f8 fbfe 	bl	800127a <_fstat>
 8008a7e:	1c43      	adds	r3, r0, #1
 8008a80:	d102      	bne.n	8008a88 <_fstat_r+0x1c>
 8008a82:	682b      	ldr	r3, [r5, #0]
 8008a84:	b103      	cbz	r3, 8008a88 <_fstat_r+0x1c>
 8008a86:	6023      	str	r3, [r4, #0]
 8008a88:	bd38      	pop	{r3, r4, r5, pc}
 8008a8a:	bf00      	nop
 8008a8c:	200051fc 	.word	0x200051fc

08008a90 <_isatty_r>:
 8008a90:	b538      	push	{r3, r4, r5, lr}
 8008a92:	4d06      	ldr	r5, [pc, #24]	@ (8008aac <_isatty_r+0x1c>)
 8008a94:	2300      	movs	r3, #0
 8008a96:	4604      	mov	r4, r0
 8008a98:	4608      	mov	r0, r1
 8008a9a:	602b      	str	r3, [r5, #0]
 8008a9c:	f7f8 fbfd 	bl	800129a <_isatty>
 8008aa0:	1c43      	adds	r3, r0, #1
 8008aa2:	d102      	bne.n	8008aaa <_isatty_r+0x1a>
 8008aa4:	682b      	ldr	r3, [r5, #0]
 8008aa6:	b103      	cbz	r3, 8008aaa <_isatty_r+0x1a>
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	bd38      	pop	{r3, r4, r5, pc}
 8008aac:	200051fc 	.word	0x200051fc

08008ab0 <_init>:
 8008ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab2:	bf00      	nop
 8008ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ab6:	bc08      	pop	{r3}
 8008ab8:	469e      	mov	lr, r3
 8008aba:	4770      	bx	lr

08008abc <_fini>:
 8008abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008abe:	bf00      	nop
 8008ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ac2:	bc08      	pop	{r3}
 8008ac4:	469e      	mov	lr, r3
 8008ac6:	4770      	bx	lr
