
uart_rtos_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a300  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  0800a4a0  0800a4a0  0000b4a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8c0  0800a8c0  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8c0  0800a8c0  0000b8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8c8  0800a8c8  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8c8  0800a8c8  0000b8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a8cc  0800a8cc  0000b8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a8d0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f3c  200001d8  0800aaa8  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005114  0800aaa8  0000d114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b847  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a12  00000000  00000000  00027a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  0002b468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012d8  00000000  00000000  0002cc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004d54  00000000  00000000  0002df50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b88f  00000000  00000000  00032ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cf20  00000000  00000000  0004e533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb453  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076c4  00000000  00000000  000eb498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000f2b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a488 	.word	0x0800a488

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800a488 	.word	0x0800a488

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <StartUARTDMAReception>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void StartUARTDMAReception(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
    HAL_UART_Receive_DMA(&huart1, dmaRxBuffer_uart1, UART_BUFFER_SIZE);
 8000eac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000eb0:	490d      	ldr	r1, [pc, #52]	@ (8000ee8 <StartUARTDMAReception+0x40>)
 8000eb2:	480e      	ldr	r0, [pc, #56]	@ (8000eec <StartUARTDMAReception+0x44>)
 8000eb4:	f002 fd4f 	bl	8003956 <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart6, dmaRxBuffer_uart6, UART_BUFFER_SIZE);
 8000eb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ebc:	490c      	ldr	r1, [pc, #48]	@ (8000ef0 <StartUARTDMAReception+0x48>)
 8000ebe:	480d      	ldr	r0, [pc, #52]	@ (8000ef4 <StartUARTDMAReception+0x4c>)
 8000ec0:	f002 fd49 	bl	8003956 <HAL_UART_Receive_DMA>

    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);  // Enable IDLE interrupt
 8000ec4:	4b09      	ldr	r3, [pc, #36]	@ (8000eec <StartUARTDMAReception+0x44>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	68da      	ldr	r2, [r3, #12]
 8000eca:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <StartUARTDMAReception+0x44>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f042 0210 	orr.w	r2, r2, #16
 8000ed2:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8000ed4:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <StartUARTDMAReception+0x4c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	68da      	ldr	r2, [r3, #12]
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <StartUARTDMAReception+0x4c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f042 0210 	orr.w	r2, r2, #16
 8000ee2:	60da      	str	r2, [r3, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000384 	.word	0x20000384
 8000eec:	20000248 	.word	0x20000248
 8000ef0:	20000484 	.word	0x20000484
 8000ef4:	200002d8 	.word	0x200002d8

08000ef8 <StartMutex>:

void StartMutex(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
    const osMutexAttr_t uart2Mutex_attributes = {
 8000efe:	463b      	mov	r3, r7
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <StartMutex+0x2c>)
 8000f0c:	603b      	str	r3, [r7, #0]
        .name = "uart2Mutex"
    };
    uart2MutexHandle = osMutexNew(&uart2Mutex_attributes);
 8000f0e:	463b      	mov	r3, r7
 8000f10:	4618      	mov	r0, r3
 8000f12:	f003 ff72 	bl	8004dfa <osMutexNew>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4a03      	ldr	r2, [pc, #12]	@ (8000f28 <StartMutex+0x30>)
 8000f1a:	6013      	str	r3, [r2, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	0800a4ac 	.word	0x0800a4ac
 8000f28:	2000058c 	.word	0x2000058c

08000f2c <UART1_Task>:


void UART1_Task(void *argument)
{
 8000f2c:	b5b0      	push	{r4, r5, r7, lr}
 8000f2e:	b098      	sub	sp, #96	@ 0x60
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
    uint8_t rx_byte;
    char rx_buffer[64];
    uint16_t index = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e

    for (;;)
    {
    	char test_msg[] = "Task is running\r\n";
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f70 <UART1_Task+0x44>)
 8000f3c:	f107 0408 	add.w	r4, r7, #8
 8000f40:	461d      	mov	r5, r3
 8000f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f46:	682b      	ldr	r3, [r5, #0]
 8000f48:	8023      	strh	r3, [r4, #0]
    	HAL_UART_Transmit(&huart2, (uint8_t*)test_msg, strlen(test_msg), 100);
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff f996 	bl	8000280 <strlen>
 8000f54:	4603      	mov	r3, r0
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	f107 0108 	add.w	r1, r7, #8
 8000f5c:	2364      	movs	r3, #100	@ 0x64
 8000f5e:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <UART1_Task+0x48>)
 8000f60:	f002 fc6e 	bl	8003840 <HAL_UART_Transmit>
    	osDelay(1000);
 8000f64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f68:	f003 ff2c 	bl	8004dc4 <osDelay>
    {
 8000f6c:	bf00      	nop
 8000f6e:	e7e4      	b.n	8000f3a <UART1_Task+0xe>
 8000f70:	0800a4b8 	.word	0x0800a4b8
 8000f74:	20000290 	.word	0x20000290

08000f78 <__io_putchar>:


#ifdef __GNUC__
#define UART_printf   int __io_putchar(int ch)
UART_printf
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000f80:	1d39      	adds	r1, r7, #4
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	2201      	movs	r2, #1
 8000f88:	4803      	ldr	r0, [pc, #12]	@ (8000f98 <__io_putchar+0x20>)
 8000f8a:	f002 fc59 	bl	8003840 <HAL_UART_Transmit>
	return ch;
 8000f8e:	687b      	ldr	r3, [r7, #4]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000290 	.word	0x20000290

08000f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	@ 0x28
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa2:	f000 fd11 	bl	80019c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa6:	f000 f845 	bl	8001034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000faa:	f000 f979 	bl	80012a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fae:	f000 f957 	bl	8001260 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000fb2:	f000 f8d7 	bl	8001164 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000fb6:	f000 f929 	bl	800120c <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8000fba:	f000 f8a5 	bl	8001108 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000fbe:	f000 f8fb 	bl	80011b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("sys_Start\n\r");
 8000fc2:	4815      	ldr	r0, [pc, #84]	@ (8001018 <main+0x7c>)
 8000fc4:	f007 fa92 	bl	80084ec <iprintf>
  StartUARTDMAReception();
 8000fc8:	f7ff ff6e 	bl	8000ea8 <StartUARTDMAReception>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fcc:	f003 fe1e 	bl	8004c0c <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  StartMutex();
 8000fd0:	f7ff ff92 	bl	8000ef8 <StartMutex>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fd4:	4a11      	ldr	r2, [pc, #68]	@ (800101c <main+0x80>)
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4811      	ldr	r0, [pc, #68]	@ (8001020 <main+0x84>)
 8000fda:	f003 fe61 	bl	8004ca0 <osThreadNew>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4a10      	ldr	r2, [pc, #64]	@ (8001024 <main+0x88>)
 8000fe2:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */

  osThreadAttr_t uart1Task_attributes = {
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2224      	movs	r2, #36	@ 0x24
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f007 fad3 	bl	8008596 <memset>
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8001028 <main+0x8c>)
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ff8:	61bb      	str	r3, [r7, #24]
 8000ffa:	2318      	movs	r3, #24
 8000ffc:	61fb      	str	r3, [r7, #28]
    .name = "uart1Task",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 256 * 4
  };
  uart1TaskHandle = osThreadNew(UART1_Task, NULL, &uart1Task_attributes);
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	461a      	mov	r2, r3
 8001002:	2100      	movs	r1, #0
 8001004:	4809      	ldr	r0, [pc, #36]	@ (800102c <main+0x90>)
 8001006:	f003 fe4b 	bl	8004ca0 <osThreadNew>
 800100a:	4603      	mov	r3, r0
 800100c:	4a08      	ldr	r2, [pc, #32]	@ (8001030 <main+0x94>)
 800100e:	6013      	str	r3, [r2, #0]
//	});
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001010:	f003 fe20 	bl	8004c54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <main+0x78>
 8001018:	0800a4d8 	.word	0x0800a4d8
 800101c:	0800a508 	.word	0x0800a508
 8001020:	0800130d 	.word	0x0800130d
 8001024:	20000380 	.word	0x20000380
 8001028:	0800a4e4 	.word	0x0800a4e4
 800102c:	08000f2d 	.word	0x08000f2d
 8001030:	20000584 	.word	0x20000584

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b094      	sub	sp, #80	@ 0x50
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0320 	add.w	r3, r7, #32
 800103e:	2230      	movs	r2, #48	@ 0x30
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f007 faa7 	bl	8008596 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	4b28      	ldr	r3, [pc, #160]	@ (8001100 <SystemClock_Config+0xcc>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001060:	4a27      	ldr	r2, [pc, #156]	@ (8001100 <SystemClock_Config+0xcc>)
 8001062:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001066:	6413      	str	r3, [r2, #64]	@ 0x40
 8001068:	4b25      	ldr	r3, [pc, #148]	@ (8001100 <SystemClock_Config+0xcc>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001074:	2300      	movs	r3, #0
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	4b22      	ldr	r3, [pc, #136]	@ (8001104 <SystemClock_Config+0xd0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001080:	4a20      	ldr	r2, [pc, #128]	@ (8001104 <SystemClock_Config+0xd0>)
 8001082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b1e      	ldr	r3, [pc, #120]	@ (8001104 <SystemClock_Config+0xd0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001094:	2302      	movs	r3, #2
 8001096:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001098:	2301      	movs	r3, #1
 800109a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800109c:	2310      	movs	r3, #16
 800109e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a0:	2302      	movs	r3, #2
 80010a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010a4:	2300      	movs	r3, #0
 80010a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010a8:	2308      	movs	r3, #8
 80010aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80010ac:	2360      	movs	r3, #96	@ 0x60
 80010ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010b0:	2304      	movs	r3, #4
 80010b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010b4:	2304      	movs	r3, #4
 80010b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b8:	f107 0320 	add.w	r3, r7, #32
 80010bc:	4618      	mov	r0, r3
 80010be:	f001 fc71 	bl	80029a4 <HAL_RCC_OscConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010c8:	f000 f93a 	bl	8001340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010cc:	230f      	movs	r3, #15
 80010ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d0:	2302      	movs	r3, #2
 80010d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	2101      	movs	r1, #1
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fed3 	bl	8002e94 <HAL_RCC_ClockConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010f4:	f000 f924 	bl	8001340 <Error_Handler>
  }
}
 80010f8:	bf00      	nop
 80010fa:	3750      	adds	r7, #80	@ 0x50
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40023800 	.word	0x40023800
 8001104:	40007000 	.word	0x40007000

08001108 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800110c:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <MX_I2C1_Init+0x50>)
 800110e:	4a13      	ldr	r2, [pc, #76]	@ (800115c <MX_I2C1_Init+0x54>)
 8001110:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001112:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <MX_I2C1_Init+0x50>)
 8001114:	4a12      	ldr	r2, [pc, #72]	@ (8001160 <MX_I2C1_Init+0x58>)
 8001116:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001118:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <MX_I2C1_Init+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800111e:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <MX_I2C1_Init+0x50>)
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001124:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <MX_I2C1_Init+0x50>)
 8001126:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800112a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800112c:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <MX_I2C1_Init+0x50>)
 800112e:	2200      	movs	r2, #0
 8001130:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <MX_I2C1_Init+0x50>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001138:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <MX_I2C1_Init+0x50>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <MX_I2C1_Init+0x50>)
 8001140:	2200      	movs	r2, #0
 8001142:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001144:	4804      	ldr	r0, [pc, #16]	@ (8001158 <MX_I2C1_Init+0x50>)
 8001146:	f001 fae9 	bl	800271c <HAL_I2C_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001150:	f000 f8f6 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200001f4 	.word	0x200001f4
 800115c:	40005400 	.word	0x40005400
 8001160:	000186a0 	.word	0x000186a0

08001164 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001168:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <MX_USART1_UART_Init+0x4c>)
 800116a:	4a12      	ldr	r2, [pc, #72]	@ (80011b4 <MX_USART1_UART_Init+0x50>)
 800116c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800116e:	4b10      	ldr	r3, [pc, #64]	@ (80011b0 <MX_USART1_UART_Init+0x4c>)
 8001170:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001174:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <MX_USART1_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <MX_USART1_UART_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <MX_USART1_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <MX_USART1_UART_Init+0x4c>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <MX_USART1_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <MX_USART1_UART_Init+0x4c>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <MX_USART1_UART_Init+0x4c>)
 800119c:	f002 fb00 	bl	80037a0 <HAL_UART_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011a6:	f000 f8cb 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000248 	.word	0x20000248
 80011b4:	40011000 	.word	0x40011000

080011b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011be:	4a12      	ldr	r2, [pc, #72]	@ (8001208 <MX_USART2_UART_Init+0x50>)
 80011c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011c2:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011dc:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011de:	220c      	movs	r2, #12
 80011e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e8:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011f0:	f002 fad6 	bl	80037a0 <HAL_UART_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011fa:	f000 f8a1 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000290 	.word	0x20000290
 8001208:	40004400 	.word	0x40004400

0800120c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001210:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <MX_USART6_UART_Init+0x4c>)
 8001212:	4a12      	ldr	r2, [pc, #72]	@ (800125c <MX_USART6_UART_Init+0x50>)
 8001214:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001216:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <MX_USART6_UART_Init+0x4c>)
 8001218:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800121c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800121e:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <MX_USART6_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001224:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <MX_USART6_UART_Init+0x4c>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800122a:	4b0b      	ldr	r3, [pc, #44]	@ (8001258 <MX_USART6_UART_Init+0x4c>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001230:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <MX_USART6_UART_Init+0x4c>)
 8001232:	220c      	movs	r2, #12
 8001234:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001236:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <MX_USART6_UART_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800123c:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <MX_USART6_UART_Init+0x4c>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001242:	4805      	ldr	r0, [pc, #20]	@ (8001258 <MX_USART6_UART_Init+0x4c>)
 8001244:	f002 faac 	bl	80037a0 <HAL_UART_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800124e:	f000 f877 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200002d8 	.word	0x200002d8
 800125c:	40011400 	.word	0x40011400

08001260 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <MX_DMA_Init+0x3c>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a0b      	ldr	r2, [pc, #44]	@ (800129c <MX_DMA_Init+0x3c>)
 8001270:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <MX_DMA_Init+0x3c>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2105      	movs	r1, #5
 8001286:	2039      	movs	r0, #57	@ 0x39
 8001288:	f000 fc98 	bl	8001bbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800128c:	2039      	movs	r0, #57	@ 0x39
 800128e:	f000 fcb1 	bl	8001bf4 <HAL_NVIC_EnableIRQ>

}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800

080012a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b17      	ldr	r3, [pc, #92]	@ (8001308 <MX_GPIO_Init+0x68>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a16      	ldr	r2, [pc, #88]	@ (8001308 <MX_GPIO_Init+0x68>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <MX_GPIO_Init+0x68>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	4b10      	ldr	r3, [pc, #64]	@ (8001308 <MX_GPIO_Init+0x68>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001308 <MX_GPIO_Init+0x68>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001308 <MX_GPIO_Init+0x68>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <MX_GPIO_Init+0x68>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a08      	ldr	r2, [pc, #32]	@ (8001308 <MX_GPIO_Init+0x68>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <MX_GPIO_Init+0x68>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012fa:	bf00      	nop
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800

0800130c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001314:	2001      	movs	r0, #1
 8001316:	f003 fd55 	bl	8004dc4 <osDelay>
 800131a:	e7fb      	b.n	8001314 <StartDefaultTask+0x8>

0800131c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a04      	ldr	r2, [pc, #16]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d101      	bne.n	8001332 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800132e:	f000 fb6d 	bl	8001a0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40010000 	.word	0x40010000

08001340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001344:	b672      	cpsid	i
}
 8001346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <Error_Handler+0x8>

0800134c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <HAL_MspInit+0x54>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135a:	4a11      	ldr	r2, [pc, #68]	@ (80013a0 <HAL_MspInit+0x54>)
 800135c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001360:	6453      	str	r3, [r2, #68]	@ 0x44
 8001362:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <HAL_MspInit+0x54>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001366:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <HAL_MspInit+0x54>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	4a0a      	ldr	r2, [pc, #40]	@ (80013a0 <HAL_MspInit+0x54>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800137c:	6413      	str	r3, [r2, #64]	@ 0x40
 800137e:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <HAL_MspInit+0x54>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	210f      	movs	r1, #15
 800138e:	f06f 0001 	mvn.w	r0, #1
 8001392:	f000 fc13 	bl	8001bbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800

080013a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	@ 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a19      	ldr	r2, [pc, #100]	@ (8001428 <HAL_I2C_MspInit+0x84>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d12b      	bne.n	800141e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b18      	ldr	r3, [pc, #96]	@ (800142c <HAL_I2C_MspInit+0x88>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a17      	ldr	r2, [pc, #92]	@ (800142c <HAL_I2C_MspInit+0x88>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b15      	ldr	r3, [pc, #84]	@ (800142c <HAL_I2C_MspInit+0x88>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013e2:	23c0      	movs	r3, #192	@ 0xc0
 80013e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e6:	2312      	movs	r3, #18
 80013e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013f2:	2304      	movs	r3, #4
 80013f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	480c      	ldr	r0, [pc, #48]	@ (8001430 <HAL_I2C_MspInit+0x8c>)
 80013fe:	f001 f809 	bl	8002414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b09      	ldr	r3, [pc, #36]	@ (800142c <HAL_I2C_MspInit+0x88>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140a:	4a08      	ldr	r2, [pc, #32]	@ (800142c <HAL_I2C_MspInit+0x88>)
 800140c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001410:	6413      	str	r3, [r2, #64]	@ 0x40
 8001412:	4b06      	ldr	r3, [pc, #24]	@ (800142c <HAL_I2C_MspInit+0x88>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800141e:	bf00      	nop
 8001420:	3728      	adds	r7, #40	@ 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40005400 	.word	0x40005400
 800142c:	40023800 	.word	0x40023800
 8001430:	40020400 	.word	0x40020400

08001434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08e      	sub	sp, #56	@ 0x38
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a66      	ldr	r2, [pc, #408]	@ (80015ec <HAL_UART_MspInit+0x1b8>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d12d      	bne.n	80014b2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
 800145a:	4b65      	ldr	r3, [pc, #404]	@ (80015f0 <HAL_UART_MspInit+0x1bc>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145e:	4a64      	ldr	r2, [pc, #400]	@ (80015f0 <HAL_UART_MspInit+0x1bc>)
 8001460:	f043 0310 	orr.w	r3, r3, #16
 8001464:	6453      	str	r3, [r2, #68]	@ 0x44
 8001466:	4b62      	ldr	r3, [pc, #392]	@ (80015f0 <HAL_UART_MspInit+0x1bc>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	623b      	str	r3, [r7, #32]
 8001470:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
 8001476:	4b5e      	ldr	r3, [pc, #376]	@ (80015f0 <HAL_UART_MspInit+0x1bc>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	4a5d      	ldr	r2, [pc, #372]	@ (80015f0 <HAL_UART_MspInit+0x1bc>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	@ 0x30
 8001482:	4b5b      	ldr	r3, [pc, #364]	@ (80015f0 <HAL_UART_MspInit+0x1bc>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	61fb      	str	r3, [r7, #28]
 800148c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800148e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001492:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014a0:	2307      	movs	r3, #7
 80014a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a8:	4619      	mov	r1, r3
 80014aa:	4852      	ldr	r0, [pc, #328]	@ (80015f4 <HAL_UART_MspInit+0x1c0>)
 80014ac:	f000 ffb2 	bl	8002414 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80014b0:	e098      	b.n	80015e4 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART2)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a50      	ldr	r2, [pc, #320]	@ (80015f8 <HAL_UART_MspInit+0x1c4>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d12c      	bne.n	8001516 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	61bb      	str	r3, [r7, #24]
 80014c0:	4b4b      	ldr	r3, [pc, #300]	@ (80015f0 <HAL_UART_MspInit+0x1bc>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c4:	4a4a      	ldr	r2, [pc, #296]	@ (80015f0 <HAL_UART_MspInit+0x1bc>)
 80014c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80014cc:	4b48      	ldr	r3, [pc, #288]	@ (80015f0 <HAL_UART_MspInit+0x1bc>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d4:	61bb      	str	r3, [r7, #24]
 80014d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	4b44      	ldr	r3, [pc, #272]	@ (80015f0 <HAL_UART_MspInit+0x1bc>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e0:	4a43      	ldr	r2, [pc, #268]	@ (80015f0 <HAL_UART_MspInit+0x1bc>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e8:	4b41      	ldr	r3, [pc, #260]	@ (80015f0 <HAL_UART_MspInit+0x1bc>)
 80014ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014f4:	230c      	movs	r3, #12
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001504:	2307      	movs	r3, #7
 8001506:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150c:	4619      	mov	r1, r3
 800150e:	4839      	ldr	r0, [pc, #228]	@ (80015f4 <HAL_UART_MspInit+0x1c0>)
 8001510:	f000 ff80 	bl	8002414 <HAL_GPIO_Init>
}
 8001514:	e066      	b.n	80015e4 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a38      	ldr	r2, [pc, #224]	@ (80015fc <HAL_UART_MspInit+0x1c8>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d161      	bne.n	80015e4 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	4b32      	ldr	r3, [pc, #200]	@ (80015f0 <HAL_UART_MspInit+0x1bc>)
 8001526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001528:	4a31      	ldr	r2, [pc, #196]	@ (80015f0 <HAL_UART_MspInit+0x1bc>)
 800152a:	f043 0320 	orr.w	r3, r3, #32
 800152e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001530:	4b2f      	ldr	r3, [pc, #188]	@ (80015f0 <HAL_UART_MspInit+0x1bc>)
 8001532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001534:	f003 0320 	and.w	r3, r3, #32
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	4b2b      	ldr	r3, [pc, #172]	@ (80015f0 <HAL_UART_MspInit+0x1bc>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001544:	4a2a      	ldr	r2, [pc, #168]	@ (80015f0 <HAL_UART_MspInit+0x1bc>)
 8001546:	f043 0304 	orr.w	r3, r3, #4
 800154a:	6313      	str	r3, [r2, #48]	@ 0x30
 800154c:	4b28      	ldr	r3, [pc, #160]	@ (80015f0 <HAL_UART_MspInit+0x1bc>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001558:	23c0      	movs	r3, #192	@ 0xc0
 800155a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001568:	2308      	movs	r3, #8
 800156a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001570:	4619      	mov	r1, r3
 8001572:	4823      	ldr	r0, [pc, #140]	@ (8001600 <HAL_UART_MspInit+0x1cc>)
 8001574:	f000 ff4e 	bl	8002414 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001578:	4b22      	ldr	r3, [pc, #136]	@ (8001604 <HAL_UART_MspInit+0x1d0>)
 800157a:	4a23      	ldr	r2, [pc, #140]	@ (8001608 <HAL_UART_MspInit+0x1d4>)
 800157c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800157e:	4b21      	ldr	r3, [pc, #132]	@ (8001604 <HAL_UART_MspInit+0x1d0>)
 8001580:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001584:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001586:	4b1f      	ldr	r3, [pc, #124]	@ (8001604 <HAL_UART_MspInit+0x1d0>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800158c:	4b1d      	ldr	r3, [pc, #116]	@ (8001604 <HAL_UART_MspInit+0x1d0>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001592:	4b1c      	ldr	r3, [pc, #112]	@ (8001604 <HAL_UART_MspInit+0x1d0>)
 8001594:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001598:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800159a:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <HAL_UART_MspInit+0x1d0>)
 800159c:	2200      	movs	r2, #0
 800159e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015a0:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <HAL_UART_MspInit+0x1d0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80015a6:	4b17      	ldr	r3, [pc, #92]	@ (8001604 <HAL_UART_MspInit+0x1d0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015ac:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <HAL_UART_MspInit+0x1d0>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015b2:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <HAL_UART_MspInit+0x1d0>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80015b8:	4812      	ldr	r0, [pc, #72]	@ (8001604 <HAL_UART_MspInit+0x1d0>)
 80015ba:	f000 fb29 	bl	8001c10 <HAL_DMA_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_UART_MspInit+0x194>
      Error_Handler();
 80015c4:	f7ff febc 	bl	8001340 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001604 <HAL_UART_MspInit+0x1d0>)
 80015cc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80015ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001604 <HAL_UART_MspInit+0x1d0>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2105      	movs	r1, #5
 80015d8:	2047      	movs	r0, #71	@ 0x47
 80015da:	f000 faef 	bl	8001bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80015de:	2047      	movs	r0, #71	@ 0x47
 80015e0:	f000 fb08 	bl	8001bf4 <HAL_NVIC_EnableIRQ>
}
 80015e4:	bf00      	nop
 80015e6:	3738      	adds	r7, #56	@ 0x38
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40011000 	.word	0x40011000
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020000 	.word	0x40020000
 80015f8:	40004400 	.word	0x40004400
 80015fc:	40011400 	.word	0x40011400
 8001600:	40020800 	.word	0x40020800
 8001604:	20000320 	.word	0x20000320
 8001608:	40026428 	.word	0x40026428

0800160c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08c      	sub	sp, #48	@ 0x30
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	4b2e      	ldr	r3, [pc, #184]	@ (80016dc <HAL_InitTick+0xd0>)
 8001622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001624:	4a2d      	ldr	r2, [pc, #180]	@ (80016dc <HAL_InitTick+0xd0>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6453      	str	r3, [r2, #68]	@ 0x44
 800162c:	4b2b      	ldr	r3, [pc, #172]	@ (80016dc <HAL_InitTick+0xd0>)
 800162e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001638:	f107 020c 	add.w	r2, r7, #12
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	4611      	mov	r1, r2
 8001642:	4618      	mov	r0, r3
 8001644:	f001 fe06 	bl	8003254 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001648:	f001 fdf0 	bl	800322c <HAL_RCC_GetPCLK2Freq>
 800164c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800164e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001650:	4a23      	ldr	r2, [pc, #140]	@ (80016e0 <HAL_InitTick+0xd4>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	0c9b      	lsrs	r3, r3, #18
 8001658:	3b01      	subs	r3, #1
 800165a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800165c:	4b21      	ldr	r3, [pc, #132]	@ (80016e4 <HAL_InitTick+0xd8>)
 800165e:	4a22      	ldr	r2, [pc, #136]	@ (80016e8 <HAL_InitTick+0xdc>)
 8001660:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001662:	4b20      	ldr	r3, [pc, #128]	@ (80016e4 <HAL_InitTick+0xd8>)
 8001664:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001668:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800166a:	4a1e      	ldr	r2, [pc, #120]	@ (80016e4 <HAL_InitTick+0xd8>)
 800166c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001670:	4b1c      	ldr	r3, [pc, #112]	@ (80016e4 <HAL_InitTick+0xd8>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001676:	4b1b      	ldr	r3, [pc, #108]	@ (80016e4 <HAL_InitTick+0xd8>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167c:	4b19      	ldr	r3, [pc, #100]	@ (80016e4 <HAL_InitTick+0xd8>)
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001682:	4818      	ldr	r0, [pc, #96]	@ (80016e4 <HAL_InitTick+0xd8>)
 8001684:	f001 fe18 	bl	80032b8 <HAL_TIM_Base_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800168e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001692:	2b00      	cmp	r3, #0
 8001694:	d11b      	bne.n	80016ce <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001696:	4813      	ldr	r0, [pc, #76]	@ (80016e4 <HAL_InitTick+0xd8>)
 8001698:	f001 fe68 	bl	800336c <HAL_TIM_Base_Start_IT>
 800169c:	4603      	mov	r3, r0
 800169e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80016a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d111      	bne.n	80016ce <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016aa:	2019      	movs	r0, #25
 80016ac:	f000 faa2 	bl	8001bf4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b0f      	cmp	r3, #15
 80016b4:	d808      	bhi.n	80016c8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80016b6:	2200      	movs	r2, #0
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	2019      	movs	r0, #25
 80016bc:	f000 fa7e 	bl	8001bbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016c0:	4a0a      	ldr	r2, [pc, #40]	@ (80016ec <HAL_InitTick+0xe0>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e002      	b.n	80016ce <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80016ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3730      	adds	r7, #48	@ 0x30
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800
 80016e0:	431bde83 	.word	0x431bde83
 80016e4:	20000590 	.word	0x20000590
 80016e8:	40010000 	.word	0x40010000
 80016ec:	20000004 	.word	0x20000004

080016f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <NMI_Handler+0x4>

080016f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <HardFault_Handler+0x4>

08001700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <MemManage_Handler+0x4>

08001708 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <BusFault_Handler+0x4>

08001710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <UsageFault_Handler+0x4>

08001718 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800172c:	4802      	ldr	r0, [pc, #8]	@ (8001738 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800172e:	f001 fe7f 	bl	8003430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000590 	.word	0x20000590

0800173c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001740:	4802      	ldr	r0, [pc, #8]	@ (800174c <DMA2_Stream1_IRQHandler+0x10>)
 8001742:	f000 fbfd 	bl	8001f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000320 	.word	0x20000320

08001750 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001756:	4818      	ldr	r0, [pc, #96]	@ (80017b8 <USART6_IRQHandler+0x68>)
 8001758:	f002 f922 	bl	80039a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE))
 800175c:	4b16      	ldr	r3, [pc, #88]	@ (80017b8 <USART6_IRQHandler+0x68>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0310 	and.w	r3, r3, #16
 8001766:	2b10      	cmp	r3, #16
 8001768:	d11e      	bne.n	80017a8 <USART6_IRQHandler+0x58>
  {
	  __HAL_UART_CLEAR_IDLEFLAG(&huart6);
 800176a:	2300      	movs	r3, #0
 800176c:	603b      	str	r3, [r7, #0]
 800176e:	4b12      	ldr	r3, [pc, #72]	@ (80017b8 <USART6_IRQHandler+0x68>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	603b      	str	r3, [r7, #0]
 8001776:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <USART6_IRQHandler+0x68>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	603b      	str	r3, [r7, #0]
 800177e:	683b      	ldr	r3, [r7, #0]

	  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
	  vTaskNotifyGiveFromISR(uart6TaskHandle, &xHigherPriorityTaskWoken);
 8001784:	4b0d      	ldr	r3, [pc, #52]	@ (80017bc <USART6_IRQHandler+0x6c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	1d3a      	adds	r2, r7, #4
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f005 f90b 	bl	80069a8 <vTaskNotifyGiveFromISR>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d007      	beq.n	80017a8 <USART6_IRQHandler+0x58>
 8001798:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <USART6_IRQHandler+0x70>)
 800179a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	f3bf 8f4f 	dsb	sy
 80017a4:	f3bf 8f6f 	isb	sy
  }

  HAL_UART_IRQHandler(&huart6);
 80017a8:	4803      	ldr	r0, [pc, #12]	@ (80017b8 <USART6_IRQHandler+0x68>)
 80017aa:	f002 f8f9 	bl	80039a0 <HAL_UART_IRQHandler>
  /* USER CODE END USART6_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200002d8 	.word	0x200002d8
 80017bc:	20000588 	.word	0x20000588
 80017c0:	e000ed04 	.word	0xe000ed04

080017c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return 1;
 80017c8:	2301      	movs	r3, #1
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <_kill>:

int _kill(int pid, int sig)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017de:	f006 ff83 	bl	80086e8 <__errno>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2216      	movs	r2, #22
 80017e6:	601a      	str	r2, [r3, #0]
  return -1;
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <_exit>:

void _exit (int status)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ffe7 	bl	80017d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001806:	bf00      	nop
 8001808:	e7fd      	b.n	8001806 <_exit+0x12>

0800180a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b086      	sub	sp, #24
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	e00a      	b.n	8001832 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800181c:	f3af 8000 	nop.w
 8001820:	4601      	mov	r1, r0
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	60ba      	str	r2, [r7, #8]
 8001828:	b2ca      	uxtb	r2, r1
 800182a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	3301      	adds	r3, #1
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	429a      	cmp	r2, r3
 8001838:	dbf0      	blt.n	800181c <_read+0x12>
  }

  return len;
 800183a:	687b      	ldr	r3, [r7, #4]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	e009      	b.n	800186a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1c5a      	adds	r2, r3, #1
 800185a:	60ba      	str	r2, [r7, #8]
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fb8a 	bl	8000f78 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3301      	adds	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	429a      	cmp	r2, r3
 8001870:	dbf1      	blt.n	8001856 <_write+0x12>
  }
  return len;
 8001872:	687b      	ldr	r3, [r7, #4]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <_close>:

int _close(int file)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018a4:	605a      	str	r2, [r3, #4]
  return 0;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <_isatty>:

int _isatty(int file)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018bc:	2301      	movs	r3, #1
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b085      	sub	sp, #20
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018ec:	4a14      	ldr	r2, [pc, #80]	@ (8001940 <_sbrk+0x5c>)
 80018ee:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <_sbrk+0x60>)
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f8:	4b13      	ldr	r3, [pc, #76]	@ (8001948 <_sbrk+0x64>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d102      	bne.n	8001906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001900:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <_sbrk+0x64>)
 8001902:	4a12      	ldr	r2, [pc, #72]	@ (800194c <_sbrk+0x68>)
 8001904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001906:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <_sbrk+0x64>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	429a      	cmp	r2, r3
 8001912:	d207      	bcs.n	8001924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001914:	f006 fee8 	bl	80086e8 <__errno>
 8001918:	4603      	mov	r3, r0
 800191a:	220c      	movs	r2, #12
 800191c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
 8001922:	e009      	b.n	8001938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001924:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800192a:	4b07      	ldr	r3, [pc, #28]	@ (8001948 <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	4a05      	ldr	r2, [pc, #20]	@ (8001948 <_sbrk+0x64>)
 8001934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001936:	68fb      	ldr	r3, [r7, #12]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20018000 	.word	0x20018000
 8001944:	00000400 	.word	0x00000400
 8001948:	200005d8 	.word	0x200005d8
 800194c:	20005118 	.word	0x20005118

08001950 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <SystemInit+0x20>)
 8001956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800195a:	4a05      	ldr	r2, [pc, #20]	@ (8001970 <SystemInit+0x20>)
 800195c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001960:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001974:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001978:	f7ff ffea 	bl	8001950 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800197c:	480c      	ldr	r0, [pc, #48]	@ (80019b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800197e:	490d      	ldr	r1, [pc, #52]	@ (80019b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001980:	4a0d      	ldr	r2, [pc, #52]	@ (80019b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001984:	e002      	b.n	800198c <LoopCopyDataInit>

08001986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198a:	3304      	adds	r3, #4

0800198c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800198c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001990:	d3f9      	bcc.n	8001986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001992:	4a0a      	ldr	r2, [pc, #40]	@ (80019bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001994:	4c0a      	ldr	r4, [pc, #40]	@ (80019c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001998:	e001      	b.n	800199e <LoopFillZerobss>

0800199a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800199c:	3204      	adds	r2, #4

0800199e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a0:	d3fb      	bcc.n	800199a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80019a2:	f006 fea7 	bl	80086f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019a6:	f7ff faf9 	bl	8000f9c <main>
  bx  lr    
 80019aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80019b8:	0800a8d0 	.word	0x0800a8d0
  ldr r2, =_sbss
 80019bc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80019c0:	20005114 	.word	0x20005114

080019c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c4:	e7fe      	b.n	80019c4 <ADC_IRQHandler>
	...

080019c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <HAL_Init+0x40>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a08 <HAL_Init+0x40>)
 80019d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <HAL_Init+0x40>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <HAL_Init+0x40>)
 80019de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e4:	4b08      	ldr	r3, [pc, #32]	@ (8001a08 <HAL_Init+0x40>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a07      	ldr	r2, [pc, #28]	@ (8001a08 <HAL_Init+0x40>)
 80019ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f0:	2003      	movs	r0, #3
 80019f2:	f000 f8d8 	bl	8001ba6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019f6:	200f      	movs	r0, #15
 80019f8:	f7ff fe08 	bl	800160c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019fc:	f7ff fca6 	bl	800134c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40023c00 	.word	0x40023c00

08001a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a10:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <HAL_IncTick+0x20>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_IncTick+0x24>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a04      	ldr	r2, [pc, #16]	@ (8001a30 <HAL_IncTick+0x24>)
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000008 	.word	0x20000008
 8001a30:	200005dc 	.word	0x200005dc

08001a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return uwTick;
 8001a38:	4b03      	ldr	r3, [pc, #12]	@ (8001a48 <HAL_GetTick+0x14>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	200005dc 	.word	0x200005dc

08001a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7e:	4a04      	ldr	r2, [pc, #16]	@ (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	60d3      	str	r3, [r2, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a98:	4b04      	ldr	r3, [pc, #16]	@ (8001aac <__NVIC_GetPriorityGrouping+0x18>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	f003 0307 	and.w	r3, r3, #7
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	db0b      	blt.n	8001ada <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	f003 021f 	and.w	r2, r3, #31
 8001ac8:	4907      	ldr	r1, [pc, #28]	@ (8001ae8 <__NVIC_EnableIRQ+0x38>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000e100 	.word	0xe000e100

08001aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	db0a      	blt.n	8001b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	490c      	ldr	r1, [pc, #48]	@ (8001b38 <__NVIC_SetPriority+0x4c>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	0112      	lsls	r2, r2, #4
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b14:	e00a      	b.n	8001b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4908      	ldr	r1, [pc, #32]	@ (8001b3c <__NVIC_SetPriority+0x50>)
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	3b04      	subs	r3, #4
 8001b24:	0112      	lsls	r2, r2, #4
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	440b      	add	r3, r1
 8001b2a:	761a      	strb	r2, [r3, #24]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000e100 	.word	0xe000e100
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	@ 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f1c3 0307 	rsb	r3, r3, #7
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	bf28      	it	cs
 8001b5e:	2304      	movcs	r3, #4
 8001b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3304      	adds	r3, #4
 8001b66:	2b06      	cmp	r3, #6
 8001b68:	d902      	bls.n	8001b70 <NVIC_EncodePriority+0x30>
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3b03      	subs	r3, #3
 8001b6e:	e000      	b.n	8001b72 <NVIC_EncodePriority+0x32>
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	f04f 32ff 	mov.w	r2, #4294967295
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	401a      	ands	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	43d9      	mvns	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	4313      	orrs	r3, r2
         );
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3724      	adds	r7, #36	@ 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff ff4c 	bl	8001a4c <__NVIC_SetPriorityGrouping>
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bce:	f7ff ff61 	bl	8001a94 <__NVIC_GetPriorityGrouping>
 8001bd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	68b9      	ldr	r1, [r7, #8]
 8001bd8:	6978      	ldr	r0, [r7, #20]
 8001bda:	f7ff ffb1 	bl	8001b40 <NVIC_EncodePriority>
 8001bde:	4602      	mov	r2, r0
 8001be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be4:	4611      	mov	r1, r2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff80 	bl	8001aec <__NVIC_SetPriority>
}
 8001bec:	bf00      	nop
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff54 	bl	8001ab0 <__NVIC_EnableIRQ>
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c1c:	f7ff ff0a 	bl	8001a34 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e099      	b.n	8001d60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0201 	bic.w	r2, r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c4c:	e00f      	b.n	8001c6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c4e:	f7ff fef1 	bl	8001a34 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b05      	cmp	r3, #5
 8001c5a:	d908      	bls.n	8001c6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2220      	movs	r2, #32
 8001c60:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2203      	movs	r2, #3
 8001c66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e078      	b.n	8001d60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1e8      	bne.n	8001c4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	4b38      	ldr	r3, [pc, #224]	@ (8001d68 <HAL_DMA_Init+0x158>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d107      	bne.n	8001cd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f023 0307 	bic.w	r3, r3, #7
 8001cee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d117      	bne.n	8001d32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00e      	beq.n	8001d32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 fb01 	bl	800231c <DMA_CheckFifoParam>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d008      	beq.n	8001d32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2240      	movs	r2, #64	@ 0x40
 8001d24:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e016      	b.n	8001d60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 fab8 	bl	80022b0 <DMA_CalcBaseAndBitshift>
 8001d40:	4603      	mov	r3, r0
 8001d42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d48:	223f      	movs	r2, #63	@ 0x3f
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	f010803f 	.word	0xf010803f

08001d6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_DMA_Start_IT+0x26>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e040      	b.n	8001e14 <HAL_DMA_Start_IT+0xa8>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d12f      	bne.n	8001e06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2202      	movs	r2, #2
 8001daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 fa4a 	bl	8002254 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc4:	223f      	movs	r2, #63	@ 0x3f
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0216 	orr.w	r2, r2, #22
 8001dda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d007      	beq.n	8001df4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0208 	orr.w	r2, r2, #8
 8001df2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	e005      	b.n	8001e12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e28:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e2a:	f7ff fe03 	bl	8001a34 <HAL_GetTick>
 8001e2e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d008      	beq.n	8001e4e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2280      	movs	r2, #128	@ 0x80
 8001e40:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e052      	b.n	8001ef4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0216 	bic.w	r2, r2, #22
 8001e5c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e6c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d103      	bne.n	8001e7e <HAL_DMA_Abort+0x62>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0208 	bic.w	r2, r2, #8
 8001e8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0201 	bic.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e9e:	e013      	b.n	8001ec8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ea0:	f7ff fdc8 	bl	8001a34 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b05      	cmp	r3, #5
 8001eac:	d90c      	bls.n	8001ec8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e015      	b.n	8001ef4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1e4      	bne.n	8001ea0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eda:	223f      	movs	r2, #63	@ 0x3f
 8001edc:	409a      	lsls	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d004      	beq.n	8001f1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2280      	movs	r2, #128	@ 0x80
 8001f14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00c      	b.n	8001f34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2205      	movs	r2, #5
 8001f1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0201 	bic.w	r2, r2, #1
 8001f30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f4c:	4b8e      	ldr	r3, [pc, #568]	@ (8002188 <HAL_DMA_IRQHandler+0x248>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a8e      	ldr	r2, [pc, #568]	@ (800218c <HAL_DMA_IRQHandler+0x24c>)
 8001f52:	fba2 2303 	umull	r2, r3, r2, r3
 8001f56:	0a9b      	lsrs	r3, r3, #10
 8001f58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6a:	2208      	movs	r2, #8
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d01a      	beq.n	8001fac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d013      	beq.n	8001fac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0204 	bic.w	r2, r2, #4
 8001f92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f98:	2208      	movs	r2, #8
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa4:	f043 0201 	orr.w	r2, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d012      	beq.n	8001fe2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00b      	beq.n	8001fe2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fce:	2201      	movs	r2, #1
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fda:	f043 0202 	orr.w	r2, r3, #2
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe6:	2204      	movs	r2, #4
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d012      	beq.n	8002018 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00b      	beq.n	8002018 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002004:	2204      	movs	r2, #4
 8002006:	409a      	lsls	r2, r3
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002010:	f043 0204 	orr.w	r2, r3, #4
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201c:	2210      	movs	r2, #16
 800201e:	409a      	lsls	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d043      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d03c      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800203a:	2210      	movs	r2, #16
 800203c:	409a      	lsls	r2, r3
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d018      	beq.n	8002082 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d108      	bne.n	8002070 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	2b00      	cmp	r3, #0
 8002064:	d024      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	4798      	blx	r3
 800206e:	e01f      	b.n	80020b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01b      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	4798      	blx	r3
 8002080:	e016      	b.n	80020b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d107      	bne.n	80020a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0208 	bic.w	r2, r2, #8
 800209e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b4:	2220      	movs	r2, #32
 80020b6:	409a      	lsls	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 808f 	beq.w	80021e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 8087 	beq.w	80021e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d6:	2220      	movs	r2, #32
 80020d8:	409a      	lsls	r2, r3
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b05      	cmp	r3, #5
 80020e8:	d136      	bne.n	8002158 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0216 	bic.w	r2, r2, #22
 80020f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002108:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	2b00      	cmp	r3, #0
 8002110:	d103      	bne.n	800211a <HAL_DMA_IRQHandler+0x1da>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002116:	2b00      	cmp	r3, #0
 8002118:	d007      	beq.n	800212a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0208 	bic.w	r2, r2, #8
 8002128:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800212e:	223f      	movs	r2, #63	@ 0x3f
 8002130:	409a      	lsls	r2, r3
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800214a:	2b00      	cmp	r3, #0
 800214c:	d07e      	beq.n	800224c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	4798      	blx	r3
        }
        return;
 8002156:	e079      	b.n	800224c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d01d      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10d      	bne.n	8002190 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002178:	2b00      	cmp	r3, #0
 800217a:	d031      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	4798      	blx	r3
 8002184:	e02c      	b.n	80021e0 <HAL_DMA_IRQHandler+0x2a0>
 8002186:	bf00      	nop
 8002188:	20000000 	.word	0x20000000
 800218c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002194:	2b00      	cmp	r3, #0
 8002196:	d023      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	4798      	blx	r3
 80021a0:	e01e      	b.n	80021e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10f      	bne.n	80021d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0210 	bic.w	r2, r2, #16
 80021be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d032      	beq.n	800224e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d022      	beq.n	800223a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2205      	movs	r2, #5
 80021f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0201 	bic.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	3301      	adds	r3, #1
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	429a      	cmp	r2, r3
 8002216:	d307      	bcc.n	8002228 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f2      	bne.n	800220c <HAL_DMA_IRQHandler+0x2cc>
 8002226:	e000      	b.n	800222a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002228:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	4798      	blx	r3
 800224a:	e000      	b.n	800224e <HAL_DMA_IRQHandler+0x30e>
        return;
 800224c:	bf00      	nop
    }
  }
}
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
 8002260:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002270:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b40      	cmp	r3, #64	@ 0x40
 8002280:	d108      	bne.n	8002294 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002292:	e007      	b.n	80022a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	60da      	str	r2, [r3, #12]
}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	3b10      	subs	r3, #16
 80022c0:	4a14      	ldr	r2, [pc, #80]	@ (8002314 <DMA_CalcBaseAndBitshift+0x64>)
 80022c2:	fba2 2303 	umull	r2, r3, r2, r3
 80022c6:	091b      	lsrs	r3, r3, #4
 80022c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022ca:	4a13      	ldr	r2, [pc, #76]	@ (8002318 <DMA_CalcBaseAndBitshift+0x68>)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4413      	add	r3, r2
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d909      	bls.n	80022f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022e6:	f023 0303 	bic.w	r3, r3, #3
 80022ea:	1d1a      	adds	r2, r3, #4
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80022f0:	e007      	b.n	8002302 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022fa:	f023 0303 	bic.w	r3, r3, #3
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	aaaaaaab 	.word	0xaaaaaaab
 8002318:	0800a544 	.word	0x0800a544

0800231c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002324:	2300      	movs	r3, #0
 8002326:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d11f      	bne.n	8002376 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b03      	cmp	r3, #3
 800233a:	d856      	bhi.n	80023ea <DMA_CheckFifoParam+0xce>
 800233c:	a201      	add	r2, pc, #4	@ (adr r2, 8002344 <DMA_CheckFifoParam+0x28>)
 800233e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002342:	bf00      	nop
 8002344:	08002355 	.word	0x08002355
 8002348:	08002367 	.word	0x08002367
 800234c:	08002355 	.word	0x08002355
 8002350:	080023eb 	.word	0x080023eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002358:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d046      	beq.n	80023ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002364:	e043      	b.n	80023ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800236e:	d140      	bne.n	80023f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002374:	e03d      	b.n	80023f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800237e:	d121      	bne.n	80023c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b03      	cmp	r3, #3
 8002384:	d837      	bhi.n	80023f6 <DMA_CheckFifoParam+0xda>
 8002386:	a201      	add	r2, pc, #4	@ (adr r2, 800238c <DMA_CheckFifoParam+0x70>)
 8002388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238c:	0800239d 	.word	0x0800239d
 8002390:	080023a3 	.word	0x080023a3
 8002394:	0800239d 	.word	0x0800239d
 8002398:	080023b5 	.word	0x080023b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
      break;
 80023a0:	e030      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d025      	beq.n	80023fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b2:	e022      	b.n	80023fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023bc:	d11f      	bne.n	80023fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023c2:	e01c      	b.n	80023fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d903      	bls.n	80023d2 <DMA_CheckFifoParam+0xb6>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d003      	beq.n	80023d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023d0:	e018      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
      break;
 80023d6:	e015      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00e      	beq.n	8002402 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
      break;
 80023e8:	e00b      	b.n	8002402 <DMA_CheckFifoParam+0xe6>
      break;
 80023ea:	bf00      	nop
 80023ec:	e00a      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
      break;
 80023ee:	bf00      	nop
 80023f0:	e008      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
      break;
 80023f2:	bf00      	nop
 80023f4:	e006      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
      break;
 80023f6:	bf00      	nop
 80023f8:	e004      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
      break;
 80023fa:	bf00      	nop
 80023fc:	e002      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
      break;   
 80023fe:	bf00      	nop
 8002400:	e000      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
      break;
 8002402:	bf00      	nop
    }
  } 
  
  return status; 
 8002404:	7bfb      	ldrb	r3, [r7, #15]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop

08002414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002414:	b480      	push	{r7}
 8002416:	b089      	sub	sp, #36	@ 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	e159      	b.n	80026e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002430:	2201      	movs	r2, #1
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	429a      	cmp	r2, r3
 800244a:	f040 8148 	bne.w	80026de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b01      	cmp	r3, #1
 8002458:	d005      	beq.n	8002466 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002462:	2b02      	cmp	r3, #2
 8002464:	d130      	bne.n	80024c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	2203      	movs	r2, #3
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800249c:	2201      	movs	r2, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 0201 	and.w	r2, r3, #1
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d017      	beq.n	8002504 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d123      	bne.n	8002558 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	08da      	lsrs	r2, r3, #3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3208      	adds	r2, #8
 8002518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	220f      	movs	r2, #15
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	08da      	lsrs	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3208      	adds	r2, #8
 8002552:	69b9      	ldr	r1, [r7, #24]
 8002554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0203 	and.w	r2, r3, #3
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80a2 	beq.w	80026de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	4b57      	ldr	r3, [pc, #348]	@ (80026fc <HAL_GPIO_Init+0x2e8>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	4a56      	ldr	r2, [pc, #344]	@ (80026fc <HAL_GPIO_Init+0x2e8>)
 80025a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025aa:	4b54      	ldr	r3, [pc, #336]	@ (80026fc <HAL_GPIO_Init+0x2e8>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025b6:	4a52      	ldr	r2, [pc, #328]	@ (8002700 <HAL_GPIO_Init+0x2ec>)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	089b      	lsrs	r3, r3, #2
 80025bc:	3302      	adds	r3, #2
 80025be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	220f      	movs	r2, #15
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a49      	ldr	r2, [pc, #292]	@ (8002704 <HAL_GPIO_Init+0x2f0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d019      	beq.n	8002616 <HAL_GPIO_Init+0x202>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a48      	ldr	r2, [pc, #288]	@ (8002708 <HAL_GPIO_Init+0x2f4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_GPIO_Init+0x1fe>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a47      	ldr	r2, [pc, #284]	@ (800270c <HAL_GPIO_Init+0x2f8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00d      	beq.n	800260e <HAL_GPIO_Init+0x1fa>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a46      	ldr	r2, [pc, #280]	@ (8002710 <HAL_GPIO_Init+0x2fc>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <HAL_GPIO_Init+0x1f6>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a45      	ldr	r2, [pc, #276]	@ (8002714 <HAL_GPIO_Init+0x300>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_GPIO_Init+0x1f2>
 8002602:	2304      	movs	r3, #4
 8002604:	e008      	b.n	8002618 <HAL_GPIO_Init+0x204>
 8002606:	2307      	movs	r3, #7
 8002608:	e006      	b.n	8002618 <HAL_GPIO_Init+0x204>
 800260a:	2303      	movs	r3, #3
 800260c:	e004      	b.n	8002618 <HAL_GPIO_Init+0x204>
 800260e:	2302      	movs	r3, #2
 8002610:	e002      	b.n	8002618 <HAL_GPIO_Init+0x204>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_GPIO_Init+0x204>
 8002616:	2300      	movs	r3, #0
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	f002 0203 	and.w	r2, r2, #3
 800261e:	0092      	lsls	r2, r2, #2
 8002620:	4093      	lsls	r3, r2
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002628:	4935      	ldr	r1, [pc, #212]	@ (8002700 <HAL_GPIO_Init+0x2ec>)
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	089b      	lsrs	r3, r3, #2
 800262e:	3302      	adds	r3, #2
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002636:	4b38      	ldr	r3, [pc, #224]	@ (8002718 <HAL_GPIO_Init+0x304>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800265a:	4a2f      	ldr	r2, [pc, #188]	@ (8002718 <HAL_GPIO_Init+0x304>)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002660:	4b2d      	ldr	r3, [pc, #180]	@ (8002718 <HAL_GPIO_Init+0x304>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002684:	4a24      	ldr	r2, [pc, #144]	@ (8002718 <HAL_GPIO_Init+0x304>)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800268a:	4b23      	ldr	r3, [pc, #140]	@ (8002718 <HAL_GPIO_Init+0x304>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002718 <HAL_GPIO_Init+0x304>)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b4:	4b18      	ldr	r3, [pc, #96]	@ (8002718 <HAL_GPIO_Init+0x304>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002718 <HAL_GPIO_Init+0x304>)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3301      	adds	r3, #1
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	2b0f      	cmp	r3, #15
 80026e8:	f67f aea2 	bls.w	8002430 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	3724      	adds	r7, #36	@ 0x24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800
 8002700:	40013800 	.word	0x40013800
 8002704:	40020000 	.word	0x40020000
 8002708:	40020400 	.word	0x40020400
 800270c:	40020800 	.word	0x40020800
 8002710:	40020c00 	.word	0x40020c00
 8002714:	40021000 	.word	0x40021000
 8002718:	40013c00 	.word	0x40013c00

0800271c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e12b      	b.n	8002986 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fe fe2e 	bl	80013a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2224      	movs	r2, #36	@ 0x24
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800276e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800277e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002780:	f000 fd40 	bl	8003204 <HAL_RCC_GetPCLK1Freq>
 8002784:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4a81      	ldr	r2, [pc, #516]	@ (8002990 <HAL_I2C_Init+0x274>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d807      	bhi.n	80027a0 <HAL_I2C_Init+0x84>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4a80      	ldr	r2, [pc, #512]	@ (8002994 <HAL_I2C_Init+0x278>)
 8002794:	4293      	cmp	r3, r2
 8002796:	bf94      	ite	ls
 8002798:	2301      	movls	r3, #1
 800279a:	2300      	movhi	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	e006      	b.n	80027ae <HAL_I2C_Init+0x92>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4a7d      	ldr	r2, [pc, #500]	@ (8002998 <HAL_I2C_Init+0x27c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	bf94      	ite	ls
 80027a8:	2301      	movls	r3, #1
 80027aa:	2300      	movhi	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0e7      	b.n	8002986 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4a78      	ldr	r2, [pc, #480]	@ (800299c <HAL_I2C_Init+0x280>)
 80027ba:	fba2 2303 	umull	r2, r3, r2, r3
 80027be:	0c9b      	lsrs	r3, r3, #18
 80027c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4a6a      	ldr	r2, [pc, #424]	@ (8002990 <HAL_I2C_Init+0x274>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d802      	bhi.n	80027f0 <HAL_I2C_Init+0xd4>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	3301      	adds	r3, #1
 80027ee:	e009      	b.n	8002804 <HAL_I2C_Init+0xe8>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027f6:	fb02 f303 	mul.w	r3, r2, r3
 80027fa:	4a69      	ldr	r2, [pc, #420]	@ (80029a0 <HAL_I2C_Init+0x284>)
 80027fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002800:	099b      	lsrs	r3, r3, #6
 8002802:	3301      	adds	r3, #1
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	430b      	orrs	r3, r1
 800280a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002816:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	495c      	ldr	r1, [pc, #368]	@ (8002990 <HAL_I2C_Init+0x274>)
 8002820:	428b      	cmp	r3, r1
 8002822:	d819      	bhi.n	8002858 <HAL_I2C_Init+0x13c>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1e59      	subs	r1, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002832:	1c59      	adds	r1, r3, #1
 8002834:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002838:	400b      	ands	r3, r1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <HAL_I2C_Init+0x138>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1e59      	subs	r1, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fbb1 f3f3 	udiv	r3, r1, r3
 800284c:	3301      	adds	r3, #1
 800284e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002852:	e051      	b.n	80028f8 <HAL_I2C_Init+0x1dc>
 8002854:	2304      	movs	r3, #4
 8002856:	e04f      	b.n	80028f8 <HAL_I2C_Init+0x1dc>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d111      	bne.n	8002884 <HAL_I2C_Init+0x168>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1e58      	subs	r0, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6859      	ldr	r1, [r3, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	440b      	add	r3, r1
 800286e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002872:	3301      	adds	r3, #1
 8002874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	e012      	b.n	80028aa <HAL_I2C_Init+0x18e>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1e58      	subs	r0, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6859      	ldr	r1, [r3, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	0099      	lsls	r1, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	fbb0 f3f3 	udiv	r3, r0, r3
 800289a:	3301      	adds	r3, #1
 800289c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_I2C_Init+0x196>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e022      	b.n	80028f8 <HAL_I2C_Init+0x1dc>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10e      	bne.n	80028d8 <HAL_I2C_Init+0x1bc>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1e58      	subs	r0, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6859      	ldr	r1, [r3, #4]
 80028c2:	460b      	mov	r3, r1
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	440b      	add	r3, r1
 80028c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028cc:	3301      	adds	r3, #1
 80028ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028d6:	e00f      	b.n	80028f8 <HAL_I2C_Init+0x1dc>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1e58      	subs	r0, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	0099      	lsls	r1, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ee:	3301      	adds	r3, #1
 80028f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	6809      	ldr	r1, [r1, #0]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69da      	ldr	r2, [r3, #28]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002926:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6911      	ldr	r1, [r2, #16]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68d2      	ldr	r2, [r2, #12]
 8002932:	4311      	orrs	r1, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	430b      	orrs	r3, r1
 800293a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	000186a0 	.word	0x000186a0
 8002994:	001e847f 	.word	0x001e847f
 8002998:	003d08ff 	.word	0x003d08ff
 800299c:	431bde83 	.word	0x431bde83
 80029a0:	10624dd3 	.word	0x10624dd3

080029a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e267      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d075      	beq.n	8002aae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029c2:	4b88      	ldr	r3, [pc, #544]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d00c      	beq.n	80029e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ce:	4b85      	ldr	r3, [pc, #532]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d112      	bne.n	8002a00 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029da:	4b82      	ldr	r3, [pc, #520]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029e6:	d10b      	bne.n	8002a00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e8:	4b7e      	ldr	r3, [pc, #504]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d05b      	beq.n	8002aac <HAL_RCC_OscConfig+0x108>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d157      	bne.n	8002aac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e242      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a08:	d106      	bne.n	8002a18 <HAL_RCC_OscConfig+0x74>
 8002a0a:	4b76      	ldr	r3, [pc, #472]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a75      	ldr	r2, [pc, #468]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e01d      	b.n	8002a54 <HAL_RCC_OscConfig+0xb0>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x98>
 8002a22:	4b70      	ldr	r3, [pc, #448]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a6f      	ldr	r2, [pc, #444]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	4b6d      	ldr	r3, [pc, #436]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a6c      	ldr	r2, [pc, #432]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	e00b      	b.n	8002a54 <HAL_RCC_OscConfig+0xb0>
 8002a3c:	4b69      	ldr	r3, [pc, #420]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a68      	ldr	r2, [pc, #416]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	4b66      	ldr	r3, [pc, #408]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a65      	ldr	r2, [pc, #404]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d013      	beq.n	8002a84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7fe ffea 	bl	8001a34 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a64:	f7fe ffe6 	bl	8001a34 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	@ 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e207      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a76:	4b5b      	ldr	r3, [pc, #364]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCC_OscConfig+0xc0>
 8002a82:	e014      	b.n	8002aae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe ffd6 	bl	8001a34 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7fe ffd2 	bl	8001a34 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	@ 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e1f3      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9e:	4b51      	ldr	r3, [pc, #324]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0xe8>
 8002aaa:	e000      	b.n	8002aae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d063      	beq.n	8002b82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002aba:	4b4a      	ldr	r3, [pc, #296]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00b      	beq.n	8002ade <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ac6:	4b47      	ldr	r3, [pc, #284]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d11c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ad2:	4b44      	ldr	r3, [pc, #272]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d116      	bne.n	8002b0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ade:	4b41      	ldr	r3, [pc, #260]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_RCC_OscConfig+0x152>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d001      	beq.n	8002af6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e1c7      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af6:	4b3b      	ldr	r3, [pc, #236]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4937      	ldr	r1, [pc, #220]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0a:	e03a      	b.n	8002b82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d020      	beq.n	8002b56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b14:	4b34      	ldr	r3, [pc, #208]	@ (8002be8 <HAL_RCC_OscConfig+0x244>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1a:	f7fe ff8b 	bl	8001a34 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b22:	f7fe ff87 	bl	8001a34 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e1a8      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	4b2b      	ldr	r3, [pc, #172]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b40:	4b28      	ldr	r3, [pc, #160]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4925      	ldr	r1, [pc, #148]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	600b      	str	r3, [r1, #0]
 8002b54:	e015      	b.n	8002b82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b56:	4b24      	ldr	r3, [pc, #144]	@ (8002be8 <HAL_RCC_OscConfig+0x244>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe ff6a 	bl	8001a34 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b64:	f7fe ff66 	bl	8001a34 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e187      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	4b1b      	ldr	r3, [pc, #108]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d036      	beq.n	8002bfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d016      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b96:	4b15      	ldr	r3, [pc, #84]	@ (8002bec <HAL_RCC_OscConfig+0x248>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9c:	f7fe ff4a 	bl	8001a34 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba4:	f7fe ff46 	bl	8001a34 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e167      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002be4 <HAL_RCC_OscConfig+0x240>)
 8002bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x200>
 8002bc2:	e01b      	b.n	8002bfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc4:	4b09      	ldr	r3, [pc, #36]	@ (8002bec <HAL_RCC_OscConfig+0x248>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bca:	f7fe ff33 	bl	8001a34 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd0:	e00e      	b.n	8002bf0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd2:	f7fe ff2f 	bl	8001a34 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d907      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e150      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
 8002be4:	40023800 	.word	0x40023800
 8002be8:	42470000 	.word	0x42470000
 8002bec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf0:	4b88      	ldr	r3, [pc, #544]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1ea      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8097 	beq.w	8002d38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c0e:	4b81      	ldr	r3, [pc, #516]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10f      	bne.n	8002c3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	4b7d      	ldr	r3, [pc, #500]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	4a7c      	ldr	r2, [pc, #496]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002c24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c2a:	4b7a      	ldr	r3, [pc, #488]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c36:	2301      	movs	r3, #1
 8002c38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3a:	4b77      	ldr	r3, [pc, #476]	@ (8002e18 <HAL_RCC_OscConfig+0x474>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d118      	bne.n	8002c78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c46:	4b74      	ldr	r3, [pc, #464]	@ (8002e18 <HAL_RCC_OscConfig+0x474>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a73      	ldr	r2, [pc, #460]	@ (8002e18 <HAL_RCC_OscConfig+0x474>)
 8002c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c52:	f7fe feef 	bl	8001a34 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5a:	f7fe feeb 	bl	8001a34 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e10c      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	4b6a      	ldr	r3, [pc, #424]	@ (8002e18 <HAL_RCC_OscConfig+0x474>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d106      	bne.n	8002c8e <HAL_RCC_OscConfig+0x2ea>
 8002c80:	4b64      	ldr	r3, [pc, #400]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c84:	4a63      	ldr	r2, [pc, #396]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c8c:	e01c      	b.n	8002cc8 <HAL_RCC_OscConfig+0x324>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b05      	cmp	r3, #5
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x30c>
 8002c96:	4b5f      	ldr	r3, [pc, #380]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9a:	4a5e      	ldr	r2, [pc, #376]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	f043 0304 	orr.w	r3, r3, #4
 8002ca0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca2:	4b5c      	ldr	r3, [pc, #368]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca6:	4a5b      	ldr	r2, [pc, #364]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cae:	e00b      	b.n	8002cc8 <HAL_RCC_OscConfig+0x324>
 8002cb0:	4b58      	ldr	r3, [pc, #352]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb4:	4a57      	ldr	r2, [pc, #348]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002cb6:	f023 0301 	bic.w	r3, r3, #1
 8002cba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cbc:	4b55      	ldr	r3, [pc, #340]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc0:	4a54      	ldr	r2, [pc, #336]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	f023 0304 	bic.w	r3, r3, #4
 8002cc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d015      	beq.n	8002cfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd0:	f7fe feb0 	bl	8001a34 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd8:	f7fe feac 	bl	8001a34 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e0cb      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cee:	4b49      	ldr	r3, [pc, #292]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0ee      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x334>
 8002cfa:	e014      	b.n	8002d26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfc:	f7fe fe9a 	bl	8001a34 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d02:	e00a      	b.n	8002d1a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d04:	f7fe fe96 	bl	8001a34 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e0b5      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1ee      	bne.n	8002d04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d26:	7dfb      	ldrb	r3, [r7, #23]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d105      	bne.n	8002d38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d2c:	4b39      	ldr	r3, [pc, #228]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d30:	4a38      	ldr	r2, [pc, #224]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002d32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80a1 	beq.w	8002e84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d42:	4b34      	ldr	r3, [pc, #208]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d05c      	beq.n	8002e08 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d141      	bne.n	8002dda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d56:	4b31      	ldr	r3, [pc, #196]	@ (8002e1c <HAL_RCC_OscConfig+0x478>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fe fe6a 	bl	8001a34 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d64:	f7fe fe66 	bl	8001a34 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e087      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d76:	4b27      	ldr	r3, [pc, #156]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69da      	ldr	r2, [r3, #28]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d90:	019b      	lsls	r3, r3, #6
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d98:	085b      	lsrs	r3, r3, #1
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	041b      	lsls	r3, r3, #16
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da4:	061b      	lsls	r3, r3, #24
 8002da6:	491b      	ldr	r1, [pc, #108]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dac:	4b1b      	ldr	r3, [pc, #108]	@ (8002e1c <HAL_RCC_OscConfig+0x478>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7fe fe3f 	bl	8001a34 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dba:	f7fe fe3b 	bl	8001a34 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e05c      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dcc:	4b11      	ldr	r3, [pc, #68]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x416>
 8002dd8:	e054      	b.n	8002e84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dda:	4b10      	ldr	r3, [pc, #64]	@ (8002e1c <HAL_RCC_OscConfig+0x478>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7fe fe28 	bl	8001a34 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de8:	f7fe fe24 	bl	8001a34 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e045      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfa:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x444>
 8002e06:	e03d      	b.n	8002e84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d107      	bne.n	8002e20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e038      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
 8002e14:	40023800 	.word	0x40023800
 8002e18:	40007000 	.word	0x40007000
 8002e1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e20:	4b1b      	ldr	r3, [pc, #108]	@ (8002e90 <HAL_RCC_OscConfig+0x4ec>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d028      	beq.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d121      	bne.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d11a      	bne.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e50:	4013      	ands	r3, r2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d111      	bne.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e66:	085b      	lsrs	r3, r3, #1
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40023800 	.word	0x40023800

08002e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0cc      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b68      	ldr	r3, [pc, #416]	@ (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d90c      	bls.n	8002ed0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b65      	ldr	r3, [pc, #404]	@ (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebe:	4b63      	ldr	r3, [pc, #396]	@ (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0b8      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d020      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ee8:	4b59      	ldr	r3, [pc, #356]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	4a58      	ldr	r2, [pc, #352]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ef2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f00:	4b53      	ldr	r3, [pc, #332]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	4a52      	ldr	r2, [pc, #328]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f0c:	4b50      	ldr	r3, [pc, #320]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	494d      	ldr	r1, [pc, #308]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d044      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d107      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f32:	4b47      	ldr	r3, [pc, #284]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d119      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e07f      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d003      	beq.n	8002f52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f52:	4b3f      	ldr	r3, [pc, #252]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e06f      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f62:	4b3b      	ldr	r3, [pc, #236]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e067      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f72:	4b37      	ldr	r3, [pc, #220]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f023 0203 	bic.w	r2, r3, #3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4934      	ldr	r1, [pc, #208]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f84:	f7fe fd56 	bl	8001a34 <HAL_GetTick>
 8002f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f8c:	f7fe fd52 	bl	8001a34 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e04f      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 020c 	and.w	r2, r3, #12
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d1eb      	bne.n	8002f8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb4:	4b25      	ldr	r3, [pc, #148]	@ (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d20c      	bcs.n	8002fdc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc2:	4b22      	ldr	r3, [pc, #136]	@ (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fca:	4b20      	ldr	r3, [pc, #128]	@ (800304c <HAL_RCC_ClockConfig+0x1b8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e032      	b.n	8003042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe8:	4b19      	ldr	r3, [pc, #100]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4916      	ldr	r1, [pc, #88]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d009      	beq.n	800301a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003006:	4b12      	ldr	r3, [pc, #72]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	490e      	ldr	r1, [pc, #56]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	4313      	orrs	r3, r2
 8003018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800301a:	f000 f821 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 800301e:	4602      	mov	r2, r0
 8003020:	4b0b      	ldr	r3, [pc, #44]	@ (8003050 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	091b      	lsrs	r3, r3, #4
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	490a      	ldr	r1, [pc, #40]	@ (8003054 <HAL_RCC_ClockConfig+0x1c0>)
 800302c:	5ccb      	ldrb	r3, [r1, r3]
 800302e:	fa22 f303 	lsr.w	r3, r2, r3
 8003032:	4a09      	ldr	r2, [pc, #36]	@ (8003058 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003036:	4b09      	ldr	r3, [pc, #36]	@ (800305c <HAL_RCC_ClockConfig+0x1c8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe fae6 	bl	800160c <HAL_InitTick>

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40023c00 	.word	0x40023c00
 8003050:	40023800 	.word	0x40023800
 8003054:	0800a52c 	.word	0x0800a52c
 8003058:	20000000 	.word	0x20000000
 800305c:	20000004 	.word	0x20000004

08003060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003064:	b090      	sub	sp, #64	@ 0x40
 8003066:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003078:	4b59      	ldr	r3, [pc, #356]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 030c 	and.w	r3, r3, #12
 8003080:	2b08      	cmp	r3, #8
 8003082:	d00d      	beq.n	80030a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003084:	2b08      	cmp	r3, #8
 8003086:	f200 80a1 	bhi.w	80031cc <HAL_RCC_GetSysClockFreq+0x16c>
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0x34>
 800308e:	2b04      	cmp	r3, #4
 8003090:	d003      	beq.n	800309a <HAL_RCC_GetSysClockFreq+0x3a>
 8003092:	e09b      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003094:	4b53      	ldr	r3, [pc, #332]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003096:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003098:	e09b      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800309a:	4b53      	ldr	r3, [pc, #332]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800309c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800309e:	e098      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030a0:	4b4f      	ldr	r3, [pc, #316]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030aa:	4b4d      	ldr	r3, [pc, #308]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d028      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b6:	4b4a      	ldr	r3, [pc, #296]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	099b      	lsrs	r3, r3, #6
 80030bc:	2200      	movs	r2, #0
 80030be:	623b      	str	r3, [r7, #32]
 80030c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80030c8:	2100      	movs	r1, #0
 80030ca:	4b47      	ldr	r3, [pc, #284]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80030cc:	fb03 f201 	mul.w	r2, r3, r1
 80030d0:	2300      	movs	r3, #0
 80030d2:	fb00 f303 	mul.w	r3, r0, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	4a43      	ldr	r2, [pc, #268]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80030da:	fba0 1202 	umull	r1, r2, r0, r2
 80030de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030e0:	460a      	mov	r2, r1
 80030e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80030e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030e6:	4413      	add	r3, r2
 80030e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ec:	2200      	movs	r2, #0
 80030ee:	61bb      	str	r3, [r7, #24]
 80030f0:	61fa      	str	r2, [r7, #28]
 80030f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80030fa:	f7fd fd5d 	bl	8000bb8 <__aeabi_uldivmod>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4613      	mov	r3, r2
 8003104:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003106:	e053      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003108:	4b35      	ldr	r3, [pc, #212]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	099b      	lsrs	r3, r3, #6
 800310e:	2200      	movs	r2, #0
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	617a      	str	r2, [r7, #20]
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800311a:	f04f 0b00 	mov.w	fp, #0
 800311e:	4652      	mov	r2, sl
 8003120:	465b      	mov	r3, fp
 8003122:	f04f 0000 	mov.w	r0, #0
 8003126:	f04f 0100 	mov.w	r1, #0
 800312a:	0159      	lsls	r1, r3, #5
 800312c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003130:	0150      	lsls	r0, r2, #5
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	ebb2 080a 	subs.w	r8, r2, sl
 800313a:	eb63 090b 	sbc.w	r9, r3, fp
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800314a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800314e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003152:	ebb2 0408 	subs.w	r4, r2, r8
 8003156:	eb63 0509 	sbc.w	r5, r3, r9
 800315a:	f04f 0200 	mov.w	r2, #0
 800315e:	f04f 0300 	mov.w	r3, #0
 8003162:	00eb      	lsls	r3, r5, #3
 8003164:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003168:	00e2      	lsls	r2, r4, #3
 800316a:	4614      	mov	r4, r2
 800316c:	461d      	mov	r5, r3
 800316e:	eb14 030a 	adds.w	r3, r4, sl
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	eb45 030b 	adc.w	r3, r5, fp
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003186:	4629      	mov	r1, r5
 8003188:	028b      	lsls	r3, r1, #10
 800318a:	4621      	mov	r1, r4
 800318c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003190:	4621      	mov	r1, r4
 8003192:	028a      	lsls	r2, r1, #10
 8003194:	4610      	mov	r0, r2
 8003196:	4619      	mov	r1, r3
 8003198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319a:	2200      	movs	r2, #0
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	60fa      	str	r2, [r7, #12]
 80031a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031a4:	f7fd fd08 	bl	8000bb8 <__aeabi_uldivmod>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4613      	mov	r3, r2
 80031ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80031b0:	4b0b      	ldr	r3, [pc, #44]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	0c1b      	lsrs	r3, r3, #16
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	3301      	adds	r3, #1
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80031c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80031c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031ca:	e002      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031cc:	4b05      	ldr	r3, [pc, #20]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80031ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3740      	adds	r7, #64	@ 0x40
 80031d8:	46bd      	mov	sp, r7
 80031da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031de:	bf00      	nop
 80031e0:	40023800 	.word	0x40023800
 80031e4:	00f42400 	.word	0x00f42400
 80031e8:	017d7840 	.word	0x017d7840

080031ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f0:	4b03      	ldr	r3, [pc, #12]	@ (8003200 <HAL_RCC_GetHCLKFreq+0x14>)
 80031f2:	681b      	ldr	r3, [r3, #0]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	20000000 	.word	0x20000000

08003204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003208:	f7ff fff0 	bl	80031ec <HAL_RCC_GetHCLKFreq>
 800320c:	4602      	mov	r2, r0
 800320e:	4b05      	ldr	r3, [pc, #20]	@ (8003224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	0a9b      	lsrs	r3, r3, #10
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	4903      	ldr	r1, [pc, #12]	@ (8003228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800321a:	5ccb      	ldrb	r3, [r1, r3]
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003220:	4618      	mov	r0, r3
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40023800 	.word	0x40023800
 8003228:	0800a53c 	.word	0x0800a53c

0800322c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003230:	f7ff ffdc 	bl	80031ec <HAL_RCC_GetHCLKFreq>
 8003234:	4602      	mov	r2, r0
 8003236:	4b05      	ldr	r3, [pc, #20]	@ (800324c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	0b5b      	lsrs	r3, r3, #13
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	4903      	ldr	r1, [pc, #12]	@ (8003250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003242:	5ccb      	ldrb	r3, [r1, r3]
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003248:	4618      	mov	r0, r3
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40023800 	.word	0x40023800
 8003250:	0800a53c 	.word	0x0800a53c

08003254 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	220f      	movs	r2, #15
 8003262:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003264:	4b12      	ldr	r3, [pc, #72]	@ (80032b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 0203 	and.w	r2, r3, #3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003270:	4b0f      	ldr	r3, [pc, #60]	@ (80032b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800327c:	4b0c      	ldr	r3, [pc, #48]	@ (80032b0 <HAL_RCC_GetClockConfig+0x5c>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003288:	4b09      	ldr	r3, [pc, #36]	@ (80032b0 <HAL_RCC_GetClockConfig+0x5c>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	08db      	lsrs	r3, r3, #3
 800328e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003296:	4b07      	ldr	r3, [pc, #28]	@ (80032b4 <HAL_RCC_GetClockConfig+0x60>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0207 	and.w	r2, r3, #7
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	601a      	str	r2, [r3, #0]
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40023c00 	.word	0x40023c00

080032b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e041      	b.n	800334e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f839 	bl	8003356 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3304      	adds	r3, #4
 80032f4:	4619      	mov	r1, r3
 80032f6:	4610      	mov	r0, r2
 80032f8:	f000 f9b2 	bl	8003660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b01      	cmp	r3, #1
 800337e:	d001      	beq.n	8003384 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e044      	b.n	800340e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1e      	ldr	r2, [pc, #120]	@ (800341c <HAL_TIM_Base_Start_IT+0xb0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d018      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x6c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ae:	d013      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x6c>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a1a      	ldr	r2, [pc, #104]	@ (8003420 <HAL_TIM_Base_Start_IT+0xb4>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d00e      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x6c>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a19      	ldr	r2, [pc, #100]	@ (8003424 <HAL_TIM_Base_Start_IT+0xb8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d009      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x6c>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a17      	ldr	r2, [pc, #92]	@ (8003428 <HAL_TIM_Base_Start_IT+0xbc>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d004      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x6c>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a16      	ldr	r2, [pc, #88]	@ (800342c <HAL_TIM_Base_Start_IT+0xc0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d111      	bne.n	80033fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b06      	cmp	r3, #6
 80033e8:	d010      	beq.n	800340c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0201 	orr.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033fa:	e007      	b.n	800340c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40010000 	.word	0x40010000
 8003420:	40000400 	.word	0x40000400
 8003424:	40000800 	.word	0x40000800
 8003428:	40000c00 	.word	0x40000c00
 800342c:	40014000 	.word	0x40014000

08003430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d020      	beq.n	8003494 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d01b      	beq.n	8003494 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0202 	mvn.w	r2, #2
 8003464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f8d2 	bl	8003624 <HAL_TIM_IC_CaptureCallback>
 8003480:	e005      	b.n	800348e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f8c4 	bl	8003610 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f8d5 	bl	8003638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	2b00      	cmp	r3, #0
 800349c:	d020      	beq.n	80034e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01b      	beq.n	80034e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0204 	mvn.w	r2, #4
 80034b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2202      	movs	r2, #2
 80034b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f8ac 	bl	8003624 <HAL_TIM_IC_CaptureCallback>
 80034cc:	e005      	b.n	80034da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f89e 	bl	8003610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f8af 	bl	8003638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d020      	beq.n	800352c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d01b      	beq.n	800352c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f06f 0208 	mvn.w	r2, #8
 80034fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2204      	movs	r2, #4
 8003502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f886 	bl	8003624 <HAL_TIM_IC_CaptureCallback>
 8003518:	e005      	b.n	8003526 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f878 	bl	8003610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f889 	bl	8003638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	2b00      	cmp	r3, #0
 8003534:	d020      	beq.n	8003578 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f003 0310 	and.w	r3, r3, #16
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01b      	beq.n	8003578 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0210 	mvn.w	r2, #16
 8003548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2208      	movs	r2, #8
 800354e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f860 	bl	8003624 <HAL_TIM_IC_CaptureCallback>
 8003564:	e005      	b.n	8003572 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f852 	bl	8003610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f863 	bl	8003638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00c      	beq.n	800359c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d007      	beq.n	800359c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0201 	mvn.w	r2, #1
 8003594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fd fec0 	bl	800131c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00c      	beq.n	80035c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d007      	beq.n	80035c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80035b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f8e6 	bl	800378c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00c      	beq.n	80035e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d007      	beq.n	80035e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80035dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f834 	bl	800364c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00c      	beq.n	8003608 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d007      	beq.n	8003608 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0220 	mvn.w	r2, #32
 8003600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f8b8 	bl	8003778 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003608:	bf00      	nop
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a3a      	ldr	r2, [pc, #232]	@ (800375c <TIM_Base_SetConfig+0xfc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00f      	beq.n	8003698 <TIM_Base_SetConfig+0x38>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800367e:	d00b      	beq.n	8003698 <TIM_Base_SetConfig+0x38>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a37      	ldr	r2, [pc, #220]	@ (8003760 <TIM_Base_SetConfig+0x100>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d007      	beq.n	8003698 <TIM_Base_SetConfig+0x38>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a36      	ldr	r2, [pc, #216]	@ (8003764 <TIM_Base_SetConfig+0x104>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d003      	beq.n	8003698 <TIM_Base_SetConfig+0x38>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a35      	ldr	r2, [pc, #212]	@ (8003768 <TIM_Base_SetConfig+0x108>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d108      	bne.n	80036aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800369e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a2b      	ldr	r2, [pc, #172]	@ (800375c <TIM_Base_SetConfig+0xfc>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d01b      	beq.n	80036ea <TIM_Base_SetConfig+0x8a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b8:	d017      	beq.n	80036ea <TIM_Base_SetConfig+0x8a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a28      	ldr	r2, [pc, #160]	@ (8003760 <TIM_Base_SetConfig+0x100>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d013      	beq.n	80036ea <TIM_Base_SetConfig+0x8a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a27      	ldr	r2, [pc, #156]	@ (8003764 <TIM_Base_SetConfig+0x104>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00f      	beq.n	80036ea <TIM_Base_SetConfig+0x8a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a26      	ldr	r2, [pc, #152]	@ (8003768 <TIM_Base_SetConfig+0x108>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00b      	beq.n	80036ea <TIM_Base_SetConfig+0x8a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a25      	ldr	r2, [pc, #148]	@ (800376c <TIM_Base_SetConfig+0x10c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d007      	beq.n	80036ea <TIM_Base_SetConfig+0x8a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a24      	ldr	r2, [pc, #144]	@ (8003770 <TIM_Base_SetConfig+0x110>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d003      	beq.n	80036ea <TIM_Base_SetConfig+0x8a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a23      	ldr	r2, [pc, #140]	@ (8003774 <TIM_Base_SetConfig+0x114>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d108      	bne.n	80036fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a0e      	ldr	r2, [pc, #56]	@ (800375c <TIM_Base_SetConfig+0xfc>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d103      	bne.n	8003730 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b01      	cmp	r3, #1
 8003740:	d105      	bne.n	800374e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f023 0201 	bic.w	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	611a      	str	r2, [r3, #16]
  }
}
 800374e:	bf00      	nop
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40010000 	.word	0x40010000
 8003760:	40000400 	.word	0x40000400
 8003764:	40000800 	.word	0x40000800
 8003768:	40000c00 	.word	0x40000c00
 800376c:	40014000 	.word	0x40014000
 8003770:	40014400 	.word	0x40014400
 8003774:	40014800 	.word	0x40014800

08003778 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e042      	b.n	8003838 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fd fe34 	bl	8001434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2224      	movs	r2, #36	@ 0x24
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 ff59 	bl	800469c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695a      	ldr	r2, [r3, #20]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003808:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003818:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08a      	sub	sp, #40	@ 0x28
 8003844:	af02      	add	r7, sp, #8
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	603b      	str	r3, [r7, #0]
 800384c:	4613      	mov	r3, r2
 800384e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b20      	cmp	r3, #32
 800385e:	d175      	bne.n	800394c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_UART_Transmit+0x2c>
 8003866:	88fb      	ldrh	r3, [r7, #6]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e06e      	b.n	800394e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2221      	movs	r2, #33	@ 0x21
 800387a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800387e:	f7fe f8d9 	bl	8001a34 <HAL_GetTick>
 8003882:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	88fa      	ldrh	r2, [r7, #6]
 8003888:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	88fa      	ldrh	r2, [r7, #6]
 800388e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003898:	d108      	bne.n	80038ac <HAL_UART_Transmit+0x6c>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d104      	bne.n	80038ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	61bb      	str	r3, [r7, #24]
 80038aa:	e003      	b.n	80038b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038b4:	e02e      	b.n	8003914 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2200      	movs	r2, #0
 80038be:	2180      	movs	r1, #128	@ 0x80
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 fc31 	bl	8004128 <UART_WaitOnFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e03a      	b.n	800394e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10b      	bne.n	80038f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	3302      	adds	r3, #2
 80038f2:	61bb      	str	r3, [r7, #24]
 80038f4:	e007      	b.n	8003906 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	781a      	ldrb	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	3301      	adds	r3, #1
 8003904:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1cb      	bne.n	80038b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2200      	movs	r2, #0
 8003926:	2140      	movs	r1, #64	@ 0x40
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 fbfd 	bl	8004128 <UART_WaitOnFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e006      	b.n	800394e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	e000      	b.n	800394e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800394c:	2302      	movs	r3, #2
  }
}
 800394e:	4618      	mov	r0, r3
 8003950:	3720      	adds	r7, #32
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	4613      	mov	r3, r2
 8003962:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b20      	cmp	r3, #32
 800396e:	d112      	bne.n	8003996 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <HAL_UART_Receive_DMA+0x26>
 8003976:	88fb      	ldrh	r3, [r7, #6]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e00b      	b.n	8003998 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003986:	88fb      	ldrh	r3, [r7, #6]
 8003988:	461a      	mov	r2, r3
 800398a:	68b9      	ldr	r1, [r7, #8]
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 fc25 	bl	80041dc <UART_Start_Receive_DMA>
 8003992:	4603      	mov	r3, r0
 8003994:	e000      	b.n	8003998 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003996:	2302      	movs	r3, #2
  }
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b0ba      	sub	sp, #232	@ 0xe8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80039de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10f      	bne.n	8003a06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <HAL_UART_IRQHandler+0x66>
 80039f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039f6:	f003 0320 	and.w	r3, r3, #32
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fd8d 	bl	800451e <UART_Receive_IT>
      return;
 8003a04:	e25b      	b.n	8003ebe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 80de 	beq.w	8003bcc <HAL_UART_IRQHandler+0x22c>
 8003a10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d106      	bne.n	8003a2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a20:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 80d1 	beq.w	8003bcc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00b      	beq.n	8003a4e <HAL_UART_IRQHandler+0xae>
 8003a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d005      	beq.n	8003a4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a46:	f043 0201 	orr.w	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00b      	beq.n	8003a72 <HAL_UART_IRQHandler+0xd2>
 8003a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a6a:	f043 0202 	orr.w	r2, r3, #2
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00b      	beq.n	8003a96 <HAL_UART_IRQHandler+0xf6>
 8003a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d005      	beq.n	8003a96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8e:	f043 0204 	orr.w	r2, r3, #4
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d011      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x126>
 8003aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d105      	bne.n	8003aba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003abe:	f043 0208 	orr.w	r2, r3, #8
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 81f2 	beq.w	8003eb4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_UART_IRQHandler+0x14e>
 8003adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ae0:	f003 0320 	and.w	r3, r3, #32
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fd18 	bl	800451e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af8:	2b40      	cmp	r3, #64	@ 0x40
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d103      	bne.n	8003b1a <HAL_UART_IRQHandler+0x17a>
 8003b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d04f      	beq.n	8003bba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fc20 	bl	8004360 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b2a:	2b40      	cmp	r3, #64	@ 0x40
 8003b2c:	d141      	bne.n	8003bb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3314      	adds	r3, #20
 8003b34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
 8003b40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3314      	adds	r3, #20
 8003b56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003b5a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b6a:	e841 2300 	strex	r3, r2, [r1]
 8003b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1d9      	bne.n	8003b2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d013      	beq.n	8003baa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b86:	4a7e      	ldr	r2, [pc, #504]	@ (8003d80 <HAL_UART_IRQHandler+0x3e0>)
 8003b88:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fe f9b4 	bl	8001efc <HAL_DMA_Abort_IT>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d016      	beq.n	8003bc8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba8:	e00e      	b.n	8003bc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f9a8 	bl	8003f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb0:	e00a      	b.n	8003bc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f9a4 	bl	8003f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb8:	e006      	b.n	8003bc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f9a0 	bl	8003f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003bc6:	e175      	b.n	8003eb4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc8:	bf00      	nop
    return;
 8003bca:	e173      	b.n	8003eb4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	f040 814f 	bne.w	8003e74 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 8148 	beq.w	8003e74 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 8141 	beq.w	8003e74 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c12:	2b40      	cmp	r3, #64	@ 0x40
 8003c14:	f040 80b6 	bne.w	8003d84 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 8145 	beq.w	8003eb8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c36:	429a      	cmp	r2, r3
 8003c38:	f080 813e 	bcs.w	8003eb8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c42:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c4e:	f000 8088 	beq.w	8003d62 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	330c      	adds	r3, #12
 8003c58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c60:	e853 3f00 	ldrex	r3, [r3]
 8003c64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003c68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	330c      	adds	r3, #12
 8003c7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003c7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c86:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c8e:	e841 2300 	strex	r3, r2, [r1]
 8003c92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1d9      	bne.n	8003c52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3314      	adds	r3, #20
 8003ca4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ca8:	e853 3f00 	ldrex	r3, [r3]
 8003cac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003cae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cb0:	f023 0301 	bic.w	r3, r3, #1
 8003cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3314      	adds	r3, #20
 8003cbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003cc2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003cc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003cca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003cce:	e841 2300 	strex	r3, r2, [r1]
 8003cd2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003cd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1e1      	bne.n	8003c9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3314      	adds	r3, #20
 8003ce0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ce4:	e853 3f00 	ldrex	r3, [r3]
 8003ce8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003cea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3314      	adds	r3, #20
 8003cfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003cfe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d00:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d02:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d06:	e841 2300 	strex	r3, r2, [r1]
 8003d0a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1e3      	bne.n	8003cda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	330c      	adds	r3, #12
 8003d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d2a:	e853 3f00 	ldrex	r3, [r3]
 8003d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d32:	f023 0310 	bic.w	r3, r3, #16
 8003d36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	330c      	adds	r3, #12
 8003d40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003d44:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d46:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d48:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d4a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d4c:	e841 2300 	strex	r3, r2, [r1]
 8003d50:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1e3      	bne.n	8003d20 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fe f85d 	bl	8001e1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2202      	movs	r2, #2
 8003d66:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	4619      	mov	r1, r3
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f8cb 	bl	8003f14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d7e:	e09b      	b.n	8003eb8 <HAL_UART_IRQHandler+0x518>
 8003d80:	08004427 	.word	0x08004427
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 808e 	beq.w	8003ebc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003da0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 8089 	beq.w	8003ebc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	330c      	adds	r3, #12
 8003db0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dc0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	330c      	adds	r3, #12
 8003dca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003dce:	647a      	str	r2, [r7, #68]	@ 0x44
 8003dd0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003dd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e3      	bne.n	8003daa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3314      	adds	r3, #20
 8003de8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	623b      	str	r3, [r7, #32]
   return(result);
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	f023 0301 	bic.w	r3, r3, #1
 8003df8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3314      	adds	r3, #20
 8003e02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e06:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e0e:	e841 2300 	strex	r3, r2, [r1]
 8003e12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1e3      	bne.n	8003de2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	330c      	adds	r3, #12
 8003e2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0310 	bic.w	r3, r3, #16
 8003e3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	330c      	adds	r3, #12
 8003e48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003e4c:	61fa      	str	r2, [r7, #28]
 8003e4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e50:	69b9      	ldr	r1, [r7, #24]
 8003e52:	69fa      	ldr	r2, [r7, #28]
 8003e54:	e841 2300 	strex	r3, r2, [r1]
 8003e58:	617b      	str	r3, [r7, #20]
   return(result);
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e3      	bne.n	8003e28 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f851 	bl	8003f14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e72:	e023      	b.n	8003ebc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d009      	beq.n	8003e94 <HAL_UART_IRQHandler+0x4f4>
 8003e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 fade 	bl	800444e <UART_Transmit_IT>
    return;
 8003e92:	e014      	b.n	8003ebe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00e      	beq.n	8003ebe <HAL_UART_IRQHandler+0x51e>
 8003ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d008      	beq.n	8003ebe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 fb1e 	bl	80044ee <UART_EndTransmit_IT>
    return;
 8003eb2:	e004      	b.n	8003ebe <HAL_UART_IRQHandler+0x51e>
    return;
 8003eb4:	bf00      	nop
 8003eb6:	e002      	b.n	8003ebe <HAL_UART_IRQHandler+0x51e>
      return;
 8003eb8:	bf00      	nop
 8003eba:	e000      	b.n	8003ebe <HAL_UART_IRQHandler+0x51e>
      return;
 8003ebc:	bf00      	nop
  }
}
 8003ebe:	37e8      	adds	r7, #232	@ 0xe8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b09c      	sub	sp, #112	@ 0x70
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f38:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d172      	bne.n	800402e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003f48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	330c      	adds	r3, #12
 8003f54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	330c      	adds	r3, #12
 8003f6c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003f6e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f70:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f76:	e841 2300 	strex	r3, r2, [r1]
 8003f7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e5      	bne.n	8003f4e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3314      	adds	r3, #20
 8003f88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f8c:	e853 3f00 	ldrex	r3, [r3]
 8003f90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	3314      	adds	r3, #20
 8003fa0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003fa2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003fa4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fa8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003faa:	e841 2300 	strex	r3, r2, [r1]
 8003fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1e5      	bne.n	8003f82 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	3314      	adds	r3, #20
 8003fbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc0:	e853 3f00 	ldrex	r3, [r3]
 8003fc4:	623b      	str	r3, [r7, #32]
   return(result);
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fcc:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3314      	adds	r3, #20
 8003fd4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003fd6:	633a      	str	r2, [r7, #48]	@ 0x30
 8003fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fde:	e841 2300 	strex	r3, r2, [r1]
 8003fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1e5      	bne.n	8003fb6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fec:	2220      	movs	r2, #32
 8003fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d119      	bne.n	800402e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ffa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	330c      	adds	r3, #12
 8004000:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	60fb      	str	r3, [r7, #12]
   return(result);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f023 0310 	bic.w	r3, r3, #16
 8004010:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004012:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	330c      	adds	r3, #12
 8004018:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800401a:	61fa      	str	r2, [r7, #28]
 800401c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401e:	69b9      	ldr	r1, [r7, #24]
 8004020:	69fa      	ldr	r2, [r7, #28]
 8004022:	e841 2300 	strex	r3, r2, [r1]
 8004026:	617b      	str	r3, [r7, #20]
   return(result);
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1e5      	bne.n	8003ffa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800402e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004030:	2200      	movs	r2, #0
 8004032:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004034:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004038:	2b01      	cmp	r3, #1
 800403a:	d106      	bne.n	800404a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800403c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800403e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004040:	4619      	mov	r1, r3
 8004042:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004044:	f7ff ff66 	bl	8003f14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004048:	e002      	b.n	8004050 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800404a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800404c:	f7ff ff44 	bl	8003ed8 <HAL_UART_RxCpltCallback>
}
 8004050:	bf00      	nop
 8004052:	3770      	adds	r7, #112	@ 0x70
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004064:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2201      	movs	r2, #1
 800406a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004070:	2b01      	cmp	r3, #1
 8004072:	d108      	bne.n	8004086 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	b29b      	uxth	r3, r3
 800407c:	4619      	mov	r1, r3
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f7ff ff48 	bl	8003f14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004084:	e002      	b.n	800408c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f7ff ff30 	bl	8003eec <HAL_UART_RxHalfCpltCallback>
}
 800408c:	bf00      	nop
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b0:	2b80      	cmp	r3, #128	@ 0x80
 80040b2:	bf0c      	ite	eq
 80040b4:	2301      	moveq	r3, #1
 80040b6:	2300      	movne	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b21      	cmp	r3, #33	@ 0x21
 80040c6:	d108      	bne.n	80040da <UART_DMAError+0x46>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d005      	beq.n	80040da <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2200      	movs	r2, #0
 80040d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80040d4:	68b8      	ldr	r0, [r7, #8]
 80040d6:	f000 f91b 	bl	8004310 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e4:	2b40      	cmp	r3, #64	@ 0x40
 80040e6:	bf0c      	ite	eq
 80040e8:	2301      	moveq	r3, #1
 80040ea:	2300      	movne	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b22      	cmp	r3, #34	@ 0x22
 80040fa:	d108      	bne.n	800410e <UART_DMAError+0x7a>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d005      	beq.n	800410e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2200      	movs	r2, #0
 8004106:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004108:	68b8      	ldr	r0, [r7, #8]
 800410a:	f000 f929 	bl	8004360 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004112:	f043 0210 	orr.w	r2, r3, #16
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800411a:	68b8      	ldr	r0, [r7, #8]
 800411c:	f7ff fef0 	bl	8003f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004120:	bf00      	nop
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	603b      	str	r3, [r7, #0]
 8004134:	4613      	mov	r3, r2
 8004136:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004138:	e03b      	b.n	80041b2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004140:	d037      	beq.n	80041b2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004142:	f7fd fc77 	bl	8001a34 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	6a3a      	ldr	r2, [r7, #32]
 800414e:	429a      	cmp	r2, r3
 8004150:	d302      	bcc.n	8004158 <UART_WaitOnFlagUntilTimeout+0x30>
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e03a      	b.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	2b00      	cmp	r3, #0
 8004168:	d023      	beq.n	80041b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b80      	cmp	r3, #128	@ 0x80
 800416e:	d020      	beq.n	80041b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b40      	cmp	r3, #64	@ 0x40
 8004174:	d01d      	beq.n	80041b2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b08      	cmp	r3, #8
 8004182:	d116      	bne.n	80041b2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004184:	2300      	movs	r3, #0
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f8e0 	bl	8004360 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2208      	movs	r2, #8
 80041a4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e00f      	b.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4013      	ands	r3, r2
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	429a      	cmp	r2, r3
 80041c0:	bf0c      	ite	eq
 80041c2:	2301      	moveq	r3, #1
 80041c4:	2300      	movne	r3, #0
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	461a      	mov	r2, r3
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d0b4      	beq.n	800413a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b098      	sub	sp, #96	@ 0x60
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	4613      	mov	r3, r2
 80041e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	88fa      	ldrh	r2, [r7, #6]
 80041f4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2222      	movs	r2, #34	@ 0x22
 8004200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004208:	4a3e      	ldr	r2, [pc, #248]	@ (8004304 <UART_Start_Receive_DMA+0x128>)
 800420a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004210:	4a3d      	ldr	r2, [pc, #244]	@ (8004308 <UART_Start_Receive_DMA+0x12c>)
 8004212:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004218:	4a3c      	ldr	r2, [pc, #240]	@ (800430c <UART_Start_Receive_DMA+0x130>)
 800421a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004220:	2200      	movs	r2, #0
 8004222:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004224:	f107 0308 	add.w	r3, r7, #8
 8004228:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3304      	adds	r3, #4
 8004234:	4619      	mov	r1, r3
 8004236:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	f7fd fd96 	bl	8001d6c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004240:	2300      	movs	r3, #0
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	613b      	str	r3, [r7, #16]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d019      	beq.n	8004292 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	330c      	adds	r3, #12
 8004264:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004266:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800426e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004274:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	330c      	adds	r3, #12
 800427c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800427e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004280:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004284:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004286:	e841 2300 	strex	r3, r2, [r1]
 800428a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800428c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1e5      	bne.n	800425e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3314      	adds	r3, #20
 8004298:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3314      	adds	r3, #20
 80042b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80042b2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80042b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80042b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e5      	bne.n	8004292 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3314      	adds	r3, #20
 80042cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	617b      	str	r3, [r7, #20]
   return(result);
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3314      	adds	r3, #20
 80042e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80042e6:	627a      	str	r2, [r7, #36]	@ 0x24
 80042e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	6a39      	ldr	r1, [r7, #32]
 80042ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e5      	bne.n	80042c6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3760      	adds	r7, #96	@ 0x60
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	08003f2d 	.word	0x08003f2d
 8004308:	08004059 	.word	0x08004059
 800430c:	08004095 	.word	0x08004095

08004310 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004310:	b480      	push	{r7}
 8004312:	b089      	sub	sp, #36	@ 0x24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	330c      	adds	r3, #12
 800431e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	e853 3f00 	ldrex	r3, [r3]
 8004326:	60bb      	str	r3, [r7, #8]
   return(result);
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800432e:	61fb      	str	r3, [r7, #28]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	330c      	adds	r3, #12
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	61ba      	str	r2, [r7, #24]
 800433a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433c:	6979      	ldr	r1, [r7, #20]
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	e841 2300 	strex	r3, r2, [r1]
 8004344:	613b      	str	r3, [r7, #16]
   return(result);
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1e5      	bne.n	8004318 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004354:	bf00      	nop
 8004356:	3724      	adds	r7, #36	@ 0x24
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004360:	b480      	push	{r7}
 8004362:	b095      	sub	sp, #84	@ 0x54
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	330c      	adds	r3, #12
 800436e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004372:	e853 3f00 	ldrex	r3, [r3]
 8004376:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800437e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	330c      	adds	r3, #12
 8004386:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004388:	643a      	str	r2, [r7, #64]	@ 0x40
 800438a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800438e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004390:	e841 2300 	strex	r3, r2, [r1]
 8004394:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e5      	bne.n	8004368 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3314      	adds	r3, #20
 80043a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	e853 3f00 	ldrex	r3, [r3]
 80043aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3314      	adds	r3, #20
 80043ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043c4:	e841 2300 	strex	r3, r2, [r1]
 80043c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e5      	bne.n	800439c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d119      	bne.n	800440c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	330c      	adds	r3, #12
 80043de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	e853 3f00 	ldrex	r3, [r3]
 80043e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f023 0310 	bic.w	r3, r3, #16
 80043ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	330c      	adds	r3, #12
 80043f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043f8:	61ba      	str	r2, [r7, #24]
 80043fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fc:	6979      	ldr	r1, [r7, #20]
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	e841 2300 	strex	r3, r2, [r1]
 8004404:	613b      	str	r3, [r7, #16]
   return(result);
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e5      	bne.n	80043d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800441a:	bf00      	nop
 800441c:	3754      	adds	r7, #84	@ 0x54
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004432:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f7ff fd5d 	bl	8003f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800444e:	b480      	push	{r7}
 8004450:	b085      	sub	sp, #20
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b21      	cmp	r3, #33	@ 0x21
 8004460:	d13e      	bne.n	80044e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800446a:	d114      	bne.n	8004496 <UART_Transmit_IT+0x48>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d110      	bne.n	8004496 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004488:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	1c9a      	adds	r2, r3, #2
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	621a      	str	r2, [r3, #32]
 8004494:	e008      	b.n	80044a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	1c59      	adds	r1, r3, #1
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6211      	str	r1, [r2, #32]
 80044a0:	781a      	ldrb	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	4619      	mov	r1, r3
 80044b6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10f      	bne.n	80044dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	e000      	b.n	80044e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044e0:	2302      	movs	r3, #2
  }
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b082      	sub	sp, #8
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004504:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7ff fcd8 	bl	8003ec4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b08c      	sub	sp, #48	@ 0x30
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b22      	cmp	r3, #34	@ 0x22
 8004530:	f040 80ae 	bne.w	8004690 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800453c:	d117      	bne.n	800456e <UART_Receive_IT+0x50>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d113      	bne.n	800456e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004546:	2300      	movs	r3, #0
 8004548:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	b29b      	uxth	r3, r3
 8004558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455c:	b29a      	uxth	r2, r3
 800455e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004560:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004566:	1c9a      	adds	r2, r3, #2
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	629a      	str	r2, [r3, #40]	@ 0x28
 800456c:	e026      	b.n	80045bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004572:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004574:	2300      	movs	r3, #0
 8004576:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004580:	d007      	beq.n	8004592 <UART_Receive_IT+0x74>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10a      	bne.n	80045a0 <UART_Receive_IT+0x82>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	b2da      	uxtb	r2, r3
 800459a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	e008      	b.n	80045b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	4619      	mov	r1, r3
 80045ca:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d15d      	bne.n	800468c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0220 	bic.w	r2, r2, #32
 80045de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695a      	ldr	r2, [r3, #20]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0201 	bic.w	r2, r2, #1
 80045fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004612:	2b01      	cmp	r3, #1
 8004614:	d135      	bne.n	8004682 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	330c      	adds	r3, #12
 8004622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	e853 3f00 	ldrex	r3, [r3]
 800462a:	613b      	str	r3, [r7, #16]
   return(result);
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f023 0310 	bic.w	r3, r3, #16
 8004632:	627b      	str	r3, [r7, #36]	@ 0x24
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	330c      	adds	r3, #12
 800463a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800463c:	623a      	str	r2, [r7, #32]
 800463e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004640:	69f9      	ldr	r1, [r7, #28]
 8004642:	6a3a      	ldr	r2, [r7, #32]
 8004644:	e841 2300 	strex	r3, r2, [r1]
 8004648:	61bb      	str	r3, [r7, #24]
   return(result);
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e5      	bne.n	800461c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0310 	and.w	r3, r3, #16
 800465a:	2b10      	cmp	r3, #16
 800465c:	d10a      	bne.n	8004674 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800465e:	2300      	movs	r3, #0
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004678:	4619      	mov	r1, r3
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff fc4a 	bl	8003f14 <HAL_UARTEx_RxEventCallback>
 8004680:	e002      	b.n	8004688 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff fc28 	bl	8003ed8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	e002      	b.n	8004692 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	e000      	b.n	8004692 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004690:	2302      	movs	r3, #2
  }
}
 8004692:	4618      	mov	r0, r3
 8004694:	3730      	adds	r7, #48	@ 0x30
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800469c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046a0:	b0c0      	sub	sp, #256	@ 0x100
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80046b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b8:	68d9      	ldr	r1, [r3, #12]
 80046ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	ea40 0301 	orr.w	r3, r0, r1
 80046c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	431a      	orrs	r2, r3
 80046dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80046f4:	f021 010c 	bic.w	r1, r1, #12
 80046f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004702:	430b      	orrs	r3, r1
 8004704:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004716:	6999      	ldr	r1, [r3, #24]
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	ea40 0301 	orr.w	r3, r0, r1
 8004722:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	4b8f      	ldr	r3, [pc, #572]	@ (8004968 <UART_SetConfig+0x2cc>)
 800472c:	429a      	cmp	r2, r3
 800472e:	d005      	beq.n	800473c <UART_SetConfig+0xa0>
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	4b8d      	ldr	r3, [pc, #564]	@ (800496c <UART_SetConfig+0x2d0>)
 8004738:	429a      	cmp	r2, r3
 800473a:	d104      	bne.n	8004746 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800473c:	f7fe fd76 	bl	800322c <HAL_RCC_GetPCLK2Freq>
 8004740:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004744:	e003      	b.n	800474e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004746:	f7fe fd5d 	bl	8003204 <HAL_RCC_GetPCLK1Freq>
 800474a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800474e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004758:	f040 810c 	bne.w	8004974 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800475c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004760:	2200      	movs	r2, #0
 8004762:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004766:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800476a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800476e:	4622      	mov	r2, r4
 8004770:	462b      	mov	r3, r5
 8004772:	1891      	adds	r1, r2, r2
 8004774:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004776:	415b      	adcs	r3, r3
 8004778:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800477a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800477e:	4621      	mov	r1, r4
 8004780:	eb12 0801 	adds.w	r8, r2, r1
 8004784:	4629      	mov	r1, r5
 8004786:	eb43 0901 	adc.w	r9, r3, r1
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004796:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800479a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800479e:	4690      	mov	r8, r2
 80047a0:	4699      	mov	r9, r3
 80047a2:	4623      	mov	r3, r4
 80047a4:	eb18 0303 	adds.w	r3, r8, r3
 80047a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80047ac:	462b      	mov	r3, r5
 80047ae:	eb49 0303 	adc.w	r3, r9, r3
 80047b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80047b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80047c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80047c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80047ca:	460b      	mov	r3, r1
 80047cc:	18db      	adds	r3, r3, r3
 80047ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80047d0:	4613      	mov	r3, r2
 80047d2:	eb42 0303 	adc.w	r3, r2, r3
 80047d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80047d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80047dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80047e0:	f7fc f9ea 	bl	8000bb8 <__aeabi_uldivmod>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4b61      	ldr	r3, [pc, #388]	@ (8004970 <UART_SetConfig+0x2d4>)
 80047ea:	fba3 2302 	umull	r2, r3, r3, r2
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	011c      	lsls	r4, r3, #4
 80047f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047f6:	2200      	movs	r2, #0
 80047f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004800:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004804:	4642      	mov	r2, r8
 8004806:	464b      	mov	r3, r9
 8004808:	1891      	adds	r1, r2, r2
 800480a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800480c:	415b      	adcs	r3, r3
 800480e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004810:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004814:	4641      	mov	r1, r8
 8004816:	eb12 0a01 	adds.w	sl, r2, r1
 800481a:	4649      	mov	r1, r9
 800481c:	eb43 0b01 	adc.w	fp, r3, r1
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800482c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004830:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004834:	4692      	mov	sl, r2
 8004836:	469b      	mov	fp, r3
 8004838:	4643      	mov	r3, r8
 800483a:	eb1a 0303 	adds.w	r3, sl, r3
 800483e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004842:	464b      	mov	r3, r9
 8004844:	eb4b 0303 	adc.w	r3, fp, r3
 8004848:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004858:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800485c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004860:	460b      	mov	r3, r1
 8004862:	18db      	adds	r3, r3, r3
 8004864:	643b      	str	r3, [r7, #64]	@ 0x40
 8004866:	4613      	mov	r3, r2
 8004868:	eb42 0303 	adc.w	r3, r2, r3
 800486c:	647b      	str	r3, [r7, #68]	@ 0x44
 800486e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004872:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004876:	f7fc f99f 	bl	8000bb8 <__aeabi_uldivmod>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	4611      	mov	r1, r2
 8004880:	4b3b      	ldr	r3, [pc, #236]	@ (8004970 <UART_SetConfig+0x2d4>)
 8004882:	fba3 2301 	umull	r2, r3, r3, r1
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	2264      	movs	r2, #100	@ 0x64
 800488a:	fb02 f303 	mul.w	r3, r2, r3
 800488e:	1acb      	subs	r3, r1, r3
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004896:	4b36      	ldr	r3, [pc, #216]	@ (8004970 <UART_SetConfig+0x2d4>)
 8004898:	fba3 2302 	umull	r2, r3, r3, r2
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80048a4:	441c      	add	r4, r3
 80048a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048aa:	2200      	movs	r2, #0
 80048ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80048b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80048b8:	4642      	mov	r2, r8
 80048ba:	464b      	mov	r3, r9
 80048bc:	1891      	adds	r1, r2, r2
 80048be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80048c0:	415b      	adcs	r3, r3
 80048c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80048c8:	4641      	mov	r1, r8
 80048ca:	1851      	adds	r1, r2, r1
 80048cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80048ce:	4649      	mov	r1, r9
 80048d0:	414b      	adcs	r3, r1
 80048d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80048e0:	4659      	mov	r1, fp
 80048e2:	00cb      	lsls	r3, r1, #3
 80048e4:	4651      	mov	r1, sl
 80048e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ea:	4651      	mov	r1, sl
 80048ec:	00ca      	lsls	r2, r1, #3
 80048ee:	4610      	mov	r0, r2
 80048f0:	4619      	mov	r1, r3
 80048f2:	4603      	mov	r3, r0
 80048f4:	4642      	mov	r2, r8
 80048f6:	189b      	adds	r3, r3, r2
 80048f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048fc:	464b      	mov	r3, r9
 80048fe:	460a      	mov	r2, r1
 8004900:	eb42 0303 	adc.w	r3, r2, r3
 8004904:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004914:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004918:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800491c:	460b      	mov	r3, r1
 800491e:	18db      	adds	r3, r3, r3
 8004920:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004922:	4613      	mov	r3, r2
 8004924:	eb42 0303 	adc.w	r3, r2, r3
 8004928:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800492a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800492e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004932:	f7fc f941 	bl	8000bb8 <__aeabi_uldivmod>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	4b0d      	ldr	r3, [pc, #52]	@ (8004970 <UART_SetConfig+0x2d4>)
 800493c:	fba3 1302 	umull	r1, r3, r3, r2
 8004940:	095b      	lsrs	r3, r3, #5
 8004942:	2164      	movs	r1, #100	@ 0x64
 8004944:	fb01 f303 	mul.w	r3, r1, r3
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	3332      	adds	r3, #50	@ 0x32
 800494e:	4a08      	ldr	r2, [pc, #32]	@ (8004970 <UART_SetConfig+0x2d4>)
 8004950:	fba2 2303 	umull	r2, r3, r2, r3
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	f003 0207 	and.w	r2, r3, #7
 800495a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4422      	add	r2, r4
 8004962:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004964:	e106      	b.n	8004b74 <UART_SetConfig+0x4d8>
 8004966:	bf00      	nop
 8004968:	40011000 	.word	0x40011000
 800496c:	40011400 	.word	0x40011400
 8004970:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004978:	2200      	movs	r2, #0
 800497a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800497e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004982:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004986:	4642      	mov	r2, r8
 8004988:	464b      	mov	r3, r9
 800498a:	1891      	adds	r1, r2, r2
 800498c:	6239      	str	r1, [r7, #32]
 800498e:	415b      	adcs	r3, r3
 8004990:	627b      	str	r3, [r7, #36]	@ 0x24
 8004992:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004996:	4641      	mov	r1, r8
 8004998:	1854      	adds	r4, r2, r1
 800499a:	4649      	mov	r1, r9
 800499c:	eb43 0501 	adc.w	r5, r3, r1
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	00eb      	lsls	r3, r5, #3
 80049aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ae:	00e2      	lsls	r2, r4, #3
 80049b0:	4614      	mov	r4, r2
 80049b2:	461d      	mov	r5, r3
 80049b4:	4643      	mov	r3, r8
 80049b6:	18e3      	adds	r3, r4, r3
 80049b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80049bc:	464b      	mov	r3, r9
 80049be:	eb45 0303 	adc.w	r3, r5, r3
 80049c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80049c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80049d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	f04f 0300 	mov.w	r3, #0
 80049de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80049e2:	4629      	mov	r1, r5
 80049e4:	008b      	lsls	r3, r1, #2
 80049e6:	4621      	mov	r1, r4
 80049e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049ec:	4621      	mov	r1, r4
 80049ee:	008a      	lsls	r2, r1, #2
 80049f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80049f4:	f7fc f8e0 	bl	8000bb8 <__aeabi_uldivmod>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4b60      	ldr	r3, [pc, #384]	@ (8004b80 <UART_SetConfig+0x4e4>)
 80049fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	011c      	lsls	r4, r3, #4
 8004a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004a14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004a18:	4642      	mov	r2, r8
 8004a1a:	464b      	mov	r3, r9
 8004a1c:	1891      	adds	r1, r2, r2
 8004a1e:	61b9      	str	r1, [r7, #24]
 8004a20:	415b      	adcs	r3, r3
 8004a22:	61fb      	str	r3, [r7, #28]
 8004a24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a28:	4641      	mov	r1, r8
 8004a2a:	1851      	adds	r1, r2, r1
 8004a2c:	6139      	str	r1, [r7, #16]
 8004a2e:	4649      	mov	r1, r9
 8004a30:	414b      	adcs	r3, r1
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a40:	4659      	mov	r1, fp
 8004a42:	00cb      	lsls	r3, r1, #3
 8004a44:	4651      	mov	r1, sl
 8004a46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a4a:	4651      	mov	r1, sl
 8004a4c:	00ca      	lsls	r2, r1, #3
 8004a4e:	4610      	mov	r0, r2
 8004a50:	4619      	mov	r1, r3
 8004a52:	4603      	mov	r3, r0
 8004a54:	4642      	mov	r2, r8
 8004a56:	189b      	adds	r3, r3, r2
 8004a58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a5c:	464b      	mov	r3, r9
 8004a5e:	460a      	mov	r2, r1
 8004a60:	eb42 0303 	adc.w	r3, r2, r3
 8004a64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004a80:	4649      	mov	r1, r9
 8004a82:	008b      	lsls	r3, r1, #2
 8004a84:	4641      	mov	r1, r8
 8004a86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a8a:	4641      	mov	r1, r8
 8004a8c:	008a      	lsls	r2, r1, #2
 8004a8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004a92:	f7fc f891 	bl	8000bb8 <__aeabi_uldivmod>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	4b38      	ldr	r3, [pc, #224]	@ (8004b80 <UART_SetConfig+0x4e4>)
 8004a9e:	fba3 2301 	umull	r2, r3, r3, r1
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	2264      	movs	r2, #100	@ 0x64
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
 8004aaa:	1acb      	subs	r3, r1, r3
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	3332      	adds	r3, #50	@ 0x32
 8004ab0:	4a33      	ldr	r2, [pc, #204]	@ (8004b80 <UART_SetConfig+0x4e4>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004abc:	441c      	add	r4, r3
 8004abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ac6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ac8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004acc:	4642      	mov	r2, r8
 8004ace:	464b      	mov	r3, r9
 8004ad0:	1891      	adds	r1, r2, r2
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	415b      	adcs	r3, r3
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004adc:	4641      	mov	r1, r8
 8004ade:	1851      	adds	r1, r2, r1
 8004ae0:	6039      	str	r1, [r7, #0]
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	414b      	adcs	r3, r1
 8004ae6:	607b      	str	r3, [r7, #4]
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004af4:	4659      	mov	r1, fp
 8004af6:	00cb      	lsls	r3, r1, #3
 8004af8:	4651      	mov	r1, sl
 8004afa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004afe:	4651      	mov	r1, sl
 8004b00:	00ca      	lsls	r2, r1, #3
 8004b02:	4610      	mov	r0, r2
 8004b04:	4619      	mov	r1, r3
 8004b06:	4603      	mov	r3, r0
 8004b08:	4642      	mov	r2, r8
 8004b0a:	189b      	adds	r3, r3, r2
 8004b0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b0e:	464b      	mov	r3, r9
 8004b10:	460a      	mov	r2, r1
 8004b12:	eb42 0303 	adc.w	r3, r2, r3
 8004b16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b22:	667a      	str	r2, [r7, #100]	@ 0x64
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004b30:	4649      	mov	r1, r9
 8004b32:	008b      	lsls	r3, r1, #2
 8004b34:	4641      	mov	r1, r8
 8004b36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b3a:	4641      	mov	r1, r8
 8004b3c:	008a      	lsls	r2, r1, #2
 8004b3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004b42:	f7fc f839 	bl	8000bb8 <__aeabi_uldivmod>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b80 <UART_SetConfig+0x4e4>)
 8004b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b50:	095b      	lsrs	r3, r3, #5
 8004b52:	2164      	movs	r1, #100	@ 0x64
 8004b54:	fb01 f303 	mul.w	r3, r1, r3
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	3332      	adds	r3, #50	@ 0x32
 8004b5e:	4a08      	ldr	r2, [pc, #32]	@ (8004b80 <UART_SetConfig+0x4e4>)
 8004b60:	fba2 2303 	umull	r2, r3, r2, r3
 8004b64:	095b      	lsrs	r3, r3, #5
 8004b66:	f003 020f 	and.w	r2, r3, #15
 8004b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4422      	add	r2, r4
 8004b72:	609a      	str	r2, [r3, #8]
}
 8004b74:	bf00      	nop
 8004b76:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b80:	51eb851f 	.word	0x51eb851f

08004b84 <__NVIC_SetPriority>:
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	6039      	str	r1, [r7, #0]
 8004b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	db0a      	blt.n	8004bae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	490c      	ldr	r1, [pc, #48]	@ (8004bd0 <__NVIC_SetPriority+0x4c>)
 8004b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba2:	0112      	lsls	r2, r2, #4
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	440b      	add	r3, r1
 8004ba8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004bac:	e00a      	b.n	8004bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	4908      	ldr	r1, [pc, #32]	@ (8004bd4 <__NVIC_SetPriority+0x50>)
 8004bb4:	79fb      	ldrb	r3, [r7, #7]
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	3b04      	subs	r3, #4
 8004bbc:	0112      	lsls	r2, r2, #4
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	761a      	strb	r2, [r3, #24]
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	e000e100 	.word	0xe000e100
 8004bd4:	e000ed00 	.word	0xe000ed00

08004bd8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004bdc:	4b05      	ldr	r3, [pc, #20]	@ (8004bf4 <SysTick_Handler+0x1c>)
 8004bde:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004be0:	f001 fe54 	bl	800688c <xTaskGetSchedulerState>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d001      	beq.n	8004bee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004bea:	f002 fce5 	bl	80075b8 <xPortSysTickHandler>
  }
}
 8004bee:	bf00      	nop
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	e000e010 	.word	0xe000e010

08004bf8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	f06f 0004 	mvn.w	r0, #4
 8004c02:	f7ff ffbf 	bl	8004b84 <__NVIC_SetPriority>
#endif
}
 8004c06:	bf00      	nop
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c12:	f3ef 8305 	mrs	r3, IPSR
 8004c16:	603b      	str	r3, [r7, #0]
  return(result);
 8004c18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004c1e:	f06f 0305 	mvn.w	r3, #5
 8004c22:	607b      	str	r3, [r7, #4]
 8004c24:	e00c      	b.n	8004c40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c26:	4b0a      	ldr	r3, [pc, #40]	@ (8004c50 <osKernelInitialize+0x44>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d105      	bne.n	8004c3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004c2e:	4b08      	ldr	r3, [pc, #32]	@ (8004c50 <osKernelInitialize+0x44>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	607b      	str	r3, [r7, #4]
 8004c38:	e002      	b.n	8004c40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c40:	687b      	ldr	r3, [r7, #4]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	200005e0 	.word	0x200005e0

08004c54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c5a:	f3ef 8305 	mrs	r3, IPSR
 8004c5e:	603b      	str	r3, [r7, #0]
  return(result);
 8004c60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004c66:	f06f 0305 	mvn.w	r3, #5
 8004c6a:	607b      	str	r3, [r7, #4]
 8004c6c:	e010      	b.n	8004c90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c9c <osKernelStart+0x48>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d109      	bne.n	8004c8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004c76:	f7ff ffbf 	bl	8004bf8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004c7a:	4b08      	ldr	r3, [pc, #32]	@ (8004c9c <osKernelStart+0x48>)
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004c80:	f001 f9a0 	bl	8005fc4 <vTaskStartScheduler>
      stat = osOK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	607b      	str	r3, [r7, #4]
 8004c88:	e002      	b.n	8004c90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c90:	687b      	ldr	r3, [r7, #4]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	200005e0 	.word	0x200005e0

08004ca0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08e      	sub	sp, #56	@ 0x38
 8004ca4:	af04      	add	r7, sp, #16
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004cac:	2300      	movs	r3, #0
 8004cae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cb0:	f3ef 8305 	mrs	r3, IPSR
 8004cb4:	617b      	str	r3, [r7, #20]
  return(result);
 8004cb6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d17e      	bne.n	8004dba <osThreadNew+0x11a>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d07b      	beq.n	8004dba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004cc2:	2380      	movs	r3, #128	@ 0x80
 8004cc4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004cc6:	2318      	movs	r3, #24
 8004cc8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004cce:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d045      	beq.n	8004d66 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <osThreadNew+0x48>
        name = attr->name;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d008      	beq.n	8004d0e <osThreadNew+0x6e>
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	2b38      	cmp	r3, #56	@ 0x38
 8004d00:	d805      	bhi.n	8004d0e <osThreadNew+0x6e>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <osThreadNew+0x72>
        return (NULL);
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e054      	b.n	8004dbc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	089b      	lsrs	r3, r3, #2
 8004d20:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00e      	beq.n	8004d48 <osThreadNew+0xa8>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	2ba7      	cmp	r3, #167	@ 0xa7
 8004d30:	d90a      	bls.n	8004d48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d006      	beq.n	8004d48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <osThreadNew+0xa8>
        mem = 1;
 8004d42:	2301      	movs	r3, #1
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	e010      	b.n	8004d6a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10c      	bne.n	8004d6a <osThreadNew+0xca>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d108      	bne.n	8004d6a <osThreadNew+0xca>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d104      	bne.n	8004d6a <osThreadNew+0xca>
          mem = 0;
 8004d60:	2300      	movs	r3, #0
 8004d62:	61bb      	str	r3, [r7, #24]
 8004d64:	e001      	b.n	8004d6a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004d66:	2300      	movs	r3, #0
 8004d68:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d110      	bne.n	8004d92 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d78:	9202      	str	r2, [sp, #8]
 8004d7a:	9301      	str	r3, [sp, #4]
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	6a3a      	ldr	r2, [r7, #32]
 8004d84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 ff28 	bl	8005bdc <xTaskCreateStatic>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	613b      	str	r3, [r7, #16]
 8004d90:	e013      	b.n	8004dba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d110      	bne.n	8004dba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	f107 0310 	add.w	r3, r7, #16
 8004da0:	9301      	str	r3, [sp, #4]
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 ff76 	bl	8005c9c <xTaskCreate>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d001      	beq.n	8004dba <osThreadNew+0x11a>
            hTask = NULL;
 8004db6:	2300      	movs	r3, #0
 8004db8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004dba:	693b      	ldr	r3, [r7, #16]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3728      	adds	r7, #40	@ 0x28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dcc:	f3ef 8305 	mrs	r3, IPSR
 8004dd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <osDelay+0x1c>
    stat = osErrorISR;
 8004dd8:	f06f 0305 	mvn.w	r3, #5
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	e007      	b.n	8004df0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f001 f8b4 	bl	8005f58 <vTaskDelay>
    }
  }

  return (stat);
 8004df0:	68fb      	ldr	r3, [r7, #12]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b088      	sub	sp, #32
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e06:	f3ef 8305 	mrs	r3, IPSR
 8004e0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e0c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d174      	bne.n	8004efc <osMutexNew+0x102>
    if (attr != NULL) {
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	61bb      	str	r3, [r7, #24]
 8004e1e:	e001      	b.n	8004e24 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d002      	beq.n	8004e34 <osMutexNew+0x3a>
      rmtx = 1U;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e001      	b.n	8004e38 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d15c      	bne.n	8004efc <osMutexNew+0x102>
      mem = -1;
 8004e42:	f04f 33ff 	mov.w	r3, #4294967295
 8004e46:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d015      	beq.n	8004e7a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d006      	beq.n	8004e64 <osMutexNew+0x6a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	2b4f      	cmp	r3, #79	@ 0x4f
 8004e5c:	d902      	bls.n	8004e64 <osMutexNew+0x6a>
          mem = 1;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	613b      	str	r3, [r7, #16]
 8004e62:	e00c      	b.n	8004e7e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d108      	bne.n	8004e7e <osMutexNew+0x84>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d104      	bne.n	8004e7e <osMutexNew+0x84>
            mem = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	e001      	b.n	8004e7e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d112      	bne.n	8004eaa <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d007      	beq.n	8004e9a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	4619      	mov	r1, r3
 8004e90:	2004      	movs	r0, #4
 8004e92:	f000 fa98 	bl	80053c6 <xQueueCreateMutexStatic>
 8004e96:	61f8      	str	r0, [r7, #28]
 8004e98:	e016      	b.n	8004ec8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	2001      	movs	r0, #1
 8004ea2:	f000 fa90 	bl	80053c6 <xQueueCreateMutexStatic>
 8004ea6:	61f8      	str	r0, [r7, #28]
 8004ea8:	e00e      	b.n	8004ec8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10b      	bne.n	8004ec8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d004      	beq.n	8004ec0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004eb6:	2004      	movs	r0, #4
 8004eb8:	f000 fa6d 	bl	8005396 <xQueueCreateMutex>
 8004ebc:	61f8      	str	r0, [r7, #28]
 8004ebe:	e003      	b.n	8004ec8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004ec0:	2001      	movs	r0, #1
 8004ec2:	f000 fa68 	bl	8005396 <xQueueCreateMutex>
 8004ec6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00c      	beq.n	8004ee8 <osMutexNew+0xee>
        if (attr != NULL) {
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <osMutexNew+0xe2>
          name = attr->name;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	e001      	b.n	8004ee0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004edc:	2300      	movs	r3, #0
 8004ede:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004ee0:	68f9      	ldr	r1, [r7, #12]
 8004ee2:	69f8      	ldr	r0, [r7, #28]
 8004ee4:	f000 fe1c 	bl	8005b20 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d006      	beq.n	8004efc <osMutexNew+0x102>
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004efc:	69fb      	ldr	r3, [r7, #28]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3720      	adds	r7, #32
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4a07      	ldr	r2, [pc, #28]	@ (8004f34 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	4a06      	ldr	r2, [pc, #24]	@ (8004f38 <vApplicationGetIdleTaskMemory+0x30>)
 8004f1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2280      	movs	r2, #128	@ 0x80
 8004f24:	601a      	str	r2, [r3, #0]
}
 8004f26:	bf00      	nop
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	200005e4 	.word	0x200005e4
 8004f38:	2000068c 	.word	0x2000068c

08004f3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4a07      	ldr	r2, [pc, #28]	@ (8004f68 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	4a06      	ldr	r2, [pc, #24]	@ (8004f6c <vApplicationGetTimerTaskMemory+0x30>)
 8004f52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f5a:	601a      	str	r2, [r3, #0]
}
 8004f5c:	bf00      	nop
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	2000088c 	.word	0x2000088c
 8004f6c:	20000934 	.word	0x20000934

08004f70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f103 0208 	add.w	r2, r3, #8
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f04f 32ff 	mov.w	r2, #4294967295
 8004f88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f103 0208 	add.w	r2, r3, #8
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f103 0208 	add.w	r2, r3, #8
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b085      	sub	sp, #20
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	601a      	str	r2, [r3, #0]
}
 8005006:	bf00      	nop
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005012:	b480      	push	{r7}
 8005014:	b085      	sub	sp, #20
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005028:	d103      	bne.n	8005032 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	e00c      	b.n	800504c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	3308      	adds	r3, #8
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	e002      	b.n	8005040 <vListInsert+0x2e>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	429a      	cmp	r2, r3
 800504a:	d2f6      	bcs.n	800503a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	601a      	str	r2, [r3, #0]
}
 8005078:	bf00      	nop
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6892      	ldr	r2, [r2, #8]
 800509a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6852      	ldr	r2, [r2, #4]
 80050a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d103      	bne.n	80050b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	1e5a      	subs	r2, r3, #1
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10b      	bne.n	8005104 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80050fe:	bf00      	nop
 8005100:	bf00      	nop
 8005102:	e7fd      	b.n	8005100 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005104:	f002 f9c8 	bl	8007498 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005110:	68f9      	ldr	r1, [r7, #12]
 8005112:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005114:	fb01 f303 	mul.w	r3, r1, r3
 8005118:	441a      	add	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005134:	3b01      	subs	r3, #1
 8005136:	68f9      	ldr	r1, [r7, #12]
 8005138:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800513a:	fb01 f303 	mul.w	r3, r1, r3
 800513e:	441a      	add	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	22ff      	movs	r2, #255	@ 0xff
 8005148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	22ff      	movs	r2, #255	@ 0xff
 8005150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d114      	bne.n	8005184 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d01a      	beq.n	8005198 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	3310      	adds	r3, #16
 8005166:	4618      	mov	r0, r3
 8005168:	f001 f9ca 	bl	8006500 <xTaskRemoveFromEventList>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d012      	beq.n	8005198 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005172:	4b0d      	ldr	r3, [pc, #52]	@ (80051a8 <xQueueGenericReset+0xd0>)
 8005174:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	e009      	b.n	8005198 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	3310      	adds	r3, #16
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff fef1 	bl	8004f70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3324      	adds	r3, #36	@ 0x24
 8005192:	4618      	mov	r0, r3
 8005194:	f7ff feec 	bl	8004f70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005198:	f002 f9b0 	bl	80074fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800519c:	2301      	movs	r3, #1
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	e000ed04 	.word	0xe000ed04

080051ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08e      	sub	sp, #56	@ 0x38
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10b      	bne.n	80051d8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051d2:	bf00      	nop
 80051d4:	bf00      	nop
 80051d6:	e7fd      	b.n	80051d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10b      	bne.n	80051f6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051f0:	bf00      	nop
 80051f2:	bf00      	nop
 80051f4:	e7fd      	b.n	80051f2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d002      	beq.n	8005202 <xQueueGenericCreateStatic+0x56>
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <xQueueGenericCreateStatic+0x5a>
 8005202:	2301      	movs	r3, #1
 8005204:	e000      	b.n	8005208 <xQueueGenericCreateStatic+0x5c>
 8005206:	2300      	movs	r3, #0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10b      	bne.n	8005224 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800520c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	623b      	str	r3, [r7, #32]
}
 800521e:	bf00      	nop
 8005220:	bf00      	nop
 8005222:	e7fd      	b.n	8005220 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d102      	bne.n	8005230 <xQueueGenericCreateStatic+0x84>
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <xQueueGenericCreateStatic+0x88>
 8005230:	2301      	movs	r3, #1
 8005232:	e000      	b.n	8005236 <xQueueGenericCreateStatic+0x8a>
 8005234:	2300      	movs	r3, #0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10b      	bne.n	8005252 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	61fb      	str	r3, [r7, #28]
}
 800524c:	bf00      	nop
 800524e:	bf00      	nop
 8005250:	e7fd      	b.n	800524e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005252:	2350      	movs	r3, #80	@ 0x50
 8005254:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b50      	cmp	r3, #80	@ 0x50
 800525a:	d00b      	beq.n	8005274 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800525c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	61bb      	str	r3, [r7, #24]
}
 800526e:	bf00      	nop
 8005270:	bf00      	nop
 8005272:	e7fd      	b.n	8005270 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005274:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800527a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00d      	beq.n	800529c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005288:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800528c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	4613      	mov	r3, r2
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	68b9      	ldr	r1, [r7, #8]
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 f840 	bl	800531c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800529c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800529e:	4618      	mov	r0, r3
 80052a0:	3730      	adds	r7, #48	@ 0x30
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b08a      	sub	sp, #40	@ 0x28
 80052aa:	af02      	add	r7, sp, #8
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	4613      	mov	r3, r2
 80052b2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10b      	bne.n	80052d2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80052ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	613b      	str	r3, [r7, #16]
}
 80052cc:	bf00      	nop
 80052ce:	bf00      	nop
 80052d0:	e7fd      	b.n	80052ce <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	fb02 f303 	mul.w	r3, r2, r3
 80052da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	3350      	adds	r3, #80	@ 0x50
 80052e0:	4618      	mov	r0, r3
 80052e2:	f002 f9fb 	bl	80076dc <pvPortMalloc>
 80052e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d011      	beq.n	8005312 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	3350      	adds	r3, #80	@ 0x50
 80052f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005300:	79fa      	ldrb	r2, [r7, #7]
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	4613      	mov	r3, r2
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	68b9      	ldr	r1, [r7, #8]
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f805 	bl	800531c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005312:	69bb      	ldr	r3, [r7, #24]
	}
 8005314:	4618      	mov	r0, r3
 8005316:	3720      	adds	r7, #32
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d103      	bne.n	8005338 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	e002      	b.n	800533e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800534a:	2101      	movs	r1, #1
 800534c:	69b8      	ldr	r0, [r7, #24]
 800534e:	f7ff fec3 	bl	80050d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	78fa      	ldrb	r2, [r7, #3]
 8005356:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800535a:	bf00      	nop
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005362:	b580      	push	{r7, lr}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00e      	beq.n	800538e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005382:	2300      	movs	r3, #0
 8005384:	2200      	movs	r2, #0
 8005386:	2100      	movs	r1, #0
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f837 	bl	80053fc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800538e:	bf00      	nop
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005396:	b580      	push	{r7, lr}
 8005398:	b086      	sub	sp, #24
 800539a:	af00      	add	r7, sp, #0
 800539c:	4603      	mov	r3, r0
 800539e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80053a0:	2301      	movs	r3, #1
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	2300      	movs	r3, #0
 80053a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80053a8:	79fb      	ldrb	r3, [r7, #7]
 80053aa:	461a      	mov	r2, r3
 80053ac:	6939      	ldr	r1, [r7, #16]
 80053ae:	6978      	ldr	r0, [r7, #20]
 80053b0:	f7ff ff79 	bl	80052a6 <xQueueGenericCreate>
 80053b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f7ff ffd3 	bl	8005362 <prvInitialiseMutex>

		return xNewQueue;
 80053bc:	68fb      	ldr	r3, [r7, #12]
	}
 80053be:	4618      	mov	r0, r3
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b088      	sub	sp, #32
 80053ca:	af02      	add	r7, sp, #8
 80053cc:	4603      	mov	r3, r0
 80053ce:	6039      	str	r1, [r7, #0]
 80053d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80053d2:	2301      	movs	r3, #1
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	2300      	movs	r3, #0
 80053d8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80053da:	79fb      	ldrb	r3, [r7, #7]
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2200      	movs	r2, #0
 80053e2:	6939      	ldr	r1, [r7, #16]
 80053e4:	6978      	ldr	r0, [r7, #20]
 80053e6:	f7ff fee1 	bl	80051ac <xQueueGenericCreateStatic>
 80053ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f7ff ffb8 	bl	8005362 <prvInitialiseMutex>

		return xNewQueue;
 80053f2:	68fb      	ldr	r3, [r7, #12]
	}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08e      	sub	sp, #56	@ 0x38
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
 8005408:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800540a:	2300      	movs	r3, #0
 800540c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10b      	bne.n	8005430 <xQueueGenericSend+0x34>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800542a:	bf00      	nop
 800542c:	bf00      	nop
 800542e:	e7fd      	b.n	800542c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d103      	bne.n	800543e <xQueueGenericSend+0x42>
 8005436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <xQueueGenericSend+0x46>
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <xQueueGenericSend+0x48>
 8005442:	2300      	movs	r3, #0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10b      	bne.n	8005460 <xQueueGenericSend+0x64>
	__asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800545a:	bf00      	nop
 800545c:	bf00      	nop
 800545e:	e7fd      	b.n	800545c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	2b02      	cmp	r3, #2
 8005464:	d103      	bne.n	800546e <xQueueGenericSend+0x72>
 8005466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800546a:	2b01      	cmp	r3, #1
 800546c:	d101      	bne.n	8005472 <xQueueGenericSend+0x76>
 800546e:	2301      	movs	r3, #1
 8005470:	e000      	b.n	8005474 <xQueueGenericSend+0x78>
 8005472:	2300      	movs	r3, #0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10b      	bne.n	8005490 <xQueueGenericSend+0x94>
	__asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	623b      	str	r3, [r7, #32]
}
 800548a:	bf00      	nop
 800548c:	bf00      	nop
 800548e:	e7fd      	b.n	800548c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005490:	f001 f9fc 	bl	800688c <xTaskGetSchedulerState>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d102      	bne.n	80054a0 <xQueueGenericSend+0xa4>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <xQueueGenericSend+0xa8>
 80054a0:	2301      	movs	r3, #1
 80054a2:	e000      	b.n	80054a6 <xQueueGenericSend+0xaa>
 80054a4:	2300      	movs	r3, #0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10b      	bne.n	80054c2 <xQueueGenericSend+0xc6>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	61fb      	str	r3, [r7, #28]
}
 80054bc:	bf00      	nop
 80054be:	bf00      	nop
 80054c0:	e7fd      	b.n	80054be <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054c2:	f001 ffe9 	bl	8007498 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d302      	bcc.n	80054d8 <xQueueGenericSend+0xdc>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d129      	bne.n	800552c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	68b9      	ldr	r1, [r7, #8]
 80054dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054de:	f000 fa0f 	bl	8005900 <prvCopyDataToQueue>
 80054e2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d010      	beq.n	800550e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ee:	3324      	adds	r3, #36	@ 0x24
 80054f0:	4618      	mov	r0, r3
 80054f2:	f001 f805 	bl	8006500 <xTaskRemoveFromEventList>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d013      	beq.n	8005524 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054fc:	4b3f      	ldr	r3, [pc, #252]	@ (80055fc <xQueueGenericSend+0x200>)
 80054fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	e00a      	b.n	8005524 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800550e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d007      	beq.n	8005524 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005514:	4b39      	ldr	r3, [pc, #228]	@ (80055fc <xQueueGenericSend+0x200>)
 8005516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005524:	f001 ffea 	bl	80074fc <vPortExitCritical>
				return pdPASS;
 8005528:	2301      	movs	r3, #1
 800552a:	e063      	b.n	80055f4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d103      	bne.n	800553a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005532:	f001 ffe3 	bl	80074fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005536:	2300      	movs	r3, #0
 8005538:	e05c      	b.n	80055f4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800553a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800553c:	2b00      	cmp	r3, #0
 800553e:	d106      	bne.n	800554e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005540:	f107 0314 	add.w	r3, r7, #20
 8005544:	4618      	mov	r0, r3
 8005546:	f001 f83f 	bl	80065c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800554a:	2301      	movs	r3, #1
 800554c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800554e:	f001 ffd5 	bl	80074fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005552:	f000 fda7 	bl	80060a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005556:	f001 ff9f 	bl	8007498 <vPortEnterCritical>
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005560:	b25b      	sxtb	r3, r3
 8005562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005566:	d103      	bne.n	8005570 <xQueueGenericSend+0x174>
 8005568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005572:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005576:	b25b      	sxtb	r3, r3
 8005578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557c:	d103      	bne.n	8005586 <xQueueGenericSend+0x18a>
 800557e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005586:	f001 ffb9 	bl	80074fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800558a:	1d3a      	adds	r2, r7, #4
 800558c:	f107 0314 	add.w	r3, r7, #20
 8005590:	4611      	mov	r1, r2
 8005592:	4618      	mov	r0, r3
 8005594:	f001 f82e 	bl	80065f4 <xTaskCheckForTimeOut>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d124      	bne.n	80055e8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800559e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055a0:	f000 faa6 	bl	8005af0 <prvIsQueueFull>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d018      	beq.n	80055dc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80055aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ac:	3310      	adds	r3, #16
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	4611      	mov	r1, r2
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 ff52 	bl	800645c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055ba:	f000 fa31 	bl	8005a20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80055be:	f000 fd7f 	bl	80060c0 <xTaskResumeAll>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f47f af7c 	bne.w	80054c2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80055ca:	4b0c      	ldr	r3, [pc, #48]	@ (80055fc <xQueueGenericSend+0x200>)
 80055cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	e772      	b.n	80054c2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80055dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055de:	f000 fa1f 	bl	8005a20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055e2:	f000 fd6d 	bl	80060c0 <xTaskResumeAll>
 80055e6:	e76c      	b.n	80054c2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80055e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055ea:	f000 fa19 	bl	8005a20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055ee:	f000 fd67 	bl	80060c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80055f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3738      	adds	r7, #56	@ 0x38
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	e000ed04 	.word	0xe000ed04

08005600 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b090      	sub	sp, #64	@ 0x40
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
 800560c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10b      	bne.n	8005630 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800562a:	bf00      	nop
 800562c:	bf00      	nop
 800562e:	e7fd      	b.n	800562c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d103      	bne.n	800563e <xQueueGenericSendFromISR+0x3e>
 8005636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <xQueueGenericSendFromISR+0x42>
 800563e:	2301      	movs	r3, #1
 8005640:	e000      	b.n	8005644 <xQueueGenericSendFromISR+0x44>
 8005642:	2300      	movs	r3, #0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10b      	bne.n	8005660 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800565a:	bf00      	nop
 800565c:	bf00      	nop
 800565e:	e7fd      	b.n	800565c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d103      	bne.n	800566e <xQueueGenericSendFromISR+0x6e>
 8005666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800566a:	2b01      	cmp	r3, #1
 800566c:	d101      	bne.n	8005672 <xQueueGenericSendFromISR+0x72>
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <xQueueGenericSendFromISR+0x74>
 8005672:	2300      	movs	r3, #0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10b      	bne.n	8005690 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567c:	f383 8811 	msr	BASEPRI, r3
 8005680:	f3bf 8f6f 	isb	sy
 8005684:	f3bf 8f4f 	dsb	sy
 8005688:	623b      	str	r3, [r7, #32]
}
 800568a:	bf00      	nop
 800568c:	bf00      	nop
 800568e:	e7fd      	b.n	800568c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005690:	f001 ffe2 	bl	8007658 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005694:	f3ef 8211 	mrs	r2, BASEPRI
 8005698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	61fa      	str	r2, [r7, #28]
 80056aa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80056ac:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056ae:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d302      	bcc.n	80056c2 <xQueueGenericSendFromISR+0xc2>
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d12f      	bne.n	8005722 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	68b9      	ldr	r1, [r7, #8]
 80056d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80056d8:	f000 f912 	bl	8005900 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056dc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80056e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e4:	d112      	bne.n	800570c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d016      	beq.n	800571c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f0:	3324      	adds	r3, #36	@ 0x24
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 ff04 	bl	8006500 <xTaskRemoveFromEventList>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00e      	beq.n	800571c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00b      	beq.n	800571c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	e007      	b.n	800571c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800570c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005710:	3301      	adds	r3, #1
 8005712:	b2db      	uxtb	r3, r3
 8005714:	b25a      	sxtb	r2, r3
 8005716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005718:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800571c:	2301      	movs	r3, #1
 800571e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005720:	e001      	b.n	8005726 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005722:	2300      	movs	r3, #0
 8005724:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005728:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005730:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005734:	4618      	mov	r0, r3
 8005736:	3740      	adds	r7, #64	@ 0x40
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08c      	sub	sp, #48	@ 0x30
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005748:	2300      	movs	r3, #0
 800574a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10b      	bne.n	800576e <xQueueReceive+0x32>
	__asm volatile
 8005756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	623b      	str	r3, [r7, #32]
}
 8005768:	bf00      	nop
 800576a:	bf00      	nop
 800576c:	e7fd      	b.n	800576a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d103      	bne.n	800577c <xQueueReceive+0x40>
 8005774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <xQueueReceive+0x44>
 800577c:	2301      	movs	r3, #1
 800577e:	e000      	b.n	8005782 <xQueueReceive+0x46>
 8005780:	2300      	movs	r3, #0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10b      	bne.n	800579e <xQueueReceive+0x62>
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	61fb      	str	r3, [r7, #28]
}
 8005798:	bf00      	nop
 800579a:	bf00      	nop
 800579c:	e7fd      	b.n	800579a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800579e:	f001 f875 	bl	800688c <xTaskGetSchedulerState>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d102      	bne.n	80057ae <xQueueReceive+0x72>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <xQueueReceive+0x76>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e000      	b.n	80057b4 <xQueueReceive+0x78>
 80057b2:	2300      	movs	r3, #0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10b      	bne.n	80057d0 <xQueueReceive+0x94>
	__asm volatile
 80057b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057bc:	f383 8811 	msr	BASEPRI, r3
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	61bb      	str	r3, [r7, #24]
}
 80057ca:	bf00      	nop
 80057cc:	bf00      	nop
 80057ce:	e7fd      	b.n	80057cc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057d0:	f001 fe62 	bl	8007498 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d01f      	beq.n	8005820 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057e0:	68b9      	ldr	r1, [r7, #8]
 80057e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057e4:	f000 f8f6 	bl	80059d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ea:	1e5a      	subs	r2, r3, #1
 80057ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00f      	beq.n	8005818 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fa:	3310      	adds	r3, #16
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 fe7f 	bl	8006500 <xTaskRemoveFromEventList>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d007      	beq.n	8005818 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005808:	4b3c      	ldr	r3, [pc, #240]	@ (80058fc <xQueueReceive+0x1c0>)
 800580a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005818:	f001 fe70 	bl	80074fc <vPortExitCritical>
				return pdPASS;
 800581c:	2301      	movs	r3, #1
 800581e:	e069      	b.n	80058f4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d103      	bne.n	800582e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005826:	f001 fe69 	bl	80074fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800582a:	2300      	movs	r3, #0
 800582c:	e062      	b.n	80058f4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800582e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d106      	bne.n	8005842 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005834:	f107 0310 	add.w	r3, r7, #16
 8005838:	4618      	mov	r0, r3
 800583a:	f000 fec5 	bl	80065c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800583e:	2301      	movs	r3, #1
 8005840:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005842:	f001 fe5b 	bl	80074fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005846:	f000 fc2d 	bl	80060a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800584a:	f001 fe25 	bl	8007498 <vPortEnterCritical>
 800584e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005850:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005854:	b25b      	sxtb	r3, r3
 8005856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585a:	d103      	bne.n	8005864 <xQueueReceive+0x128>
 800585c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585e:	2200      	movs	r2, #0
 8005860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005866:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800586a:	b25b      	sxtb	r3, r3
 800586c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005870:	d103      	bne.n	800587a <xQueueReceive+0x13e>
 8005872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800587a:	f001 fe3f 	bl	80074fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800587e:	1d3a      	adds	r2, r7, #4
 8005880:	f107 0310 	add.w	r3, r7, #16
 8005884:	4611      	mov	r1, r2
 8005886:	4618      	mov	r0, r3
 8005888:	f000 feb4 	bl	80065f4 <xTaskCheckForTimeOut>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d123      	bne.n	80058da <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005892:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005894:	f000 f916 	bl	8005ac4 <prvIsQueueEmpty>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d017      	beq.n	80058ce <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800589e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a0:	3324      	adds	r3, #36	@ 0x24
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	4611      	mov	r1, r2
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fdd8 	bl	800645c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80058ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058ae:	f000 f8b7 	bl	8005a20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058b2:	f000 fc05 	bl	80060c0 <xTaskResumeAll>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d189      	bne.n	80057d0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80058bc:	4b0f      	ldr	r3, [pc, #60]	@ (80058fc <xQueueReceive+0x1c0>)
 80058be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	e780      	b.n	80057d0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80058ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058d0:	f000 f8a6 	bl	8005a20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058d4:	f000 fbf4 	bl	80060c0 <xTaskResumeAll>
 80058d8:	e77a      	b.n	80057d0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80058da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058dc:	f000 f8a0 	bl	8005a20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058e0:	f000 fbee 	bl	80060c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058e6:	f000 f8ed 	bl	8005ac4 <prvIsQueueEmpty>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f43f af6f 	beq.w	80057d0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3730      	adds	r7, #48	@ 0x30
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	e000ed04 	.word	0xe000ed04

08005900 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800590c:	2300      	movs	r3, #0
 800590e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005914:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10d      	bne.n	800593a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d14d      	bne.n	80059c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	4618      	mov	r0, r3
 800592c:	f000 ffcc 	bl	80068c8 <xTaskPriorityDisinherit>
 8005930:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	609a      	str	r2, [r3, #8]
 8005938:	e043      	b.n	80059c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d119      	bne.n	8005974 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6858      	ldr	r0, [r3, #4]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005948:	461a      	mov	r2, r3
 800594a:	68b9      	ldr	r1, [r7, #8]
 800594c:	f002 fef9 	bl	8008742 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005958:	441a      	add	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	429a      	cmp	r2, r3
 8005968:	d32b      	bcc.n	80059c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	605a      	str	r2, [r3, #4]
 8005972:	e026      	b.n	80059c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	68d8      	ldr	r0, [r3, #12]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597c:	461a      	mov	r2, r3
 800597e:	68b9      	ldr	r1, [r7, #8]
 8005980:	f002 fedf 	bl	8008742 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598c:	425b      	negs	r3, r3
 800598e:	441a      	add	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	429a      	cmp	r2, r3
 800599e:	d207      	bcs.n	80059b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a8:	425b      	negs	r3, r3
 80059aa:	441a      	add	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d105      	bne.n	80059c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	3b01      	subs	r3, #1
 80059c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80059ca:	697b      	ldr	r3, [r7, #20]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3718      	adds	r7, #24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d018      	beq.n	8005a18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ee:	441a      	add	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d303      	bcc.n	8005a08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68d9      	ldr	r1, [r3, #12]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a10:	461a      	mov	r2, r3
 8005a12:	6838      	ldr	r0, [r7, #0]
 8005a14:	f002 fe95 	bl	8008742 <memcpy>
	}
}
 8005a18:	bf00      	nop
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a28:	f001 fd36 	bl	8007498 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a34:	e011      	b.n	8005a5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d012      	beq.n	8005a64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	3324      	adds	r3, #36	@ 0x24
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fd5c 	bl	8006500 <xTaskRemoveFromEventList>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a4e:	f000 fe35 	bl	80066bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	dce9      	bgt.n	8005a36 <prvUnlockQueue+0x16>
 8005a62:	e000      	b.n	8005a66 <prvUnlockQueue+0x46>
					break;
 8005a64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	22ff      	movs	r2, #255	@ 0xff
 8005a6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005a6e:	f001 fd45 	bl	80074fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a72:	f001 fd11 	bl	8007498 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a7e:	e011      	b.n	8005aa4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d012      	beq.n	8005aae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	3310      	adds	r3, #16
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 fd37 	bl	8006500 <xTaskRemoveFromEventList>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005a98:	f000 fe10 	bl	80066bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a9c:	7bbb      	ldrb	r3, [r7, #14]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005aa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	dce9      	bgt.n	8005a80 <prvUnlockQueue+0x60>
 8005aac:	e000      	b.n	8005ab0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005aae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	22ff      	movs	r2, #255	@ 0xff
 8005ab4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005ab8:	f001 fd20 	bl	80074fc <vPortExitCritical>
}
 8005abc:	bf00      	nop
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005acc:	f001 fce4 	bl	8007498 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d102      	bne.n	8005ade <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	e001      	b.n	8005ae2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ae2:	f001 fd0b 	bl	80074fc <vPortExitCritical>

	return xReturn;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005af8:	f001 fcce 	bl	8007498 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d102      	bne.n	8005b0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	e001      	b.n	8005b12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b12:	f001 fcf3 	bl	80074fc <vPortExitCritical>

	return xReturn;
 8005b16:	68fb      	ldr	r3, [r7, #12]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	e014      	b.n	8005b5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b30:	4a0f      	ldr	r2, [pc, #60]	@ (8005b70 <vQueueAddToRegistry+0x50>)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10b      	bne.n	8005b54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b3c:	490c      	ldr	r1, [pc, #48]	@ (8005b70 <vQueueAddToRegistry+0x50>)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b46:	4a0a      	ldr	r2, [pc, #40]	@ (8005b70 <vQueueAddToRegistry+0x50>)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	4413      	add	r3, r2
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b52:	e006      	b.n	8005b62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	3301      	adds	r3, #1
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2b07      	cmp	r3, #7
 8005b5e:	d9e7      	bls.n	8005b30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b60:	bf00      	nop
 8005b62:	bf00      	nop
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	20000d34 	.word	0x20000d34

08005b74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005b84:	f001 fc88 	bl	8007498 <vPortEnterCritical>
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b8e:	b25b      	sxtb	r3, r3
 8005b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b94:	d103      	bne.n	8005b9e <vQueueWaitForMessageRestricted+0x2a>
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ba4:	b25b      	sxtb	r3, r3
 8005ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005baa:	d103      	bne.n	8005bb4 <vQueueWaitForMessageRestricted+0x40>
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bb4:	f001 fca2 	bl	80074fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d106      	bne.n	8005bce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	3324      	adds	r3, #36	@ 0x24
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	68b9      	ldr	r1, [r7, #8]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f000 fc6d 	bl	80064a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005bce:	6978      	ldr	r0, [r7, #20]
 8005bd0:	f7ff ff26 	bl	8005a20 <prvUnlockQueue>
	}
 8005bd4:	bf00      	nop
 8005bd6:	3718      	adds	r7, #24
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08e      	sub	sp, #56	@ 0x38
 8005be0:	af04      	add	r7, sp, #16
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10b      	bne.n	8005c08 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	623b      	str	r3, [r7, #32]
}
 8005c02:	bf00      	nop
 8005c04:	bf00      	nop
 8005c06:	e7fd      	b.n	8005c04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10b      	bne.n	8005c26 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	61fb      	str	r3, [r7, #28]
}
 8005c20:	bf00      	nop
 8005c22:	bf00      	nop
 8005c24:	e7fd      	b.n	8005c22 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c26:	23a8      	movs	r3, #168	@ 0xa8
 8005c28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	2ba8      	cmp	r3, #168	@ 0xa8
 8005c2e:	d00b      	beq.n	8005c48 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	61bb      	str	r3, [r7, #24]
}
 8005c42:	bf00      	nop
 8005c44:	bf00      	nop
 8005c46:	e7fd      	b.n	8005c44 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005c48:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d01e      	beq.n	8005c8e <xTaskCreateStatic+0xb2>
 8005c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d01b      	beq.n	8005c8e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c58:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c5e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c68:	2300      	movs	r3, #0
 8005c6a:	9303      	str	r3, [sp, #12]
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6e:	9302      	str	r3, [sp, #8]
 8005c70:	f107 0314 	add.w	r3, r7, #20
 8005c74:	9301      	str	r3, [sp, #4]
 8005c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	68b9      	ldr	r1, [r7, #8]
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 f851 	bl	8005d28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c88:	f000 f8f6 	bl	8005e78 <prvAddNewTaskToReadyList>
 8005c8c:	e001      	b.n	8005c92 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005c92:	697b      	ldr	r3, [r7, #20]
	}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3728      	adds	r7, #40	@ 0x28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b08c      	sub	sp, #48	@ 0x30
 8005ca0:	af04      	add	r7, sp, #16
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	603b      	str	r3, [r7, #0]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005cac:	88fb      	ldrh	r3, [r7, #6]
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f001 fd13 	bl	80076dc <pvPortMalloc>
 8005cb6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00e      	beq.n	8005cdc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005cbe:	20a8      	movs	r0, #168	@ 0xa8
 8005cc0:	f001 fd0c 	bl	80076dc <pvPortMalloc>
 8005cc4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	631a      	str	r2, [r3, #48]	@ 0x30
 8005cd2:	e005      	b.n	8005ce0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005cd4:	6978      	ldr	r0, [r7, #20]
 8005cd6:	f001 fdcf 	bl	8007878 <vPortFree>
 8005cda:	e001      	b.n	8005ce0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d017      	beq.n	8005d16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005cee:	88fa      	ldrh	r2, [r7, #6]
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	9303      	str	r3, [sp, #12]
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	9302      	str	r3, [sp, #8]
 8005cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cfa:	9301      	str	r3, [sp, #4]
 8005cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	68b9      	ldr	r1, [r7, #8]
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 f80f 	bl	8005d28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d0a:	69f8      	ldr	r0, [r7, #28]
 8005d0c:	f000 f8b4 	bl	8005e78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d10:	2301      	movs	r3, #1
 8005d12:	61bb      	str	r3, [r7, #24]
 8005d14:	e002      	b.n	8005d1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d16:	f04f 33ff 	mov.w	r3, #4294967295
 8005d1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d1c:	69bb      	ldr	r3, [r7, #24]
	}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3720      	adds	r7, #32
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
	...

08005d28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d38:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	461a      	mov	r2, r3
 8005d40:	21a5      	movs	r1, #165	@ 0xa5
 8005d42:	f002 fc28 	bl	8008596 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d50:	3b01      	subs	r3, #1
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	f023 0307 	bic.w	r3, r3, #7
 8005d5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00b      	beq.n	8005d82 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d6e:	f383 8811 	msr	BASEPRI, r3
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	617b      	str	r3, [r7, #20]
}
 8005d7c:	bf00      	nop
 8005d7e:	bf00      	nop
 8005d80:	e7fd      	b.n	8005d7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01f      	beq.n	8005dc8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d88:	2300      	movs	r3, #0
 8005d8a:	61fb      	str	r3, [r7, #28]
 8005d8c:	e012      	b.n	8005db4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	4413      	add	r3, r2
 8005d94:	7819      	ldrb	r1, [r3, #0]
 8005d96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	3334      	adds	r3, #52	@ 0x34
 8005d9e:	460a      	mov	r2, r1
 8005da0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	4413      	add	r3, r2
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d006      	beq.n	8005dbc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	3301      	adds	r3, #1
 8005db2:	61fb      	str	r3, [r7, #28]
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	2b0f      	cmp	r3, #15
 8005db8:	d9e9      	bls.n	8005d8e <prvInitialiseNewTask+0x66>
 8005dba:	e000      	b.n	8005dbe <prvInitialiseNewTask+0x96>
			{
				break;
 8005dbc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005dc6:	e003      	b.n	8005dd0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd2:	2b37      	cmp	r3, #55	@ 0x37
 8005dd4:	d901      	bls.n	8005dda <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005dd6:	2337      	movs	r3, #55	@ 0x37
 8005dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ddc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dde:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005de4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de8:	2200      	movs	r2, #0
 8005dea:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dee:	3304      	adds	r3, #4
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7ff f8dd 	bl	8004fb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df8:	3318      	adds	r3, #24
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7ff f8d8 	bl	8004fb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e04:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e08:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e14:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e28:	3354      	adds	r3, #84	@ 0x54
 8005e2a:	224c      	movs	r2, #76	@ 0x4c
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f002 fbb1 	bl	8008596 <memset>
 8005e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e36:	4a0d      	ldr	r2, [pc, #52]	@ (8005e6c <prvInitialiseNewTask+0x144>)
 8005e38:	659a      	str	r2, [r3, #88]	@ 0x58
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3c:	4a0c      	ldr	r2, [pc, #48]	@ (8005e70 <prvInitialiseNewTask+0x148>)
 8005e3e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e42:	4a0c      	ldr	r2, [pc, #48]	@ (8005e74 <prvInitialiseNewTask+0x14c>)
 8005e44:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	68f9      	ldr	r1, [r7, #12]
 8005e4a:	69b8      	ldr	r0, [r7, #24]
 8005e4c:	f001 f9f0 	bl	8007230 <pxPortInitialiseStack>
 8005e50:	4602      	mov	r2, r0
 8005e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e54:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e62:	bf00      	nop
 8005e64:	3720      	adds	r7, #32
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20004fc8 	.word	0x20004fc8
 8005e70:	20005030 	.word	0x20005030
 8005e74:	20005098 	.word	0x20005098

08005e78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e80:	f001 fb0a 	bl	8007498 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e84:	4b2d      	ldr	r3, [pc, #180]	@ (8005f3c <prvAddNewTaskToReadyList+0xc4>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	4a2c      	ldr	r2, [pc, #176]	@ (8005f3c <prvAddNewTaskToReadyList+0xc4>)
 8005e8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8005f40 <prvAddNewTaskToReadyList+0xc8>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d109      	bne.n	8005eaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e96:	4a2a      	ldr	r2, [pc, #168]	@ (8005f40 <prvAddNewTaskToReadyList+0xc8>)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e9c:	4b27      	ldr	r3, [pc, #156]	@ (8005f3c <prvAddNewTaskToReadyList+0xc4>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d110      	bne.n	8005ec6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ea4:	f000 fc2e 	bl	8006704 <prvInitialiseTaskLists>
 8005ea8:	e00d      	b.n	8005ec6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005eaa:	4b26      	ldr	r3, [pc, #152]	@ (8005f44 <prvAddNewTaskToReadyList+0xcc>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d109      	bne.n	8005ec6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005eb2:	4b23      	ldr	r3, [pc, #140]	@ (8005f40 <prvAddNewTaskToReadyList+0xc8>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d802      	bhi.n	8005ec6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8005f40 <prvAddNewTaskToReadyList+0xc8>)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ec6:	4b20      	ldr	r3, [pc, #128]	@ (8005f48 <prvAddNewTaskToReadyList+0xd0>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	4a1e      	ldr	r2, [pc, #120]	@ (8005f48 <prvAddNewTaskToReadyList+0xd0>)
 8005ece:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8005f48 <prvAddNewTaskToReadyList+0xd0>)
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005edc:	4b1b      	ldr	r3, [pc, #108]	@ (8005f4c <prvAddNewTaskToReadyList+0xd4>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d903      	bls.n	8005eec <prvAddNewTaskToReadyList+0x74>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee8:	4a18      	ldr	r2, [pc, #96]	@ (8005f4c <prvAddNewTaskToReadyList+0xd4>)
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4a15      	ldr	r2, [pc, #84]	@ (8005f50 <prvAddNewTaskToReadyList+0xd8>)
 8005efa:	441a      	add	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3304      	adds	r3, #4
 8005f00:	4619      	mov	r1, r3
 8005f02:	4610      	mov	r0, r2
 8005f04:	f7ff f861 	bl	8004fca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f08:	f001 faf8 	bl	80074fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f44 <prvAddNewTaskToReadyList+0xcc>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00e      	beq.n	8005f32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f14:	4b0a      	ldr	r3, [pc, #40]	@ (8005f40 <prvAddNewTaskToReadyList+0xc8>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d207      	bcs.n	8005f32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f22:	4b0c      	ldr	r3, [pc, #48]	@ (8005f54 <prvAddNewTaskToReadyList+0xdc>)
 8005f24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f32:	bf00      	nop
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20001248 	.word	0x20001248
 8005f40:	20000d74 	.word	0x20000d74
 8005f44:	20001254 	.word	0x20001254
 8005f48:	20001264 	.word	0x20001264
 8005f4c:	20001250 	.word	0x20001250
 8005f50:	20000d78 	.word	0x20000d78
 8005f54:	e000ed04 	.word	0xe000ed04

08005f58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d018      	beq.n	8005f9c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005f6a:	4b14      	ldr	r3, [pc, #80]	@ (8005fbc <vTaskDelay+0x64>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00b      	beq.n	8005f8a <vTaskDelay+0x32>
	__asm volatile
 8005f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	60bb      	str	r3, [r7, #8]
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop
 8005f88:	e7fd      	b.n	8005f86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005f8a:	f000 f88b 	bl	80060a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f8e:	2100      	movs	r1, #0
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fd9f 	bl	8006ad4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f96:	f000 f893 	bl	80060c0 <xTaskResumeAll>
 8005f9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d107      	bne.n	8005fb2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005fa2:	4b07      	ldr	r3, [pc, #28]	@ (8005fc0 <vTaskDelay+0x68>)
 8005fa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fb2:	bf00      	nop
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	20001270 	.word	0x20001270
 8005fc0:	e000ed04 	.word	0xe000ed04

08005fc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08a      	sub	sp, #40	@ 0x28
 8005fc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005fd2:	463a      	mov	r2, r7
 8005fd4:	1d39      	adds	r1, r7, #4
 8005fd6:	f107 0308 	add.w	r3, r7, #8
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fe ff94 	bl	8004f08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005fe0:	6839      	ldr	r1, [r7, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	9202      	str	r2, [sp, #8]
 8005fe8:	9301      	str	r3, [sp, #4]
 8005fea:	2300      	movs	r3, #0
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	460a      	mov	r2, r1
 8005ff2:	4924      	ldr	r1, [pc, #144]	@ (8006084 <vTaskStartScheduler+0xc0>)
 8005ff4:	4824      	ldr	r0, [pc, #144]	@ (8006088 <vTaskStartScheduler+0xc4>)
 8005ff6:	f7ff fdf1 	bl	8005bdc <xTaskCreateStatic>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	4a23      	ldr	r2, [pc, #140]	@ (800608c <vTaskStartScheduler+0xc8>)
 8005ffe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006000:	4b22      	ldr	r3, [pc, #136]	@ (800608c <vTaskStartScheduler+0xc8>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006008:	2301      	movs	r3, #1
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	e001      	b.n	8006012 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800600e:	2300      	movs	r3, #0
 8006010:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d102      	bne.n	800601e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006018:	f000 fdb0 	bl	8006b7c <xTimerCreateTimerTask>
 800601c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d11b      	bne.n	800605c <vTaskStartScheduler+0x98>
	__asm volatile
 8006024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006028:	f383 8811 	msr	BASEPRI, r3
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	613b      	str	r3, [r7, #16]
}
 8006036:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006038:	4b15      	ldr	r3, [pc, #84]	@ (8006090 <vTaskStartScheduler+0xcc>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3354      	adds	r3, #84	@ 0x54
 800603e:	4a15      	ldr	r2, [pc, #84]	@ (8006094 <vTaskStartScheduler+0xd0>)
 8006040:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006042:	4b15      	ldr	r3, [pc, #84]	@ (8006098 <vTaskStartScheduler+0xd4>)
 8006044:	f04f 32ff 	mov.w	r2, #4294967295
 8006048:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800604a:	4b14      	ldr	r3, [pc, #80]	@ (800609c <vTaskStartScheduler+0xd8>)
 800604c:	2201      	movs	r2, #1
 800604e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006050:	4b13      	ldr	r3, [pc, #76]	@ (80060a0 <vTaskStartScheduler+0xdc>)
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006056:	f001 f97b 	bl	8007350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800605a:	e00f      	b.n	800607c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006062:	d10b      	bne.n	800607c <vTaskStartScheduler+0xb8>
	__asm volatile
 8006064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006068:	f383 8811 	msr	BASEPRI, r3
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	60fb      	str	r3, [r7, #12]
}
 8006076:	bf00      	nop
 8006078:	bf00      	nop
 800607a:	e7fd      	b.n	8006078 <vTaskStartScheduler+0xb4>
}
 800607c:	bf00      	nop
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	0800a4f0 	.word	0x0800a4f0
 8006088:	080066d5 	.word	0x080066d5
 800608c:	2000126c 	.word	0x2000126c
 8006090:	20000d74 	.word	0x20000d74
 8006094:	2000001c 	.word	0x2000001c
 8006098:	20001268 	.word	0x20001268
 800609c:	20001254 	.word	0x20001254
 80060a0:	2000124c 	.word	0x2000124c

080060a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80060a4:	b480      	push	{r7}
 80060a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80060a8:	4b04      	ldr	r3, [pc, #16]	@ (80060bc <vTaskSuspendAll+0x18>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3301      	adds	r3, #1
 80060ae:	4a03      	ldr	r2, [pc, #12]	@ (80060bc <vTaskSuspendAll+0x18>)
 80060b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80060b2:	bf00      	nop
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	20001270 	.word	0x20001270

080060c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80060c6:	2300      	movs	r3, #0
 80060c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80060ce:	4b42      	ldr	r3, [pc, #264]	@ (80061d8 <xTaskResumeAll+0x118>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10b      	bne.n	80060ee <xTaskResumeAll+0x2e>
	__asm volatile
 80060d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	603b      	str	r3, [r7, #0]
}
 80060e8:	bf00      	nop
 80060ea:	bf00      	nop
 80060ec:	e7fd      	b.n	80060ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060ee:	f001 f9d3 	bl	8007498 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060f2:	4b39      	ldr	r3, [pc, #228]	@ (80061d8 <xTaskResumeAll+0x118>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	4a37      	ldr	r2, [pc, #220]	@ (80061d8 <xTaskResumeAll+0x118>)
 80060fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060fc:	4b36      	ldr	r3, [pc, #216]	@ (80061d8 <xTaskResumeAll+0x118>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d162      	bne.n	80061ca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006104:	4b35      	ldr	r3, [pc, #212]	@ (80061dc <xTaskResumeAll+0x11c>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d05e      	beq.n	80061ca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800610c:	e02f      	b.n	800616e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800610e:	4b34      	ldr	r3, [pc, #208]	@ (80061e0 <xTaskResumeAll+0x120>)
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3318      	adds	r3, #24
 800611a:	4618      	mov	r0, r3
 800611c:	f7fe ffb2 	bl	8005084 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	3304      	adds	r3, #4
 8006124:	4618      	mov	r0, r3
 8006126:	f7fe ffad 	bl	8005084 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800612e:	4b2d      	ldr	r3, [pc, #180]	@ (80061e4 <xTaskResumeAll+0x124>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d903      	bls.n	800613e <xTaskResumeAll+0x7e>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613a:	4a2a      	ldr	r2, [pc, #168]	@ (80061e4 <xTaskResumeAll+0x124>)
 800613c:	6013      	str	r3, [r2, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006142:	4613      	mov	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4a27      	ldr	r2, [pc, #156]	@ (80061e8 <xTaskResumeAll+0x128>)
 800614c:	441a      	add	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3304      	adds	r3, #4
 8006152:	4619      	mov	r1, r3
 8006154:	4610      	mov	r0, r2
 8006156:	f7fe ff38 	bl	8004fca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800615e:	4b23      	ldr	r3, [pc, #140]	@ (80061ec <xTaskResumeAll+0x12c>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006164:	429a      	cmp	r2, r3
 8006166:	d302      	bcc.n	800616e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006168:	4b21      	ldr	r3, [pc, #132]	@ (80061f0 <xTaskResumeAll+0x130>)
 800616a:	2201      	movs	r2, #1
 800616c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800616e:	4b1c      	ldr	r3, [pc, #112]	@ (80061e0 <xTaskResumeAll+0x120>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1cb      	bne.n	800610e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800617c:	f000 fb66 	bl	800684c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006180:	4b1c      	ldr	r3, [pc, #112]	@ (80061f4 <xTaskResumeAll+0x134>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d010      	beq.n	80061ae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800618c:	f000 f846 	bl	800621c <xTaskIncrementTick>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d002      	beq.n	800619c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006196:	4b16      	ldr	r3, [pc, #88]	@ (80061f0 <xTaskResumeAll+0x130>)
 8006198:	2201      	movs	r2, #1
 800619a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	3b01      	subs	r3, #1
 80061a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1f1      	bne.n	800618c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80061a8:	4b12      	ldr	r3, [pc, #72]	@ (80061f4 <xTaskResumeAll+0x134>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80061ae:	4b10      	ldr	r3, [pc, #64]	@ (80061f0 <xTaskResumeAll+0x130>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d009      	beq.n	80061ca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80061b6:	2301      	movs	r3, #1
 80061b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80061ba:	4b0f      	ldr	r3, [pc, #60]	@ (80061f8 <xTaskResumeAll+0x138>)
 80061bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061ca:	f001 f997 	bl	80074fc <vPortExitCritical>

	return xAlreadyYielded;
 80061ce:	68bb      	ldr	r3, [r7, #8]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	20001270 	.word	0x20001270
 80061dc:	20001248 	.word	0x20001248
 80061e0:	20001208 	.word	0x20001208
 80061e4:	20001250 	.word	0x20001250
 80061e8:	20000d78 	.word	0x20000d78
 80061ec:	20000d74 	.word	0x20000d74
 80061f0:	2000125c 	.word	0x2000125c
 80061f4:	20001258 	.word	0x20001258
 80061f8:	e000ed04 	.word	0xe000ed04

080061fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006202:	4b05      	ldr	r3, [pc, #20]	@ (8006218 <xTaskGetTickCount+0x1c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006208:	687b      	ldr	r3, [r7, #4]
}
 800620a:	4618      	mov	r0, r3
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	2000124c 	.word	0x2000124c

0800621c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006222:	2300      	movs	r3, #0
 8006224:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006226:	4b4f      	ldr	r3, [pc, #316]	@ (8006364 <xTaskIncrementTick+0x148>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	f040 8090 	bne.w	8006350 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006230:	4b4d      	ldr	r3, [pc, #308]	@ (8006368 <xTaskIncrementTick+0x14c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3301      	adds	r3, #1
 8006236:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006238:	4a4b      	ldr	r2, [pc, #300]	@ (8006368 <xTaskIncrementTick+0x14c>)
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d121      	bne.n	8006288 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006244:	4b49      	ldr	r3, [pc, #292]	@ (800636c <xTaskIncrementTick+0x150>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00b      	beq.n	8006266 <xTaskIncrementTick+0x4a>
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	603b      	str	r3, [r7, #0]
}
 8006260:	bf00      	nop
 8006262:	bf00      	nop
 8006264:	e7fd      	b.n	8006262 <xTaskIncrementTick+0x46>
 8006266:	4b41      	ldr	r3, [pc, #260]	@ (800636c <xTaskIncrementTick+0x150>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	4b40      	ldr	r3, [pc, #256]	@ (8006370 <xTaskIncrementTick+0x154>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a3e      	ldr	r2, [pc, #248]	@ (800636c <xTaskIncrementTick+0x150>)
 8006272:	6013      	str	r3, [r2, #0]
 8006274:	4a3e      	ldr	r2, [pc, #248]	@ (8006370 <xTaskIncrementTick+0x154>)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	4b3e      	ldr	r3, [pc, #248]	@ (8006374 <xTaskIncrementTick+0x158>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	3301      	adds	r3, #1
 8006280:	4a3c      	ldr	r2, [pc, #240]	@ (8006374 <xTaskIncrementTick+0x158>)
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	f000 fae2 	bl	800684c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006288:	4b3b      	ldr	r3, [pc, #236]	@ (8006378 <xTaskIncrementTick+0x15c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	429a      	cmp	r2, r3
 8006290:	d349      	bcc.n	8006326 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006292:	4b36      	ldr	r3, [pc, #216]	@ (800636c <xTaskIncrementTick+0x150>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d104      	bne.n	80062a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800629c:	4b36      	ldr	r3, [pc, #216]	@ (8006378 <xTaskIncrementTick+0x15c>)
 800629e:	f04f 32ff 	mov.w	r2, #4294967295
 80062a2:	601a      	str	r2, [r3, #0]
					break;
 80062a4:	e03f      	b.n	8006326 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062a6:	4b31      	ldr	r3, [pc, #196]	@ (800636c <xTaskIncrementTick+0x150>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d203      	bcs.n	80062c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80062be:	4a2e      	ldr	r2, [pc, #184]	@ (8006378 <xTaskIncrementTick+0x15c>)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80062c4:	e02f      	b.n	8006326 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	3304      	adds	r3, #4
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fe feda 	bl	8005084 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d004      	beq.n	80062e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	3318      	adds	r3, #24
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fe fed1 	bl	8005084 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062e6:	4b25      	ldr	r3, [pc, #148]	@ (800637c <xTaskIncrementTick+0x160>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d903      	bls.n	80062f6 <xTaskIncrementTick+0xda>
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f2:	4a22      	ldr	r2, [pc, #136]	@ (800637c <xTaskIncrementTick+0x160>)
 80062f4:	6013      	str	r3, [r2, #0]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062fa:	4613      	mov	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4413      	add	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4a1f      	ldr	r2, [pc, #124]	@ (8006380 <xTaskIncrementTick+0x164>)
 8006304:	441a      	add	r2, r3
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	3304      	adds	r3, #4
 800630a:	4619      	mov	r1, r3
 800630c:	4610      	mov	r0, r2
 800630e:	f7fe fe5c 	bl	8004fca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006316:	4b1b      	ldr	r3, [pc, #108]	@ (8006384 <xTaskIncrementTick+0x168>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631c:	429a      	cmp	r2, r3
 800631e:	d3b8      	bcc.n	8006292 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006320:	2301      	movs	r3, #1
 8006322:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006324:	e7b5      	b.n	8006292 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006326:	4b17      	ldr	r3, [pc, #92]	@ (8006384 <xTaskIncrementTick+0x168>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800632c:	4914      	ldr	r1, [pc, #80]	@ (8006380 <xTaskIncrementTick+0x164>)
 800632e:	4613      	mov	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	440b      	add	r3, r1
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d901      	bls.n	8006342 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800633e:	2301      	movs	r3, #1
 8006340:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006342:	4b11      	ldr	r3, [pc, #68]	@ (8006388 <xTaskIncrementTick+0x16c>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d007      	beq.n	800635a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800634a:	2301      	movs	r3, #1
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	e004      	b.n	800635a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006350:	4b0e      	ldr	r3, [pc, #56]	@ (800638c <xTaskIncrementTick+0x170>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3301      	adds	r3, #1
 8006356:	4a0d      	ldr	r2, [pc, #52]	@ (800638c <xTaskIncrementTick+0x170>)
 8006358:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800635a:	697b      	ldr	r3, [r7, #20]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	20001270 	.word	0x20001270
 8006368:	2000124c 	.word	0x2000124c
 800636c:	20001200 	.word	0x20001200
 8006370:	20001204 	.word	0x20001204
 8006374:	20001260 	.word	0x20001260
 8006378:	20001268 	.word	0x20001268
 800637c:	20001250 	.word	0x20001250
 8006380:	20000d78 	.word	0x20000d78
 8006384:	20000d74 	.word	0x20000d74
 8006388:	2000125c 	.word	0x2000125c
 800638c:	20001258 	.word	0x20001258

08006390 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006396:	4b2b      	ldr	r3, [pc, #172]	@ (8006444 <vTaskSwitchContext+0xb4>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800639e:	4b2a      	ldr	r3, [pc, #168]	@ (8006448 <vTaskSwitchContext+0xb8>)
 80063a0:	2201      	movs	r2, #1
 80063a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063a4:	e047      	b.n	8006436 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80063a6:	4b28      	ldr	r3, [pc, #160]	@ (8006448 <vTaskSwitchContext+0xb8>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ac:	4b27      	ldr	r3, [pc, #156]	@ (800644c <vTaskSwitchContext+0xbc>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	60fb      	str	r3, [r7, #12]
 80063b2:	e011      	b.n	80063d8 <vTaskSwitchContext+0x48>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10b      	bne.n	80063d2 <vTaskSwitchContext+0x42>
	__asm volatile
 80063ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	607b      	str	r3, [r7, #4]
}
 80063cc:	bf00      	nop
 80063ce:	bf00      	nop
 80063d0:	e7fd      	b.n	80063ce <vTaskSwitchContext+0x3e>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	491d      	ldr	r1, [pc, #116]	@ (8006450 <vTaskSwitchContext+0xc0>)
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4613      	mov	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	440b      	add	r3, r1
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d0e3      	beq.n	80063b4 <vTaskSwitchContext+0x24>
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	4613      	mov	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4a16      	ldr	r2, [pc, #88]	@ (8006450 <vTaskSwitchContext+0xc0>)
 80063f8:	4413      	add	r3, r2
 80063fa:	60bb      	str	r3, [r7, #8]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	605a      	str	r2, [r3, #4]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	3308      	adds	r3, #8
 800640e:	429a      	cmp	r2, r3
 8006410:	d104      	bne.n	800641c <vTaskSwitchContext+0x8c>
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	605a      	str	r2, [r3, #4]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	4a0c      	ldr	r2, [pc, #48]	@ (8006454 <vTaskSwitchContext+0xc4>)
 8006424:	6013      	str	r3, [r2, #0]
 8006426:	4a09      	ldr	r2, [pc, #36]	@ (800644c <vTaskSwitchContext+0xbc>)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800642c:	4b09      	ldr	r3, [pc, #36]	@ (8006454 <vTaskSwitchContext+0xc4>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3354      	adds	r3, #84	@ 0x54
 8006432:	4a09      	ldr	r2, [pc, #36]	@ (8006458 <vTaskSwitchContext+0xc8>)
 8006434:	6013      	str	r3, [r2, #0]
}
 8006436:	bf00      	nop
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	20001270 	.word	0x20001270
 8006448:	2000125c 	.word	0x2000125c
 800644c:	20001250 	.word	0x20001250
 8006450:	20000d78 	.word	0x20000d78
 8006454:	20000d74 	.word	0x20000d74
 8006458:	2000001c 	.word	0x2000001c

0800645c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10b      	bne.n	8006484 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	60fb      	str	r3, [r7, #12]
}
 800647e:	bf00      	nop
 8006480:	bf00      	nop
 8006482:	e7fd      	b.n	8006480 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006484:	4b07      	ldr	r3, [pc, #28]	@ (80064a4 <vTaskPlaceOnEventList+0x48>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	3318      	adds	r3, #24
 800648a:	4619      	mov	r1, r3
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7fe fdc0 	bl	8005012 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006492:	2101      	movs	r1, #1
 8006494:	6838      	ldr	r0, [r7, #0]
 8006496:	f000 fb1d 	bl	8006ad4 <prvAddCurrentTaskToDelayedList>
}
 800649a:	bf00      	nop
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	20000d74 	.word	0x20000d74

080064a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10b      	bne.n	80064d2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	617b      	str	r3, [r7, #20]
}
 80064cc:	bf00      	nop
 80064ce:	bf00      	nop
 80064d0:	e7fd      	b.n	80064ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064d2:	4b0a      	ldr	r3, [pc, #40]	@ (80064fc <vTaskPlaceOnEventListRestricted+0x54>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	3318      	adds	r3, #24
 80064d8:	4619      	mov	r1, r3
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f7fe fd75 	bl	8004fca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80064e6:	f04f 33ff 	mov.w	r3, #4294967295
 80064ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80064ec:	6879      	ldr	r1, [r7, #4]
 80064ee:	68b8      	ldr	r0, [r7, #8]
 80064f0:	f000 faf0 	bl	8006ad4 <prvAddCurrentTaskToDelayedList>
	}
 80064f4:	bf00      	nop
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	20000d74 	.word	0x20000d74

08006500 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10b      	bne.n	800652e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	60fb      	str	r3, [r7, #12]
}
 8006528:	bf00      	nop
 800652a:	bf00      	nop
 800652c:	e7fd      	b.n	800652a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	3318      	adds	r3, #24
 8006532:	4618      	mov	r0, r3
 8006534:	f7fe fda6 	bl	8005084 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006538:	4b1d      	ldr	r3, [pc, #116]	@ (80065b0 <xTaskRemoveFromEventList+0xb0>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d11d      	bne.n	800657c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	3304      	adds	r3, #4
 8006544:	4618      	mov	r0, r3
 8006546:	f7fe fd9d 	bl	8005084 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800654e:	4b19      	ldr	r3, [pc, #100]	@ (80065b4 <xTaskRemoveFromEventList+0xb4>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	429a      	cmp	r2, r3
 8006554:	d903      	bls.n	800655e <xTaskRemoveFromEventList+0x5e>
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655a:	4a16      	ldr	r2, [pc, #88]	@ (80065b4 <xTaskRemoveFromEventList+0xb4>)
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006562:	4613      	mov	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4a13      	ldr	r2, [pc, #76]	@ (80065b8 <xTaskRemoveFromEventList+0xb8>)
 800656c:	441a      	add	r2, r3
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	3304      	adds	r3, #4
 8006572:	4619      	mov	r1, r3
 8006574:	4610      	mov	r0, r2
 8006576:	f7fe fd28 	bl	8004fca <vListInsertEnd>
 800657a:	e005      	b.n	8006588 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	3318      	adds	r3, #24
 8006580:	4619      	mov	r1, r3
 8006582:	480e      	ldr	r0, [pc, #56]	@ (80065bc <xTaskRemoveFromEventList+0xbc>)
 8006584:	f7fe fd21 	bl	8004fca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800658c:	4b0c      	ldr	r3, [pc, #48]	@ (80065c0 <xTaskRemoveFromEventList+0xc0>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006592:	429a      	cmp	r2, r3
 8006594:	d905      	bls.n	80065a2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006596:	2301      	movs	r3, #1
 8006598:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800659a:	4b0a      	ldr	r3, [pc, #40]	@ (80065c4 <xTaskRemoveFromEventList+0xc4>)
 800659c:	2201      	movs	r2, #1
 800659e:	601a      	str	r2, [r3, #0]
 80065a0:	e001      	b.n	80065a6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80065a2:	2300      	movs	r3, #0
 80065a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80065a6:	697b      	ldr	r3, [r7, #20]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	20001270 	.word	0x20001270
 80065b4:	20001250 	.word	0x20001250
 80065b8:	20000d78 	.word	0x20000d78
 80065bc:	20001208 	.word	0x20001208
 80065c0:	20000d74 	.word	0x20000d74
 80065c4:	2000125c 	.word	0x2000125c

080065c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80065d0:	4b06      	ldr	r3, [pc, #24]	@ (80065ec <vTaskInternalSetTimeOutState+0x24>)
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80065d8:	4b05      	ldr	r3, [pc, #20]	@ (80065f0 <vTaskInternalSetTimeOutState+0x28>)
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	605a      	str	r2, [r3, #4]
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	20001260 	.word	0x20001260
 80065f0:	2000124c 	.word	0x2000124c

080065f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b088      	sub	sp, #32
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10b      	bne.n	800661c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	613b      	str	r3, [r7, #16]
}
 8006616:	bf00      	nop
 8006618:	bf00      	nop
 800661a:	e7fd      	b.n	8006618 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10b      	bne.n	800663a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	60fb      	str	r3, [r7, #12]
}
 8006634:	bf00      	nop
 8006636:	bf00      	nop
 8006638:	e7fd      	b.n	8006636 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800663a:	f000 ff2d 	bl	8007498 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800663e:	4b1d      	ldr	r3, [pc, #116]	@ (80066b4 <xTaskCheckForTimeOut+0xc0>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	69ba      	ldr	r2, [r7, #24]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006656:	d102      	bne.n	800665e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006658:	2300      	movs	r3, #0
 800665a:	61fb      	str	r3, [r7, #28]
 800665c:	e023      	b.n	80066a6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	4b15      	ldr	r3, [pc, #84]	@ (80066b8 <xTaskCheckForTimeOut+0xc4>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	429a      	cmp	r2, r3
 8006668:	d007      	beq.n	800667a <xTaskCheckForTimeOut+0x86>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	429a      	cmp	r2, r3
 8006672:	d302      	bcc.n	800667a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006674:	2301      	movs	r3, #1
 8006676:	61fb      	str	r3, [r7, #28]
 8006678:	e015      	b.n	80066a6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	429a      	cmp	r2, r3
 8006682:	d20b      	bcs.n	800669c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	1ad2      	subs	r2, r2, r3
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f7ff ff99 	bl	80065c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006696:	2300      	movs	r3, #0
 8006698:	61fb      	str	r3, [r7, #28]
 800669a:	e004      	b.n	80066a6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	2200      	movs	r2, #0
 80066a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80066a2:	2301      	movs	r3, #1
 80066a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80066a6:	f000 ff29 	bl	80074fc <vPortExitCritical>

	return xReturn;
 80066aa:	69fb      	ldr	r3, [r7, #28]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3720      	adds	r7, #32
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	2000124c 	.word	0x2000124c
 80066b8:	20001260 	.word	0x20001260

080066bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80066bc:	b480      	push	{r7}
 80066be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80066c0:	4b03      	ldr	r3, [pc, #12]	@ (80066d0 <vTaskMissedYield+0x14>)
 80066c2:	2201      	movs	r2, #1
 80066c4:	601a      	str	r2, [r3, #0]
}
 80066c6:	bf00      	nop
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	2000125c 	.word	0x2000125c

080066d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80066dc:	f000 f852 	bl	8006784 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066e0:	4b06      	ldr	r3, [pc, #24]	@ (80066fc <prvIdleTask+0x28>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d9f9      	bls.n	80066dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80066e8:	4b05      	ldr	r3, [pc, #20]	@ (8006700 <prvIdleTask+0x2c>)
 80066ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066ee:	601a      	str	r2, [r3, #0]
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80066f8:	e7f0      	b.n	80066dc <prvIdleTask+0x8>
 80066fa:	bf00      	nop
 80066fc:	20000d78 	.word	0x20000d78
 8006700:	e000ed04 	.word	0xe000ed04

08006704 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800670a:	2300      	movs	r3, #0
 800670c:	607b      	str	r3, [r7, #4]
 800670e:	e00c      	b.n	800672a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	4613      	mov	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4a12      	ldr	r2, [pc, #72]	@ (8006764 <prvInitialiseTaskLists+0x60>)
 800671c:	4413      	add	r3, r2
 800671e:	4618      	mov	r0, r3
 8006720:	f7fe fc26 	bl	8004f70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3301      	adds	r3, #1
 8006728:	607b      	str	r3, [r7, #4]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b37      	cmp	r3, #55	@ 0x37
 800672e:	d9ef      	bls.n	8006710 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006730:	480d      	ldr	r0, [pc, #52]	@ (8006768 <prvInitialiseTaskLists+0x64>)
 8006732:	f7fe fc1d 	bl	8004f70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006736:	480d      	ldr	r0, [pc, #52]	@ (800676c <prvInitialiseTaskLists+0x68>)
 8006738:	f7fe fc1a 	bl	8004f70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800673c:	480c      	ldr	r0, [pc, #48]	@ (8006770 <prvInitialiseTaskLists+0x6c>)
 800673e:	f7fe fc17 	bl	8004f70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006742:	480c      	ldr	r0, [pc, #48]	@ (8006774 <prvInitialiseTaskLists+0x70>)
 8006744:	f7fe fc14 	bl	8004f70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006748:	480b      	ldr	r0, [pc, #44]	@ (8006778 <prvInitialiseTaskLists+0x74>)
 800674a:	f7fe fc11 	bl	8004f70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800674e:	4b0b      	ldr	r3, [pc, #44]	@ (800677c <prvInitialiseTaskLists+0x78>)
 8006750:	4a05      	ldr	r2, [pc, #20]	@ (8006768 <prvInitialiseTaskLists+0x64>)
 8006752:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006754:	4b0a      	ldr	r3, [pc, #40]	@ (8006780 <prvInitialiseTaskLists+0x7c>)
 8006756:	4a05      	ldr	r2, [pc, #20]	@ (800676c <prvInitialiseTaskLists+0x68>)
 8006758:	601a      	str	r2, [r3, #0]
}
 800675a:	bf00      	nop
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20000d78 	.word	0x20000d78
 8006768:	200011d8 	.word	0x200011d8
 800676c:	200011ec 	.word	0x200011ec
 8006770:	20001208 	.word	0x20001208
 8006774:	2000121c 	.word	0x2000121c
 8006778:	20001234 	.word	0x20001234
 800677c:	20001200 	.word	0x20001200
 8006780:	20001204 	.word	0x20001204

08006784 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800678a:	e019      	b.n	80067c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800678c:	f000 fe84 	bl	8007498 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006790:	4b10      	ldr	r3, [pc, #64]	@ (80067d4 <prvCheckTasksWaitingTermination+0x50>)
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3304      	adds	r3, #4
 800679c:	4618      	mov	r0, r3
 800679e:	f7fe fc71 	bl	8005084 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067a2:	4b0d      	ldr	r3, [pc, #52]	@ (80067d8 <prvCheckTasksWaitingTermination+0x54>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3b01      	subs	r3, #1
 80067a8:	4a0b      	ldr	r2, [pc, #44]	@ (80067d8 <prvCheckTasksWaitingTermination+0x54>)
 80067aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067ac:	4b0b      	ldr	r3, [pc, #44]	@ (80067dc <prvCheckTasksWaitingTermination+0x58>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3b01      	subs	r3, #1
 80067b2:	4a0a      	ldr	r2, [pc, #40]	@ (80067dc <prvCheckTasksWaitingTermination+0x58>)
 80067b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80067b6:	f000 fea1 	bl	80074fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f810 	bl	80067e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067c0:	4b06      	ldr	r3, [pc, #24]	@ (80067dc <prvCheckTasksWaitingTermination+0x58>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1e1      	bne.n	800678c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067c8:	bf00      	nop
 80067ca:	bf00      	nop
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	2000121c 	.word	0x2000121c
 80067d8:	20001248 	.word	0x20001248
 80067dc:	20001230 	.word	0x20001230

080067e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	3354      	adds	r3, #84	@ 0x54
 80067ec:	4618      	mov	r0, r3
 80067ee:	f001 feef 	bl	80085d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d108      	bne.n	800680e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006800:	4618      	mov	r0, r3
 8006802:	f001 f839 	bl	8007878 <vPortFree>
				vPortFree( pxTCB );
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f001 f836 	bl	8007878 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800680c:	e019      	b.n	8006842 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006814:	2b01      	cmp	r3, #1
 8006816:	d103      	bne.n	8006820 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f001 f82d 	bl	8007878 <vPortFree>
	}
 800681e:	e010      	b.n	8006842 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006826:	2b02      	cmp	r3, #2
 8006828:	d00b      	beq.n	8006842 <prvDeleteTCB+0x62>
	__asm volatile
 800682a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	60fb      	str	r3, [r7, #12]
}
 800683c:	bf00      	nop
 800683e:	bf00      	nop
 8006840:	e7fd      	b.n	800683e <prvDeleteTCB+0x5e>
	}
 8006842:	bf00      	nop
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006852:	4b0c      	ldr	r3, [pc, #48]	@ (8006884 <prvResetNextTaskUnblockTime+0x38>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d104      	bne.n	8006866 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800685c:	4b0a      	ldr	r3, [pc, #40]	@ (8006888 <prvResetNextTaskUnblockTime+0x3c>)
 800685e:	f04f 32ff 	mov.w	r2, #4294967295
 8006862:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006864:	e008      	b.n	8006878 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006866:	4b07      	ldr	r3, [pc, #28]	@ (8006884 <prvResetNextTaskUnblockTime+0x38>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	4a04      	ldr	r2, [pc, #16]	@ (8006888 <prvResetNextTaskUnblockTime+0x3c>)
 8006876:	6013      	str	r3, [r2, #0]
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	20001200 	.word	0x20001200
 8006888:	20001268 	.word	0x20001268

0800688c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006892:	4b0b      	ldr	r3, [pc, #44]	@ (80068c0 <xTaskGetSchedulerState+0x34>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d102      	bne.n	80068a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800689a:	2301      	movs	r3, #1
 800689c:	607b      	str	r3, [r7, #4]
 800689e:	e008      	b.n	80068b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068a0:	4b08      	ldr	r3, [pc, #32]	@ (80068c4 <xTaskGetSchedulerState+0x38>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d102      	bne.n	80068ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80068a8:	2302      	movs	r3, #2
 80068aa:	607b      	str	r3, [r7, #4]
 80068ac:	e001      	b.n	80068b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80068ae:	2300      	movs	r3, #0
 80068b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80068b2:	687b      	ldr	r3, [r7, #4]
	}
 80068b4:	4618      	mov	r0, r3
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	20001254 	.word	0x20001254
 80068c4:	20001270 	.word	0x20001270

080068c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80068d4:	2300      	movs	r3, #0
 80068d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d058      	beq.n	8006990 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80068de:	4b2f      	ldr	r3, [pc, #188]	@ (800699c <xTaskPriorityDisinherit+0xd4>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d00b      	beq.n	8006900 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80068e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	60fb      	str	r3, [r7, #12]
}
 80068fa:	bf00      	nop
 80068fc:	bf00      	nop
 80068fe:	e7fd      	b.n	80068fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10b      	bne.n	8006920 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800690c:	f383 8811 	msr	BASEPRI, r3
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	60bb      	str	r3, [r7, #8]
}
 800691a:	bf00      	nop
 800691c:	bf00      	nop
 800691e:	e7fd      	b.n	800691c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006924:	1e5a      	subs	r2, r3, #1
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006932:	429a      	cmp	r2, r3
 8006934:	d02c      	beq.n	8006990 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800693a:	2b00      	cmp	r3, #0
 800693c:	d128      	bne.n	8006990 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	3304      	adds	r3, #4
 8006942:	4618      	mov	r0, r3
 8006944:	f7fe fb9e 	bl	8005084 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006954:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006960:	4b0f      	ldr	r3, [pc, #60]	@ (80069a0 <xTaskPriorityDisinherit+0xd8>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	429a      	cmp	r2, r3
 8006966:	d903      	bls.n	8006970 <xTaskPriorityDisinherit+0xa8>
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696c:	4a0c      	ldr	r2, [pc, #48]	@ (80069a0 <xTaskPriorityDisinherit+0xd8>)
 800696e:	6013      	str	r3, [r2, #0]
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006974:	4613      	mov	r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4a09      	ldr	r2, [pc, #36]	@ (80069a4 <xTaskPriorityDisinherit+0xdc>)
 800697e:	441a      	add	r2, r3
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	3304      	adds	r3, #4
 8006984:	4619      	mov	r1, r3
 8006986:	4610      	mov	r0, r2
 8006988:	f7fe fb1f 	bl	8004fca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800698c:	2301      	movs	r3, #1
 800698e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006990:	697b      	ldr	r3, [r7, #20]
	}
 8006992:	4618      	mov	r0, r3
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	20000d74 	.word	0x20000d74
 80069a0:	20001250 	.word	0x20001250
 80069a4:	20000d78 	.word	0x20000d78

080069a8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08a      	sub	sp, #40	@ 0x28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10b      	bne.n	80069d0 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	61bb      	str	r3, [r7, #24]
}
 80069ca:	bf00      	nop
 80069cc:	bf00      	nop
 80069ce:	e7fd      	b.n	80069cc <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069d0:	f000 fe42 	bl	8007658 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 80069d8:	f3ef 8211 	mrs	r2, BASEPRI
 80069dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	617a      	str	r2, [r7, #20]
 80069ee:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80069f0:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069f2:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80069f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f6:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80069fa:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80069fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8006a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006a12:	7ffb      	ldrb	r3, [r7, #31]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d147      	bne.n	8006aa8 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00b      	beq.n	8006a38 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	60fb      	str	r3, [r7, #12]
}
 8006a32:	bf00      	nop
 8006a34:	bf00      	nop
 8006a36:	e7fd      	b.n	8006a34 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a38:	4b20      	ldr	r3, [pc, #128]	@ (8006abc <vTaskNotifyGiveFromISR+0x114>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d11d      	bne.n	8006a7c <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a42:	3304      	adds	r3, #4
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fe fb1d 	bl	8005084 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8006ac0 <vTaskNotifyGiveFromISR+0x118>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d903      	bls.n	8006a5e <vTaskNotifyGiveFromISR+0xb6>
 8006a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5a:	4a19      	ldr	r2, [pc, #100]	@ (8006ac0 <vTaskNotifyGiveFromISR+0x118>)
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a62:	4613      	mov	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4a16      	ldr	r2, [pc, #88]	@ (8006ac4 <vTaskNotifyGiveFromISR+0x11c>)
 8006a6c:	441a      	add	r2, r3
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a70:	3304      	adds	r3, #4
 8006a72:	4619      	mov	r1, r3
 8006a74:	4610      	mov	r0, r2
 8006a76:	f7fe faa8 	bl	8004fca <vListInsertEnd>
 8006a7a:	e005      	b.n	8006a88 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7e:	3318      	adds	r3, #24
 8006a80:	4619      	mov	r1, r3
 8006a82:	4811      	ldr	r0, [pc, #68]	@ (8006ac8 <vTaskNotifyGiveFromISR+0x120>)
 8006a84:	f7fe faa1 	bl	8004fca <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8006acc <vTaskNotifyGiveFromISR+0x124>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d908      	bls.n	8006aa8 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad0 <vTaskNotifyGiveFromISR+0x128>)
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	6a3b      	ldr	r3, [r7, #32]
 8006aaa:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f383 8811 	msr	BASEPRI, r3
}
 8006ab2:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8006ab4:	bf00      	nop
 8006ab6:	3728      	adds	r7, #40	@ 0x28
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	20001270 	.word	0x20001270
 8006ac0:	20001250 	.word	0x20001250
 8006ac4:	20000d78 	.word	0x20000d78
 8006ac8:	20001208 	.word	0x20001208
 8006acc:	20000d74 	.word	0x20000d74
 8006ad0:	2000125c 	.word	0x2000125c

08006ad4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ade:	4b21      	ldr	r3, [pc, #132]	@ (8006b64 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ae4:	4b20      	ldr	r3, [pc, #128]	@ (8006b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3304      	adds	r3, #4
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fe faca 	bl	8005084 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af6:	d10a      	bne.n	8006b0e <prvAddCurrentTaskToDelayedList+0x3a>
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d007      	beq.n	8006b0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006afe:	4b1a      	ldr	r3, [pc, #104]	@ (8006b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3304      	adds	r3, #4
 8006b04:	4619      	mov	r1, r3
 8006b06:	4819      	ldr	r0, [pc, #100]	@ (8006b6c <prvAddCurrentTaskToDelayedList+0x98>)
 8006b08:	f7fe fa5f 	bl	8004fca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b0c:	e026      	b.n	8006b5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4413      	add	r3, r2
 8006b14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b16:	4b14      	ldr	r3, [pc, #80]	@ (8006b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d209      	bcs.n	8006b3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b26:	4b12      	ldr	r3, [pc, #72]	@ (8006b70 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8006b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3304      	adds	r3, #4
 8006b30:	4619      	mov	r1, r3
 8006b32:	4610      	mov	r0, r2
 8006b34:	f7fe fa6d 	bl	8005012 <vListInsert>
}
 8006b38:	e010      	b.n	8006b5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8006b74 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	3304      	adds	r3, #4
 8006b44:	4619      	mov	r1, r3
 8006b46:	4610      	mov	r0, r2
 8006b48:	f7fe fa63 	bl	8005012 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d202      	bcs.n	8006b5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b56:	4a08      	ldr	r2, [pc, #32]	@ (8006b78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	6013      	str	r3, [r2, #0]
}
 8006b5c:	bf00      	nop
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	2000124c 	.word	0x2000124c
 8006b68:	20000d74 	.word	0x20000d74
 8006b6c:	20001234 	.word	0x20001234
 8006b70:	20001204 	.word	0x20001204
 8006b74:	20001200 	.word	0x20001200
 8006b78:	20001268 	.word	0x20001268

08006b7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b08a      	sub	sp, #40	@ 0x28
 8006b80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b86:	f000 fb13 	bl	80071b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8006c00 <xTimerCreateTimerTask+0x84>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d021      	beq.n	8006bd6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b92:	2300      	movs	r3, #0
 8006b94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b96:	2300      	movs	r3, #0
 8006b98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b9a:	1d3a      	adds	r2, r7, #4
 8006b9c:	f107 0108 	add.w	r1, r7, #8
 8006ba0:	f107 030c 	add.w	r3, r7, #12
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7fe f9c9 	bl	8004f3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006baa:	6879      	ldr	r1, [r7, #4]
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	9202      	str	r2, [sp, #8]
 8006bb2:	9301      	str	r3, [sp, #4]
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	2300      	movs	r3, #0
 8006bba:	460a      	mov	r2, r1
 8006bbc:	4911      	ldr	r1, [pc, #68]	@ (8006c04 <xTimerCreateTimerTask+0x88>)
 8006bbe:	4812      	ldr	r0, [pc, #72]	@ (8006c08 <xTimerCreateTimerTask+0x8c>)
 8006bc0:	f7ff f80c 	bl	8005bdc <xTaskCreateStatic>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	4a11      	ldr	r2, [pc, #68]	@ (8006c0c <xTimerCreateTimerTask+0x90>)
 8006bc8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006bca:	4b10      	ldr	r3, [pc, #64]	@ (8006c0c <xTimerCreateTimerTask+0x90>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10b      	bne.n	8006bf4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	613b      	str	r3, [r7, #16]
}
 8006bee:	bf00      	nop
 8006bf0:	bf00      	nop
 8006bf2:	e7fd      	b.n	8006bf0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006bf4:	697b      	ldr	r3, [r7, #20]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	200012a4 	.word	0x200012a4
 8006c04:	0800a4f8 	.word	0x0800a4f8
 8006c08:	08006d49 	.word	0x08006d49
 8006c0c:	200012a8 	.word	0x200012a8

08006c10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08a      	sub	sp, #40	@ 0x28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10b      	bne.n	8006c40 <xTimerGenericCommand+0x30>
	__asm volatile
 8006c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	623b      	str	r3, [r7, #32]
}
 8006c3a:	bf00      	nop
 8006c3c:	bf00      	nop
 8006c3e:	e7fd      	b.n	8006c3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006c40:	4b19      	ldr	r3, [pc, #100]	@ (8006ca8 <xTimerGenericCommand+0x98>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d02a      	beq.n	8006c9e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	2b05      	cmp	r3, #5
 8006c58:	dc18      	bgt.n	8006c8c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c5a:	f7ff fe17 	bl	800688c <xTaskGetSchedulerState>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d109      	bne.n	8006c78 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c64:	4b10      	ldr	r3, [pc, #64]	@ (8006ca8 <xTimerGenericCommand+0x98>)
 8006c66:	6818      	ldr	r0, [r3, #0]
 8006c68:	f107 0110 	add.w	r1, r7, #16
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c70:	f7fe fbc4 	bl	80053fc <xQueueGenericSend>
 8006c74:	6278      	str	r0, [r7, #36]	@ 0x24
 8006c76:	e012      	b.n	8006c9e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c78:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca8 <xTimerGenericCommand+0x98>)
 8006c7a:	6818      	ldr	r0, [r3, #0]
 8006c7c:	f107 0110 	add.w	r1, r7, #16
 8006c80:	2300      	movs	r3, #0
 8006c82:	2200      	movs	r2, #0
 8006c84:	f7fe fbba 	bl	80053fc <xQueueGenericSend>
 8006c88:	6278      	str	r0, [r7, #36]	@ 0x24
 8006c8a:	e008      	b.n	8006c9e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c8c:	4b06      	ldr	r3, [pc, #24]	@ (8006ca8 <xTimerGenericCommand+0x98>)
 8006c8e:	6818      	ldr	r0, [r3, #0]
 8006c90:	f107 0110 	add.w	r1, r7, #16
 8006c94:	2300      	movs	r3, #0
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	f7fe fcb2 	bl	8005600 <xQueueGenericSendFromISR>
 8006c9c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3728      	adds	r7, #40	@ 0x28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	200012a4 	.word	0x200012a4

08006cac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b088      	sub	sp, #32
 8006cb0:	af02      	add	r7, sp, #8
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cb6:	4b23      	ldr	r3, [pc, #140]	@ (8006d44 <prvProcessExpiredTimer+0x98>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7fe f9dd 	bl	8005084 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cd0:	f003 0304 	and.w	r3, r3, #4
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d023      	beq.n	8006d20 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	699a      	ldr	r2, [r3, #24]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	18d1      	adds	r1, r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	6978      	ldr	r0, [r7, #20]
 8006ce6:	f000 f8d5 	bl	8006e94 <prvInsertTimerInActiveList>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d020      	beq.n	8006d32 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	6978      	ldr	r0, [r7, #20]
 8006cfc:	f7ff ff88 	bl	8006c10 <xTimerGenericCommand>
 8006d00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d114      	bne.n	8006d32 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d0c:	f383 8811 	msr	BASEPRI, r3
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	60fb      	str	r3, [r7, #12]
}
 8006d1a:	bf00      	nop
 8006d1c:	bf00      	nop
 8006d1e:	e7fd      	b.n	8006d1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d26:	f023 0301 	bic.w	r3, r3, #1
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	6978      	ldr	r0, [r7, #20]
 8006d38:	4798      	blx	r3
}
 8006d3a:	bf00      	nop
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	2000129c 	.word	0x2000129c

08006d48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d50:	f107 0308 	add.w	r3, r7, #8
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 f859 	bl	8006e0c <prvGetNextExpireTime>
 8006d5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 f805 	bl	8006d70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d66:	f000 f8d7 	bl	8006f18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d6a:	bf00      	nop
 8006d6c:	e7f0      	b.n	8006d50 <prvTimerTask+0x8>
	...

08006d70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d7a:	f7ff f993 	bl	80060a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d7e:	f107 0308 	add.w	r3, r7, #8
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 f866 	bl	8006e54 <prvSampleTimeNow>
 8006d88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d130      	bne.n	8006df2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10a      	bne.n	8006dac <prvProcessTimerOrBlockTask+0x3c>
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d806      	bhi.n	8006dac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d9e:	f7ff f98f 	bl	80060c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006da2:	68f9      	ldr	r1, [r7, #12]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f7ff ff81 	bl	8006cac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006daa:	e024      	b.n	8006df6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d008      	beq.n	8006dc4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006db2:	4b13      	ldr	r3, [pc, #76]	@ (8006e00 <prvProcessTimerOrBlockTask+0x90>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <prvProcessTimerOrBlockTask+0x50>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e000      	b.n	8006dc2 <prvProcessTimerOrBlockTask+0x52>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8006e04 <prvProcessTimerOrBlockTask+0x94>)
 8006dc6:	6818      	ldr	r0, [r3, #0]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	f7fe fecf 	bl	8005b74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006dd6:	f7ff f973 	bl	80060c0 <xTaskResumeAll>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10a      	bne.n	8006df6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006de0:	4b09      	ldr	r3, [pc, #36]	@ (8006e08 <prvProcessTimerOrBlockTask+0x98>)
 8006de2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	f3bf 8f6f 	isb	sy
}
 8006df0:	e001      	b.n	8006df6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006df2:	f7ff f965 	bl	80060c0 <xTaskResumeAll>
}
 8006df6:	bf00      	nop
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	200012a0 	.word	0x200012a0
 8006e04:	200012a4 	.word	0x200012a4
 8006e08:	e000ed04 	.word	0xe000ed04

08006e0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e14:	4b0e      	ldr	r3, [pc, #56]	@ (8006e50 <prvGetNextExpireTime+0x44>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <prvGetNextExpireTime+0x16>
 8006e1e:	2201      	movs	r2, #1
 8006e20:	e000      	b.n	8006e24 <prvGetNextExpireTime+0x18>
 8006e22:	2200      	movs	r2, #0
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d105      	bne.n	8006e3c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e30:	4b07      	ldr	r3, [pc, #28]	@ (8006e50 <prvGetNextExpireTime+0x44>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	60fb      	str	r3, [r7, #12]
 8006e3a:	e001      	b.n	8006e40 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006e40:	68fb      	ldr	r3, [r7, #12]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	2000129c 	.word	0x2000129c

08006e54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e5c:	f7ff f9ce 	bl	80061fc <xTaskGetTickCount>
 8006e60:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e62:	4b0b      	ldr	r3, [pc, #44]	@ (8006e90 <prvSampleTimeNow+0x3c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d205      	bcs.n	8006e78 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e6c:	f000 f93a 	bl	80070e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	e002      	b.n	8006e7e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e7e:	4a04      	ldr	r2, [pc, #16]	@ (8006e90 <prvSampleTimeNow+0x3c>)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e84:	68fb      	ldr	r3, [r7, #12]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	200012ac 	.word	0x200012ac

08006e94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d812      	bhi.n	8006ee0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	1ad2      	subs	r2, r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d302      	bcc.n	8006ece <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	617b      	str	r3, [r7, #20]
 8006ecc:	e01b      	b.n	8006f06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ece:	4b10      	ldr	r3, [pc, #64]	@ (8006f10 <prvInsertTimerInActiveList+0x7c>)
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	4610      	mov	r0, r2
 8006eda:	f7fe f89a 	bl	8005012 <vListInsert>
 8006ede:	e012      	b.n	8006f06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d206      	bcs.n	8006ef6 <prvInsertTimerInActiveList+0x62>
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d302      	bcc.n	8006ef6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	617b      	str	r3, [r7, #20]
 8006ef4:	e007      	b.n	8006f06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ef6:	4b07      	ldr	r3, [pc, #28]	@ (8006f14 <prvInsertTimerInActiveList+0x80>)
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3304      	adds	r3, #4
 8006efe:	4619      	mov	r1, r3
 8006f00:	4610      	mov	r0, r2
 8006f02:	f7fe f886 	bl	8005012 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006f06:	697b      	ldr	r3, [r7, #20]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3718      	adds	r7, #24
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	200012a0 	.word	0x200012a0
 8006f14:	2000129c 	.word	0x2000129c

08006f18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08e      	sub	sp, #56	@ 0x38
 8006f1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f1e:	e0ce      	b.n	80070be <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	da19      	bge.n	8006f5a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006f26:	1d3b      	adds	r3, r7, #4
 8006f28:	3304      	adds	r3, #4
 8006f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10b      	bne.n	8006f4a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	61fb      	str	r3, [r7, #28]
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop
 8006f48:	e7fd      	b.n	8006f46 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f50:	6850      	ldr	r0, [r2, #4]
 8006f52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f54:	6892      	ldr	r2, [r2, #8]
 8006f56:	4611      	mov	r1, r2
 8006f58:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f2c0 80ae 	blt.w	80070be <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d004      	beq.n	8006f78 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f70:	3304      	adds	r3, #4
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fe f886 	bl	8005084 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f78:	463b      	mov	r3, r7
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7ff ff6a 	bl	8006e54 <prvSampleTimeNow>
 8006f80:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b09      	cmp	r3, #9
 8006f86:	f200 8097 	bhi.w	80070b8 <prvProcessReceivedCommands+0x1a0>
 8006f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f90 <prvProcessReceivedCommands+0x78>)
 8006f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f90:	08006fb9 	.word	0x08006fb9
 8006f94:	08006fb9 	.word	0x08006fb9
 8006f98:	08006fb9 	.word	0x08006fb9
 8006f9c:	0800702f 	.word	0x0800702f
 8006fa0:	08007043 	.word	0x08007043
 8006fa4:	0800708f 	.word	0x0800708f
 8006fa8:	08006fb9 	.word	0x08006fb9
 8006fac:	08006fb9 	.word	0x08006fb9
 8006fb0:	0800702f 	.word	0x0800702f
 8006fb4:	08007043 	.word	0x08007043
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fbe:	f043 0301 	orr.w	r3, r3, #1
 8006fc2:	b2da      	uxtb	r2, r3
 8006fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	18d1      	adds	r1, r2, r3
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fd8:	f7ff ff5c 	bl	8006e94 <prvInsertTimerInActiveList>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d06c      	beq.n	80070bc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fe8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ff0:	f003 0304 	and.w	r3, r3, #4
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d061      	beq.n	80070bc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	441a      	add	r2, r3
 8007000:	2300      	movs	r3, #0
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	2300      	movs	r3, #0
 8007006:	2100      	movs	r1, #0
 8007008:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800700a:	f7ff fe01 	bl	8006c10 <xTimerGenericCommand>
 800700e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d152      	bne.n	80070bc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701a:	f383 8811 	msr	BASEPRI, r3
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	61bb      	str	r3, [r7, #24]
}
 8007028:	bf00      	nop
 800702a:	bf00      	nop
 800702c:	e7fd      	b.n	800702a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800702e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007030:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007034:	f023 0301 	bic.w	r3, r3, #1
 8007038:	b2da      	uxtb	r2, r3
 800703a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007040:	e03d      	b.n	80070be <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007044:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007048:	f043 0301 	orr.w	r3, r3, #1
 800704c:	b2da      	uxtb	r2, r3
 800704e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007050:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007058:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800705a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10b      	bne.n	800707a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	617b      	str	r3, [r7, #20]
}
 8007074:	bf00      	nop
 8007076:	bf00      	nop
 8007078:	e7fd      	b.n	8007076 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800707a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800707c:	699a      	ldr	r2, [r3, #24]
 800707e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007080:	18d1      	adds	r1, r2, r3
 8007082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007084:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007086:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007088:	f7ff ff04 	bl	8006e94 <prvInsertTimerInActiveList>
					break;
 800708c:	e017      	b.n	80070be <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800708e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007090:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007094:	f003 0302 	and.w	r3, r3, #2
 8007098:	2b00      	cmp	r3, #0
 800709a:	d103      	bne.n	80070a4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800709c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800709e:	f000 fbeb 	bl	8007878 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80070a2:	e00c      	b.n	80070be <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070aa:	f023 0301 	bic.w	r3, r3, #1
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80070b6:	e002      	b.n	80070be <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80070b8:	bf00      	nop
 80070ba:	e000      	b.n	80070be <prvProcessReceivedCommands+0x1a6>
					break;
 80070bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070be:	4b08      	ldr	r3, [pc, #32]	@ (80070e0 <prvProcessReceivedCommands+0x1c8>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	1d39      	adds	r1, r7, #4
 80070c4:	2200      	movs	r2, #0
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fe fb38 	bl	800573c <xQueueReceive>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f47f af26 	bne.w	8006f20 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80070d4:	bf00      	nop
 80070d6:	bf00      	nop
 80070d8:	3730      	adds	r7, #48	@ 0x30
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	200012a4 	.word	0x200012a4

080070e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b088      	sub	sp, #32
 80070e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070ea:	e049      	b.n	8007180 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070ec:	4b2e      	ldr	r3, [pc, #184]	@ (80071a8 <prvSwitchTimerLists+0xc4>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070f6:	4b2c      	ldr	r3, [pc, #176]	@ (80071a8 <prvSwitchTimerLists+0xc4>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3304      	adds	r3, #4
 8007104:	4618      	mov	r0, r3
 8007106:	f7fd ffbd 	bl	8005084 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007118:	f003 0304 	and.w	r3, r3, #4
 800711c:	2b00      	cmp	r3, #0
 800711e:	d02f      	beq.n	8007180 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	4413      	add	r3, r2
 8007128:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	429a      	cmp	r2, r3
 8007130:	d90e      	bls.n	8007150 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800713e:	4b1a      	ldr	r3, [pc, #104]	@ (80071a8 <prvSwitchTimerLists+0xc4>)
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	3304      	adds	r3, #4
 8007146:	4619      	mov	r1, r3
 8007148:	4610      	mov	r0, r2
 800714a:	f7fd ff62 	bl	8005012 <vListInsert>
 800714e:	e017      	b.n	8007180 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007150:	2300      	movs	r3, #0
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	2300      	movs	r3, #0
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	2100      	movs	r1, #0
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f7ff fd58 	bl	8006c10 <xTimerGenericCommand>
 8007160:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10b      	bne.n	8007180 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800716c:	f383 8811 	msr	BASEPRI, r3
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	603b      	str	r3, [r7, #0]
}
 800717a:	bf00      	nop
 800717c:	bf00      	nop
 800717e:	e7fd      	b.n	800717c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007180:	4b09      	ldr	r3, [pc, #36]	@ (80071a8 <prvSwitchTimerLists+0xc4>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1b0      	bne.n	80070ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800718a:	4b07      	ldr	r3, [pc, #28]	@ (80071a8 <prvSwitchTimerLists+0xc4>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007190:	4b06      	ldr	r3, [pc, #24]	@ (80071ac <prvSwitchTimerLists+0xc8>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a04      	ldr	r2, [pc, #16]	@ (80071a8 <prvSwitchTimerLists+0xc4>)
 8007196:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007198:	4a04      	ldr	r2, [pc, #16]	@ (80071ac <prvSwitchTimerLists+0xc8>)
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	6013      	str	r3, [r2, #0]
}
 800719e:	bf00      	nop
 80071a0:	3718      	adds	r7, #24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	2000129c 	.word	0x2000129c
 80071ac:	200012a0 	.word	0x200012a0

080071b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80071b6:	f000 f96f 	bl	8007498 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80071ba:	4b15      	ldr	r3, [pc, #84]	@ (8007210 <prvCheckForValidListAndQueue+0x60>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d120      	bne.n	8007204 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80071c2:	4814      	ldr	r0, [pc, #80]	@ (8007214 <prvCheckForValidListAndQueue+0x64>)
 80071c4:	f7fd fed4 	bl	8004f70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80071c8:	4813      	ldr	r0, [pc, #76]	@ (8007218 <prvCheckForValidListAndQueue+0x68>)
 80071ca:	f7fd fed1 	bl	8004f70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80071ce:	4b13      	ldr	r3, [pc, #76]	@ (800721c <prvCheckForValidListAndQueue+0x6c>)
 80071d0:	4a10      	ldr	r2, [pc, #64]	@ (8007214 <prvCheckForValidListAndQueue+0x64>)
 80071d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80071d4:	4b12      	ldr	r3, [pc, #72]	@ (8007220 <prvCheckForValidListAndQueue+0x70>)
 80071d6:	4a10      	ldr	r2, [pc, #64]	@ (8007218 <prvCheckForValidListAndQueue+0x68>)
 80071d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80071da:	2300      	movs	r3, #0
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	4b11      	ldr	r3, [pc, #68]	@ (8007224 <prvCheckForValidListAndQueue+0x74>)
 80071e0:	4a11      	ldr	r2, [pc, #68]	@ (8007228 <prvCheckForValidListAndQueue+0x78>)
 80071e2:	2110      	movs	r1, #16
 80071e4:	200a      	movs	r0, #10
 80071e6:	f7fd ffe1 	bl	80051ac <xQueueGenericCreateStatic>
 80071ea:	4603      	mov	r3, r0
 80071ec:	4a08      	ldr	r2, [pc, #32]	@ (8007210 <prvCheckForValidListAndQueue+0x60>)
 80071ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80071f0:	4b07      	ldr	r3, [pc, #28]	@ (8007210 <prvCheckForValidListAndQueue+0x60>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d005      	beq.n	8007204 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80071f8:	4b05      	ldr	r3, [pc, #20]	@ (8007210 <prvCheckForValidListAndQueue+0x60>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	490b      	ldr	r1, [pc, #44]	@ (800722c <prvCheckForValidListAndQueue+0x7c>)
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fe fc8e 	bl	8005b20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007204:	f000 f97a 	bl	80074fc <vPortExitCritical>
}
 8007208:	bf00      	nop
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	200012a4 	.word	0x200012a4
 8007214:	20001274 	.word	0x20001274
 8007218:	20001288 	.word	0x20001288
 800721c:	2000129c 	.word	0x2000129c
 8007220:	200012a0 	.word	0x200012a0
 8007224:	20001350 	.word	0x20001350
 8007228:	200012b0 	.word	0x200012b0
 800722c:	0800a500 	.word	0x0800a500

08007230 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	3b04      	subs	r3, #4
 8007240:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007248:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	3b04      	subs	r3, #4
 800724e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f023 0201 	bic.w	r2, r3, #1
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	3b04      	subs	r3, #4
 800725e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007260:	4a0c      	ldr	r2, [pc, #48]	@ (8007294 <pxPortInitialiseStack+0x64>)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	3b14      	subs	r3, #20
 800726a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	3b04      	subs	r3, #4
 8007276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f06f 0202 	mvn.w	r2, #2
 800727e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	3b20      	subs	r3, #32
 8007284:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007286:	68fb      	ldr	r3, [r7, #12]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	08007299 	.word	0x08007299

08007298 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800729e:	2300      	movs	r3, #0
 80072a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80072a2:	4b13      	ldr	r3, [pc, #76]	@ (80072f0 <prvTaskExitError+0x58>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072aa:	d00b      	beq.n	80072c4 <prvTaskExitError+0x2c>
	__asm volatile
 80072ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b0:	f383 8811 	msr	BASEPRI, r3
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	60fb      	str	r3, [r7, #12]
}
 80072be:	bf00      	nop
 80072c0:	bf00      	nop
 80072c2:	e7fd      	b.n	80072c0 <prvTaskExitError+0x28>
	__asm volatile
 80072c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	60bb      	str	r3, [r7, #8]
}
 80072d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80072d8:	bf00      	nop
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d0fc      	beq.n	80072da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80072e0:	bf00      	nop
 80072e2:	bf00      	nop
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	2000000c 	.word	0x2000000c
	...

08007300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007300:	4b07      	ldr	r3, [pc, #28]	@ (8007320 <pxCurrentTCBConst2>)
 8007302:	6819      	ldr	r1, [r3, #0]
 8007304:	6808      	ldr	r0, [r1, #0]
 8007306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730a:	f380 8809 	msr	PSP, r0
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	f04f 0000 	mov.w	r0, #0
 8007316:	f380 8811 	msr	BASEPRI, r0
 800731a:	4770      	bx	lr
 800731c:	f3af 8000 	nop.w

08007320 <pxCurrentTCBConst2>:
 8007320:	20000d74 	.word	0x20000d74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007324:	bf00      	nop
 8007326:	bf00      	nop

08007328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007328:	4808      	ldr	r0, [pc, #32]	@ (800734c <prvPortStartFirstTask+0x24>)
 800732a:	6800      	ldr	r0, [r0, #0]
 800732c:	6800      	ldr	r0, [r0, #0]
 800732e:	f380 8808 	msr	MSP, r0
 8007332:	f04f 0000 	mov.w	r0, #0
 8007336:	f380 8814 	msr	CONTROL, r0
 800733a:	b662      	cpsie	i
 800733c:	b661      	cpsie	f
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	df00      	svc	0
 8007348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800734a:	bf00      	nop
 800734c:	e000ed08 	.word	0xe000ed08

08007350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007356:	4b47      	ldr	r3, [pc, #284]	@ (8007474 <xPortStartScheduler+0x124>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a47      	ldr	r2, [pc, #284]	@ (8007478 <xPortStartScheduler+0x128>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d10b      	bne.n	8007378 <xPortStartScheduler+0x28>
	__asm volatile
 8007360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	613b      	str	r3, [r7, #16]
}
 8007372:	bf00      	nop
 8007374:	bf00      	nop
 8007376:	e7fd      	b.n	8007374 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007378:	4b3e      	ldr	r3, [pc, #248]	@ (8007474 <xPortStartScheduler+0x124>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a3f      	ldr	r2, [pc, #252]	@ (800747c <xPortStartScheduler+0x12c>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d10b      	bne.n	800739a <xPortStartScheduler+0x4a>
	__asm volatile
 8007382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007386:	f383 8811 	msr	BASEPRI, r3
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	60fb      	str	r3, [r7, #12]
}
 8007394:	bf00      	nop
 8007396:	bf00      	nop
 8007398:	e7fd      	b.n	8007396 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800739a:	4b39      	ldr	r3, [pc, #228]	@ (8007480 <xPortStartScheduler+0x130>)
 800739c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	22ff      	movs	r2, #255	@ 0xff
 80073aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80073b4:	78fb      	ldrb	r3, [r7, #3]
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	4b31      	ldr	r3, [pc, #196]	@ (8007484 <xPortStartScheduler+0x134>)
 80073c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073c2:	4b31      	ldr	r3, [pc, #196]	@ (8007488 <xPortStartScheduler+0x138>)
 80073c4:	2207      	movs	r2, #7
 80073c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073c8:	e009      	b.n	80073de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80073ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007488 <xPortStartScheduler+0x138>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	4a2d      	ldr	r2, [pc, #180]	@ (8007488 <xPortStartScheduler+0x138>)
 80073d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80073d4:	78fb      	ldrb	r3, [r7, #3]
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	005b      	lsls	r3, r3, #1
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073de:	78fb      	ldrb	r3, [r7, #3]
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073e6:	2b80      	cmp	r3, #128	@ 0x80
 80073e8:	d0ef      	beq.n	80073ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80073ea:	4b27      	ldr	r3, [pc, #156]	@ (8007488 <xPortStartScheduler+0x138>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f1c3 0307 	rsb	r3, r3, #7
 80073f2:	2b04      	cmp	r3, #4
 80073f4:	d00b      	beq.n	800740e <xPortStartScheduler+0xbe>
	__asm volatile
 80073f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fa:	f383 8811 	msr	BASEPRI, r3
 80073fe:	f3bf 8f6f 	isb	sy
 8007402:	f3bf 8f4f 	dsb	sy
 8007406:	60bb      	str	r3, [r7, #8]
}
 8007408:	bf00      	nop
 800740a:	bf00      	nop
 800740c:	e7fd      	b.n	800740a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800740e:	4b1e      	ldr	r3, [pc, #120]	@ (8007488 <xPortStartScheduler+0x138>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	021b      	lsls	r3, r3, #8
 8007414:	4a1c      	ldr	r2, [pc, #112]	@ (8007488 <xPortStartScheduler+0x138>)
 8007416:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007418:	4b1b      	ldr	r3, [pc, #108]	@ (8007488 <xPortStartScheduler+0x138>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007420:	4a19      	ldr	r2, [pc, #100]	@ (8007488 <xPortStartScheduler+0x138>)
 8007422:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	b2da      	uxtb	r2, r3
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800742c:	4b17      	ldr	r3, [pc, #92]	@ (800748c <xPortStartScheduler+0x13c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a16      	ldr	r2, [pc, #88]	@ (800748c <xPortStartScheduler+0x13c>)
 8007432:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007436:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007438:	4b14      	ldr	r3, [pc, #80]	@ (800748c <xPortStartScheduler+0x13c>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a13      	ldr	r2, [pc, #76]	@ (800748c <xPortStartScheduler+0x13c>)
 800743e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007442:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007444:	f000 f8da 	bl	80075fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007448:	4b11      	ldr	r3, [pc, #68]	@ (8007490 <xPortStartScheduler+0x140>)
 800744a:	2200      	movs	r2, #0
 800744c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800744e:	f000 f8f9 	bl	8007644 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007452:	4b10      	ldr	r3, [pc, #64]	@ (8007494 <xPortStartScheduler+0x144>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a0f      	ldr	r2, [pc, #60]	@ (8007494 <xPortStartScheduler+0x144>)
 8007458:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800745c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800745e:	f7ff ff63 	bl	8007328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007462:	f7fe ff95 	bl	8006390 <vTaskSwitchContext>
	prvTaskExitError();
 8007466:	f7ff ff17 	bl	8007298 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	e000ed00 	.word	0xe000ed00
 8007478:	410fc271 	.word	0x410fc271
 800747c:	410fc270 	.word	0x410fc270
 8007480:	e000e400 	.word	0xe000e400
 8007484:	200013a0 	.word	0x200013a0
 8007488:	200013a4 	.word	0x200013a4
 800748c:	e000ed20 	.word	0xe000ed20
 8007490:	2000000c 	.word	0x2000000c
 8007494:	e000ef34 	.word	0xe000ef34

08007498 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
	__asm volatile
 800749e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	607b      	str	r3, [r7, #4]
}
 80074b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80074b2:	4b10      	ldr	r3, [pc, #64]	@ (80074f4 <vPortEnterCritical+0x5c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	3301      	adds	r3, #1
 80074b8:	4a0e      	ldr	r2, [pc, #56]	@ (80074f4 <vPortEnterCritical+0x5c>)
 80074ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074bc:	4b0d      	ldr	r3, [pc, #52]	@ (80074f4 <vPortEnterCritical+0x5c>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d110      	bne.n	80074e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074c4:	4b0c      	ldr	r3, [pc, #48]	@ (80074f8 <vPortEnterCritical+0x60>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00b      	beq.n	80074e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	603b      	str	r3, [r7, #0]
}
 80074e0:	bf00      	nop
 80074e2:	bf00      	nop
 80074e4:	e7fd      	b.n	80074e2 <vPortEnterCritical+0x4a>
	}
}
 80074e6:	bf00      	nop
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	2000000c 	.word	0x2000000c
 80074f8:	e000ed04 	.word	0xe000ed04

080074fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007502:	4b12      	ldr	r3, [pc, #72]	@ (800754c <vPortExitCritical+0x50>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10b      	bne.n	8007522 <vPortExitCritical+0x26>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	607b      	str	r3, [r7, #4]
}
 800751c:	bf00      	nop
 800751e:	bf00      	nop
 8007520:	e7fd      	b.n	800751e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007522:	4b0a      	ldr	r3, [pc, #40]	@ (800754c <vPortExitCritical+0x50>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3b01      	subs	r3, #1
 8007528:	4a08      	ldr	r2, [pc, #32]	@ (800754c <vPortExitCritical+0x50>)
 800752a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800752c:	4b07      	ldr	r3, [pc, #28]	@ (800754c <vPortExitCritical+0x50>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d105      	bne.n	8007540 <vPortExitCritical+0x44>
 8007534:	2300      	movs	r3, #0
 8007536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	f383 8811 	msr	BASEPRI, r3
}
 800753e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	2000000c 	.word	0x2000000c

08007550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007550:	f3ef 8009 	mrs	r0, PSP
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	4b15      	ldr	r3, [pc, #84]	@ (80075b0 <pxCurrentTCBConst>)
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	f01e 0f10 	tst.w	lr, #16
 8007560:	bf08      	it	eq
 8007562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756a:	6010      	str	r0, [r2, #0]
 800756c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007570:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007574:	f380 8811 	msr	BASEPRI, r0
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	f3bf 8f6f 	isb	sy
 8007580:	f7fe ff06 	bl	8006390 <vTaskSwitchContext>
 8007584:	f04f 0000 	mov.w	r0, #0
 8007588:	f380 8811 	msr	BASEPRI, r0
 800758c:	bc09      	pop	{r0, r3}
 800758e:	6819      	ldr	r1, [r3, #0]
 8007590:	6808      	ldr	r0, [r1, #0]
 8007592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007596:	f01e 0f10 	tst.w	lr, #16
 800759a:	bf08      	it	eq
 800759c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80075a0:	f380 8809 	msr	PSP, r0
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	f3af 8000 	nop.w

080075b0 <pxCurrentTCBConst>:
 80075b0:	20000d74 	.word	0x20000d74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80075b4:	bf00      	nop
 80075b6:	bf00      	nop

080075b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
	__asm volatile
 80075be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
 80075ce:	607b      	str	r3, [r7, #4]
}
 80075d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80075d2:	f7fe fe23 	bl	800621c <xTaskIncrementTick>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d003      	beq.n	80075e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80075dc:	4b06      	ldr	r3, [pc, #24]	@ (80075f8 <xPortSysTickHandler+0x40>)
 80075de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	2300      	movs	r3, #0
 80075e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	f383 8811 	msr	BASEPRI, r3
}
 80075ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80075f0:	bf00      	nop
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	e000ed04 	.word	0xe000ed04

080075fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80075fc:	b480      	push	{r7}
 80075fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007600:	4b0b      	ldr	r3, [pc, #44]	@ (8007630 <vPortSetupTimerInterrupt+0x34>)
 8007602:	2200      	movs	r2, #0
 8007604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007606:	4b0b      	ldr	r3, [pc, #44]	@ (8007634 <vPortSetupTimerInterrupt+0x38>)
 8007608:	2200      	movs	r2, #0
 800760a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800760c:	4b0a      	ldr	r3, [pc, #40]	@ (8007638 <vPortSetupTimerInterrupt+0x3c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a0a      	ldr	r2, [pc, #40]	@ (800763c <vPortSetupTimerInterrupt+0x40>)
 8007612:	fba2 2303 	umull	r2, r3, r2, r3
 8007616:	099b      	lsrs	r3, r3, #6
 8007618:	4a09      	ldr	r2, [pc, #36]	@ (8007640 <vPortSetupTimerInterrupt+0x44>)
 800761a:	3b01      	subs	r3, #1
 800761c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800761e:	4b04      	ldr	r3, [pc, #16]	@ (8007630 <vPortSetupTimerInterrupt+0x34>)
 8007620:	2207      	movs	r2, #7
 8007622:	601a      	str	r2, [r3, #0]
}
 8007624:	bf00      	nop
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	e000e010 	.word	0xe000e010
 8007634:	e000e018 	.word	0xe000e018
 8007638:	20000000 	.word	0x20000000
 800763c:	10624dd3 	.word	0x10624dd3
 8007640:	e000e014 	.word	0xe000e014

08007644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007644:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007654 <vPortEnableVFP+0x10>
 8007648:	6801      	ldr	r1, [r0, #0]
 800764a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800764e:	6001      	str	r1, [r0, #0]
 8007650:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007652:	bf00      	nop
 8007654:	e000ed88 	.word	0xe000ed88

08007658 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800765e:	f3ef 8305 	mrs	r3, IPSR
 8007662:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b0f      	cmp	r3, #15
 8007668:	d915      	bls.n	8007696 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800766a:	4a18      	ldr	r2, [pc, #96]	@ (80076cc <vPortValidateInterruptPriority+0x74>)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	4413      	add	r3, r2
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007674:	4b16      	ldr	r3, [pc, #88]	@ (80076d0 <vPortValidateInterruptPriority+0x78>)
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	7afa      	ldrb	r2, [r7, #11]
 800767a:	429a      	cmp	r2, r3
 800767c:	d20b      	bcs.n	8007696 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	607b      	str	r3, [r7, #4]
}
 8007690:	bf00      	nop
 8007692:	bf00      	nop
 8007694:	e7fd      	b.n	8007692 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007696:	4b0f      	ldr	r3, [pc, #60]	@ (80076d4 <vPortValidateInterruptPriority+0x7c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800769e:	4b0e      	ldr	r3, [pc, #56]	@ (80076d8 <vPortValidateInterruptPriority+0x80>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d90b      	bls.n	80076be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80076a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	603b      	str	r3, [r7, #0]
}
 80076b8:	bf00      	nop
 80076ba:	bf00      	nop
 80076bc:	e7fd      	b.n	80076ba <vPortValidateInterruptPriority+0x62>
	}
 80076be:	bf00      	nop
 80076c0:	3714      	adds	r7, #20
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	e000e3f0 	.word	0xe000e3f0
 80076d0:	200013a0 	.word	0x200013a0
 80076d4:	e000ed0c 	.word	0xe000ed0c
 80076d8:	200013a4 	.word	0x200013a4

080076dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b08a      	sub	sp, #40	@ 0x28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80076e4:	2300      	movs	r3, #0
 80076e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80076e8:	f7fe fcdc 	bl	80060a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80076ec:	4b5c      	ldr	r3, [pc, #368]	@ (8007860 <pvPortMalloc+0x184>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80076f4:	f000 f924 	bl	8007940 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80076f8:	4b5a      	ldr	r3, [pc, #360]	@ (8007864 <pvPortMalloc+0x188>)
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4013      	ands	r3, r2
 8007700:	2b00      	cmp	r3, #0
 8007702:	f040 8095 	bne.w	8007830 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d01e      	beq.n	800774a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800770c:	2208      	movs	r2, #8
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4413      	add	r3, r2
 8007712:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f003 0307 	and.w	r3, r3, #7
 800771a:	2b00      	cmp	r3, #0
 800771c:	d015      	beq.n	800774a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f023 0307 	bic.w	r3, r3, #7
 8007724:	3308      	adds	r3, #8
 8007726:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f003 0307 	and.w	r3, r3, #7
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00b      	beq.n	800774a <pvPortMalloc+0x6e>
	__asm volatile
 8007732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	617b      	str	r3, [r7, #20]
}
 8007744:	bf00      	nop
 8007746:	bf00      	nop
 8007748:	e7fd      	b.n	8007746 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d06f      	beq.n	8007830 <pvPortMalloc+0x154>
 8007750:	4b45      	ldr	r3, [pc, #276]	@ (8007868 <pvPortMalloc+0x18c>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	429a      	cmp	r2, r3
 8007758:	d86a      	bhi.n	8007830 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800775a:	4b44      	ldr	r3, [pc, #272]	@ (800786c <pvPortMalloc+0x190>)
 800775c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800775e:	4b43      	ldr	r3, [pc, #268]	@ (800786c <pvPortMalloc+0x190>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007764:	e004      	b.n	8007770 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007768:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800776a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	429a      	cmp	r2, r3
 8007778:	d903      	bls.n	8007782 <pvPortMalloc+0xa6>
 800777a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1f1      	bne.n	8007766 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007782:	4b37      	ldr	r3, [pc, #220]	@ (8007860 <pvPortMalloc+0x184>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007788:	429a      	cmp	r2, r3
 800778a:	d051      	beq.n	8007830 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800778c:	6a3b      	ldr	r3, [r7, #32]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2208      	movs	r2, #8
 8007792:	4413      	add	r3, r2
 8007794:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800779e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a0:	685a      	ldr	r2, [r3, #4]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	1ad2      	subs	r2, r2, r3
 80077a6:	2308      	movs	r3, #8
 80077a8:	005b      	lsls	r3, r3, #1
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d920      	bls.n	80077f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80077ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4413      	add	r3, r2
 80077b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	f003 0307 	and.w	r3, r3, #7
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00b      	beq.n	80077d8 <pvPortMalloc+0xfc>
	__asm volatile
 80077c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c4:	f383 8811 	msr	BASEPRI, r3
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	613b      	str	r3, [r7, #16]
}
 80077d2:	bf00      	nop
 80077d4:	bf00      	nop
 80077d6:	e7fd      	b.n	80077d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80077d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077da:	685a      	ldr	r2, [r3, #4]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	1ad2      	subs	r2, r2, r3
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80077e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80077ea:	69b8      	ldr	r0, [r7, #24]
 80077ec:	f000 f90a 	bl	8007a04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80077f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007868 <pvPortMalloc+0x18c>)
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007868 <pvPortMalloc+0x18c>)
 80077fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077fe:	4b1a      	ldr	r3, [pc, #104]	@ (8007868 <pvPortMalloc+0x18c>)
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	4b1b      	ldr	r3, [pc, #108]	@ (8007870 <pvPortMalloc+0x194>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	429a      	cmp	r2, r3
 8007808:	d203      	bcs.n	8007812 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800780a:	4b17      	ldr	r3, [pc, #92]	@ (8007868 <pvPortMalloc+0x18c>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a18      	ldr	r2, [pc, #96]	@ (8007870 <pvPortMalloc+0x194>)
 8007810:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	4b13      	ldr	r3, [pc, #76]	@ (8007864 <pvPortMalloc+0x188>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	431a      	orrs	r2, r3
 800781c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007822:	2200      	movs	r2, #0
 8007824:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007826:	4b13      	ldr	r3, [pc, #76]	@ (8007874 <pvPortMalloc+0x198>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3301      	adds	r3, #1
 800782c:	4a11      	ldr	r2, [pc, #68]	@ (8007874 <pvPortMalloc+0x198>)
 800782e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007830:	f7fe fc46 	bl	80060c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	f003 0307 	and.w	r3, r3, #7
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00b      	beq.n	8007856 <pvPortMalloc+0x17a>
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	60fb      	str	r3, [r7, #12]
}
 8007850:	bf00      	nop
 8007852:	bf00      	nop
 8007854:	e7fd      	b.n	8007852 <pvPortMalloc+0x176>
	return pvReturn;
 8007856:	69fb      	ldr	r3, [r7, #28]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3728      	adds	r7, #40	@ 0x28
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	20004fb0 	.word	0x20004fb0
 8007864:	20004fc4 	.word	0x20004fc4
 8007868:	20004fb4 	.word	0x20004fb4
 800786c:	20004fa8 	.word	0x20004fa8
 8007870:	20004fb8 	.word	0x20004fb8
 8007874:	20004fbc 	.word	0x20004fbc

08007878 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d04f      	beq.n	800792a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800788a:	2308      	movs	r3, #8
 800788c:	425b      	negs	r3, r3
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	4413      	add	r3, r2
 8007892:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	4b25      	ldr	r3, [pc, #148]	@ (8007934 <vPortFree+0xbc>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4013      	ands	r3, r2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10b      	bne.n	80078be <vPortFree+0x46>
	__asm volatile
 80078a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078aa:	f383 8811 	msr	BASEPRI, r3
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	f3bf 8f4f 	dsb	sy
 80078b6:	60fb      	str	r3, [r7, #12]
}
 80078b8:	bf00      	nop
 80078ba:	bf00      	nop
 80078bc:	e7fd      	b.n	80078ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00b      	beq.n	80078de <vPortFree+0x66>
	__asm volatile
 80078c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ca:	f383 8811 	msr	BASEPRI, r3
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f3bf 8f4f 	dsb	sy
 80078d6:	60bb      	str	r3, [r7, #8]
}
 80078d8:	bf00      	nop
 80078da:	bf00      	nop
 80078dc:	e7fd      	b.n	80078da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	685a      	ldr	r2, [r3, #4]
 80078e2:	4b14      	ldr	r3, [pc, #80]	@ (8007934 <vPortFree+0xbc>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4013      	ands	r3, r2
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d01e      	beq.n	800792a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d11a      	bne.n	800792a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007934 <vPortFree+0xbc>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	43db      	mvns	r3, r3
 80078fe:	401a      	ands	r2, r3
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007904:	f7fe fbce 	bl	80060a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	4b0a      	ldr	r3, [pc, #40]	@ (8007938 <vPortFree+0xc0>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4413      	add	r3, r2
 8007912:	4a09      	ldr	r2, [pc, #36]	@ (8007938 <vPortFree+0xc0>)
 8007914:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007916:	6938      	ldr	r0, [r7, #16]
 8007918:	f000 f874 	bl	8007a04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800791c:	4b07      	ldr	r3, [pc, #28]	@ (800793c <vPortFree+0xc4>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3301      	adds	r3, #1
 8007922:	4a06      	ldr	r2, [pc, #24]	@ (800793c <vPortFree+0xc4>)
 8007924:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007926:	f7fe fbcb 	bl	80060c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800792a:	bf00      	nop
 800792c:	3718      	adds	r7, #24
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	20004fc4 	.word	0x20004fc4
 8007938:	20004fb4 	.word	0x20004fb4
 800793c:	20004fc0 	.word	0x20004fc0

08007940 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007946:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800794a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800794c:	4b27      	ldr	r3, [pc, #156]	@ (80079ec <prvHeapInit+0xac>)
 800794e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f003 0307 	and.w	r3, r3, #7
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00c      	beq.n	8007974 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	3307      	adds	r3, #7
 800795e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f023 0307 	bic.w	r3, r3, #7
 8007966:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007968:	68ba      	ldr	r2, [r7, #8]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	4a1f      	ldr	r2, [pc, #124]	@ (80079ec <prvHeapInit+0xac>)
 8007970:	4413      	add	r3, r2
 8007972:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007978:	4a1d      	ldr	r2, [pc, #116]	@ (80079f0 <prvHeapInit+0xb0>)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800797e:	4b1c      	ldr	r3, [pc, #112]	@ (80079f0 <prvHeapInit+0xb0>)
 8007980:	2200      	movs	r2, #0
 8007982:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	4413      	add	r3, r2
 800798a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800798c:	2208      	movs	r2, #8
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	1a9b      	subs	r3, r3, r2
 8007992:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f023 0307 	bic.w	r3, r3, #7
 800799a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	4a15      	ldr	r2, [pc, #84]	@ (80079f4 <prvHeapInit+0xb4>)
 80079a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80079a2:	4b14      	ldr	r3, [pc, #80]	@ (80079f4 <prvHeapInit+0xb4>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2200      	movs	r2, #0
 80079a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079aa:	4b12      	ldr	r3, [pc, #72]	@ (80079f4 <prvHeapInit+0xb4>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2200      	movs	r2, #0
 80079b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	1ad2      	subs	r2, r2, r3
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80079c0:	4b0c      	ldr	r3, [pc, #48]	@ (80079f4 <prvHeapInit+0xb4>)
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	4a0a      	ldr	r2, [pc, #40]	@ (80079f8 <prvHeapInit+0xb8>)
 80079ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	4a09      	ldr	r2, [pc, #36]	@ (80079fc <prvHeapInit+0xbc>)
 80079d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80079d8:	4b09      	ldr	r3, [pc, #36]	@ (8007a00 <prvHeapInit+0xc0>)
 80079da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80079de:	601a      	str	r2, [r3, #0]
}
 80079e0:	bf00      	nop
 80079e2:	3714      	adds	r7, #20
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr
 80079ec:	200013a8 	.word	0x200013a8
 80079f0:	20004fa8 	.word	0x20004fa8
 80079f4:	20004fb0 	.word	0x20004fb0
 80079f8:	20004fb8 	.word	0x20004fb8
 80079fc:	20004fb4 	.word	0x20004fb4
 8007a00:	20004fc4 	.word	0x20004fc4

08007a04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a0c:	4b28      	ldr	r3, [pc, #160]	@ (8007ab0 <prvInsertBlockIntoFreeList+0xac>)
 8007a0e:	60fb      	str	r3, [r7, #12]
 8007a10:	e002      	b.n	8007a18 <prvInsertBlockIntoFreeList+0x14>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d8f7      	bhi.n	8007a12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d108      	bne.n	8007a46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	441a      	add	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	68ba      	ldr	r2, [r7, #8]
 8007a50:	441a      	add	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d118      	bne.n	8007a8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	4b15      	ldr	r3, [pc, #84]	@ (8007ab4 <prvInsertBlockIntoFreeList+0xb0>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d00d      	beq.n	8007a82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685a      	ldr	r2, [r3, #4]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	441a      	add	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	601a      	str	r2, [r3, #0]
 8007a80:	e008      	b.n	8007a94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a82:	4b0c      	ldr	r3, [pc, #48]	@ (8007ab4 <prvInsertBlockIntoFreeList+0xb0>)
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	601a      	str	r2, [r3, #0]
 8007a8a:	e003      	b.n	8007a94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d002      	beq.n	8007aa2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007aa2:	bf00      	nop
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	20004fa8 	.word	0x20004fa8
 8007ab4:	20004fb0 	.word	0x20004fb0

08007ab8 <__cvt>:
 8007ab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007abc:	ec57 6b10 	vmov	r6, r7, d0
 8007ac0:	2f00      	cmp	r7, #0
 8007ac2:	460c      	mov	r4, r1
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	463b      	mov	r3, r7
 8007ac8:	bfbb      	ittet	lt
 8007aca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007ace:	461f      	movlt	r7, r3
 8007ad0:	2300      	movge	r3, #0
 8007ad2:	232d      	movlt	r3, #45	@ 0x2d
 8007ad4:	700b      	strb	r3, [r1, #0]
 8007ad6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ad8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007adc:	4691      	mov	r9, r2
 8007ade:	f023 0820 	bic.w	r8, r3, #32
 8007ae2:	bfbc      	itt	lt
 8007ae4:	4632      	movlt	r2, r6
 8007ae6:	4616      	movlt	r6, r2
 8007ae8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007aec:	d005      	beq.n	8007afa <__cvt+0x42>
 8007aee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007af2:	d100      	bne.n	8007af6 <__cvt+0x3e>
 8007af4:	3401      	adds	r4, #1
 8007af6:	2102      	movs	r1, #2
 8007af8:	e000      	b.n	8007afc <__cvt+0x44>
 8007afa:	2103      	movs	r1, #3
 8007afc:	ab03      	add	r3, sp, #12
 8007afe:	9301      	str	r3, [sp, #4]
 8007b00:	ab02      	add	r3, sp, #8
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	ec47 6b10 	vmov	d0, r6, r7
 8007b08:	4653      	mov	r3, sl
 8007b0a:	4622      	mov	r2, r4
 8007b0c:	f000 feb0 	bl	8008870 <_dtoa_r>
 8007b10:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007b14:	4605      	mov	r5, r0
 8007b16:	d119      	bne.n	8007b4c <__cvt+0x94>
 8007b18:	f019 0f01 	tst.w	r9, #1
 8007b1c:	d00e      	beq.n	8007b3c <__cvt+0x84>
 8007b1e:	eb00 0904 	add.w	r9, r0, r4
 8007b22:	2200      	movs	r2, #0
 8007b24:	2300      	movs	r3, #0
 8007b26:	4630      	mov	r0, r6
 8007b28:	4639      	mov	r1, r7
 8007b2a:	f7f8 ffd5 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b2e:	b108      	cbz	r0, 8007b34 <__cvt+0x7c>
 8007b30:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b34:	2230      	movs	r2, #48	@ 0x30
 8007b36:	9b03      	ldr	r3, [sp, #12]
 8007b38:	454b      	cmp	r3, r9
 8007b3a:	d31e      	bcc.n	8007b7a <__cvt+0xc2>
 8007b3c:	9b03      	ldr	r3, [sp, #12]
 8007b3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b40:	1b5b      	subs	r3, r3, r5
 8007b42:	4628      	mov	r0, r5
 8007b44:	6013      	str	r3, [r2, #0]
 8007b46:	b004      	add	sp, #16
 8007b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b4c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007b50:	eb00 0904 	add.w	r9, r0, r4
 8007b54:	d1e5      	bne.n	8007b22 <__cvt+0x6a>
 8007b56:	7803      	ldrb	r3, [r0, #0]
 8007b58:	2b30      	cmp	r3, #48	@ 0x30
 8007b5a:	d10a      	bne.n	8007b72 <__cvt+0xba>
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	2300      	movs	r3, #0
 8007b60:	4630      	mov	r0, r6
 8007b62:	4639      	mov	r1, r7
 8007b64:	f7f8 ffb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b68:	b918      	cbnz	r0, 8007b72 <__cvt+0xba>
 8007b6a:	f1c4 0401 	rsb	r4, r4, #1
 8007b6e:	f8ca 4000 	str.w	r4, [sl]
 8007b72:	f8da 3000 	ldr.w	r3, [sl]
 8007b76:	4499      	add	r9, r3
 8007b78:	e7d3      	b.n	8007b22 <__cvt+0x6a>
 8007b7a:	1c59      	adds	r1, r3, #1
 8007b7c:	9103      	str	r1, [sp, #12]
 8007b7e:	701a      	strb	r2, [r3, #0]
 8007b80:	e7d9      	b.n	8007b36 <__cvt+0x7e>

08007b82 <__exponent>:
 8007b82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b84:	2900      	cmp	r1, #0
 8007b86:	bfba      	itte	lt
 8007b88:	4249      	neglt	r1, r1
 8007b8a:	232d      	movlt	r3, #45	@ 0x2d
 8007b8c:	232b      	movge	r3, #43	@ 0x2b
 8007b8e:	2909      	cmp	r1, #9
 8007b90:	7002      	strb	r2, [r0, #0]
 8007b92:	7043      	strb	r3, [r0, #1]
 8007b94:	dd29      	ble.n	8007bea <__exponent+0x68>
 8007b96:	f10d 0307 	add.w	r3, sp, #7
 8007b9a:	461d      	mov	r5, r3
 8007b9c:	270a      	movs	r7, #10
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	fbb1 f6f7 	udiv	r6, r1, r7
 8007ba4:	fb07 1416 	mls	r4, r7, r6, r1
 8007ba8:	3430      	adds	r4, #48	@ 0x30
 8007baa:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007bae:	460c      	mov	r4, r1
 8007bb0:	2c63      	cmp	r4, #99	@ 0x63
 8007bb2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007bb6:	4631      	mov	r1, r6
 8007bb8:	dcf1      	bgt.n	8007b9e <__exponent+0x1c>
 8007bba:	3130      	adds	r1, #48	@ 0x30
 8007bbc:	1e94      	subs	r4, r2, #2
 8007bbe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007bc2:	1c41      	adds	r1, r0, #1
 8007bc4:	4623      	mov	r3, r4
 8007bc6:	42ab      	cmp	r3, r5
 8007bc8:	d30a      	bcc.n	8007be0 <__exponent+0x5e>
 8007bca:	f10d 0309 	add.w	r3, sp, #9
 8007bce:	1a9b      	subs	r3, r3, r2
 8007bd0:	42ac      	cmp	r4, r5
 8007bd2:	bf88      	it	hi
 8007bd4:	2300      	movhi	r3, #0
 8007bd6:	3302      	adds	r3, #2
 8007bd8:	4403      	add	r3, r0
 8007bda:	1a18      	subs	r0, r3, r0
 8007bdc:	b003      	add	sp, #12
 8007bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007be0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007be4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007be8:	e7ed      	b.n	8007bc6 <__exponent+0x44>
 8007bea:	2330      	movs	r3, #48	@ 0x30
 8007bec:	3130      	adds	r1, #48	@ 0x30
 8007bee:	7083      	strb	r3, [r0, #2]
 8007bf0:	70c1      	strb	r1, [r0, #3]
 8007bf2:	1d03      	adds	r3, r0, #4
 8007bf4:	e7f1      	b.n	8007bda <__exponent+0x58>
	...

08007bf8 <_printf_float>:
 8007bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bfc:	b08d      	sub	sp, #52	@ 0x34
 8007bfe:	460c      	mov	r4, r1
 8007c00:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007c04:	4616      	mov	r6, r2
 8007c06:	461f      	mov	r7, r3
 8007c08:	4605      	mov	r5, r0
 8007c0a:	f000 fccd 	bl	80085a8 <_localeconv_r>
 8007c0e:	6803      	ldr	r3, [r0, #0]
 8007c10:	9304      	str	r3, [sp, #16]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7f8 fb34 	bl	8000280 <strlen>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c1c:	f8d8 3000 	ldr.w	r3, [r8]
 8007c20:	9005      	str	r0, [sp, #20]
 8007c22:	3307      	adds	r3, #7
 8007c24:	f023 0307 	bic.w	r3, r3, #7
 8007c28:	f103 0208 	add.w	r2, r3, #8
 8007c2c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007c30:	f8d4 b000 	ldr.w	fp, [r4]
 8007c34:	f8c8 2000 	str.w	r2, [r8]
 8007c38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c3c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007c40:	9307      	str	r3, [sp, #28]
 8007c42:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c46:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007c4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c4e:	4b9c      	ldr	r3, [pc, #624]	@ (8007ec0 <_printf_float+0x2c8>)
 8007c50:	f04f 32ff 	mov.w	r2, #4294967295
 8007c54:	f7f8 ff72 	bl	8000b3c <__aeabi_dcmpun>
 8007c58:	bb70      	cbnz	r0, 8007cb8 <_printf_float+0xc0>
 8007c5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c5e:	4b98      	ldr	r3, [pc, #608]	@ (8007ec0 <_printf_float+0x2c8>)
 8007c60:	f04f 32ff 	mov.w	r2, #4294967295
 8007c64:	f7f8 ff4c 	bl	8000b00 <__aeabi_dcmple>
 8007c68:	bb30      	cbnz	r0, 8007cb8 <_printf_float+0xc0>
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	4640      	mov	r0, r8
 8007c70:	4649      	mov	r1, r9
 8007c72:	f7f8 ff3b 	bl	8000aec <__aeabi_dcmplt>
 8007c76:	b110      	cbz	r0, 8007c7e <_printf_float+0x86>
 8007c78:	232d      	movs	r3, #45	@ 0x2d
 8007c7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c7e:	4a91      	ldr	r2, [pc, #580]	@ (8007ec4 <_printf_float+0x2cc>)
 8007c80:	4b91      	ldr	r3, [pc, #580]	@ (8007ec8 <_printf_float+0x2d0>)
 8007c82:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007c86:	bf94      	ite	ls
 8007c88:	4690      	movls	r8, r2
 8007c8a:	4698      	movhi	r8, r3
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	6123      	str	r3, [r4, #16]
 8007c90:	f02b 0304 	bic.w	r3, fp, #4
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	f04f 0900 	mov.w	r9, #0
 8007c9a:	9700      	str	r7, [sp, #0]
 8007c9c:	4633      	mov	r3, r6
 8007c9e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	f000 f9d2 	bl	800804c <_printf_common>
 8007ca8:	3001      	adds	r0, #1
 8007caa:	f040 808d 	bne.w	8007dc8 <_printf_float+0x1d0>
 8007cae:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb2:	b00d      	add	sp, #52	@ 0x34
 8007cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb8:	4642      	mov	r2, r8
 8007cba:	464b      	mov	r3, r9
 8007cbc:	4640      	mov	r0, r8
 8007cbe:	4649      	mov	r1, r9
 8007cc0:	f7f8 ff3c 	bl	8000b3c <__aeabi_dcmpun>
 8007cc4:	b140      	cbz	r0, 8007cd8 <_printf_float+0xe0>
 8007cc6:	464b      	mov	r3, r9
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	bfbc      	itt	lt
 8007ccc:	232d      	movlt	r3, #45	@ 0x2d
 8007cce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007cd2:	4a7e      	ldr	r2, [pc, #504]	@ (8007ecc <_printf_float+0x2d4>)
 8007cd4:	4b7e      	ldr	r3, [pc, #504]	@ (8007ed0 <_printf_float+0x2d8>)
 8007cd6:	e7d4      	b.n	8007c82 <_printf_float+0x8a>
 8007cd8:	6863      	ldr	r3, [r4, #4]
 8007cda:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007cde:	9206      	str	r2, [sp, #24]
 8007ce0:	1c5a      	adds	r2, r3, #1
 8007ce2:	d13b      	bne.n	8007d5c <_printf_float+0x164>
 8007ce4:	2306      	movs	r3, #6
 8007ce6:	6063      	str	r3, [r4, #4]
 8007ce8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007cec:	2300      	movs	r3, #0
 8007cee:	6022      	str	r2, [r4, #0]
 8007cf0:	9303      	str	r3, [sp, #12]
 8007cf2:	ab0a      	add	r3, sp, #40	@ 0x28
 8007cf4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007cf8:	ab09      	add	r3, sp, #36	@ 0x24
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	6861      	ldr	r1, [r4, #4]
 8007cfe:	ec49 8b10 	vmov	d0, r8, r9
 8007d02:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007d06:	4628      	mov	r0, r5
 8007d08:	f7ff fed6 	bl	8007ab8 <__cvt>
 8007d0c:	9b06      	ldr	r3, [sp, #24]
 8007d0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007d10:	2b47      	cmp	r3, #71	@ 0x47
 8007d12:	4680      	mov	r8, r0
 8007d14:	d129      	bne.n	8007d6a <_printf_float+0x172>
 8007d16:	1cc8      	adds	r0, r1, #3
 8007d18:	db02      	blt.n	8007d20 <_printf_float+0x128>
 8007d1a:	6863      	ldr	r3, [r4, #4]
 8007d1c:	4299      	cmp	r1, r3
 8007d1e:	dd41      	ble.n	8007da4 <_printf_float+0x1ac>
 8007d20:	f1aa 0a02 	sub.w	sl, sl, #2
 8007d24:	fa5f fa8a 	uxtb.w	sl, sl
 8007d28:	3901      	subs	r1, #1
 8007d2a:	4652      	mov	r2, sl
 8007d2c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007d30:	9109      	str	r1, [sp, #36]	@ 0x24
 8007d32:	f7ff ff26 	bl	8007b82 <__exponent>
 8007d36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d38:	1813      	adds	r3, r2, r0
 8007d3a:	2a01      	cmp	r2, #1
 8007d3c:	4681      	mov	r9, r0
 8007d3e:	6123      	str	r3, [r4, #16]
 8007d40:	dc02      	bgt.n	8007d48 <_printf_float+0x150>
 8007d42:	6822      	ldr	r2, [r4, #0]
 8007d44:	07d2      	lsls	r2, r2, #31
 8007d46:	d501      	bpl.n	8007d4c <_printf_float+0x154>
 8007d48:	3301      	adds	r3, #1
 8007d4a:	6123      	str	r3, [r4, #16]
 8007d4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d0a2      	beq.n	8007c9a <_printf_float+0xa2>
 8007d54:	232d      	movs	r3, #45	@ 0x2d
 8007d56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d5a:	e79e      	b.n	8007c9a <_printf_float+0xa2>
 8007d5c:	9a06      	ldr	r2, [sp, #24]
 8007d5e:	2a47      	cmp	r2, #71	@ 0x47
 8007d60:	d1c2      	bne.n	8007ce8 <_printf_float+0xf0>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1c0      	bne.n	8007ce8 <_printf_float+0xf0>
 8007d66:	2301      	movs	r3, #1
 8007d68:	e7bd      	b.n	8007ce6 <_printf_float+0xee>
 8007d6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007d6e:	d9db      	bls.n	8007d28 <_printf_float+0x130>
 8007d70:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007d74:	d118      	bne.n	8007da8 <_printf_float+0x1b0>
 8007d76:	2900      	cmp	r1, #0
 8007d78:	6863      	ldr	r3, [r4, #4]
 8007d7a:	dd0b      	ble.n	8007d94 <_printf_float+0x19c>
 8007d7c:	6121      	str	r1, [r4, #16]
 8007d7e:	b913      	cbnz	r3, 8007d86 <_printf_float+0x18e>
 8007d80:	6822      	ldr	r2, [r4, #0]
 8007d82:	07d0      	lsls	r0, r2, #31
 8007d84:	d502      	bpl.n	8007d8c <_printf_float+0x194>
 8007d86:	3301      	adds	r3, #1
 8007d88:	440b      	add	r3, r1
 8007d8a:	6123      	str	r3, [r4, #16]
 8007d8c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007d8e:	f04f 0900 	mov.w	r9, #0
 8007d92:	e7db      	b.n	8007d4c <_printf_float+0x154>
 8007d94:	b913      	cbnz	r3, 8007d9c <_printf_float+0x1a4>
 8007d96:	6822      	ldr	r2, [r4, #0]
 8007d98:	07d2      	lsls	r2, r2, #31
 8007d9a:	d501      	bpl.n	8007da0 <_printf_float+0x1a8>
 8007d9c:	3302      	adds	r3, #2
 8007d9e:	e7f4      	b.n	8007d8a <_printf_float+0x192>
 8007da0:	2301      	movs	r3, #1
 8007da2:	e7f2      	b.n	8007d8a <_printf_float+0x192>
 8007da4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007da8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007daa:	4299      	cmp	r1, r3
 8007dac:	db05      	blt.n	8007dba <_printf_float+0x1c2>
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	6121      	str	r1, [r4, #16]
 8007db2:	07d8      	lsls	r0, r3, #31
 8007db4:	d5ea      	bpl.n	8007d8c <_printf_float+0x194>
 8007db6:	1c4b      	adds	r3, r1, #1
 8007db8:	e7e7      	b.n	8007d8a <_printf_float+0x192>
 8007dba:	2900      	cmp	r1, #0
 8007dbc:	bfd4      	ite	le
 8007dbe:	f1c1 0202 	rsble	r2, r1, #2
 8007dc2:	2201      	movgt	r2, #1
 8007dc4:	4413      	add	r3, r2
 8007dc6:	e7e0      	b.n	8007d8a <_printf_float+0x192>
 8007dc8:	6823      	ldr	r3, [r4, #0]
 8007dca:	055a      	lsls	r2, r3, #21
 8007dcc:	d407      	bmi.n	8007dde <_printf_float+0x1e6>
 8007dce:	6923      	ldr	r3, [r4, #16]
 8007dd0:	4642      	mov	r2, r8
 8007dd2:	4631      	mov	r1, r6
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	47b8      	blx	r7
 8007dd8:	3001      	adds	r0, #1
 8007dda:	d12b      	bne.n	8007e34 <_printf_float+0x23c>
 8007ddc:	e767      	b.n	8007cae <_printf_float+0xb6>
 8007dde:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007de2:	f240 80dd 	bls.w	8007fa0 <_printf_float+0x3a8>
 8007de6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007dea:	2200      	movs	r2, #0
 8007dec:	2300      	movs	r3, #0
 8007dee:	f7f8 fe73 	bl	8000ad8 <__aeabi_dcmpeq>
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d033      	beq.n	8007e5e <_printf_float+0x266>
 8007df6:	4a37      	ldr	r2, [pc, #220]	@ (8007ed4 <_printf_float+0x2dc>)
 8007df8:	2301      	movs	r3, #1
 8007dfa:	4631      	mov	r1, r6
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	47b8      	blx	r7
 8007e00:	3001      	adds	r0, #1
 8007e02:	f43f af54 	beq.w	8007cae <_printf_float+0xb6>
 8007e06:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007e0a:	4543      	cmp	r3, r8
 8007e0c:	db02      	blt.n	8007e14 <_printf_float+0x21c>
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	07d8      	lsls	r0, r3, #31
 8007e12:	d50f      	bpl.n	8007e34 <_printf_float+0x23c>
 8007e14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e18:	4631      	mov	r1, r6
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	47b8      	blx	r7
 8007e1e:	3001      	adds	r0, #1
 8007e20:	f43f af45 	beq.w	8007cae <_printf_float+0xb6>
 8007e24:	f04f 0900 	mov.w	r9, #0
 8007e28:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e2c:	f104 0a1a 	add.w	sl, r4, #26
 8007e30:	45c8      	cmp	r8, r9
 8007e32:	dc09      	bgt.n	8007e48 <_printf_float+0x250>
 8007e34:	6823      	ldr	r3, [r4, #0]
 8007e36:	079b      	lsls	r3, r3, #30
 8007e38:	f100 8103 	bmi.w	8008042 <_printf_float+0x44a>
 8007e3c:	68e0      	ldr	r0, [r4, #12]
 8007e3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e40:	4298      	cmp	r0, r3
 8007e42:	bfb8      	it	lt
 8007e44:	4618      	movlt	r0, r3
 8007e46:	e734      	b.n	8007cb2 <_printf_float+0xba>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	4652      	mov	r2, sl
 8007e4c:	4631      	mov	r1, r6
 8007e4e:	4628      	mov	r0, r5
 8007e50:	47b8      	blx	r7
 8007e52:	3001      	adds	r0, #1
 8007e54:	f43f af2b 	beq.w	8007cae <_printf_float+0xb6>
 8007e58:	f109 0901 	add.w	r9, r9, #1
 8007e5c:	e7e8      	b.n	8007e30 <_printf_float+0x238>
 8007e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	dc39      	bgt.n	8007ed8 <_printf_float+0x2e0>
 8007e64:	4a1b      	ldr	r2, [pc, #108]	@ (8007ed4 <_printf_float+0x2dc>)
 8007e66:	2301      	movs	r3, #1
 8007e68:	4631      	mov	r1, r6
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	47b8      	blx	r7
 8007e6e:	3001      	adds	r0, #1
 8007e70:	f43f af1d 	beq.w	8007cae <_printf_float+0xb6>
 8007e74:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007e78:	ea59 0303 	orrs.w	r3, r9, r3
 8007e7c:	d102      	bne.n	8007e84 <_printf_float+0x28c>
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	07d9      	lsls	r1, r3, #31
 8007e82:	d5d7      	bpl.n	8007e34 <_printf_float+0x23c>
 8007e84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e88:	4631      	mov	r1, r6
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	47b8      	blx	r7
 8007e8e:	3001      	adds	r0, #1
 8007e90:	f43f af0d 	beq.w	8007cae <_printf_float+0xb6>
 8007e94:	f04f 0a00 	mov.w	sl, #0
 8007e98:	f104 0b1a 	add.w	fp, r4, #26
 8007e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e9e:	425b      	negs	r3, r3
 8007ea0:	4553      	cmp	r3, sl
 8007ea2:	dc01      	bgt.n	8007ea8 <_printf_float+0x2b0>
 8007ea4:	464b      	mov	r3, r9
 8007ea6:	e793      	b.n	8007dd0 <_printf_float+0x1d8>
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	465a      	mov	r2, fp
 8007eac:	4631      	mov	r1, r6
 8007eae:	4628      	mov	r0, r5
 8007eb0:	47b8      	blx	r7
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	f43f aefb 	beq.w	8007cae <_printf_float+0xb6>
 8007eb8:	f10a 0a01 	add.w	sl, sl, #1
 8007ebc:	e7ee      	b.n	8007e9c <_printf_float+0x2a4>
 8007ebe:	bf00      	nop
 8007ec0:	7fefffff 	.word	0x7fefffff
 8007ec4:	0800a54c 	.word	0x0800a54c
 8007ec8:	0800a550 	.word	0x0800a550
 8007ecc:	0800a554 	.word	0x0800a554
 8007ed0:	0800a558 	.word	0x0800a558
 8007ed4:	0800a55c 	.word	0x0800a55c
 8007ed8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007eda:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007ede:	4553      	cmp	r3, sl
 8007ee0:	bfa8      	it	ge
 8007ee2:	4653      	movge	r3, sl
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	4699      	mov	r9, r3
 8007ee8:	dc36      	bgt.n	8007f58 <_printf_float+0x360>
 8007eea:	f04f 0b00 	mov.w	fp, #0
 8007eee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ef2:	f104 021a 	add.w	r2, r4, #26
 8007ef6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007ef8:	9306      	str	r3, [sp, #24]
 8007efa:	eba3 0309 	sub.w	r3, r3, r9
 8007efe:	455b      	cmp	r3, fp
 8007f00:	dc31      	bgt.n	8007f66 <_printf_float+0x36e>
 8007f02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f04:	459a      	cmp	sl, r3
 8007f06:	dc3a      	bgt.n	8007f7e <_printf_float+0x386>
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	07da      	lsls	r2, r3, #31
 8007f0c:	d437      	bmi.n	8007f7e <_printf_float+0x386>
 8007f0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f10:	ebaa 0903 	sub.w	r9, sl, r3
 8007f14:	9b06      	ldr	r3, [sp, #24]
 8007f16:	ebaa 0303 	sub.w	r3, sl, r3
 8007f1a:	4599      	cmp	r9, r3
 8007f1c:	bfa8      	it	ge
 8007f1e:	4699      	movge	r9, r3
 8007f20:	f1b9 0f00 	cmp.w	r9, #0
 8007f24:	dc33      	bgt.n	8007f8e <_printf_float+0x396>
 8007f26:	f04f 0800 	mov.w	r8, #0
 8007f2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f2e:	f104 0b1a 	add.w	fp, r4, #26
 8007f32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f34:	ebaa 0303 	sub.w	r3, sl, r3
 8007f38:	eba3 0309 	sub.w	r3, r3, r9
 8007f3c:	4543      	cmp	r3, r8
 8007f3e:	f77f af79 	ble.w	8007e34 <_printf_float+0x23c>
 8007f42:	2301      	movs	r3, #1
 8007f44:	465a      	mov	r2, fp
 8007f46:	4631      	mov	r1, r6
 8007f48:	4628      	mov	r0, r5
 8007f4a:	47b8      	blx	r7
 8007f4c:	3001      	adds	r0, #1
 8007f4e:	f43f aeae 	beq.w	8007cae <_printf_float+0xb6>
 8007f52:	f108 0801 	add.w	r8, r8, #1
 8007f56:	e7ec      	b.n	8007f32 <_printf_float+0x33a>
 8007f58:	4642      	mov	r2, r8
 8007f5a:	4631      	mov	r1, r6
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	47b8      	blx	r7
 8007f60:	3001      	adds	r0, #1
 8007f62:	d1c2      	bne.n	8007eea <_printf_float+0x2f2>
 8007f64:	e6a3      	b.n	8007cae <_printf_float+0xb6>
 8007f66:	2301      	movs	r3, #1
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	9206      	str	r2, [sp, #24]
 8007f6e:	47b8      	blx	r7
 8007f70:	3001      	adds	r0, #1
 8007f72:	f43f ae9c 	beq.w	8007cae <_printf_float+0xb6>
 8007f76:	9a06      	ldr	r2, [sp, #24]
 8007f78:	f10b 0b01 	add.w	fp, fp, #1
 8007f7c:	e7bb      	b.n	8007ef6 <_printf_float+0x2fe>
 8007f7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f82:	4631      	mov	r1, r6
 8007f84:	4628      	mov	r0, r5
 8007f86:	47b8      	blx	r7
 8007f88:	3001      	adds	r0, #1
 8007f8a:	d1c0      	bne.n	8007f0e <_printf_float+0x316>
 8007f8c:	e68f      	b.n	8007cae <_printf_float+0xb6>
 8007f8e:	9a06      	ldr	r2, [sp, #24]
 8007f90:	464b      	mov	r3, r9
 8007f92:	4442      	add	r2, r8
 8007f94:	4631      	mov	r1, r6
 8007f96:	4628      	mov	r0, r5
 8007f98:	47b8      	blx	r7
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	d1c3      	bne.n	8007f26 <_printf_float+0x32e>
 8007f9e:	e686      	b.n	8007cae <_printf_float+0xb6>
 8007fa0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007fa4:	f1ba 0f01 	cmp.w	sl, #1
 8007fa8:	dc01      	bgt.n	8007fae <_printf_float+0x3b6>
 8007faa:	07db      	lsls	r3, r3, #31
 8007fac:	d536      	bpl.n	800801c <_printf_float+0x424>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	4642      	mov	r2, r8
 8007fb2:	4631      	mov	r1, r6
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	47b8      	blx	r7
 8007fb8:	3001      	adds	r0, #1
 8007fba:	f43f ae78 	beq.w	8007cae <_printf_float+0xb6>
 8007fbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fc2:	4631      	mov	r1, r6
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	47b8      	blx	r7
 8007fc8:	3001      	adds	r0, #1
 8007fca:	f43f ae70 	beq.w	8007cae <_printf_float+0xb6>
 8007fce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fda:	f7f8 fd7d 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fde:	b9c0      	cbnz	r0, 8008012 <_printf_float+0x41a>
 8007fe0:	4653      	mov	r3, sl
 8007fe2:	f108 0201 	add.w	r2, r8, #1
 8007fe6:	4631      	mov	r1, r6
 8007fe8:	4628      	mov	r0, r5
 8007fea:	47b8      	blx	r7
 8007fec:	3001      	adds	r0, #1
 8007fee:	d10c      	bne.n	800800a <_printf_float+0x412>
 8007ff0:	e65d      	b.n	8007cae <_printf_float+0xb6>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	465a      	mov	r2, fp
 8007ff6:	4631      	mov	r1, r6
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	47b8      	blx	r7
 8007ffc:	3001      	adds	r0, #1
 8007ffe:	f43f ae56 	beq.w	8007cae <_printf_float+0xb6>
 8008002:	f108 0801 	add.w	r8, r8, #1
 8008006:	45d0      	cmp	r8, sl
 8008008:	dbf3      	blt.n	8007ff2 <_printf_float+0x3fa>
 800800a:	464b      	mov	r3, r9
 800800c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008010:	e6df      	b.n	8007dd2 <_printf_float+0x1da>
 8008012:	f04f 0800 	mov.w	r8, #0
 8008016:	f104 0b1a 	add.w	fp, r4, #26
 800801a:	e7f4      	b.n	8008006 <_printf_float+0x40e>
 800801c:	2301      	movs	r3, #1
 800801e:	4642      	mov	r2, r8
 8008020:	e7e1      	b.n	8007fe6 <_printf_float+0x3ee>
 8008022:	2301      	movs	r3, #1
 8008024:	464a      	mov	r2, r9
 8008026:	4631      	mov	r1, r6
 8008028:	4628      	mov	r0, r5
 800802a:	47b8      	blx	r7
 800802c:	3001      	adds	r0, #1
 800802e:	f43f ae3e 	beq.w	8007cae <_printf_float+0xb6>
 8008032:	f108 0801 	add.w	r8, r8, #1
 8008036:	68e3      	ldr	r3, [r4, #12]
 8008038:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800803a:	1a5b      	subs	r3, r3, r1
 800803c:	4543      	cmp	r3, r8
 800803e:	dcf0      	bgt.n	8008022 <_printf_float+0x42a>
 8008040:	e6fc      	b.n	8007e3c <_printf_float+0x244>
 8008042:	f04f 0800 	mov.w	r8, #0
 8008046:	f104 0919 	add.w	r9, r4, #25
 800804a:	e7f4      	b.n	8008036 <_printf_float+0x43e>

0800804c <_printf_common>:
 800804c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008050:	4616      	mov	r6, r2
 8008052:	4698      	mov	r8, r3
 8008054:	688a      	ldr	r2, [r1, #8]
 8008056:	690b      	ldr	r3, [r1, #16]
 8008058:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800805c:	4293      	cmp	r3, r2
 800805e:	bfb8      	it	lt
 8008060:	4613      	movlt	r3, r2
 8008062:	6033      	str	r3, [r6, #0]
 8008064:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008068:	4607      	mov	r7, r0
 800806a:	460c      	mov	r4, r1
 800806c:	b10a      	cbz	r2, 8008072 <_printf_common+0x26>
 800806e:	3301      	adds	r3, #1
 8008070:	6033      	str	r3, [r6, #0]
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	0699      	lsls	r1, r3, #26
 8008076:	bf42      	ittt	mi
 8008078:	6833      	ldrmi	r3, [r6, #0]
 800807a:	3302      	addmi	r3, #2
 800807c:	6033      	strmi	r3, [r6, #0]
 800807e:	6825      	ldr	r5, [r4, #0]
 8008080:	f015 0506 	ands.w	r5, r5, #6
 8008084:	d106      	bne.n	8008094 <_printf_common+0x48>
 8008086:	f104 0a19 	add.w	sl, r4, #25
 800808a:	68e3      	ldr	r3, [r4, #12]
 800808c:	6832      	ldr	r2, [r6, #0]
 800808e:	1a9b      	subs	r3, r3, r2
 8008090:	42ab      	cmp	r3, r5
 8008092:	dc26      	bgt.n	80080e2 <_printf_common+0x96>
 8008094:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008098:	6822      	ldr	r2, [r4, #0]
 800809a:	3b00      	subs	r3, #0
 800809c:	bf18      	it	ne
 800809e:	2301      	movne	r3, #1
 80080a0:	0692      	lsls	r2, r2, #26
 80080a2:	d42b      	bmi.n	80080fc <_printf_common+0xb0>
 80080a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80080a8:	4641      	mov	r1, r8
 80080aa:	4638      	mov	r0, r7
 80080ac:	47c8      	blx	r9
 80080ae:	3001      	adds	r0, #1
 80080b0:	d01e      	beq.n	80080f0 <_printf_common+0xa4>
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	6922      	ldr	r2, [r4, #16]
 80080b6:	f003 0306 	and.w	r3, r3, #6
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	bf02      	ittt	eq
 80080be:	68e5      	ldreq	r5, [r4, #12]
 80080c0:	6833      	ldreq	r3, [r6, #0]
 80080c2:	1aed      	subeq	r5, r5, r3
 80080c4:	68a3      	ldr	r3, [r4, #8]
 80080c6:	bf0c      	ite	eq
 80080c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080cc:	2500      	movne	r5, #0
 80080ce:	4293      	cmp	r3, r2
 80080d0:	bfc4      	itt	gt
 80080d2:	1a9b      	subgt	r3, r3, r2
 80080d4:	18ed      	addgt	r5, r5, r3
 80080d6:	2600      	movs	r6, #0
 80080d8:	341a      	adds	r4, #26
 80080da:	42b5      	cmp	r5, r6
 80080dc:	d11a      	bne.n	8008114 <_printf_common+0xc8>
 80080de:	2000      	movs	r0, #0
 80080e0:	e008      	b.n	80080f4 <_printf_common+0xa8>
 80080e2:	2301      	movs	r3, #1
 80080e4:	4652      	mov	r2, sl
 80080e6:	4641      	mov	r1, r8
 80080e8:	4638      	mov	r0, r7
 80080ea:	47c8      	blx	r9
 80080ec:	3001      	adds	r0, #1
 80080ee:	d103      	bne.n	80080f8 <_printf_common+0xac>
 80080f0:	f04f 30ff 	mov.w	r0, #4294967295
 80080f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080f8:	3501      	adds	r5, #1
 80080fa:	e7c6      	b.n	800808a <_printf_common+0x3e>
 80080fc:	18e1      	adds	r1, r4, r3
 80080fe:	1c5a      	adds	r2, r3, #1
 8008100:	2030      	movs	r0, #48	@ 0x30
 8008102:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008106:	4422      	add	r2, r4
 8008108:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800810c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008110:	3302      	adds	r3, #2
 8008112:	e7c7      	b.n	80080a4 <_printf_common+0x58>
 8008114:	2301      	movs	r3, #1
 8008116:	4622      	mov	r2, r4
 8008118:	4641      	mov	r1, r8
 800811a:	4638      	mov	r0, r7
 800811c:	47c8      	blx	r9
 800811e:	3001      	adds	r0, #1
 8008120:	d0e6      	beq.n	80080f0 <_printf_common+0xa4>
 8008122:	3601      	adds	r6, #1
 8008124:	e7d9      	b.n	80080da <_printf_common+0x8e>
	...

08008128 <_printf_i>:
 8008128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800812c:	7e0f      	ldrb	r7, [r1, #24]
 800812e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008130:	2f78      	cmp	r7, #120	@ 0x78
 8008132:	4691      	mov	r9, r2
 8008134:	4680      	mov	r8, r0
 8008136:	460c      	mov	r4, r1
 8008138:	469a      	mov	sl, r3
 800813a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800813e:	d807      	bhi.n	8008150 <_printf_i+0x28>
 8008140:	2f62      	cmp	r7, #98	@ 0x62
 8008142:	d80a      	bhi.n	800815a <_printf_i+0x32>
 8008144:	2f00      	cmp	r7, #0
 8008146:	f000 80d2 	beq.w	80082ee <_printf_i+0x1c6>
 800814a:	2f58      	cmp	r7, #88	@ 0x58
 800814c:	f000 80b9 	beq.w	80082c2 <_printf_i+0x19a>
 8008150:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008154:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008158:	e03a      	b.n	80081d0 <_printf_i+0xa8>
 800815a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800815e:	2b15      	cmp	r3, #21
 8008160:	d8f6      	bhi.n	8008150 <_printf_i+0x28>
 8008162:	a101      	add	r1, pc, #4	@ (adr r1, 8008168 <_printf_i+0x40>)
 8008164:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008168:	080081c1 	.word	0x080081c1
 800816c:	080081d5 	.word	0x080081d5
 8008170:	08008151 	.word	0x08008151
 8008174:	08008151 	.word	0x08008151
 8008178:	08008151 	.word	0x08008151
 800817c:	08008151 	.word	0x08008151
 8008180:	080081d5 	.word	0x080081d5
 8008184:	08008151 	.word	0x08008151
 8008188:	08008151 	.word	0x08008151
 800818c:	08008151 	.word	0x08008151
 8008190:	08008151 	.word	0x08008151
 8008194:	080082d5 	.word	0x080082d5
 8008198:	080081ff 	.word	0x080081ff
 800819c:	0800828f 	.word	0x0800828f
 80081a0:	08008151 	.word	0x08008151
 80081a4:	08008151 	.word	0x08008151
 80081a8:	080082f7 	.word	0x080082f7
 80081ac:	08008151 	.word	0x08008151
 80081b0:	080081ff 	.word	0x080081ff
 80081b4:	08008151 	.word	0x08008151
 80081b8:	08008151 	.word	0x08008151
 80081bc:	08008297 	.word	0x08008297
 80081c0:	6833      	ldr	r3, [r6, #0]
 80081c2:	1d1a      	adds	r2, r3, #4
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	6032      	str	r2, [r6, #0]
 80081c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80081cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80081d0:	2301      	movs	r3, #1
 80081d2:	e09d      	b.n	8008310 <_printf_i+0x1e8>
 80081d4:	6833      	ldr	r3, [r6, #0]
 80081d6:	6820      	ldr	r0, [r4, #0]
 80081d8:	1d19      	adds	r1, r3, #4
 80081da:	6031      	str	r1, [r6, #0]
 80081dc:	0606      	lsls	r6, r0, #24
 80081de:	d501      	bpl.n	80081e4 <_printf_i+0xbc>
 80081e0:	681d      	ldr	r5, [r3, #0]
 80081e2:	e003      	b.n	80081ec <_printf_i+0xc4>
 80081e4:	0645      	lsls	r5, r0, #25
 80081e6:	d5fb      	bpl.n	80081e0 <_printf_i+0xb8>
 80081e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80081ec:	2d00      	cmp	r5, #0
 80081ee:	da03      	bge.n	80081f8 <_printf_i+0xd0>
 80081f0:	232d      	movs	r3, #45	@ 0x2d
 80081f2:	426d      	negs	r5, r5
 80081f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081f8:	4859      	ldr	r0, [pc, #356]	@ (8008360 <_printf_i+0x238>)
 80081fa:	230a      	movs	r3, #10
 80081fc:	e011      	b.n	8008222 <_printf_i+0xfa>
 80081fe:	6821      	ldr	r1, [r4, #0]
 8008200:	6833      	ldr	r3, [r6, #0]
 8008202:	0608      	lsls	r0, r1, #24
 8008204:	f853 5b04 	ldr.w	r5, [r3], #4
 8008208:	d402      	bmi.n	8008210 <_printf_i+0xe8>
 800820a:	0649      	lsls	r1, r1, #25
 800820c:	bf48      	it	mi
 800820e:	b2ad      	uxthmi	r5, r5
 8008210:	2f6f      	cmp	r7, #111	@ 0x6f
 8008212:	4853      	ldr	r0, [pc, #332]	@ (8008360 <_printf_i+0x238>)
 8008214:	6033      	str	r3, [r6, #0]
 8008216:	bf14      	ite	ne
 8008218:	230a      	movne	r3, #10
 800821a:	2308      	moveq	r3, #8
 800821c:	2100      	movs	r1, #0
 800821e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008222:	6866      	ldr	r6, [r4, #4]
 8008224:	60a6      	str	r6, [r4, #8]
 8008226:	2e00      	cmp	r6, #0
 8008228:	bfa2      	ittt	ge
 800822a:	6821      	ldrge	r1, [r4, #0]
 800822c:	f021 0104 	bicge.w	r1, r1, #4
 8008230:	6021      	strge	r1, [r4, #0]
 8008232:	b90d      	cbnz	r5, 8008238 <_printf_i+0x110>
 8008234:	2e00      	cmp	r6, #0
 8008236:	d04b      	beq.n	80082d0 <_printf_i+0x1a8>
 8008238:	4616      	mov	r6, r2
 800823a:	fbb5 f1f3 	udiv	r1, r5, r3
 800823e:	fb03 5711 	mls	r7, r3, r1, r5
 8008242:	5dc7      	ldrb	r7, [r0, r7]
 8008244:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008248:	462f      	mov	r7, r5
 800824a:	42bb      	cmp	r3, r7
 800824c:	460d      	mov	r5, r1
 800824e:	d9f4      	bls.n	800823a <_printf_i+0x112>
 8008250:	2b08      	cmp	r3, #8
 8008252:	d10b      	bne.n	800826c <_printf_i+0x144>
 8008254:	6823      	ldr	r3, [r4, #0]
 8008256:	07df      	lsls	r7, r3, #31
 8008258:	d508      	bpl.n	800826c <_printf_i+0x144>
 800825a:	6923      	ldr	r3, [r4, #16]
 800825c:	6861      	ldr	r1, [r4, #4]
 800825e:	4299      	cmp	r1, r3
 8008260:	bfde      	ittt	le
 8008262:	2330      	movle	r3, #48	@ 0x30
 8008264:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008268:	f106 36ff 	addle.w	r6, r6, #4294967295
 800826c:	1b92      	subs	r2, r2, r6
 800826e:	6122      	str	r2, [r4, #16]
 8008270:	f8cd a000 	str.w	sl, [sp]
 8008274:	464b      	mov	r3, r9
 8008276:	aa03      	add	r2, sp, #12
 8008278:	4621      	mov	r1, r4
 800827a:	4640      	mov	r0, r8
 800827c:	f7ff fee6 	bl	800804c <_printf_common>
 8008280:	3001      	adds	r0, #1
 8008282:	d14a      	bne.n	800831a <_printf_i+0x1f2>
 8008284:	f04f 30ff 	mov.w	r0, #4294967295
 8008288:	b004      	add	sp, #16
 800828a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	f043 0320 	orr.w	r3, r3, #32
 8008294:	6023      	str	r3, [r4, #0]
 8008296:	4833      	ldr	r0, [pc, #204]	@ (8008364 <_printf_i+0x23c>)
 8008298:	2778      	movs	r7, #120	@ 0x78
 800829a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	6831      	ldr	r1, [r6, #0]
 80082a2:	061f      	lsls	r7, r3, #24
 80082a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80082a8:	d402      	bmi.n	80082b0 <_printf_i+0x188>
 80082aa:	065f      	lsls	r7, r3, #25
 80082ac:	bf48      	it	mi
 80082ae:	b2ad      	uxthmi	r5, r5
 80082b0:	6031      	str	r1, [r6, #0]
 80082b2:	07d9      	lsls	r1, r3, #31
 80082b4:	bf44      	itt	mi
 80082b6:	f043 0320 	orrmi.w	r3, r3, #32
 80082ba:	6023      	strmi	r3, [r4, #0]
 80082bc:	b11d      	cbz	r5, 80082c6 <_printf_i+0x19e>
 80082be:	2310      	movs	r3, #16
 80082c0:	e7ac      	b.n	800821c <_printf_i+0xf4>
 80082c2:	4827      	ldr	r0, [pc, #156]	@ (8008360 <_printf_i+0x238>)
 80082c4:	e7e9      	b.n	800829a <_printf_i+0x172>
 80082c6:	6823      	ldr	r3, [r4, #0]
 80082c8:	f023 0320 	bic.w	r3, r3, #32
 80082cc:	6023      	str	r3, [r4, #0]
 80082ce:	e7f6      	b.n	80082be <_printf_i+0x196>
 80082d0:	4616      	mov	r6, r2
 80082d2:	e7bd      	b.n	8008250 <_printf_i+0x128>
 80082d4:	6833      	ldr	r3, [r6, #0]
 80082d6:	6825      	ldr	r5, [r4, #0]
 80082d8:	6961      	ldr	r1, [r4, #20]
 80082da:	1d18      	adds	r0, r3, #4
 80082dc:	6030      	str	r0, [r6, #0]
 80082de:	062e      	lsls	r6, r5, #24
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	d501      	bpl.n	80082e8 <_printf_i+0x1c0>
 80082e4:	6019      	str	r1, [r3, #0]
 80082e6:	e002      	b.n	80082ee <_printf_i+0x1c6>
 80082e8:	0668      	lsls	r0, r5, #25
 80082ea:	d5fb      	bpl.n	80082e4 <_printf_i+0x1bc>
 80082ec:	8019      	strh	r1, [r3, #0]
 80082ee:	2300      	movs	r3, #0
 80082f0:	6123      	str	r3, [r4, #16]
 80082f2:	4616      	mov	r6, r2
 80082f4:	e7bc      	b.n	8008270 <_printf_i+0x148>
 80082f6:	6833      	ldr	r3, [r6, #0]
 80082f8:	1d1a      	adds	r2, r3, #4
 80082fa:	6032      	str	r2, [r6, #0]
 80082fc:	681e      	ldr	r6, [r3, #0]
 80082fe:	6862      	ldr	r2, [r4, #4]
 8008300:	2100      	movs	r1, #0
 8008302:	4630      	mov	r0, r6
 8008304:	f7f7 ff6c 	bl	80001e0 <memchr>
 8008308:	b108      	cbz	r0, 800830e <_printf_i+0x1e6>
 800830a:	1b80      	subs	r0, r0, r6
 800830c:	6060      	str	r0, [r4, #4]
 800830e:	6863      	ldr	r3, [r4, #4]
 8008310:	6123      	str	r3, [r4, #16]
 8008312:	2300      	movs	r3, #0
 8008314:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008318:	e7aa      	b.n	8008270 <_printf_i+0x148>
 800831a:	6923      	ldr	r3, [r4, #16]
 800831c:	4632      	mov	r2, r6
 800831e:	4649      	mov	r1, r9
 8008320:	4640      	mov	r0, r8
 8008322:	47d0      	blx	sl
 8008324:	3001      	adds	r0, #1
 8008326:	d0ad      	beq.n	8008284 <_printf_i+0x15c>
 8008328:	6823      	ldr	r3, [r4, #0]
 800832a:	079b      	lsls	r3, r3, #30
 800832c:	d413      	bmi.n	8008356 <_printf_i+0x22e>
 800832e:	68e0      	ldr	r0, [r4, #12]
 8008330:	9b03      	ldr	r3, [sp, #12]
 8008332:	4298      	cmp	r0, r3
 8008334:	bfb8      	it	lt
 8008336:	4618      	movlt	r0, r3
 8008338:	e7a6      	b.n	8008288 <_printf_i+0x160>
 800833a:	2301      	movs	r3, #1
 800833c:	4632      	mov	r2, r6
 800833e:	4649      	mov	r1, r9
 8008340:	4640      	mov	r0, r8
 8008342:	47d0      	blx	sl
 8008344:	3001      	adds	r0, #1
 8008346:	d09d      	beq.n	8008284 <_printf_i+0x15c>
 8008348:	3501      	adds	r5, #1
 800834a:	68e3      	ldr	r3, [r4, #12]
 800834c:	9903      	ldr	r1, [sp, #12]
 800834e:	1a5b      	subs	r3, r3, r1
 8008350:	42ab      	cmp	r3, r5
 8008352:	dcf2      	bgt.n	800833a <_printf_i+0x212>
 8008354:	e7eb      	b.n	800832e <_printf_i+0x206>
 8008356:	2500      	movs	r5, #0
 8008358:	f104 0619 	add.w	r6, r4, #25
 800835c:	e7f5      	b.n	800834a <_printf_i+0x222>
 800835e:	bf00      	nop
 8008360:	0800a55e 	.word	0x0800a55e
 8008364:	0800a56f 	.word	0x0800a56f

08008368 <std>:
 8008368:	2300      	movs	r3, #0
 800836a:	b510      	push	{r4, lr}
 800836c:	4604      	mov	r4, r0
 800836e:	e9c0 3300 	strd	r3, r3, [r0]
 8008372:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008376:	6083      	str	r3, [r0, #8]
 8008378:	8181      	strh	r1, [r0, #12]
 800837a:	6643      	str	r3, [r0, #100]	@ 0x64
 800837c:	81c2      	strh	r2, [r0, #14]
 800837e:	6183      	str	r3, [r0, #24]
 8008380:	4619      	mov	r1, r3
 8008382:	2208      	movs	r2, #8
 8008384:	305c      	adds	r0, #92	@ 0x5c
 8008386:	f000 f906 	bl	8008596 <memset>
 800838a:	4b0d      	ldr	r3, [pc, #52]	@ (80083c0 <std+0x58>)
 800838c:	6263      	str	r3, [r4, #36]	@ 0x24
 800838e:	4b0d      	ldr	r3, [pc, #52]	@ (80083c4 <std+0x5c>)
 8008390:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008392:	4b0d      	ldr	r3, [pc, #52]	@ (80083c8 <std+0x60>)
 8008394:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008396:	4b0d      	ldr	r3, [pc, #52]	@ (80083cc <std+0x64>)
 8008398:	6323      	str	r3, [r4, #48]	@ 0x30
 800839a:	4b0d      	ldr	r3, [pc, #52]	@ (80083d0 <std+0x68>)
 800839c:	6224      	str	r4, [r4, #32]
 800839e:	429c      	cmp	r4, r3
 80083a0:	d006      	beq.n	80083b0 <std+0x48>
 80083a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80083a6:	4294      	cmp	r4, r2
 80083a8:	d002      	beq.n	80083b0 <std+0x48>
 80083aa:	33d0      	adds	r3, #208	@ 0xd0
 80083ac:	429c      	cmp	r4, r3
 80083ae:	d105      	bne.n	80083bc <std+0x54>
 80083b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80083b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083b8:	f000 b9c0 	b.w	800873c <__retarget_lock_init_recursive>
 80083bc:	bd10      	pop	{r4, pc}
 80083be:	bf00      	nop
 80083c0:	08008511 	.word	0x08008511
 80083c4:	08008533 	.word	0x08008533
 80083c8:	0800856b 	.word	0x0800856b
 80083cc:	0800858f 	.word	0x0800858f
 80083d0:	20004fc8 	.word	0x20004fc8

080083d4 <stdio_exit_handler>:
 80083d4:	4a02      	ldr	r2, [pc, #8]	@ (80083e0 <stdio_exit_handler+0xc>)
 80083d6:	4903      	ldr	r1, [pc, #12]	@ (80083e4 <stdio_exit_handler+0x10>)
 80083d8:	4803      	ldr	r0, [pc, #12]	@ (80083e8 <stdio_exit_handler+0x14>)
 80083da:	f000 b869 	b.w	80084b0 <_fwalk_sglue>
 80083de:	bf00      	nop
 80083e0:	20000010 	.word	0x20000010
 80083e4:	0800a089 	.word	0x0800a089
 80083e8:	20000020 	.word	0x20000020

080083ec <cleanup_stdio>:
 80083ec:	6841      	ldr	r1, [r0, #4]
 80083ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008420 <cleanup_stdio+0x34>)
 80083f0:	4299      	cmp	r1, r3
 80083f2:	b510      	push	{r4, lr}
 80083f4:	4604      	mov	r4, r0
 80083f6:	d001      	beq.n	80083fc <cleanup_stdio+0x10>
 80083f8:	f001 fe46 	bl	800a088 <_fflush_r>
 80083fc:	68a1      	ldr	r1, [r4, #8]
 80083fe:	4b09      	ldr	r3, [pc, #36]	@ (8008424 <cleanup_stdio+0x38>)
 8008400:	4299      	cmp	r1, r3
 8008402:	d002      	beq.n	800840a <cleanup_stdio+0x1e>
 8008404:	4620      	mov	r0, r4
 8008406:	f001 fe3f 	bl	800a088 <_fflush_r>
 800840a:	68e1      	ldr	r1, [r4, #12]
 800840c:	4b06      	ldr	r3, [pc, #24]	@ (8008428 <cleanup_stdio+0x3c>)
 800840e:	4299      	cmp	r1, r3
 8008410:	d004      	beq.n	800841c <cleanup_stdio+0x30>
 8008412:	4620      	mov	r0, r4
 8008414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008418:	f001 be36 	b.w	800a088 <_fflush_r>
 800841c:	bd10      	pop	{r4, pc}
 800841e:	bf00      	nop
 8008420:	20004fc8 	.word	0x20004fc8
 8008424:	20005030 	.word	0x20005030
 8008428:	20005098 	.word	0x20005098

0800842c <global_stdio_init.part.0>:
 800842c:	b510      	push	{r4, lr}
 800842e:	4b0b      	ldr	r3, [pc, #44]	@ (800845c <global_stdio_init.part.0+0x30>)
 8008430:	4c0b      	ldr	r4, [pc, #44]	@ (8008460 <global_stdio_init.part.0+0x34>)
 8008432:	4a0c      	ldr	r2, [pc, #48]	@ (8008464 <global_stdio_init.part.0+0x38>)
 8008434:	601a      	str	r2, [r3, #0]
 8008436:	4620      	mov	r0, r4
 8008438:	2200      	movs	r2, #0
 800843a:	2104      	movs	r1, #4
 800843c:	f7ff ff94 	bl	8008368 <std>
 8008440:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008444:	2201      	movs	r2, #1
 8008446:	2109      	movs	r1, #9
 8008448:	f7ff ff8e 	bl	8008368 <std>
 800844c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008450:	2202      	movs	r2, #2
 8008452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008456:	2112      	movs	r1, #18
 8008458:	f7ff bf86 	b.w	8008368 <std>
 800845c:	20005100 	.word	0x20005100
 8008460:	20004fc8 	.word	0x20004fc8
 8008464:	080083d5 	.word	0x080083d5

08008468 <__sfp_lock_acquire>:
 8008468:	4801      	ldr	r0, [pc, #4]	@ (8008470 <__sfp_lock_acquire+0x8>)
 800846a:	f000 b968 	b.w	800873e <__retarget_lock_acquire_recursive>
 800846e:	bf00      	nop
 8008470:	20005109 	.word	0x20005109

08008474 <__sfp_lock_release>:
 8008474:	4801      	ldr	r0, [pc, #4]	@ (800847c <__sfp_lock_release+0x8>)
 8008476:	f000 b963 	b.w	8008740 <__retarget_lock_release_recursive>
 800847a:	bf00      	nop
 800847c:	20005109 	.word	0x20005109

08008480 <__sinit>:
 8008480:	b510      	push	{r4, lr}
 8008482:	4604      	mov	r4, r0
 8008484:	f7ff fff0 	bl	8008468 <__sfp_lock_acquire>
 8008488:	6a23      	ldr	r3, [r4, #32]
 800848a:	b11b      	cbz	r3, 8008494 <__sinit+0x14>
 800848c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008490:	f7ff bff0 	b.w	8008474 <__sfp_lock_release>
 8008494:	4b04      	ldr	r3, [pc, #16]	@ (80084a8 <__sinit+0x28>)
 8008496:	6223      	str	r3, [r4, #32]
 8008498:	4b04      	ldr	r3, [pc, #16]	@ (80084ac <__sinit+0x2c>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1f5      	bne.n	800848c <__sinit+0xc>
 80084a0:	f7ff ffc4 	bl	800842c <global_stdio_init.part.0>
 80084a4:	e7f2      	b.n	800848c <__sinit+0xc>
 80084a6:	bf00      	nop
 80084a8:	080083ed 	.word	0x080083ed
 80084ac:	20005100 	.word	0x20005100

080084b0 <_fwalk_sglue>:
 80084b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084b4:	4607      	mov	r7, r0
 80084b6:	4688      	mov	r8, r1
 80084b8:	4614      	mov	r4, r2
 80084ba:	2600      	movs	r6, #0
 80084bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084c0:	f1b9 0901 	subs.w	r9, r9, #1
 80084c4:	d505      	bpl.n	80084d2 <_fwalk_sglue+0x22>
 80084c6:	6824      	ldr	r4, [r4, #0]
 80084c8:	2c00      	cmp	r4, #0
 80084ca:	d1f7      	bne.n	80084bc <_fwalk_sglue+0xc>
 80084cc:	4630      	mov	r0, r6
 80084ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084d2:	89ab      	ldrh	r3, [r5, #12]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d907      	bls.n	80084e8 <_fwalk_sglue+0x38>
 80084d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084dc:	3301      	adds	r3, #1
 80084de:	d003      	beq.n	80084e8 <_fwalk_sglue+0x38>
 80084e0:	4629      	mov	r1, r5
 80084e2:	4638      	mov	r0, r7
 80084e4:	47c0      	blx	r8
 80084e6:	4306      	orrs	r6, r0
 80084e8:	3568      	adds	r5, #104	@ 0x68
 80084ea:	e7e9      	b.n	80084c0 <_fwalk_sglue+0x10>

080084ec <iprintf>:
 80084ec:	b40f      	push	{r0, r1, r2, r3}
 80084ee:	b507      	push	{r0, r1, r2, lr}
 80084f0:	4906      	ldr	r1, [pc, #24]	@ (800850c <iprintf+0x20>)
 80084f2:	ab04      	add	r3, sp, #16
 80084f4:	6808      	ldr	r0, [r1, #0]
 80084f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80084fa:	6881      	ldr	r1, [r0, #8]
 80084fc:	9301      	str	r3, [sp, #4]
 80084fe:	f001 fc27 	bl	8009d50 <_vfiprintf_r>
 8008502:	b003      	add	sp, #12
 8008504:	f85d eb04 	ldr.w	lr, [sp], #4
 8008508:	b004      	add	sp, #16
 800850a:	4770      	bx	lr
 800850c:	2000001c 	.word	0x2000001c

08008510 <__sread>:
 8008510:	b510      	push	{r4, lr}
 8008512:	460c      	mov	r4, r1
 8008514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008518:	f000 f8c2 	bl	80086a0 <_read_r>
 800851c:	2800      	cmp	r0, #0
 800851e:	bfab      	itete	ge
 8008520:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008522:	89a3      	ldrhlt	r3, [r4, #12]
 8008524:	181b      	addge	r3, r3, r0
 8008526:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800852a:	bfac      	ite	ge
 800852c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800852e:	81a3      	strhlt	r3, [r4, #12]
 8008530:	bd10      	pop	{r4, pc}

08008532 <__swrite>:
 8008532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008536:	461f      	mov	r7, r3
 8008538:	898b      	ldrh	r3, [r1, #12]
 800853a:	05db      	lsls	r3, r3, #23
 800853c:	4605      	mov	r5, r0
 800853e:	460c      	mov	r4, r1
 8008540:	4616      	mov	r6, r2
 8008542:	d505      	bpl.n	8008550 <__swrite+0x1e>
 8008544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008548:	2302      	movs	r3, #2
 800854a:	2200      	movs	r2, #0
 800854c:	f000 f896 	bl	800867c <_lseek_r>
 8008550:	89a3      	ldrh	r3, [r4, #12]
 8008552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008556:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800855a:	81a3      	strh	r3, [r4, #12]
 800855c:	4632      	mov	r2, r6
 800855e:	463b      	mov	r3, r7
 8008560:	4628      	mov	r0, r5
 8008562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008566:	f000 b8ad 	b.w	80086c4 <_write_r>

0800856a <__sseek>:
 800856a:	b510      	push	{r4, lr}
 800856c:	460c      	mov	r4, r1
 800856e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008572:	f000 f883 	bl	800867c <_lseek_r>
 8008576:	1c43      	adds	r3, r0, #1
 8008578:	89a3      	ldrh	r3, [r4, #12]
 800857a:	bf15      	itete	ne
 800857c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800857e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008582:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008586:	81a3      	strheq	r3, [r4, #12]
 8008588:	bf18      	it	ne
 800858a:	81a3      	strhne	r3, [r4, #12]
 800858c:	bd10      	pop	{r4, pc}

0800858e <__sclose>:
 800858e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008592:	f000 b80d 	b.w	80085b0 <_close_r>

08008596 <memset>:
 8008596:	4402      	add	r2, r0
 8008598:	4603      	mov	r3, r0
 800859a:	4293      	cmp	r3, r2
 800859c:	d100      	bne.n	80085a0 <memset+0xa>
 800859e:	4770      	bx	lr
 80085a0:	f803 1b01 	strb.w	r1, [r3], #1
 80085a4:	e7f9      	b.n	800859a <memset+0x4>
	...

080085a8 <_localeconv_r>:
 80085a8:	4800      	ldr	r0, [pc, #0]	@ (80085ac <_localeconv_r+0x4>)
 80085aa:	4770      	bx	lr
 80085ac:	2000015c 	.word	0x2000015c

080085b0 <_close_r>:
 80085b0:	b538      	push	{r3, r4, r5, lr}
 80085b2:	4d06      	ldr	r5, [pc, #24]	@ (80085cc <_close_r+0x1c>)
 80085b4:	2300      	movs	r3, #0
 80085b6:	4604      	mov	r4, r0
 80085b8:	4608      	mov	r0, r1
 80085ba:	602b      	str	r3, [r5, #0]
 80085bc:	f7f9 f95e 	bl	800187c <_close>
 80085c0:	1c43      	adds	r3, r0, #1
 80085c2:	d102      	bne.n	80085ca <_close_r+0x1a>
 80085c4:	682b      	ldr	r3, [r5, #0]
 80085c6:	b103      	cbz	r3, 80085ca <_close_r+0x1a>
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	bd38      	pop	{r3, r4, r5, pc}
 80085cc:	20005104 	.word	0x20005104

080085d0 <_reclaim_reent>:
 80085d0:	4b29      	ldr	r3, [pc, #164]	@ (8008678 <_reclaim_reent+0xa8>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4283      	cmp	r3, r0
 80085d6:	b570      	push	{r4, r5, r6, lr}
 80085d8:	4604      	mov	r4, r0
 80085da:	d04b      	beq.n	8008674 <_reclaim_reent+0xa4>
 80085dc:	69c3      	ldr	r3, [r0, #28]
 80085de:	b1ab      	cbz	r3, 800860c <_reclaim_reent+0x3c>
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	b16b      	cbz	r3, 8008600 <_reclaim_reent+0x30>
 80085e4:	2500      	movs	r5, #0
 80085e6:	69e3      	ldr	r3, [r4, #28]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	5959      	ldr	r1, [r3, r5]
 80085ec:	2900      	cmp	r1, #0
 80085ee:	d13b      	bne.n	8008668 <_reclaim_reent+0x98>
 80085f0:	3504      	adds	r5, #4
 80085f2:	2d80      	cmp	r5, #128	@ 0x80
 80085f4:	d1f7      	bne.n	80085e6 <_reclaim_reent+0x16>
 80085f6:	69e3      	ldr	r3, [r4, #28]
 80085f8:	4620      	mov	r0, r4
 80085fa:	68d9      	ldr	r1, [r3, #12]
 80085fc:	f000 fefc 	bl	80093f8 <_free_r>
 8008600:	69e3      	ldr	r3, [r4, #28]
 8008602:	6819      	ldr	r1, [r3, #0]
 8008604:	b111      	cbz	r1, 800860c <_reclaim_reent+0x3c>
 8008606:	4620      	mov	r0, r4
 8008608:	f000 fef6 	bl	80093f8 <_free_r>
 800860c:	6961      	ldr	r1, [r4, #20]
 800860e:	b111      	cbz	r1, 8008616 <_reclaim_reent+0x46>
 8008610:	4620      	mov	r0, r4
 8008612:	f000 fef1 	bl	80093f8 <_free_r>
 8008616:	69e1      	ldr	r1, [r4, #28]
 8008618:	b111      	cbz	r1, 8008620 <_reclaim_reent+0x50>
 800861a:	4620      	mov	r0, r4
 800861c:	f000 feec 	bl	80093f8 <_free_r>
 8008620:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008622:	b111      	cbz	r1, 800862a <_reclaim_reent+0x5a>
 8008624:	4620      	mov	r0, r4
 8008626:	f000 fee7 	bl	80093f8 <_free_r>
 800862a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800862c:	b111      	cbz	r1, 8008634 <_reclaim_reent+0x64>
 800862e:	4620      	mov	r0, r4
 8008630:	f000 fee2 	bl	80093f8 <_free_r>
 8008634:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008636:	b111      	cbz	r1, 800863e <_reclaim_reent+0x6e>
 8008638:	4620      	mov	r0, r4
 800863a:	f000 fedd 	bl	80093f8 <_free_r>
 800863e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008640:	b111      	cbz	r1, 8008648 <_reclaim_reent+0x78>
 8008642:	4620      	mov	r0, r4
 8008644:	f000 fed8 	bl	80093f8 <_free_r>
 8008648:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800864a:	b111      	cbz	r1, 8008652 <_reclaim_reent+0x82>
 800864c:	4620      	mov	r0, r4
 800864e:	f000 fed3 	bl	80093f8 <_free_r>
 8008652:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008654:	b111      	cbz	r1, 800865c <_reclaim_reent+0x8c>
 8008656:	4620      	mov	r0, r4
 8008658:	f000 fece 	bl	80093f8 <_free_r>
 800865c:	6a23      	ldr	r3, [r4, #32]
 800865e:	b14b      	cbz	r3, 8008674 <_reclaim_reent+0xa4>
 8008660:	4620      	mov	r0, r4
 8008662:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008666:	4718      	bx	r3
 8008668:	680e      	ldr	r6, [r1, #0]
 800866a:	4620      	mov	r0, r4
 800866c:	f000 fec4 	bl	80093f8 <_free_r>
 8008670:	4631      	mov	r1, r6
 8008672:	e7bb      	b.n	80085ec <_reclaim_reent+0x1c>
 8008674:	bd70      	pop	{r4, r5, r6, pc}
 8008676:	bf00      	nop
 8008678:	2000001c 	.word	0x2000001c

0800867c <_lseek_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	4d07      	ldr	r5, [pc, #28]	@ (800869c <_lseek_r+0x20>)
 8008680:	4604      	mov	r4, r0
 8008682:	4608      	mov	r0, r1
 8008684:	4611      	mov	r1, r2
 8008686:	2200      	movs	r2, #0
 8008688:	602a      	str	r2, [r5, #0]
 800868a:	461a      	mov	r2, r3
 800868c:	f7f9 f91d 	bl	80018ca <_lseek>
 8008690:	1c43      	adds	r3, r0, #1
 8008692:	d102      	bne.n	800869a <_lseek_r+0x1e>
 8008694:	682b      	ldr	r3, [r5, #0]
 8008696:	b103      	cbz	r3, 800869a <_lseek_r+0x1e>
 8008698:	6023      	str	r3, [r4, #0]
 800869a:	bd38      	pop	{r3, r4, r5, pc}
 800869c:	20005104 	.word	0x20005104

080086a0 <_read_r>:
 80086a0:	b538      	push	{r3, r4, r5, lr}
 80086a2:	4d07      	ldr	r5, [pc, #28]	@ (80086c0 <_read_r+0x20>)
 80086a4:	4604      	mov	r4, r0
 80086a6:	4608      	mov	r0, r1
 80086a8:	4611      	mov	r1, r2
 80086aa:	2200      	movs	r2, #0
 80086ac:	602a      	str	r2, [r5, #0]
 80086ae:	461a      	mov	r2, r3
 80086b0:	f7f9 f8ab 	bl	800180a <_read>
 80086b4:	1c43      	adds	r3, r0, #1
 80086b6:	d102      	bne.n	80086be <_read_r+0x1e>
 80086b8:	682b      	ldr	r3, [r5, #0]
 80086ba:	b103      	cbz	r3, 80086be <_read_r+0x1e>
 80086bc:	6023      	str	r3, [r4, #0]
 80086be:	bd38      	pop	{r3, r4, r5, pc}
 80086c0:	20005104 	.word	0x20005104

080086c4 <_write_r>:
 80086c4:	b538      	push	{r3, r4, r5, lr}
 80086c6:	4d07      	ldr	r5, [pc, #28]	@ (80086e4 <_write_r+0x20>)
 80086c8:	4604      	mov	r4, r0
 80086ca:	4608      	mov	r0, r1
 80086cc:	4611      	mov	r1, r2
 80086ce:	2200      	movs	r2, #0
 80086d0:	602a      	str	r2, [r5, #0]
 80086d2:	461a      	mov	r2, r3
 80086d4:	f7f9 f8b6 	bl	8001844 <_write>
 80086d8:	1c43      	adds	r3, r0, #1
 80086da:	d102      	bne.n	80086e2 <_write_r+0x1e>
 80086dc:	682b      	ldr	r3, [r5, #0]
 80086de:	b103      	cbz	r3, 80086e2 <_write_r+0x1e>
 80086e0:	6023      	str	r3, [r4, #0]
 80086e2:	bd38      	pop	{r3, r4, r5, pc}
 80086e4:	20005104 	.word	0x20005104

080086e8 <__errno>:
 80086e8:	4b01      	ldr	r3, [pc, #4]	@ (80086f0 <__errno+0x8>)
 80086ea:	6818      	ldr	r0, [r3, #0]
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	2000001c 	.word	0x2000001c

080086f4 <__libc_init_array>:
 80086f4:	b570      	push	{r4, r5, r6, lr}
 80086f6:	4d0d      	ldr	r5, [pc, #52]	@ (800872c <__libc_init_array+0x38>)
 80086f8:	4c0d      	ldr	r4, [pc, #52]	@ (8008730 <__libc_init_array+0x3c>)
 80086fa:	1b64      	subs	r4, r4, r5
 80086fc:	10a4      	asrs	r4, r4, #2
 80086fe:	2600      	movs	r6, #0
 8008700:	42a6      	cmp	r6, r4
 8008702:	d109      	bne.n	8008718 <__libc_init_array+0x24>
 8008704:	4d0b      	ldr	r5, [pc, #44]	@ (8008734 <__libc_init_array+0x40>)
 8008706:	4c0c      	ldr	r4, [pc, #48]	@ (8008738 <__libc_init_array+0x44>)
 8008708:	f001 febe 	bl	800a488 <_init>
 800870c:	1b64      	subs	r4, r4, r5
 800870e:	10a4      	asrs	r4, r4, #2
 8008710:	2600      	movs	r6, #0
 8008712:	42a6      	cmp	r6, r4
 8008714:	d105      	bne.n	8008722 <__libc_init_array+0x2e>
 8008716:	bd70      	pop	{r4, r5, r6, pc}
 8008718:	f855 3b04 	ldr.w	r3, [r5], #4
 800871c:	4798      	blx	r3
 800871e:	3601      	adds	r6, #1
 8008720:	e7ee      	b.n	8008700 <__libc_init_array+0xc>
 8008722:	f855 3b04 	ldr.w	r3, [r5], #4
 8008726:	4798      	blx	r3
 8008728:	3601      	adds	r6, #1
 800872a:	e7f2      	b.n	8008712 <__libc_init_array+0x1e>
 800872c:	0800a8c8 	.word	0x0800a8c8
 8008730:	0800a8c8 	.word	0x0800a8c8
 8008734:	0800a8c8 	.word	0x0800a8c8
 8008738:	0800a8cc 	.word	0x0800a8cc

0800873c <__retarget_lock_init_recursive>:
 800873c:	4770      	bx	lr

0800873e <__retarget_lock_acquire_recursive>:
 800873e:	4770      	bx	lr

08008740 <__retarget_lock_release_recursive>:
 8008740:	4770      	bx	lr

08008742 <memcpy>:
 8008742:	440a      	add	r2, r1
 8008744:	4291      	cmp	r1, r2
 8008746:	f100 33ff 	add.w	r3, r0, #4294967295
 800874a:	d100      	bne.n	800874e <memcpy+0xc>
 800874c:	4770      	bx	lr
 800874e:	b510      	push	{r4, lr}
 8008750:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008754:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008758:	4291      	cmp	r1, r2
 800875a:	d1f9      	bne.n	8008750 <memcpy+0xe>
 800875c:	bd10      	pop	{r4, pc}

0800875e <quorem>:
 800875e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008762:	6903      	ldr	r3, [r0, #16]
 8008764:	690c      	ldr	r4, [r1, #16]
 8008766:	42a3      	cmp	r3, r4
 8008768:	4607      	mov	r7, r0
 800876a:	db7e      	blt.n	800886a <quorem+0x10c>
 800876c:	3c01      	subs	r4, #1
 800876e:	f101 0814 	add.w	r8, r1, #20
 8008772:	00a3      	lsls	r3, r4, #2
 8008774:	f100 0514 	add.w	r5, r0, #20
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800877e:	9301      	str	r3, [sp, #4]
 8008780:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008784:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008788:	3301      	adds	r3, #1
 800878a:	429a      	cmp	r2, r3
 800878c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008790:	fbb2 f6f3 	udiv	r6, r2, r3
 8008794:	d32e      	bcc.n	80087f4 <quorem+0x96>
 8008796:	f04f 0a00 	mov.w	sl, #0
 800879a:	46c4      	mov	ip, r8
 800879c:	46ae      	mov	lr, r5
 800879e:	46d3      	mov	fp, sl
 80087a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80087a4:	b298      	uxth	r0, r3
 80087a6:	fb06 a000 	mla	r0, r6, r0, sl
 80087aa:	0c02      	lsrs	r2, r0, #16
 80087ac:	0c1b      	lsrs	r3, r3, #16
 80087ae:	fb06 2303 	mla	r3, r6, r3, r2
 80087b2:	f8de 2000 	ldr.w	r2, [lr]
 80087b6:	b280      	uxth	r0, r0
 80087b8:	b292      	uxth	r2, r2
 80087ba:	1a12      	subs	r2, r2, r0
 80087bc:	445a      	add	r2, fp
 80087be:	f8de 0000 	ldr.w	r0, [lr]
 80087c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80087cc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80087d0:	b292      	uxth	r2, r2
 80087d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80087d6:	45e1      	cmp	r9, ip
 80087d8:	f84e 2b04 	str.w	r2, [lr], #4
 80087dc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80087e0:	d2de      	bcs.n	80087a0 <quorem+0x42>
 80087e2:	9b00      	ldr	r3, [sp, #0]
 80087e4:	58eb      	ldr	r3, [r5, r3]
 80087e6:	b92b      	cbnz	r3, 80087f4 <quorem+0x96>
 80087e8:	9b01      	ldr	r3, [sp, #4]
 80087ea:	3b04      	subs	r3, #4
 80087ec:	429d      	cmp	r5, r3
 80087ee:	461a      	mov	r2, r3
 80087f0:	d32f      	bcc.n	8008852 <quorem+0xf4>
 80087f2:	613c      	str	r4, [r7, #16]
 80087f4:	4638      	mov	r0, r7
 80087f6:	f001 f979 	bl	8009aec <__mcmp>
 80087fa:	2800      	cmp	r0, #0
 80087fc:	db25      	blt.n	800884a <quorem+0xec>
 80087fe:	4629      	mov	r1, r5
 8008800:	2000      	movs	r0, #0
 8008802:	f858 2b04 	ldr.w	r2, [r8], #4
 8008806:	f8d1 c000 	ldr.w	ip, [r1]
 800880a:	fa1f fe82 	uxth.w	lr, r2
 800880e:	fa1f f38c 	uxth.w	r3, ip
 8008812:	eba3 030e 	sub.w	r3, r3, lr
 8008816:	4403      	add	r3, r0
 8008818:	0c12      	lsrs	r2, r2, #16
 800881a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800881e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008822:	b29b      	uxth	r3, r3
 8008824:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008828:	45c1      	cmp	r9, r8
 800882a:	f841 3b04 	str.w	r3, [r1], #4
 800882e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008832:	d2e6      	bcs.n	8008802 <quorem+0xa4>
 8008834:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008838:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800883c:	b922      	cbnz	r2, 8008848 <quorem+0xea>
 800883e:	3b04      	subs	r3, #4
 8008840:	429d      	cmp	r5, r3
 8008842:	461a      	mov	r2, r3
 8008844:	d30b      	bcc.n	800885e <quorem+0x100>
 8008846:	613c      	str	r4, [r7, #16]
 8008848:	3601      	adds	r6, #1
 800884a:	4630      	mov	r0, r6
 800884c:	b003      	add	sp, #12
 800884e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008852:	6812      	ldr	r2, [r2, #0]
 8008854:	3b04      	subs	r3, #4
 8008856:	2a00      	cmp	r2, #0
 8008858:	d1cb      	bne.n	80087f2 <quorem+0x94>
 800885a:	3c01      	subs	r4, #1
 800885c:	e7c6      	b.n	80087ec <quorem+0x8e>
 800885e:	6812      	ldr	r2, [r2, #0]
 8008860:	3b04      	subs	r3, #4
 8008862:	2a00      	cmp	r2, #0
 8008864:	d1ef      	bne.n	8008846 <quorem+0xe8>
 8008866:	3c01      	subs	r4, #1
 8008868:	e7ea      	b.n	8008840 <quorem+0xe2>
 800886a:	2000      	movs	r0, #0
 800886c:	e7ee      	b.n	800884c <quorem+0xee>
	...

08008870 <_dtoa_r>:
 8008870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008874:	69c7      	ldr	r7, [r0, #28]
 8008876:	b099      	sub	sp, #100	@ 0x64
 8008878:	ed8d 0b02 	vstr	d0, [sp, #8]
 800887c:	ec55 4b10 	vmov	r4, r5, d0
 8008880:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008882:	9109      	str	r1, [sp, #36]	@ 0x24
 8008884:	4683      	mov	fp, r0
 8008886:	920e      	str	r2, [sp, #56]	@ 0x38
 8008888:	9313      	str	r3, [sp, #76]	@ 0x4c
 800888a:	b97f      	cbnz	r7, 80088ac <_dtoa_r+0x3c>
 800888c:	2010      	movs	r0, #16
 800888e:	f000 fdfd 	bl	800948c <malloc>
 8008892:	4602      	mov	r2, r0
 8008894:	f8cb 001c 	str.w	r0, [fp, #28]
 8008898:	b920      	cbnz	r0, 80088a4 <_dtoa_r+0x34>
 800889a:	4ba7      	ldr	r3, [pc, #668]	@ (8008b38 <_dtoa_r+0x2c8>)
 800889c:	21ef      	movs	r1, #239	@ 0xef
 800889e:	48a7      	ldr	r0, [pc, #668]	@ (8008b3c <_dtoa_r+0x2cc>)
 80088a0:	f001 fcbe 	bl	800a220 <__assert_func>
 80088a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80088a8:	6007      	str	r7, [r0, #0]
 80088aa:	60c7      	str	r7, [r0, #12]
 80088ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80088b0:	6819      	ldr	r1, [r3, #0]
 80088b2:	b159      	cbz	r1, 80088cc <_dtoa_r+0x5c>
 80088b4:	685a      	ldr	r2, [r3, #4]
 80088b6:	604a      	str	r2, [r1, #4]
 80088b8:	2301      	movs	r3, #1
 80088ba:	4093      	lsls	r3, r2
 80088bc:	608b      	str	r3, [r1, #8]
 80088be:	4658      	mov	r0, fp
 80088c0:	f000 feda 	bl	8009678 <_Bfree>
 80088c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80088c8:	2200      	movs	r2, #0
 80088ca:	601a      	str	r2, [r3, #0]
 80088cc:	1e2b      	subs	r3, r5, #0
 80088ce:	bfb9      	ittee	lt
 80088d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80088d4:	9303      	strlt	r3, [sp, #12]
 80088d6:	2300      	movge	r3, #0
 80088d8:	6033      	strge	r3, [r6, #0]
 80088da:	9f03      	ldr	r7, [sp, #12]
 80088dc:	4b98      	ldr	r3, [pc, #608]	@ (8008b40 <_dtoa_r+0x2d0>)
 80088de:	bfbc      	itt	lt
 80088e0:	2201      	movlt	r2, #1
 80088e2:	6032      	strlt	r2, [r6, #0]
 80088e4:	43bb      	bics	r3, r7
 80088e6:	d112      	bne.n	800890e <_dtoa_r+0x9e>
 80088e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80088ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80088ee:	6013      	str	r3, [r2, #0]
 80088f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80088f4:	4323      	orrs	r3, r4
 80088f6:	f000 854d 	beq.w	8009394 <_dtoa_r+0xb24>
 80088fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80088fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008b54 <_dtoa_r+0x2e4>
 8008900:	2b00      	cmp	r3, #0
 8008902:	f000 854f 	beq.w	80093a4 <_dtoa_r+0xb34>
 8008906:	f10a 0303 	add.w	r3, sl, #3
 800890a:	f000 bd49 	b.w	80093a0 <_dtoa_r+0xb30>
 800890e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008912:	2200      	movs	r2, #0
 8008914:	ec51 0b17 	vmov	r0, r1, d7
 8008918:	2300      	movs	r3, #0
 800891a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800891e:	f7f8 f8db 	bl	8000ad8 <__aeabi_dcmpeq>
 8008922:	4680      	mov	r8, r0
 8008924:	b158      	cbz	r0, 800893e <_dtoa_r+0xce>
 8008926:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008928:	2301      	movs	r3, #1
 800892a:	6013      	str	r3, [r2, #0]
 800892c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800892e:	b113      	cbz	r3, 8008936 <_dtoa_r+0xc6>
 8008930:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008932:	4b84      	ldr	r3, [pc, #528]	@ (8008b44 <_dtoa_r+0x2d4>)
 8008934:	6013      	str	r3, [r2, #0]
 8008936:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008b58 <_dtoa_r+0x2e8>
 800893a:	f000 bd33 	b.w	80093a4 <_dtoa_r+0xb34>
 800893e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008942:	aa16      	add	r2, sp, #88	@ 0x58
 8008944:	a917      	add	r1, sp, #92	@ 0x5c
 8008946:	4658      	mov	r0, fp
 8008948:	f001 f980 	bl	8009c4c <__d2b>
 800894c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008950:	4681      	mov	r9, r0
 8008952:	2e00      	cmp	r6, #0
 8008954:	d077      	beq.n	8008a46 <_dtoa_r+0x1d6>
 8008956:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008958:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800895c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008960:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008964:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008968:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800896c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008970:	4619      	mov	r1, r3
 8008972:	2200      	movs	r2, #0
 8008974:	4b74      	ldr	r3, [pc, #464]	@ (8008b48 <_dtoa_r+0x2d8>)
 8008976:	f7f7 fc8f 	bl	8000298 <__aeabi_dsub>
 800897a:	a369      	add	r3, pc, #420	@ (adr r3, 8008b20 <_dtoa_r+0x2b0>)
 800897c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008980:	f7f7 fe42 	bl	8000608 <__aeabi_dmul>
 8008984:	a368      	add	r3, pc, #416	@ (adr r3, 8008b28 <_dtoa_r+0x2b8>)
 8008986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898a:	f7f7 fc87 	bl	800029c <__adddf3>
 800898e:	4604      	mov	r4, r0
 8008990:	4630      	mov	r0, r6
 8008992:	460d      	mov	r5, r1
 8008994:	f7f7 fdce 	bl	8000534 <__aeabi_i2d>
 8008998:	a365      	add	r3, pc, #404	@ (adr r3, 8008b30 <_dtoa_r+0x2c0>)
 800899a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899e:	f7f7 fe33 	bl	8000608 <__aeabi_dmul>
 80089a2:	4602      	mov	r2, r0
 80089a4:	460b      	mov	r3, r1
 80089a6:	4620      	mov	r0, r4
 80089a8:	4629      	mov	r1, r5
 80089aa:	f7f7 fc77 	bl	800029c <__adddf3>
 80089ae:	4604      	mov	r4, r0
 80089b0:	460d      	mov	r5, r1
 80089b2:	f7f8 f8d9 	bl	8000b68 <__aeabi_d2iz>
 80089b6:	2200      	movs	r2, #0
 80089b8:	4607      	mov	r7, r0
 80089ba:	2300      	movs	r3, #0
 80089bc:	4620      	mov	r0, r4
 80089be:	4629      	mov	r1, r5
 80089c0:	f7f8 f894 	bl	8000aec <__aeabi_dcmplt>
 80089c4:	b140      	cbz	r0, 80089d8 <_dtoa_r+0x168>
 80089c6:	4638      	mov	r0, r7
 80089c8:	f7f7 fdb4 	bl	8000534 <__aeabi_i2d>
 80089cc:	4622      	mov	r2, r4
 80089ce:	462b      	mov	r3, r5
 80089d0:	f7f8 f882 	bl	8000ad8 <__aeabi_dcmpeq>
 80089d4:	b900      	cbnz	r0, 80089d8 <_dtoa_r+0x168>
 80089d6:	3f01      	subs	r7, #1
 80089d8:	2f16      	cmp	r7, #22
 80089da:	d851      	bhi.n	8008a80 <_dtoa_r+0x210>
 80089dc:	4b5b      	ldr	r3, [pc, #364]	@ (8008b4c <_dtoa_r+0x2dc>)
 80089de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089ea:	f7f8 f87f 	bl	8000aec <__aeabi_dcmplt>
 80089ee:	2800      	cmp	r0, #0
 80089f0:	d048      	beq.n	8008a84 <_dtoa_r+0x214>
 80089f2:	3f01      	subs	r7, #1
 80089f4:	2300      	movs	r3, #0
 80089f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80089f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80089fa:	1b9b      	subs	r3, r3, r6
 80089fc:	1e5a      	subs	r2, r3, #1
 80089fe:	bf44      	itt	mi
 8008a00:	f1c3 0801 	rsbmi	r8, r3, #1
 8008a04:	2300      	movmi	r3, #0
 8008a06:	9208      	str	r2, [sp, #32]
 8008a08:	bf54      	ite	pl
 8008a0a:	f04f 0800 	movpl.w	r8, #0
 8008a0e:	9308      	strmi	r3, [sp, #32]
 8008a10:	2f00      	cmp	r7, #0
 8008a12:	db39      	blt.n	8008a88 <_dtoa_r+0x218>
 8008a14:	9b08      	ldr	r3, [sp, #32]
 8008a16:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008a18:	443b      	add	r3, r7
 8008a1a:	9308      	str	r3, [sp, #32]
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a22:	2b09      	cmp	r3, #9
 8008a24:	d864      	bhi.n	8008af0 <_dtoa_r+0x280>
 8008a26:	2b05      	cmp	r3, #5
 8008a28:	bfc4      	itt	gt
 8008a2a:	3b04      	subgt	r3, #4
 8008a2c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a30:	f1a3 0302 	sub.w	r3, r3, #2
 8008a34:	bfcc      	ite	gt
 8008a36:	2400      	movgt	r4, #0
 8008a38:	2401      	movle	r4, #1
 8008a3a:	2b03      	cmp	r3, #3
 8008a3c:	d863      	bhi.n	8008b06 <_dtoa_r+0x296>
 8008a3e:	e8df f003 	tbb	[pc, r3]
 8008a42:	372a      	.short	0x372a
 8008a44:	5535      	.short	0x5535
 8008a46:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008a4a:	441e      	add	r6, r3
 8008a4c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008a50:	2b20      	cmp	r3, #32
 8008a52:	bfc1      	itttt	gt
 8008a54:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008a58:	409f      	lslgt	r7, r3
 8008a5a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008a5e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008a62:	bfd6      	itet	le
 8008a64:	f1c3 0320 	rsble	r3, r3, #32
 8008a68:	ea47 0003 	orrgt.w	r0, r7, r3
 8008a6c:	fa04 f003 	lslle.w	r0, r4, r3
 8008a70:	f7f7 fd50 	bl	8000514 <__aeabi_ui2d>
 8008a74:	2201      	movs	r2, #1
 8008a76:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008a7a:	3e01      	subs	r6, #1
 8008a7c:	9214      	str	r2, [sp, #80]	@ 0x50
 8008a7e:	e777      	b.n	8008970 <_dtoa_r+0x100>
 8008a80:	2301      	movs	r3, #1
 8008a82:	e7b8      	b.n	80089f6 <_dtoa_r+0x186>
 8008a84:	9012      	str	r0, [sp, #72]	@ 0x48
 8008a86:	e7b7      	b.n	80089f8 <_dtoa_r+0x188>
 8008a88:	427b      	negs	r3, r7
 8008a8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	eba8 0807 	sub.w	r8, r8, r7
 8008a92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a94:	e7c4      	b.n	8008a20 <_dtoa_r+0x1b0>
 8008a96:	2300      	movs	r3, #0
 8008a98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	dc35      	bgt.n	8008b0c <_dtoa_r+0x29c>
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	9307      	str	r3, [sp, #28]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008aaa:	e00b      	b.n	8008ac4 <_dtoa_r+0x254>
 8008aac:	2301      	movs	r3, #1
 8008aae:	e7f3      	b.n	8008a98 <_dtoa_r+0x228>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ab4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ab6:	18fb      	adds	r3, r7, r3
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	3301      	adds	r3, #1
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	9307      	str	r3, [sp, #28]
 8008ac0:	bfb8      	it	lt
 8008ac2:	2301      	movlt	r3, #1
 8008ac4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008ac8:	2100      	movs	r1, #0
 8008aca:	2204      	movs	r2, #4
 8008acc:	f102 0514 	add.w	r5, r2, #20
 8008ad0:	429d      	cmp	r5, r3
 8008ad2:	d91f      	bls.n	8008b14 <_dtoa_r+0x2a4>
 8008ad4:	6041      	str	r1, [r0, #4]
 8008ad6:	4658      	mov	r0, fp
 8008ad8:	f000 fd8e 	bl	80095f8 <_Balloc>
 8008adc:	4682      	mov	sl, r0
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d13c      	bne.n	8008b5c <_dtoa_r+0x2ec>
 8008ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8008b50 <_dtoa_r+0x2e0>)
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	f240 11af 	movw	r1, #431	@ 0x1af
 8008aea:	e6d8      	b.n	800889e <_dtoa_r+0x2e>
 8008aec:	2301      	movs	r3, #1
 8008aee:	e7e0      	b.n	8008ab2 <_dtoa_r+0x242>
 8008af0:	2401      	movs	r4, #1
 8008af2:	2300      	movs	r3, #0
 8008af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008af6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008af8:	f04f 33ff 	mov.w	r3, #4294967295
 8008afc:	9300      	str	r3, [sp, #0]
 8008afe:	9307      	str	r3, [sp, #28]
 8008b00:	2200      	movs	r2, #0
 8008b02:	2312      	movs	r3, #18
 8008b04:	e7d0      	b.n	8008aa8 <_dtoa_r+0x238>
 8008b06:	2301      	movs	r3, #1
 8008b08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b0a:	e7f5      	b.n	8008af8 <_dtoa_r+0x288>
 8008b0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	9307      	str	r3, [sp, #28]
 8008b12:	e7d7      	b.n	8008ac4 <_dtoa_r+0x254>
 8008b14:	3101      	adds	r1, #1
 8008b16:	0052      	lsls	r2, r2, #1
 8008b18:	e7d8      	b.n	8008acc <_dtoa_r+0x25c>
 8008b1a:	bf00      	nop
 8008b1c:	f3af 8000 	nop.w
 8008b20:	636f4361 	.word	0x636f4361
 8008b24:	3fd287a7 	.word	0x3fd287a7
 8008b28:	8b60c8b3 	.word	0x8b60c8b3
 8008b2c:	3fc68a28 	.word	0x3fc68a28
 8008b30:	509f79fb 	.word	0x509f79fb
 8008b34:	3fd34413 	.word	0x3fd34413
 8008b38:	0800a58d 	.word	0x0800a58d
 8008b3c:	0800a5a4 	.word	0x0800a5a4
 8008b40:	7ff00000 	.word	0x7ff00000
 8008b44:	0800a55d 	.word	0x0800a55d
 8008b48:	3ff80000 	.word	0x3ff80000
 8008b4c:	0800a6a0 	.word	0x0800a6a0
 8008b50:	0800a5fc 	.word	0x0800a5fc
 8008b54:	0800a589 	.word	0x0800a589
 8008b58:	0800a55c 	.word	0x0800a55c
 8008b5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b60:	6018      	str	r0, [r3, #0]
 8008b62:	9b07      	ldr	r3, [sp, #28]
 8008b64:	2b0e      	cmp	r3, #14
 8008b66:	f200 80a4 	bhi.w	8008cb2 <_dtoa_r+0x442>
 8008b6a:	2c00      	cmp	r4, #0
 8008b6c:	f000 80a1 	beq.w	8008cb2 <_dtoa_r+0x442>
 8008b70:	2f00      	cmp	r7, #0
 8008b72:	dd33      	ble.n	8008bdc <_dtoa_r+0x36c>
 8008b74:	4bad      	ldr	r3, [pc, #692]	@ (8008e2c <_dtoa_r+0x5bc>)
 8008b76:	f007 020f 	and.w	r2, r7, #15
 8008b7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b7e:	ed93 7b00 	vldr	d7, [r3]
 8008b82:	05f8      	lsls	r0, r7, #23
 8008b84:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008b88:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008b8c:	d516      	bpl.n	8008bbc <_dtoa_r+0x34c>
 8008b8e:	4ba8      	ldr	r3, [pc, #672]	@ (8008e30 <_dtoa_r+0x5c0>)
 8008b90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b98:	f7f7 fe60 	bl	800085c <__aeabi_ddiv>
 8008b9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ba0:	f004 040f 	and.w	r4, r4, #15
 8008ba4:	2603      	movs	r6, #3
 8008ba6:	4da2      	ldr	r5, [pc, #648]	@ (8008e30 <_dtoa_r+0x5c0>)
 8008ba8:	b954      	cbnz	r4, 8008bc0 <_dtoa_r+0x350>
 8008baa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bb2:	f7f7 fe53 	bl	800085c <__aeabi_ddiv>
 8008bb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bba:	e028      	b.n	8008c0e <_dtoa_r+0x39e>
 8008bbc:	2602      	movs	r6, #2
 8008bbe:	e7f2      	b.n	8008ba6 <_dtoa_r+0x336>
 8008bc0:	07e1      	lsls	r1, r4, #31
 8008bc2:	d508      	bpl.n	8008bd6 <_dtoa_r+0x366>
 8008bc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008bcc:	f7f7 fd1c 	bl	8000608 <__aeabi_dmul>
 8008bd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bd4:	3601      	adds	r6, #1
 8008bd6:	1064      	asrs	r4, r4, #1
 8008bd8:	3508      	adds	r5, #8
 8008bda:	e7e5      	b.n	8008ba8 <_dtoa_r+0x338>
 8008bdc:	f000 80d2 	beq.w	8008d84 <_dtoa_r+0x514>
 8008be0:	427c      	negs	r4, r7
 8008be2:	4b92      	ldr	r3, [pc, #584]	@ (8008e2c <_dtoa_r+0x5bc>)
 8008be4:	4d92      	ldr	r5, [pc, #584]	@ (8008e30 <_dtoa_r+0x5c0>)
 8008be6:	f004 020f 	and.w	r2, r4, #15
 8008bea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bf6:	f7f7 fd07 	bl	8000608 <__aeabi_dmul>
 8008bfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bfe:	1124      	asrs	r4, r4, #4
 8008c00:	2300      	movs	r3, #0
 8008c02:	2602      	movs	r6, #2
 8008c04:	2c00      	cmp	r4, #0
 8008c06:	f040 80b2 	bne.w	8008d6e <_dtoa_r+0x4fe>
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1d3      	bne.n	8008bb6 <_dtoa_r+0x346>
 8008c0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c10:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f000 80b7 	beq.w	8008d88 <_dtoa_r+0x518>
 8008c1a:	4b86      	ldr	r3, [pc, #536]	@ (8008e34 <_dtoa_r+0x5c4>)
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	4620      	mov	r0, r4
 8008c20:	4629      	mov	r1, r5
 8008c22:	f7f7 ff63 	bl	8000aec <__aeabi_dcmplt>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	f000 80ae 	beq.w	8008d88 <_dtoa_r+0x518>
 8008c2c:	9b07      	ldr	r3, [sp, #28]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f000 80aa 	beq.w	8008d88 <_dtoa_r+0x518>
 8008c34:	9b00      	ldr	r3, [sp, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	dd37      	ble.n	8008caa <_dtoa_r+0x43a>
 8008c3a:	1e7b      	subs	r3, r7, #1
 8008c3c:	9304      	str	r3, [sp, #16]
 8008c3e:	4620      	mov	r0, r4
 8008c40:	4b7d      	ldr	r3, [pc, #500]	@ (8008e38 <_dtoa_r+0x5c8>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	4629      	mov	r1, r5
 8008c46:	f7f7 fcdf 	bl	8000608 <__aeabi_dmul>
 8008c4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c4e:	9c00      	ldr	r4, [sp, #0]
 8008c50:	3601      	adds	r6, #1
 8008c52:	4630      	mov	r0, r6
 8008c54:	f7f7 fc6e 	bl	8000534 <__aeabi_i2d>
 8008c58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c5c:	f7f7 fcd4 	bl	8000608 <__aeabi_dmul>
 8008c60:	4b76      	ldr	r3, [pc, #472]	@ (8008e3c <_dtoa_r+0x5cc>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	f7f7 fb1a 	bl	800029c <__adddf3>
 8008c68:	4605      	mov	r5, r0
 8008c6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008c6e:	2c00      	cmp	r4, #0
 8008c70:	f040 808d 	bne.w	8008d8e <_dtoa_r+0x51e>
 8008c74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c78:	4b71      	ldr	r3, [pc, #452]	@ (8008e40 <_dtoa_r+0x5d0>)
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f7f7 fb0c 	bl	8000298 <__aeabi_dsub>
 8008c80:	4602      	mov	r2, r0
 8008c82:	460b      	mov	r3, r1
 8008c84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c88:	462a      	mov	r2, r5
 8008c8a:	4633      	mov	r3, r6
 8008c8c:	f7f7 ff4c 	bl	8000b28 <__aeabi_dcmpgt>
 8008c90:	2800      	cmp	r0, #0
 8008c92:	f040 828b 	bne.w	80091ac <_dtoa_r+0x93c>
 8008c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c9a:	462a      	mov	r2, r5
 8008c9c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008ca0:	f7f7 ff24 	bl	8000aec <__aeabi_dcmplt>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	f040 8128 	bne.w	8008efa <_dtoa_r+0x68a>
 8008caa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008cae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008cb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f2c0 815a 	blt.w	8008f6e <_dtoa_r+0x6fe>
 8008cba:	2f0e      	cmp	r7, #14
 8008cbc:	f300 8157 	bgt.w	8008f6e <_dtoa_r+0x6fe>
 8008cc0:	4b5a      	ldr	r3, [pc, #360]	@ (8008e2c <_dtoa_r+0x5bc>)
 8008cc2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008cc6:	ed93 7b00 	vldr	d7, [r3]
 8008cca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	ed8d 7b00 	vstr	d7, [sp]
 8008cd2:	da03      	bge.n	8008cdc <_dtoa_r+0x46c>
 8008cd4:	9b07      	ldr	r3, [sp, #28]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f340 8101 	ble.w	8008ede <_dtoa_r+0x66e>
 8008cdc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008ce0:	4656      	mov	r6, sl
 8008ce2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	4629      	mov	r1, r5
 8008cea:	f7f7 fdb7 	bl	800085c <__aeabi_ddiv>
 8008cee:	f7f7 ff3b 	bl	8000b68 <__aeabi_d2iz>
 8008cf2:	4680      	mov	r8, r0
 8008cf4:	f7f7 fc1e 	bl	8000534 <__aeabi_i2d>
 8008cf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cfc:	f7f7 fc84 	bl	8000608 <__aeabi_dmul>
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	4620      	mov	r0, r4
 8008d06:	4629      	mov	r1, r5
 8008d08:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008d0c:	f7f7 fac4 	bl	8000298 <__aeabi_dsub>
 8008d10:	f806 4b01 	strb.w	r4, [r6], #1
 8008d14:	9d07      	ldr	r5, [sp, #28]
 8008d16:	eba6 040a 	sub.w	r4, r6, sl
 8008d1a:	42a5      	cmp	r5, r4
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	f040 8117 	bne.w	8008f52 <_dtoa_r+0x6e2>
 8008d24:	f7f7 faba 	bl	800029c <__adddf3>
 8008d28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d2c:	4604      	mov	r4, r0
 8008d2e:	460d      	mov	r5, r1
 8008d30:	f7f7 fefa 	bl	8000b28 <__aeabi_dcmpgt>
 8008d34:	2800      	cmp	r0, #0
 8008d36:	f040 80f9 	bne.w	8008f2c <_dtoa_r+0x6bc>
 8008d3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d3e:	4620      	mov	r0, r4
 8008d40:	4629      	mov	r1, r5
 8008d42:	f7f7 fec9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d46:	b118      	cbz	r0, 8008d50 <_dtoa_r+0x4e0>
 8008d48:	f018 0f01 	tst.w	r8, #1
 8008d4c:	f040 80ee 	bne.w	8008f2c <_dtoa_r+0x6bc>
 8008d50:	4649      	mov	r1, r9
 8008d52:	4658      	mov	r0, fp
 8008d54:	f000 fc90 	bl	8009678 <_Bfree>
 8008d58:	2300      	movs	r3, #0
 8008d5a:	7033      	strb	r3, [r6, #0]
 8008d5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d5e:	3701      	adds	r7, #1
 8008d60:	601f      	str	r7, [r3, #0]
 8008d62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f000 831d 	beq.w	80093a4 <_dtoa_r+0xb34>
 8008d6a:	601e      	str	r6, [r3, #0]
 8008d6c:	e31a      	b.n	80093a4 <_dtoa_r+0xb34>
 8008d6e:	07e2      	lsls	r2, r4, #31
 8008d70:	d505      	bpl.n	8008d7e <_dtoa_r+0x50e>
 8008d72:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d76:	f7f7 fc47 	bl	8000608 <__aeabi_dmul>
 8008d7a:	3601      	adds	r6, #1
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	1064      	asrs	r4, r4, #1
 8008d80:	3508      	adds	r5, #8
 8008d82:	e73f      	b.n	8008c04 <_dtoa_r+0x394>
 8008d84:	2602      	movs	r6, #2
 8008d86:	e742      	b.n	8008c0e <_dtoa_r+0x39e>
 8008d88:	9c07      	ldr	r4, [sp, #28]
 8008d8a:	9704      	str	r7, [sp, #16]
 8008d8c:	e761      	b.n	8008c52 <_dtoa_r+0x3e2>
 8008d8e:	4b27      	ldr	r3, [pc, #156]	@ (8008e2c <_dtoa_r+0x5bc>)
 8008d90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d9a:	4454      	add	r4, sl
 8008d9c:	2900      	cmp	r1, #0
 8008d9e:	d053      	beq.n	8008e48 <_dtoa_r+0x5d8>
 8008da0:	4928      	ldr	r1, [pc, #160]	@ (8008e44 <_dtoa_r+0x5d4>)
 8008da2:	2000      	movs	r0, #0
 8008da4:	f7f7 fd5a 	bl	800085c <__aeabi_ddiv>
 8008da8:	4633      	mov	r3, r6
 8008daa:	462a      	mov	r2, r5
 8008dac:	f7f7 fa74 	bl	8000298 <__aeabi_dsub>
 8008db0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008db4:	4656      	mov	r6, sl
 8008db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dba:	f7f7 fed5 	bl	8000b68 <__aeabi_d2iz>
 8008dbe:	4605      	mov	r5, r0
 8008dc0:	f7f7 fbb8 	bl	8000534 <__aeabi_i2d>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dcc:	f7f7 fa64 	bl	8000298 <__aeabi_dsub>
 8008dd0:	3530      	adds	r5, #48	@ 0x30
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008dda:	f806 5b01 	strb.w	r5, [r6], #1
 8008dde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008de2:	f7f7 fe83 	bl	8000aec <__aeabi_dcmplt>
 8008de6:	2800      	cmp	r0, #0
 8008de8:	d171      	bne.n	8008ece <_dtoa_r+0x65e>
 8008dea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dee:	4911      	ldr	r1, [pc, #68]	@ (8008e34 <_dtoa_r+0x5c4>)
 8008df0:	2000      	movs	r0, #0
 8008df2:	f7f7 fa51 	bl	8000298 <__aeabi_dsub>
 8008df6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008dfa:	f7f7 fe77 	bl	8000aec <__aeabi_dcmplt>
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	f040 8095 	bne.w	8008f2e <_dtoa_r+0x6be>
 8008e04:	42a6      	cmp	r6, r4
 8008e06:	f43f af50 	beq.w	8008caa <_dtoa_r+0x43a>
 8008e0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8008e38 <_dtoa_r+0x5c8>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	f7f7 fbf9 	bl	8000608 <__aeabi_dmul>
 8008e16:	4b08      	ldr	r3, [pc, #32]	@ (8008e38 <_dtoa_r+0x5c8>)
 8008e18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e22:	f7f7 fbf1 	bl	8000608 <__aeabi_dmul>
 8008e26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e2a:	e7c4      	b.n	8008db6 <_dtoa_r+0x546>
 8008e2c:	0800a6a0 	.word	0x0800a6a0
 8008e30:	0800a678 	.word	0x0800a678
 8008e34:	3ff00000 	.word	0x3ff00000
 8008e38:	40240000 	.word	0x40240000
 8008e3c:	401c0000 	.word	0x401c0000
 8008e40:	40140000 	.word	0x40140000
 8008e44:	3fe00000 	.word	0x3fe00000
 8008e48:	4631      	mov	r1, r6
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	f7f7 fbdc 	bl	8000608 <__aeabi_dmul>
 8008e50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e54:	9415      	str	r4, [sp, #84]	@ 0x54
 8008e56:	4656      	mov	r6, sl
 8008e58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e5c:	f7f7 fe84 	bl	8000b68 <__aeabi_d2iz>
 8008e60:	4605      	mov	r5, r0
 8008e62:	f7f7 fb67 	bl	8000534 <__aeabi_i2d>
 8008e66:	4602      	mov	r2, r0
 8008e68:	460b      	mov	r3, r1
 8008e6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e6e:	f7f7 fa13 	bl	8000298 <__aeabi_dsub>
 8008e72:	3530      	adds	r5, #48	@ 0x30
 8008e74:	f806 5b01 	strb.w	r5, [r6], #1
 8008e78:	4602      	mov	r2, r0
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	42a6      	cmp	r6, r4
 8008e7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e82:	f04f 0200 	mov.w	r2, #0
 8008e86:	d124      	bne.n	8008ed2 <_dtoa_r+0x662>
 8008e88:	4bac      	ldr	r3, [pc, #688]	@ (800913c <_dtoa_r+0x8cc>)
 8008e8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e8e:	f7f7 fa05 	bl	800029c <__adddf3>
 8008e92:	4602      	mov	r2, r0
 8008e94:	460b      	mov	r3, r1
 8008e96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e9a:	f7f7 fe45 	bl	8000b28 <__aeabi_dcmpgt>
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	d145      	bne.n	8008f2e <_dtoa_r+0x6be>
 8008ea2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008ea6:	49a5      	ldr	r1, [pc, #660]	@ (800913c <_dtoa_r+0x8cc>)
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	f7f7 f9f5 	bl	8000298 <__aeabi_dsub>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008eb6:	f7f7 fe19 	bl	8000aec <__aeabi_dcmplt>
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	f43f aef5 	beq.w	8008caa <_dtoa_r+0x43a>
 8008ec0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008ec2:	1e73      	subs	r3, r6, #1
 8008ec4:	9315      	str	r3, [sp, #84]	@ 0x54
 8008ec6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008eca:	2b30      	cmp	r3, #48	@ 0x30
 8008ecc:	d0f8      	beq.n	8008ec0 <_dtoa_r+0x650>
 8008ece:	9f04      	ldr	r7, [sp, #16]
 8008ed0:	e73e      	b.n	8008d50 <_dtoa_r+0x4e0>
 8008ed2:	4b9b      	ldr	r3, [pc, #620]	@ (8009140 <_dtoa_r+0x8d0>)
 8008ed4:	f7f7 fb98 	bl	8000608 <__aeabi_dmul>
 8008ed8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008edc:	e7bc      	b.n	8008e58 <_dtoa_r+0x5e8>
 8008ede:	d10c      	bne.n	8008efa <_dtoa_r+0x68a>
 8008ee0:	4b98      	ldr	r3, [pc, #608]	@ (8009144 <_dtoa_r+0x8d4>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ee8:	f7f7 fb8e 	bl	8000608 <__aeabi_dmul>
 8008eec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ef0:	f7f7 fe10 	bl	8000b14 <__aeabi_dcmpge>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	f000 8157 	beq.w	80091a8 <_dtoa_r+0x938>
 8008efa:	2400      	movs	r4, #0
 8008efc:	4625      	mov	r5, r4
 8008efe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f00:	43db      	mvns	r3, r3
 8008f02:	9304      	str	r3, [sp, #16]
 8008f04:	4656      	mov	r6, sl
 8008f06:	2700      	movs	r7, #0
 8008f08:	4621      	mov	r1, r4
 8008f0a:	4658      	mov	r0, fp
 8008f0c:	f000 fbb4 	bl	8009678 <_Bfree>
 8008f10:	2d00      	cmp	r5, #0
 8008f12:	d0dc      	beq.n	8008ece <_dtoa_r+0x65e>
 8008f14:	b12f      	cbz	r7, 8008f22 <_dtoa_r+0x6b2>
 8008f16:	42af      	cmp	r7, r5
 8008f18:	d003      	beq.n	8008f22 <_dtoa_r+0x6b2>
 8008f1a:	4639      	mov	r1, r7
 8008f1c:	4658      	mov	r0, fp
 8008f1e:	f000 fbab 	bl	8009678 <_Bfree>
 8008f22:	4629      	mov	r1, r5
 8008f24:	4658      	mov	r0, fp
 8008f26:	f000 fba7 	bl	8009678 <_Bfree>
 8008f2a:	e7d0      	b.n	8008ece <_dtoa_r+0x65e>
 8008f2c:	9704      	str	r7, [sp, #16]
 8008f2e:	4633      	mov	r3, r6
 8008f30:	461e      	mov	r6, r3
 8008f32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f36:	2a39      	cmp	r2, #57	@ 0x39
 8008f38:	d107      	bne.n	8008f4a <_dtoa_r+0x6da>
 8008f3a:	459a      	cmp	sl, r3
 8008f3c:	d1f8      	bne.n	8008f30 <_dtoa_r+0x6c0>
 8008f3e:	9a04      	ldr	r2, [sp, #16]
 8008f40:	3201      	adds	r2, #1
 8008f42:	9204      	str	r2, [sp, #16]
 8008f44:	2230      	movs	r2, #48	@ 0x30
 8008f46:	f88a 2000 	strb.w	r2, [sl]
 8008f4a:	781a      	ldrb	r2, [r3, #0]
 8008f4c:	3201      	adds	r2, #1
 8008f4e:	701a      	strb	r2, [r3, #0]
 8008f50:	e7bd      	b.n	8008ece <_dtoa_r+0x65e>
 8008f52:	4b7b      	ldr	r3, [pc, #492]	@ (8009140 <_dtoa_r+0x8d0>)
 8008f54:	2200      	movs	r2, #0
 8008f56:	f7f7 fb57 	bl	8000608 <__aeabi_dmul>
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	4604      	mov	r4, r0
 8008f60:	460d      	mov	r5, r1
 8008f62:	f7f7 fdb9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f66:	2800      	cmp	r0, #0
 8008f68:	f43f aebb 	beq.w	8008ce2 <_dtoa_r+0x472>
 8008f6c:	e6f0      	b.n	8008d50 <_dtoa_r+0x4e0>
 8008f6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008f70:	2a00      	cmp	r2, #0
 8008f72:	f000 80db 	beq.w	800912c <_dtoa_r+0x8bc>
 8008f76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f78:	2a01      	cmp	r2, #1
 8008f7a:	f300 80bf 	bgt.w	80090fc <_dtoa_r+0x88c>
 8008f7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008f80:	2a00      	cmp	r2, #0
 8008f82:	f000 80b7 	beq.w	80090f4 <_dtoa_r+0x884>
 8008f86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008f8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f8c:	4646      	mov	r6, r8
 8008f8e:	9a08      	ldr	r2, [sp, #32]
 8008f90:	2101      	movs	r1, #1
 8008f92:	441a      	add	r2, r3
 8008f94:	4658      	mov	r0, fp
 8008f96:	4498      	add	r8, r3
 8008f98:	9208      	str	r2, [sp, #32]
 8008f9a:	f000 fc21 	bl	80097e0 <__i2b>
 8008f9e:	4605      	mov	r5, r0
 8008fa0:	b15e      	cbz	r6, 8008fba <_dtoa_r+0x74a>
 8008fa2:	9b08      	ldr	r3, [sp, #32]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	dd08      	ble.n	8008fba <_dtoa_r+0x74a>
 8008fa8:	42b3      	cmp	r3, r6
 8008faa:	9a08      	ldr	r2, [sp, #32]
 8008fac:	bfa8      	it	ge
 8008fae:	4633      	movge	r3, r6
 8008fb0:	eba8 0803 	sub.w	r8, r8, r3
 8008fb4:	1af6      	subs	r6, r6, r3
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	9308      	str	r3, [sp, #32]
 8008fba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fbc:	b1f3      	cbz	r3, 8008ffc <_dtoa_r+0x78c>
 8008fbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f000 80b7 	beq.w	8009134 <_dtoa_r+0x8c4>
 8008fc6:	b18c      	cbz	r4, 8008fec <_dtoa_r+0x77c>
 8008fc8:	4629      	mov	r1, r5
 8008fca:	4622      	mov	r2, r4
 8008fcc:	4658      	mov	r0, fp
 8008fce:	f000 fcc7 	bl	8009960 <__pow5mult>
 8008fd2:	464a      	mov	r2, r9
 8008fd4:	4601      	mov	r1, r0
 8008fd6:	4605      	mov	r5, r0
 8008fd8:	4658      	mov	r0, fp
 8008fda:	f000 fc17 	bl	800980c <__multiply>
 8008fde:	4649      	mov	r1, r9
 8008fe0:	9004      	str	r0, [sp, #16]
 8008fe2:	4658      	mov	r0, fp
 8008fe4:	f000 fb48 	bl	8009678 <_Bfree>
 8008fe8:	9b04      	ldr	r3, [sp, #16]
 8008fea:	4699      	mov	r9, r3
 8008fec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fee:	1b1a      	subs	r2, r3, r4
 8008ff0:	d004      	beq.n	8008ffc <_dtoa_r+0x78c>
 8008ff2:	4649      	mov	r1, r9
 8008ff4:	4658      	mov	r0, fp
 8008ff6:	f000 fcb3 	bl	8009960 <__pow5mult>
 8008ffa:	4681      	mov	r9, r0
 8008ffc:	2101      	movs	r1, #1
 8008ffe:	4658      	mov	r0, fp
 8009000:	f000 fbee 	bl	80097e0 <__i2b>
 8009004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009006:	4604      	mov	r4, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	f000 81cf 	beq.w	80093ac <_dtoa_r+0xb3c>
 800900e:	461a      	mov	r2, r3
 8009010:	4601      	mov	r1, r0
 8009012:	4658      	mov	r0, fp
 8009014:	f000 fca4 	bl	8009960 <__pow5mult>
 8009018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800901a:	2b01      	cmp	r3, #1
 800901c:	4604      	mov	r4, r0
 800901e:	f300 8095 	bgt.w	800914c <_dtoa_r+0x8dc>
 8009022:	9b02      	ldr	r3, [sp, #8]
 8009024:	2b00      	cmp	r3, #0
 8009026:	f040 8087 	bne.w	8009138 <_dtoa_r+0x8c8>
 800902a:	9b03      	ldr	r3, [sp, #12]
 800902c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009030:	2b00      	cmp	r3, #0
 8009032:	f040 8089 	bne.w	8009148 <_dtoa_r+0x8d8>
 8009036:	9b03      	ldr	r3, [sp, #12]
 8009038:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800903c:	0d1b      	lsrs	r3, r3, #20
 800903e:	051b      	lsls	r3, r3, #20
 8009040:	b12b      	cbz	r3, 800904e <_dtoa_r+0x7de>
 8009042:	9b08      	ldr	r3, [sp, #32]
 8009044:	3301      	adds	r3, #1
 8009046:	9308      	str	r3, [sp, #32]
 8009048:	f108 0801 	add.w	r8, r8, #1
 800904c:	2301      	movs	r3, #1
 800904e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009052:	2b00      	cmp	r3, #0
 8009054:	f000 81b0 	beq.w	80093b8 <_dtoa_r+0xb48>
 8009058:	6923      	ldr	r3, [r4, #16]
 800905a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800905e:	6918      	ldr	r0, [r3, #16]
 8009060:	f000 fb72 	bl	8009748 <__hi0bits>
 8009064:	f1c0 0020 	rsb	r0, r0, #32
 8009068:	9b08      	ldr	r3, [sp, #32]
 800906a:	4418      	add	r0, r3
 800906c:	f010 001f 	ands.w	r0, r0, #31
 8009070:	d077      	beq.n	8009162 <_dtoa_r+0x8f2>
 8009072:	f1c0 0320 	rsb	r3, r0, #32
 8009076:	2b04      	cmp	r3, #4
 8009078:	dd6b      	ble.n	8009152 <_dtoa_r+0x8e2>
 800907a:	9b08      	ldr	r3, [sp, #32]
 800907c:	f1c0 001c 	rsb	r0, r0, #28
 8009080:	4403      	add	r3, r0
 8009082:	4480      	add	r8, r0
 8009084:	4406      	add	r6, r0
 8009086:	9308      	str	r3, [sp, #32]
 8009088:	f1b8 0f00 	cmp.w	r8, #0
 800908c:	dd05      	ble.n	800909a <_dtoa_r+0x82a>
 800908e:	4649      	mov	r1, r9
 8009090:	4642      	mov	r2, r8
 8009092:	4658      	mov	r0, fp
 8009094:	f000 fcbe 	bl	8009a14 <__lshift>
 8009098:	4681      	mov	r9, r0
 800909a:	9b08      	ldr	r3, [sp, #32]
 800909c:	2b00      	cmp	r3, #0
 800909e:	dd05      	ble.n	80090ac <_dtoa_r+0x83c>
 80090a0:	4621      	mov	r1, r4
 80090a2:	461a      	mov	r2, r3
 80090a4:	4658      	mov	r0, fp
 80090a6:	f000 fcb5 	bl	8009a14 <__lshift>
 80090aa:	4604      	mov	r4, r0
 80090ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d059      	beq.n	8009166 <_dtoa_r+0x8f6>
 80090b2:	4621      	mov	r1, r4
 80090b4:	4648      	mov	r0, r9
 80090b6:	f000 fd19 	bl	8009aec <__mcmp>
 80090ba:	2800      	cmp	r0, #0
 80090bc:	da53      	bge.n	8009166 <_dtoa_r+0x8f6>
 80090be:	1e7b      	subs	r3, r7, #1
 80090c0:	9304      	str	r3, [sp, #16]
 80090c2:	4649      	mov	r1, r9
 80090c4:	2300      	movs	r3, #0
 80090c6:	220a      	movs	r2, #10
 80090c8:	4658      	mov	r0, fp
 80090ca:	f000 faf7 	bl	80096bc <__multadd>
 80090ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090d0:	4681      	mov	r9, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f000 8172 	beq.w	80093bc <_dtoa_r+0xb4c>
 80090d8:	2300      	movs	r3, #0
 80090da:	4629      	mov	r1, r5
 80090dc:	220a      	movs	r2, #10
 80090de:	4658      	mov	r0, fp
 80090e0:	f000 faec 	bl	80096bc <__multadd>
 80090e4:	9b00      	ldr	r3, [sp, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	4605      	mov	r5, r0
 80090ea:	dc67      	bgt.n	80091bc <_dtoa_r+0x94c>
 80090ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	dc41      	bgt.n	8009176 <_dtoa_r+0x906>
 80090f2:	e063      	b.n	80091bc <_dtoa_r+0x94c>
 80090f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80090f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80090fa:	e746      	b.n	8008f8a <_dtoa_r+0x71a>
 80090fc:	9b07      	ldr	r3, [sp, #28]
 80090fe:	1e5c      	subs	r4, r3, #1
 8009100:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009102:	42a3      	cmp	r3, r4
 8009104:	bfbf      	itttt	lt
 8009106:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009108:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800910a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800910c:	1ae3      	sublt	r3, r4, r3
 800910e:	bfb4      	ite	lt
 8009110:	18d2      	addlt	r2, r2, r3
 8009112:	1b1c      	subge	r4, r3, r4
 8009114:	9b07      	ldr	r3, [sp, #28]
 8009116:	bfbc      	itt	lt
 8009118:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800911a:	2400      	movlt	r4, #0
 800911c:	2b00      	cmp	r3, #0
 800911e:	bfb5      	itete	lt
 8009120:	eba8 0603 	sublt.w	r6, r8, r3
 8009124:	9b07      	ldrge	r3, [sp, #28]
 8009126:	2300      	movlt	r3, #0
 8009128:	4646      	movge	r6, r8
 800912a:	e730      	b.n	8008f8e <_dtoa_r+0x71e>
 800912c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800912e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009130:	4646      	mov	r6, r8
 8009132:	e735      	b.n	8008fa0 <_dtoa_r+0x730>
 8009134:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009136:	e75c      	b.n	8008ff2 <_dtoa_r+0x782>
 8009138:	2300      	movs	r3, #0
 800913a:	e788      	b.n	800904e <_dtoa_r+0x7de>
 800913c:	3fe00000 	.word	0x3fe00000
 8009140:	40240000 	.word	0x40240000
 8009144:	40140000 	.word	0x40140000
 8009148:	9b02      	ldr	r3, [sp, #8]
 800914a:	e780      	b.n	800904e <_dtoa_r+0x7de>
 800914c:	2300      	movs	r3, #0
 800914e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009150:	e782      	b.n	8009058 <_dtoa_r+0x7e8>
 8009152:	d099      	beq.n	8009088 <_dtoa_r+0x818>
 8009154:	9a08      	ldr	r2, [sp, #32]
 8009156:	331c      	adds	r3, #28
 8009158:	441a      	add	r2, r3
 800915a:	4498      	add	r8, r3
 800915c:	441e      	add	r6, r3
 800915e:	9208      	str	r2, [sp, #32]
 8009160:	e792      	b.n	8009088 <_dtoa_r+0x818>
 8009162:	4603      	mov	r3, r0
 8009164:	e7f6      	b.n	8009154 <_dtoa_r+0x8e4>
 8009166:	9b07      	ldr	r3, [sp, #28]
 8009168:	9704      	str	r7, [sp, #16]
 800916a:	2b00      	cmp	r3, #0
 800916c:	dc20      	bgt.n	80091b0 <_dtoa_r+0x940>
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009172:	2b02      	cmp	r3, #2
 8009174:	dd1e      	ble.n	80091b4 <_dtoa_r+0x944>
 8009176:	9b00      	ldr	r3, [sp, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	f47f aec0 	bne.w	8008efe <_dtoa_r+0x68e>
 800917e:	4621      	mov	r1, r4
 8009180:	2205      	movs	r2, #5
 8009182:	4658      	mov	r0, fp
 8009184:	f000 fa9a 	bl	80096bc <__multadd>
 8009188:	4601      	mov	r1, r0
 800918a:	4604      	mov	r4, r0
 800918c:	4648      	mov	r0, r9
 800918e:	f000 fcad 	bl	8009aec <__mcmp>
 8009192:	2800      	cmp	r0, #0
 8009194:	f77f aeb3 	ble.w	8008efe <_dtoa_r+0x68e>
 8009198:	4656      	mov	r6, sl
 800919a:	2331      	movs	r3, #49	@ 0x31
 800919c:	f806 3b01 	strb.w	r3, [r6], #1
 80091a0:	9b04      	ldr	r3, [sp, #16]
 80091a2:	3301      	adds	r3, #1
 80091a4:	9304      	str	r3, [sp, #16]
 80091a6:	e6ae      	b.n	8008f06 <_dtoa_r+0x696>
 80091a8:	9c07      	ldr	r4, [sp, #28]
 80091aa:	9704      	str	r7, [sp, #16]
 80091ac:	4625      	mov	r5, r4
 80091ae:	e7f3      	b.n	8009198 <_dtoa_r+0x928>
 80091b0:	9b07      	ldr	r3, [sp, #28]
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f000 8104 	beq.w	80093c4 <_dtoa_r+0xb54>
 80091bc:	2e00      	cmp	r6, #0
 80091be:	dd05      	ble.n	80091cc <_dtoa_r+0x95c>
 80091c0:	4629      	mov	r1, r5
 80091c2:	4632      	mov	r2, r6
 80091c4:	4658      	mov	r0, fp
 80091c6:	f000 fc25 	bl	8009a14 <__lshift>
 80091ca:	4605      	mov	r5, r0
 80091cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d05a      	beq.n	8009288 <_dtoa_r+0xa18>
 80091d2:	6869      	ldr	r1, [r5, #4]
 80091d4:	4658      	mov	r0, fp
 80091d6:	f000 fa0f 	bl	80095f8 <_Balloc>
 80091da:	4606      	mov	r6, r0
 80091dc:	b928      	cbnz	r0, 80091ea <_dtoa_r+0x97a>
 80091de:	4b84      	ldr	r3, [pc, #528]	@ (80093f0 <_dtoa_r+0xb80>)
 80091e0:	4602      	mov	r2, r0
 80091e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80091e6:	f7ff bb5a 	b.w	800889e <_dtoa_r+0x2e>
 80091ea:	692a      	ldr	r2, [r5, #16]
 80091ec:	3202      	adds	r2, #2
 80091ee:	0092      	lsls	r2, r2, #2
 80091f0:	f105 010c 	add.w	r1, r5, #12
 80091f4:	300c      	adds	r0, #12
 80091f6:	f7ff faa4 	bl	8008742 <memcpy>
 80091fa:	2201      	movs	r2, #1
 80091fc:	4631      	mov	r1, r6
 80091fe:	4658      	mov	r0, fp
 8009200:	f000 fc08 	bl	8009a14 <__lshift>
 8009204:	f10a 0301 	add.w	r3, sl, #1
 8009208:	9307      	str	r3, [sp, #28]
 800920a:	9b00      	ldr	r3, [sp, #0]
 800920c:	4453      	add	r3, sl
 800920e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009210:	9b02      	ldr	r3, [sp, #8]
 8009212:	f003 0301 	and.w	r3, r3, #1
 8009216:	462f      	mov	r7, r5
 8009218:	930a      	str	r3, [sp, #40]	@ 0x28
 800921a:	4605      	mov	r5, r0
 800921c:	9b07      	ldr	r3, [sp, #28]
 800921e:	4621      	mov	r1, r4
 8009220:	3b01      	subs	r3, #1
 8009222:	4648      	mov	r0, r9
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	f7ff fa9a 	bl	800875e <quorem>
 800922a:	4639      	mov	r1, r7
 800922c:	9002      	str	r0, [sp, #8]
 800922e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009232:	4648      	mov	r0, r9
 8009234:	f000 fc5a 	bl	8009aec <__mcmp>
 8009238:	462a      	mov	r2, r5
 800923a:	9008      	str	r0, [sp, #32]
 800923c:	4621      	mov	r1, r4
 800923e:	4658      	mov	r0, fp
 8009240:	f000 fc70 	bl	8009b24 <__mdiff>
 8009244:	68c2      	ldr	r2, [r0, #12]
 8009246:	4606      	mov	r6, r0
 8009248:	bb02      	cbnz	r2, 800928c <_dtoa_r+0xa1c>
 800924a:	4601      	mov	r1, r0
 800924c:	4648      	mov	r0, r9
 800924e:	f000 fc4d 	bl	8009aec <__mcmp>
 8009252:	4602      	mov	r2, r0
 8009254:	4631      	mov	r1, r6
 8009256:	4658      	mov	r0, fp
 8009258:	920e      	str	r2, [sp, #56]	@ 0x38
 800925a:	f000 fa0d 	bl	8009678 <_Bfree>
 800925e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009260:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009262:	9e07      	ldr	r6, [sp, #28]
 8009264:	ea43 0102 	orr.w	r1, r3, r2
 8009268:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800926a:	4319      	orrs	r1, r3
 800926c:	d110      	bne.n	8009290 <_dtoa_r+0xa20>
 800926e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009272:	d029      	beq.n	80092c8 <_dtoa_r+0xa58>
 8009274:	9b08      	ldr	r3, [sp, #32]
 8009276:	2b00      	cmp	r3, #0
 8009278:	dd02      	ble.n	8009280 <_dtoa_r+0xa10>
 800927a:	9b02      	ldr	r3, [sp, #8]
 800927c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009280:	9b00      	ldr	r3, [sp, #0]
 8009282:	f883 8000 	strb.w	r8, [r3]
 8009286:	e63f      	b.n	8008f08 <_dtoa_r+0x698>
 8009288:	4628      	mov	r0, r5
 800928a:	e7bb      	b.n	8009204 <_dtoa_r+0x994>
 800928c:	2201      	movs	r2, #1
 800928e:	e7e1      	b.n	8009254 <_dtoa_r+0x9e4>
 8009290:	9b08      	ldr	r3, [sp, #32]
 8009292:	2b00      	cmp	r3, #0
 8009294:	db04      	blt.n	80092a0 <_dtoa_r+0xa30>
 8009296:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009298:	430b      	orrs	r3, r1
 800929a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800929c:	430b      	orrs	r3, r1
 800929e:	d120      	bne.n	80092e2 <_dtoa_r+0xa72>
 80092a0:	2a00      	cmp	r2, #0
 80092a2:	dded      	ble.n	8009280 <_dtoa_r+0xa10>
 80092a4:	4649      	mov	r1, r9
 80092a6:	2201      	movs	r2, #1
 80092a8:	4658      	mov	r0, fp
 80092aa:	f000 fbb3 	bl	8009a14 <__lshift>
 80092ae:	4621      	mov	r1, r4
 80092b0:	4681      	mov	r9, r0
 80092b2:	f000 fc1b 	bl	8009aec <__mcmp>
 80092b6:	2800      	cmp	r0, #0
 80092b8:	dc03      	bgt.n	80092c2 <_dtoa_r+0xa52>
 80092ba:	d1e1      	bne.n	8009280 <_dtoa_r+0xa10>
 80092bc:	f018 0f01 	tst.w	r8, #1
 80092c0:	d0de      	beq.n	8009280 <_dtoa_r+0xa10>
 80092c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80092c6:	d1d8      	bne.n	800927a <_dtoa_r+0xa0a>
 80092c8:	9a00      	ldr	r2, [sp, #0]
 80092ca:	2339      	movs	r3, #57	@ 0x39
 80092cc:	7013      	strb	r3, [r2, #0]
 80092ce:	4633      	mov	r3, r6
 80092d0:	461e      	mov	r6, r3
 80092d2:	3b01      	subs	r3, #1
 80092d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80092d8:	2a39      	cmp	r2, #57	@ 0x39
 80092da:	d052      	beq.n	8009382 <_dtoa_r+0xb12>
 80092dc:	3201      	adds	r2, #1
 80092de:	701a      	strb	r2, [r3, #0]
 80092e0:	e612      	b.n	8008f08 <_dtoa_r+0x698>
 80092e2:	2a00      	cmp	r2, #0
 80092e4:	dd07      	ble.n	80092f6 <_dtoa_r+0xa86>
 80092e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80092ea:	d0ed      	beq.n	80092c8 <_dtoa_r+0xa58>
 80092ec:	9a00      	ldr	r2, [sp, #0]
 80092ee:	f108 0301 	add.w	r3, r8, #1
 80092f2:	7013      	strb	r3, [r2, #0]
 80092f4:	e608      	b.n	8008f08 <_dtoa_r+0x698>
 80092f6:	9b07      	ldr	r3, [sp, #28]
 80092f8:	9a07      	ldr	r2, [sp, #28]
 80092fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80092fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009300:	4293      	cmp	r3, r2
 8009302:	d028      	beq.n	8009356 <_dtoa_r+0xae6>
 8009304:	4649      	mov	r1, r9
 8009306:	2300      	movs	r3, #0
 8009308:	220a      	movs	r2, #10
 800930a:	4658      	mov	r0, fp
 800930c:	f000 f9d6 	bl	80096bc <__multadd>
 8009310:	42af      	cmp	r7, r5
 8009312:	4681      	mov	r9, r0
 8009314:	f04f 0300 	mov.w	r3, #0
 8009318:	f04f 020a 	mov.w	r2, #10
 800931c:	4639      	mov	r1, r7
 800931e:	4658      	mov	r0, fp
 8009320:	d107      	bne.n	8009332 <_dtoa_r+0xac2>
 8009322:	f000 f9cb 	bl	80096bc <__multadd>
 8009326:	4607      	mov	r7, r0
 8009328:	4605      	mov	r5, r0
 800932a:	9b07      	ldr	r3, [sp, #28]
 800932c:	3301      	adds	r3, #1
 800932e:	9307      	str	r3, [sp, #28]
 8009330:	e774      	b.n	800921c <_dtoa_r+0x9ac>
 8009332:	f000 f9c3 	bl	80096bc <__multadd>
 8009336:	4629      	mov	r1, r5
 8009338:	4607      	mov	r7, r0
 800933a:	2300      	movs	r3, #0
 800933c:	220a      	movs	r2, #10
 800933e:	4658      	mov	r0, fp
 8009340:	f000 f9bc 	bl	80096bc <__multadd>
 8009344:	4605      	mov	r5, r0
 8009346:	e7f0      	b.n	800932a <_dtoa_r+0xaba>
 8009348:	9b00      	ldr	r3, [sp, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	bfcc      	ite	gt
 800934e:	461e      	movgt	r6, r3
 8009350:	2601      	movle	r6, #1
 8009352:	4456      	add	r6, sl
 8009354:	2700      	movs	r7, #0
 8009356:	4649      	mov	r1, r9
 8009358:	2201      	movs	r2, #1
 800935a:	4658      	mov	r0, fp
 800935c:	f000 fb5a 	bl	8009a14 <__lshift>
 8009360:	4621      	mov	r1, r4
 8009362:	4681      	mov	r9, r0
 8009364:	f000 fbc2 	bl	8009aec <__mcmp>
 8009368:	2800      	cmp	r0, #0
 800936a:	dcb0      	bgt.n	80092ce <_dtoa_r+0xa5e>
 800936c:	d102      	bne.n	8009374 <_dtoa_r+0xb04>
 800936e:	f018 0f01 	tst.w	r8, #1
 8009372:	d1ac      	bne.n	80092ce <_dtoa_r+0xa5e>
 8009374:	4633      	mov	r3, r6
 8009376:	461e      	mov	r6, r3
 8009378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800937c:	2a30      	cmp	r2, #48	@ 0x30
 800937e:	d0fa      	beq.n	8009376 <_dtoa_r+0xb06>
 8009380:	e5c2      	b.n	8008f08 <_dtoa_r+0x698>
 8009382:	459a      	cmp	sl, r3
 8009384:	d1a4      	bne.n	80092d0 <_dtoa_r+0xa60>
 8009386:	9b04      	ldr	r3, [sp, #16]
 8009388:	3301      	adds	r3, #1
 800938a:	9304      	str	r3, [sp, #16]
 800938c:	2331      	movs	r3, #49	@ 0x31
 800938e:	f88a 3000 	strb.w	r3, [sl]
 8009392:	e5b9      	b.n	8008f08 <_dtoa_r+0x698>
 8009394:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009396:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80093f4 <_dtoa_r+0xb84>
 800939a:	b11b      	cbz	r3, 80093a4 <_dtoa_r+0xb34>
 800939c:	f10a 0308 	add.w	r3, sl, #8
 80093a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80093a2:	6013      	str	r3, [r2, #0]
 80093a4:	4650      	mov	r0, sl
 80093a6:	b019      	add	sp, #100	@ 0x64
 80093a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	f77f ae37 	ble.w	8009022 <_dtoa_r+0x7b2>
 80093b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80093b8:	2001      	movs	r0, #1
 80093ba:	e655      	b.n	8009068 <_dtoa_r+0x7f8>
 80093bc:	9b00      	ldr	r3, [sp, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	f77f aed6 	ble.w	8009170 <_dtoa_r+0x900>
 80093c4:	4656      	mov	r6, sl
 80093c6:	4621      	mov	r1, r4
 80093c8:	4648      	mov	r0, r9
 80093ca:	f7ff f9c8 	bl	800875e <quorem>
 80093ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80093d2:	f806 8b01 	strb.w	r8, [r6], #1
 80093d6:	9b00      	ldr	r3, [sp, #0]
 80093d8:	eba6 020a 	sub.w	r2, r6, sl
 80093dc:	4293      	cmp	r3, r2
 80093de:	ddb3      	ble.n	8009348 <_dtoa_r+0xad8>
 80093e0:	4649      	mov	r1, r9
 80093e2:	2300      	movs	r3, #0
 80093e4:	220a      	movs	r2, #10
 80093e6:	4658      	mov	r0, fp
 80093e8:	f000 f968 	bl	80096bc <__multadd>
 80093ec:	4681      	mov	r9, r0
 80093ee:	e7ea      	b.n	80093c6 <_dtoa_r+0xb56>
 80093f0:	0800a5fc 	.word	0x0800a5fc
 80093f4:	0800a580 	.word	0x0800a580

080093f8 <_free_r>:
 80093f8:	b538      	push	{r3, r4, r5, lr}
 80093fa:	4605      	mov	r5, r0
 80093fc:	2900      	cmp	r1, #0
 80093fe:	d041      	beq.n	8009484 <_free_r+0x8c>
 8009400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009404:	1f0c      	subs	r4, r1, #4
 8009406:	2b00      	cmp	r3, #0
 8009408:	bfb8      	it	lt
 800940a:	18e4      	addlt	r4, r4, r3
 800940c:	f000 f8e8 	bl	80095e0 <__malloc_lock>
 8009410:	4a1d      	ldr	r2, [pc, #116]	@ (8009488 <_free_r+0x90>)
 8009412:	6813      	ldr	r3, [r2, #0]
 8009414:	b933      	cbnz	r3, 8009424 <_free_r+0x2c>
 8009416:	6063      	str	r3, [r4, #4]
 8009418:	6014      	str	r4, [r2, #0]
 800941a:	4628      	mov	r0, r5
 800941c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009420:	f000 b8e4 	b.w	80095ec <__malloc_unlock>
 8009424:	42a3      	cmp	r3, r4
 8009426:	d908      	bls.n	800943a <_free_r+0x42>
 8009428:	6820      	ldr	r0, [r4, #0]
 800942a:	1821      	adds	r1, r4, r0
 800942c:	428b      	cmp	r3, r1
 800942e:	bf01      	itttt	eq
 8009430:	6819      	ldreq	r1, [r3, #0]
 8009432:	685b      	ldreq	r3, [r3, #4]
 8009434:	1809      	addeq	r1, r1, r0
 8009436:	6021      	streq	r1, [r4, #0]
 8009438:	e7ed      	b.n	8009416 <_free_r+0x1e>
 800943a:	461a      	mov	r2, r3
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	b10b      	cbz	r3, 8009444 <_free_r+0x4c>
 8009440:	42a3      	cmp	r3, r4
 8009442:	d9fa      	bls.n	800943a <_free_r+0x42>
 8009444:	6811      	ldr	r1, [r2, #0]
 8009446:	1850      	adds	r0, r2, r1
 8009448:	42a0      	cmp	r0, r4
 800944a:	d10b      	bne.n	8009464 <_free_r+0x6c>
 800944c:	6820      	ldr	r0, [r4, #0]
 800944e:	4401      	add	r1, r0
 8009450:	1850      	adds	r0, r2, r1
 8009452:	4283      	cmp	r3, r0
 8009454:	6011      	str	r1, [r2, #0]
 8009456:	d1e0      	bne.n	800941a <_free_r+0x22>
 8009458:	6818      	ldr	r0, [r3, #0]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	6053      	str	r3, [r2, #4]
 800945e:	4408      	add	r0, r1
 8009460:	6010      	str	r0, [r2, #0]
 8009462:	e7da      	b.n	800941a <_free_r+0x22>
 8009464:	d902      	bls.n	800946c <_free_r+0x74>
 8009466:	230c      	movs	r3, #12
 8009468:	602b      	str	r3, [r5, #0]
 800946a:	e7d6      	b.n	800941a <_free_r+0x22>
 800946c:	6820      	ldr	r0, [r4, #0]
 800946e:	1821      	adds	r1, r4, r0
 8009470:	428b      	cmp	r3, r1
 8009472:	bf04      	itt	eq
 8009474:	6819      	ldreq	r1, [r3, #0]
 8009476:	685b      	ldreq	r3, [r3, #4]
 8009478:	6063      	str	r3, [r4, #4]
 800947a:	bf04      	itt	eq
 800947c:	1809      	addeq	r1, r1, r0
 800947e:	6021      	streq	r1, [r4, #0]
 8009480:	6054      	str	r4, [r2, #4]
 8009482:	e7ca      	b.n	800941a <_free_r+0x22>
 8009484:	bd38      	pop	{r3, r4, r5, pc}
 8009486:	bf00      	nop
 8009488:	20005110 	.word	0x20005110

0800948c <malloc>:
 800948c:	4b02      	ldr	r3, [pc, #8]	@ (8009498 <malloc+0xc>)
 800948e:	4601      	mov	r1, r0
 8009490:	6818      	ldr	r0, [r3, #0]
 8009492:	f000 b825 	b.w	80094e0 <_malloc_r>
 8009496:	bf00      	nop
 8009498:	2000001c 	.word	0x2000001c

0800949c <sbrk_aligned>:
 800949c:	b570      	push	{r4, r5, r6, lr}
 800949e:	4e0f      	ldr	r6, [pc, #60]	@ (80094dc <sbrk_aligned+0x40>)
 80094a0:	460c      	mov	r4, r1
 80094a2:	6831      	ldr	r1, [r6, #0]
 80094a4:	4605      	mov	r5, r0
 80094a6:	b911      	cbnz	r1, 80094ae <sbrk_aligned+0x12>
 80094a8:	f000 feaa 	bl	800a200 <_sbrk_r>
 80094ac:	6030      	str	r0, [r6, #0]
 80094ae:	4621      	mov	r1, r4
 80094b0:	4628      	mov	r0, r5
 80094b2:	f000 fea5 	bl	800a200 <_sbrk_r>
 80094b6:	1c43      	adds	r3, r0, #1
 80094b8:	d103      	bne.n	80094c2 <sbrk_aligned+0x26>
 80094ba:	f04f 34ff 	mov.w	r4, #4294967295
 80094be:	4620      	mov	r0, r4
 80094c0:	bd70      	pop	{r4, r5, r6, pc}
 80094c2:	1cc4      	adds	r4, r0, #3
 80094c4:	f024 0403 	bic.w	r4, r4, #3
 80094c8:	42a0      	cmp	r0, r4
 80094ca:	d0f8      	beq.n	80094be <sbrk_aligned+0x22>
 80094cc:	1a21      	subs	r1, r4, r0
 80094ce:	4628      	mov	r0, r5
 80094d0:	f000 fe96 	bl	800a200 <_sbrk_r>
 80094d4:	3001      	adds	r0, #1
 80094d6:	d1f2      	bne.n	80094be <sbrk_aligned+0x22>
 80094d8:	e7ef      	b.n	80094ba <sbrk_aligned+0x1e>
 80094da:	bf00      	nop
 80094dc:	2000510c 	.word	0x2000510c

080094e0 <_malloc_r>:
 80094e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094e4:	1ccd      	adds	r5, r1, #3
 80094e6:	f025 0503 	bic.w	r5, r5, #3
 80094ea:	3508      	adds	r5, #8
 80094ec:	2d0c      	cmp	r5, #12
 80094ee:	bf38      	it	cc
 80094f0:	250c      	movcc	r5, #12
 80094f2:	2d00      	cmp	r5, #0
 80094f4:	4606      	mov	r6, r0
 80094f6:	db01      	blt.n	80094fc <_malloc_r+0x1c>
 80094f8:	42a9      	cmp	r1, r5
 80094fa:	d904      	bls.n	8009506 <_malloc_r+0x26>
 80094fc:	230c      	movs	r3, #12
 80094fe:	6033      	str	r3, [r6, #0]
 8009500:	2000      	movs	r0, #0
 8009502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009506:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80095dc <_malloc_r+0xfc>
 800950a:	f000 f869 	bl	80095e0 <__malloc_lock>
 800950e:	f8d8 3000 	ldr.w	r3, [r8]
 8009512:	461c      	mov	r4, r3
 8009514:	bb44      	cbnz	r4, 8009568 <_malloc_r+0x88>
 8009516:	4629      	mov	r1, r5
 8009518:	4630      	mov	r0, r6
 800951a:	f7ff ffbf 	bl	800949c <sbrk_aligned>
 800951e:	1c43      	adds	r3, r0, #1
 8009520:	4604      	mov	r4, r0
 8009522:	d158      	bne.n	80095d6 <_malloc_r+0xf6>
 8009524:	f8d8 4000 	ldr.w	r4, [r8]
 8009528:	4627      	mov	r7, r4
 800952a:	2f00      	cmp	r7, #0
 800952c:	d143      	bne.n	80095b6 <_malloc_r+0xd6>
 800952e:	2c00      	cmp	r4, #0
 8009530:	d04b      	beq.n	80095ca <_malloc_r+0xea>
 8009532:	6823      	ldr	r3, [r4, #0]
 8009534:	4639      	mov	r1, r7
 8009536:	4630      	mov	r0, r6
 8009538:	eb04 0903 	add.w	r9, r4, r3
 800953c:	f000 fe60 	bl	800a200 <_sbrk_r>
 8009540:	4581      	cmp	r9, r0
 8009542:	d142      	bne.n	80095ca <_malloc_r+0xea>
 8009544:	6821      	ldr	r1, [r4, #0]
 8009546:	1a6d      	subs	r5, r5, r1
 8009548:	4629      	mov	r1, r5
 800954a:	4630      	mov	r0, r6
 800954c:	f7ff ffa6 	bl	800949c <sbrk_aligned>
 8009550:	3001      	adds	r0, #1
 8009552:	d03a      	beq.n	80095ca <_malloc_r+0xea>
 8009554:	6823      	ldr	r3, [r4, #0]
 8009556:	442b      	add	r3, r5
 8009558:	6023      	str	r3, [r4, #0]
 800955a:	f8d8 3000 	ldr.w	r3, [r8]
 800955e:	685a      	ldr	r2, [r3, #4]
 8009560:	bb62      	cbnz	r2, 80095bc <_malloc_r+0xdc>
 8009562:	f8c8 7000 	str.w	r7, [r8]
 8009566:	e00f      	b.n	8009588 <_malloc_r+0xa8>
 8009568:	6822      	ldr	r2, [r4, #0]
 800956a:	1b52      	subs	r2, r2, r5
 800956c:	d420      	bmi.n	80095b0 <_malloc_r+0xd0>
 800956e:	2a0b      	cmp	r2, #11
 8009570:	d917      	bls.n	80095a2 <_malloc_r+0xc2>
 8009572:	1961      	adds	r1, r4, r5
 8009574:	42a3      	cmp	r3, r4
 8009576:	6025      	str	r5, [r4, #0]
 8009578:	bf18      	it	ne
 800957a:	6059      	strne	r1, [r3, #4]
 800957c:	6863      	ldr	r3, [r4, #4]
 800957e:	bf08      	it	eq
 8009580:	f8c8 1000 	streq.w	r1, [r8]
 8009584:	5162      	str	r2, [r4, r5]
 8009586:	604b      	str	r3, [r1, #4]
 8009588:	4630      	mov	r0, r6
 800958a:	f000 f82f 	bl	80095ec <__malloc_unlock>
 800958e:	f104 000b 	add.w	r0, r4, #11
 8009592:	1d23      	adds	r3, r4, #4
 8009594:	f020 0007 	bic.w	r0, r0, #7
 8009598:	1ac2      	subs	r2, r0, r3
 800959a:	bf1c      	itt	ne
 800959c:	1a1b      	subne	r3, r3, r0
 800959e:	50a3      	strne	r3, [r4, r2]
 80095a0:	e7af      	b.n	8009502 <_malloc_r+0x22>
 80095a2:	6862      	ldr	r2, [r4, #4]
 80095a4:	42a3      	cmp	r3, r4
 80095a6:	bf0c      	ite	eq
 80095a8:	f8c8 2000 	streq.w	r2, [r8]
 80095ac:	605a      	strne	r2, [r3, #4]
 80095ae:	e7eb      	b.n	8009588 <_malloc_r+0xa8>
 80095b0:	4623      	mov	r3, r4
 80095b2:	6864      	ldr	r4, [r4, #4]
 80095b4:	e7ae      	b.n	8009514 <_malloc_r+0x34>
 80095b6:	463c      	mov	r4, r7
 80095b8:	687f      	ldr	r7, [r7, #4]
 80095ba:	e7b6      	b.n	800952a <_malloc_r+0x4a>
 80095bc:	461a      	mov	r2, r3
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	42a3      	cmp	r3, r4
 80095c2:	d1fb      	bne.n	80095bc <_malloc_r+0xdc>
 80095c4:	2300      	movs	r3, #0
 80095c6:	6053      	str	r3, [r2, #4]
 80095c8:	e7de      	b.n	8009588 <_malloc_r+0xa8>
 80095ca:	230c      	movs	r3, #12
 80095cc:	6033      	str	r3, [r6, #0]
 80095ce:	4630      	mov	r0, r6
 80095d0:	f000 f80c 	bl	80095ec <__malloc_unlock>
 80095d4:	e794      	b.n	8009500 <_malloc_r+0x20>
 80095d6:	6005      	str	r5, [r0, #0]
 80095d8:	e7d6      	b.n	8009588 <_malloc_r+0xa8>
 80095da:	bf00      	nop
 80095dc:	20005110 	.word	0x20005110

080095e0 <__malloc_lock>:
 80095e0:	4801      	ldr	r0, [pc, #4]	@ (80095e8 <__malloc_lock+0x8>)
 80095e2:	f7ff b8ac 	b.w	800873e <__retarget_lock_acquire_recursive>
 80095e6:	bf00      	nop
 80095e8:	20005108 	.word	0x20005108

080095ec <__malloc_unlock>:
 80095ec:	4801      	ldr	r0, [pc, #4]	@ (80095f4 <__malloc_unlock+0x8>)
 80095ee:	f7ff b8a7 	b.w	8008740 <__retarget_lock_release_recursive>
 80095f2:	bf00      	nop
 80095f4:	20005108 	.word	0x20005108

080095f8 <_Balloc>:
 80095f8:	b570      	push	{r4, r5, r6, lr}
 80095fa:	69c6      	ldr	r6, [r0, #28]
 80095fc:	4604      	mov	r4, r0
 80095fe:	460d      	mov	r5, r1
 8009600:	b976      	cbnz	r6, 8009620 <_Balloc+0x28>
 8009602:	2010      	movs	r0, #16
 8009604:	f7ff ff42 	bl	800948c <malloc>
 8009608:	4602      	mov	r2, r0
 800960a:	61e0      	str	r0, [r4, #28]
 800960c:	b920      	cbnz	r0, 8009618 <_Balloc+0x20>
 800960e:	4b18      	ldr	r3, [pc, #96]	@ (8009670 <_Balloc+0x78>)
 8009610:	4818      	ldr	r0, [pc, #96]	@ (8009674 <_Balloc+0x7c>)
 8009612:	216b      	movs	r1, #107	@ 0x6b
 8009614:	f000 fe04 	bl	800a220 <__assert_func>
 8009618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800961c:	6006      	str	r6, [r0, #0]
 800961e:	60c6      	str	r6, [r0, #12]
 8009620:	69e6      	ldr	r6, [r4, #28]
 8009622:	68f3      	ldr	r3, [r6, #12]
 8009624:	b183      	cbz	r3, 8009648 <_Balloc+0x50>
 8009626:	69e3      	ldr	r3, [r4, #28]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800962e:	b9b8      	cbnz	r0, 8009660 <_Balloc+0x68>
 8009630:	2101      	movs	r1, #1
 8009632:	fa01 f605 	lsl.w	r6, r1, r5
 8009636:	1d72      	adds	r2, r6, #5
 8009638:	0092      	lsls	r2, r2, #2
 800963a:	4620      	mov	r0, r4
 800963c:	f000 fe0e 	bl	800a25c <_calloc_r>
 8009640:	b160      	cbz	r0, 800965c <_Balloc+0x64>
 8009642:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009646:	e00e      	b.n	8009666 <_Balloc+0x6e>
 8009648:	2221      	movs	r2, #33	@ 0x21
 800964a:	2104      	movs	r1, #4
 800964c:	4620      	mov	r0, r4
 800964e:	f000 fe05 	bl	800a25c <_calloc_r>
 8009652:	69e3      	ldr	r3, [r4, #28]
 8009654:	60f0      	str	r0, [r6, #12]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1e4      	bne.n	8009626 <_Balloc+0x2e>
 800965c:	2000      	movs	r0, #0
 800965e:	bd70      	pop	{r4, r5, r6, pc}
 8009660:	6802      	ldr	r2, [r0, #0]
 8009662:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009666:	2300      	movs	r3, #0
 8009668:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800966c:	e7f7      	b.n	800965e <_Balloc+0x66>
 800966e:	bf00      	nop
 8009670:	0800a58d 	.word	0x0800a58d
 8009674:	0800a60d 	.word	0x0800a60d

08009678 <_Bfree>:
 8009678:	b570      	push	{r4, r5, r6, lr}
 800967a:	69c6      	ldr	r6, [r0, #28]
 800967c:	4605      	mov	r5, r0
 800967e:	460c      	mov	r4, r1
 8009680:	b976      	cbnz	r6, 80096a0 <_Bfree+0x28>
 8009682:	2010      	movs	r0, #16
 8009684:	f7ff ff02 	bl	800948c <malloc>
 8009688:	4602      	mov	r2, r0
 800968a:	61e8      	str	r0, [r5, #28]
 800968c:	b920      	cbnz	r0, 8009698 <_Bfree+0x20>
 800968e:	4b09      	ldr	r3, [pc, #36]	@ (80096b4 <_Bfree+0x3c>)
 8009690:	4809      	ldr	r0, [pc, #36]	@ (80096b8 <_Bfree+0x40>)
 8009692:	218f      	movs	r1, #143	@ 0x8f
 8009694:	f000 fdc4 	bl	800a220 <__assert_func>
 8009698:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800969c:	6006      	str	r6, [r0, #0]
 800969e:	60c6      	str	r6, [r0, #12]
 80096a0:	b13c      	cbz	r4, 80096b2 <_Bfree+0x3a>
 80096a2:	69eb      	ldr	r3, [r5, #28]
 80096a4:	6862      	ldr	r2, [r4, #4]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096ac:	6021      	str	r1, [r4, #0]
 80096ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80096b2:	bd70      	pop	{r4, r5, r6, pc}
 80096b4:	0800a58d 	.word	0x0800a58d
 80096b8:	0800a60d 	.word	0x0800a60d

080096bc <__multadd>:
 80096bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096c0:	690d      	ldr	r5, [r1, #16]
 80096c2:	4607      	mov	r7, r0
 80096c4:	460c      	mov	r4, r1
 80096c6:	461e      	mov	r6, r3
 80096c8:	f101 0c14 	add.w	ip, r1, #20
 80096cc:	2000      	movs	r0, #0
 80096ce:	f8dc 3000 	ldr.w	r3, [ip]
 80096d2:	b299      	uxth	r1, r3
 80096d4:	fb02 6101 	mla	r1, r2, r1, r6
 80096d8:	0c1e      	lsrs	r6, r3, #16
 80096da:	0c0b      	lsrs	r3, r1, #16
 80096dc:	fb02 3306 	mla	r3, r2, r6, r3
 80096e0:	b289      	uxth	r1, r1
 80096e2:	3001      	adds	r0, #1
 80096e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096e8:	4285      	cmp	r5, r0
 80096ea:	f84c 1b04 	str.w	r1, [ip], #4
 80096ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096f2:	dcec      	bgt.n	80096ce <__multadd+0x12>
 80096f4:	b30e      	cbz	r6, 800973a <__multadd+0x7e>
 80096f6:	68a3      	ldr	r3, [r4, #8]
 80096f8:	42ab      	cmp	r3, r5
 80096fa:	dc19      	bgt.n	8009730 <__multadd+0x74>
 80096fc:	6861      	ldr	r1, [r4, #4]
 80096fe:	4638      	mov	r0, r7
 8009700:	3101      	adds	r1, #1
 8009702:	f7ff ff79 	bl	80095f8 <_Balloc>
 8009706:	4680      	mov	r8, r0
 8009708:	b928      	cbnz	r0, 8009716 <__multadd+0x5a>
 800970a:	4602      	mov	r2, r0
 800970c:	4b0c      	ldr	r3, [pc, #48]	@ (8009740 <__multadd+0x84>)
 800970e:	480d      	ldr	r0, [pc, #52]	@ (8009744 <__multadd+0x88>)
 8009710:	21ba      	movs	r1, #186	@ 0xba
 8009712:	f000 fd85 	bl	800a220 <__assert_func>
 8009716:	6922      	ldr	r2, [r4, #16]
 8009718:	3202      	adds	r2, #2
 800971a:	f104 010c 	add.w	r1, r4, #12
 800971e:	0092      	lsls	r2, r2, #2
 8009720:	300c      	adds	r0, #12
 8009722:	f7ff f80e 	bl	8008742 <memcpy>
 8009726:	4621      	mov	r1, r4
 8009728:	4638      	mov	r0, r7
 800972a:	f7ff ffa5 	bl	8009678 <_Bfree>
 800972e:	4644      	mov	r4, r8
 8009730:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009734:	3501      	adds	r5, #1
 8009736:	615e      	str	r6, [r3, #20]
 8009738:	6125      	str	r5, [r4, #16]
 800973a:	4620      	mov	r0, r4
 800973c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009740:	0800a5fc 	.word	0x0800a5fc
 8009744:	0800a60d 	.word	0x0800a60d

08009748 <__hi0bits>:
 8009748:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800974c:	4603      	mov	r3, r0
 800974e:	bf36      	itet	cc
 8009750:	0403      	lslcc	r3, r0, #16
 8009752:	2000      	movcs	r0, #0
 8009754:	2010      	movcc	r0, #16
 8009756:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800975a:	bf3c      	itt	cc
 800975c:	021b      	lslcc	r3, r3, #8
 800975e:	3008      	addcc	r0, #8
 8009760:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009764:	bf3c      	itt	cc
 8009766:	011b      	lslcc	r3, r3, #4
 8009768:	3004      	addcc	r0, #4
 800976a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800976e:	bf3c      	itt	cc
 8009770:	009b      	lslcc	r3, r3, #2
 8009772:	3002      	addcc	r0, #2
 8009774:	2b00      	cmp	r3, #0
 8009776:	db05      	blt.n	8009784 <__hi0bits+0x3c>
 8009778:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800977c:	f100 0001 	add.w	r0, r0, #1
 8009780:	bf08      	it	eq
 8009782:	2020      	moveq	r0, #32
 8009784:	4770      	bx	lr

08009786 <__lo0bits>:
 8009786:	6803      	ldr	r3, [r0, #0]
 8009788:	4602      	mov	r2, r0
 800978a:	f013 0007 	ands.w	r0, r3, #7
 800978e:	d00b      	beq.n	80097a8 <__lo0bits+0x22>
 8009790:	07d9      	lsls	r1, r3, #31
 8009792:	d421      	bmi.n	80097d8 <__lo0bits+0x52>
 8009794:	0798      	lsls	r0, r3, #30
 8009796:	bf49      	itett	mi
 8009798:	085b      	lsrmi	r3, r3, #1
 800979a:	089b      	lsrpl	r3, r3, #2
 800979c:	2001      	movmi	r0, #1
 800979e:	6013      	strmi	r3, [r2, #0]
 80097a0:	bf5c      	itt	pl
 80097a2:	6013      	strpl	r3, [r2, #0]
 80097a4:	2002      	movpl	r0, #2
 80097a6:	4770      	bx	lr
 80097a8:	b299      	uxth	r1, r3
 80097aa:	b909      	cbnz	r1, 80097b0 <__lo0bits+0x2a>
 80097ac:	0c1b      	lsrs	r3, r3, #16
 80097ae:	2010      	movs	r0, #16
 80097b0:	b2d9      	uxtb	r1, r3
 80097b2:	b909      	cbnz	r1, 80097b8 <__lo0bits+0x32>
 80097b4:	3008      	adds	r0, #8
 80097b6:	0a1b      	lsrs	r3, r3, #8
 80097b8:	0719      	lsls	r1, r3, #28
 80097ba:	bf04      	itt	eq
 80097bc:	091b      	lsreq	r3, r3, #4
 80097be:	3004      	addeq	r0, #4
 80097c0:	0799      	lsls	r1, r3, #30
 80097c2:	bf04      	itt	eq
 80097c4:	089b      	lsreq	r3, r3, #2
 80097c6:	3002      	addeq	r0, #2
 80097c8:	07d9      	lsls	r1, r3, #31
 80097ca:	d403      	bmi.n	80097d4 <__lo0bits+0x4e>
 80097cc:	085b      	lsrs	r3, r3, #1
 80097ce:	f100 0001 	add.w	r0, r0, #1
 80097d2:	d003      	beq.n	80097dc <__lo0bits+0x56>
 80097d4:	6013      	str	r3, [r2, #0]
 80097d6:	4770      	bx	lr
 80097d8:	2000      	movs	r0, #0
 80097da:	4770      	bx	lr
 80097dc:	2020      	movs	r0, #32
 80097de:	4770      	bx	lr

080097e0 <__i2b>:
 80097e0:	b510      	push	{r4, lr}
 80097e2:	460c      	mov	r4, r1
 80097e4:	2101      	movs	r1, #1
 80097e6:	f7ff ff07 	bl	80095f8 <_Balloc>
 80097ea:	4602      	mov	r2, r0
 80097ec:	b928      	cbnz	r0, 80097fa <__i2b+0x1a>
 80097ee:	4b05      	ldr	r3, [pc, #20]	@ (8009804 <__i2b+0x24>)
 80097f0:	4805      	ldr	r0, [pc, #20]	@ (8009808 <__i2b+0x28>)
 80097f2:	f240 1145 	movw	r1, #325	@ 0x145
 80097f6:	f000 fd13 	bl	800a220 <__assert_func>
 80097fa:	2301      	movs	r3, #1
 80097fc:	6144      	str	r4, [r0, #20]
 80097fe:	6103      	str	r3, [r0, #16]
 8009800:	bd10      	pop	{r4, pc}
 8009802:	bf00      	nop
 8009804:	0800a5fc 	.word	0x0800a5fc
 8009808:	0800a60d 	.word	0x0800a60d

0800980c <__multiply>:
 800980c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009810:	4614      	mov	r4, r2
 8009812:	690a      	ldr	r2, [r1, #16]
 8009814:	6923      	ldr	r3, [r4, #16]
 8009816:	429a      	cmp	r2, r3
 8009818:	bfa8      	it	ge
 800981a:	4623      	movge	r3, r4
 800981c:	460f      	mov	r7, r1
 800981e:	bfa4      	itt	ge
 8009820:	460c      	movge	r4, r1
 8009822:	461f      	movge	r7, r3
 8009824:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009828:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800982c:	68a3      	ldr	r3, [r4, #8]
 800982e:	6861      	ldr	r1, [r4, #4]
 8009830:	eb0a 0609 	add.w	r6, sl, r9
 8009834:	42b3      	cmp	r3, r6
 8009836:	b085      	sub	sp, #20
 8009838:	bfb8      	it	lt
 800983a:	3101      	addlt	r1, #1
 800983c:	f7ff fedc 	bl	80095f8 <_Balloc>
 8009840:	b930      	cbnz	r0, 8009850 <__multiply+0x44>
 8009842:	4602      	mov	r2, r0
 8009844:	4b44      	ldr	r3, [pc, #272]	@ (8009958 <__multiply+0x14c>)
 8009846:	4845      	ldr	r0, [pc, #276]	@ (800995c <__multiply+0x150>)
 8009848:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800984c:	f000 fce8 	bl	800a220 <__assert_func>
 8009850:	f100 0514 	add.w	r5, r0, #20
 8009854:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009858:	462b      	mov	r3, r5
 800985a:	2200      	movs	r2, #0
 800985c:	4543      	cmp	r3, r8
 800985e:	d321      	bcc.n	80098a4 <__multiply+0x98>
 8009860:	f107 0114 	add.w	r1, r7, #20
 8009864:	f104 0214 	add.w	r2, r4, #20
 8009868:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800986c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009870:	9302      	str	r3, [sp, #8]
 8009872:	1b13      	subs	r3, r2, r4
 8009874:	3b15      	subs	r3, #21
 8009876:	f023 0303 	bic.w	r3, r3, #3
 800987a:	3304      	adds	r3, #4
 800987c:	f104 0715 	add.w	r7, r4, #21
 8009880:	42ba      	cmp	r2, r7
 8009882:	bf38      	it	cc
 8009884:	2304      	movcc	r3, #4
 8009886:	9301      	str	r3, [sp, #4]
 8009888:	9b02      	ldr	r3, [sp, #8]
 800988a:	9103      	str	r1, [sp, #12]
 800988c:	428b      	cmp	r3, r1
 800988e:	d80c      	bhi.n	80098aa <__multiply+0x9e>
 8009890:	2e00      	cmp	r6, #0
 8009892:	dd03      	ble.n	800989c <__multiply+0x90>
 8009894:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009898:	2b00      	cmp	r3, #0
 800989a:	d05b      	beq.n	8009954 <__multiply+0x148>
 800989c:	6106      	str	r6, [r0, #16]
 800989e:	b005      	add	sp, #20
 80098a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a4:	f843 2b04 	str.w	r2, [r3], #4
 80098a8:	e7d8      	b.n	800985c <__multiply+0x50>
 80098aa:	f8b1 a000 	ldrh.w	sl, [r1]
 80098ae:	f1ba 0f00 	cmp.w	sl, #0
 80098b2:	d024      	beq.n	80098fe <__multiply+0xf2>
 80098b4:	f104 0e14 	add.w	lr, r4, #20
 80098b8:	46a9      	mov	r9, r5
 80098ba:	f04f 0c00 	mov.w	ip, #0
 80098be:	f85e 7b04 	ldr.w	r7, [lr], #4
 80098c2:	f8d9 3000 	ldr.w	r3, [r9]
 80098c6:	fa1f fb87 	uxth.w	fp, r7
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	fb0a 330b 	mla	r3, sl, fp, r3
 80098d0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80098d4:	f8d9 7000 	ldr.w	r7, [r9]
 80098d8:	4463      	add	r3, ip
 80098da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80098de:	fb0a c70b 	mla	r7, sl, fp, ip
 80098e2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80098ec:	4572      	cmp	r2, lr
 80098ee:	f849 3b04 	str.w	r3, [r9], #4
 80098f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80098f6:	d8e2      	bhi.n	80098be <__multiply+0xb2>
 80098f8:	9b01      	ldr	r3, [sp, #4]
 80098fa:	f845 c003 	str.w	ip, [r5, r3]
 80098fe:	9b03      	ldr	r3, [sp, #12]
 8009900:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009904:	3104      	adds	r1, #4
 8009906:	f1b9 0f00 	cmp.w	r9, #0
 800990a:	d021      	beq.n	8009950 <__multiply+0x144>
 800990c:	682b      	ldr	r3, [r5, #0]
 800990e:	f104 0c14 	add.w	ip, r4, #20
 8009912:	46ae      	mov	lr, r5
 8009914:	f04f 0a00 	mov.w	sl, #0
 8009918:	f8bc b000 	ldrh.w	fp, [ip]
 800991c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009920:	fb09 770b 	mla	r7, r9, fp, r7
 8009924:	4457      	add	r7, sl
 8009926:	b29b      	uxth	r3, r3
 8009928:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800992c:	f84e 3b04 	str.w	r3, [lr], #4
 8009930:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009934:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009938:	f8be 3000 	ldrh.w	r3, [lr]
 800993c:	fb09 330a 	mla	r3, r9, sl, r3
 8009940:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009944:	4562      	cmp	r2, ip
 8009946:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800994a:	d8e5      	bhi.n	8009918 <__multiply+0x10c>
 800994c:	9f01      	ldr	r7, [sp, #4]
 800994e:	51eb      	str	r3, [r5, r7]
 8009950:	3504      	adds	r5, #4
 8009952:	e799      	b.n	8009888 <__multiply+0x7c>
 8009954:	3e01      	subs	r6, #1
 8009956:	e79b      	b.n	8009890 <__multiply+0x84>
 8009958:	0800a5fc 	.word	0x0800a5fc
 800995c:	0800a60d 	.word	0x0800a60d

08009960 <__pow5mult>:
 8009960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009964:	4615      	mov	r5, r2
 8009966:	f012 0203 	ands.w	r2, r2, #3
 800996a:	4607      	mov	r7, r0
 800996c:	460e      	mov	r6, r1
 800996e:	d007      	beq.n	8009980 <__pow5mult+0x20>
 8009970:	4c25      	ldr	r4, [pc, #148]	@ (8009a08 <__pow5mult+0xa8>)
 8009972:	3a01      	subs	r2, #1
 8009974:	2300      	movs	r3, #0
 8009976:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800997a:	f7ff fe9f 	bl	80096bc <__multadd>
 800997e:	4606      	mov	r6, r0
 8009980:	10ad      	asrs	r5, r5, #2
 8009982:	d03d      	beq.n	8009a00 <__pow5mult+0xa0>
 8009984:	69fc      	ldr	r4, [r7, #28]
 8009986:	b97c      	cbnz	r4, 80099a8 <__pow5mult+0x48>
 8009988:	2010      	movs	r0, #16
 800998a:	f7ff fd7f 	bl	800948c <malloc>
 800998e:	4602      	mov	r2, r0
 8009990:	61f8      	str	r0, [r7, #28]
 8009992:	b928      	cbnz	r0, 80099a0 <__pow5mult+0x40>
 8009994:	4b1d      	ldr	r3, [pc, #116]	@ (8009a0c <__pow5mult+0xac>)
 8009996:	481e      	ldr	r0, [pc, #120]	@ (8009a10 <__pow5mult+0xb0>)
 8009998:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800999c:	f000 fc40 	bl	800a220 <__assert_func>
 80099a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099a4:	6004      	str	r4, [r0, #0]
 80099a6:	60c4      	str	r4, [r0, #12]
 80099a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80099ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099b0:	b94c      	cbnz	r4, 80099c6 <__pow5mult+0x66>
 80099b2:	f240 2171 	movw	r1, #625	@ 0x271
 80099b6:	4638      	mov	r0, r7
 80099b8:	f7ff ff12 	bl	80097e0 <__i2b>
 80099bc:	2300      	movs	r3, #0
 80099be:	f8c8 0008 	str.w	r0, [r8, #8]
 80099c2:	4604      	mov	r4, r0
 80099c4:	6003      	str	r3, [r0, #0]
 80099c6:	f04f 0900 	mov.w	r9, #0
 80099ca:	07eb      	lsls	r3, r5, #31
 80099cc:	d50a      	bpl.n	80099e4 <__pow5mult+0x84>
 80099ce:	4631      	mov	r1, r6
 80099d0:	4622      	mov	r2, r4
 80099d2:	4638      	mov	r0, r7
 80099d4:	f7ff ff1a 	bl	800980c <__multiply>
 80099d8:	4631      	mov	r1, r6
 80099da:	4680      	mov	r8, r0
 80099dc:	4638      	mov	r0, r7
 80099de:	f7ff fe4b 	bl	8009678 <_Bfree>
 80099e2:	4646      	mov	r6, r8
 80099e4:	106d      	asrs	r5, r5, #1
 80099e6:	d00b      	beq.n	8009a00 <__pow5mult+0xa0>
 80099e8:	6820      	ldr	r0, [r4, #0]
 80099ea:	b938      	cbnz	r0, 80099fc <__pow5mult+0x9c>
 80099ec:	4622      	mov	r2, r4
 80099ee:	4621      	mov	r1, r4
 80099f0:	4638      	mov	r0, r7
 80099f2:	f7ff ff0b 	bl	800980c <__multiply>
 80099f6:	6020      	str	r0, [r4, #0]
 80099f8:	f8c0 9000 	str.w	r9, [r0]
 80099fc:	4604      	mov	r4, r0
 80099fe:	e7e4      	b.n	80099ca <__pow5mult+0x6a>
 8009a00:	4630      	mov	r0, r6
 8009a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a06:	bf00      	nop
 8009a08:	0800a668 	.word	0x0800a668
 8009a0c:	0800a58d 	.word	0x0800a58d
 8009a10:	0800a60d 	.word	0x0800a60d

08009a14 <__lshift>:
 8009a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a18:	460c      	mov	r4, r1
 8009a1a:	6849      	ldr	r1, [r1, #4]
 8009a1c:	6923      	ldr	r3, [r4, #16]
 8009a1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a22:	68a3      	ldr	r3, [r4, #8]
 8009a24:	4607      	mov	r7, r0
 8009a26:	4691      	mov	r9, r2
 8009a28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a2c:	f108 0601 	add.w	r6, r8, #1
 8009a30:	42b3      	cmp	r3, r6
 8009a32:	db0b      	blt.n	8009a4c <__lshift+0x38>
 8009a34:	4638      	mov	r0, r7
 8009a36:	f7ff fddf 	bl	80095f8 <_Balloc>
 8009a3a:	4605      	mov	r5, r0
 8009a3c:	b948      	cbnz	r0, 8009a52 <__lshift+0x3e>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	4b28      	ldr	r3, [pc, #160]	@ (8009ae4 <__lshift+0xd0>)
 8009a42:	4829      	ldr	r0, [pc, #164]	@ (8009ae8 <__lshift+0xd4>)
 8009a44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009a48:	f000 fbea 	bl	800a220 <__assert_func>
 8009a4c:	3101      	adds	r1, #1
 8009a4e:	005b      	lsls	r3, r3, #1
 8009a50:	e7ee      	b.n	8009a30 <__lshift+0x1c>
 8009a52:	2300      	movs	r3, #0
 8009a54:	f100 0114 	add.w	r1, r0, #20
 8009a58:	f100 0210 	add.w	r2, r0, #16
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	4553      	cmp	r3, sl
 8009a60:	db33      	blt.n	8009aca <__lshift+0xb6>
 8009a62:	6920      	ldr	r0, [r4, #16]
 8009a64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a68:	f104 0314 	add.w	r3, r4, #20
 8009a6c:	f019 091f 	ands.w	r9, r9, #31
 8009a70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a78:	d02b      	beq.n	8009ad2 <__lshift+0xbe>
 8009a7a:	f1c9 0e20 	rsb	lr, r9, #32
 8009a7e:	468a      	mov	sl, r1
 8009a80:	2200      	movs	r2, #0
 8009a82:	6818      	ldr	r0, [r3, #0]
 8009a84:	fa00 f009 	lsl.w	r0, r0, r9
 8009a88:	4310      	orrs	r0, r2
 8009a8a:	f84a 0b04 	str.w	r0, [sl], #4
 8009a8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a92:	459c      	cmp	ip, r3
 8009a94:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a98:	d8f3      	bhi.n	8009a82 <__lshift+0x6e>
 8009a9a:	ebac 0304 	sub.w	r3, ip, r4
 8009a9e:	3b15      	subs	r3, #21
 8009aa0:	f023 0303 	bic.w	r3, r3, #3
 8009aa4:	3304      	adds	r3, #4
 8009aa6:	f104 0015 	add.w	r0, r4, #21
 8009aaa:	4584      	cmp	ip, r0
 8009aac:	bf38      	it	cc
 8009aae:	2304      	movcc	r3, #4
 8009ab0:	50ca      	str	r2, [r1, r3]
 8009ab2:	b10a      	cbz	r2, 8009ab8 <__lshift+0xa4>
 8009ab4:	f108 0602 	add.w	r6, r8, #2
 8009ab8:	3e01      	subs	r6, #1
 8009aba:	4638      	mov	r0, r7
 8009abc:	612e      	str	r6, [r5, #16]
 8009abe:	4621      	mov	r1, r4
 8009ac0:	f7ff fdda 	bl	8009678 <_Bfree>
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aca:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ace:	3301      	adds	r3, #1
 8009ad0:	e7c5      	b.n	8009a5e <__lshift+0x4a>
 8009ad2:	3904      	subs	r1, #4
 8009ad4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ad8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009adc:	459c      	cmp	ip, r3
 8009ade:	d8f9      	bhi.n	8009ad4 <__lshift+0xc0>
 8009ae0:	e7ea      	b.n	8009ab8 <__lshift+0xa4>
 8009ae2:	bf00      	nop
 8009ae4:	0800a5fc 	.word	0x0800a5fc
 8009ae8:	0800a60d 	.word	0x0800a60d

08009aec <__mcmp>:
 8009aec:	690a      	ldr	r2, [r1, #16]
 8009aee:	4603      	mov	r3, r0
 8009af0:	6900      	ldr	r0, [r0, #16]
 8009af2:	1a80      	subs	r0, r0, r2
 8009af4:	b530      	push	{r4, r5, lr}
 8009af6:	d10e      	bne.n	8009b16 <__mcmp+0x2a>
 8009af8:	3314      	adds	r3, #20
 8009afa:	3114      	adds	r1, #20
 8009afc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009b00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009b04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b0c:	4295      	cmp	r5, r2
 8009b0e:	d003      	beq.n	8009b18 <__mcmp+0x2c>
 8009b10:	d205      	bcs.n	8009b1e <__mcmp+0x32>
 8009b12:	f04f 30ff 	mov.w	r0, #4294967295
 8009b16:	bd30      	pop	{r4, r5, pc}
 8009b18:	42a3      	cmp	r3, r4
 8009b1a:	d3f3      	bcc.n	8009b04 <__mcmp+0x18>
 8009b1c:	e7fb      	b.n	8009b16 <__mcmp+0x2a>
 8009b1e:	2001      	movs	r0, #1
 8009b20:	e7f9      	b.n	8009b16 <__mcmp+0x2a>
	...

08009b24 <__mdiff>:
 8009b24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b28:	4689      	mov	r9, r1
 8009b2a:	4606      	mov	r6, r0
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	4648      	mov	r0, r9
 8009b30:	4614      	mov	r4, r2
 8009b32:	f7ff ffdb 	bl	8009aec <__mcmp>
 8009b36:	1e05      	subs	r5, r0, #0
 8009b38:	d112      	bne.n	8009b60 <__mdiff+0x3c>
 8009b3a:	4629      	mov	r1, r5
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	f7ff fd5b 	bl	80095f8 <_Balloc>
 8009b42:	4602      	mov	r2, r0
 8009b44:	b928      	cbnz	r0, 8009b52 <__mdiff+0x2e>
 8009b46:	4b3f      	ldr	r3, [pc, #252]	@ (8009c44 <__mdiff+0x120>)
 8009b48:	f240 2137 	movw	r1, #567	@ 0x237
 8009b4c:	483e      	ldr	r0, [pc, #248]	@ (8009c48 <__mdiff+0x124>)
 8009b4e:	f000 fb67 	bl	800a220 <__assert_func>
 8009b52:	2301      	movs	r3, #1
 8009b54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b58:	4610      	mov	r0, r2
 8009b5a:	b003      	add	sp, #12
 8009b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b60:	bfbc      	itt	lt
 8009b62:	464b      	movlt	r3, r9
 8009b64:	46a1      	movlt	r9, r4
 8009b66:	4630      	mov	r0, r6
 8009b68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009b6c:	bfba      	itte	lt
 8009b6e:	461c      	movlt	r4, r3
 8009b70:	2501      	movlt	r5, #1
 8009b72:	2500      	movge	r5, #0
 8009b74:	f7ff fd40 	bl	80095f8 <_Balloc>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	b918      	cbnz	r0, 8009b84 <__mdiff+0x60>
 8009b7c:	4b31      	ldr	r3, [pc, #196]	@ (8009c44 <__mdiff+0x120>)
 8009b7e:	f240 2145 	movw	r1, #581	@ 0x245
 8009b82:	e7e3      	b.n	8009b4c <__mdiff+0x28>
 8009b84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009b88:	6926      	ldr	r6, [r4, #16]
 8009b8a:	60c5      	str	r5, [r0, #12]
 8009b8c:	f109 0310 	add.w	r3, r9, #16
 8009b90:	f109 0514 	add.w	r5, r9, #20
 8009b94:	f104 0e14 	add.w	lr, r4, #20
 8009b98:	f100 0b14 	add.w	fp, r0, #20
 8009b9c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009ba0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009ba4:	9301      	str	r3, [sp, #4]
 8009ba6:	46d9      	mov	r9, fp
 8009ba8:	f04f 0c00 	mov.w	ip, #0
 8009bac:	9b01      	ldr	r3, [sp, #4]
 8009bae:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009bb2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009bb6:	9301      	str	r3, [sp, #4]
 8009bb8:	fa1f f38a 	uxth.w	r3, sl
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	b283      	uxth	r3, r0
 8009bc0:	1acb      	subs	r3, r1, r3
 8009bc2:	0c00      	lsrs	r0, r0, #16
 8009bc4:	4463      	add	r3, ip
 8009bc6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009bca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009bd4:	4576      	cmp	r6, lr
 8009bd6:	f849 3b04 	str.w	r3, [r9], #4
 8009bda:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009bde:	d8e5      	bhi.n	8009bac <__mdiff+0x88>
 8009be0:	1b33      	subs	r3, r6, r4
 8009be2:	3b15      	subs	r3, #21
 8009be4:	f023 0303 	bic.w	r3, r3, #3
 8009be8:	3415      	adds	r4, #21
 8009bea:	3304      	adds	r3, #4
 8009bec:	42a6      	cmp	r6, r4
 8009bee:	bf38      	it	cc
 8009bf0:	2304      	movcc	r3, #4
 8009bf2:	441d      	add	r5, r3
 8009bf4:	445b      	add	r3, fp
 8009bf6:	461e      	mov	r6, r3
 8009bf8:	462c      	mov	r4, r5
 8009bfa:	4544      	cmp	r4, r8
 8009bfc:	d30e      	bcc.n	8009c1c <__mdiff+0xf8>
 8009bfe:	f108 0103 	add.w	r1, r8, #3
 8009c02:	1b49      	subs	r1, r1, r5
 8009c04:	f021 0103 	bic.w	r1, r1, #3
 8009c08:	3d03      	subs	r5, #3
 8009c0a:	45a8      	cmp	r8, r5
 8009c0c:	bf38      	it	cc
 8009c0e:	2100      	movcc	r1, #0
 8009c10:	440b      	add	r3, r1
 8009c12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c16:	b191      	cbz	r1, 8009c3e <__mdiff+0x11a>
 8009c18:	6117      	str	r7, [r2, #16]
 8009c1a:	e79d      	b.n	8009b58 <__mdiff+0x34>
 8009c1c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009c20:	46e6      	mov	lr, ip
 8009c22:	0c08      	lsrs	r0, r1, #16
 8009c24:	fa1c fc81 	uxtah	ip, ip, r1
 8009c28:	4471      	add	r1, lr
 8009c2a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009c2e:	b289      	uxth	r1, r1
 8009c30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009c34:	f846 1b04 	str.w	r1, [r6], #4
 8009c38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c3c:	e7dd      	b.n	8009bfa <__mdiff+0xd6>
 8009c3e:	3f01      	subs	r7, #1
 8009c40:	e7e7      	b.n	8009c12 <__mdiff+0xee>
 8009c42:	bf00      	nop
 8009c44:	0800a5fc 	.word	0x0800a5fc
 8009c48:	0800a60d 	.word	0x0800a60d

08009c4c <__d2b>:
 8009c4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c50:	460f      	mov	r7, r1
 8009c52:	2101      	movs	r1, #1
 8009c54:	ec59 8b10 	vmov	r8, r9, d0
 8009c58:	4616      	mov	r6, r2
 8009c5a:	f7ff fccd 	bl	80095f8 <_Balloc>
 8009c5e:	4604      	mov	r4, r0
 8009c60:	b930      	cbnz	r0, 8009c70 <__d2b+0x24>
 8009c62:	4602      	mov	r2, r0
 8009c64:	4b23      	ldr	r3, [pc, #140]	@ (8009cf4 <__d2b+0xa8>)
 8009c66:	4824      	ldr	r0, [pc, #144]	@ (8009cf8 <__d2b+0xac>)
 8009c68:	f240 310f 	movw	r1, #783	@ 0x30f
 8009c6c:	f000 fad8 	bl	800a220 <__assert_func>
 8009c70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c78:	b10d      	cbz	r5, 8009c7e <__d2b+0x32>
 8009c7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c7e:	9301      	str	r3, [sp, #4]
 8009c80:	f1b8 0300 	subs.w	r3, r8, #0
 8009c84:	d023      	beq.n	8009cce <__d2b+0x82>
 8009c86:	4668      	mov	r0, sp
 8009c88:	9300      	str	r3, [sp, #0]
 8009c8a:	f7ff fd7c 	bl	8009786 <__lo0bits>
 8009c8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009c92:	b1d0      	cbz	r0, 8009cca <__d2b+0x7e>
 8009c94:	f1c0 0320 	rsb	r3, r0, #32
 8009c98:	fa02 f303 	lsl.w	r3, r2, r3
 8009c9c:	430b      	orrs	r3, r1
 8009c9e:	40c2      	lsrs	r2, r0
 8009ca0:	6163      	str	r3, [r4, #20]
 8009ca2:	9201      	str	r2, [sp, #4]
 8009ca4:	9b01      	ldr	r3, [sp, #4]
 8009ca6:	61a3      	str	r3, [r4, #24]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	bf0c      	ite	eq
 8009cac:	2201      	moveq	r2, #1
 8009cae:	2202      	movne	r2, #2
 8009cb0:	6122      	str	r2, [r4, #16]
 8009cb2:	b1a5      	cbz	r5, 8009cde <__d2b+0x92>
 8009cb4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009cb8:	4405      	add	r5, r0
 8009cba:	603d      	str	r5, [r7, #0]
 8009cbc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009cc0:	6030      	str	r0, [r6, #0]
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	b003      	add	sp, #12
 8009cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cca:	6161      	str	r1, [r4, #20]
 8009ccc:	e7ea      	b.n	8009ca4 <__d2b+0x58>
 8009cce:	a801      	add	r0, sp, #4
 8009cd0:	f7ff fd59 	bl	8009786 <__lo0bits>
 8009cd4:	9b01      	ldr	r3, [sp, #4]
 8009cd6:	6163      	str	r3, [r4, #20]
 8009cd8:	3020      	adds	r0, #32
 8009cda:	2201      	movs	r2, #1
 8009cdc:	e7e8      	b.n	8009cb0 <__d2b+0x64>
 8009cde:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ce2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009ce6:	6038      	str	r0, [r7, #0]
 8009ce8:	6918      	ldr	r0, [r3, #16]
 8009cea:	f7ff fd2d 	bl	8009748 <__hi0bits>
 8009cee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009cf2:	e7e5      	b.n	8009cc0 <__d2b+0x74>
 8009cf4:	0800a5fc 	.word	0x0800a5fc
 8009cf8:	0800a60d 	.word	0x0800a60d

08009cfc <__sfputc_r>:
 8009cfc:	6893      	ldr	r3, [r2, #8]
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	b410      	push	{r4}
 8009d04:	6093      	str	r3, [r2, #8]
 8009d06:	da08      	bge.n	8009d1a <__sfputc_r+0x1e>
 8009d08:	6994      	ldr	r4, [r2, #24]
 8009d0a:	42a3      	cmp	r3, r4
 8009d0c:	db01      	blt.n	8009d12 <__sfputc_r+0x16>
 8009d0e:	290a      	cmp	r1, #10
 8009d10:	d103      	bne.n	8009d1a <__sfputc_r+0x1e>
 8009d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d16:	f000 b9df 	b.w	800a0d8 <__swbuf_r>
 8009d1a:	6813      	ldr	r3, [r2, #0]
 8009d1c:	1c58      	adds	r0, r3, #1
 8009d1e:	6010      	str	r0, [r2, #0]
 8009d20:	7019      	strb	r1, [r3, #0]
 8009d22:	4608      	mov	r0, r1
 8009d24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d28:	4770      	bx	lr

08009d2a <__sfputs_r>:
 8009d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d2c:	4606      	mov	r6, r0
 8009d2e:	460f      	mov	r7, r1
 8009d30:	4614      	mov	r4, r2
 8009d32:	18d5      	adds	r5, r2, r3
 8009d34:	42ac      	cmp	r4, r5
 8009d36:	d101      	bne.n	8009d3c <__sfputs_r+0x12>
 8009d38:	2000      	movs	r0, #0
 8009d3a:	e007      	b.n	8009d4c <__sfputs_r+0x22>
 8009d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d40:	463a      	mov	r2, r7
 8009d42:	4630      	mov	r0, r6
 8009d44:	f7ff ffda 	bl	8009cfc <__sfputc_r>
 8009d48:	1c43      	adds	r3, r0, #1
 8009d4a:	d1f3      	bne.n	8009d34 <__sfputs_r+0xa>
 8009d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d50 <_vfiprintf_r>:
 8009d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d54:	460d      	mov	r5, r1
 8009d56:	b09d      	sub	sp, #116	@ 0x74
 8009d58:	4614      	mov	r4, r2
 8009d5a:	4698      	mov	r8, r3
 8009d5c:	4606      	mov	r6, r0
 8009d5e:	b118      	cbz	r0, 8009d68 <_vfiprintf_r+0x18>
 8009d60:	6a03      	ldr	r3, [r0, #32]
 8009d62:	b90b      	cbnz	r3, 8009d68 <_vfiprintf_r+0x18>
 8009d64:	f7fe fb8c 	bl	8008480 <__sinit>
 8009d68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d6a:	07d9      	lsls	r1, r3, #31
 8009d6c:	d405      	bmi.n	8009d7a <_vfiprintf_r+0x2a>
 8009d6e:	89ab      	ldrh	r3, [r5, #12]
 8009d70:	059a      	lsls	r2, r3, #22
 8009d72:	d402      	bmi.n	8009d7a <_vfiprintf_r+0x2a>
 8009d74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d76:	f7fe fce2 	bl	800873e <__retarget_lock_acquire_recursive>
 8009d7a:	89ab      	ldrh	r3, [r5, #12]
 8009d7c:	071b      	lsls	r3, r3, #28
 8009d7e:	d501      	bpl.n	8009d84 <_vfiprintf_r+0x34>
 8009d80:	692b      	ldr	r3, [r5, #16]
 8009d82:	b99b      	cbnz	r3, 8009dac <_vfiprintf_r+0x5c>
 8009d84:	4629      	mov	r1, r5
 8009d86:	4630      	mov	r0, r6
 8009d88:	f000 f9e4 	bl	800a154 <__swsetup_r>
 8009d8c:	b170      	cbz	r0, 8009dac <_vfiprintf_r+0x5c>
 8009d8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d90:	07dc      	lsls	r4, r3, #31
 8009d92:	d504      	bpl.n	8009d9e <_vfiprintf_r+0x4e>
 8009d94:	f04f 30ff 	mov.w	r0, #4294967295
 8009d98:	b01d      	add	sp, #116	@ 0x74
 8009d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d9e:	89ab      	ldrh	r3, [r5, #12]
 8009da0:	0598      	lsls	r0, r3, #22
 8009da2:	d4f7      	bmi.n	8009d94 <_vfiprintf_r+0x44>
 8009da4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009da6:	f7fe fccb 	bl	8008740 <__retarget_lock_release_recursive>
 8009daa:	e7f3      	b.n	8009d94 <_vfiprintf_r+0x44>
 8009dac:	2300      	movs	r3, #0
 8009dae:	9309      	str	r3, [sp, #36]	@ 0x24
 8009db0:	2320      	movs	r3, #32
 8009db2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009db6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dba:	2330      	movs	r3, #48	@ 0x30
 8009dbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009f6c <_vfiprintf_r+0x21c>
 8009dc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009dc4:	f04f 0901 	mov.w	r9, #1
 8009dc8:	4623      	mov	r3, r4
 8009dca:	469a      	mov	sl, r3
 8009dcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dd0:	b10a      	cbz	r2, 8009dd6 <_vfiprintf_r+0x86>
 8009dd2:	2a25      	cmp	r2, #37	@ 0x25
 8009dd4:	d1f9      	bne.n	8009dca <_vfiprintf_r+0x7a>
 8009dd6:	ebba 0b04 	subs.w	fp, sl, r4
 8009dda:	d00b      	beq.n	8009df4 <_vfiprintf_r+0xa4>
 8009ddc:	465b      	mov	r3, fp
 8009dde:	4622      	mov	r2, r4
 8009de0:	4629      	mov	r1, r5
 8009de2:	4630      	mov	r0, r6
 8009de4:	f7ff ffa1 	bl	8009d2a <__sfputs_r>
 8009de8:	3001      	adds	r0, #1
 8009dea:	f000 80a7 	beq.w	8009f3c <_vfiprintf_r+0x1ec>
 8009dee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009df0:	445a      	add	r2, fp
 8009df2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009df4:	f89a 3000 	ldrb.w	r3, [sl]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 809f 	beq.w	8009f3c <_vfiprintf_r+0x1ec>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f04f 32ff 	mov.w	r2, #4294967295
 8009e04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e08:	f10a 0a01 	add.w	sl, sl, #1
 8009e0c:	9304      	str	r3, [sp, #16]
 8009e0e:	9307      	str	r3, [sp, #28]
 8009e10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e14:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e16:	4654      	mov	r4, sl
 8009e18:	2205      	movs	r2, #5
 8009e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e1e:	4853      	ldr	r0, [pc, #332]	@ (8009f6c <_vfiprintf_r+0x21c>)
 8009e20:	f7f6 f9de 	bl	80001e0 <memchr>
 8009e24:	9a04      	ldr	r2, [sp, #16]
 8009e26:	b9d8      	cbnz	r0, 8009e60 <_vfiprintf_r+0x110>
 8009e28:	06d1      	lsls	r1, r2, #27
 8009e2a:	bf44      	itt	mi
 8009e2c:	2320      	movmi	r3, #32
 8009e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e32:	0713      	lsls	r3, r2, #28
 8009e34:	bf44      	itt	mi
 8009e36:	232b      	movmi	r3, #43	@ 0x2b
 8009e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e40:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e42:	d015      	beq.n	8009e70 <_vfiprintf_r+0x120>
 8009e44:	9a07      	ldr	r2, [sp, #28]
 8009e46:	4654      	mov	r4, sl
 8009e48:	2000      	movs	r0, #0
 8009e4a:	f04f 0c0a 	mov.w	ip, #10
 8009e4e:	4621      	mov	r1, r4
 8009e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e54:	3b30      	subs	r3, #48	@ 0x30
 8009e56:	2b09      	cmp	r3, #9
 8009e58:	d94b      	bls.n	8009ef2 <_vfiprintf_r+0x1a2>
 8009e5a:	b1b0      	cbz	r0, 8009e8a <_vfiprintf_r+0x13a>
 8009e5c:	9207      	str	r2, [sp, #28]
 8009e5e:	e014      	b.n	8009e8a <_vfiprintf_r+0x13a>
 8009e60:	eba0 0308 	sub.w	r3, r0, r8
 8009e64:	fa09 f303 	lsl.w	r3, r9, r3
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	9304      	str	r3, [sp, #16]
 8009e6c:	46a2      	mov	sl, r4
 8009e6e:	e7d2      	b.n	8009e16 <_vfiprintf_r+0xc6>
 8009e70:	9b03      	ldr	r3, [sp, #12]
 8009e72:	1d19      	adds	r1, r3, #4
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	9103      	str	r1, [sp, #12]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	bfbb      	ittet	lt
 8009e7c:	425b      	neglt	r3, r3
 8009e7e:	f042 0202 	orrlt.w	r2, r2, #2
 8009e82:	9307      	strge	r3, [sp, #28]
 8009e84:	9307      	strlt	r3, [sp, #28]
 8009e86:	bfb8      	it	lt
 8009e88:	9204      	strlt	r2, [sp, #16]
 8009e8a:	7823      	ldrb	r3, [r4, #0]
 8009e8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e8e:	d10a      	bne.n	8009ea6 <_vfiprintf_r+0x156>
 8009e90:	7863      	ldrb	r3, [r4, #1]
 8009e92:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e94:	d132      	bne.n	8009efc <_vfiprintf_r+0x1ac>
 8009e96:	9b03      	ldr	r3, [sp, #12]
 8009e98:	1d1a      	adds	r2, r3, #4
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	9203      	str	r2, [sp, #12]
 8009e9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ea2:	3402      	adds	r4, #2
 8009ea4:	9305      	str	r3, [sp, #20]
 8009ea6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009f7c <_vfiprintf_r+0x22c>
 8009eaa:	7821      	ldrb	r1, [r4, #0]
 8009eac:	2203      	movs	r2, #3
 8009eae:	4650      	mov	r0, sl
 8009eb0:	f7f6 f996 	bl	80001e0 <memchr>
 8009eb4:	b138      	cbz	r0, 8009ec6 <_vfiprintf_r+0x176>
 8009eb6:	9b04      	ldr	r3, [sp, #16]
 8009eb8:	eba0 000a 	sub.w	r0, r0, sl
 8009ebc:	2240      	movs	r2, #64	@ 0x40
 8009ebe:	4082      	lsls	r2, r0
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	3401      	adds	r4, #1
 8009ec4:	9304      	str	r3, [sp, #16]
 8009ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eca:	4829      	ldr	r0, [pc, #164]	@ (8009f70 <_vfiprintf_r+0x220>)
 8009ecc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ed0:	2206      	movs	r2, #6
 8009ed2:	f7f6 f985 	bl	80001e0 <memchr>
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	d03f      	beq.n	8009f5a <_vfiprintf_r+0x20a>
 8009eda:	4b26      	ldr	r3, [pc, #152]	@ (8009f74 <_vfiprintf_r+0x224>)
 8009edc:	bb1b      	cbnz	r3, 8009f26 <_vfiprintf_r+0x1d6>
 8009ede:	9b03      	ldr	r3, [sp, #12]
 8009ee0:	3307      	adds	r3, #7
 8009ee2:	f023 0307 	bic.w	r3, r3, #7
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	9303      	str	r3, [sp, #12]
 8009eea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eec:	443b      	add	r3, r7
 8009eee:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ef0:	e76a      	b.n	8009dc8 <_vfiprintf_r+0x78>
 8009ef2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ef6:	460c      	mov	r4, r1
 8009ef8:	2001      	movs	r0, #1
 8009efa:	e7a8      	b.n	8009e4e <_vfiprintf_r+0xfe>
 8009efc:	2300      	movs	r3, #0
 8009efe:	3401      	adds	r4, #1
 8009f00:	9305      	str	r3, [sp, #20]
 8009f02:	4619      	mov	r1, r3
 8009f04:	f04f 0c0a 	mov.w	ip, #10
 8009f08:	4620      	mov	r0, r4
 8009f0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f0e:	3a30      	subs	r2, #48	@ 0x30
 8009f10:	2a09      	cmp	r2, #9
 8009f12:	d903      	bls.n	8009f1c <_vfiprintf_r+0x1cc>
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d0c6      	beq.n	8009ea6 <_vfiprintf_r+0x156>
 8009f18:	9105      	str	r1, [sp, #20]
 8009f1a:	e7c4      	b.n	8009ea6 <_vfiprintf_r+0x156>
 8009f1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f20:	4604      	mov	r4, r0
 8009f22:	2301      	movs	r3, #1
 8009f24:	e7f0      	b.n	8009f08 <_vfiprintf_r+0x1b8>
 8009f26:	ab03      	add	r3, sp, #12
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	462a      	mov	r2, r5
 8009f2c:	4b12      	ldr	r3, [pc, #72]	@ (8009f78 <_vfiprintf_r+0x228>)
 8009f2e:	a904      	add	r1, sp, #16
 8009f30:	4630      	mov	r0, r6
 8009f32:	f7fd fe61 	bl	8007bf8 <_printf_float>
 8009f36:	4607      	mov	r7, r0
 8009f38:	1c78      	adds	r0, r7, #1
 8009f3a:	d1d6      	bne.n	8009eea <_vfiprintf_r+0x19a>
 8009f3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f3e:	07d9      	lsls	r1, r3, #31
 8009f40:	d405      	bmi.n	8009f4e <_vfiprintf_r+0x1fe>
 8009f42:	89ab      	ldrh	r3, [r5, #12]
 8009f44:	059a      	lsls	r2, r3, #22
 8009f46:	d402      	bmi.n	8009f4e <_vfiprintf_r+0x1fe>
 8009f48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f4a:	f7fe fbf9 	bl	8008740 <__retarget_lock_release_recursive>
 8009f4e:	89ab      	ldrh	r3, [r5, #12]
 8009f50:	065b      	lsls	r3, r3, #25
 8009f52:	f53f af1f 	bmi.w	8009d94 <_vfiprintf_r+0x44>
 8009f56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f58:	e71e      	b.n	8009d98 <_vfiprintf_r+0x48>
 8009f5a:	ab03      	add	r3, sp, #12
 8009f5c:	9300      	str	r3, [sp, #0]
 8009f5e:	462a      	mov	r2, r5
 8009f60:	4b05      	ldr	r3, [pc, #20]	@ (8009f78 <_vfiprintf_r+0x228>)
 8009f62:	a904      	add	r1, sp, #16
 8009f64:	4630      	mov	r0, r6
 8009f66:	f7fe f8df 	bl	8008128 <_printf_i>
 8009f6a:	e7e4      	b.n	8009f36 <_vfiprintf_r+0x1e6>
 8009f6c:	0800a768 	.word	0x0800a768
 8009f70:	0800a772 	.word	0x0800a772
 8009f74:	08007bf9 	.word	0x08007bf9
 8009f78:	08009d2b 	.word	0x08009d2b
 8009f7c:	0800a76e 	.word	0x0800a76e

08009f80 <__sflush_r>:
 8009f80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f88:	0716      	lsls	r6, r2, #28
 8009f8a:	4605      	mov	r5, r0
 8009f8c:	460c      	mov	r4, r1
 8009f8e:	d454      	bmi.n	800a03a <__sflush_r+0xba>
 8009f90:	684b      	ldr	r3, [r1, #4]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	dc02      	bgt.n	8009f9c <__sflush_r+0x1c>
 8009f96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	dd48      	ble.n	800a02e <__sflush_r+0xae>
 8009f9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f9e:	2e00      	cmp	r6, #0
 8009fa0:	d045      	beq.n	800a02e <__sflush_r+0xae>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009fa8:	682f      	ldr	r7, [r5, #0]
 8009faa:	6a21      	ldr	r1, [r4, #32]
 8009fac:	602b      	str	r3, [r5, #0]
 8009fae:	d030      	beq.n	800a012 <__sflush_r+0x92>
 8009fb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009fb2:	89a3      	ldrh	r3, [r4, #12]
 8009fb4:	0759      	lsls	r1, r3, #29
 8009fb6:	d505      	bpl.n	8009fc4 <__sflush_r+0x44>
 8009fb8:	6863      	ldr	r3, [r4, #4]
 8009fba:	1ad2      	subs	r2, r2, r3
 8009fbc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009fbe:	b10b      	cbz	r3, 8009fc4 <__sflush_r+0x44>
 8009fc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009fc2:	1ad2      	subs	r2, r2, r3
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009fc8:	6a21      	ldr	r1, [r4, #32]
 8009fca:	4628      	mov	r0, r5
 8009fcc:	47b0      	blx	r6
 8009fce:	1c43      	adds	r3, r0, #1
 8009fd0:	89a3      	ldrh	r3, [r4, #12]
 8009fd2:	d106      	bne.n	8009fe2 <__sflush_r+0x62>
 8009fd4:	6829      	ldr	r1, [r5, #0]
 8009fd6:	291d      	cmp	r1, #29
 8009fd8:	d82b      	bhi.n	800a032 <__sflush_r+0xb2>
 8009fda:	4a2a      	ldr	r2, [pc, #168]	@ (800a084 <__sflush_r+0x104>)
 8009fdc:	410a      	asrs	r2, r1
 8009fde:	07d6      	lsls	r6, r2, #31
 8009fe0:	d427      	bmi.n	800a032 <__sflush_r+0xb2>
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	6062      	str	r2, [r4, #4]
 8009fe6:	04d9      	lsls	r1, r3, #19
 8009fe8:	6922      	ldr	r2, [r4, #16]
 8009fea:	6022      	str	r2, [r4, #0]
 8009fec:	d504      	bpl.n	8009ff8 <__sflush_r+0x78>
 8009fee:	1c42      	adds	r2, r0, #1
 8009ff0:	d101      	bne.n	8009ff6 <__sflush_r+0x76>
 8009ff2:	682b      	ldr	r3, [r5, #0]
 8009ff4:	b903      	cbnz	r3, 8009ff8 <__sflush_r+0x78>
 8009ff6:	6560      	str	r0, [r4, #84]	@ 0x54
 8009ff8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ffa:	602f      	str	r7, [r5, #0]
 8009ffc:	b1b9      	cbz	r1, 800a02e <__sflush_r+0xae>
 8009ffe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a002:	4299      	cmp	r1, r3
 800a004:	d002      	beq.n	800a00c <__sflush_r+0x8c>
 800a006:	4628      	mov	r0, r5
 800a008:	f7ff f9f6 	bl	80093f8 <_free_r>
 800a00c:	2300      	movs	r3, #0
 800a00e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a010:	e00d      	b.n	800a02e <__sflush_r+0xae>
 800a012:	2301      	movs	r3, #1
 800a014:	4628      	mov	r0, r5
 800a016:	47b0      	blx	r6
 800a018:	4602      	mov	r2, r0
 800a01a:	1c50      	adds	r0, r2, #1
 800a01c:	d1c9      	bne.n	8009fb2 <__sflush_r+0x32>
 800a01e:	682b      	ldr	r3, [r5, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d0c6      	beq.n	8009fb2 <__sflush_r+0x32>
 800a024:	2b1d      	cmp	r3, #29
 800a026:	d001      	beq.n	800a02c <__sflush_r+0xac>
 800a028:	2b16      	cmp	r3, #22
 800a02a:	d11e      	bne.n	800a06a <__sflush_r+0xea>
 800a02c:	602f      	str	r7, [r5, #0]
 800a02e:	2000      	movs	r0, #0
 800a030:	e022      	b.n	800a078 <__sflush_r+0xf8>
 800a032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a036:	b21b      	sxth	r3, r3
 800a038:	e01b      	b.n	800a072 <__sflush_r+0xf2>
 800a03a:	690f      	ldr	r7, [r1, #16]
 800a03c:	2f00      	cmp	r7, #0
 800a03e:	d0f6      	beq.n	800a02e <__sflush_r+0xae>
 800a040:	0793      	lsls	r3, r2, #30
 800a042:	680e      	ldr	r6, [r1, #0]
 800a044:	bf08      	it	eq
 800a046:	694b      	ldreq	r3, [r1, #20]
 800a048:	600f      	str	r7, [r1, #0]
 800a04a:	bf18      	it	ne
 800a04c:	2300      	movne	r3, #0
 800a04e:	eba6 0807 	sub.w	r8, r6, r7
 800a052:	608b      	str	r3, [r1, #8]
 800a054:	f1b8 0f00 	cmp.w	r8, #0
 800a058:	dde9      	ble.n	800a02e <__sflush_r+0xae>
 800a05a:	6a21      	ldr	r1, [r4, #32]
 800a05c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a05e:	4643      	mov	r3, r8
 800a060:	463a      	mov	r2, r7
 800a062:	4628      	mov	r0, r5
 800a064:	47b0      	blx	r6
 800a066:	2800      	cmp	r0, #0
 800a068:	dc08      	bgt.n	800a07c <__sflush_r+0xfc>
 800a06a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a06e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a072:	81a3      	strh	r3, [r4, #12]
 800a074:	f04f 30ff 	mov.w	r0, #4294967295
 800a078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a07c:	4407      	add	r7, r0
 800a07e:	eba8 0800 	sub.w	r8, r8, r0
 800a082:	e7e7      	b.n	800a054 <__sflush_r+0xd4>
 800a084:	dfbffffe 	.word	0xdfbffffe

0800a088 <_fflush_r>:
 800a088:	b538      	push	{r3, r4, r5, lr}
 800a08a:	690b      	ldr	r3, [r1, #16]
 800a08c:	4605      	mov	r5, r0
 800a08e:	460c      	mov	r4, r1
 800a090:	b913      	cbnz	r3, 800a098 <_fflush_r+0x10>
 800a092:	2500      	movs	r5, #0
 800a094:	4628      	mov	r0, r5
 800a096:	bd38      	pop	{r3, r4, r5, pc}
 800a098:	b118      	cbz	r0, 800a0a2 <_fflush_r+0x1a>
 800a09a:	6a03      	ldr	r3, [r0, #32]
 800a09c:	b90b      	cbnz	r3, 800a0a2 <_fflush_r+0x1a>
 800a09e:	f7fe f9ef 	bl	8008480 <__sinit>
 800a0a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d0f3      	beq.n	800a092 <_fflush_r+0xa>
 800a0aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a0ac:	07d0      	lsls	r0, r2, #31
 800a0ae:	d404      	bmi.n	800a0ba <_fflush_r+0x32>
 800a0b0:	0599      	lsls	r1, r3, #22
 800a0b2:	d402      	bmi.n	800a0ba <_fflush_r+0x32>
 800a0b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0b6:	f7fe fb42 	bl	800873e <__retarget_lock_acquire_recursive>
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	4621      	mov	r1, r4
 800a0be:	f7ff ff5f 	bl	8009f80 <__sflush_r>
 800a0c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a0c4:	07da      	lsls	r2, r3, #31
 800a0c6:	4605      	mov	r5, r0
 800a0c8:	d4e4      	bmi.n	800a094 <_fflush_r+0xc>
 800a0ca:	89a3      	ldrh	r3, [r4, #12]
 800a0cc:	059b      	lsls	r3, r3, #22
 800a0ce:	d4e1      	bmi.n	800a094 <_fflush_r+0xc>
 800a0d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0d2:	f7fe fb35 	bl	8008740 <__retarget_lock_release_recursive>
 800a0d6:	e7dd      	b.n	800a094 <_fflush_r+0xc>

0800a0d8 <__swbuf_r>:
 800a0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0da:	460e      	mov	r6, r1
 800a0dc:	4614      	mov	r4, r2
 800a0de:	4605      	mov	r5, r0
 800a0e0:	b118      	cbz	r0, 800a0ea <__swbuf_r+0x12>
 800a0e2:	6a03      	ldr	r3, [r0, #32]
 800a0e4:	b90b      	cbnz	r3, 800a0ea <__swbuf_r+0x12>
 800a0e6:	f7fe f9cb 	bl	8008480 <__sinit>
 800a0ea:	69a3      	ldr	r3, [r4, #24]
 800a0ec:	60a3      	str	r3, [r4, #8]
 800a0ee:	89a3      	ldrh	r3, [r4, #12]
 800a0f0:	071a      	lsls	r2, r3, #28
 800a0f2:	d501      	bpl.n	800a0f8 <__swbuf_r+0x20>
 800a0f4:	6923      	ldr	r3, [r4, #16]
 800a0f6:	b943      	cbnz	r3, 800a10a <__swbuf_r+0x32>
 800a0f8:	4621      	mov	r1, r4
 800a0fa:	4628      	mov	r0, r5
 800a0fc:	f000 f82a 	bl	800a154 <__swsetup_r>
 800a100:	b118      	cbz	r0, 800a10a <__swbuf_r+0x32>
 800a102:	f04f 37ff 	mov.w	r7, #4294967295
 800a106:	4638      	mov	r0, r7
 800a108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	6922      	ldr	r2, [r4, #16]
 800a10e:	1a98      	subs	r0, r3, r2
 800a110:	6963      	ldr	r3, [r4, #20]
 800a112:	b2f6      	uxtb	r6, r6
 800a114:	4283      	cmp	r3, r0
 800a116:	4637      	mov	r7, r6
 800a118:	dc05      	bgt.n	800a126 <__swbuf_r+0x4e>
 800a11a:	4621      	mov	r1, r4
 800a11c:	4628      	mov	r0, r5
 800a11e:	f7ff ffb3 	bl	800a088 <_fflush_r>
 800a122:	2800      	cmp	r0, #0
 800a124:	d1ed      	bne.n	800a102 <__swbuf_r+0x2a>
 800a126:	68a3      	ldr	r3, [r4, #8]
 800a128:	3b01      	subs	r3, #1
 800a12a:	60a3      	str	r3, [r4, #8]
 800a12c:	6823      	ldr	r3, [r4, #0]
 800a12e:	1c5a      	adds	r2, r3, #1
 800a130:	6022      	str	r2, [r4, #0]
 800a132:	701e      	strb	r6, [r3, #0]
 800a134:	6962      	ldr	r2, [r4, #20]
 800a136:	1c43      	adds	r3, r0, #1
 800a138:	429a      	cmp	r2, r3
 800a13a:	d004      	beq.n	800a146 <__swbuf_r+0x6e>
 800a13c:	89a3      	ldrh	r3, [r4, #12]
 800a13e:	07db      	lsls	r3, r3, #31
 800a140:	d5e1      	bpl.n	800a106 <__swbuf_r+0x2e>
 800a142:	2e0a      	cmp	r6, #10
 800a144:	d1df      	bne.n	800a106 <__swbuf_r+0x2e>
 800a146:	4621      	mov	r1, r4
 800a148:	4628      	mov	r0, r5
 800a14a:	f7ff ff9d 	bl	800a088 <_fflush_r>
 800a14e:	2800      	cmp	r0, #0
 800a150:	d0d9      	beq.n	800a106 <__swbuf_r+0x2e>
 800a152:	e7d6      	b.n	800a102 <__swbuf_r+0x2a>

0800a154 <__swsetup_r>:
 800a154:	b538      	push	{r3, r4, r5, lr}
 800a156:	4b29      	ldr	r3, [pc, #164]	@ (800a1fc <__swsetup_r+0xa8>)
 800a158:	4605      	mov	r5, r0
 800a15a:	6818      	ldr	r0, [r3, #0]
 800a15c:	460c      	mov	r4, r1
 800a15e:	b118      	cbz	r0, 800a168 <__swsetup_r+0x14>
 800a160:	6a03      	ldr	r3, [r0, #32]
 800a162:	b90b      	cbnz	r3, 800a168 <__swsetup_r+0x14>
 800a164:	f7fe f98c 	bl	8008480 <__sinit>
 800a168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a16c:	0719      	lsls	r1, r3, #28
 800a16e:	d422      	bmi.n	800a1b6 <__swsetup_r+0x62>
 800a170:	06da      	lsls	r2, r3, #27
 800a172:	d407      	bmi.n	800a184 <__swsetup_r+0x30>
 800a174:	2209      	movs	r2, #9
 800a176:	602a      	str	r2, [r5, #0]
 800a178:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a17c:	81a3      	strh	r3, [r4, #12]
 800a17e:	f04f 30ff 	mov.w	r0, #4294967295
 800a182:	e033      	b.n	800a1ec <__swsetup_r+0x98>
 800a184:	0758      	lsls	r0, r3, #29
 800a186:	d512      	bpl.n	800a1ae <__swsetup_r+0x5a>
 800a188:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a18a:	b141      	cbz	r1, 800a19e <__swsetup_r+0x4a>
 800a18c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a190:	4299      	cmp	r1, r3
 800a192:	d002      	beq.n	800a19a <__swsetup_r+0x46>
 800a194:	4628      	mov	r0, r5
 800a196:	f7ff f92f 	bl	80093f8 <_free_r>
 800a19a:	2300      	movs	r3, #0
 800a19c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a19e:	89a3      	ldrh	r3, [r4, #12]
 800a1a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a1a4:	81a3      	strh	r3, [r4, #12]
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	6063      	str	r3, [r4, #4]
 800a1aa:	6923      	ldr	r3, [r4, #16]
 800a1ac:	6023      	str	r3, [r4, #0]
 800a1ae:	89a3      	ldrh	r3, [r4, #12]
 800a1b0:	f043 0308 	orr.w	r3, r3, #8
 800a1b4:	81a3      	strh	r3, [r4, #12]
 800a1b6:	6923      	ldr	r3, [r4, #16]
 800a1b8:	b94b      	cbnz	r3, 800a1ce <__swsetup_r+0x7a>
 800a1ba:	89a3      	ldrh	r3, [r4, #12]
 800a1bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a1c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1c4:	d003      	beq.n	800a1ce <__swsetup_r+0x7a>
 800a1c6:	4621      	mov	r1, r4
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	f000 f8b3 	bl	800a334 <__smakebuf_r>
 800a1ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1d2:	f013 0201 	ands.w	r2, r3, #1
 800a1d6:	d00a      	beq.n	800a1ee <__swsetup_r+0x9a>
 800a1d8:	2200      	movs	r2, #0
 800a1da:	60a2      	str	r2, [r4, #8]
 800a1dc:	6962      	ldr	r2, [r4, #20]
 800a1de:	4252      	negs	r2, r2
 800a1e0:	61a2      	str	r2, [r4, #24]
 800a1e2:	6922      	ldr	r2, [r4, #16]
 800a1e4:	b942      	cbnz	r2, 800a1f8 <__swsetup_r+0xa4>
 800a1e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a1ea:	d1c5      	bne.n	800a178 <__swsetup_r+0x24>
 800a1ec:	bd38      	pop	{r3, r4, r5, pc}
 800a1ee:	0799      	lsls	r1, r3, #30
 800a1f0:	bf58      	it	pl
 800a1f2:	6962      	ldrpl	r2, [r4, #20]
 800a1f4:	60a2      	str	r2, [r4, #8]
 800a1f6:	e7f4      	b.n	800a1e2 <__swsetup_r+0x8e>
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	e7f7      	b.n	800a1ec <__swsetup_r+0x98>
 800a1fc:	2000001c 	.word	0x2000001c

0800a200 <_sbrk_r>:
 800a200:	b538      	push	{r3, r4, r5, lr}
 800a202:	4d06      	ldr	r5, [pc, #24]	@ (800a21c <_sbrk_r+0x1c>)
 800a204:	2300      	movs	r3, #0
 800a206:	4604      	mov	r4, r0
 800a208:	4608      	mov	r0, r1
 800a20a:	602b      	str	r3, [r5, #0]
 800a20c:	f7f7 fb6a 	bl	80018e4 <_sbrk>
 800a210:	1c43      	adds	r3, r0, #1
 800a212:	d102      	bne.n	800a21a <_sbrk_r+0x1a>
 800a214:	682b      	ldr	r3, [r5, #0]
 800a216:	b103      	cbz	r3, 800a21a <_sbrk_r+0x1a>
 800a218:	6023      	str	r3, [r4, #0]
 800a21a:	bd38      	pop	{r3, r4, r5, pc}
 800a21c:	20005104 	.word	0x20005104

0800a220 <__assert_func>:
 800a220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a222:	4614      	mov	r4, r2
 800a224:	461a      	mov	r2, r3
 800a226:	4b09      	ldr	r3, [pc, #36]	@ (800a24c <__assert_func+0x2c>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4605      	mov	r5, r0
 800a22c:	68d8      	ldr	r0, [r3, #12]
 800a22e:	b954      	cbnz	r4, 800a246 <__assert_func+0x26>
 800a230:	4b07      	ldr	r3, [pc, #28]	@ (800a250 <__assert_func+0x30>)
 800a232:	461c      	mov	r4, r3
 800a234:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a238:	9100      	str	r1, [sp, #0]
 800a23a:	462b      	mov	r3, r5
 800a23c:	4905      	ldr	r1, [pc, #20]	@ (800a254 <__assert_func+0x34>)
 800a23e:	f000 f841 	bl	800a2c4 <fiprintf>
 800a242:	f000 f8d5 	bl	800a3f0 <abort>
 800a246:	4b04      	ldr	r3, [pc, #16]	@ (800a258 <__assert_func+0x38>)
 800a248:	e7f4      	b.n	800a234 <__assert_func+0x14>
 800a24a:	bf00      	nop
 800a24c:	2000001c 	.word	0x2000001c
 800a250:	0800a7be 	.word	0x0800a7be
 800a254:	0800a790 	.word	0x0800a790
 800a258:	0800a783 	.word	0x0800a783

0800a25c <_calloc_r>:
 800a25c:	b570      	push	{r4, r5, r6, lr}
 800a25e:	fba1 5402 	umull	r5, r4, r1, r2
 800a262:	b93c      	cbnz	r4, 800a274 <_calloc_r+0x18>
 800a264:	4629      	mov	r1, r5
 800a266:	f7ff f93b 	bl	80094e0 <_malloc_r>
 800a26a:	4606      	mov	r6, r0
 800a26c:	b928      	cbnz	r0, 800a27a <_calloc_r+0x1e>
 800a26e:	2600      	movs	r6, #0
 800a270:	4630      	mov	r0, r6
 800a272:	bd70      	pop	{r4, r5, r6, pc}
 800a274:	220c      	movs	r2, #12
 800a276:	6002      	str	r2, [r0, #0]
 800a278:	e7f9      	b.n	800a26e <_calloc_r+0x12>
 800a27a:	462a      	mov	r2, r5
 800a27c:	4621      	mov	r1, r4
 800a27e:	f7fe f98a 	bl	8008596 <memset>
 800a282:	e7f5      	b.n	800a270 <_calloc_r+0x14>

0800a284 <__ascii_mbtowc>:
 800a284:	b082      	sub	sp, #8
 800a286:	b901      	cbnz	r1, 800a28a <__ascii_mbtowc+0x6>
 800a288:	a901      	add	r1, sp, #4
 800a28a:	b142      	cbz	r2, 800a29e <__ascii_mbtowc+0x1a>
 800a28c:	b14b      	cbz	r3, 800a2a2 <__ascii_mbtowc+0x1e>
 800a28e:	7813      	ldrb	r3, [r2, #0]
 800a290:	600b      	str	r3, [r1, #0]
 800a292:	7812      	ldrb	r2, [r2, #0]
 800a294:	1e10      	subs	r0, r2, #0
 800a296:	bf18      	it	ne
 800a298:	2001      	movne	r0, #1
 800a29a:	b002      	add	sp, #8
 800a29c:	4770      	bx	lr
 800a29e:	4610      	mov	r0, r2
 800a2a0:	e7fb      	b.n	800a29a <__ascii_mbtowc+0x16>
 800a2a2:	f06f 0001 	mvn.w	r0, #1
 800a2a6:	e7f8      	b.n	800a29a <__ascii_mbtowc+0x16>

0800a2a8 <__ascii_wctomb>:
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	4608      	mov	r0, r1
 800a2ac:	b141      	cbz	r1, 800a2c0 <__ascii_wctomb+0x18>
 800a2ae:	2aff      	cmp	r2, #255	@ 0xff
 800a2b0:	d904      	bls.n	800a2bc <__ascii_wctomb+0x14>
 800a2b2:	228a      	movs	r2, #138	@ 0x8a
 800a2b4:	601a      	str	r2, [r3, #0]
 800a2b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ba:	4770      	bx	lr
 800a2bc:	700a      	strb	r2, [r1, #0]
 800a2be:	2001      	movs	r0, #1
 800a2c0:	4770      	bx	lr
	...

0800a2c4 <fiprintf>:
 800a2c4:	b40e      	push	{r1, r2, r3}
 800a2c6:	b503      	push	{r0, r1, lr}
 800a2c8:	4601      	mov	r1, r0
 800a2ca:	ab03      	add	r3, sp, #12
 800a2cc:	4805      	ldr	r0, [pc, #20]	@ (800a2e4 <fiprintf+0x20>)
 800a2ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2d2:	6800      	ldr	r0, [r0, #0]
 800a2d4:	9301      	str	r3, [sp, #4]
 800a2d6:	f7ff fd3b 	bl	8009d50 <_vfiprintf_r>
 800a2da:	b002      	add	sp, #8
 800a2dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2e0:	b003      	add	sp, #12
 800a2e2:	4770      	bx	lr
 800a2e4:	2000001c 	.word	0x2000001c

0800a2e8 <__swhatbuf_r>:
 800a2e8:	b570      	push	{r4, r5, r6, lr}
 800a2ea:	460c      	mov	r4, r1
 800a2ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2f0:	2900      	cmp	r1, #0
 800a2f2:	b096      	sub	sp, #88	@ 0x58
 800a2f4:	4615      	mov	r5, r2
 800a2f6:	461e      	mov	r6, r3
 800a2f8:	da0d      	bge.n	800a316 <__swhatbuf_r+0x2e>
 800a2fa:	89a3      	ldrh	r3, [r4, #12]
 800a2fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a300:	f04f 0100 	mov.w	r1, #0
 800a304:	bf14      	ite	ne
 800a306:	2340      	movne	r3, #64	@ 0x40
 800a308:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a30c:	2000      	movs	r0, #0
 800a30e:	6031      	str	r1, [r6, #0]
 800a310:	602b      	str	r3, [r5, #0]
 800a312:	b016      	add	sp, #88	@ 0x58
 800a314:	bd70      	pop	{r4, r5, r6, pc}
 800a316:	466a      	mov	r2, sp
 800a318:	f000 f848 	bl	800a3ac <_fstat_r>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	dbec      	blt.n	800a2fa <__swhatbuf_r+0x12>
 800a320:	9901      	ldr	r1, [sp, #4]
 800a322:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a326:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a32a:	4259      	negs	r1, r3
 800a32c:	4159      	adcs	r1, r3
 800a32e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a332:	e7eb      	b.n	800a30c <__swhatbuf_r+0x24>

0800a334 <__smakebuf_r>:
 800a334:	898b      	ldrh	r3, [r1, #12]
 800a336:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a338:	079d      	lsls	r5, r3, #30
 800a33a:	4606      	mov	r6, r0
 800a33c:	460c      	mov	r4, r1
 800a33e:	d507      	bpl.n	800a350 <__smakebuf_r+0x1c>
 800a340:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a344:	6023      	str	r3, [r4, #0]
 800a346:	6123      	str	r3, [r4, #16]
 800a348:	2301      	movs	r3, #1
 800a34a:	6163      	str	r3, [r4, #20]
 800a34c:	b003      	add	sp, #12
 800a34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a350:	ab01      	add	r3, sp, #4
 800a352:	466a      	mov	r2, sp
 800a354:	f7ff ffc8 	bl	800a2e8 <__swhatbuf_r>
 800a358:	9f00      	ldr	r7, [sp, #0]
 800a35a:	4605      	mov	r5, r0
 800a35c:	4639      	mov	r1, r7
 800a35e:	4630      	mov	r0, r6
 800a360:	f7ff f8be 	bl	80094e0 <_malloc_r>
 800a364:	b948      	cbnz	r0, 800a37a <__smakebuf_r+0x46>
 800a366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a36a:	059a      	lsls	r2, r3, #22
 800a36c:	d4ee      	bmi.n	800a34c <__smakebuf_r+0x18>
 800a36e:	f023 0303 	bic.w	r3, r3, #3
 800a372:	f043 0302 	orr.w	r3, r3, #2
 800a376:	81a3      	strh	r3, [r4, #12]
 800a378:	e7e2      	b.n	800a340 <__smakebuf_r+0xc>
 800a37a:	89a3      	ldrh	r3, [r4, #12]
 800a37c:	6020      	str	r0, [r4, #0]
 800a37e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a382:	81a3      	strh	r3, [r4, #12]
 800a384:	9b01      	ldr	r3, [sp, #4]
 800a386:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a38a:	b15b      	cbz	r3, 800a3a4 <__smakebuf_r+0x70>
 800a38c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a390:	4630      	mov	r0, r6
 800a392:	f000 f81d 	bl	800a3d0 <_isatty_r>
 800a396:	b128      	cbz	r0, 800a3a4 <__smakebuf_r+0x70>
 800a398:	89a3      	ldrh	r3, [r4, #12]
 800a39a:	f023 0303 	bic.w	r3, r3, #3
 800a39e:	f043 0301 	orr.w	r3, r3, #1
 800a3a2:	81a3      	strh	r3, [r4, #12]
 800a3a4:	89a3      	ldrh	r3, [r4, #12]
 800a3a6:	431d      	orrs	r5, r3
 800a3a8:	81a5      	strh	r5, [r4, #12]
 800a3aa:	e7cf      	b.n	800a34c <__smakebuf_r+0x18>

0800a3ac <_fstat_r>:
 800a3ac:	b538      	push	{r3, r4, r5, lr}
 800a3ae:	4d07      	ldr	r5, [pc, #28]	@ (800a3cc <_fstat_r+0x20>)
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	4608      	mov	r0, r1
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	602b      	str	r3, [r5, #0]
 800a3ba:	f7f7 fa6b 	bl	8001894 <_fstat>
 800a3be:	1c43      	adds	r3, r0, #1
 800a3c0:	d102      	bne.n	800a3c8 <_fstat_r+0x1c>
 800a3c2:	682b      	ldr	r3, [r5, #0]
 800a3c4:	b103      	cbz	r3, 800a3c8 <_fstat_r+0x1c>
 800a3c6:	6023      	str	r3, [r4, #0]
 800a3c8:	bd38      	pop	{r3, r4, r5, pc}
 800a3ca:	bf00      	nop
 800a3cc:	20005104 	.word	0x20005104

0800a3d0 <_isatty_r>:
 800a3d0:	b538      	push	{r3, r4, r5, lr}
 800a3d2:	4d06      	ldr	r5, [pc, #24]	@ (800a3ec <_isatty_r+0x1c>)
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	4608      	mov	r0, r1
 800a3da:	602b      	str	r3, [r5, #0]
 800a3dc:	f7f7 fa6a 	bl	80018b4 <_isatty>
 800a3e0:	1c43      	adds	r3, r0, #1
 800a3e2:	d102      	bne.n	800a3ea <_isatty_r+0x1a>
 800a3e4:	682b      	ldr	r3, [r5, #0]
 800a3e6:	b103      	cbz	r3, 800a3ea <_isatty_r+0x1a>
 800a3e8:	6023      	str	r3, [r4, #0]
 800a3ea:	bd38      	pop	{r3, r4, r5, pc}
 800a3ec:	20005104 	.word	0x20005104

0800a3f0 <abort>:
 800a3f0:	b508      	push	{r3, lr}
 800a3f2:	2006      	movs	r0, #6
 800a3f4:	f000 f82c 	bl	800a450 <raise>
 800a3f8:	2001      	movs	r0, #1
 800a3fa:	f7f7 f9fb 	bl	80017f4 <_exit>

0800a3fe <_raise_r>:
 800a3fe:	291f      	cmp	r1, #31
 800a400:	b538      	push	{r3, r4, r5, lr}
 800a402:	4605      	mov	r5, r0
 800a404:	460c      	mov	r4, r1
 800a406:	d904      	bls.n	800a412 <_raise_r+0x14>
 800a408:	2316      	movs	r3, #22
 800a40a:	6003      	str	r3, [r0, #0]
 800a40c:	f04f 30ff 	mov.w	r0, #4294967295
 800a410:	bd38      	pop	{r3, r4, r5, pc}
 800a412:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a414:	b112      	cbz	r2, 800a41c <_raise_r+0x1e>
 800a416:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a41a:	b94b      	cbnz	r3, 800a430 <_raise_r+0x32>
 800a41c:	4628      	mov	r0, r5
 800a41e:	f000 f831 	bl	800a484 <_getpid_r>
 800a422:	4622      	mov	r2, r4
 800a424:	4601      	mov	r1, r0
 800a426:	4628      	mov	r0, r5
 800a428:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a42c:	f000 b818 	b.w	800a460 <_kill_r>
 800a430:	2b01      	cmp	r3, #1
 800a432:	d00a      	beq.n	800a44a <_raise_r+0x4c>
 800a434:	1c59      	adds	r1, r3, #1
 800a436:	d103      	bne.n	800a440 <_raise_r+0x42>
 800a438:	2316      	movs	r3, #22
 800a43a:	6003      	str	r3, [r0, #0]
 800a43c:	2001      	movs	r0, #1
 800a43e:	e7e7      	b.n	800a410 <_raise_r+0x12>
 800a440:	2100      	movs	r1, #0
 800a442:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a446:	4620      	mov	r0, r4
 800a448:	4798      	blx	r3
 800a44a:	2000      	movs	r0, #0
 800a44c:	e7e0      	b.n	800a410 <_raise_r+0x12>
	...

0800a450 <raise>:
 800a450:	4b02      	ldr	r3, [pc, #8]	@ (800a45c <raise+0xc>)
 800a452:	4601      	mov	r1, r0
 800a454:	6818      	ldr	r0, [r3, #0]
 800a456:	f7ff bfd2 	b.w	800a3fe <_raise_r>
 800a45a:	bf00      	nop
 800a45c:	2000001c 	.word	0x2000001c

0800a460 <_kill_r>:
 800a460:	b538      	push	{r3, r4, r5, lr}
 800a462:	4d07      	ldr	r5, [pc, #28]	@ (800a480 <_kill_r+0x20>)
 800a464:	2300      	movs	r3, #0
 800a466:	4604      	mov	r4, r0
 800a468:	4608      	mov	r0, r1
 800a46a:	4611      	mov	r1, r2
 800a46c:	602b      	str	r3, [r5, #0]
 800a46e:	f7f7 f9b1 	bl	80017d4 <_kill>
 800a472:	1c43      	adds	r3, r0, #1
 800a474:	d102      	bne.n	800a47c <_kill_r+0x1c>
 800a476:	682b      	ldr	r3, [r5, #0]
 800a478:	b103      	cbz	r3, 800a47c <_kill_r+0x1c>
 800a47a:	6023      	str	r3, [r4, #0]
 800a47c:	bd38      	pop	{r3, r4, r5, pc}
 800a47e:	bf00      	nop
 800a480:	20005104 	.word	0x20005104

0800a484 <_getpid_r>:
 800a484:	f7f7 b99e 	b.w	80017c4 <_getpid>

0800a488 <_init>:
 800a488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a48a:	bf00      	nop
 800a48c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a48e:	bc08      	pop	{r3}
 800a490:	469e      	mov	lr, r3
 800a492:	4770      	bx	lr

0800a494 <_fini>:
 800a494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a496:	bf00      	nop
 800a498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a49a:	bc08      	pop	{r3}
 800a49c:	469e      	mov	lr, r3
 800a49e:	4770      	bx	lr
