
16_SYSTICK_INT_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d6c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000f30  08000f30  00001f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f50  08000f50  0000205c  2**0
                  CONTENTS
  4 .ARM          00000000  08000f50  08000f50  0000205c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f50  08000f50  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f50  08000f50  00001f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f54  08000f54  00001f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08000f58  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08000fb4  0000205c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000fb4  000021c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001106  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000061f  00000000  00000000  00003192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000190  00000000  00000000  000037b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000010f  00000000  00000000  00003948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9c3  00000000  00000000  00003a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000022bd  00000000  00000000  0001e41a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090ef7  00000000  00000000  000206d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b15ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b1c  00000000  00000000  000b1614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000b2130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000f18 	.word	0x08000f18

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000060 	.word	0x20000060
 8000200:	08000f18 	.word	0x08000f18

08000204 <__io_putchar>:
#define LED     PIN5

char data;

int __io_putchar(int ch)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	UART2_Transmit(ch);
 800020c:	6878      	ldr	r0, [r7, #4]
 800020e:	f000 f8ff 	bl	8000410 <UART2_Transmit>
	return ch;
 8000212:	687b      	ldr	r3, [r7, #4]
}
 8000214:	4618      	mov	r0, r3
 8000216:	3708      	adds	r7, #8
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}

0800021c <main>:

int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAEN;
 8000220:	4b0d      	ldr	r3, [pc, #52]	@ (8000258 <main+0x3c>)
 8000222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000224:	4a0c      	ldr	r2, [pc, #48]	@ (8000258 <main+0x3c>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |= (1U << 10);
 800022c:	4b0b      	ldr	r3, [pc, #44]	@ (800025c <main+0x40>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a0a      	ldr	r2, [pc, #40]	@ (800025c <main+0x40>)
 8000232:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000236:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U << 11);
 8000238:	4b08      	ldr	r3, [pc, #32]	@ (800025c <main+0x40>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a07      	ldr	r2, [pc, #28]	@ (800025c <main+0x40>)
 800023e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000242:	6013      	str	r3, [r2, #0]
	UART2_Init();
 8000244:	f000 f8fc 	bl	8000440 <UART2_Init>
	printf("Hello World!\r\n");
 8000248:	4805      	ldr	r0, [pc, #20]	@ (8000260 <main+0x44>)
 800024a:	f000 fad1 	bl	80007f0 <puts>
	systick_1hz_interrupt();
 800024e:	f000 f8c5 	bl	80003dc <systick_1hz_interrupt>
	while(1)
 8000252:	bf00      	nop
 8000254:	e7fd      	b.n	8000252 <main+0x36>
 8000256:	bf00      	nop
 8000258:	40023800 	.word	0x40023800
 800025c:	40020000 	.word	0x40020000
 8000260:	08000f30 	.word	0x08000f30

08000264 <sysTick_callback>:

	}
}

static void sysTick_callback(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= LED;
 8000268:	4b05      	ldr	r3, [pc, #20]	@ (8000280 <sysTick_callback+0x1c>)
 800026a:	695b      	ldr	r3, [r3, #20]
 800026c:	4a04      	ldr	r2, [pc, #16]	@ (8000280 <sysTick_callback+0x1c>)
 800026e:	f083 0320 	eor.w	r3, r3, #32
 8000272:	6153      	str	r3, [r2, #20]
	printf("1sec Interrupt\r\n");
 8000274:	4803      	ldr	r0, [pc, #12]	@ (8000284 <sysTick_callback+0x20>)
 8000276:	f000 fabb 	bl	80007f0 <puts>
}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40020000 	.word	0x40020000
 8000284:	08000f40 	.word	0x08000f40

08000288 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	sysTick_callback();
 800028c:	f7ff ffea 	bl	8000264 <sysTick_callback>
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}

08000294 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b086      	sub	sp, #24
 8000298:	af00      	add	r7, sp, #0
 800029a:	60f8      	str	r0, [r7, #12]
 800029c:	60b9      	str	r1, [r7, #8]
 800029e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002a0:	2300      	movs	r3, #0
 80002a2:	617b      	str	r3, [r7, #20]
 80002a4:	e00a      	b.n	80002bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80002a6:	f3af 8000 	nop.w
 80002aa:	4601      	mov	r1, r0
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	1c5a      	adds	r2, r3, #1
 80002b0:	60ba      	str	r2, [r7, #8]
 80002b2:	b2ca      	uxtb	r2, r1
 80002b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	3301      	adds	r3, #1
 80002ba:	617b      	str	r3, [r7, #20]
 80002bc:	697a      	ldr	r2, [r7, #20]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	dbf0      	blt.n	80002a6 <_read+0x12>
  }

  return len;
 80002c4:	687b      	ldr	r3, [r7, #4]
}
 80002c6:	4618      	mov	r0, r3
 80002c8:	3718      	adds	r7, #24
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}

080002ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002ce:	b580      	push	{r7, lr}
 80002d0:	b086      	sub	sp, #24
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	60f8      	str	r0, [r7, #12]
 80002d6:	60b9      	str	r1, [r7, #8]
 80002d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002da:	2300      	movs	r3, #0
 80002dc:	617b      	str	r3, [r7, #20]
 80002de:	e009      	b.n	80002f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	1c5a      	adds	r2, r3, #1
 80002e4:	60ba      	str	r2, [r7, #8]
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ff8b 	bl	8000204 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	3301      	adds	r3, #1
 80002f2:	617b      	str	r3, [r7, #20]
 80002f4:	697a      	ldr	r2, [r7, #20]
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	dbf1      	blt.n	80002e0 <_write+0x12>
  }
  return len;
 80002fc:	687b      	ldr	r3, [r7, #4]
}
 80002fe:	4618      	mov	r0, r3
 8000300:	3718      	adds	r7, #24
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}

08000306 <_close>:

int _close(int file)
{
 8000306:	b480      	push	{r7}
 8000308:	b083      	sub	sp, #12
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800030e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000312:	4618      	mov	r0, r3
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr

0800031e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800031e:	b480      	push	{r7}
 8000320:	b083      	sub	sp, #12
 8000322:	af00      	add	r7, sp, #0
 8000324:	6078      	str	r0, [r7, #4]
 8000326:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800032e:	605a      	str	r2, [r3, #4]
  return 0;
 8000330:	2300      	movs	r3, #0
}
 8000332:	4618      	mov	r0, r3
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr

0800033e <_isatty>:

int _isatty(int file)
{
 800033e:	b480      	push	{r7}
 8000340:	b083      	sub	sp, #12
 8000342:	af00      	add	r7, sp, #0
 8000344:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000346:	2301      	movs	r3, #1
}
 8000348:	4618      	mov	r0, r3
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr

08000354 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
 800035a:	60f8      	str	r0, [r7, #12]
 800035c:	60b9      	str	r1, [r7, #8]
 800035e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000360:	2300      	movs	r3, #0
}
 8000362:	4618      	mov	r0, r3
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
	...

08000370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b086      	sub	sp, #24
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000378:	4a14      	ldr	r2, [pc, #80]	@ (80003cc <_sbrk+0x5c>)
 800037a:	4b15      	ldr	r3, [pc, #84]	@ (80003d0 <_sbrk+0x60>)
 800037c:	1ad3      	subs	r3, r2, r3
 800037e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000384:	4b13      	ldr	r3, [pc, #76]	@ (80003d4 <_sbrk+0x64>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d102      	bne.n	8000392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800038c:	4b11      	ldr	r3, [pc, #68]	@ (80003d4 <_sbrk+0x64>)
 800038e:	4a12      	ldr	r2, [pc, #72]	@ (80003d8 <_sbrk+0x68>)
 8000390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000392:	4b10      	ldr	r3, [pc, #64]	@ (80003d4 <_sbrk+0x64>)
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4413      	add	r3, r2
 800039a:	693a      	ldr	r2, [r7, #16]
 800039c:	429a      	cmp	r2, r3
 800039e:	d207      	bcs.n	80003b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003a0:	f000 fb54 	bl	8000a4c <__errno>
 80003a4:	4603      	mov	r3, r0
 80003a6:	220c      	movs	r2, #12
 80003a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003aa:	f04f 33ff 	mov.w	r3, #4294967295
 80003ae:	e009      	b.n	80003c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003b0:	4b08      	ldr	r3, [pc, #32]	@ (80003d4 <_sbrk+0x64>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003b6:	4b07      	ldr	r3, [pc, #28]	@ (80003d4 <_sbrk+0x64>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4413      	add	r3, r2
 80003be:	4a05      	ldr	r2, [pc, #20]	@ (80003d4 <_sbrk+0x64>)
 80003c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003c2:	68fb      	ldr	r3, [r7, #12]
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3718      	adds	r7, #24
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	20020000 	.word	0x20020000
 80003d0:	00000400 	.word	0x00000400
 80003d4:	20000078 	.word	0x20000078
 80003d8:	200001c8 	.word	0x200001c8

080003dc <systick_1hz_interrupt>:
	SysTick->CTRL = 0;

}

void systick_1hz_interrupt(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
	/*reload with no of clocks per second*/
	SysTick->LOAD = ONE_SEC_LOAD - 1;
 80003e0:	4b09      	ldr	r3, [pc, #36]	@ (8000408 <systick_1hz_interrupt+0x2c>)
 80003e2:	4a0a      	ldr	r2, [pc, #40]	@ (800040c <systick_1hz_interrupt+0x30>)
 80003e4:	605a      	str	r2, [r3, #4]
	/*enable systick and select internal clock source*/
	SysTick->CTRL |= CTRL_ENABLE | CTRL_CLKSRC;
 80003e6:	4b08      	ldr	r3, [pc, #32]	@ (8000408 <systick_1hz_interrupt+0x2c>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a07      	ldr	r2, [pc, #28]	@ (8000408 <systick_1hz_interrupt+0x2c>)
 80003ec:	f043 0305 	orr.w	r3, r3, #5
 80003f0:	6013      	str	r3, [r2, #0]
	/* enable systick interrupt */
	SysTick->CTRL |= CTRL_TICKINT;
 80003f2:	4b05      	ldr	r3, [pc, #20]	@ (8000408 <systick_1hz_interrupt+0x2c>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a04      	ldr	r2, [pc, #16]	@ (8000408 <systick_1hz_interrupt+0x2c>)
 80003f8:	f043 0302 	orr.w	r3, r3, #2
 80003fc:	6013      	str	r3, [r2, #0]
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr
 8000408:	e000e010 	.word	0xe000e010
 800040c:	00f423ff 	.word	0x00f423ff

08000410 <UART2_Transmit>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate);
void UART2_Transmit(int ch);


void UART2_Transmit(int ch)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & SR_TXE)){}
 8000418:	bf00      	nop
 800041a:	4b08      	ldr	r3, [pc, #32]	@ (800043c <UART2_Transmit+0x2c>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000422:	2b00      	cmp	r3, #0
 8000424:	d0f9      	beq.n	800041a <UART2_Transmit+0xa>
	USART2->DR = (ch & 0xFF);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a04      	ldr	r2, [pc, #16]	@ (800043c <UART2_Transmit+0x2c>)
 800042a:	b2db      	uxtb	r3, r3
 800042c:	6053      	str	r3, [r2, #4]
}
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40004400 	.word	0x40004400

08000440 <UART2_Init>:

void UART2_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAEN;    //Enabling AHB1 clock for PORT A, because UART 2 uses PA2 - TX and PA3 - RX
 8000444:	4b32      	ldr	r3, [pc, #200]	@ (8000510 <UART2_Init+0xd0>)
 8000446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000448:	4a31      	ldr	r2, [pc, #196]	@ (8000510 <UART2_Init+0xd0>)
 800044a:	f043 0301 	orr.w	r3, r3, #1
 800044e:	6313      	str	r3, [r2, #48]	@ 0x30

	/* setting PA2 - TX as alternate function mode by using set 1 bit 4 and 5 as configuration 1:0*/
	GPIOA->MODER &= ~(1U << 4);
 8000450:	4b30      	ldr	r3, [pc, #192]	@ (8000514 <UART2_Init+0xd4>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a2f      	ldr	r2, [pc, #188]	@ (8000514 <UART2_Init+0xd4>)
 8000456:	f023 0310 	bic.w	r3, r3, #16
 800045a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 5);
 800045c:	4b2d      	ldr	r3, [pc, #180]	@ (8000514 <UART2_Init+0xd4>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a2c      	ldr	r2, [pc, #176]	@ (8000514 <UART2_Init+0xd4>)
 8000462:	f043 0320 	orr.w	r3, r3, #32
 8000466:	6013      	str	r3, [r2, #0]

	/* setting PA3 - RX as alternate function mode by using set as configuration 1:0*/
	GPIOA->MODER &= ~(1U << 6);
 8000468:	4b2a      	ldr	r3, [pc, #168]	@ (8000514 <UART2_Init+0xd4>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a29      	ldr	r2, [pc, #164]	@ (8000514 <UART2_Init+0xd4>)
 800046e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000472:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 7);
 8000474:	4b27      	ldr	r3, [pc, #156]	@ (8000514 <UART2_Init+0xd4>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a26      	ldr	r2, [pc, #152]	@ (8000514 <UART2_Init+0xd4>)
 800047a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800047e:	6013      	str	r3, [r2, #0]
	 * PA2 is a AF7 in alternate function mapping register.
	 * PA2 comes under alternate function low register because first 8 pins on any port it comes under AFRL, next 8 pins comes under the AFRH register
	 * for enabling AF7 we need to set bit formation as 0111 to the particular alternate function pin register.
	 * Alternate function register, each pin have 4 bits.
	 */
	GPIOA->AFR[0] |= (1U << 8);   //1
 8000480:	4b24      	ldr	r3, [pc, #144]	@ (8000514 <UART2_Init+0xd4>)
 8000482:	6a1b      	ldr	r3, [r3, #32]
 8000484:	4a23      	ldr	r2, [pc, #140]	@ (8000514 <UART2_Init+0xd4>)
 8000486:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800048a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 9);   //1
 800048c:	4b21      	ldr	r3, [pc, #132]	@ (8000514 <UART2_Init+0xd4>)
 800048e:	6a1b      	ldr	r3, [r3, #32]
 8000490:	4a20      	ldr	r2, [pc, #128]	@ (8000514 <UART2_Init+0xd4>)
 8000492:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000496:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 10);  //1
 8000498:	4b1e      	ldr	r3, [pc, #120]	@ (8000514 <UART2_Init+0xd4>)
 800049a:	6a1b      	ldr	r3, [r3, #32]
 800049c:	4a1d      	ldr	r2, [pc, #116]	@ (8000514 <UART2_Init+0xd4>)
 800049e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004a2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 11);  //0
 80004a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000514 <UART2_Init+0xd4>)
 80004a6:	6a1b      	ldr	r3, [r3, #32]
 80004a8:	4a1a      	ldr	r2, [pc, #104]	@ (8000514 <UART2_Init+0xd4>)
 80004aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80004ae:	6213      	str	r3, [r2, #32]

	/* Setting PA3 alternate function type*/
	GPIOA->AFR[0] |= (1U << 12);   //1
 80004b0:	4b18      	ldr	r3, [pc, #96]	@ (8000514 <UART2_Init+0xd4>)
 80004b2:	6a1b      	ldr	r3, [r3, #32]
 80004b4:	4a17      	ldr	r2, [pc, #92]	@ (8000514 <UART2_Init+0xd4>)
 80004b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80004ba:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 13);   //1
 80004bc:	4b15      	ldr	r3, [pc, #84]	@ (8000514 <UART2_Init+0xd4>)
 80004be:	6a1b      	ldr	r3, [r3, #32]
 80004c0:	4a14      	ldr	r2, [pc, #80]	@ (8000514 <UART2_Init+0xd4>)
 80004c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004c6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 14);  //1
 80004c8:	4b12      	ldr	r3, [pc, #72]	@ (8000514 <UART2_Init+0xd4>)
 80004ca:	6a1b      	ldr	r3, [r3, #32]
 80004cc:	4a11      	ldr	r2, [pc, #68]	@ (8000514 <UART2_Init+0xd4>)
 80004ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004d2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 15);  //0
 80004d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000514 <UART2_Init+0xd4>)
 80004d6:	6a1b      	ldr	r3, [r3, #32]
 80004d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000514 <UART2_Init+0xd4>)
 80004da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80004de:	6213      	str	r3, [r2, #32]

	RCC->APB1ENR |= UART2EN;    //Enabling APB1 clock for UART2
 80004e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000510 <UART2_Init+0xd0>)
 80004e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000510 <UART2_Init+0xd0>)
 80004e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004ea:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure baud rate*/
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80004ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004f0:	4909      	ldr	r1, [pc, #36]	@ (8000518 <UART2_Init+0xd8>)
 80004f2:	480a      	ldr	r0, [pc, #40]	@ (800051c <UART2_Init+0xdc>)
 80004f4:	f000 f814 	bl	8000520 <uart_set_baudrate>

	/*configure the transfer direction like rx or tx*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 80004f8:	4b08      	ldr	r3, [pc, #32]	@ (800051c <UART2_Init+0xdc>)
 80004fa:	220c      	movs	r2, #12
 80004fc:	60da      	str	r2, [r3, #12]

	/*enabling the uart module*/
	USART2->CR1 |= CR1_UE;
 80004fe:	4b07      	ldr	r3, [pc, #28]	@ (800051c <UART2_Init+0xdc>)
 8000500:	68db      	ldr	r3, [r3, #12]
 8000502:	4a06      	ldr	r2, [pc, #24]	@ (800051c <UART2_Init+0xdc>)
 8000504:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000508:	60d3      	str	r3, [r2, #12]
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40023800 	.word	0x40023800
 8000514:	40020000 	.word	0x40020000
 8000518:	00f42400 	.word	0x00f42400
 800051c:	40004400 	.word	0x40004400

08000520 <uart_set_baudrate>:
	while(!(USART2->SR & SR_RXNE)){}
	return USART2->DR;
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 800052c:	6879      	ldr	r1, [r7, #4]
 800052e:	68b8      	ldr	r0, [r7, #8]
 8000530:	f000 f808 	bl	8000544 <compute_uart_bd>
 8000534:	4603      	mov	r3, r0
 8000536:	461a      	mov	r2, r3
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	609a      	str	r2, [r3, #8]
}
 800053c:	bf00      	nop
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <compute_uart_bd>:


static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	085a      	lsrs	r2, r3, #1
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	441a      	add	r2, r3
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	fbb2 f3f3 	udiv	r3, r2, r3
 800055c:	b29b      	uxth	r3, r3
}
 800055e:	4618      	mov	r0, r3
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
	...

0800056c <Reset_Handler>:
 800056c:	480d      	ldr	r0, [pc, #52]	@ (80005a4 <LoopForever+0x2>)
 800056e:	4685      	mov	sp, r0
 8000570:	f3af 8000 	nop.w
 8000574:	480c      	ldr	r0, [pc, #48]	@ (80005a8 <LoopForever+0x6>)
 8000576:	490d      	ldr	r1, [pc, #52]	@ (80005ac <LoopForever+0xa>)
 8000578:	4a0d      	ldr	r2, [pc, #52]	@ (80005b0 <LoopForever+0xe>)
 800057a:	2300      	movs	r3, #0
 800057c:	e002      	b.n	8000584 <LoopCopyDataInit>

0800057e <CopyDataInit>:
 800057e:	58d4      	ldr	r4, [r2, r3]
 8000580:	50c4      	str	r4, [r0, r3]
 8000582:	3304      	adds	r3, #4

08000584 <LoopCopyDataInit>:
 8000584:	18c4      	adds	r4, r0, r3
 8000586:	428c      	cmp	r4, r1
 8000588:	d3f9      	bcc.n	800057e <CopyDataInit>
 800058a:	4a0a      	ldr	r2, [pc, #40]	@ (80005b4 <LoopForever+0x12>)
 800058c:	4c0a      	ldr	r4, [pc, #40]	@ (80005b8 <LoopForever+0x16>)
 800058e:	2300      	movs	r3, #0
 8000590:	e001      	b.n	8000596 <LoopFillZerobss>

08000592 <FillZerobss>:
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	3204      	adds	r2, #4

08000596 <LoopFillZerobss>:
 8000596:	42a2      	cmp	r2, r4
 8000598:	d3fb      	bcc.n	8000592 <FillZerobss>
 800059a:	f000 fa5d 	bl	8000a58 <__libc_init_array>
 800059e:	f7ff fe3d 	bl	800021c <main>

080005a2 <LoopForever>:
 80005a2:	e7fe      	b.n	80005a2 <LoopForever>
 80005a4:	20020000 	.word	0x20020000
 80005a8:	20000000 	.word	0x20000000
 80005ac:	2000005c 	.word	0x2000005c
 80005b0:	08000f58 	.word	0x08000f58
 80005b4:	2000005c 	.word	0x2000005c
 80005b8:	200001c8 	.word	0x200001c8

080005bc <ADC_IRQHandler>:
 80005bc:	e7fe      	b.n	80005bc <ADC_IRQHandler>
	...

080005c0 <std>:
 80005c0:	2300      	movs	r3, #0
 80005c2:	b510      	push	{r4, lr}
 80005c4:	4604      	mov	r4, r0
 80005c6:	e9c0 3300 	strd	r3, r3, [r0]
 80005ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80005ce:	6083      	str	r3, [r0, #8]
 80005d0:	8181      	strh	r1, [r0, #12]
 80005d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80005d4:	81c2      	strh	r2, [r0, #14]
 80005d6:	6183      	str	r3, [r0, #24]
 80005d8:	4619      	mov	r1, r3
 80005da:	2208      	movs	r2, #8
 80005dc:	305c      	adds	r0, #92	@ 0x5c
 80005de:	f000 f9e7 	bl	80009b0 <memset>
 80005e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <std+0x58>)
 80005e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80005e6:	4b0d      	ldr	r3, [pc, #52]	@ (800061c <std+0x5c>)
 80005e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80005ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000620 <std+0x60>)
 80005ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80005ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <std+0x64>)
 80005f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80005f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000628 <std+0x68>)
 80005f4:	6224      	str	r4, [r4, #32]
 80005f6:	429c      	cmp	r4, r3
 80005f8:	d006      	beq.n	8000608 <std+0x48>
 80005fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80005fe:	4294      	cmp	r4, r2
 8000600:	d002      	beq.n	8000608 <std+0x48>
 8000602:	33d0      	adds	r3, #208	@ 0xd0
 8000604:	429c      	cmp	r4, r3
 8000606:	d105      	bne.n	8000614 <std+0x54>
 8000608:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800060c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000610:	f000 ba46 	b.w	8000aa0 <__retarget_lock_init_recursive>
 8000614:	bd10      	pop	{r4, pc}
 8000616:	bf00      	nop
 8000618:	08000801 	.word	0x08000801
 800061c:	08000823 	.word	0x08000823
 8000620:	0800085b 	.word	0x0800085b
 8000624:	0800087f 	.word	0x0800087f
 8000628:	2000007c 	.word	0x2000007c

0800062c <stdio_exit_handler>:
 800062c:	4a02      	ldr	r2, [pc, #8]	@ (8000638 <stdio_exit_handler+0xc>)
 800062e:	4903      	ldr	r1, [pc, #12]	@ (800063c <stdio_exit_handler+0x10>)
 8000630:	4803      	ldr	r0, [pc, #12]	@ (8000640 <stdio_exit_handler+0x14>)
 8000632:	f000 b869 	b.w	8000708 <_fwalk_sglue>
 8000636:	bf00      	nop
 8000638:	20000000 	.word	0x20000000
 800063c:	08000da1 	.word	0x08000da1
 8000640:	20000010 	.word	0x20000010

08000644 <cleanup_stdio>:
 8000644:	6841      	ldr	r1, [r0, #4]
 8000646:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <cleanup_stdio+0x34>)
 8000648:	4299      	cmp	r1, r3
 800064a:	b510      	push	{r4, lr}
 800064c:	4604      	mov	r4, r0
 800064e:	d001      	beq.n	8000654 <cleanup_stdio+0x10>
 8000650:	f000 fba6 	bl	8000da0 <_fflush_r>
 8000654:	68a1      	ldr	r1, [r4, #8]
 8000656:	4b09      	ldr	r3, [pc, #36]	@ (800067c <cleanup_stdio+0x38>)
 8000658:	4299      	cmp	r1, r3
 800065a:	d002      	beq.n	8000662 <cleanup_stdio+0x1e>
 800065c:	4620      	mov	r0, r4
 800065e:	f000 fb9f 	bl	8000da0 <_fflush_r>
 8000662:	68e1      	ldr	r1, [r4, #12]
 8000664:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <cleanup_stdio+0x3c>)
 8000666:	4299      	cmp	r1, r3
 8000668:	d004      	beq.n	8000674 <cleanup_stdio+0x30>
 800066a:	4620      	mov	r0, r4
 800066c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000670:	f000 bb96 	b.w	8000da0 <_fflush_r>
 8000674:	bd10      	pop	{r4, pc}
 8000676:	bf00      	nop
 8000678:	2000007c 	.word	0x2000007c
 800067c:	200000e4 	.word	0x200000e4
 8000680:	2000014c 	.word	0x2000014c

08000684 <global_stdio_init.part.0>:
 8000684:	b510      	push	{r4, lr}
 8000686:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <global_stdio_init.part.0+0x30>)
 8000688:	4c0b      	ldr	r4, [pc, #44]	@ (80006b8 <global_stdio_init.part.0+0x34>)
 800068a:	4a0c      	ldr	r2, [pc, #48]	@ (80006bc <global_stdio_init.part.0+0x38>)
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	4620      	mov	r0, r4
 8000690:	2200      	movs	r2, #0
 8000692:	2104      	movs	r1, #4
 8000694:	f7ff ff94 	bl	80005c0 <std>
 8000698:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800069c:	2201      	movs	r2, #1
 800069e:	2109      	movs	r1, #9
 80006a0:	f7ff ff8e 	bl	80005c0 <std>
 80006a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80006a8:	2202      	movs	r2, #2
 80006aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006ae:	2112      	movs	r1, #18
 80006b0:	f7ff bf86 	b.w	80005c0 <std>
 80006b4:	200001b4 	.word	0x200001b4
 80006b8:	2000007c 	.word	0x2000007c
 80006bc:	0800062d 	.word	0x0800062d

080006c0 <__sfp_lock_acquire>:
 80006c0:	4801      	ldr	r0, [pc, #4]	@ (80006c8 <__sfp_lock_acquire+0x8>)
 80006c2:	f000 b9ee 	b.w	8000aa2 <__retarget_lock_acquire_recursive>
 80006c6:	bf00      	nop
 80006c8:	200001bd 	.word	0x200001bd

080006cc <__sfp_lock_release>:
 80006cc:	4801      	ldr	r0, [pc, #4]	@ (80006d4 <__sfp_lock_release+0x8>)
 80006ce:	f000 b9e9 	b.w	8000aa4 <__retarget_lock_release_recursive>
 80006d2:	bf00      	nop
 80006d4:	200001bd 	.word	0x200001bd

080006d8 <__sinit>:
 80006d8:	b510      	push	{r4, lr}
 80006da:	4604      	mov	r4, r0
 80006dc:	f7ff fff0 	bl	80006c0 <__sfp_lock_acquire>
 80006e0:	6a23      	ldr	r3, [r4, #32]
 80006e2:	b11b      	cbz	r3, 80006ec <__sinit+0x14>
 80006e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006e8:	f7ff bff0 	b.w	80006cc <__sfp_lock_release>
 80006ec:	4b04      	ldr	r3, [pc, #16]	@ (8000700 <__sinit+0x28>)
 80006ee:	6223      	str	r3, [r4, #32]
 80006f0:	4b04      	ldr	r3, [pc, #16]	@ (8000704 <__sinit+0x2c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d1f5      	bne.n	80006e4 <__sinit+0xc>
 80006f8:	f7ff ffc4 	bl	8000684 <global_stdio_init.part.0>
 80006fc:	e7f2      	b.n	80006e4 <__sinit+0xc>
 80006fe:	bf00      	nop
 8000700:	08000645 	.word	0x08000645
 8000704:	200001b4 	.word	0x200001b4

08000708 <_fwalk_sglue>:
 8000708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800070c:	4607      	mov	r7, r0
 800070e:	4688      	mov	r8, r1
 8000710:	4614      	mov	r4, r2
 8000712:	2600      	movs	r6, #0
 8000714:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000718:	f1b9 0901 	subs.w	r9, r9, #1
 800071c:	d505      	bpl.n	800072a <_fwalk_sglue+0x22>
 800071e:	6824      	ldr	r4, [r4, #0]
 8000720:	2c00      	cmp	r4, #0
 8000722:	d1f7      	bne.n	8000714 <_fwalk_sglue+0xc>
 8000724:	4630      	mov	r0, r6
 8000726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800072a:	89ab      	ldrh	r3, [r5, #12]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d907      	bls.n	8000740 <_fwalk_sglue+0x38>
 8000730:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000734:	3301      	adds	r3, #1
 8000736:	d003      	beq.n	8000740 <_fwalk_sglue+0x38>
 8000738:	4629      	mov	r1, r5
 800073a:	4638      	mov	r0, r7
 800073c:	47c0      	blx	r8
 800073e:	4306      	orrs	r6, r0
 8000740:	3568      	adds	r5, #104	@ 0x68
 8000742:	e7e9      	b.n	8000718 <_fwalk_sglue+0x10>

08000744 <_puts_r>:
 8000744:	6a03      	ldr	r3, [r0, #32]
 8000746:	b570      	push	{r4, r5, r6, lr}
 8000748:	6884      	ldr	r4, [r0, #8]
 800074a:	4605      	mov	r5, r0
 800074c:	460e      	mov	r6, r1
 800074e:	b90b      	cbnz	r3, 8000754 <_puts_r+0x10>
 8000750:	f7ff ffc2 	bl	80006d8 <__sinit>
 8000754:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000756:	07db      	lsls	r3, r3, #31
 8000758:	d405      	bmi.n	8000766 <_puts_r+0x22>
 800075a:	89a3      	ldrh	r3, [r4, #12]
 800075c:	0598      	lsls	r0, r3, #22
 800075e:	d402      	bmi.n	8000766 <_puts_r+0x22>
 8000760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000762:	f000 f99e 	bl	8000aa2 <__retarget_lock_acquire_recursive>
 8000766:	89a3      	ldrh	r3, [r4, #12]
 8000768:	0719      	lsls	r1, r3, #28
 800076a:	d502      	bpl.n	8000772 <_puts_r+0x2e>
 800076c:	6923      	ldr	r3, [r4, #16]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d135      	bne.n	80007de <_puts_r+0x9a>
 8000772:	4621      	mov	r1, r4
 8000774:	4628      	mov	r0, r5
 8000776:	f000 f8c5 	bl	8000904 <__swsetup_r>
 800077a:	b380      	cbz	r0, 80007de <_puts_r+0x9a>
 800077c:	f04f 35ff 	mov.w	r5, #4294967295
 8000780:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000782:	07da      	lsls	r2, r3, #31
 8000784:	d405      	bmi.n	8000792 <_puts_r+0x4e>
 8000786:	89a3      	ldrh	r3, [r4, #12]
 8000788:	059b      	lsls	r3, r3, #22
 800078a:	d402      	bmi.n	8000792 <_puts_r+0x4e>
 800078c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800078e:	f000 f989 	bl	8000aa4 <__retarget_lock_release_recursive>
 8000792:	4628      	mov	r0, r5
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	2b00      	cmp	r3, #0
 8000798:	da04      	bge.n	80007a4 <_puts_r+0x60>
 800079a:	69a2      	ldr	r2, [r4, #24]
 800079c:	429a      	cmp	r2, r3
 800079e:	dc17      	bgt.n	80007d0 <_puts_r+0x8c>
 80007a0:	290a      	cmp	r1, #10
 80007a2:	d015      	beq.n	80007d0 <_puts_r+0x8c>
 80007a4:	6823      	ldr	r3, [r4, #0]
 80007a6:	1c5a      	adds	r2, r3, #1
 80007a8:	6022      	str	r2, [r4, #0]
 80007aa:	7019      	strb	r1, [r3, #0]
 80007ac:	68a3      	ldr	r3, [r4, #8]
 80007ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007b2:	3b01      	subs	r3, #1
 80007b4:	60a3      	str	r3, [r4, #8]
 80007b6:	2900      	cmp	r1, #0
 80007b8:	d1ed      	bne.n	8000796 <_puts_r+0x52>
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	da11      	bge.n	80007e2 <_puts_r+0x9e>
 80007be:	4622      	mov	r2, r4
 80007c0:	210a      	movs	r1, #10
 80007c2:	4628      	mov	r0, r5
 80007c4:	f000 f85f 	bl	8000886 <__swbuf_r>
 80007c8:	3001      	adds	r0, #1
 80007ca:	d0d7      	beq.n	800077c <_puts_r+0x38>
 80007cc:	250a      	movs	r5, #10
 80007ce:	e7d7      	b.n	8000780 <_puts_r+0x3c>
 80007d0:	4622      	mov	r2, r4
 80007d2:	4628      	mov	r0, r5
 80007d4:	f000 f857 	bl	8000886 <__swbuf_r>
 80007d8:	3001      	adds	r0, #1
 80007da:	d1e7      	bne.n	80007ac <_puts_r+0x68>
 80007dc:	e7ce      	b.n	800077c <_puts_r+0x38>
 80007de:	3e01      	subs	r6, #1
 80007e0:	e7e4      	b.n	80007ac <_puts_r+0x68>
 80007e2:	6823      	ldr	r3, [r4, #0]
 80007e4:	1c5a      	adds	r2, r3, #1
 80007e6:	6022      	str	r2, [r4, #0]
 80007e8:	220a      	movs	r2, #10
 80007ea:	701a      	strb	r2, [r3, #0]
 80007ec:	e7ee      	b.n	80007cc <_puts_r+0x88>
	...

080007f0 <puts>:
 80007f0:	4b02      	ldr	r3, [pc, #8]	@ (80007fc <puts+0xc>)
 80007f2:	4601      	mov	r1, r0
 80007f4:	6818      	ldr	r0, [r3, #0]
 80007f6:	f7ff bfa5 	b.w	8000744 <_puts_r>
 80007fa:	bf00      	nop
 80007fc:	2000000c 	.word	0x2000000c

08000800 <__sread>:
 8000800:	b510      	push	{r4, lr}
 8000802:	460c      	mov	r4, r1
 8000804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000808:	f000 f8fc 	bl	8000a04 <_read_r>
 800080c:	2800      	cmp	r0, #0
 800080e:	bfab      	itete	ge
 8000810:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000812:	89a3      	ldrhlt	r3, [r4, #12]
 8000814:	181b      	addge	r3, r3, r0
 8000816:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800081a:	bfac      	ite	ge
 800081c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800081e:	81a3      	strhlt	r3, [r4, #12]
 8000820:	bd10      	pop	{r4, pc}

08000822 <__swrite>:
 8000822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000826:	461f      	mov	r7, r3
 8000828:	898b      	ldrh	r3, [r1, #12]
 800082a:	05db      	lsls	r3, r3, #23
 800082c:	4605      	mov	r5, r0
 800082e:	460c      	mov	r4, r1
 8000830:	4616      	mov	r6, r2
 8000832:	d505      	bpl.n	8000840 <__swrite+0x1e>
 8000834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000838:	2302      	movs	r3, #2
 800083a:	2200      	movs	r2, #0
 800083c:	f000 f8d0 	bl	80009e0 <_lseek_r>
 8000840:	89a3      	ldrh	r3, [r4, #12]
 8000842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000846:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800084a:	81a3      	strh	r3, [r4, #12]
 800084c:	4632      	mov	r2, r6
 800084e:	463b      	mov	r3, r7
 8000850:	4628      	mov	r0, r5
 8000852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000856:	f000 b8e7 	b.w	8000a28 <_write_r>

0800085a <__sseek>:
 800085a:	b510      	push	{r4, lr}
 800085c:	460c      	mov	r4, r1
 800085e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000862:	f000 f8bd 	bl	80009e0 <_lseek_r>
 8000866:	1c43      	adds	r3, r0, #1
 8000868:	89a3      	ldrh	r3, [r4, #12]
 800086a:	bf15      	itete	ne
 800086c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800086e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000872:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000876:	81a3      	strheq	r3, [r4, #12]
 8000878:	bf18      	it	ne
 800087a:	81a3      	strhne	r3, [r4, #12]
 800087c:	bd10      	pop	{r4, pc}

0800087e <__sclose>:
 800087e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000882:	f000 b89d 	b.w	80009c0 <_close_r>

08000886 <__swbuf_r>:
 8000886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000888:	460e      	mov	r6, r1
 800088a:	4614      	mov	r4, r2
 800088c:	4605      	mov	r5, r0
 800088e:	b118      	cbz	r0, 8000898 <__swbuf_r+0x12>
 8000890:	6a03      	ldr	r3, [r0, #32]
 8000892:	b90b      	cbnz	r3, 8000898 <__swbuf_r+0x12>
 8000894:	f7ff ff20 	bl	80006d8 <__sinit>
 8000898:	69a3      	ldr	r3, [r4, #24]
 800089a:	60a3      	str	r3, [r4, #8]
 800089c:	89a3      	ldrh	r3, [r4, #12]
 800089e:	071a      	lsls	r2, r3, #28
 80008a0:	d501      	bpl.n	80008a6 <__swbuf_r+0x20>
 80008a2:	6923      	ldr	r3, [r4, #16]
 80008a4:	b943      	cbnz	r3, 80008b8 <__swbuf_r+0x32>
 80008a6:	4621      	mov	r1, r4
 80008a8:	4628      	mov	r0, r5
 80008aa:	f000 f82b 	bl	8000904 <__swsetup_r>
 80008ae:	b118      	cbz	r0, 80008b8 <__swbuf_r+0x32>
 80008b0:	f04f 37ff 	mov.w	r7, #4294967295
 80008b4:	4638      	mov	r0, r7
 80008b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008b8:	6823      	ldr	r3, [r4, #0]
 80008ba:	6922      	ldr	r2, [r4, #16]
 80008bc:	1a98      	subs	r0, r3, r2
 80008be:	6963      	ldr	r3, [r4, #20]
 80008c0:	b2f6      	uxtb	r6, r6
 80008c2:	4283      	cmp	r3, r0
 80008c4:	4637      	mov	r7, r6
 80008c6:	dc05      	bgt.n	80008d4 <__swbuf_r+0x4e>
 80008c8:	4621      	mov	r1, r4
 80008ca:	4628      	mov	r0, r5
 80008cc:	f000 fa68 	bl	8000da0 <_fflush_r>
 80008d0:	2800      	cmp	r0, #0
 80008d2:	d1ed      	bne.n	80008b0 <__swbuf_r+0x2a>
 80008d4:	68a3      	ldr	r3, [r4, #8]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	60a3      	str	r3, [r4, #8]
 80008da:	6823      	ldr	r3, [r4, #0]
 80008dc:	1c5a      	adds	r2, r3, #1
 80008de:	6022      	str	r2, [r4, #0]
 80008e0:	701e      	strb	r6, [r3, #0]
 80008e2:	6962      	ldr	r2, [r4, #20]
 80008e4:	1c43      	adds	r3, r0, #1
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d004      	beq.n	80008f4 <__swbuf_r+0x6e>
 80008ea:	89a3      	ldrh	r3, [r4, #12]
 80008ec:	07db      	lsls	r3, r3, #31
 80008ee:	d5e1      	bpl.n	80008b4 <__swbuf_r+0x2e>
 80008f0:	2e0a      	cmp	r6, #10
 80008f2:	d1df      	bne.n	80008b4 <__swbuf_r+0x2e>
 80008f4:	4621      	mov	r1, r4
 80008f6:	4628      	mov	r0, r5
 80008f8:	f000 fa52 	bl	8000da0 <_fflush_r>
 80008fc:	2800      	cmp	r0, #0
 80008fe:	d0d9      	beq.n	80008b4 <__swbuf_r+0x2e>
 8000900:	e7d6      	b.n	80008b0 <__swbuf_r+0x2a>
	...

08000904 <__swsetup_r>:
 8000904:	b538      	push	{r3, r4, r5, lr}
 8000906:	4b29      	ldr	r3, [pc, #164]	@ (80009ac <__swsetup_r+0xa8>)
 8000908:	4605      	mov	r5, r0
 800090a:	6818      	ldr	r0, [r3, #0]
 800090c:	460c      	mov	r4, r1
 800090e:	b118      	cbz	r0, 8000918 <__swsetup_r+0x14>
 8000910:	6a03      	ldr	r3, [r0, #32]
 8000912:	b90b      	cbnz	r3, 8000918 <__swsetup_r+0x14>
 8000914:	f7ff fee0 	bl	80006d8 <__sinit>
 8000918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800091c:	0719      	lsls	r1, r3, #28
 800091e:	d422      	bmi.n	8000966 <__swsetup_r+0x62>
 8000920:	06da      	lsls	r2, r3, #27
 8000922:	d407      	bmi.n	8000934 <__swsetup_r+0x30>
 8000924:	2209      	movs	r2, #9
 8000926:	602a      	str	r2, [r5, #0]
 8000928:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800092c:	81a3      	strh	r3, [r4, #12]
 800092e:	f04f 30ff 	mov.w	r0, #4294967295
 8000932:	e033      	b.n	800099c <__swsetup_r+0x98>
 8000934:	0758      	lsls	r0, r3, #29
 8000936:	d512      	bpl.n	800095e <__swsetup_r+0x5a>
 8000938:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800093a:	b141      	cbz	r1, 800094e <__swsetup_r+0x4a>
 800093c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000940:	4299      	cmp	r1, r3
 8000942:	d002      	beq.n	800094a <__swsetup_r+0x46>
 8000944:	4628      	mov	r0, r5
 8000946:	f000 f8af 	bl	8000aa8 <_free_r>
 800094a:	2300      	movs	r3, #0
 800094c:	6363      	str	r3, [r4, #52]	@ 0x34
 800094e:	89a3      	ldrh	r3, [r4, #12]
 8000950:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000954:	81a3      	strh	r3, [r4, #12]
 8000956:	2300      	movs	r3, #0
 8000958:	6063      	str	r3, [r4, #4]
 800095a:	6923      	ldr	r3, [r4, #16]
 800095c:	6023      	str	r3, [r4, #0]
 800095e:	89a3      	ldrh	r3, [r4, #12]
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	81a3      	strh	r3, [r4, #12]
 8000966:	6923      	ldr	r3, [r4, #16]
 8000968:	b94b      	cbnz	r3, 800097e <__swsetup_r+0x7a>
 800096a:	89a3      	ldrh	r3, [r4, #12]
 800096c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000974:	d003      	beq.n	800097e <__swsetup_r+0x7a>
 8000976:	4621      	mov	r1, r4
 8000978:	4628      	mov	r0, r5
 800097a:	f000 fa5f 	bl	8000e3c <__smakebuf_r>
 800097e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000982:	f013 0201 	ands.w	r2, r3, #1
 8000986:	d00a      	beq.n	800099e <__swsetup_r+0x9a>
 8000988:	2200      	movs	r2, #0
 800098a:	60a2      	str	r2, [r4, #8]
 800098c:	6962      	ldr	r2, [r4, #20]
 800098e:	4252      	negs	r2, r2
 8000990:	61a2      	str	r2, [r4, #24]
 8000992:	6922      	ldr	r2, [r4, #16]
 8000994:	b942      	cbnz	r2, 80009a8 <__swsetup_r+0xa4>
 8000996:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800099a:	d1c5      	bne.n	8000928 <__swsetup_r+0x24>
 800099c:	bd38      	pop	{r3, r4, r5, pc}
 800099e:	0799      	lsls	r1, r3, #30
 80009a0:	bf58      	it	pl
 80009a2:	6962      	ldrpl	r2, [r4, #20]
 80009a4:	60a2      	str	r2, [r4, #8]
 80009a6:	e7f4      	b.n	8000992 <__swsetup_r+0x8e>
 80009a8:	2000      	movs	r0, #0
 80009aa:	e7f7      	b.n	800099c <__swsetup_r+0x98>
 80009ac:	2000000c 	.word	0x2000000c

080009b0 <memset>:
 80009b0:	4402      	add	r2, r0
 80009b2:	4603      	mov	r3, r0
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d100      	bne.n	80009ba <memset+0xa>
 80009b8:	4770      	bx	lr
 80009ba:	f803 1b01 	strb.w	r1, [r3], #1
 80009be:	e7f9      	b.n	80009b4 <memset+0x4>

080009c0 <_close_r>:
 80009c0:	b538      	push	{r3, r4, r5, lr}
 80009c2:	4d06      	ldr	r5, [pc, #24]	@ (80009dc <_close_r+0x1c>)
 80009c4:	2300      	movs	r3, #0
 80009c6:	4604      	mov	r4, r0
 80009c8:	4608      	mov	r0, r1
 80009ca:	602b      	str	r3, [r5, #0]
 80009cc:	f7ff fc9b 	bl	8000306 <_close>
 80009d0:	1c43      	adds	r3, r0, #1
 80009d2:	d102      	bne.n	80009da <_close_r+0x1a>
 80009d4:	682b      	ldr	r3, [r5, #0]
 80009d6:	b103      	cbz	r3, 80009da <_close_r+0x1a>
 80009d8:	6023      	str	r3, [r4, #0]
 80009da:	bd38      	pop	{r3, r4, r5, pc}
 80009dc:	200001b8 	.word	0x200001b8

080009e0 <_lseek_r>:
 80009e0:	b538      	push	{r3, r4, r5, lr}
 80009e2:	4d07      	ldr	r5, [pc, #28]	@ (8000a00 <_lseek_r+0x20>)
 80009e4:	4604      	mov	r4, r0
 80009e6:	4608      	mov	r0, r1
 80009e8:	4611      	mov	r1, r2
 80009ea:	2200      	movs	r2, #0
 80009ec:	602a      	str	r2, [r5, #0]
 80009ee:	461a      	mov	r2, r3
 80009f0:	f7ff fcb0 	bl	8000354 <_lseek>
 80009f4:	1c43      	adds	r3, r0, #1
 80009f6:	d102      	bne.n	80009fe <_lseek_r+0x1e>
 80009f8:	682b      	ldr	r3, [r5, #0]
 80009fa:	b103      	cbz	r3, 80009fe <_lseek_r+0x1e>
 80009fc:	6023      	str	r3, [r4, #0]
 80009fe:	bd38      	pop	{r3, r4, r5, pc}
 8000a00:	200001b8 	.word	0x200001b8

08000a04 <_read_r>:
 8000a04:	b538      	push	{r3, r4, r5, lr}
 8000a06:	4d07      	ldr	r5, [pc, #28]	@ (8000a24 <_read_r+0x20>)
 8000a08:	4604      	mov	r4, r0
 8000a0a:	4608      	mov	r0, r1
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	2200      	movs	r2, #0
 8000a10:	602a      	str	r2, [r5, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	f7ff fc3e 	bl	8000294 <_read>
 8000a18:	1c43      	adds	r3, r0, #1
 8000a1a:	d102      	bne.n	8000a22 <_read_r+0x1e>
 8000a1c:	682b      	ldr	r3, [r5, #0]
 8000a1e:	b103      	cbz	r3, 8000a22 <_read_r+0x1e>
 8000a20:	6023      	str	r3, [r4, #0]
 8000a22:	bd38      	pop	{r3, r4, r5, pc}
 8000a24:	200001b8 	.word	0x200001b8

08000a28 <_write_r>:
 8000a28:	b538      	push	{r3, r4, r5, lr}
 8000a2a:	4d07      	ldr	r5, [pc, #28]	@ (8000a48 <_write_r+0x20>)
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	4608      	mov	r0, r1
 8000a30:	4611      	mov	r1, r2
 8000a32:	2200      	movs	r2, #0
 8000a34:	602a      	str	r2, [r5, #0]
 8000a36:	461a      	mov	r2, r3
 8000a38:	f7ff fc49 	bl	80002ce <_write>
 8000a3c:	1c43      	adds	r3, r0, #1
 8000a3e:	d102      	bne.n	8000a46 <_write_r+0x1e>
 8000a40:	682b      	ldr	r3, [r5, #0]
 8000a42:	b103      	cbz	r3, 8000a46 <_write_r+0x1e>
 8000a44:	6023      	str	r3, [r4, #0]
 8000a46:	bd38      	pop	{r3, r4, r5, pc}
 8000a48:	200001b8 	.word	0x200001b8

08000a4c <__errno>:
 8000a4c:	4b01      	ldr	r3, [pc, #4]	@ (8000a54 <__errno+0x8>)
 8000a4e:	6818      	ldr	r0, [r3, #0]
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	2000000c 	.word	0x2000000c

08000a58 <__libc_init_array>:
 8000a58:	b570      	push	{r4, r5, r6, lr}
 8000a5a:	4d0d      	ldr	r5, [pc, #52]	@ (8000a90 <__libc_init_array+0x38>)
 8000a5c:	4c0d      	ldr	r4, [pc, #52]	@ (8000a94 <__libc_init_array+0x3c>)
 8000a5e:	1b64      	subs	r4, r4, r5
 8000a60:	10a4      	asrs	r4, r4, #2
 8000a62:	2600      	movs	r6, #0
 8000a64:	42a6      	cmp	r6, r4
 8000a66:	d109      	bne.n	8000a7c <__libc_init_array+0x24>
 8000a68:	4d0b      	ldr	r5, [pc, #44]	@ (8000a98 <__libc_init_array+0x40>)
 8000a6a:	4c0c      	ldr	r4, [pc, #48]	@ (8000a9c <__libc_init_array+0x44>)
 8000a6c:	f000 fa54 	bl	8000f18 <_init>
 8000a70:	1b64      	subs	r4, r4, r5
 8000a72:	10a4      	asrs	r4, r4, #2
 8000a74:	2600      	movs	r6, #0
 8000a76:	42a6      	cmp	r6, r4
 8000a78:	d105      	bne.n	8000a86 <__libc_init_array+0x2e>
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}
 8000a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a80:	4798      	blx	r3
 8000a82:	3601      	adds	r6, #1
 8000a84:	e7ee      	b.n	8000a64 <__libc_init_array+0xc>
 8000a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a8a:	4798      	blx	r3
 8000a8c:	3601      	adds	r6, #1
 8000a8e:	e7f2      	b.n	8000a76 <__libc_init_array+0x1e>
 8000a90:	08000f50 	.word	0x08000f50
 8000a94:	08000f50 	.word	0x08000f50
 8000a98:	08000f50 	.word	0x08000f50
 8000a9c:	08000f54 	.word	0x08000f54

08000aa0 <__retarget_lock_init_recursive>:
 8000aa0:	4770      	bx	lr

08000aa2 <__retarget_lock_acquire_recursive>:
 8000aa2:	4770      	bx	lr

08000aa4 <__retarget_lock_release_recursive>:
 8000aa4:	4770      	bx	lr
	...

08000aa8 <_free_r>:
 8000aa8:	b538      	push	{r3, r4, r5, lr}
 8000aaa:	4605      	mov	r5, r0
 8000aac:	2900      	cmp	r1, #0
 8000aae:	d041      	beq.n	8000b34 <_free_r+0x8c>
 8000ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ab4:	1f0c      	subs	r4, r1, #4
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	bfb8      	it	lt
 8000aba:	18e4      	addlt	r4, r4, r3
 8000abc:	f000 f8e0 	bl	8000c80 <__malloc_lock>
 8000ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8000b38 <_free_r+0x90>)
 8000ac2:	6813      	ldr	r3, [r2, #0]
 8000ac4:	b933      	cbnz	r3, 8000ad4 <_free_r+0x2c>
 8000ac6:	6063      	str	r3, [r4, #4]
 8000ac8:	6014      	str	r4, [r2, #0]
 8000aca:	4628      	mov	r0, r5
 8000acc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ad0:	f000 b8dc 	b.w	8000c8c <__malloc_unlock>
 8000ad4:	42a3      	cmp	r3, r4
 8000ad6:	d908      	bls.n	8000aea <_free_r+0x42>
 8000ad8:	6820      	ldr	r0, [r4, #0]
 8000ada:	1821      	adds	r1, r4, r0
 8000adc:	428b      	cmp	r3, r1
 8000ade:	bf01      	itttt	eq
 8000ae0:	6819      	ldreq	r1, [r3, #0]
 8000ae2:	685b      	ldreq	r3, [r3, #4]
 8000ae4:	1809      	addeq	r1, r1, r0
 8000ae6:	6021      	streq	r1, [r4, #0]
 8000ae8:	e7ed      	b.n	8000ac6 <_free_r+0x1e>
 8000aea:	461a      	mov	r2, r3
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	b10b      	cbz	r3, 8000af4 <_free_r+0x4c>
 8000af0:	42a3      	cmp	r3, r4
 8000af2:	d9fa      	bls.n	8000aea <_free_r+0x42>
 8000af4:	6811      	ldr	r1, [r2, #0]
 8000af6:	1850      	adds	r0, r2, r1
 8000af8:	42a0      	cmp	r0, r4
 8000afa:	d10b      	bne.n	8000b14 <_free_r+0x6c>
 8000afc:	6820      	ldr	r0, [r4, #0]
 8000afe:	4401      	add	r1, r0
 8000b00:	1850      	adds	r0, r2, r1
 8000b02:	4283      	cmp	r3, r0
 8000b04:	6011      	str	r1, [r2, #0]
 8000b06:	d1e0      	bne.n	8000aca <_free_r+0x22>
 8000b08:	6818      	ldr	r0, [r3, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	6053      	str	r3, [r2, #4]
 8000b0e:	4408      	add	r0, r1
 8000b10:	6010      	str	r0, [r2, #0]
 8000b12:	e7da      	b.n	8000aca <_free_r+0x22>
 8000b14:	d902      	bls.n	8000b1c <_free_r+0x74>
 8000b16:	230c      	movs	r3, #12
 8000b18:	602b      	str	r3, [r5, #0]
 8000b1a:	e7d6      	b.n	8000aca <_free_r+0x22>
 8000b1c:	6820      	ldr	r0, [r4, #0]
 8000b1e:	1821      	adds	r1, r4, r0
 8000b20:	428b      	cmp	r3, r1
 8000b22:	bf04      	itt	eq
 8000b24:	6819      	ldreq	r1, [r3, #0]
 8000b26:	685b      	ldreq	r3, [r3, #4]
 8000b28:	6063      	str	r3, [r4, #4]
 8000b2a:	bf04      	itt	eq
 8000b2c:	1809      	addeq	r1, r1, r0
 8000b2e:	6021      	streq	r1, [r4, #0]
 8000b30:	6054      	str	r4, [r2, #4]
 8000b32:	e7ca      	b.n	8000aca <_free_r+0x22>
 8000b34:	bd38      	pop	{r3, r4, r5, pc}
 8000b36:	bf00      	nop
 8000b38:	200001c4 	.word	0x200001c4

08000b3c <sbrk_aligned>:
 8000b3c:	b570      	push	{r4, r5, r6, lr}
 8000b3e:	4e0f      	ldr	r6, [pc, #60]	@ (8000b7c <sbrk_aligned+0x40>)
 8000b40:	460c      	mov	r4, r1
 8000b42:	6831      	ldr	r1, [r6, #0]
 8000b44:	4605      	mov	r5, r0
 8000b46:	b911      	cbnz	r1, 8000b4e <sbrk_aligned+0x12>
 8000b48:	f000 f9d6 	bl	8000ef8 <_sbrk_r>
 8000b4c:	6030      	str	r0, [r6, #0]
 8000b4e:	4621      	mov	r1, r4
 8000b50:	4628      	mov	r0, r5
 8000b52:	f000 f9d1 	bl	8000ef8 <_sbrk_r>
 8000b56:	1c43      	adds	r3, r0, #1
 8000b58:	d103      	bne.n	8000b62 <sbrk_aligned+0x26>
 8000b5a:	f04f 34ff 	mov.w	r4, #4294967295
 8000b5e:	4620      	mov	r0, r4
 8000b60:	bd70      	pop	{r4, r5, r6, pc}
 8000b62:	1cc4      	adds	r4, r0, #3
 8000b64:	f024 0403 	bic.w	r4, r4, #3
 8000b68:	42a0      	cmp	r0, r4
 8000b6a:	d0f8      	beq.n	8000b5e <sbrk_aligned+0x22>
 8000b6c:	1a21      	subs	r1, r4, r0
 8000b6e:	4628      	mov	r0, r5
 8000b70:	f000 f9c2 	bl	8000ef8 <_sbrk_r>
 8000b74:	3001      	adds	r0, #1
 8000b76:	d1f2      	bne.n	8000b5e <sbrk_aligned+0x22>
 8000b78:	e7ef      	b.n	8000b5a <sbrk_aligned+0x1e>
 8000b7a:	bf00      	nop
 8000b7c:	200001c0 	.word	0x200001c0

08000b80 <_malloc_r>:
 8000b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b84:	1ccd      	adds	r5, r1, #3
 8000b86:	f025 0503 	bic.w	r5, r5, #3
 8000b8a:	3508      	adds	r5, #8
 8000b8c:	2d0c      	cmp	r5, #12
 8000b8e:	bf38      	it	cc
 8000b90:	250c      	movcc	r5, #12
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	4606      	mov	r6, r0
 8000b96:	db01      	blt.n	8000b9c <_malloc_r+0x1c>
 8000b98:	42a9      	cmp	r1, r5
 8000b9a:	d904      	bls.n	8000ba6 <_malloc_r+0x26>
 8000b9c:	230c      	movs	r3, #12
 8000b9e:	6033      	str	r3, [r6, #0]
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ba6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c7c <_malloc_r+0xfc>
 8000baa:	f000 f869 	bl	8000c80 <__malloc_lock>
 8000bae:	f8d8 3000 	ldr.w	r3, [r8]
 8000bb2:	461c      	mov	r4, r3
 8000bb4:	bb44      	cbnz	r4, 8000c08 <_malloc_r+0x88>
 8000bb6:	4629      	mov	r1, r5
 8000bb8:	4630      	mov	r0, r6
 8000bba:	f7ff ffbf 	bl	8000b3c <sbrk_aligned>
 8000bbe:	1c43      	adds	r3, r0, #1
 8000bc0:	4604      	mov	r4, r0
 8000bc2:	d158      	bne.n	8000c76 <_malloc_r+0xf6>
 8000bc4:	f8d8 4000 	ldr.w	r4, [r8]
 8000bc8:	4627      	mov	r7, r4
 8000bca:	2f00      	cmp	r7, #0
 8000bcc:	d143      	bne.n	8000c56 <_malloc_r+0xd6>
 8000bce:	2c00      	cmp	r4, #0
 8000bd0:	d04b      	beq.n	8000c6a <_malloc_r+0xea>
 8000bd2:	6823      	ldr	r3, [r4, #0]
 8000bd4:	4639      	mov	r1, r7
 8000bd6:	4630      	mov	r0, r6
 8000bd8:	eb04 0903 	add.w	r9, r4, r3
 8000bdc:	f000 f98c 	bl	8000ef8 <_sbrk_r>
 8000be0:	4581      	cmp	r9, r0
 8000be2:	d142      	bne.n	8000c6a <_malloc_r+0xea>
 8000be4:	6821      	ldr	r1, [r4, #0]
 8000be6:	1a6d      	subs	r5, r5, r1
 8000be8:	4629      	mov	r1, r5
 8000bea:	4630      	mov	r0, r6
 8000bec:	f7ff ffa6 	bl	8000b3c <sbrk_aligned>
 8000bf0:	3001      	adds	r0, #1
 8000bf2:	d03a      	beq.n	8000c6a <_malloc_r+0xea>
 8000bf4:	6823      	ldr	r3, [r4, #0]
 8000bf6:	442b      	add	r3, r5
 8000bf8:	6023      	str	r3, [r4, #0]
 8000bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	bb62      	cbnz	r2, 8000c5c <_malloc_r+0xdc>
 8000c02:	f8c8 7000 	str.w	r7, [r8]
 8000c06:	e00f      	b.n	8000c28 <_malloc_r+0xa8>
 8000c08:	6822      	ldr	r2, [r4, #0]
 8000c0a:	1b52      	subs	r2, r2, r5
 8000c0c:	d420      	bmi.n	8000c50 <_malloc_r+0xd0>
 8000c0e:	2a0b      	cmp	r2, #11
 8000c10:	d917      	bls.n	8000c42 <_malloc_r+0xc2>
 8000c12:	1961      	adds	r1, r4, r5
 8000c14:	42a3      	cmp	r3, r4
 8000c16:	6025      	str	r5, [r4, #0]
 8000c18:	bf18      	it	ne
 8000c1a:	6059      	strne	r1, [r3, #4]
 8000c1c:	6863      	ldr	r3, [r4, #4]
 8000c1e:	bf08      	it	eq
 8000c20:	f8c8 1000 	streq.w	r1, [r8]
 8000c24:	5162      	str	r2, [r4, r5]
 8000c26:	604b      	str	r3, [r1, #4]
 8000c28:	4630      	mov	r0, r6
 8000c2a:	f000 f82f 	bl	8000c8c <__malloc_unlock>
 8000c2e:	f104 000b 	add.w	r0, r4, #11
 8000c32:	1d23      	adds	r3, r4, #4
 8000c34:	f020 0007 	bic.w	r0, r0, #7
 8000c38:	1ac2      	subs	r2, r0, r3
 8000c3a:	bf1c      	itt	ne
 8000c3c:	1a1b      	subne	r3, r3, r0
 8000c3e:	50a3      	strne	r3, [r4, r2]
 8000c40:	e7af      	b.n	8000ba2 <_malloc_r+0x22>
 8000c42:	6862      	ldr	r2, [r4, #4]
 8000c44:	42a3      	cmp	r3, r4
 8000c46:	bf0c      	ite	eq
 8000c48:	f8c8 2000 	streq.w	r2, [r8]
 8000c4c:	605a      	strne	r2, [r3, #4]
 8000c4e:	e7eb      	b.n	8000c28 <_malloc_r+0xa8>
 8000c50:	4623      	mov	r3, r4
 8000c52:	6864      	ldr	r4, [r4, #4]
 8000c54:	e7ae      	b.n	8000bb4 <_malloc_r+0x34>
 8000c56:	463c      	mov	r4, r7
 8000c58:	687f      	ldr	r7, [r7, #4]
 8000c5a:	e7b6      	b.n	8000bca <_malloc_r+0x4a>
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	42a3      	cmp	r3, r4
 8000c62:	d1fb      	bne.n	8000c5c <_malloc_r+0xdc>
 8000c64:	2300      	movs	r3, #0
 8000c66:	6053      	str	r3, [r2, #4]
 8000c68:	e7de      	b.n	8000c28 <_malloc_r+0xa8>
 8000c6a:	230c      	movs	r3, #12
 8000c6c:	6033      	str	r3, [r6, #0]
 8000c6e:	4630      	mov	r0, r6
 8000c70:	f000 f80c 	bl	8000c8c <__malloc_unlock>
 8000c74:	e794      	b.n	8000ba0 <_malloc_r+0x20>
 8000c76:	6005      	str	r5, [r0, #0]
 8000c78:	e7d6      	b.n	8000c28 <_malloc_r+0xa8>
 8000c7a:	bf00      	nop
 8000c7c:	200001c4 	.word	0x200001c4

08000c80 <__malloc_lock>:
 8000c80:	4801      	ldr	r0, [pc, #4]	@ (8000c88 <__malloc_lock+0x8>)
 8000c82:	f7ff bf0e 	b.w	8000aa2 <__retarget_lock_acquire_recursive>
 8000c86:	bf00      	nop
 8000c88:	200001bc 	.word	0x200001bc

08000c8c <__malloc_unlock>:
 8000c8c:	4801      	ldr	r0, [pc, #4]	@ (8000c94 <__malloc_unlock+0x8>)
 8000c8e:	f7ff bf09 	b.w	8000aa4 <__retarget_lock_release_recursive>
 8000c92:	bf00      	nop
 8000c94:	200001bc 	.word	0x200001bc

08000c98 <__sflush_r>:
 8000c98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ca0:	0716      	lsls	r6, r2, #28
 8000ca2:	4605      	mov	r5, r0
 8000ca4:	460c      	mov	r4, r1
 8000ca6:	d454      	bmi.n	8000d52 <__sflush_r+0xba>
 8000ca8:	684b      	ldr	r3, [r1, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	dc02      	bgt.n	8000cb4 <__sflush_r+0x1c>
 8000cae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	dd48      	ble.n	8000d46 <__sflush_r+0xae>
 8000cb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d045      	beq.n	8000d46 <__sflush_r+0xae>
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000cc0:	682f      	ldr	r7, [r5, #0]
 8000cc2:	6a21      	ldr	r1, [r4, #32]
 8000cc4:	602b      	str	r3, [r5, #0]
 8000cc6:	d030      	beq.n	8000d2a <__sflush_r+0x92>
 8000cc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000cca:	89a3      	ldrh	r3, [r4, #12]
 8000ccc:	0759      	lsls	r1, r3, #29
 8000cce:	d505      	bpl.n	8000cdc <__sflush_r+0x44>
 8000cd0:	6863      	ldr	r3, [r4, #4]
 8000cd2:	1ad2      	subs	r2, r2, r3
 8000cd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000cd6:	b10b      	cbz	r3, 8000cdc <__sflush_r+0x44>
 8000cd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000cda:	1ad2      	subs	r2, r2, r3
 8000cdc:	2300      	movs	r3, #0
 8000cde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000ce0:	6a21      	ldr	r1, [r4, #32]
 8000ce2:	4628      	mov	r0, r5
 8000ce4:	47b0      	blx	r6
 8000ce6:	1c43      	adds	r3, r0, #1
 8000ce8:	89a3      	ldrh	r3, [r4, #12]
 8000cea:	d106      	bne.n	8000cfa <__sflush_r+0x62>
 8000cec:	6829      	ldr	r1, [r5, #0]
 8000cee:	291d      	cmp	r1, #29
 8000cf0:	d82b      	bhi.n	8000d4a <__sflush_r+0xb2>
 8000cf2:	4a2a      	ldr	r2, [pc, #168]	@ (8000d9c <__sflush_r+0x104>)
 8000cf4:	410a      	asrs	r2, r1
 8000cf6:	07d6      	lsls	r6, r2, #31
 8000cf8:	d427      	bmi.n	8000d4a <__sflush_r+0xb2>
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	6062      	str	r2, [r4, #4]
 8000cfe:	04d9      	lsls	r1, r3, #19
 8000d00:	6922      	ldr	r2, [r4, #16]
 8000d02:	6022      	str	r2, [r4, #0]
 8000d04:	d504      	bpl.n	8000d10 <__sflush_r+0x78>
 8000d06:	1c42      	adds	r2, r0, #1
 8000d08:	d101      	bne.n	8000d0e <__sflush_r+0x76>
 8000d0a:	682b      	ldr	r3, [r5, #0]
 8000d0c:	b903      	cbnz	r3, 8000d10 <__sflush_r+0x78>
 8000d0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8000d10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000d12:	602f      	str	r7, [r5, #0]
 8000d14:	b1b9      	cbz	r1, 8000d46 <__sflush_r+0xae>
 8000d16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000d1a:	4299      	cmp	r1, r3
 8000d1c:	d002      	beq.n	8000d24 <__sflush_r+0x8c>
 8000d1e:	4628      	mov	r0, r5
 8000d20:	f7ff fec2 	bl	8000aa8 <_free_r>
 8000d24:	2300      	movs	r3, #0
 8000d26:	6363      	str	r3, [r4, #52]	@ 0x34
 8000d28:	e00d      	b.n	8000d46 <__sflush_r+0xae>
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	4628      	mov	r0, r5
 8000d2e:	47b0      	blx	r6
 8000d30:	4602      	mov	r2, r0
 8000d32:	1c50      	adds	r0, r2, #1
 8000d34:	d1c9      	bne.n	8000cca <__sflush_r+0x32>
 8000d36:	682b      	ldr	r3, [r5, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d0c6      	beq.n	8000cca <__sflush_r+0x32>
 8000d3c:	2b1d      	cmp	r3, #29
 8000d3e:	d001      	beq.n	8000d44 <__sflush_r+0xac>
 8000d40:	2b16      	cmp	r3, #22
 8000d42:	d11e      	bne.n	8000d82 <__sflush_r+0xea>
 8000d44:	602f      	str	r7, [r5, #0]
 8000d46:	2000      	movs	r0, #0
 8000d48:	e022      	b.n	8000d90 <__sflush_r+0xf8>
 8000d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d4e:	b21b      	sxth	r3, r3
 8000d50:	e01b      	b.n	8000d8a <__sflush_r+0xf2>
 8000d52:	690f      	ldr	r7, [r1, #16]
 8000d54:	2f00      	cmp	r7, #0
 8000d56:	d0f6      	beq.n	8000d46 <__sflush_r+0xae>
 8000d58:	0793      	lsls	r3, r2, #30
 8000d5a:	680e      	ldr	r6, [r1, #0]
 8000d5c:	bf08      	it	eq
 8000d5e:	694b      	ldreq	r3, [r1, #20]
 8000d60:	600f      	str	r7, [r1, #0]
 8000d62:	bf18      	it	ne
 8000d64:	2300      	movne	r3, #0
 8000d66:	eba6 0807 	sub.w	r8, r6, r7
 8000d6a:	608b      	str	r3, [r1, #8]
 8000d6c:	f1b8 0f00 	cmp.w	r8, #0
 8000d70:	dde9      	ble.n	8000d46 <__sflush_r+0xae>
 8000d72:	6a21      	ldr	r1, [r4, #32]
 8000d74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000d76:	4643      	mov	r3, r8
 8000d78:	463a      	mov	r2, r7
 8000d7a:	4628      	mov	r0, r5
 8000d7c:	47b0      	blx	r6
 8000d7e:	2800      	cmp	r0, #0
 8000d80:	dc08      	bgt.n	8000d94 <__sflush_r+0xfc>
 8000d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d8a:	81a3      	strh	r3, [r4, #12]
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d94:	4407      	add	r7, r0
 8000d96:	eba8 0800 	sub.w	r8, r8, r0
 8000d9a:	e7e7      	b.n	8000d6c <__sflush_r+0xd4>
 8000d9c:	dfbffffe 	.word	0xdfbffffe

08000da0 <_fflush_r>:
 8000da0:	b538      	push	{r3, r4, r5, lr}
 8000da2:	690b      	ldr	r3, [r1, #16]
 8000da4:	4605      	mov	r5, r0
 8000da6:	460c      	mov	r4, r1
 8000da8:	b913      	cbnz	r3, 8000db0 <_fflush_r+0x10>
 8000daa:	2500      	movs	r5, #0
 8000dac:	4628      	mov	r0, r5
 8000dae:	bd38      	pop	{r3, r4, r5, pc}
 8000db0:	b118      	cbz	r0, 8000dba <_fflush_r+0x1a>
 8000db2:	6a03      	ldr	r3, [r0, #32]
 8000db4:	b90b      	cbnz	r3, 8000dba <_fflush_r+0x1a>
 8000db6:	f7ff fc8f 	bl	80006d8 <__sinit>
 8000dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d0f3      	beq.n	8000daa <_fflush_r+0xa>
 8000dc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000dc4:	07d0      	lsls	r0, r2, #31
 8000dc6:	d404      	bmi.n	8000dd2 <_fflush_r+0x32>
 8000dc8:	0599      	lsls	r1, r3, #22
 8000dca:	d402      	bmi.n	8000dd2 <_fflush_r+0x32>
 8000dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000dce:	f7ff fe68 	bl	8000aa2 <__retarget_lock_acquire_recursive>
 8000dd2:	4628      	mov	r0, r5
 8000dd4:	4621      	mov	r1, r4
 8000dd6:	f7ff ff5f 	bl	8000c98 <__sflush_r>
 8000dda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000ddc:	07da      	lsls	r2, r3, #31
 8000dde:	4605      	mov	r5, r0
 8000de0:	d4e4      	bmi.n	8000dac <_fflush_r+0xc>
 8000de2:	89a3      	ldrh	r3, [r4, #12]
 8000de4:	059b      	lsls	r3, r3, #22
 8000de6:	d4e1      	bmi.n	8000dac <_fflush_r+0xc>
 8000de8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000dea:	f7ff fe5b 	bl	8000aa4 <__retarget_lock_release_recursive>
 8000dee:	e7dd      	b.n	8000dac <_fflush_r+0xc>

08000df0 <__swhatbuf_r>:
 8000df0:	b570      	push	{r4, r5, r6, lr}
 8000df2:	460c      	mov	r4, r1
 8000df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000df8:	2900      	cmp	r1, #0
 8000dfa:	b096      	sub	sp, #88	@ 0x58
 8000dfc:	4615      	mov	r5, r2
 8000dfe:	461e      	mov	r6, r3
 8000e00:	da0d      	bge.n	8000e1e <__swhatbuf_r+0x2e>
 8000e02:	89a3      	ldrh	r3, [r4, #12]
 8000e04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000e08:	f04f 0100 	mov.w	r1, #0
 8000e0c:	bf14      	ite	ne
 8000e0e:	2340      	movne	r3, #64	@ 0x40
 8000e10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000e14:	2000      	movs	r0, #0
 8000e16:	6031      	str	r1, [r6, #0]
 8000e18:	602b      	str	r3, [r5, #0]
 8000e1a:	b016      	add	sp, #88	@ 0x58
 8000e1c:	bd70      	pop	{r4, r5, r6, pc}
 8000e1e:	466a      	mov	r2, sp
 8000e20:	f000 f848 	bl	8000eb4 <_fstat_r>
 8000e24:	2800      	cmp	r0, #0
 8000e26:	dbec      	blt.n	8000e02 <__swhatbuf_r+0x12>
 8000e28:	9901      	ldr	r1, [sp, #4]
 8000e2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000e2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000e32:	4259      	negs	r1, r3
 8000e34:	4159      	adcs	r1, r3
 8000e36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e3a:	e7eb      	b.n	8000e14 <__swhatbuf_r+0x24>

08000e3c <__smakebuf_r>:
 8000e3c:	898b      	ldrh	r3, [r1, #12]
 8000e3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000e40:	079d      	lsls	r5, r3, #30
 8000e42:	4606      	mov	r6, r0
 8000e44:	460c      	mov	r4, r1
 8000e46:	d507      	bpl.n	8000e58 <__smakebuf_r+0x1c>
 8000e48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000e4c:	6023      	str	r3, [r4, #0]
 8000e4e:	6123      	str	r3, [r4, #16]
 8000e50:	2301      	movs	r3, #1
 8000e52:	6163      	str	r3, [r4, #20]
 8000e54:	b003      	add	sp, #12
 8000e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e58:	ab01      	add	r3, sp, #4
 8000e5a:	466a      	mov	r2, sp
 8000e5c:	f7ff ffc8 	bl	8000df0 <__swhatbuf_r>
 8000e60:	9f00      	ldr	r7, [sp, #0]
 8000e62:	4605      	mov	r5, r0
 8000e64:	4639      	mov	r1, r7
 8000e66:	4630      	mov	r0, r6
 8000e68:	f7ff fe8a 	bl	8000b80 <_malloc_r>
 8000e6c:	b948      	cbnz	r0, 8000e82 <__smakebuf_r+0x46>
 8000e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e72:	059a      	lsls	r2, r3, #22
 8000e74:	d4ee      	bmi.n	8000e54 <__smakebuf_r+0x18>
 8000e76:	f023 0303 	bic.w	r3, r3, #3
 8000e7a:	f043 0302 	orr.w	r3, r3, #2
 8000e7e:	81a3      	strh	r3, [r4, #12]
 8000e80:	e7e2      	b.n	8000e48 <__smakebuf_r+0xc>
 8000e82:	89a3      	ldrh	r3, [r4, #12]
 8000e84:	6020      	str	r0, [r4, #0]
 8000e86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e8a:	81a3      	strh	r3, [r4, #12]
 8000e8c:	9b01      	ldr	r3, [sp, #4]
 8000e8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000e92:	b15b      	cbz	r3, 8000eac <__smakebuf_r+0x70>
 8000e94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e98:	4630      	mov	r0, r6
 8000e9a:	f000 f81d 	bl	8000ed8 <_isatty_r>
 8000e9e:	b128      	cbz	r0, 8000eac <__smakebuf_r+0x70>
 8000ea0:	89a3      	ldrh	r3, [r4, #12]
 8000ea2:	f023 0303 	bic.w	r3, r3, #3
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	81a3      	strh	r3, [r4, #12]
 8000eac:	89a3      	ldrh	r3, [r4, #12]
 8000eae:	431d      	orrs	r5, r3
 8000eb0:	81a5      	strh	r5, [r4, #12]
 8000eb2:	e7cf      	b.n	8000e54 <__smakebuf_r+0x18>

08000eb4 <_fstat_r>:
 8000eb4:	b538      	push	{r3, r4, r5, lr}
 8000eb6:	4d07      	ldr	r5, [pc, #28]	@ (8000ed4 <_fstat_r+0x20>)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	4604      	mov	r4, r0
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	602b      	str	r3, [r5, #0]
 8000ec2:	f7ff fa2c 	bl	800031e <_fstat>
 8000ec6:	1c43      	adds	r3, r0, #1
 8000ec8:	d102      	bne.n	8000ed0 <_fstat_r+0x1c>
 8000eca:	682b      	ldr	r3, [r5, #0]
 8000ecc:	b103      	cbz	r3, 8000ed0 <_fstat_r+0x1c>
 8000ece:	6023      	str	r3, [r4, #0]
 8000ed0:	bd38      	pop	{r3, r4, r5, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200001b8 	.word	0x200001b8

08000ed8 <_isatty_r>:
 8000ed8:	b538      	push	{r3, r4, r5, lr}
 8000eda:	4d06      	ldr	r5, [pc, #24]	@ (8000ef4 <_isatty_r+0x1c>)
 8000edc:	2300      	movs	r3, #0
 8000ede:	4604      	mov	r4, r0
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	602b      	str	r3, [r5, #0]
 8000ee4:	f7ff fa2b 	bl	800033e <_isatty>
 8000ee8:	1c43      	adds	r3, r0, #1
 8000eea:	d102      	bne.n	8000ef2 <_isatty_r+0x1a>
 8000eec:	682b      	ldr	r3, [r5, #0]
 8000eee:	b103      	cbz	r3, 8000ef2 <_isatty_r+0x1a>
 8000ef0:	6023      	str	r3, [r4, #0]
 8000ef2:	bd38      	pop	{r3, r4, r5, pc}
 8000ef4:	200001b8 	.word	0x200001b8

08000ef8 <_sbrk_r>:
 8000ef8:	b538      	push	{r3, r4, r5, lr}
 8000efa:	4d06      	ldr	r5, [pc, #24]	@ (8000f14 <_sbrk_r+0x1c>)
 8000efc:	2300      	movs	r3, #0
 8000efe:	4604      	mov	r4, r0
 8000f00:	4608      	mov	r0, r1
 8000f02:	602b      	str	r3, [r5, #0]
 8000f04:	f7ff fa34 	bl	8000370 <_sbrk>
 8000f08:	1c43      	adds	r3, r0, #1
 8000f0a:	d102      	bne.n	8000f12 <_sbrk_r+0x1a>
 8000f0c:	682b      	ldr	r3, [r5, #0]
 8000f0e:	b103      	cbz	r3, 8000f12 <_sbrk_r+0x1a>
 8000f10:	6023      	str	r3, [r4, #0]
 8000f12:	bd38      	pop	{r3, r4, r5, pc}
 8000f14:	200001b8 	.word	0x200001b8

08000f18 <_init>:
 8000f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f1a:	bf00      	nop
 8000f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f1e:	bc08      	pop	{r3}
 8000f20:	469e      	mov	lr, r3
 8000f22:	4770      	bx	lr

08000f24 <_fini>:
 8000f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f26:	bf00      	nop
 8000f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f2a:	bc08      	pop	{r3}
 8000f2c:	469e      	mov	lr, r3
 8000f2e:	4770      	bx	lr
